
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  0800813c  0800813c  0001813c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800884c  0800884c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800884c  0800884c  0001884c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008854  08008854  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008858  08008858  00018858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800885c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000070  080088cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  080088cc  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015988  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a4  00000000  00000000  00035a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  000390d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003a3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1a3  00000000  00000000  0003b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b170  00000000  00000000  000556e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976c6  00000000  00000000  00070853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107f19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b0  00000000  00000000  00107f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008124 	.word	0x08008124

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08008124 	.word	0x08008124

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4613      	mov	r3, r2
 80005c0:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2200      	movs	r2, #0
 80005cc:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2200      	movs	r2, #0
 80005d2:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	79fa      	ldrb	r2, [r7, #7]
 80005d8:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	461a      	mov	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f006 fc37 	bl	8006e58 <memset>
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	70fb      	strb	r3, [r7, #3]
	if (cBuffer_Length(cbuffer) == cbuffer->size-1)
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f8c4 	bl	800078c <cBuffer_Length>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	3b01      	subs	r3, #1
 800060e:	429a      	cmp	r2, r3
 8000610:	d101      	bne.n	8000616 <cBuffer_Write+0x24>
	{
		return CBUFFER_FULL;
 8000612:	2301      	movs	r3, #1
 8000614:	e016      	b.n	8000644 <cBuffer_Write+0x52>
	}
	cbuffer->buffer[cbuffer->write] = data;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	7992      	ldrb	r2, [r2, #6]
 800061e:	4413      	add	r3, r2
 8000620:	78fa      	ldrb	r2, [r7, #3]
 8000622:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	799b      	ldrb	r3, [r3, #6]
 8000628:	3301      	adds	r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	b25a      	sxtb	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	3b01      	subs	r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	b25b      	sxtb	r3, r3
 8000638:	4013      	ands	r3, r2
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <cBuffer_Kill>:

void cBuffer_Kill(cBuffer_t* cbuffer)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	cbuffer->read = 0;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	719a      	strb	r2, [r3, #6]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	461a      	mov	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f006 fbf4 	bl	8006e58 <memset>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <cBuffer_isFull>:

CBUFFER_ERR cBuffer_isFull(cBuffer_t* cbuffer)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if (cBuffer_Length(cbuffer) == cbuffer->size-1)
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 f883 	bl	800078c <cBuffer_Length>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	429a      	cmp	r2, r3
 8000692:	d101      	bne.n	8000698 <cBuffer_isFull+0x20>
	{
			return CBUFFER_FULL;
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <cBuffer_isFull+0x22>
	}
	else
		return CBUFFER_OK;
 8000698:	2300      	movs	r3, #0

}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4613      	mov	r3, r2
 80006b0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 80006b6:	2300      	movs	r3, #0
 80006b8:	757b      	strb	r3, [r7, #21]
	for (i=cbuffer->read; i < cbuffer->write;i++)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	795b      	ldrb	r3, [r3, #5]
 80006be:	75fb      	strb	r3, [r7, #23]
 80006c0:	e00c      	b.n	80006dc <cBuffer_GetString+0x3a>
	{
		//if (cbuffer->buffer[i] == sTerminator) // A string is found - copy it to the outgoing buffer
		if (cbuffer->buffer[i] == '\r') // A string is found - copy it to the outgoing buffer
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b0d      	cmp	r3, #13
 80006ce:	d102      	bne.n	80006d6 <cBuffer_GetString+0x34>
		{
			found = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	75bb      	strb	r3, [r7, #22]
			break;
 80006d4:	e007      	b.n	80006e6 <cBuffer_GetString+0x44>
	for (i=cbuffer->read; i < cbuffer->write;i++)
 80006d6:	7dfb      	ldrb	r3, [r7, #23]
 80006d8:	3301      	adds	r3, #1
 80006da:	75fb      	strb	r3, [r7, #23]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	799b      	ldrb	r3, [r3, #6]
 80006e0:	7dfa      	ldrb	r2, [r7, #23]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d3ed      	bcc.n	80006c2 <cBuffer_GetString+0x20>
		}
	}
	if (found)
 80006e6:	7dbb      	ldrb	r3, [r7, #22]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d01f      	beq.n	800072c <cBuffer_GetString+0x8a>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, i);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	795b      	ldrb	r3, [r3, #5]
 80006f0:	7dfa      	ldrb	r2, [r7, #23]
 80006f2:	4619      	mov	r1, r3
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 f862 	bl	80007be <cBuffer_LengthCustom>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f000 f816 	bl	800073a <cBuffer_Read>
 800070e:	4603      	mov	r3, r0
 8000710:	757b      	strb	r3, [r7, #21]
			*(string++) = chr;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	60ba      	str	r2, [r7, #8]
 8000718:	7d3a      	ldrb	r2, [r7, #20]
 800071a:	701a      	strb	r2, [r3, #0]
		} while (chr != sTerminator || err != CBUFFER_OK);
 800071c:	7d3b      	ldrb	r3, [r7, #20]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	429a      	cmp	r2, r3
 8000722:	d1ee      	bne.n	8000702 <cBuffer_GetString+0x60>
 8000724:	7d7b      	ldrb	r3, [r7, #21]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1eb      	bne.n	8000702 <cBuffer_GetString+0x60>
 800072a:	e001      	b.n	8000730 <cBuffer_GetString+0x8e>
	}
	else
		err = CBUFFER_NO_STRING;
 800072c:	2303      	movs	r3, #3
 800072e:	757b      	strb	r3, [r7, #21]


	return err;
 8000730:	7d7b      	ldrb	r3, [r7, #21]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f821 	bl	800078c <cBuffer_Length>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8000750:	2302      	movs	r3, #2
 8000752:	e017      	b.n	8000784 <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7952      	ldrb	r2, [r2, #5]
 800075c:	4413      	add	r3, r2
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	795b      	ldrb	r3, [r3, #5]
 8000768:	3301      	adds	r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	b25a      	sxtb	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	b25b      	sxtb	r3, r3
 8000778:	4013      	ands	r3, r2
 800077a:	b25b      	sxtb	r3, r3
 800077c:	b2da      	uxtb	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	799a      	ldrb	r2, [r3, #6]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	b25a      	sxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	b2db      	uxtb	r3, r3

}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	70fb      	strb	r3, [r7, #3]
 80007ca:	4613      	mov	r3, r2
 80007cc:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80007ce:	78ba      	ldrb	r2, [r7, #2]
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	b25a      	sxtb	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	3b01      	subs	r3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	4013      	ands	r3, r2
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 80007fe:	2120      	movs	r1, #32
 8000800:	6838      	ldr	r0, [r7, #0]
 8000802:	f006 fb7f 	bl	8006f04 <strchr>
 8000806:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10b      	bne.n	8000826 <ConsoleCommandMatch+0x32>
	{
			r =  strcmp(name,buffer) == 0;
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff fce5 	bl	80001e0 <strcmp>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf0c      	ite	eq
 800081c:	2301      	moveq	r3, #1
 800081e:	2300      	movne	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	e00f      	b.n	8000846 <ConsoleCommandMatch+0x52>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fce4 	bl	80001f4 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	6839      	ldr	r1, [r7, #0]
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f006 fb7b 	bl	8006f2e <strncmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	60fb      	str	r3, [r7, #12]
	}

	return r;
 8000846:	68fb      	ldr	r3, [r7, #12]

}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <ConsoleInit>:
}

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000856:	f000 fb6f 	bl	8000f38 <ConsoleIoInit>
	ConsoleIoSendString("Dodec Timer - A Thousand Projects");
 800085a:	480e      	ldr	r0, [pc, #56]	; (8000894 <ConsoleInit+0x44>)
 800085c:	f000 fbb0 	bl	8000fc0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <ConsoleInit+0x48>)
 8000862:	f000 fbad 	bl	8000fc0 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <ConsoleInit+0x4c>)
 8000868:	f000 fbaa 	bl	8000fc0 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	e007      	b.n	8000882 <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <ConsoleInit+0x50>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b63      	cmp	r3, #99	; 0x63
 8000886:	d9f4      	bls.n	8000872 <ConsoleInit+0x22>
	}

}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	0800813c 	.word	0x0800813c
 8000898:	08008160 	.word	0x08008160
 800089c:	08008164 	.word	0x08008164
 80008a0:	2000008c 	.word	0x2000008c

080008a4 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;


	if (ConsoleIoReceive(mReceiveBuffer) == CONSOLE_SUCCESS )  // have complete string, find command
 80008aa:	483d      	ldr	r0, [pc, #244]	; (80009a0 <ConsoleProcess+0xfc>)
 80008ac:	f000 fb5c 	bl	8000f68 <ConsoleIoReceive>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d170      	bne.n	8000998 <ConsoleProcess+0xf4>
	{
		if ('\0' == mReceiveBuffer[0] )
 80008b6:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <ConsoleProcess+0xfc>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d106      	bne.n	80008cc <ConsoleProcess+0x28>
		{
			ConsoleIoSendString(STR_ENDLINE);
 80008be:	4839      	ldr	r0, [pc, #228]	; (80009a4 <ConsoleProcess+0x100>)
 80008c0:	f000 fb7e 	bl	8000fc0 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 80008c4:	4838      	ldr	r0, [pc, #224]	; (80009a8 <ConsoleProcess+0x104>)
 80008c6:	f000 fb7b 	bl	8000fc0 <ConsoleIoSendString>
			return;
 80008ca:	e065      	b.n	8000998 <ConsoleProcess+0xf4>
		}
		commandTable = ConsoleCommandsGetTable();
 80008cc:	f000 fb0c 	bl	8000ee8 <ConsoleCommandsGetTable>
 80008d0:	6078      	str	r0, [r7, #4]
		cmdIndex = 0u;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
		found = NOT_FOUND;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	60bb      	str	r3, [r7, #8]
		while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80008dc:	e03d      	b.n	800095a <ConsoleProcess+0xb6>
		{
			if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	4613      	mov	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	4413      	add	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	492b      	ldr	r1, [pc, #172]	; (80009a0 <ConsoleProcess+0xfc>)
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff7e 	bl	80007f4 <ConsoleCommandMatch>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d02a      	beq.n	8000954 <ConsoleProcess+0xb0>
			{
				result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	4613      	mov	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	4413      	add	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	461a      	mov	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	4823      	ldr	r0, [pc, #140]	; (80009a0 <ConsoleProcess+0xfc>)
 8000912:	4798      	blx	r3
 8000914:	4603      	mov	r3, r0
 8000916:	70fb      	strb	r3, [r7, #3]
				if ( COMMAND_SUCCESS != result )
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d017      	beq.n	800094e <ConsoleProcess+0xaa>
				{
					ConsoleIoSendString("Error: ");
 800091e:	4823      	ldr	r0, [pc, #140]	; (80009ac <ConsoleProcess+0x108>)
 8000920:	f000 fb4e 	bl	8000fc0 <ConsoleIoSendString>
					ConsoleIoSendString((char*)mReceiveBuffer);
 8000924:	481e      	ldr	r0, [pc, #120]	; (80009a0 <ConsoleProcess+0xfc>)
 8000926:	f000 fb4b 	bl	8000fc0 <ConsoleIoSendString>

					ConsoleIoSendString("Help: ");
 800092a:	4821      	ldr	r0, [pc, #132]	; (80009b0 <ConsoleProcess+0x10c>)
 800092c:	f000 fb48 	bl	8000fc0 <ConsoleIoSendString>
					ConsoleIoSendString(commandTable[cmdIndex].help);
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4613      	mov	r3, r2
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	4413      	add	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	3308      	adds	r3, #8
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fb3c 	bl	8000fc0 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000948:	4816      	ldr	r0, [pc, #88]	; (80009a4 <ConsoleProcess+0x100>)
 800094a:	f000 fb39 	bl	8000fc0 <ConsoleIoSendString>
				}
				found = cmdIndex;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	e002      	b.n	800095a <ConsoleProcess+0xb6>
			}
			else
			{
				cmdIndex++;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3301      	adds	r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
		while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4613      	mov	r3, r2
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	4413      	add	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <ConsoleProcess+0xd4>
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000976:	d0b2      	beq.n	80008de <ConsoleProcess+0x3a>
			}
		}
		if (found == NOT_FOUND)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097e:	d105      	bne.n	800098c <ConsoleProcess+0xe8>
		{
			ConsoleIoSendString("Command not found: ");
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <ConsoleProcess+0x110>)
 8000982:	f000 fb1d 	bl	8000fc0 <ConsoleIoSendString>
			ConsoleIoSendString((char*)mReceiveBuffer);
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <ConsoleProcess+0xfc>)
 8000988:	f000 fb1a 	bl	8000fc0 <ConsoleIoSendString>

		}
		ConsoleIoSendString(STR_ENDLINE);
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <ConsoleProcess+0x100>)
 800098e:	f000 fb17 	bl	8000fc0 <ConsoleIoSendString>
		ConsoleIoSendString(CONSOLE_PROMPT);
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <ConsoleProcess+0x104>)
 8000994:	f000 fb14 	bl	8000fc0 <ConsoleIoSendString>
	}
}
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	08008160 	.word	0x08008160
 80009a8:	08008164 	.word	0x08008164
 80009ac:	08008168 	.word	0x08008168
 80009b0:	08008170 	.word	0x08008170
 80009b4:	08008178 	.word	0x08008178

080009b8 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	460b      	mov	r3, r1
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80009ce:	2300      	movs	r3, #0
 80009d0:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80009d2:	e00b      	b.n	80009ec <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b20      	cmp	r3, #32
 80009de:	d102      	bne.n	80009e6 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	3301      	adds	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3301      	adds	r3, #1
 80009ea:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80009ec:	7afb      	ldrb	r3, [r7, #11]
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d002      	beq.n	80009fa <ConsoleParamFindN+0x42>
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	2b63      	cmp	r3, #99	; 0x63
 80009f8:	d9ec      	bls.n	80009d4 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	2b64      	cmp	r3, #100	; 0x64
 80009fe:	d102      	bne.n	8000a06 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a00:	2310      	movs	r3, #16
 8000a02:	75fb      	strb	r3, [r7, #23]
 8000a04:	e002      	b.n	8000a0c <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69fa      	ldr	r2, [r7, #28]
 8000a0a:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b08a      	sub	sp, #40	; 0x28
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	60f8      	str	r0, [r7, #12]
 8000a22:	460b      	mov	r3, r1
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000a2c:	f107 021c 	add.w	r2, r7, #28
 8000a30:	7afb      	ldrb	r3, [r7, #11]
 8000a32:	4619      	mov	r1, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff ffbf 	bl	80009b8 <ConsoleParamFindN>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8000a44:	69fa      	ldr	r2, [r7, #28]
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	4413      	add	r3, r2
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 8000a54:	e011      	b.n	8000a7a <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000a56:	f107 0214 	add.w	r2, r7, #20
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	4413      	add	r3, r2
 8000a5e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000a62:	701a      	strb	r2, [r3, #0]
		i++;
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	3301      	adds	r3, #1
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	4413      	add	r3, r2
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 8000a7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d006      	beq.n	8000a90 <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 8000a82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a86:	2b20      	cmp	r3, #32
 8000a88:	d002      	beq.n	8000a90 <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	2b07      	cmp	r3, #7
 8000a8e:	d9e2      	bls.n	8000a56 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	d102      	bne.n	8000a9c <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a96:	2310      	movs	r3, #16
 8000a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d11a      	bne.n	8000ada <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8000aa4:	f107 0214 	add.w	r2, r7, #20
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	4413      	add	r3, r2
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 faf4 	bl	80010a2 <isNumber>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d009      	beq.n	8000ad4 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f006 f999 	bl	8006dfc <atoi>
 8000aca:	4603      	mov	r3, r0
 8000acc:	b21a      	sxth	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	801a      	strh	r2, [r3, #0]
 8000ad2:	e002      	b.n	8000ada <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}


	return result;
 8000ada:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3728      	adds	r7, #40	; 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fa66 	bl	8000fc0 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 fa59 	bl	8000fc0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <ConsoleSendLine+0x20>)
 8000b10:	f000 fa56 	bl	8000fc0 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	08008160 	.word	0x08008160

08000b24 <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	461a      	mov	r2, r3
 8000b32:	2101      	movs	r1, #1
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff3f 	bl	80009b8 <ConsoleParamFindN>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 8000b3e:	7ffb      	ldrb	r3, [r7, #31]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 8000b44:	2310      	movs	r3, #16
 8000b46:	e049      	b.n	8000bdc <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	18d0      	adds	r0, r2, r3
 8000b4e:	f107 0114 	add.w	r1, r7, #20
 8000b52:	f107 0218 	add.w	r2, r7, #24
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	4921      	ldr	r1, [pc, #132]	; (8000be4 <ConsoleCommandDateSet+0xc0>)
 8000b60:	f006 f9a2 	bl	8006ea8 <siscanf>

	if (!IS_RTC_DATE(day) )
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <ConsoleCommandDateSet+0x4c>
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	d904      	bls.n	8000b7a <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 8000b70:	481d      	ldr	r0, [pc, #116]	; (8000be8 <ConsoleCommandDateSet+0xc4>)
 8000b72:	f7ff ffc5 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000b76:	2310      	movs	r3, #16
 8000b78:	e030      	b.n	8000bdc <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <ConsoleCommandDateSet+0x62>
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	2b0c      	cmp	r3, #12
 8000b84:	d904      	bls.n	8000b90 <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 8000b86:	4819      	ldr	r0, [pc, #100]	; (8000bec <ConsoleCommandDateSet+0xc8>)
 8000b88:	f7ff ffba 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	e025      	b.n	8000bdc <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	2b63      	cmp	r3, #99	; 0x63
 8000b94:	d904      	bls.n	8000ba0 <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8000b96:	4816      	ldr	r0, [pc, #88]	; (8000bf0 <ConsoleCommandDateSet+0xcc>)
 8000b98:	f7ff ffb2 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	e01d      	b.n	8000bdc <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <ConsoleCommandDateSet+0xd0>)
 8000bc0:	f003 fe06 	bl	80047d0 <HAL_RTC_SetDate>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d004      	beq.n	8000bd4 <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 8000bca:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <ConsoleCommandDateSet+0xd4>)
 8000bcc:	f7ff ff98 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	e003      	b.n	8000bdc <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <ConsoleCommandDateSet+0xd8>)
 8000bd6:	f7ff ff93 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8000bda:	2300      	movs	r3, #0
	}
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	080081cc 	.word	0x080081cc
 8000be8:	080081d8 	.word	0x080081d8
 8000bec:	080081fc 	.word	0x080081fc
 8000bf0:	08008220 	.word	0x08008220
 8000bf4:	20000190 	.word	0x20000190
 8000bf8:	08008244 	.word	0x08008244
 8000bfc:	08008268 	.word	0x08008268

08000c00 <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2101      	movs	r1, #1
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fed1 	bl	80009b8 <ConsoleParamFindN>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 8000c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 8000c24:	2310      	movs	r3, #16
 8000c26:	e041      	b.n	8000cac <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	18d0      	adds	r0, r2, r3
 8000c2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	491d      	ldr	r1, [pc, #116]	; (8000cb4 <ConsoleCommandTimeSet+0xb4>)
 8000c40:	f006 f932 	bl	8006ea8 <siscanf>

	if (!IS_RTC_MINUTES(min) )
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	2b3b      	cmp	r3, #59	; 0x3b
 8000c48:	d904      	bls.n	8000c54 <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 8000c4a:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <ConsoleCommandTimeSet+0xb8>)
 8000c4c:	f7ff ff58 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000c50:	2310      	movs	r3, #16
 8000c52:	e02b      	b.n	8000cac <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	2b3b      	cmp	r3, #59	; 0x3b
 8000c58:	d904      	bls.n	8000c64 <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 8000c5a:	4818      	ldr	r0, [pc, #96]	; (8000cbc <ConsoleCommandTimeSet+0xbc>)
 8000c5c:	f7ff ff50 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000c60:	2310      	movs	r3, #16
 8000c62:	e023      	b.n	8000cac <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	2b17      	cmp	r3, #23
 8000c68:	d904      	bls.n	8000c74 <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 8000c6a:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <ConsoleCommandTimeSet+0xc0>)
 8000c6c:	f7ff ff48 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000c70:	2310      	movs	r3, #16
 8000c72:	e01b      	b.n	8000cac <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 8000c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 8000c80:	6a3b      	ldr	r3, [r7, #32]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <ConsoleCommandTimeSet+0xc4>)
 8000c90:	f003 fca6 	bl	80045e0 <HAL_RTC_SetTime>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d004      	beq.n	8000ca4 <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <ConsoleCommandTimeSet+0xc8>)
 8000c9c:	f7ff ff30 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	e003      	b.n	8000cac <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <ConsoleCommandTimeSet+0xcc>)
 8000ca6:	f7ff ff2b 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8000caa:	2300      	movs	r3, #0
	}
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3730      	adds	r7, #48	; 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	08008274 	.word	0x08008274
 8000cb8:	08008280 	.word	0x08008280
 8000cbc:	080082a4 	.word	0x080082a4
 8000cc0:	080082cc 	.word	0x080082cc
 8000cc4:	20000190 	.word	0x20000190
 8000cc8:	080082f0 	.word	0x080082f0
 8000ccc:	08008268 	.word	0x08008268

08000cd0 <ConsoleCommandLedToggle>:


static eCommandResult_T ConsoleCommandLedToggle(const char buffer[])
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result;
	int16_t parameterInt;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	461a      	mov	r2, r3
 8000cde:	2101      	movs	r1, #1
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fe9a 	bl	8000a1a <ConsoleReceiveParamInt16>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
	if (result == COMMAND_PARAMETER_ERROR)
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	2b10      	cmp	r3, #16
 8000cee:	d101      	bne.n	8000cf4 <ConsoleCommandLedToggle+0x24>
			return result;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	e011      	b.n	8000d18 <ConsoleCommandLedToggle+0x48>
	if (0 == parameterInt )
 8000cf4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d106      	bne.n	8000d0a <ConsoleCommandLedToggle+0x3a>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <ConsoleCommandLedToggle+0x50>)
 8000d04:	f002 f8a6 	bl	8002e54 <HAL_GPIO_WritePin>
 8000d08:	e005      	b.n	8000d16 <ConsoleCommandLedToggle+0x46>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <ConsoleCommandLedToggle+0x50>)
 8000d12:	f002 f89f 	bl	8002e54 <HAL_GPIO_WritePin>

	return COMMAND_SUCCESS;
 8000d16:	2300      	movs	r3, #0

}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40020800 	.word	0x40020800

08000d24 <ConsoleCommandGyroQuery>:

static eCommandResult_T ConsoleCommandGyroQuery(const char buffer[])
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	uint8_t state = gy521_ready();
 8000d2c:	f000 f95e 	bl	8000fec <gy521_ready>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]
	if (state)
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <ConsoleCommandGyroQuery+0x1e>
	{
		ConsoleIoSendString("GYRO is Spinning :-)");
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <ConsoleCommandGyroQuery+0x30>)
 8000d3c:	f000 f940 	bl	8000fc0 <ConsoleIoSendString>
 8000d40:	e002      	b.n	8000d48 <ConsoleCommandGyroQuery+0x24>
	}
	else
	{
			ConsoleIoSendString("GYRO is on holiday :-(");
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <ConsoleCommandGyroQuery+0x34>)
 8000d44:	f000 f93c 	bl	8000fc0 <ConsoleIoSendString>
	}
	return COMMAND_SUCCESS;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08008314 	.word	0x08008314
 8000d58:	0800832c 	.word	0x0800832c

08000d5c <ConsoleCommandTimeQuery>:

static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b092      	sub	sp, #72	; 0x48
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <ConsoleCommandTimeQuery+0x50>)
 8000d6e:	f003 fcd1 	bl	8004714 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <ConsoleCommandTimeQuery+0x50>)
 8000d7c:	f003 fdac 	bl	80048d8 <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000d80:	7b3b      	ldrb	r3, [r7, #12]
 8000d82:	461a      	mov	r2, r3
 8000d84:	7b7b      	ldrb	r3, [r7, #13]
 8000d86:	4619      	mov	r1, r3
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	f107 0020 	add.w	r0, r7, #32
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	460b      	mov	r3, r1
 8000d92:	4907      	ldr	r1, [pc, #28]	; (8000db0 <ConsoleCommandTimeQuery+0x54>)
 8000d94:	f006 f868 	bl	8006e68 <siprintf>
	ConsoleSendString(time);
 8000d98:	f107 0320 	add.w	r3, r7, #32
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fea2 	bl	8000ae6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3740      	adds	r7, #64	; 0x40
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000190 	.word	0x20000190
 8000db0:	08008344 	.word	0x08008344

08000db4 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	; 0x38
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <ConsoleCommandDateQuery+0x44>)
 8000dc6:	f003 fd87 	bl	80048d8 <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8000dca:	7bbb      	ldrb	r3, [r7, #14]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	7b7b      	ldrb	r3, [r7, #13]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	f107 0010 	add.w	r0, r7, #16
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <ConsoleCommandDateQuery+0x48>)
 8000dde:	f006 f843 	bl	8006e68 <siprintf>
	ConsoleSendString(date);
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fe7d 	bl	8000ae6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3730      	adds	r7, #48	; 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000190 	.word	0x20000190
 8000dfc:	0800835c 	.word	0x0800835c

08000e00 <ConsoleCommandLedQuery>:


static eCommandResult_T ConsoleCommandLedQuery(const char buffer[])
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin)==0)
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	480a      	ldr	r0, [pc, #40]	; (8000e38 <ConsoleCommandLedQuery+0x38>)
 8000e0e:	f002 f809 	bl	8002e24 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d103      	bne.n	8000e20 <ConsoleCommandLedQuery+0x20>
			ConsoleIoSendString("LED is ON ");
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <ConsoleCommandLedQuery+0x3c>)
 8000e1a:	f000 f8d1 	bl	8000fc0 <ConsoleIoSendString>
 8000e1e:	e002      	b.n	8000e26 <ConsoleCommandLedQuery+0x26>
	else
		ConsoleIoSendString("LED is OFF ");
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <ConsoleCommandLedQuery+0x40>)
 8000e22:	f000 f8cd 	bl	8000fc0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <ConsoleCommandLedQuery+0x44>)
 8000e28:	f000 f8ca 	bl	8000fc0 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40020800 	.word	0x40020800
 8000e3c:	08008374 	.word	0x08008374
 8000e40:	08008380 	.word	0x08008380
 8000e44:	0800838c 	.word	0x0800838c

08000e48 <ConsoleCommandHelp>:



static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e50:	2300      	movs	r3, #0
 8000e52:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000e54:	230a      	movs	r3, #10
 8000e56:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e01e      	b.n	8000e9c <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000e5e:	4914      	ldr	r1, [pc, #80]	; (8000eb0 <ConsoleCommandHelp+0x68>)
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	4613      	mov	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4413      	add	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	440b      	add	r3, r1
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f8a6 	bl	8000fc0 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000e74:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <ConsoleCommandHelp+0x6c>)
 8000e76:	f000 f8a3 	bl	8000fc0 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	3308      	adds	r3, #8
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <ConsoleCommandHelp+0x68>)
 8000e88:	4413      	add	r3, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f898 	bl	8000fc0 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <ConsoleCommandHelp+0x70>)
 8000e92:	f000 f895 	bl	8000fc0 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d3db      	bcc.n	8000e5e <ConsoleCommandHelp+0x16>
	}
	return result;
 8000ea6:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	080083ac 	.word	0x080083ac
 8000eb4:	08008390 	.word	0x08008390
 8000eb8:	0800838c 	.word	0x0800838c

08000ebc <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <ConsoleCommandVer+0x24>)
 8000eca:	f000 f879 	bl	8000fc0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <ConsoleCommandVer+0x28>)
 8000ed0:	f000 f876 	bl	8000fc0 <ConsoleIoSendString>
	return result;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	08008394 	.word	0x08008394
 8000ee4:	0800838c 	.word	0x0800838c

08000ee8 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <ConsoleCommandsGetTable+0x10>)
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	080083ac 	.word	0x080083ac

08000efc <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	4909      	ldr	r1, [pc, #36]	; (8000f2c <HAL_UART_RxCpltCallback+0x30>)
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <HAL_UART_RxCpltCallback+0x34>)
 8000f0a:	f004 ffde 	bl	8005eca <HAL_UART_Receive_IT>
    {
    	HAL_UART_Transmit(&huart1, &cliRX, 1, 100);

    }
    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_UART_RxCpltCallback+0x30>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b0a      	cmp	r3, #10
 8000f14:	d005      	beq.n	8000f22 <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_UART_RxCpltCallback+0x30>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_UART_RxCpltCallback+0x38>)
 8000f1e:	f7ff fb68 	bl	80005f2 <cBuffer_Write>

    }
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000138 	.word	0x20000138
 8000f30:	2000025c 	.word	0x2000025c
 8000f34:	20000130 	.word	0x20000130

08000f38 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	4906      	ldr	r1, [pc, #24]	; (8000f58 <ConsoleIoInit+0x20>)
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <ConsoleIoInit+0x24>)
 8000f42:	f7ff fb37 	bl	80005b4 <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8000f46:	2201      	movs	r2, #1
 8000f48:	4905      	ldr	r1, [pc, #20]	; (8000f60 <ConsoleIoInit+0x28>)
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <ConsoleIoInit+0x2c>)
 8000f4c:	f004 ffbd 	bl	8005eca <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000f0 	.word	0x200000f0
 8000f5c:	20000130 	.word	0x20000130
 8000f60:	20000138 	.word	0x20000138
 8000f64:	2000025c 	.word	0x2000025c

08000f68 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	uint8_t len;

	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 8000f70:	f107 030f 	add.w	r3, r7, #15
 8000f74:	220d      	movs	r2, #13
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4810      	ldr	r0, [pc, #64]	; (8000fbc <ConsoleIoReceive+0x54>)
 8000f7a:	f7ff fb92 	bl	80006a2 <cBuffer_GetString>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10a      	bne.n	8000f9a <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len]  = 0x0; //Terminate String in C Style
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f847 	bl	8001024 <manageBackSpace>
		return CONSOLE_SUCCESS;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e00b      	b.n	8000fb2 <ConsoleIoReceive+0x4a>
	}
	else if (cBuffer_isFull(&cliCB) == CBUFFER_FULL)
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <ConsoleIoReceive+0x54>)
 8000f9c:	f7ff fb6c 	bl	8000678 <cBuffer_isFull>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d104      	bne.n	8000fb0 <ConsoleIoReceive+0x48>
	{
		// KILL The Buffer
		cBuffer_Kill(&cliCB);
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <ConsoleIoReceive+0x54>)
 8000fa8:	f7ff fb50 	bl	800064c <cBuffer_Kill>
		return CONSOLE_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <ConsoleIoReceive+0x4a>
	}
	return CONSOLE_NO_STRING;
 8000fb0:	2302      	movs	r3, #2

}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000130 	.word	0x20000130

08000fc0 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff f913 	bl	80001f4 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <ConsoleIoSendString+0x28>)
 8000fd8:	f004 fee5 	bl	8005da6 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000025c 	.word	0x2000025c

08000fec <gy521_ready>:
	int16_t Gyro_Y_RAW = 0;
	int16_t Gyro_Z_RAW = 0;


uint8_t gy521_ready()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af04      	add	r7, sp, #16
	uint8_t check;
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2275      	movs	r2, #117	; 0x75
 8001004:	21d0      	movs	r1, #208	; 0xd0
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <gy521_ready+0x34>)
 8001008:	f002 f882 	bl	8003110 <HAL_I2C_Mem_Read>
	return check == 114;
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b72      	cmp	r3, #114	; 0x72
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000013c 	.word	0x2000013c

08001024 <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 8001030:	217f      	movs	r1, #127	; 0x7f
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f005 ff66 	bl	8006f04 <strchr>
 8001038:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 800103a:	e029      	b.n	8001090 <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b7f      	cmp	r3, #127	; 0x7f
 8001042:	d106      	bne.n	8001052 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	4619      	mov	r1, r3
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f005 ff67 	bl	8006f1e <strcpy>
 8001050:	e019      	b.n	8001086 <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b7f      	cmp	r3, #127	; 0x7f
 8001058:	d109      	bne.n	800106e <manageBackSpace+0x4a>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d104      	bne.n	800106e <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3b01      	subs	r3, #1
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e00b      	b.n	8001086 <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b7f      	cmp	r3, #127	; 0x7f
 8001074:	d107      	bne.n	8001086 <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1e5a      	subs	r2, r3, #1
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	4619      	mov	r1, r3
 8001080:	4610      	mov	r0, r2
 8001082:	f005 ff4c 	bl	8006f1e <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 8001086:	217f      	movs	r1, #127	; 0x7f
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f005 ff3b 	bl	8006f04 <strchr>
 800108e:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1d1      	bne.n	800103c <manageBackSpace+0x18>
		}
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 80010aa:	e00c      	b.n	80010c6 <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b2f      	cmp	r3, #47	; 0x2f
 80010b2:	d903      	bls.n	80010bc <isNumber+0x1a>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b39      	cmp	r3, #57	; 0x39
 80010ba:	d901      	bls.n	80010c0 <isNumber+0x1e>
			return 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	e007      	b.n	80010d0 <isNumber+0x2e>
		string++;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3301      	adds	r3, #1
 80010c4:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1ee      	bne.n	80010ac <isNumber+0xa>
	}
	return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DMA_Init+0x3c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <MX_DMA_Init+0x3c>)
 80010ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DMA_Init+0x3c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2039      	movs	r0, #57	; 0x39
 8001104:	f001 f8d1 	bl	80022aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001108:	2039      	movs	r0, #57	; 0x39
 800110a:	f001 f8ea 	bl	80022e2 <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <MX_GPIO_Init+0xb8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <MX_GPIO_Init+0xb8>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <MX_GPIO_Init+0xb8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <MX_GPIO_Init+0xb8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <MX_GPIO_Init+0xb8>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_GPIO_Init+0xb8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_GPIO_Init+0xb8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <MX_GPIO_Init+0xb8>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_GPIO_Init+0xb8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_GPIO_Init+0xb8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <MX_GPIO_Init+0xb8>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_GPIO_Init+0xb8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <MX_GPIO_Init+0xbc>)
 80011aa:	f001 fe53 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_GPIO_Init+0xbc>)
 80011c8:	f001 fca8 	bl	8002b1c <HAL_GPIO_Init>

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020800 	.word	0x40020800

080011dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C1_Init+0x50>)
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <MX_I2C1_Init+0x54>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C1_Init+0x50>)
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_I2C1_Init+0x58>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_I2C1_Init+0x50>)
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_I2C1_Init+0x50>)
 800121a:	f001 fe35 	bl	8002e88 <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 f900 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000013c 	.word	0x2000013c
 8001230:	40005400 	.word	0x40005400
 8001234:	000186a0 	.word	0x000186a0

08001238 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_I2C_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12b      	bne.n	80012b2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001276:	23c0      	movs	r3, #192	; 0xc0
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001286:	2304      	movs	r3, #4
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <HAL_I2C_MspInit+0x8c>)
 8001292:	f001 fc43 	bl	8002b1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 80012a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40005400 	.word	0x40005400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f000 fe7b 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 f83f 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f7ff ff21 	bl	800111c <MX_GPIO_Init>
  MX_RTC_Init();
 80012da:	f000 f8ab 	bl	8001434 <MX_RTC_Init>
  MX_DMA_Init();
 80012de:	f7ff fefd 	bl	80010dc <MX_DMA_Init>
  MX_I2C1_Init();
 80012e2:	f7ff ff7b 	bl	80011dc <MX_I2C1_Init>
  MX_TIM1_Init();
 80012e6:	f000 f9a5 	bl	8001634 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80012ea:	f000 fad1 	bl	8001890 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t angle = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 80012f2:	230b      	movs	r3, #11
 80012f4:	717b      	strb	r3, [r7, #5]

  ConsoleInit();
 80012f6:	f7ff faab 	bl	8000850 <ConsoleInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 80012fa:	f7ff fad3 	bl	80008a4 <ConsoleProcess>


	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	71bb      	strb	r3, [r7, #6]
 8001302:	e01b      	b.n	800133c <main+0x74>
	  	  			// Calculate color
	  	  			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8001304:	79ba      	ldrb	r2, [r7, #6]
 8001306:	797b      	ldrb	r3, [r7, #5]
 8001308:	fb12 f303 	smulbb	r3, r2, r3
 800130c:	b2da      	uxtb	r2, r3
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4413      	add	r3, r2
 8001312:	b2db      	uxtb	r3, r3
 8001314:	227f      	movs	r2, #127	; 0x7f
 8001316:	21ff      	movs	r1, #255	; 0xff
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fd8f 	bl	8001e3c <hsl_to_rgb>
 800131e:	6038      	str	r0, [r7, #0]
	  	  			// Set color
	  	  			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	0c1b      	lsrs	r3, r3, #16
 8001324:	b2d9      	uxtb	r1, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	b2da      	uxtb	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	79b8      	ldrb	r0, [r7, #6]
 8001332:	f000 fb65 	bl	8001a00 <led_set_RGB>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	3301      	adds	r3, #1
 800133a:	71bb      	strb	r3, [r7, #6]
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	2b0b      	cmp	r3, #11
 8001340:	d9e0      	bls.n	8001304 <main+0x3c>
	  	  		}
	  	  		// Write to LED
	  	    	++angle;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	3301      	adds	r3, #1
 8001346:	71fb      	strb	r3, [r7, #7]
	  	  		led_render();
 8001348:	f000 fbc0 	bl	8001acc <led_render>
	  	  		// Some delay
	  	  		HAL_Delay(10);
 800134c:	200a      	movs	r0, #10
 800134e:	f000 fead 	bl	80020ac <HAL_Delay>
	  ConsoleProcess();
 8001352:	e7d2      	b.n	80012fa <main+0x32>

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	; 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2230      	movs	r2, #48	; 0x30
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f005 fd78 	bl	8006e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <SystemClock_Config+0xcc>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a27      	ldr	r2, [pc, #156]	; (8001420 <SystemClock_Config+0xcc>)
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <SystemClock_Config+0xcc>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <SystemClock_Config+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <SystemClock_Config+0xd0>)
 800139e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <SystemClock_Config+0xd0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80013b0:	2309      	movs	r3, #9
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013ba:	2301      	movs	r3, #1
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80013c8:	230c      	movs	r3, #12
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80013cc:	2360      	movs	r3, #96	; 0x60
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fb41 	bl	8003a64 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013e8:	f000 f81e 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2103      	movs	r1, #3
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fda3 	bl	8003f54 <HAL_RCC_ClockConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001414:	f000 f808 	bl	8001428 <Error_Handler>
  }
}
 8001418:	bf00      	nop
 800141a:	3750      	adds	r7, #80	; 0x50
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_RTC_Init+0x44>)
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <MX_RTC_Init+0x48>)
 800143c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_RTC_Init+0x44>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_RTC_Init+0x44>)
 8001446:	227f      	movs	r2, #127	; 0x7f
 8001448:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_RTC_Init+0x44>)
 800144c:	22ff      	movs	r2, #255	; 0xff
 800144e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_RTC_Init+0x44>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_RTC_Init+0x44>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_RTC_Init+0x44>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_RTC_Init+0x44>)
 8001464:	f003 f846 	bl	80044f4 <HAL_RTC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800146e:	f7ff ffdb 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000190 	.word	0x20000190
 800147c:	40002800 	.word	0x40002800

08001480 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <HAL_RTC_MspInit+0x50>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d111      	bne.n	80014c8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014a4:	2302      	movs	r3, #2
 80014a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 ff2e 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014be:	f7ff ffb3 	bl	8001428 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_RTC_MspInit+0x54>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40002800 	.word	0x40002800
 80014d4:	42470e3c 	.word	0x42470e3c

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_MspInit+0x4c>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x4c>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 fd7a 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <USART1_IRQHandler+0x10>)
 8001582:	f004 fcd3 	bl	8005f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000025c 	.word	0x2000025c

08001590 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <DMA2_Stream1_IRQHandler+0x10>)
 8001596:	f001 f857 	bl	8002648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001fc 	.word	0x200001fc

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f005 fc16 	bl	8006e04 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20020000 	.word	0x20020000
 8001604:	00000400 	.word	0x00000400
 8001608:	200001b0 	.word	0x200001b0
 800160c:	20000340 	.word	0x20000340

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b096      	sub	sp, #88	; 0x58
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2220      	movs	r2, #32
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f005 fbf3 	bl	8006e58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001672:	4b3e      	ldr	r3, [pc, #248]	; (800176c <MX_TIM1_Init+0x138>)
 8001674:	4a3e      	ldr	r2, [pc, #248]	; (8001770 <MX_TIM1_Init+0x13c>)
 8001676:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <MX_TIM1_Init+0x138>)
 800167a:	2200      	movs	r2, #0
 800167c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b3b      	ldr	r3, [pc, #236]	; (800176c <MX_TIM1_Init+0x138>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <MX_TIM1_Init+0x138>)
 8001686:	227c      	movs	r2, #124	; 0x7c
 8001688:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b38      	ldr	r3, [pc, #224]	; (800176c <MX_TIM1_Init+0x138>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001690:	4b36      	ldr	r3, [pc, #216]	; (800176c <MX_TIM1_Init+0x138>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <MX_TIM1_Init+0x138>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800169c:	4833      	ldr	r0, [pc, #204]	; (800176c <MX_TIM1_Init+0x138>)
 800169e:	f003 fa27 	bl	8004af0 <HAL_TIM_Base_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80016a8:	f7ff febe 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b6:	4619      	mov	r1, r3
 80016b8:	482c      	ldr	r0, [pc, #176]	; (800176c <MX_TIM1_Init+0x138>)
 80016ba:	f003 fdf9 	bl	80052b0 <HAL_TIM_ConfigClockSource>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80016c4:	f7ff feb0 	bl	8001428 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016c8:	4828      	ldr	r0, [pc, #160]	; (800176c <MX_TIM1_Init+0x138>)
 80016ca:	f003 fa60 	bl	8004b8e <HAL_TIM_PWM_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80016d4:	f7ff fea8 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e4:	4619      	mov	r1, r3
 80016e6:	4821      	ldr	r0, [pc, #132]	; (800176c <MX_TIM1_Init+0x138>)
 80016e8:	f004 fa50 	bl	8005b8c <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80016f2:	f7ff fe99 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f6:	2360      	movs	r3, #96	; 0x60
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001702:	2300      	movs	r3, #0
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	4814      	ldr	r0, [pc, #80]	; (800176c <MX_TIM1_Init+0x138>)
 800171c:	f003 fd06 	bl	800512c <HAL_TIM_PWM_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001726:	f7ff fe7f 	bl	8001428 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800173e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001742:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4619      	mov	r1, r3
 800174c:	4807      	ldr	r0, [pc, #28]	; (800176c <MX_TIM1_Init+0x138>)
 800174e:	f004 fa8b 	bl	8005c68 <HAL_TIMEx_ConfigBreakDeadTime>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001758:	f7ff fe66 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <MX_TIM1_Init+0x138>)
 800175e:	f000 f85d 	bl	800181c <HAL_TIM_MspPostInit>

}
 8001762:	bf00      	nop
 8001764:	3758      	adds	r7, #88	; 0x58
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200001b4 	.word	0x200001b4
 8001770:	40010000 	.word	0x40010000

08001774 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a22      	ldr	r2, [pc, #136]	; (800180c <HAL_TIM_Base_MspInit+0x98>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d13e      	bne.n	8001804 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_TIM_Base_MspInit+0x9c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_TIM_Base_MspInit+0x9c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_TIM_Base_MspInit+0x9c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017a4:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <HAL_TIM_Base_MspInit+0xa4>)
 80017a6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017aa:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80017ae:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ca:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017da:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80017e8:	480a      	ldr	r0, [pc, #40]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017ea:	f000 fd95 	bl	8002318 <HAL_DMA_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80017f4:	f7ff fe18 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <HAL_TIM_Base_MspInit+0xa0>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40010000 	.word	0x40010000
 8001810:	40023800 	.word	0x40023800
 8001814:	200001fc 	.word	0x200001fc
 8001818:	40026428 	.word	0x40026428

0800181c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a12      	ldr	r2, [pc, #72]	; (8001884 <HAL_TIM_MspPostInit+0x68>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d11e      	bne.n	800187c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_TIM_MspPostInit+0x6c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_TIM_MspPostInit+0x6c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_TIM_MspPostInit+0x6c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 800185a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800186c:	2301      	movs	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_TIM_MspPostInit+0x70>)
 8001878:	f001 f950 	bl	8002b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40010000 	.word	0x40010000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_USART1_UART_Init+0x4c>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <MX_USART1_UART_Init+0x50>)
 8001898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <MX_USART1_UART_Init+0x4c>)
 800189c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_USART1_UART_Init+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_USART1_UART_Init+0x4c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_USART1_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_USART1_UART_Init+0x4c>)
 80018b6:	220c      	movs	r2, #12
 80018b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_USART1_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_USART1_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_USART1_UART_Init+0x4c>)
 80018c8:	f004 fa20 	bl	8005d0c <HAL_UART_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018d2:	f7ff fda9 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000025c 	.word	0x2000025c
 80018e0:	40011000 	.word	0x40011000

080018e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_UART_MspInit+0x94>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d134      	bne.n	8001970 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <HAL_UART_MspInit+0x98>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a1b      	ldr	r2, [pc, #108]	; (800197c <HAL_UART_MspInit+0x98>)
 8001910:	f043 0310 	orr.w	r3, r3, #16
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_UART_MspInit+0x98>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_UART_MspInit+0x98>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_UART_MspInit+0x98>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_UART_MspInit+0x98>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800193e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001950:	2307      	movs	r3, #7
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	4809      	ldr	r0, [pc, #36]	; (8001980 <HAL_UART_MspInit+0x9c>)
 800195c:	f001 f8de 	bl	8002b1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	2025      	movs	r0, #37	; 0x25
 8001966:	f000 fca0 	bl	80022aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800196a:	2025      	movs	r0, #37	; 0x25
 800196c:	f000 fcb9 	bl	80022e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40011000 	.word	0x40011000
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800198a:	490e      	ldr	r1, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a0:	4c0b      	ldr	r4, [pc, #44]	; (80019d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ae:	f7ff fe2f 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f005 fa2d 	bl	8006e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7ff fc87 	bl	80012c8 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019c8:	0800885c 	.word	0x0800885c
  ldr r2, =_sbss
 80019cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019d0:	2000033c 	.word	0x2000033c

080019d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC_IRQHandler>

080019d6 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	460a      	mov	r2, r1
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	4613      	mov	r3, r2
 80019e4:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	79ba      	ldrb	r2, [r7, #6]
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	121b      	asrs	r3, r3, #8
 80019f0:	b2db      	uxtb	r3, r3
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4604      	mov	r4, r0
 8001a08:	4608      	mov	r0, r1
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4623      	mov	r3, r4
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	4603      	mov	r3, r0
 8001a14:	71bb      	strb	r3, [r7, #6]
 8001a16:	460b      	mov	r3, r1
 8001a18:	717b      	strb	r3, [r7, #5]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 8001a1e:	79bb      	ldrb	r3, [r7, #6]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a34:	edc7 7a00 	vstr	s15, [r7]
 8001a38:	783b      	ldrb	r3, [r7, #0]
 8001a3a:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 8001a3c:	797b      	ldrb	r3, [r7, #5]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a52:	edc7 7a00 	vstr	s15, [r7]
 8001a56:	783b      	ldrb	r3, [r7, #0]
 8001a58:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 8001a5a:	793b      	ldrb	r3, [r7, #4]
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a70:	edc7 7a00 	vstr	s15, [r7]
 8001a74:	783b      	ldrb	r3, [r7, #0]
 8001a76:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8001a78:	79fa      	ldrb	r2, [r7, #7]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	189c      	adds	r4, r3, r2
 8001a80:	797b      	ldrb	r3, [r7, #5]
 8001a82:	21b0      	movs	r1, #176	; 0xb0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ffa6 	bl	80019d6 <scale8>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <led_set_RGB+0xc8>)
 8001a90:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8001a92:	79fa      	ldrb	r2, [r7, #7]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	490a      	ldr	r1, [pc, #40]	; (8001ac8 <led_set_RGB+0xc8>)
 8001a9e:	79ba      	ldrb	r2, [r7, #6]
 8001aa0:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8001aa2:	79fa      	ldrb	r2, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	1c9c      	adds	r4, r3, #2
 8001aac:	793b      	ldrb	r3, [r7, #4]
 8001aae:	21f0      	movs	r1, #240	; 0xf0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff90 	bl	80019d6 <scale8>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <led_set_RGB+0xc8>)
 8001abc:	551a      	strb	r2, [r3, r4]

}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200002a0 	.word	0x200002a0

08001acc <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 8001ad2:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <led_render+0x148>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <led_render+0x1a>
 8001ada:	4b4f      	ldr	r3, [pc, #316]	; (8001c18 <led_render+0x14c>)
 8001adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d015      	beq.n	8001b12 <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	e007      	b.n	8001afc <led_render+0x30>
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4a4b      	ldr	r2, [pc, #300]	; (8001c1c <led_render+0x150>)
 8001af0:	2100      	movs	r1, #0
 8001af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	3301      	adds	r3, #1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b2f      	cmp	r3, #47	; 0x2f
 8001b00:	d9f4      	bls.n	8001aec <led_render+0x20>
    wr_buf_p = 0;
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <led_render+0x148>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4845      	ldr	r0, [pc, #276]	; (8001c20 <led_render+0x154>)
 8001b0c:	f003 fa48 	bl	8004fa0 <HAL_TIM_PWM_Stop_DMA>
    return;
 8001b10:	e07c      	b.n	8001c0c <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	e06d      	b.n	8001bf4 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <led_render+0x158>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	dd01      	ble.n	8001b30 <led_render+0x64>
 8001b2c:	2150      	movs	r1, #80	; 0x50
 8001b2e:	e000      	b.n	8001b32 <led_render+0x66>
 8001b30:	2128      	movs	r1, #40	; 0x28
 8001b32:	4a3a      	ldr	r2, [pc, #232]	; (8001c1c <led_render+0x150>)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <led_render+0x158>)
 8001b3c:	785b      	ldrb	r3, [r3, #1]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dd01      	ble.n	8001b52 <led_render+0x86>
 8001b4e:	2150      	movs	r1, #80	; 0x50
 8001b50:	e000      	b.n	8001b54 <led_render+0x88>
 8001b52:	2128      	movs	r1, #40	; 0x28
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	3308      	adds	r3, #8
 8001b58:	4a30      	ldr	r2, [pc, #192]	; (8001c1c <led_render+0x150>)
 8001b5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <led_render+0x158>)
 8001b60:	789b      	ldrb	r3, [r3, #2]
 8001b62:	461a      	mov	r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	dd01      	ble.n	8001b76 <led_render+0xaa>
 8001b72:	2150      	movs	r1, #80	; 0x50
 8001b74:	e000      	b.n	8001b78 <led_render+0xac>
 8001b76:	2128      	movs	r1, #40	; 0x28
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	3310      	adds	r3, #16
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <led_render+0x150>)
 8001b7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <led_render+0x158>)
 8001b84:	78db      	ldrb	r3, [r3, #3]
 8001b86:	461a      	mov	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	dd01      	ble.n	8001b9a <led_render+0xce>
 8001b96:	2150      	movs	r1, #80	; 0x50
 8001b98:	e000      	b.n	8001b9c <led_render+0xd0>
 8001b9a:	2128      	movs	r1, #40	; 0x28
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	3318      	adds	r3, #24
 8001ba0:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <led_render+0x150>)
 8001ba2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <led_render+0x158>)
 8001ba8:	791b      	ldrb	r3, [r3, #4]
 8001baa:	461a      	mov	r2, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	dd01      	ble.n	8001bbe <led_render+0xf2>
 8001bba:	2150      	movs	r1, #80	; 0x50
 8001bbc:	e000      	b.n	8001bc0 <led_render+0xf4>
 8001bbe:	2128      	movs	r1, #40	; 0x28
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	3320      	adds	r3, #32
 8001bc4:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <led_render+0x150>)
 8001bc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <led_render+0x158>)
 8001bcc:	795b      	ldrb	r3, [r3, #5]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	dd01      	ble.n	8001be2 <led_render+0x116>
 8001bde:	2150      	movs	r1, #80	; 0x50
 8001be0:	e000      	b.n	8001be4 <led_render+0x118>
 8001be2:	2128      	movs	r1, #40	; 0x28
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3328      	adds	r3, #40	; 0x28
 8001be8:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <led_render+0x150>)
 8001bea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b07      	cmp	r3, #7
 8001bf8:	d98e      	bls.n	8001b18 <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 8001bfa:	2330      	movs	r3, #48	; 0x30
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <led_render+0x150>)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4807      	ldr	r0, [pc, #28]	; (8001c20 <led_render+0x154>)
 8001c02:	f003 f81d 	bl	8004c40 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8001c06:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <led_render+0x148>)
 8001c08:	2202      	movs	r2, #2
 8001c0a:	601a      	str	r2, [r3, #0]
}
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000324 	.word	0x20000324
 8001c18:	200001fc 	.word	0x200001fc
 8001c1c:	200002c4 	.word	0x200002c4
 8001c20:	200001b4 	.word	0x200001b4
 8001c24:	200002a0 	.word	0x200002a0

08001c28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001c30:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b0b      	cmp	r3, #11
 8001c36:	d854      	bhi.n	8001ce2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e048      	b.n	8001cd0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001c3e:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	4a35      	ldr	r2, [pc, #212]	; (8001d20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	dd01      	ble.n	8001c60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001c5c:	2150      	movs	r1, #80	; 0x50
 8001c5e:	e000      	b.n	8001c62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001c60:	2128      	movs	r1, #40	; 0x28
 8001c62:	4a30      	ldr	r2, [pc, #192]	; (8001d24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	3301      	adds	r3, #1
 8001c76:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	dd01      	ble.n	8001c8e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 8001c8a:	2150      	movs	r1, #80	; 0x50
 8001c8c:	e000      	b.n	8001c90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8001c8e:	2128      	movs	r1, #40	; 0x28
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3308      	adds	r3, #8
 8001c94:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001c96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dd01      	ble.n	8001cbe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8001cba:	2150      	movs	r1, #80	; 0x50
 8001cbc:	e000      	b.n	8001cc0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8001cbe:	2128      	movs	r1, #40	; 0x28
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3310      	adds	r3, #16
 8001cc4:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001cc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b07      	cmp	r3, #7
 8001cd4:	d9b3      	bls.n	8001c3e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001cde:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8001ce0:	e016      	b.n	8001d10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b0d      	cmp	r3, #13
 8001ce8:	d812      	bhi.n	8001d10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	72fb      	strb	r3, [r7, #11]
 8001cee:	e007      	b.n	8001d00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	72fb      	strb	r3, [r7, #11]
 8001d00:	7afb      	ldrb	r3, [r7, #11]
 8001d02:	2b17      	cmp	r3, #23
 8001d04:	d9f4      	bls.n	8001cf0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20000324 	.word	0x20000324
 8001d20:	200002a0 	.word	0x200002a0
 8001d24:	200002c4 	.word	0x200002c4

08001d28 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001d30:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b0b      	cmp	r3, #11
 8001d36:	d855      	bhi.n	8001de4 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e049      	b.n	8001dd2 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	4a39      	ldr	r2, [pc, #228]	; (8001e30 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001d4a:	5cd3      	ldrb	r3, [r2, r3]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	dd01      	ble.n	8001d60 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001d5c:	2150      	movs	r1, #80	; 0x50
 8001d5e:	e000      	b.n	8001d62 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001d60:	2128      	movs	r1, #40	; 0x28
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3318      	adds	r3, #24
 8001d66:	4a33      	ldr	r2, [pc, #204]	; (8001e34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001d68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	3301      	adds	r3, #1
 8001d78:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	dd01      	ble.n	8001d90 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001d8c:	2150      	movs	r1, #80	; 0x50
 8001d8e:	e000      	b.n	8001d92 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8001d90:	2128      	movs	r1, #40	; 0x28
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3320      	adds	r3, #32
 8001d96:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001d98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	3302      	adds	r3, #2
 8001da8:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	461a      	mov	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	dd01      	ble.n	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8001dbc:	2150      	movs	r1, #80	; 0x50
 8001dbe:	e000      	b.n	8001dc2 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8001dc0:	2128      	movs	r1, #40	; 0x28
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3328      	adds	r3, #40	; 0x28
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001dc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b07      	cmp	r3, #7
 8001dd6:	d9b2      	bls.n	8001d3e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001de0:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 8001de2:	e01e      	b.n	8001e22 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b0d      	cmp	r3, #13
 8001dea:	d813      	bhi.n	8001e14 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001dec:	2318      	movs	r3, #24
 8001dee:	72fb      	strb	r3, [r7, #11]
 8001df0:	e007      	b.n	8001e02 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001df6:	2100      	movs	r1, #0
 8001df8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001dfc:	7afb      	ldrb	r3, [r7, #11]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	72fb      	strb	r3, [r7, #11]
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	2b2f      	cmp	r3, #47	; 0x2f
 8001e06:	d9f4      	bls.n	8001df2 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001e10:	6013      	str	r3, [r2, #0]
}
 8001e12:	e006      	b.n	8001e22 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4806      	ldr	r0, [pc, #24]	; (8001e38 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001e1e:	f003 f8bf 	bl	8004fa0 <HAL_TIM_PWM_Stop_DMA>
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000324 	.word	0x20000324
 8001e30:	200002a0 	.word	0x200002a0
 8001e34:	200002c4 	.word	0x200002c4
 8001e38:	200001b4 	.word	0x200001b4

08001e3c <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
 8001e46:	460b      	mov	r3, r1
 8001e48:	71bb      	strb	r3, [r7, #6]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8001e4e:	797b      	ldrb	r3, [r7, #5]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <hsl_to_rgb+0x1c>
 8001e54:	2300      	movs	r3, #0
 8001e56:	e0b1      	b.n	8001fbc <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8001e58:	797b      	ldrb	r3, [r7, #5]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8001e62:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db09      	blt.n	8001e7e <hsl_to_rgb+0x42>
 8001e6a:	89bb      	ldrh	r3, [r7, #12]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	79ba      	ldrb	r2, [r7, #6]
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	121b      	asrs	r3, r3, #8
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	74fb      	strb	r3, [r7, #19]
 8001e7c:	e00a      	b.n	8001e94 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8001e7e:	89bb      	ldrh	r3, [r7, #12]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001e88:	79ba      	ldrb	r2, [r7, #6]
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	121b      	asrs	r3, r3, #8
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	0052      	lsls	r2, r2, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8001ea4:	897b      	ldrh	r3, [r7, #10]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8001eac:	7d3b      	ldrb	r3, [r7, #20]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8001eb8:	897b      	ldrh	r3, [r7, #10]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <hsl_to_rgb+0x9c>
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	7cfa      	ldrb	r2, [r7, #19]
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	121b      	asrs	r3, r3, #8
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	74bb      	strb	r3, [r7, #18]
 8001ed6:	e00a      	b.n	8001eee <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001ee0:	7cfa      	ldrb	r2, [r7, #19]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	fb02 f303 	mul.w	r3, r2, r3
 8001ee8:	121b      	asrs	r3, r3, #8
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8001eee:	7cfb      	ldrb	r3, [r7, #19]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	797a      	ldrb	r2, [r7, #5]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8001efe:	897b      	ldrh	r3, [r7, #10]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d839      	bhi.n	8001f7e <hsl_to_rgb+0x142>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <hsl_to_rgb+0xd4>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f25 	.word	0x08001f25
 8001f14:	08001f37 	.word	0x08001f37
 8001f18:	08001f49 	.word	0x08001f49
 8001f1c:	08001f5b 	.word	0x08001f5b
 8001f20:	08001f6d 	.word	0x08001f6d
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8001f24:	7cfb      	ldrb	r3, [r7, #19]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	75fb      	strb	r3, [r7, #23]
 8001f2a:	7cbb      	ldrb	r3, [r7, #18]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	75bb      	strb	r3, [r7, #22]
 8001f30:	2300      	movs	r3, #0
 8001f32:	757b      	strb	r3, [r7, #21]
 8001f34:	e02c      	b.n	8001f90 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8001f36:	7cbb      	ldrb	r3, [r7, #18]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	75fb      	strb	r3, [r7, #23]
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	75bb      	strb	r3, [r7, #22]
 8001f42:	2300      	movs	r3, #0
 8001f44:	757b      	strb	r3, [r7, #21]
 8001f46:	e023      	b.n	8001f90 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8001f48:	2300      	movs	r3, #0
 8001f4a:	75fb      	strb	r3, [r7, #23]
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	75bb      	strb	r3, [r7, #22]
 8001f52:	7cbb      	ldrb	r3, [r7, #18]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	757b      	strb	r3, [r7, #21]
 8001f58:	e01a      	b.n	8001f90 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
 8001f5e:	7cbb      	ldrb	r3, [r7, #18]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	75bb      	strb	r3, [r7, #22]
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	757b      	strb	r3, [r7, #21]
 8001f6a:	e011      	b.n	8001f90 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8001f6c:	7cbb      	ldrb	r3, [r7, #18]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	75fb      	strb	r3, [r7, #23]
 8001f72:	2300      	movs	r3, #0
 8001f74:	75bb      	strb	r3, [r7, #22]
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	757b      	strb	r3, [r7, #21]
 8001f7c:	e008      	b.n	8001f90 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8001f7e:	7cfb      	ldrb	r3, [r7, #19]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	75fb      	strb	r3, [r7, #23]
 8001f84:	2300      	movs	r3, #0
 8001f86:	75bb      	strb	r3, [r7, #22]
 8001f88:	7cbb      	ldrb	r3, [r7, #18]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	757b      	strb	r3, [r7, #21]
 8001f8e:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	7c7b      	ldrb	r3, [r7, #17]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	7dbb      	ldrb	r3, [r7, #22]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	7c7b      	ldrb	r3, [r7, #17]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	440b      	add	r3, r1
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	431a      	orrs	r2, r3
 8001fae:	7d7b      	ldrb	r3, [r7, #21]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	7c7b      	ldrb	r3, [r7, #17]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	440b      	add	r3, r1
 8001fba:	4313      	orrs	r3, r2
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_Init+0x40>)
 8001fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_Init+0x40>)
 8001fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_Init+0x40>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f94f 	bl	8002294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f000 f808 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7ff fa6c 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_InitTick+0x54>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x58>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002022:	fbb3 f3f1 	udiv	r3, r3, r1
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f967 	bl	80022fe <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00e      	b.n	8002058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d80a      	bhi.n	8002056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f000 f92f 	bl	80022aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800204c:	4a06      	ldr	r2, [pc, #24]	; (8002068 <HAL_InitTick+0x5c>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000000 	.word	0x20000000
 8002064:	20000008 	.word	0x20000008
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008
 8002090:	20000328 	.word	0x20000328

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000328 	.word	0x20000328

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff ffee 	bl	8002094 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_Delay+0x44>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffde 	bl	8002094 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000008 	.word	0x20000008

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <__NVIC_EnableIRQ+0x38>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002260:	d301      	bcc.n	8002266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002262:	2301      	movs	r3, #1
 8002264:	e00f      	b.n	8002286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <SysTick_Config+0x40>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226e:	210f      	movs	r1, #15
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f7ff ff8e 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <SysTick_Config+0x40>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <SysTick_Config+0x40>)
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	e000e010 	.word	0xe000e010

08002294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ff29 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022bc:	f7ff ff3e 	bl	800213c <__NVIC_GetPriorityGrouping>
 80022c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7ff ff8e 	bl	80021e8 <NVIC_EncodePriority>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff5d 	bl	8002194 <__NVIC_SetPriority>
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff31 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ffa2 	bl	8002250 <SysTick_Config>
 800230c:	4603      	mov	r3, r0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff feb6 	bl	8002094 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e099      	b.n	8002468 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002354:	e00f      	b.n	8002376 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002356:	f7ff fe9d 	bl	8002094 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b05      	cmp	r3, #5
 8002362:	d908      	bls.n	8002376 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2203      	movs	r2, #3
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e078      	b.n	8002468 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e8      	bne.n	8002356 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_DMA_Init+0x158>)
 8002390:	4013      	ands	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d107      	bne.n	80023e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	4313      	orrs	r3, r2
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f023 0307 	bic.w	r3, r3, #7
 80023f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2b04      	cmp	r3, #4
 8002408:	d117      	bne.n	800243a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00e      	beq.n	800243a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fb01 	bl	8002a24 <DMA_CheckFifoParam>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002436:	2301      	movs	r3, #1
 8002438:	e016      	b.n	8002468 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fab8 	bl	80029b8 <DMA_CalcBaseAndBitshift>
 8002448:	4603      	mov	r3, r0
 800244a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	223f      	movs	r2, #63	; 0x3f
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	f010803f 	.word	0xf010803f

08002474 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_DMA_Start_IT+0x26>
 8002496:	2302      	movs	r3, #2
 8002498:	e040      	b.n	800251c <HAL_DMA_Start_IT+0xa8>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d12f      	bne.n	800250e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fa4a 	bl	800295c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	223f      	movs	r2, #63	; 0x3f
 80024ce:	409a      	lsls	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0216 	orr.w	r2, r2, #22
 80024e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0208 	orr.w	r2, r2, #8
 80024fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e005      	b.n	800251a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002516:	2302      	movs	r3, #2
 8002518:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800251a:	7dfb      	ldrb	r3, [r7, #23]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002532:	f7ff fdaf 	bl	8002094 <HAL_GetTick>
 8002536:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d008      	beq.n	8002556 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e052      	b.n	80025fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0216 	bic.w	r2, r2, #22
 8002564:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002574:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <HAL_DMA_Abort+0x62>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0208 	bic.w	r2, r2, #8
 8002594:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0201 	bic.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a6:	e013      	b.n	80025d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a8:	f7ff fd74 	bl	8002094 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d90c      	bls.n	80025d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2203      	movs	r2, #3
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e015      	b.n	80025fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1e4      	bne.n	80025a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	223f      	movs	r2, #63	; 0x3f
 80025e4:	409a      	lsls	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d004      	beq.n	8002622 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e00c      	b.n	800263c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2205      	movs	r2, #5
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002654:	4b8e      	ldr	r3, [pc, #568]	; (8002890 <HAL_DMA_IRQHandler+0x248>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a8e      	ldr	r2, [pc, #568]	; (8002894 <HAL_DMA_IRQHandler+0x24c>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0a9b      	lsrs	r3, r3, #10
 8002660:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	2208      	movs	r2, #8
 8002674:	409a      	lsls	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01a      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d013      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0204 	bic.w	r2, r2, #4
 800269a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	2208      	movs	r2, #8
 80026a2:	409a      	lsls	r2, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	2201      	movs	r2, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d012      	beq.n	80026ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	2201      	movs	r2, #1
 80026d8:	409a      	lsls	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	2204      	movs	r2, #4
 80026f0:	409a      	lsls	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d012      	beq.n	8002720 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2204      	movs	r2, #4
 800270e:	409a      	lsls	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	f043 0204 	orr.w	r2, r3, #4
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	2210      	movs	r2, #16
 8002726:	409a      	lsls	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d043      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d03c      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	2210      	movs	r2, #16
 8002744:	409a      	lsls	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d018      	beq.n	800278a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d108      	bne.n	8002778 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d024      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
 8002776:	e01f      	b.n	80027b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01b      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
 8002788:	e016      	b.n	80027b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0208 	bic.w	r2, r2, #8
 80027a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	2220      	movs	r2, #32
 80027be:	409a      	lsls	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 808f 	beq.w	80028e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8087 	beq.w	80028e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	2220      	movs	r2, #32
 80027e0:	409a      	lsls	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d136      	bne.n	8002860 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0216 	bic.w	r2, r2, #22
 8002800:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002810:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <HAL_DMA_IRQHandler+0x1da>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0208 	bic.w	r2, r2, #8
 8002830:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	223f      	movs	r2, #63	; 0x3f
 8002838:	409a      	lsls	r2, r3
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	2b00      	cmp	r3, #0
 8002854:	d07e      	beq.n	8002954 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	4798      	blx	r3
        }
        return;
 800285e:	e079      	b.n	8002954 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01d      	beq.n	80028aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10d      	bne.n	8002898 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	2b00      	cmp	r3, #0
 8002882:	d031      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
 800288c:	e02c      	b.n	80028e8 <HAL_DMA_IRQHandler+0x2a0>
 800288e:	bf00      	nop
 8002890:	20000000 	.word	0x20000000
 8002894:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d023      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
 80028a8:	e01e      	b.n	80028e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10f      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0210 	bic.w	r2, r2, #16
 80028c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d032      	beq.n	8002956 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d022      	beq.n	8002942 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2205      	movs	r2, #5
 8002900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	3301      	adds	r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	429a      	cmp	r2, r3
 800291e:	d307      	bcc.n	8002930 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f2      	bne.n	8002914 <HAL_DMA_IRQHandler+0x2cc>
 800292e:	e000      	b.n	8002932 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002930:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
 8002952:	e000      	b.n	8002956 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002954:	bf00      	nop
    }
  }
}
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002978:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d108      	bne.n	800299c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800299a:	e007      	b.n	80029ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	60da      	str	r2, [r3, #12]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	3b10      	subs	r3, #16
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <DMA_CalcBaseAndBitshift+0x64>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <DMA_CalcBaseAndBitshift+0x68>)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d909      	bls.n	80029fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	1d1a      	adds	r2, r3, #4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	659a      	str	r2, [r3, #88]	; 0x58
 80029f8:	e007      	b.n	8002a0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	aaaaaaab 	.word	0xaaaaaaab
 8002a20:	08008694 	.word	0x08008694

08002a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d11f      	bne.n	8002a7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d856      	bhi.n	8002af2 <DMA_CheckFifoParam+0xce>
 8002a44:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <DMA_CheckFifoParam+0x28>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002a5d 	.word	0x08002a5d
 8002a50:	08002a6f 	.word	0x08002a6f
 8002a54:	08002a5d 	.word	0x08002a5d
 8002a58:	08002af3 	.word	0x08002af3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d046      	beq.n	8002af6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6c:	e043      	b.n	8002af6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a76:	d140      	bne.n	8002afa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7c:	e03d      	b.n	8002afa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a86:	d121      	bne.n	8002acc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d837      	bhi.n	8002afe <DMA_CheckFifoParam+0xda>
 8002a8e:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <DMA_CheckFifoParam+0x70>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002aab 	.word	0x08002aab
 8002a9c:	08002aa5 	.word	0x08002aa5
 8002aa0:	08002abd 	.word	0x08002abd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa8:	e030      	b.n	8002b0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d025      	beq.n	8002b02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aba:	e022      	b.n	8002b02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ac4:	d11f      	bne.n	8002b06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aca:	e01c      	b.n	8002b06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d903      	bls.n	8002ada <DMA_CheckFifoParam+0xb6>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d003      	beq.n	8002ae0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ad8:	e018      	b.n	8002b0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ade:	e015      	b.n	8002b0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      break;
 8002af0:	e00b      	b.n	8002b0a <DMA_CheckFifoParam+0xe6>
      break;
 8002af2:	bf00      	nop
 8002af4:	e00a      	b.n	8002b0c <DMA_CheckFifoParam+0xe8>
      break;
 8002af6:	bf00      	nop
 8002af8:	e008      	b.n	8002b0c <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
 8002afc:	e006      	b.n	8002b0c <DMA_CheckFifoParam+0xe8>
      break;
 8002afe:	bf00      	nop
 8002b00:	e004      	b.n	8002b0c <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
 8002b04:	e002      	b.n	8002b0c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b06:	bf00      	nop
 8002b08:	e000      	b.n	8002b0c <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop

08002b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	; 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	e159      	b.n	8002dec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b38:	2201      	movs	r2, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	f040 8148 	bne.w	8002de6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d005      	beq.n	8002b6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d130      	bne.n	8002bd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	2203      	movs	r2, #3
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 0201 	and.w	r2, r3, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d017      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d123      	bne.n	8002c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	08da      	lsrs	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3208      	adds	r2, #8
 8002c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	220f      	movs	r2, #15
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	08da      	lsrs	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3208      	adds	r2, #8
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a2 	beq.w	8002de6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	4b57      	ldr	r3, [pc, #348]	; (8002e04 <HAL_GPIO_Init+0x2e8>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	4a56      	ldr	r2, [pc, #344]	; (8002e04 <HAL_GPIO_Init+0x2e8>)
 8002cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb2:	4b54      	ldr	r3, [pc, #336]	; (8002e04 <HAL_GPIO_Init+0x2e8>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cbe:	4a52      	ldr	r2, [pc, #328]	; (8002e08 <HAL_GPIO_Init+0x2ec>)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a49      	ldr	r2, [pc, #292]	; (8002e0c <HAL_GPIO_Init+0x2f0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d019      	beq.n	8002d1e <HAL_GPIO_Init+0x202>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a48      	ldr	r2, [pc, #288]	; (8002e10 <HAL_GPIO_Init+0x2f4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_GPIO_Init+0x1fe>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a47      	ldr	r2, [pc, #284]	; (8002e14 <HAL_GPIO_Init+0x2f8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00d      	beq.n	8002d16 <HAL_GPIO_Init+0x1fa>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a46      	ldr	r2, [pc, #280]	; (8002e18 <HAL_GPIO_Init+0x2fc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <HAL_GPIO_Init+0x1f6>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a45      	ldr	r2, [pc, #276]	; (8002e1c <HAL_GPIO_Init+0x300>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d101      	bne.n	8002d0e <HAL_GPIO_Init+0x1f2>
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	e008      	b.n	8002d20 <HAL_GPIO_Init+0x204>
 8002d0e:	2307      	movs	r3, #7
 8002d10:	e006      	b.n	8002d20 <HAL_GPIO_Init+0x204>
 8002d12:	2303      	movs	r3, #3
 8002d14:	e004      	b.n	8002d20 <HAL_GPIO_Init+0x204>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e002      	b.n	8002d20 <HAL_GPIO_Init+0x204>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_GPIO_Init+0x204>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	f002 0203 	and.w	r2, r2, #3
 8002d26:	0092      	lsls	r2, r2, #2
 8002d28:	4093      	lsls	r3, r2
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d30:	4935      	ldr	r1, [pc, #212]	; (8002e08 <HAL_GPIO_Init+0x2ec>)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	3302      	adds	r3, #2
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3e:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <HAL_GPIO_Init+0x304>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d62:	4a2f      	ldr	r2, [pc, #188]	; (8002e20 <HAL_GPIO_Init+0x304>)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d68:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_GPIO_Init+0x304>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d8c:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <HAL_GPIO_Init+0x304>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d92:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <HAL_GPIO_Init+0x304>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002db6:	4a1a      	ldr	r2, [pc, #104]	; (8002e20 <HAL_GPIO_Init+0x304>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_GPIO_Init+0x304>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de0:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <HAL_GPIO_Init+0x304>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3301      	adds	r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2b0f      	cmp	r3, #15
 8002df0:	f67f aea2 	bls.w	8002b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020400 	.word	0x40020400
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40020c00 	.word	0x40020c00
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40013c00 	.word	0x40013c00

08002e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e001      	b.n	8002e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
 8002e60:	4613      	mov	r3, r2
 8002e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e70:	e003      	b.n	8002e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	041a      	lsls	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	619a      	str	r2, [r3, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e12b      	b.n	80030f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe f9c2 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	; 0x24
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eec:	f001 f9ea 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a81      	ldr	r2, [pc, #516]	; (80030fc <HAL_I2C_Init+0x274>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d807      	bhi.n	8002f0c <HAL_I2C_Init+0x84>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a80      	ldr	r2, [pc, #512]	; (8003100 <HAL_I2C_Init+0x278>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e006      	b.n	8002f1a <HAL_I2C_Init+0x92>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a7d      	ldr	r2, [pc, #500]	; (8003104 <HAL_I2C_Init+0x27c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf94      	ite	ls
 8002f14:	2301      	movls	r3, #1
 8002f16:	2300      	movhi	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0e7      	b.n	80030f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a78      	ldr	r2, [pc, #480]	; (8003108 <HAL_I2C_Init+0x280>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0c9b      	lsrs	r3, r3, #18
 8002f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <HAL_I2C_Init+0x274>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d802      	bhi.n	8002f5c <HAL_I2C_Init+0xd4>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	e009      	b.n	8002f70 <HAL_I2C_Init+0xe8>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	4a69      	ldr	r2, [pc, #420]	; (800310c <HAL_I2C_Init+0x284>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	3301      	adds	r3, #1
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	495c      	ldr	r1, [pc, #368]	; (80030fc <HAL_I2C_Init+0x274>)
 8002f8c:	428b      	cmp	r3, r1
 8002f8e:	d819      	bhi.n	8002fc4 <HAL_I2C_Init+0x13c>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1e59      	subs	r1, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9e:	1c59      	adds	r1, r3, #1
 8002fa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_I2C_Init+0x138>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1e59      	subs	r1, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbe:	e051      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e04f      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d111      	bne.n	8002ff0 <HAL_I2C_Init+0x168>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	440b      	add	r3, r1
 8002fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e012      	b.n	8003016 <HAL_I2C_Init+0x18e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	0099      	lsls	r1, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Init+0x196>
 800301a:	2301      	movs	r3, #1
 800301c:	e022      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10e      	bne.n	8003044 <HAL_I2C_Init+0x1bc>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e58      	subs	r0, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	440b      	add	r3, r1
 8003034:	fbb0 f3f3 	udiv	r3, r0, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003042:	e00f      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	0099      	lsls	r1, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	6809      	ldr	r1, [r1, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6911      	ldr	r1, [r2, #16]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68d2      	ldr	r2, [r2, #12]
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	000186a0 	.word	0x000186a0
 8003100:	001e847f 	.word	0x001e847f
 8003104:	003d08ff 	.word	0x003d08ff
 8003108:	431bde83 	.word	0x431bde83
 800310c:	10624dd3 	.word	0x10624dd3

08003110 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08c      	sub	sp, #48	; 0x30
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	4608      	mov	r0, r1
 800311a:	4611      	mov	r1, r2
 800311c:	461a      	mov	r2, r3
 800311e:	4603      	mov	r3, r0
 8003120:	817b      	strh	r3, [r7, #10]
 8003122:	460b      	mov	r3, r1
 8003124:	813b      	strh	r3, [r7, #8]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800312a:	f7fe ffb3 	bl	8002094 <HAL_GetTick>
 800312e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b20      	cmp	r3, #32
 800313a:	f040 8208 	bne.w	800354e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2319      	movs	r3, #25
 8003144:	2201      	movs	r2, #1
 8003146:	497b      	ldr	r1, [pc, #492]	; (8003334 <HAL_I2C_Mem_Read+0x224>)
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 faef 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
 8003156:	e1fb      	b.n	8003550 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_I2C_Mem_Read+0x56>
 8003162:	2302      	movs	r3, #2
 8003164:	e1f4      	b.n	8003550 <HAL_I2C_Mem_Read+0x440>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d007      	beq.n	800318c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800319a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2222      	movs	r2, #34	; 0x22
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2240      	movs	r2, #64	; 0x40
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80031bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a5b      	ldr	r2, [pc, #364]	; (8003338 <HAL_I2C_Mem_Read+0x228>)
 80031cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ce:	88f8      	ldrh	r0, [r7, #6]
 80031d0:	893a      	ldrh	r2, [r7, #8]
 80031d2:	8979      	ldrh	r1, [r7, #10]
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	4603      	mov	r3, r0
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f9bc 	bl	800355c <I2C_RequestMemoryRead>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1b0      	b.n	8003550 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d113      	bne.n	800321e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	623b      	str	r3, [r7, #32]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	623b      	str	r3, [r7, #32]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e184      	b.n	8003528 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003222:	2b01      	cmp	r3, #1
 8003224:	d11b      	bne.n	800325e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e164      	b.n	8003528 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	2b02      	cmp	r3, #2
 8003264:	d11b      	bne.n	800329e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003274:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	e144      	b.n	8003528 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032b4:	e138      	b.n	8003528 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	f200 80f1 	bhi.w	80034a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d123      	bne.n	8003310 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fb44 	bl	800395a <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e139      	b.n	8003550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800330e:	e10b      	b.n	8003528 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	2b02      	cmp	r3, #2
 8003316:	d14e      	bne.n	80033b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	2200      	movs	r2, #0
 8003320:	4906      	ldr	r1, [pc, #24]	; (800333c <HAL_I2C_Mem_Read+0x22c>)
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fa02 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e10e      	b.n	8003550 <HAL_I2C_Mem_Read+0x440>
 8003332:	bf00      	nop
 8003334:	00100002 	.word	0x00100002
 8003338:	ffff0000 	.word	0xffff0000
 800333c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033b4:	e0b8      	b.n	8003528 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	2200      	movs	r2, #0
 80033be:	4966      	ldr	r1, [pc, #408]	; (8003558 <HAL_I2C_Mem_Read+0x448>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f9b3 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0bf      	b.n	8003550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	2200      	movs	r2, #0
 800341a:	494f      	ldr	r1, [pc, #316]	; (8003558 <HAL_I2C_Mem_Read+0x448>)
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f985 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e091      	b.n	8003550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a0:	e042      	b.n	8003528 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fa57 	bl	800395a <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e04c      	b.n	8003550 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d118      	bne.n	8003528 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f aec2 	bne.w	80032b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
  }
}
 8003550:	4618      	mov	r0, r3
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	00010004 	.word	0x00010004

0800355c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	461a      	mov	r2, r3
 800356a:	4603      	mov	r3, r0
 800356c:	817b      	strh	r3, [r7, #10]
 800356e:	460b      	mov	r3, r1
 8003570:	813b      	strh	r3, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003584:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003594:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	2200      	movs	r2, #0
 800359e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f8c2 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00d      	beq.n	80035ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035bc:	d103      	bne.n	80035c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e0aa      	b.n	8003720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ca:	897b      	ldrh	r3, [r7, #10]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	6a3a      	ldr	r2, [r7, #32]
 80035de:	4952      	ldr	r1, [pc, #328]	; (8003728 <I2C_RequestMemoryRead+0x1cc>)
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f8fa 	bl	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e097      	b.n	8003720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003608:	6a39      	ldr	r1, [r7, #32]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f964 	bl	80038d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b04      	cmp	r3, #4
 800361c:	d107      	bne.n	800362e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e076      	b.n	8003720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003638:	893b      	ldrh	r3, [r7, #8]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	611a      	str	r2, [r3, #16]
 8003642:	e021      	b.n	8003688 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003644:	893b      	ldrh	r3, [r7, #8]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	b29b      	uxth	r3, r3
 800364a:	b2da      	uxtb	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	6a39      	ldr	r1, [r7, #32]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f93e 	bl	80038d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00d      	beq.n	800367e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b04      	cmp	r3, #4
 8003668:	d107      	bne.n	800367a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e050      	b.n	8003720 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800367e:	893b      	ldrh	r3, [r7, #8]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	6a39      	ldr	r1, [r7, #32]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f923 	bl	80038d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	2b04      	cmp	r3, #4
 800369e:	d107      	bne.n	80036b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e035      	b.n	8003720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f82b 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ea:	d103      	bne.n	80036f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e013      	b.n	8003720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036f8:	897b      	ldrh	r3, [r7, #10]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	6a3a      	ldr	r2, [r7, #32]
 800370c:	4906      	ldr	r1, [pc, #24]	; (8003728 <I2C_RequestMemoryRead+0x1cc>)
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f863 	bl	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	00010002 	.word	0x00010002

0800372c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800373c:	e025      	b.n	800378a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d021      	beq.n	800378a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003746:	f7fe fca5 	bl	8002094 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d302      	bcc.n	800375c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d116      	bne.n	800378a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f043 0220 	orr.w	r2, r3, #32
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e023      	b.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d10d      	bne.n	80037b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	e00c      	b.n	80037ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	43da      	mvns	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4013      	ands	r3, r2
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bf0c      	ite	eq
 80037c2:	2301      	moveq	r3, #1
 80037c4:	2300      	movne	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d0b6      	beq.n	800373e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037e8:	e051      	b.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f8:	d123      	bne.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003808:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003812:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0204 	orr.w	r2, r3, #4
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e046      	b.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d021      	beq.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7fe fc23 	bl	8002094 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d116      	bne.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f043 0220 	orr.w	r2, r3, #32
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e020      	b.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10c      	bne.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf14      	ite	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	2300      	moveq	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	e00b      	b.n	80038ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	43da      	mvns	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4013      	ands	r3, r2
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d18d      	bne.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e4:	e02d      	b.n	8003942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f88d 	bl	8003a06 <I2C_IsAcknowledgeFailed>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e02d      	b.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d021      	beq.n	8003942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fe fbc9 	bl	8002094 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d116      	bne.n	8003942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e007      	b.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d1ca      	bne.n	80038e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003966:	e042      	b.n	80039ee <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b10      	cmp	r3, #16
 8003974:	d119      	bne.n	80039aa <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0210 	mvn.w	r2, #16
 800397e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e029      	b.n	80039fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fe fb73 	bl	8002094 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d116      	bne.n	80039ee <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e007      	b.n	80039fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d1b5      	bne.n	8003968 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1c:	d11b      	bne.n	8003a56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0204 	orr.w	r2, r3, #4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e267      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d075      	beq.n	8003b6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a82:	4b88      	ldr	r3, [pc, #544]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a8e:	4b85      	ldr	r3, [pc, #532]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d112      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9a:	4b82      	ldr	r3, [pc, #520]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	4b7e      	ldr	r3, [pc, #504]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d05b      	beq.n	8003b6c <HAL_RCC_OscConfig+0x108>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d157      	bne.n	8003b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e242      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x74>
 8003aca:	4b76      	ldr	r3, [pc, #472]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a75      	ldr	r2, [pc, #468]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e01d      	b.n	8003b14 <HAL_RCC_OscConfig+0xb0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x98>
 8003ae2:	4b70      	ldr	r3, [pc, #448]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a6f      	ldr	r2, [pc, #444]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b6d      	ldr	r3, [pc, #436]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6c      	ldr	r2, [pc, #432]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0xb0>
 8003afc:	4b69      	ldr	r3, [pc, #420]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a68      	ldr	r2, [pc, #416]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b66      	ldr	r3, [pc, #408]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe faba 	bl	8002094 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe fab6 	bl	8002094 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e207      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b5b      	ldr	r3, [pc, #364]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0xc0>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe faa6 	bl	8002094 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe faa2 	bl	8002094 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1f3      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b51      	ldr	r3, [pc, #324]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0xe8>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d063      	beq.n	8003c42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d11c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b92:	4b44      	ldr	r3, [pc, #272]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x152>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e1c7      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb6:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4937      	ldr	r1, [pc, #220]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	e03a      	b.n	8003c42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd4:	4b34      	ldr	r3, [pc, #208]	; (8003ca8 <HAL_RCC_OscConfig+0x244>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fe fa5b 	bl	8002094 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be2:	f7fe fa57 	bl	8002094 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e1a8      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf4:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b28      	ldr	r3, [pc, #160]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4925      	ldr	r1, [pc, #148]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]
 8003c14:	e015      	b.n	8003c42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_OscConfig+0x244>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe fa3a 	bl	8002094 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fe fa36 	bl	8002094 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e187      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d036      	beq.n	8003cbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <HAL_RCC_OscConfig+0x248>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fe fa1a 	bl	8002094 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c64:	f7fe fa16 	bl	8002094 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e167      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x200>
 8003c82:	e01b      	b.n	8003cbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <HAL_RCC_OscConfig+0x248>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe fa03 	bl	8002094 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	e00e      	b.n	8003cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c92:	f7fe f9ff 	bl	8002094 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d907      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e150      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	42470000 	.word	0x42470000
 8003cac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	4b88      	ldr	r3, [pc, #544]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ea      	bne.n	8003c92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8097 	beq.w	8003df8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cce:	4b81      	ldr	r3, [pc, #516]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10f      	bne.n	8003cfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	4b7d      	ldr	r3, [pc, #500]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	4a7c      	ldr	r2, [pc, #496]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cea:	4b7a      	ldr	r3, [pc, #488]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfa:	4b77      	ldr	r3, [pc, #476]	; (8003ed8 <HAL_RCC_OscConfig+0x474>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d118      	bne.n	8003d38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d06:	4b74      	ldr	r3, [pc, #464]	; (8003ed8 <HAL_RCC_OscConfig+0x474>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a73      	ldr	r2, [pc, #460]	; (8003ed8 <HAL_RCC_OscConfig+0x474>)
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d12:	f7fe f9bf 	bl	8002094 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1a:	f7fe f9bb 	bl	8002094 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e10c      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <HAL_RCC_OscConfig+0x474>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x2ea>
 8003d40:	4b64      	ldr	r3, [pc, #400]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a63      	ldr	r2, [pc, #396]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4c:	e01c      	b.n	8003d88 <HAL_RCC_OscConfig+0x324>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x30c>
 8003d56:	4b5f      	ldr	r3, [pc, #380]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a5e      	ldr	r2, [pc, #376]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
 8003d62:	4b5c      	ldr	r3, [pc, #368]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a5b      	ldr	r2, [pc, #364]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCC_OscConfig+0x324>
 8003d70:	4b58      	ldr	r3, [pc, #352]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a57      	ldr	r2, [pc, #348]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7c:	4b55      	ldr	r3, [pc, #340]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	4a54      	ldr	r2, [pc, #336]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d82:	f023 0304 	bic.w	r3, r3, #4
 8003d86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d015      	beq.n	8003dbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe f980 	bl	8002094 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d98:	f7fe f97c 	bl	8002094 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0cb      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dae:	4b49      	ldr	r3, [pc, #292]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0ee      	beq.n	8003d98 <HAL_RCC_OscConfig+0x334>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbc:	f7fe f96a 	bl	8002094 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7fe f966 	bl	8002094 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e0b5      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dda:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ee      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dec:	4b39      	ldr	r3, [pc, #228]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	4a38      	ldr	r2, [pc, #224]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a1 	beq.w	8003f44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e02:	4b34      	ldr	r3, [pc, #208]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d05c      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d141      	bne.n	8003e9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	4b31      	ldr	r3, [pc, #196]	; (8003edc <HAL_RCC_OscConfig+0x478>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fe f93a 	bl	8002094 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fe f936 	bl	8002094 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e087      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e36:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	019b      	lsls	r3, r3, #6
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	041b      	lsls	r3, r3, #16
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	491b      	ldr	r1, [pc, #108]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <HAL_RCC_OscConfig+0x478>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fe f90f 	bl	8002094 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7a:	f7fe f90b 	bl	8002094 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e05c      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x416>
 8003e98:	e054      	b.n	8003f44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9a:	4b10      	ldr	r3, [pc, #64]	; (8003edc <HAL_RCC_OscConfig+0x478>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f8f8 	bl	8002094 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe f8f4 	bl	8002094 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e045      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x444>
 8003ec6:	e03d      	b.n	8003f44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e038      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40007000 	.word	0x40007000
 8003edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <HAL_RCC_OscConfig+0x4ec>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d028      	beq.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d121      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d11a      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f10:	4013      	ands	r3, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d111      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800

08003f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0cc      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b68      	ldr	r3, [pc, #416]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d90c      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b63      	ldr	r3, [pc, #396]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0b8      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa8:	4b59      	ldr	r3, [pc, #356]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a58      	ldr	r2, [pc, #352]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc0:	4b53      	ldr	r3, [pc, #332]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a52      	ldr	r2, [pc, #328]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fcc:	4b50      	ldr	r3, [pc, #320]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	494d      	ldr	r1, [pc, #308]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d044      	beq.n	8004074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d119      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e07f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d003      	beq.n	8004012 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400e:	2b03      	cmp	r3, #3
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004022:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e067      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004032:	4b37      	ldr	r3, [pc, #220]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 0203 	bic.w	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4934      	ldr	r1, [pc, #208]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004044:	f7fe f826 	bl	8002094 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	e00a      	b.n	8004062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404c:	f7fe f822 	bl	8002094 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e04f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 020c 	and.w	r2, r3, #12
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	429a      	cmp	r2, r3
 8004072:	d1eb      	bne.n	800404c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d20c      	bcs.n	800409c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b22      	ldr	r3, [pc, #136]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e032      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a8:	4b19      	ldr	r3, [pc, #100]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4916      	ldr	r1, [pc, #88]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c6:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	490e      	ldr	r1, [pc, #56]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040da:	f000 f821 	bl	8004120 <HAL_RCC_GetSysClockFreq>
 80040de:	4602      	mov	r2, r0
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	490a      	ldr	r1, [pc, #40]	; (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	5ccb      	ldrb	r3, [r1, r3]
 80040ee:	fa22 f303 	lsr.w	r3, r2, r3
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040f6:	4b09      	ldr	r3, [pc, #36]	; (800411c <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fd ff86 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023c00 	.word	0x40023c00
 8004110:	40023800 	.word	0x40023800
 8004114:	0800867c 	.word	0x0800867c
 8004118:	20000000 	.word	0x20000000
 800411c:	20000004 	.word	0x20000004

08004120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004124:	b090      	sub	sp, #64	; 0x40
 8004126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
 800412c:	2300      	movs	r3, #0
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004130:	2300      	movs	r3, #0
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004138:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b08      	cmp	r3, #8
 8004142:	d00d      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x40>
 8004144:	2b08      	cmp	r3, #8
 8004146:	f200 80a1 	bhi.w	800428c <HAL_RCC_GetSysClockFreq+0x16c>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x34>
 800414e:	2b04      	cmp	r3, #4
 8004150:	d003      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x3a>
 8004152:	e09b      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004154:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004156:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004158:	e09b      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800415a:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800415c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800415e:	e098      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004160:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416a:	4b4d      	ldr	r3, [pc, #308]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d028      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004176:	4b4a      	ldr	r3, [pc, #296]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	099b      	lsrs	r3, r3, #6
 800417c:	2200      	movs	r2, #0
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	627a      	str	r2, [r7, #36]	; 0x24
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004188:	2100      	movs	r1, #0
 800418a:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800418c:	fb03 f201 	mul.w	r2, r3, r1
 8004190:	2300      	movs	r3, #0
 8004192:	fb00 f303 	mul.w	r3, r0, r3
 8004196:	4413      	add	r3, r2
 8004198:	4a43      	ldr	r2, [pc, #268]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800419a:	fba0 1202 	umull	r1, r2, r0, r2
 800419e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041a0:	460a      	mov	r2, r1
 80041a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80041a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a6:	4413      	add	r3, r2
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ac:	2200      	movs	r2, #0
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	61fa      	str	r2, [r7, #28]
 80041b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041ba:	f7fc f879 	bl	80002b0 <__aeabi_uldivmod>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4613      	mov	r3, r2
 80041c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c6:	e053      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c8:	4b35      	ldr	r3, [pc, #212]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	2200      	movs	r2, #0
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	617a      	str	r2, [r7, #20]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041da:	f04f 0b00 	mov.w	fp, #0
 80041de:	4652      	mov	r2, sl
 80041e0:	465b      	mov	r3, fp
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f04f 0100 	mov.w	r1, #0
 80041ea:	0159      	lsls	r1, r3, #5
 80041ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f0:	0150      	lsls	r0, r2, #5
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	ebb2 080a 	subs.w	r8, r2, sl
 80041fa:	eb63 090b 	sbc.w	r9, r3, fp
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800420a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800420e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004212:	ebb2 0408 	subs.w	r4, r2, r8
 8004216:	eb63 0509 	sbc.w	r5, r3, r9
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	00eb      	lsls	r3, r5, #3
 8004224:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004228:	00e2      	lsls	r2, r4, #3
 800422a:	4614      	mov	r4, r2
 800422c:	461d      	mov	r5, r3
 800422e:	eb14 030a 	adds.w	r3, r4, sl
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	eb45 030b 	adc.w	r3, r5, fp
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004246:	4629      	mov	r1, r5
 8004248:	028b      	lsls	r3, r1, #10
 800424a:	4621      	mov	r1, r4
 800424c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004250:	4621      	mov	r1, r4
 8004252:	028a      	lsls	r2, r1, #10
 8004254:	4610      	mov	r0, r2
 8004256:	4619      	mov	r1, r3
 8004258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425a:	2200      	movs	r2, #0
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	60fa      	str	r2, [r7, #12]
 8004260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004264:	f7fc f824 	bl	80002b0 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	3301      	adds	r3, #1
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800428a:	e002      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800428e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004294:	4618      	mov	r0, r3
 8004296:	3740      	adds	r7, #64	; 0x40
 8004298:	46bd      	mov	sp, r7
 800429a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	017d7840 	.word	0x017d7840

080042ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20000000 	.word	0x20000000

080042c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042c8:	f7ff fff0 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	0a9b      	lsrs	r3, r3, #10
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	4903      	ldr	r1, [pc, #12]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	0800868c 	.word	0x0800868c

080042ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042f0:	f7ff ffdc 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetPCLK2Freq+0x20>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0b5b      	lsrs	r3, r3, #13
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4903      	ldr	r1, [pc, #12]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004308:	4618      	mov	r0, r3
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40023800 	.word	0x40023800
 8004310:	0800868c 	.word	0x0800868c

08004314 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004338:	2b00      	cmp	r3, #0
 800433a:	d038      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800433c:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004342:	f7fd fea7 	bl	8002094 <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004348:	e008      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800434a:	f7fd fea3 	bl	8002094 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e0bd      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800435c:	4b61      	ldr	r3, [pc, #388]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f0      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	019b      	lsls	r3, r3, #6
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	071b      	lsls	r3, r3, #28
 800437a:	495a      	ldr	r1, [pc, #360]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004382:	4b57      	ldr	r3, [pc, #348]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004388:	f7fd fe84 	bl	8002094 <HAL_GetTick>
 800438c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004390:	f7fd fe80 	bl	8002094 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e09a      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a2:	4b50      	ldr	r3, [pc, #320]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8083 	beq.w	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	4b48      	ldr	r3, [pc, #288]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	4a47      	ldr	r2, [pc, #284]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ca:	6413      	str	r3, [r2, #64]	; 0x40
 80043cc:	4b45      	ldr	r3, [pc, #276]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043d8:	4b43      	ldr	r3, [pc, #268]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a42      	ldr	r2, [pc, #264]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043e4:	f7fd fe56 	bl	8002094 <HAL_GetTick>
 80043e8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043ec:	f7fd fe52 	bl	8002094 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e06c      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043fe:	4b3a      	ldr	r3, [pc, #232]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800440a:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004412:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d02f      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	429a      	cmp	r2, r3
 8004426:	d028      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004428:	4b2e      	ldr	r3, [pc, #184]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004430:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004432:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004438:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800443e:	4a29      	ldr	r2, [pc, #164]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004444:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d114      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004450:	f7fd fe20 	bl	8002094 <HAL_GetTick>
 8004454:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004456:	e00a      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004458:	f7fd fe1c 	bl	8002094 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e034      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0ee      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004486:	d10d      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004488:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449c:	4911      	ldr	r1, [pc, #68]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
 80044a2:	e005      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ae:	6093      	str	r3, [r2, #8]
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044bc:	4909      	ldr	r1, [pc, #36]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	7d1a      	ldrb	r2, [r3, #20]
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80044d4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	42470068 	.word	0x42470068
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40007000 	.word	0x40007000
 80044ec:	42470e40 	.word	0x42470e40
 80044f0:	424711e0 	.word	0x424711e0

080044f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e066      	b.n	80045d8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	7f5b      	ldrb	r3, [r3, #29]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d105      	bne.n	8004520 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc ffb0 	bl	8001480 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	22ca      	movs	r2, #202	; 0xca
 800452c:	625a      	str	r2, [r3, #36]	; 0x24
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2253      	movs	r2, #83	; 0x53
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa45 	bl	80049c6 <RTC_EnterInitMode>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d12c      	bne.n	80045a0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004558:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6899      	ldr	r1, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68d2      	ldr	r2, [r2, #12]
 8004580:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6919      	ldr	r1, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	041a      	lsls	r2, r3, #16
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa4c 	bl	8004a34 <RTC_ExitInitMode>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d113      	bne.n	80045ce <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699a      	ldr	r2, [r3, #24]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	22ff      	movs	r2, #255	; 0xff
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	7f1b      	ldrb	r3, [r3, #28]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_RTC_SetTime+0x1c>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e087      	b.n	800470c <HAL_RTC_SetTime+0x12c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2202      	movs	r2, #2
 8004606:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d126      	bne.n	800465c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2200      	movs	r2, #0
 8004620:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fa29 	bl	8004a7e <RTC_ByteToBcd2>
 800462c:	4603      	mov	r3, r0
 800462e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fa22 	bl	8004a7e <RTC_ByteToBcd2>
 800463a:	4603      	mov	r3, r0
 800463c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800463e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	789b      	ldrb	r3, [r3, #2]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fa1a 	bl	8004a7e <RTC_ByteToBcd2>
 800464a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800464c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	78db      	ldrb	r3, [r3, #3]
 8004654:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e018      	b.n	800468e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2200      	movs	r2, #0
 800466e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800467c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004682:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	78db      	ldrb	r3, [r3, #3]
 8004688:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	22ca      	movs	r2, #202	; 0xca
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2253      	movs	r2, #83	; 0x53
 800469c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f991 	bl	80049c6 <RTC_EnterInitMode>
 80046a4:	4603      	mov	r3, r0
 80046a6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d120      	bne.n	80046f0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80046b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80046bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6899      	ldr	r1, [r3, #8]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	431a      	orrs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f9a4 	bl	8004a34 <RTC_ExitInitMode>
 80046ec:	4603      	mov	r3, r0
 80046ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	22ff      	movs	r2, #255	; 0xff
 8004702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	771a      	strb	r2, [r3, #28]

  return status;
 800470a:	7cfb      	ldrb	r3, [r7, #19]
}
 800470c:	4618      	mov	r0, r3
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd90      	pop	{r4, r7, pc}

08004714 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004746:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800474a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004756:	b2da      	uxtb	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004766:	b2da      	uxtb	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004774:	b2da      	uxtb	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	0d9b      	lsrs	r3, r3, #22
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d11a      	bne.n	80047c6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f98f 	bl	8004ab8 <RTC_Bcd2ToByte>
 800479a:	4603      	mov	r3, r0
 800479c:	461a      	mov	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	785b      	ldrb	r3, [r3, #1]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f986 	bl	8004ab8 <RTC_Bcd2ToByte>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	789b      	ldrb	r3, [r3, #2]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f97d 	bl	8004ab8 <RTC_Bcd2ToByte>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	7f1b      	ldrb	r3, [r3, #28]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_RTC_SetDate+0x1c>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e071      	b.n	80048d0 <HAL_RTC_SetDate+0x100>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2202      	movs	r2, #2
 80047f6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10e      	bne.n	800481c <HAL_RTC_SetDate+0x4c>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	f023 0310 	bic.w	r3, r3, #16
 8004812:	b2db      	uxtb	r3, r3
 8004814:	330a      	adds	r3, #10
 8004816:	b2da      	uxtb	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d11c      	bne.n	800485c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	78db      	ldrb	r3, [r3, #3]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f929 	bl	8004a7e <RTC_ByteToBcd2>
 800482c:	4603      	mov	r3, r0
 800482e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f922 	bl	8004a7e <RTC_ByteToBcd2>
 800483a:	4603      	mov	r3, r0
 800483c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800483e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	789b      	ldrb	r3, [r3, #2]
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f91a 	bl	8004a7e <RTC_ByteToBcd2>
 800484a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800484c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e00e      	b.n	800487a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	78db      	ldrb	r3, [r3, #3]
 8004860:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004868:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800486e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	22ca      	movs	r2, #202	; 0xca
 8004880:	625a      	str	r2, [r3, #36]	; 0x24
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2253      	movs	r2, #83	; 0x53
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f89b 	bl	80049c6 <RTC_EnterInitMode>
 8004890:	4603      	mov	r3, r0
 8004892:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10c      	bne.n	80048b4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f8c2 	bl	8004a34 <RTC_ExitInitMode>
 80048b0:	4603      	mov	r3, r0
 80048b2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	22ff      	movs	r2, #255	; 0xff
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	771a      	strb	r2, [r3, #28]

  return status;
 80048ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd90      	pop	{r4, r7, pc}

080048d8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	0c1b      	lsrs	r3, r3, #16
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	b2da      	uxtb	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	0b5b      	lsrs	r3, r3, #13
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d11a      	bne.n	800496c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	78db      	ldrb	r3, [r3, #3]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f8bc 	bl	8004ab8 <RTC_Bcd2ToByte>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	785b      	ldrb	r3, [r3, #1]
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f8b3 	bl	8004ab8 <RTC_Bcd2ToByte>
 8004952:	4603      	mov	r3, r0
 8004954:	461a      	mov	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	789b      	ldrb	r3, [r3, #2]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f8aa 	bl	8004ab8 <RTC_Bcd2ToByte>
 8004964:	4603      	mov	r3, r0
 8004966:	461a      	mov	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004990:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004992:	f7fd fb7f 	bl	8002094 <HAL_GetTick>
 8004996:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004998:	e009      	b.n	80049ae <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800499a:	f7fd fb7b 	bl	8002094 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049a8:	d901      	bls.n	80049ae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e007      	b.n	80049be <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ee      	beq.n	800499a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d122      	bne.n	8004a2a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049f4:	f7fd fb4e 	bl	8002094 <HAL_GetTick>
 80049f8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80049fa:	e00c      	b.n	8004a16 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049fc:	f7fd fb4a 	bl	8002094 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a0a:	d904      	bls.n	8004a16 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2204      	movs	r2, #4
 8004a10:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d102      	bne.n	8004a2a <RTC_EnterInitMode+0x64>
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d1e8      	bne.n	80049fc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a4e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff ff89 	bl	8004976 <HAL_RTC_WaitForSynchro>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d004      	beq.n	8004a74 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	4603      	mov	r3, r0
 8004a86:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004a8c:	e005      	b.n	8004a9a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	3301      	adds	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	3b0a      	subs	r3, #10
 8004a98:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b09      	cmp	r3, #9
 8004a9e:	d8f6      	bhi.n	8004a8e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	b2db      	uxtb	r3, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	0092      	lsls	r2, r2, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b2db      	uxtb	r3, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e041      	b.n	8004b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc fe2c 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f000 fd60 	bl	80055f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e041      	b.n	8004c24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f839 	bl	8004c2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f000 fd11 	bl	80055f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	bf0c      	ite	eq
 8004c64:	2301      	moveq	r3, #1
 8004c66:	2300      	movne	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	e022      	b.n	8004cb2 <HAL_TIM_PWM_Start_DMA+0x72>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d109      	bne.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x46>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	2300      	movne	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	e015      	b.n	8004cb2 <HAL_TIM_PWM_Start_DMA+0x72>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d109      	bne.n	8004ca0 <HAL_TIM_PWM_Start_DMA+0x60>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e008      	b.n	8004cb2 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e15d      	b.n	8004f76 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <HAL_TIM_PWM_Start_DMA+0x94>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e022      	b.n	8004d1a <HAL_TIM_PWM_Start_DMA+0xda>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d109      	bne.n	8004cee <HAL_TIM_PWM_Start_DMA+0xae>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2301      	moveq	r3, #1
 8004ce8:	2300      	movne	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	e015      	b.n	8004d1a <HAL_TIM_PWM_Start_DMA+0xda>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d109      	bne.n	8004d08 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	bf0c      	ite	eq
 8004d00:	2301      	moveq	r3, #1
 8004d02:	2300      	movne	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	e008      	b.n	8004d1a <HAL_TIM_PWM_Start_DMA+0xda>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d024      	beq.n	8004d68 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <HAL_TIM_PWM_Start_DMA+0xee>
 8004d24:	887b      	ldrh	r3, [r7, #2]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e123      	b.n	8004f76 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d104      	bne.n	8004d3e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d3c:	e016      	b.n	8004d6c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d104      	bne.n	8004d4e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d4c:	e00e      	b.n	8004d6c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d5c:	e006      	b.n	8004d6c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d66:	e001      	b.n	8004d6c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e104      	b.n	8004f76 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	f200 80ae 	bhi.w	8004ed0 <HAL_TIM_PWM_Start_DMA+0x290>
 8004d74:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004db1 	.word	0x08004db1
 8004d80:	08004ed1 	.word	0x08004ed1
 8004d84:	08004ed1 	.word	0x08004ed1
 8004d88:	08004ed1 	.word	0x08004ed1
 8004d8c:	08004df9 	.word	0x08004df9
 8004d90:	08004ed1 	.word	0x08004ed1
 8004d94:	08004ed1 	.word	0x08004ed1
 8004d98:	08004ed1 	.word	0x08004ed1
 8004d9c:	08004e41 	.word	0x08004e41
 8004da0:	08004ed1 	.word	0x08004ed1
 8004da4:	08004ed1 	.word	0x08004ed1
 8004da8:	08004ed1 	.word	0x08004ed1
 8004dac:	08004e89 	.word	0x08004e89
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	4a72      	ldr	r2, [pc, #456]	; (8004f80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004db6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	4a71      	ldr	r2, [pc, #452]	; (8004f84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	4a70      	ldr	r2, [pc, #448]	; (8004f88 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004dc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3334      	adds	r3, #52	; 0x34
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	887b      	ldrh	r3, [r7, #2]
 8004dd8:	f7fd fb4c 	bl	8002474 <HAL_DMA_Start_IT>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e0c7      	b.n	8004f76 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df4:	60da      	str	r2, [r3, #12]
      break;
 8004df6:	e06e      	b.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	4a60      	ldr	r2, [pc, #384]	; (8004f80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004dfe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	4a5f      	ldr	r2, [pc, #380]	; (8004f84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	4a5e      	ldr	r2, [pc, #376]	; (8004f88 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004e0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3338      	adds	r3, #56	; 0x38
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	887b      	ldrh	r3, [r7, #2]
 8004e20:	f7fd fb28 	bl	8002474 <HAL_DMA_Start_IT>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e0a3      	b.n	8004f76 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e3c:	60da      	str	r2, [r3, #12]
      break;
 8004e3e:	e04a      	b.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	4a4e      	ldr	r2, [pc, #312]	; (8004f80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004e46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	4a4d      	ldr	r2, [pc, #308]	; (8004f84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4a4c      	ldr	r2, [pc, #304]	; (8004f88 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004e56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	333c      	adds	r3, #60	; 0x3c
 8004e64:	461a      	mov	r2, r3
 8004e66:	887b      	ldrh	r3, [r7, #2]
 8004e68:	f7fd fb04 	bl	8002474 <HAL_DMA_Start_IT>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e07f      	b.n	8004f76 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e84:	60da      	str	r2, [r3, #12]
      break;
 8004e86:	e026      	b.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	4a3c      	ldr	r2, [pc, #240]	; (8004f80 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004e8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	4a3b      	ldr	r2, [pc, #236]	; (8004f84 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	4a3a      	ldr	r2, [pc, #232]	; (8004f88 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004e9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3340      	adds	r3, #64	; 0x40
 8004eac:	461a      	mov	r2, r3
 8004eae:	887b      	ldrh	r3, [r7, #2]
 8004eb0:	f7fd fae0 	bl	8002474 <HAL_DMA_Start_IT>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e05b      	b.n	8004f76 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ecc:	60da      	str	r2, [r3, #12]
      break;
 8004ece:	e002      	b.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d14b      	bne.n	8004f74 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fe2b 	bl	8005b40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a27      	ldr	r2, [pc, #156]	; (8004f8c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d107      	bne.n	8004f04 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a20      	ldr	r2, [pc, #128]	; (8004f8c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d018      	beq.n	8004f40 <HAL_TIM_PWM_Start_DMA+0x300>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f16:	d013      	beq.n	8004f40 <HAL_TIM_PWM_Start_DMA+0x300>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00e      	beq.n	8004f40 <HAL_TIM_PWM_Start_DMA+0x300>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1b      	ldr	r2, [pc, #108]	; (8004f94 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d009      	beq.n	8004f40 <HAL_TIM_PWM_Start_DMA+0x300>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a19      	ldr	r2, [pc, #100]	; (8004f98 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <HAL_TIM_PWM_Start_DMA+0x300>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a18      	ldr	r2, [pc, #96]	; (8004f9c <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d111      	bne.n	8004f64 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d010      	beq.n	8004f74 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f62:	e007      	b.n	8004f74 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	080054e5 	.word	0x080054e5
 8004f84:	0800558d 	.word	0x0800558d
 8004f88:	08005453 	.word	0x08005453
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40000c00 	.word	0x40000c00
 8004f9c:	40014000 	.word	0x40014000

08004fa0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d855      	bhi.n	8005060 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	08005061 	.word	0x08005061
 8004fc4:	08005061 	.word	0x08005061
 8004fc8:	08005061 	.word	0x08005061
 8004fcc:	0800500d 	.word	0x0800500d
 8004fd0:	08005061 	.word	0x08005061
 8004fd4:	08005061 	.word	0x08005061
 8004fd8:	08005061 	.word	0x08005061
 8004fdc:	08005029 	.word	0x08005029
 8004fe0:	08005061 	.word	0x08005061
 8004fe4:	08005061 	.word	0x08005061
 8004fe8:	08005061 	.word	0x08005061
 8004fec:	08005045 	.word	0x08005045
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ffe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd fafd 	bl	8002604 <HAL_DMA_Abort_IT>
      break;
 800500a:	e02c      	b.n	8005066 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	4618      	mov	r0, r3
 8005022:	f7fd faef 	bl	8002604 <HAL_DMA_Abort_IT>
      break;
 8005026:	e01e      	b.n	8005066 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005036:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	4618      	mov	r0, r3
 800503e:	f7fd fae1 	bl	8002604 <HAL_DMA_Abort_IT>
      break;
 8005042:	e010      	b.n	8005066 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005052:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	4618      	mov	r0, r3
 800505a:	f7fd fad3 	bl	8002604 <HAL_DMA_Abort_IT>
      break;
 800505e:	e002      	b.n	8005066 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	bf00      	nop
  }

  if (status == HAL_OK)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d157      	bne.n	800511c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2200      	movs	r2, #0
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fd63 	bl	8005b40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a2a      	ldr	r2, [pc, #168]	; (8005128 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d117      	bne.n	80050b4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6a1a      	ldr	r2, [r3, #32]
 800508a:	f241 1311 	movw	r3, #4369	; 0x1111
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10f      	bne.n	80050b4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	f240 4344 	movw	r3, #1092	; 0x444
 800509e:	4013      	ands	r3, r2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d107      	bne.n	80050b4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6a1a      	ldr	r2, [r3, #32]
 80050ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10f      	bne.n	80050e4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6a1a      	ldr	r2, [r3, #32]
 80050ca:	f240 4344 	movw	r3, #1092	; 0x444
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <HAL_TIM_PWM_Stop_DMA+0x154>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f2:	e013      	b.n	800511c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d104      	bne.n	8005104 <HAL_TIM_PWM_Stop_DMA+0x164>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005102:	e00b      	b.n	800511c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b08      	cmp	r3, #8
 8005108:	d104      	bne.n	8005114 <HAL_TIM_PWM_Stop_DMA+0x174>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005112:	e003      	b.n	800511c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800511c:	7bfb      	ldrb	r3, [r7, #15]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40010000 	.word	0x40010000

0800512c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005146:	2302      	movs	r3, #2
 8005148:	e0ae      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b0c      	cmp	r3, #12
 8005156:	f200 809f 	bhi.w	8005298 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800515a:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005195 	.word	0x08005195
 8005164:	08005299 	.word	0x08005299
 8005168:	08005299 	.word	0x08005299
 800516c:	08005299 	.word	0x08005299
 8005170:	080051d5 	.word	0x080051d5
 8005174:	08005299 	.word	0x08005299
 8005178:	08005299 	.word	0x08005299
 800517c:	08005299 	.word	0x08005299
 8005180:	08005217 	.word	0x08005217
 8005184:	08005299 	.word	0x08005299
 8005188:	08005299 	.word	0x08005299
 800518c:	08005299 	.word	0x08005299
 8005190:	08005257 	.word	0x08005257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 faaa 	bl	80056f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0208 	orr.w	r2, r2, #8
 80051ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0204 	bic.w	r2, r2, #4
 80051be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6999      	ldr	r1, [r3, #24]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	619a      	str	r2, [r3, #24]
      break;
 80051d2:	e064      	b.n	800529e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 faf0 	bl	80057c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6999      	ldr	r1, [r3, #24]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	021a      	lsls	r2, r3, #8
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	619a      	str	r2, [r3, #24]
      break;
 8005214:	e043      	b.n	800529e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fb3b 	bl	8005898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69da      	ldr	r2, [r3, #28]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0208 	orr.w	r2, r2, #8
 8005230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0204 	bic.w	r2, r2, #4
 8005240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69d9      	ldr	r1, [r3, #28]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	61da      	str	r2, [r3, #28]
      break;
 8005254:	e023      	b.n	800529e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fb85 	bl	800596c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69da      	ldr	r2, [r3, #28]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69d9      	ldr	r1, [r3, #28]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	021a      	lsls	r2, r3, #8
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	61da      	str	r2, [r3, #28]
      break;
 8005296:	e002      	b.n	800529e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	75fb      	strb	r3, [r7, #23]
      break;
 800529c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_TIM_ConfigClockSource+0x1c>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e0b4      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x186>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005304:	d03e      	beq.n	8005384 <HAL_TIM_ConfigClockSource+0xd4>
 8005306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800530a:	f200 8087 	bhi.w	800541c <HAL_TIM_ConfigClockSource+0x16c>
 800530e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005312:	f000 8086 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x172>
 8005316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531a:	d87f      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x16c>
 800531c:	2b70      	cmp	r3, #112	; 0x70
 800531e:	d01a      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0xa6>
 8005320:	2b70      	cmp	r3, #112	; 0x70
 8005322:	d87b      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	2b60      	cmp	r3, #96	; 0x60
 8005326:	d050      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x11a>
 8005328:	2b60      	cmp	r3, #96	; 0x60
 800532a:	d877      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x16c>
 800532c:	2b50      	cmp	r3, #80	; 0x50
 800532e:	d03c      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0xfa>
 8005330:	2b50      	cmp	r3, #80	; 0x50
 8005332:	d873      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x16c>
 8005334:	2b40      	cmp	r3, #64	; 0x40
 8005336:	d058      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x13a>
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d86f      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x16c>
 800533c:	2b30      	cmp	r3, #48	; 0x30
 800533e:	d064      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15a>
 8005340:	2b30      	cmp	r3, #48	; 0x30
 8005342:	d86b      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x16c>
 8005344:	2b20      	cmp	r3, #32
 8005346:	d060      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15a>
 8005348:	2b20      	cmp	r3, #32
 800534a:	d867      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x16c>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d05c      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15a>
 8005350:	2b10      	cmp	r3, #16
 8005352:	d05a      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15a>
 8005354:	e062      	b.n	800541c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6899      	ldr	r1, [r3, #8]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f000 fbcb 	bl	8005b00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	609a      	str	r2, [r3, #8]
      break;
 8005382:	e04f      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	6899      	ldr	r1, [r3, #8]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f000 fbb4 	bl	8005b00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053a6:	609a      	str	r2, [r3, #8]
      break;
 80053a8:	e03c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f000 fb28 	bl	8005a0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2150      	movs	r1, #80	; 0x50
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fb81 	bl	8005aca <TIM_ITRx_SetConfig>
      break;
 80053c8:	e02c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f000 fb47 	bl	8005a6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2160      	movs	r1, #96	; 0x60
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fb71 	bl	8005aca <TIM_ITRx_SetConfig>
      break;
 80053e8:	e01c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f000 fb08 	bl	8005a0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2140      	movs	r1, #64	; 0x40
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fb61 	bl	8005aca <TIM_ITRx_SetConfig>
      break;
 8005408:	e00c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f000 fb58 	bl	8005aca <TIM_ITRx_SetConfig>
      break;
 800541a:	e003      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      break;
 8005420:	e000      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	429a      	cmp	r2, r3
 8005468:	d107      	bne.n	800547a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005478:	e02a      	b.n	80054d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d107      	bne.n	8005494 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2202      	movs	r2, #2
 8005488:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005492:	e01d      	b.n	80054d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d107      	bne.n	80054ae <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2204      	movs	r2, #4
 80054a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ac:	e010      	b.n	80054d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d107      	bne.n	80054c8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2208      	movs	r2, #8
 80054bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054c6:	e003      	b.n	80054d0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff ffb4 	bl	800543e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
}
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d10b      	bne.n	8005514 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d136      	bne.n	8005578 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005512:	e031      	b.n	8005578 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	429a      	cmp	r2, r3
 800551c:	d10b      	bne.n	8005536 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2202      	movs	r2, #2
 8005522:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d125      	bne.n	8005578 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005534:	e020      	b.n	8005578 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d10b      	bne.n	8005558 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2204      	movs	r2, #4
 8005544:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d114      	bne.n	8005578 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005556:	e00f      	b.n	8005578 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	429a      	cmp	r2, r3
 8005560:	d10a      	bne.n	8005578 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2208      	movs	r2, #8
 8005566:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d103      	bne.n	8005578 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7fc fbd5 	bl	8001d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
}
 8005584:	bf00      	nop
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d103      	bne.n	80055ac <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	771a      	strb	r2, [r3, #28]
 80055aa:	e019      	b.n	80055e0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d103      	bne.n	80055be <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2202      	movs	r2, #2
 80055ba:	771a      	strb	r2, [r3, #28]
 80055bc:	e010      	b.n	80055e0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d103      	bne.n	80055d0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2204      	movs	r2, #4
 80055cc:	771a      	strb	r2, [r3, #28]
 80055ce:	e007      	b.n	80055e0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d102      	bne.n	80055e0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2208      	movs	r2, #8
 80055de:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7fc fb21 	bl	8001c28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a34      	ldr	r2, [pc, #208]	; (80056d8 <TIM_Base_SetConfig+0xe4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00f      	beq.n	800562c <TIM_Base_SetConfig+0x38>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005612:	d00b      	beq.n	800562c <TIM_Base_SetConfig+0x38>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a31      	ldr	r2, [pc, #196]	; (80056dc <TIM_Base_SetConfig+0xe8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_Base_SetConfig+0x38>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a30      	ldr	r2, [pc, #192]	; (80056e0 <TIM_Base_SetConfig+0xec>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0x38>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a2f      	ldr	r2, [pc, #188]	; (80056e4 <TIM_Base_SetConfig+0xf0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d108      	bne.n	800563e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a25      	ldr	r2, [pc, #148]	; (80056d8 <TIM_Base_SetConfig+0xe4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d01b      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564c:	d017      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a22      	ldr	r2, [pc, #136]	; (80056dc <TIM_Base_SetConfig+0xe8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a21      	ldr	r2, [pc, #132]	; (80056e0 <TIM_Base_SetConfig+0xec>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00f      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a20      	ldr	r2, [pc, #128]	; (80056e4 <TIM_Base_SetConfig+0xf0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00b      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <TIM_Base_SetConfig+0xf4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d007      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <TIM_Base_SetConfig+0xf8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <TIM_Base_SetConfig+0xfc>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d108      	bne.n	8005690 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <TIM_Base_SetConfig+0xe4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d103      	bne.n	80056c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	615a      	str	r2, [r3, #20]
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800

080056f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 0302 	bic.w	r3, r3, #2
 800573c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <TIM_OC1_SetConfig+0xc8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10c      	bne.n	800576a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f023 0308 	bic.w	r3, r3, #8
 8005756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 0304 	bic.w	r3, r3, #4
 8005768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a13      	ldr	r2, [pc, #76]	; (80057bc <TIM_OC1_SetConfig+0xc8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d111      	bne.n	8005796 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	621a      	str	r2, [r3, #32]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	40010000 	.word	0x40010000

080057c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0210 	bic.w	r2, r3, #16
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0320 	bic.w	r3, r3, #32
 800580a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <TIM_OC2_SetConfig+0xd4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10d      	bne.n	800583c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a15      	ldr	r2, [pc, #84]	; (8005894 <TIM_OC2_SetConfig+0xd4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d113      	bne.n	800586c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800584a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40010000 	.word	0x40010000

08005898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1d      	ldr	r2, [pc, #116]	; (8005968 <TIM_OC3_SetConfig+0xd0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d10d      	bne.n	8005912 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a14      	ldr	r2, [pc, #80]	; (8005968 <TIM_OC3_SetConfig+0xd0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d113      	bne.n	8005942 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	621a      	str	r2, [r3, #32]
}
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40010000 	.word	0x40010000

0800596c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	031b      	lsls	r3, r3, #12
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a10      	ldr	r2, [pc, #64]	; (8005a08 <TIM_OC4_SetConfig+0x9c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d109      	bne.n	80059e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40010000 	.word	0x40010000

08005a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f023 0201 	bic.w	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f023 030a 	bic.w	r3, r3, #10
 8005a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0210 	bic.w	r2, r3, #16
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	031b      	lsls	r3, r3, #12
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b085      	sub	sp, #20
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f043 0307 	orr.w	r3, r3, #7
 8005aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	609a      	str	r2, [r3, #8]
}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	021a      	lsls	r2, r3, #8
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	609a      	str	r2, [r3, #8]
}
 8005b34:	bf00      	nop
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	2201      	movs	r2, #1
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1a      	ldr	r2, [r3, #32]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	401a      	ands	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a1a      	ldr	r2, [r3, #32]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e050      	b.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d018      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf0:	d013      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00e      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d009      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a15      	ldr	r2, [pc, #84]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d004      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a13      	ldr	r2, [pc, #76]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d10c      	bne.n	8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800
 8005c60:	40000c00 	.word	0x40000c00
 8005c64:	40014000 	.word	0x40014000

08005c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e03d      	b.n	8005d00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e03f      	b.n	8005d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fb fdd6 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2224      	movs	r2, #36	; 0x24
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fddf 	bl	8006914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695a      	ldr	r2, [r3, #20]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b08a      	sub	sp, #40	; 0x28
 8005daa:	af02      	add	r7, sp, #8
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d17c      	bne.n	8005ec0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <HAL_UART_Transmit+0x2c>
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e075      	b.n	8005ec2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_UART_Transmit+0x3e>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e06e      	b.n	8005ec2 <HAL_UART_Transmit+0x11c>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2221      	movs	r2, #33	; 0x21
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dfa:	f7fc f94b 	bl	8002094 <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e14:	d108      	bne.n	8005e28 <HAL_UART_Transmit+0x82>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	e003      	b.n	8005e30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e38:	e02a      	b.n	8005e90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2200      	movs	r2, #0
 8005e42:	2180      	movs	r1, #128	; 0x80
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 fb1f 	bl	8006488 <UART_WaitOnFlagUntilTimeout>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e036      	b.n	8005ec2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	3302      	adds	r3, #2
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	e007      	b.n	8005e82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	781a      	ldrb	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1cf      	bne.n	8005e3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2140      	movs	r1, #64	; 0x40
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 faef 	bl	8006488 <UART_WaitOnFlagUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e006      	b.n	8005ec2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e000      	b.n	8005ec2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ec0:	2302      	movs	r3, #2
  }
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d11d      	bne.n	8005f20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_UART_Receive_IT+0x26>
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e016      	b.n	8005f22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Receive_IT+0x38>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e00f      	b.n	8005f22 <HAL_UART_Receive_IT+0x58>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	461a      	mov	r2, r3
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fb24 	bl	8006564 <UART_Start_Receive_IT>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	e000      	b.n	8005f22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f20:	2302      	movs	r3, #2
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b0ba      	sub	sp, #232	; 0xe8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10f      	bne.n	8005f92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <HAL_UART_IRQHandler+0x66>
 8005f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fc07 	bl	800679e <UART_Receive_IT>
      return;
 8005f90:	e256      	b.n	8006440 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 80de 	beq.w	8006158 <HAL_UART_IRQHandler+0x22c>
 8005f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d106      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80d1 	beq.w	8006158 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <HAL_UART_IRQHandler+0xae>
 8005fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f043 0201 	orr.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <HAL_UART_IRQHandler+0xd2>
 8005fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f043 0202 	orr.w	r2, r3, #2
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_UART_IRQHandler+0xf6>
 800600a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f043 0204 	orr.w	r2, r3, #4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d011      	beq.n	8006052 <HAL_UART_IRQHandler+0x126>
 800602e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d105      	bne.n	8006046 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800603a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f043 0208 	orr.w	r2, r3, #8
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 81ed 	beq.w	8006436 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800605c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006060:	f003 0320 	and.w	r3, r3, #32
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <HAL_UART_IRQHandler+0x14e>
 8006068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fb92 	bl	800679e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	bf0c      	ite	eq
 8006088:	2301      	moveq	r3, #1
 800608a:	2300      	movne	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <HAL_UART_IRQHandler+0x17a>
 800609e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d04f      	beq.n	8006146 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa9a 	bl	80065e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b40      	cmp	r3, #64	; 0x40
 80060b8:	d141      	bne.n	800613e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3314      	adds	r3, #20
 80060c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3314      	adds	r3, #20
 80060e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1d9      	bne.n	80060ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	2b00      	cmp	r3, #0
 800610c:	d013      	beq.n	8006136 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	4a7d      	ldr	r2, [pc, #500]	; (8006308 <HAL_UART_IRQHandler+0x3dc>)
 8006114:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	4618      	mov	r0, r3
 800611c:	f7fc fa72 	bl	8002604 <HAL_DMA_Abort_IT>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d016      	beq.n	8006154 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006130:	4610      	mov	r0, r2
 8006132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006134:	e00e      	b.n	8006154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f990 	bl	800645c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800613c:	e00a      	b.n	8006154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f98c 	bl	800645c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006144:	e006      	b.n	8006154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f988 	bl	800645c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006152:	e170      	b.n	8006436 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006154:	bf00      	nop
    return;
 8006156:	e16e      	b.n	8006436 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	2b01      	cmp	r3, #1
 800615e:	f040 814a 	bne.w	80063f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 8143 	beq.w	80063f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 813c 	beq.w	80063f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800617e:	2300      	movs	r3, #0
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60bb      	str	r3, [r7, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	60bb      	str	r3, [r7, #8]
 8006192:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	f040 80b4 	bne.w	800630c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 8140 	beq.w	800643a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061c2:	429a      	cmp	r2, r3
 80061c4:	f080 8139 	bcs.w	800643a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061da:	f000 8088 	beq.w	80062ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800620a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800620e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1d9      	bne.n	80061de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3314      	adds	r3, #20
 8006230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800623a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3314      	adds	r3, #20
 800624a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800624e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006252:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e1      	bne.n	800622a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3314      	adds	r3, #20
 800626c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3314      	adds	r3, #20
 8006286:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800628a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800628c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e3      	bne.n	8006266 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062be:	f023 0310 	bic.w	r3, r3, #16
 80062c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	330c      	adds	r3, #12
 80062cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80062d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80062d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e3      	bne.n	80062ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fc f91b 	bl	8002524 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f8b6 	bl	8006470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006304:	e099      	b.n	800643a <HAL_UART_IRQHandler+0x50e>
 8006306:	bf00      	nop
 8006308:	080066a7 	.word	0x080066a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006314:	b29b      	uxth	r3, r3
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 808b 	beq.w	800643e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8086 	beq.w	800643e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	330c      	adds	r3, #12
 8006338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006356:	647a      	str	r2, [r7, #68]	; 0x44
 8006358:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800635c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e3      	bne.n	8006332 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3314      	adds	r3, #20
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	623b      	str	r3, [r7, #32]
   return(result);
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	f023 0301 	bic.w	r3, r3, #1
 8006380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3314      	adds	r3, #20
 800638a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800638e:	633a      	str	r2, [r7, #48]	; 0x30
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e3      	bne.n	800636a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	330c      	adds	r3, #12
 80063b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	e853 3f00 	ldrex	r3, [r3]
 80063be:	60fb      	str	r3, [r7, #12]
   return(result);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0310 	bic.w	r3, r3, #16
 80063c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	330c      	adds	r3, #12
 80063d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80063d4:	61fa      	str	r2, [r7, #28]
 80063d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	69b9      	ldr	r1, [r7, #24]
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	617b      	str	r3, [r7, #20]
   return(result);
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e3      	bne.n	80063b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f83e 	bl	8006470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063f4:	e023      	b.n	800643e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d009      	beq.n	8006416 <HAL_UART_IRQHandler+0x4ea>
 8006402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f95d 	bl	80066ce <UART_Transmit_IT>
    return;
 8006414:	e014      	b.n	8006440 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <HAL_UART_IRQHandler+0x514>
 8006422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	d008      	beq.n	8006440 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f99d 	bl	800676e <UART_EndTransmit_IT>
    return;
 8006434:	e004      	b.n	8006440 <HAL_UART_IRQHandler+0x514>
    return;
 8006436:	bf00      	nop
 8006438:	e002      	b.n	8006440 <HAL_UART_IRQHandler+0x514>
      return;
 800643a:	bf00      	nop
 800643c:	e000      	b.n	8006440 <HAL_UART_IRQHandler+0x514>
      return;
 800643e:	bf00      	nop
  }
}
 8006440:	37e8      	adds	r7, #232	; 0xe8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop

08006448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b090      	sub	sp, #64	; 0x40
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	603b      	str	r3, [r7, #0]
 8006494:	4613      	mov	r3, r2
 8006496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006498:	e050      	b.n	800653c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d04c      	beq.n	800653c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80064a8:	f7fb fdf4 	bl	8002094 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d241      	bcs.n	800653c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064d8:	637a      	str	r2, [r7, #52]	; 0x34
 80064da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3314      	adds	r3, #20
 80064f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	613b      	str	r3, [r7, #16]
   return(result);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f023 0301 	bic.w	r3, r3, #1
 8006502:	63bb      	str	r3, [r7, #56]	; 0x38
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3314      	adds	r3, #20
 800650a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800650c:	623a      	str	r2, [r7, #32]
 800650e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	69f9      	ldr	r1, [r7, #28]
 8006512:	6a3a      	ldr	r2, [r7, #32]
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	61bb      	str	r3, [r7, #24]
   return(result);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e5      	bne.n	80064ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e00f      	b.n	800655c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4013      	ands	r3, r2
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	429a      	cmp	r2, r3
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	429a      	cmp	r2, r3
 8006558:	d09f      	beq.n	800649a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3740      	adds	r7, #64	; 0x40
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	4613      	mov	r3, r2
 8006570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	88fa      	ldrh	r2, [r7, #6]
 800657c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	88fa      	ldrh	r2, [r7, #6]
 8006582:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2222      	movs	r2, #34	; 0x22
 800658e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d007      	beq.n	80065b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695a      	ldr	r2, [r3, #20]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0201 	orr.w	r2, r2, #1
 80065c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0220 	orr.w	r2, r2, #32
 80065d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b095      	sub	sp, #84	; 0x54
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	330c      	adds	r3, #12
 80065ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	330c      	adds	r3, #12
 8006606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006608:	643a      	str	r2, [r7, #64]	; 0x40
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800660e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e5      	bne.n	80065e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3314      	adds	r3, #20
 8006622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	61fb      	str	r3, [r7, #28]
   return(result);
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f023 0301 	bic.w	r3, r3, #1
 8006632:	64bb      	str	r3, [r7, #72]	; 0x48
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3314      	adds	r3, #20
 800663a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800663c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e5      	bne.n	800661c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	2b01      	cmp	r3, #1
 8006656:	d119      	bne.n	800668c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	60bb      	str	r3, [r7, #8]
   return(result);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f023 0310 	bic.w	r3, r3, #16
 800666e:	647b      	str	r3, [r7, #68]	; 0x44
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006678:	61ba      	str	r2, [r7, #24]
 800667a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	6979      	ldr	r1, [r7, #20]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	613b      	str	r3, [r7, #16]
   return(result);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e5      	bne.n	8006658 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
}
 800669a:	bf00      	nop
 800669c:	3754      	adds	r7, #84	; 0x54
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff fecb 	bl	800645c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b21      	cmp	r3, #33	; 0x21
 80066e0:	d13e      	bne.n	8006760 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ea:	d114      	bne.n	8006716 <UART_Transmit_IT+0x48>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d110      	bne.n	8006716 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006708:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	1c9a      	adds	r2, r3, #2
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	621a      	str	r2, [r3, #32]
 8006714:	e008      	b.n	8006728 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	1c59      	adds	r1, r3, #1
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6211      	str	r1, [r2, #32]
 8006720:	781a      	ldrb	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	b29b      	uxth	r3, r3
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	4619      	mov	r1, r3
 8006736:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10f      	bne.n	800675c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800674a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800675a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e000      	b.n	8006762 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006760:	2302      	movs	r3, #2
  }
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006784:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff fe5a 	bl	8006448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b08c      	sub	sp, #48	; 0x30
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b22      	cmp	r3, #34	; 0x22
 80067b0:	f040 80ab 	bne.w	800690a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067bc:	d117      	bne.n	80067ee <UART_Receive_IT+0x50>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d113      	bne.n	80067ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e6:	1c9a      	adds	r2, r3, #2
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28
 80067ec:	e026      	b.n	800683c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006800:	d007      	beq.n	8006812 <UART_Receive_IT+0x74>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <UART_Receive_IT+0x82>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	b2da      	uxtb	r2, r3
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	e008      	b.n	8006832 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800682c:	b2da      	uxtb	r2, r3
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29b      	uxth	r3, r3
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	4619      	mov	r1, r3
 800684a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800684c:	2b00      	cmp	r3, #0
 800684e:	d15a      	bne.n	8006906 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0220 	bic.w	r2, r2, #32
 800685e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800686e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695a      	ldr	r2, [r3, #20]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0201 	bic.w	r2, r2, #1
 800687e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	2b01      	cmp	r3, #1
 800688e:	d135      	bne.n	80068fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	330c      	adds	r3, #12
 800689c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	613b      	str	r3, [r7, #16]
   return(result);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f023 0310 	bic.w	r3, r3, #16
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	330c      	adds	r3, #12
 80068b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b6:	623a      	str	r2, [r7, #32]
 80068b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	69f9      	ldr	r1, [r7, #28]
 80068bc:	6a3a      	ldr	r2, [r7, #32]
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e5      	bne.n	8006896 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d10a      	bne.n	80068ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff fdbb 	bl	8006470 <HAL_UARTEx_RxEventCallback>
 80068fa:	e002      	b.n	8006902 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7fa fafd 	bl	8000efc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	e002      	b.n	800690c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	e000      	b.n	800690c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800690a:	2302      	movs	r3, #2
  }
}
 800690c:	4618      	mov	r0, r3
 800690e:	3730      	adds	r7, #48	; 0x30
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006918:	b0c0      	sub	sp, #256	; 0x100
 800691a:	af00      	add	r7, sp, #0
 800691c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800692c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006930:	68d9      	ldr	r1, [r3, #12]
 8006932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	ea40 0301 	orr.w	r3, r0, r1
 800693c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800693e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	431a      	orrs	r2, r3
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	431a      	orrs	r2, r3
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800696c:	f021 010c 	bic.w	r1, r1, #12
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800697a:	430b      	orrs	r3, r1
 800697c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800697e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800698a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698e:	6999      	ldr	r1, [r3, #24]
 8006990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	ea40 0301 	orr.w	r3, r0, r1
 800699a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b8f      	ldr	r3, [pc, #572]	; (8006be0 <UART_SetConfig+0x2cc>)
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d005      	beq.n	80069b4 <UART_SetConfig+0xa0>
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	4b8d      	ldr	r3, [pc, #564]	; (8006be4 <UART_SetConfig+0x2d0>)
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d104      	bne.n	80069be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069b4:	f7fd fc9a 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 80069b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069bc:	e003      	b.n	80069c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069be:	f7fd fc81 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 80069c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d0:	f040 810c 	bne.w	8006bec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d8:	2200      	movs	r2, #0
 80069da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069e6:	4622      	mov	r2, r4
 80069e8:	462b      	mov	r3, r5
 80069ea:	1891      	adds	r1, r2, r2
 80069ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80069ee:	415b      	adcs	r3, r3
 80069f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069f6:	4621      	mov	r1, r4
 80069f8:	eb12 0801 	adds.w	r8, r2, r1
 80069fc:	4629      	mov	r1, r5
 80069fe:	eb43 0901 	adc.w	r9, r3, r1
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a16:	4690      	mov	r8, r2
 8006a18:	4699      	mov	r9, r3
 8006a1a:	4623      	mov	r3, r4
 8006a1c:	eb18 0303 	adds.w	r3, r8, r3
 8006a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a24:	462b      	mov	r3, r5
 8006a26:	eb49 0303 	adc.w	r3, r9, r3
 8006a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a42:	460b      	mov	r3, r1
 8006a44:	18db      	adds	r3, r3, r3
 8006a46:	653b      	str	r3, [r7, #80]	; 0x50
 8006a48:	4613      	mov	r3, r2
 8006a4a:	eb42 0303 	adc.w	r3, r2, r3
 8006a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a58:	f7f9 fc2a 	bl	80002b0 <__aeabi_uldivmod>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4b61      	ldr	r3, [pc, #388]	; (8006be8 <UART_SetConfig+0x2d4>)
 8006a62:	fba3 2302 	umull	r2, r3, r3, r2
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	011c      	lsls	r4, r3, #4
 8006a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	464b      	mov	r3, r9
 8006a80:	1891      	adds	r1, r2, r2
 8006a82:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a84:	415b      	adcs	r3, r3
 8006a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a8c:	4641      	mov	r1, r8
 8006a8e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a92:	4649      	mov	r1, r9
 8006a94:	eb43 0b01 	adc.w	fp, r3, r1
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006aa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006aa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aac:	4692      	mov	sl, r2
 8006aae:	469b      	mov	fp, r3
 8006ab0:	4643      	mov	r3, r8
 8006ab2:	eb1a 0303 	adds.w	r3, sl, r3
 8006ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aba:	464b      	mov	r3, r9
 8006abc:	eb4b 0303 	adc.w	r3, fp, r3
 8006ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ad0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ad4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	18db      	adds	r3, r3, r3
 8006adc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ade:	4613      	mov	r3, r2
 8006ae0:	eb42 0303 	adc.w	r3, r2, r3
 8006ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006aea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006aee:	f7f9 fbdf 	bl	80002b0 <__aeabi_uldivmod>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	4b3b      	ldr	r3, [pc, #236]	; (8006be8 <UART_SetConfig+0x2d4>)
 8006afa:	fba3 2301 	umull	r2, r3, r3, r1
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	2264      	movs	r2, #100	; 0x64
 8006b02:	fb02 f303 	mul.w	r3, r2, r3
 8006b06:	1acb      	subs	r3, r1, r3
 8006b08:	00db      	lsls	r3, r3, #3
 8006b0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b0e:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <UART_SetConfig+0x2d4>)
 8006b10:	fba3 2302 	umull	r2, r3, r3, r2
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b1c:	441c      	add	r4, r3
 8006b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b30:	4642      	mov	r2, r8
 8006b32:	464b      	mov	r3, r9
 8006b34:	1891      	adds	r1, r2, r2
 8006b36:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b38:	415b      	adcs	r3, r3
 8006b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b40:	4641      	mov	r1, r8
 8006b42:	1851      	adds	r1, r2, r1
 8006b44:	6339      	str	r1, [r7, #48]	; 0x30
 8006b46:	4649      	mov	r1, r9
 8006b48:	414b      	adcs	r3, r1
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b58:	4659      	mov	r1, fp
 8006b5a:	00cb      	lsls	r3, r1, #3
 8006b5c:	4651      	mov	r1, sl
 8006b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b62:	4651      	mov	r1, sl
 8006b64:	00ca      	lsls	r2, r1, #3
 8006b66:	4610      	mov	r0, r2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	189b      	adds	r3, r3, r2
 8006b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b74:	464b      	mov	r3, r9
 8006b76:	460a      	mov	r2, r1
 8006b78:	eb42 0303 	adc.w	r3, r2, r3
 8006b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b94:	460b      	mov	r3, r1
 8006b96:	18db      	adds	r3, r3, r3
 8006b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ba6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006baa:	f7f9 fb81 	bl	80002b0 <__aeabi_uldivmod>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <UART_SetConfig+0x2d4>)
 8006bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb8:	095b      	lsrs	r3, r3, #5
 8006bba:	2164      	movs	r1, #100	; 0x64
 8006bbc:	fb01 f303 	mul.w	r3, r1, r3
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	3332      	adds	r3, #50	; 0x32
 8006bc6:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <UART_SetConfig+0x2d4>)
 8006bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	f003 0207 	and.w	r2, r3, #7
 8006bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4422      	add	r2, r4
 8006bda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bdc:	e105      	b.n	8006dea <UART_SetConfig+0x4d6>
 8006bde:	bf00      	nop
 8006be0:	40011000 	.word	0x40011000
 8006be4:	40011400 	.word	0x40011400
 8006be8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bfe:	4642      	mov	r2, r8
 8006c00:	464b      	mov	r3, r9
 8006c02:	1891      	adds	r1, r2, r2
 8006c04:	6239      	str	r1, [r7, #32]
 8006c06:	415b      	adcs	r3, r3
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c0e:	4641      	mov	r1, r8
 8006c10:	1854      	adds	r4, r2, r1
 8006c12:	4649      	mov	r1, r9
 8006c14:	eb43 0501 	adc.w	r5, r3, r1
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	00eb      	lsls	r3, r5, #3
 8006c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c26:	00e2      	lsls	r2, r4, #3
 8006c28:	4614      	mov	r4, r2
 8006c2a:	461d      	mov	r5, r3
 8006c2c:	4643      	mov	r3, r8
 8006c2e:	18e3      	adds	r3, r4, r3
 8006c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c34:	464b      	mov	r3, r9
 8006c36:	eb45 0303 	adc.w	r3, r5, r3
 8006c3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c4e:	f04f 0200 	mov.w	r2, #0
 8006c52:	f04f 0300 	mov.w	r3, #0
 8006c56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	008b      	lsls	r3, r1, #2
 8006c5e:	4621      	mov	r1, r4
 8006c60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c64:	4621      	mov	r1, r4
 8006c66:	008a      	lsls	r2, r1, #2
 8006c68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c6c:	f7f9 fb20 	bl	80002b0 <__aeabi_uldivmod>
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	4b60      	ldr	r3, [pc, #384]	; (8006df8 <UART_SetConfig+0x4e4>)
 8006c76:	fba3 2302 	umull	r2, r3, r3, r2
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	011c      	lsls	r4, r3, #4
 8006c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c90:	4642      	mov	r2, r8
 8006c92:	464b      	mov	r3, r9
 8006c94:	1891      	adds	r1, r2, r2
 8006c96:	61b9      	str	r1, [r7, #24]
 8006c98:	415b      	adcs	r3, r3
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ca0:	4641      	mov	r1, r8
 8006ca2:	1851      	adds	r1, r2, r1
 8006ca4:	6139      	str	r1, [r7, #16]
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	414b      	adcs	r3, r1
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cb8:	4659      	mov	r1, fp
 8006cba:	00cb      	lsls	r3, r1, #3
 8006cbc:	4651      	mov	r1, sl
 8006cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	00ca      	lsls	r2, r1, #3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4603      	mov	r3, r0
 8006ccc:	4642      	mov	r2, r8
 8006cce:	189b      	adds	r3, r3, r2
 8006cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	eb42 0303 	adc.w	r3, r2, r3
 8006cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	008b      	lsls	r3, r1, #2
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d02:	4641      	mov	r1, r8
 8006d04:	008a      	lsls	r2, r1, #2
 8006d06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d0a:	f7f9 fad1 	bl	80002b0 <__aeabi_uldivmod>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4b39      	ldr	r3, [pc, #228]	; (8006df8 <UART_SetConfig+0x4e4>)
 8006d14:	fba3 1302 	umull	r1, r3, r3, r2
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	2164      	movs	r1, #100	; 0x64
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	3332      	adds	r3, #50	; 0x32
 8006d26:	4a34      	ldr	r2, [pc, #208]	; (8006df8 <UART_SetConfig+0x4e4>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d32:	441c      	add	r4, r3
 8006d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d38:	2200      	movs	r2, #0
 8006d3a:	673b      	str	r3, [r7, #112]	; 0x70
 8006d3c:	677a      	str	r2, [r7, #116]	; 0x74
 8006d3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d42:	4642      	mov	r2, r8
 8006d44:	464b      	mov	r3, r9
 8006d46:	1891      	adds	r1, r2, r2
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	415b      	adcs	r3, r3
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d52:	4641      	mov	r1, r8
 8006d54:	1851      	adds	r1, r2, r1
 8006d56:	6039      	str	r1, [r7, #0]
 8006d58:	4649      	mov	r1, r9
 8006d5a:	414b      	adcs	r3, r1
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	f04f 0200 	mov.w	r2, #0
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d6a:	4659      	mov	r1, fp
 8006d6c:	00cb      	lsls	r3, r1, #3
 8006d6e:	4651      	mov	r1, sl
 8006d70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d74:	4651      	mov	r1, sl
 8006d76:	00ca      	lsls	r2, r1, #3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	4642      	mov	r2, r8
 8006d80:	189b      	adds	r3, r3, r2
 8006d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d84:	464b      	mov	r3, r9
 8006d86:	460a      	mov	r2, r1
 8006d88:	eb42 0303 	adc.w	r3, r2, r3
 8006d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	663b      	str	r3, [r7, #96]	; 0x60
 8006d98:	667a      	str	r2, [r7, #100]	; 0x64
 8006d9a:	f04f 0200 	mov.w	r2, #0
 8006d9e:	f04f 0300 	mov.w	r3, #0
 8006da2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006da6:	4649      	mov	r1, r9
 8006da8:	008b      	lsls	r3, r1, #2
 8006daa:	4641      	mov	r1, r8
 8006dac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006db0:	4641      	mov	r1, r8
 8006db2:	008a      	lsls	r2, r1, #2
 8006db4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006db8:	f7f9 fa7a 	bl	80002b0 <__aeabi_uldivmod>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <UART_SetConfig+0x4e4>)
 8006dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	2164      	movs	r1, #100	; 0x64
 8006dca:	fb01 f303 	mul.w	r3, r1, r3
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	3332      	adds	r3, #50	; 0x32
 8006dd4:	4a08      	ldr	r2, [pc, #32]	; (8006df8 <UART_SetConfig+0x4e4>)
 8006dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	f003 020f 	and.w	r2, r3, #15
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4422      	add	r2, r4
 8006de8:	609a      	str	r2, [r3, #8]
}
 8006dea:	bf00      	nop
 8006dec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006df0:	46bd      	mov	sp, r7
 8006df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006df6:	bf00      	nop
 8006df8:	51eb851f 	.word	0x51eb851f

08006dfc <atoi>:
 8006dfc:	220a      	movs	r2, #10
 8006dfe:	2100      	movs	r1, #0
 8006e00:	f000 b92e 	b.w	8007060 <strtol>

08006e04 <__errno>:
 8006e04:	4b01      	ldr	r3, [pc, #4]	; (8006e0c <__errno+0x8>)
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	2000000c 	.word	0x2000000c

08006e10 <__libc_init_array>:
 8006e10:	b570      	push	{r4, r5, r6, lr}
 8006e12:	4d0d      	ldr	r5, [pc, #52]	; (8006e48 <__libc_init_array+0x38>)
 8006e14:	4c0d      	ldr	r4, [pc, #52]	; (8006e4c <__libc_init_array+0x3c>)
 8006e16:	1b64      	subs	r4, r4, r5
 8006e18:	10a4      	asrs	r4, r4, #2
 8006e1a:	2600      	movs	r6, #0
 8006e1c:	42a6      	cmp	r6, r4
 8006e1e:	d109      	bne.n	8006e34 <__libc_init_array+0x24>
 8006e20:	4d0b      	ldr	r5, [pc, #44]	; (8006e50 <__libc_init_array+0x40>)
 8006e22:	4c0c      	ldr	r4, [pc, #48]	; (8006e54 <__libc_init_array+0x44>)
 8006e24:	f001 f97e 	bl	8008124 <_init>
 8006e28:	1b64      	subs	r4, r4, r5
 8006e2a:	10a4      	asrs	r4, r4, #2
 8006e2c:	2600      	movs	r6, #0
 8006e2e:	42a6      	cmp	r6, r4
 8006e30:	d105      	bne.n	8006e3e <__libc_init_array+0x2e>
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e38:	4798      	blx	r3
 8006e3a:	3601      	adds	r6, #1
 8006e3c:	e7ee      	b.n	8006e1c <__libc_init_array+0xc>
 8006e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e42:	4798      	blx	r3
 8006e44:	3601      	adds	r6, #1
 8006e46:	e7f2      	b.n	8006e2e <__libc_init_array+0x1e>
 8006e48:	08008854 	.word	0x08008854
 8006e4c:	08008854 	.word	0x08008854
 8006e50:	08008854 	.word	0x08008854
 8006e54:	08008858 	.word	0x08008858

08006e58 <memset>:
 8006e58:	4402      	add	r2, r0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d100      	bne.n	8006e62 <memset+0xa>
 8006e60:	4770      	bx	lr
 8006e62:	f803 1b01 	strb.w	r1, [r3], #1
 8006e66:	e7f9      	b.n	8006e5c <memset+0x4>

08006e68 <siprintf>:
 8006e68:	b40e      	push	{r1, r2, r3}
 8006e6a:	b500      	push	{lr}
 8006e6c:	b09c      	sub	sp, #112	; 0x70
 8006e6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006e70:	9002      	str	r0, [sp, #8]
 8006e72:	9006      	str	r0, [sp, #24]
 8006e74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e78:	4809      	ldr	r0, [pc, #36]	; (8006ea0 <siprintf+0x38>)
 8006e7a:	9107      	str	r1, [sp, #28]
 8006e7c:	9104      	str	r1, [sp, #16]
 8006e7e:	4909      	ldr	r1, [pc, #36]	; (8006ea4 <siprintf+0x3c>)
 8006e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e84:	9105      	str	r1, [sp, #20]
 8006e86:	6800      	ldr	r0, [r0, #0]
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	a902      	add	r1, sp, #8
 8006e8c:	f000 f94e 	bl	800712c <_svfiprintf_r>
 8006e90:	9b02      	ldr	r3, [sp, #8]
 8006e92:	2200      	movs	r2, #0
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	b01c      	add	sp, #112	; 0x70
 8006e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e9c:	b003      	add	sp, #12
 8006e9e:	4770      	bx	lr
 8006ea0:	2000000c 	.word	0x2000000c
 8006ea4:	ffff0208 	.word	0xffff0208

08006ea8 <siscanf>:
 8006ea8:	b40e      	push	{r1, r2, r3}
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	b09f      	sub	sp, #124	; 0x7c
 8006eae:	ac21      	add	r4, sp, #132	; 0x84
 8006eb0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006eb4:	f854 2b04 	ldr.w	r2, [r4], #4
 8006eb8:	9201      	str	r2, [sp, #4]
 8006eba:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006ebe:	9004      	str	r0, [sp, #16]
 8006ec0:	9008      	str	r0, [sp, #32]
 8006ec2:	f7f9 f997 	bl	80001f4 <strlen>
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <siscanf+0x50>)
 8006ec8:	9005      	str	r0, [sp, #20]
 8006eca:	9009      	str	r0, [sp, #36]	; 0x24
 8006ecc:	930d      	str	r3, [sp, #52]	; 0x34
 8006ece:	480b      	ldr	r0, [pc, #44]	; (8006efc <siscanf+0x54>)
 8006ed0:	9a01      	ldr	r2, [sp, #4]
 8006ed2:	6800      	ldr	r0, [r0, #0]
 8006ed4:	9403      	str	r4, [sp, #12]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9311      	str	r3, [sp, #68]	; 0x44
 8006eda:	9316      	str	r3, [sp, #88]	; 0x58
 8006edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ee0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006ee4:	a904      	add	r1, sp, #16
 8006ee6:	4623      	mov	r3, r4
 8006ee8:	f000 fa7a 	bl	80073e0 <__ssvfiscanf_r>
 8006eec:	b01f      	add	sp, #124	; 0x7c
 8006eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef2:	b003      	add	sp, #12
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	08006f01 	.word	0x08006f01
 8006efc:	2000000c 	.word	0x2000000c

08006f00 <__seofread>:
 8006f00:	2000      	movs	r0, #0
 8006f02:	4770      	bx	lr

08006f04 <strchr>:
 8006f04:	b2c9      	uxtb	r1, r1
 8006f06:	4603      	mov	r3, r0
 8006f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f0c:	b11a      	cbz	r2, 8006f16 <strchr+0x12>
 8006f0e:	428a      	cmp	r2, r1
 8006f10:	d1f9      	bne.n	8006f06 <strchr+0x2>
 8006f12:	4618      	mov	r0, r3
 8006f14:	4770      	bx	lr
 8006f16:	2900      	cmp	r1, #0
 8006f18:	bf18      	it	ne
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	e7f9      	b.n	8006f12 <strchr+0xe>

08006f1e <strcpy>:
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f24:	f803 2b01 	strb.w	r2, [r3], #1
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	d1f9      	bne.n	8006f20 <strcpy+0x2>
 8006f2c:	4770      	bx	lr

08006f2e <strncmp>:
 8006f2e:	b510      	push	{r4, lr}
 8006f30:	b17a      	cbz	r2, 8006f52 <strncmp+0x24>
 8006f32:	4603      	mov	r3, r0
 8006f34:	3901      	subs	r1, #1
 8006f36:	1884      	adds	r4, r0, r2
 8006f38:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006f40:	4290      	cmp	r0, r2
 8006f42:	d101      	bne.n	8006f48 <strncmp+0x1a>
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	d101      	bne.n	8006f4c <strncmp+0x1e>
 8006f48:	1a80      	subs	r0, r0, r2
 8006f4a:	bd10      	pop	{r4, pc}
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d1f3      	bne.n	8006f38 <strncmp+0xa>
 8006f50:	e7fa      	b.n	8006f48 <strncmp+0x1a>
 8006f52:	4610      	mov	r0, r2
 8006f54:	e7f9      	b.n	8006f4a <strncmp+0x1c>
	...

08006f58 <_strtol_l.constprop.0>:
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5e:	d001      	beq.n	8006f64 <_strtol_l.constprop.0+0xc>
 8006f60:	2b24      	cmp	r3, #36	; 0x24
 8006f62:	d906      	bls.n	8006f72 <_strtol_l.constprop.0+0x1a>
 8006f64:	f7ff ff4e 	bl	8006e04 <__errno>
 8006f68:	2316      	movs	r3, #22
 8006f6a:	6003      	str	r3, [r0, #0]
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007058 <_strtol_l.constprop.0+0x100>
 8006f76:	460d      	mov	r5, r1
 8006f78:	462e      	mov	r6, r5
 8006f7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006f82:	f017 0708 	ands.w	r7, r7, #8
 8006f86:	d1f7      	bne.n	8006f78 <_strtol_l.constprop.0+0x20>
 8006f88:	2c2d      	cmp	r4, #45	; 0x2d
 8006f8a:	d132      	bne.n	8006ff2 <_strtol_l.constprop.0+0x9a>
 8006f8c:	782c      	ldrb	r4, [r5, #0]
 8006f8e:	2701      	movs	r7, #1
 8006f90:	1cb5      	adds	r5, r6, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d05b      	beq.n	800704e <_strtol_l.constprop.0+0xf6>
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d109      	bne.n	8006fae <_strtol_l.constprop.0+0x56>
 8006f9a:	2c30      	cmp	r4, #48	; 0x30
 8006f9c:	d107      	bne.n	8006fae <_strtol_l.constprop.0+0x56>
 8006f9e:	782c      	ldrb	r4, [r5, #0]
 8006fa0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006fa4:	2c58      	cmp	r4, #88	; 0x58
 8006fa6:	d14d      	bne.n	8007044 <_strtol_l.constprop.0+0xec>
 8006fa8:	786c      	ldrb	r4, [r5, #1]
 8006faa:	2310      	movs	r3, #16
 8006fac:	3502      	adds	r5, #2
 8006fae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006fb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fb6:	f04f 0c00 	mov.w	ip, #0
 8006fba:	fbb8 f9f3 	udiv	r9, r8, r3
 8006fbe:	4666      	mov	r6, ip
 8006fc0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006fc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006fc8:	f1be 0f09 	cmp.w	lr, #9
 8006fcc:	d816      	bhi.n	8006ffc <_strtol_l.constprop.0+0xa4>
 8006fce:	4674      	mov	r4, lr
 8006fd0:	42a3      	cmp	r3, r4
 8006fd2:	dd24      	ble.n	800701e <_strtol_l.constprop.0+0xc6>
 8006fd4:	f1bc 0f00 	cmp.w	ip, #0
 8006fd8:	db1e      	blt.n	8007018 <_strtol_l.constprop.0+0xc0>
 8006fda:	45b1      	cmp	r9, r6
 8006fdc:	d31c      	bcc.n	8007018 <_strtol_l.constprop.0+0xc0>
 8006fde:	d101      	bne.n	8006fe4 <_strtol_l.constprop.0+0x8c>
 8006fe0:	45a2      	cmp	sl, r4
 8006fe2:	db19      	blt.n	8007018 <_strtol_l.constprop.0+0xc0>
 8006fe4:	fb06 4603 	mla	r6, r6, r3, r4
 8006fe8:	f04f 0c01 	mov.w	ip, #1
 8006fec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ff0:	e7e8      	b.n	8006fc4 <_strtol_l.constprop.0+0x6c>
 8006ff2:	2c2b      	cmp	r4, #43	; 0x2b
 8006ff4:	bf04      	itt	eq
 8006ff6:	782c      	ldrbeq	r4, [r5, #0]
 8006ff8:	1cb5      	addeq	r5, r6, #2
 8006ffa:	e7ca      	b.n	8006f92 <_strtol_l.constprop.0+0x3a>
 8006ffc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007000:	f1be 0f19 	cmp.w	lr, #25
 8007004:	d801      	bhi.n	800700a <_strtol_l.constprop.0+0xb2>
 8007006:	3c37      	subs	r4, #55	; 0x37
 8007008:	e7e2      	b.n	8006fd0 <_strtol_l.constprop.0+0x78>
 800700a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800700e:	f1be 0f19 	cmp.w	lr, #25
 8007012:	d804      	bhi.n	800701e <_strtol_l.constprop.0+0xc6>
 8007014:	3c57      	subs	r4, #87	; 0x57
 8007016:	e7db      	b.n	8006fd0 <_strtol_l.constprop.0+0x78>
 8007018:	f04f 3cff 	mov.w	ip, #4294967295
 800701c:	e7e6      	b.n	8006fec <_strtol_l.constprop.0+0x94>
 800701e:	f1bc 0f00 	cmp.w	ip, #0
 8007022:	da05      	bge.n	8007030 <_strtol_l.constprop.0+0xd8>
 8007024:	2322      	movs	r3, #34	; 0x22
 8007026:	6003      	str	r3, [r0, #0]
 8007028:	4646      	mov	r6, r8
 800702a:	b942      	cbnz	r2, 800703e <_strtol_l.constprop.0+0xe6>
 800702c:	4630      	mov	r0, r6
 800702e:	e79e      	b.n	8006f6e <_strtol_l.constprop.0+0x16>
 8007030:	b107      	cbz	r7, 8007034 <_strtol_l.constprop.0+0xdc>
 8007032:	4276      	negs	r6, r6
 8007034:	2a00      	cmp	r2, #0
 8007036:	d0f9      	beq.n	800702c <_strtol_l.constprop.0+0xd4>
 8007038:	f1bc 0f00 	cmp.w	ip, #0
 800703c:	d000      	beq.n	8007040 <_strtol_l.constprop.0+0xe8>
 800703e:	1e69      	subs	r1, r5, #1
 8007040:	6011      	str	r1, [r2, #0]
 8007042:	e7f3      	b.n	800702c <_strtol_l.constprop.0+0xd4>
 8007044:	2430      	movs	r4, #48	; 0x30
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1b1      	bne.n	8006fae <_strtol_l.constprop.0+0x56>
 800704a:	2308      	movs	r3, #8
 800704c:	e7af      	b.n	8006fae <_strtol_l.constprop.0+0x56>
 800704e:	2c30      	cmp	r4, #48	; 0x30
 8007050:	d0a5      	beq.n	8006f9e <_strtol_l.constprop.0+0x46>
 8007052:	230a      	movs	r3, #10
 8007054:	e7ab      	b.n	8006fae <_strtol_l.constprop.0+0x56>
 8007056:	bf00      	nop
 8007058:	0800869d 	.word	0x0800869d

0800705c <_strtol_r>:
 800705c:	f7ff bf7c 	b.w	8006f58 <_strtol_l.constprop.0>

08007060 <strtol>:
 8007060:	4613      	mov	r3, r2
 8007062:	460a      	mov	r2, r1
 8007064:	4601      	mov	r1, r0
 8007066:	4802      	ldr	r0, [pc, #8]	; (8007070 <strtol+0x10>)
 8007068:	6800      	ldr	r0, [r0, #0]
 800706a:	f7ff bf75 	b.w	8006f58 <_strtol_l.constprop.0>
 800706e:	bf00      	nop
 8007070:	2000000c 	.word	0x2000000c

08007074 <__ssputs_r>:
 8007074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	688e      	ldr	r6, [r1, #8]
 800707a:	429e      	cmp	r6, r3
 800707c:	4682      	mov	sl, r0
 800707e:	460c      	mov	r4, r1
 8007080:	4690      	mov	r8, r2
 8007082:	461f      	mov	r7, r3
 8007084:	d838      	bhi.n	80070f8 <__ssputs_r+0x84>
 8007086:	898a      	ldrh	r2, [r1, #12]
 8007088:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800708c:	d032      	beq.n	80070f4 <__ssputs_r+0x80>
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	6909      	ldr	r1, [r1, #16]
 8007092:	eba5 0901 	sub.w	r9, r5, r1
 8007096:	6965      	ldr	r5, [r4, #20]
 8007098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800709c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070a0:	3301      	adds	r3, #1
 80070a2:	444b      	add	r3, r9
 80070a4:	106d      	asrs	r5, r5, #1
 80070a6:	429d      	cmp	r5, r3
 80070a8:	bf38      	it	cc
 80070aa:	461d      	movcc	r5, r3
 80070ac:	0553      	lsls	r3, r2, #21
 80070ae:	d531      	bpl.n	8007114 <__ssputs_r+0xa0>
 80070b0:	4629      	mov	r1, r5
 80070b2:	f000 ff6f 	bl	8007f94 <_malloc_r>
 80070b6:	4606      	mov	r6, r0
 80070b8:	b950      	cbnz	r0, 80070d0 <__ssputs_r+0x5c>
 80070ba:	230c      	movs	r3, #12
 80070bc:	f8ca 3000 	str.w	r3, [sl]
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d0:	6921      	ldr	r1, [r4, #16]
 80070d2:	464a      	mov	r2, r9
 80070d4:	f000 feca 	bl	8007e6c <memcpy>
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e2:	81a3      	strh	r3, [r4, #12]
 80070e4:	6126      	str	r6, [r4, #16]
 80070e6:	6165      	str	r5, [r4, #20]
 80070e8:	444e      	add	r6, r9
 80070ea:	eba5 0509 	sub.w	r5, r5, r9
 80070ee:	6026      	str	r6, [r4, #0]
 80070f0:	60a5      	str	r5, [r4, #8]
 80070f2:	463e      	mov	r6, r7
 80070f4:	42be      	cmp	r6, r7
 80070f6:	d900      	bls.n	80070fa <__ssputs_r+0x86>
 80070f8:	463e      	mov	r6, r7
 80070fa:	6820      	ldr	r0, [r4, #0]
 80070fc:	4632      	mov	r2, r6
 80070fe:	4641      	mov	r1, r8
 8007100:	f000 fec2 	bl	8007e88 <memmove>
 8007104:	68a3      	ldr	r3, [r4, #8]
 8007106:	1b9b      	subs	r3, r3, r6
 8007108:	60a3      	str	r3, [r4, #8]
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	4433      	add	r3, r6
 800710e:	6023      	str	r3, [r4, #0]
 8007110:	2000      	movs	r0, #0
 8007112:	e7db      	b.n	80070cc <__ssputs_r+0x58>
 8007114:	462a      	mov	r2, r5
 8007116:	f000 ffb1 	bl	800807c <_realloc_r>
 800711a:	4606      	mov	r6, r0
 800711c:	2800      	cmp	r0, #0
 800711e:	d1e1      	bne.n	80070e4 <__ssputs_r+0x70>
 8007120:	6921      	ldr	r1, [r4, #16]
 8007122:	4650      	mov	r0, sl
 8007124:	f000 feca 	bl	8007ebc <_free_r>
 8007128:	e7c7      	b.n	80070ba <__ssputs_r+0x46>
	...

0800712c <_svfiprintf_r>:
 800712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	4698      	mov	r8, r3
 8007132:	898b      	ldrh	r3, [r1, #12]
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	b09d      	sub	sp, #116	; 0x74
 8007138:	4607      	mov	r7, r0
 800713a:	460d      	mov	r5, r1
 800713c:	4614      	mov	r4, r2
 800713e:	d50e      	bpl.n	800715e <_svfiprintf_r+0x32>
 8007140:	690b      	ldr	r3, [r1, #16]
 8007142:	b963      	cbnz	r3, 800715e <_svfiprintf_r+0x32>
 8007144:	2140      	movs	r1, #64	; 0x40
 8007146:	f000 ff25 	bl	8007f94 <_malloc_r>
 800714a:	6028      	str	r0, [r5, #0]
 800714c:	6128      	str	r0, [r5, #16]
 800714e:	b920      	cbnz	r0, 800715a <_svfiprintf_r+0x2e>
 8007150:	230c      	movs	r3, #12
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	f04f 30ff 	mov.w	r0, #4294967295
 8007158:	e0d1      	b.n	80072fe <_svfiprintf_r+0x1d2>
 800715a:	2340      	movs	r3, #64	; 0x40
 800715c:	616b      	str	r3, [r5, #20]
 800715e:	2300      	movs	r3, #0
 8007160:	9309      	str	r3, [sp, #36]	; 0x24
 8007162:	2320      	movs	r3, #32
 8007164:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007168:	f8cd 800c 	str.w	r8, [sp, #12]
 800716c:	2330      	movs	r3, #48	; 0x30
 800716e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007318 <_svfiprintf_r+0x1ec>
 8007172:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007176:	f04f 0901 	mov.w	r9, #1
 800717a:	4623      	mov	r3, r4
 800717c:	469a      	mov	sl, r3
 800717e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007182:	b10a      	cbz	r2, 8007188 <_svfiprintf_r+0x5c>
 8007184:	2a25      	cmp	r2, #37	; 0x25
 8007186:	d1f9      	bne.n	800717c <_svfiprintf_r+0x50>
 8007188:	ebba 0b04 	subs.w	fp, sl, r4
 800718c:	d00b      	beq.n	80071a6 <_svfiprintf_r+0x7a>
 800718e:	465b      	mov	r3, fp
 8007190:	4622      	mov	r2, r4
 8007192:	4629      	mov	r1, r5
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff ff6d 	bl	8007074 <__ssputs_r>
 800719a:	3001      	adds	r0, #1
 800719c:	f000 80aa 	beq.w	80072f4 <_svfiprintf_r+0x1c8>
 80071a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071a2:	445a      	add	r2, fp
 80071a4:	9209      	str	r2, [sp, #36]	; 0x24
 80071a6:	f89a 3000 	ldrb.w	r3, [sl]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 80a2 	beq.w	80072f4 <_svfiprintf_r+0x1c8>
 80071b0:	2300      	movs	r3, #0
 80071b2:	f04f 32ff 	mov.w	r2, #4294967295
 80071b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ba:	f10a 0a01 	add.w	sl, sl, #1
 80071be:	9304      	str	r3, [sp, #16]
 80071c0:	9307      	str	r3, [sp, #28]
 80071c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071c6:	931a      	str	r3, [sp, #104]	; 0x68
 80071c8:	4654      	mov	r4, sl
 80071ca:	2205      	movs	r2, #5
 80071cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d0:	4851      	ldr	r0, [pc, #324]	; (8007318 <_svfiprintf_r+0x1ec>)
 80071d2:	f7f9 f81d 	bl	8000210 <memchr>
 80071d6:	9a04      	ldr	r2, [sp, #16]
 80071d8:	b9d8      	cbnz	r0, 8007212 <_svfiprintf_r+0xe6>
 80071da:	06d0      	lsls	r0, r2, #27
 80071dc:	bf44      	itt	mi
 80071de:	2320      	movmi	r3, #32
 80071e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e4:	0711      	lsls	r1, r2, #28
 80071e6:	bf44      	itt	mi
 80071e8:	232b      	movmi	r3, #43	; 0x2b
 80071ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ee:	f89a 3000 	ldrb.w	r3, [sl]
 80071f2:	2b2a      	cmp	r3, #42	; 0x2a
 80071f4:	d015      	beq.n	8007222 <_svfiprintf_r+0xf6>
 80071f6:	9a07      	ldr	r2, [sp, #28]
 80071f8:	4654      	mov	r4, sl
 80071fa:	2000      	movs	r0, #0
 80071fc:	f04f 0c0a 	mov.w	ip, #10
 8007200:	4621      	mov	r1, r4
 8007202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007206:	3b30      	subs	r3, #48	; 0x30
 8007208:	2b09      	cmp	r3, #9
 800720a:	d94e      	bls.n	80072aa <_svfiprintf_r+0x17e>
 800720c:	b1b0      	cbz	r0, 800723c <_svfiprintf_r+0x110>
 800720e:	9207      	str	r2, [sp, #28]
 8007210:	e014      	b.n	800723c <_svfiprintf_r+0x110>
 8007212:	eba0 0308 	sub.w	r3, r0, r8
 8007216:	fa09 f303 	lsl.w	r3, r9, r3
 800721a:	4313      	orrs	r3, r2
 800721c:	9304      	str	r3, [sp, #16]
 800721e:	46a2      	mov	sl, r4
 8007220:	e7d2      	b.n	80071c8 <_svfiprintf_r+0x9c>
 8007222:	9b03      	ldr	r3, [sp, #12]
 8007224:	1d19      	adds	r1, r3, #4
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	9103      	str	r1, [sp, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	bfbb      	ittet	lt
 800722e:	425b      	neglt	r3, r3
 8007230:	f042 0202 	orrlt.w	r2, r2, #2
 8007234:	9307      	strge	r3, [sp, #28]
 8007236:	9307      	strlt	r3, [sp, #28]
 8007238:	bfb8      	it	lt
 800723a:	9204      	strlt	r2, [sp, #16]
 800723c:	7823      	ldrb	r3, [r4, #0]
 800723e:	2b2e      	cmp	r3, #46	; 0x2e
 8007240:	d10c      	bne.n	800725c <_svfiprintf_r+0x130>
 8007242:	7863      	ldrb	r3, [r4, #1]
 8007244:	2b2a      	cmp	r3, #42	; 0x2a
 8007246:	d135      	bne.n	80072b4 <_svfiprintf_r+0x188>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	1d1a      	adds	r2, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	9203      	str	r2, [sp, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfb8      	it	lt
 8007254:	f04f 33ff 	movlt.w	r3, #4294967295
 8007258:	3402      	adds	r4, #2
 800725a:	9305      	str	r3, [sp, #20]
 800725c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007328 <_svfiprintf_r+0x1fc>
 8007260:	7821      	ldrb	r1, [r4, #0]
 8007262:	2203      	movs	r2, #3
 8007264:	4650      	mov	r0, sl
 8007266:	f7f8 ffd3 	bl	8000210 <memchr>
 800726a:	b140      	cbz	r0, 800727e <_svfiprintf_r+0x152>
 800726c:	2340      	movs	r3, #64	; 0x40
 800726e:	eba0 000a 	sub.w	r0, r0, sl
 8007272:	fa03 f000 	lsl.w	r0, r3, r0
 8007276:	9b04      	ldr	r3, [sp, #16]
 8007278:	4303      	orrs	r3, r0
 800727a:	3401      	adds	r4, #1
 800727c:	9304      	str	r3, [sp, #16]
 800727e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007282:	4826      	ldr	r0, [pc, #152]	; (800731c <_svfiprintf_r+0x1f0>)
 8007284:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007288:	2206      	movs	r2, #6
 800728a:	f7f8 ffc1 	bl	8000210 <memchr>
 800728e:	2800      	cmp	r0, #0
 8007290:	d038      	beq.n	8007304 <_svfiprintf_r+0x1d8>
 8007292:	4b23      	ldr	r3, [pc, #140]	; (8007320 <_svfiprintf_r+0x1f4>)
 8007294:	bb1b      	cbnz	r3, 80072de <_svfiprintf_r+0x1b2>
 8007296:	9b03      	ldr	r3, [sp, #12]
 8007298:	3307      	adds	r3, #7
 800729a:	f023 0307 	bic.w	r3, r3, #7
 800729e:	3308      	adds	r3, #8
 80072a0:	9303      	str	r3, [sp, #12]
 80072a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a4:	4433      	add	r3, r6
 80072a6:	9309      	str	r3, [sp, #36]	; 0x24
 80072a8:	e767      	b.n	800717a <_svfiprintf_r+0x4e>
 80072aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ae:	460c      	mov	r4, r1
 80072b0:	2001      	movs	r0, #1
 80072b2:	e7a5      	b.n	8007200 <_svfiprintf_r+0xd4>
 80072b4:	2300      	movs	r3, #0
 80072b6:	3401      	adds	r4, #1
 80072b8:	9305      	str	r3, [sp, #20]
 80072ba:	4619      	mov	r1, r3
 80072bc:	f04f 0c0a 	mov.w	ip, #10
 80072c0:	4620      	mov	r0, r4
 80072c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072c6:	3a30      	subs	r2, #48	; 0x30
 80072c8:	2a09      	cmp	r2, #9
 80072ca:	d903      	bls.n	80072d4 <_svfiprintf_r+0x1a8>
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0c5      	beq.n	800725c <_svfiprintf_r+0x130>
 80072d0:	9105      	str	r1, [sp, #20]
 80072d2:	e7c3      	b.n	800725c <_svfiprintf_r+0x130>
 80072d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072d8:	4604      	mov	r4, r0
 80072da:	2301      	movs	r3, #1
 80072dc:	e7f0      	b.n	80072c0 <_svfiprintf_r+0x194>
 80072de:	ab03      	add	r3, sp, #12
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	462a      	mov	r2, r5
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <_svfiprintf_r+0x1f8>)
 80072e6:	a904      	add	r1, sp, #16
 80072e8:	4638      	mov	r0, r7
 80072ea:	f3af 8000 	nop.w
 80072ee:	1c42      	adds	r2, r0, #1
 80072f0:	4606      	mov	r6, r0
 80072f2:	d1d6      	bne.n	80072a2 <_svfiprintf_r+0x176>
 80072f4:	89ab      	ldrh	r3, [r5, #12]
 80072f6:	065b      	lsls	r3, r3, #25
 80072f8:	f53f af2c 	bmi.w	8007154 <_svfiprintf_r+0x28>
 80072fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072fe:	b01d      	add	sp, #116	; 0x74
 8007300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007304:	ab03      	add	r3, sp, #12
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	462a      	mov	r2, r5
 800730a:	4b06      	ldr	r3, [pc, #24]	; (8007324 <_svfiprintf_r+0x1f8>)
 800730c:	a904      	add	r1, sp, #16
 800730e:	4638      	mov	r0, r7
 8007310:	f000 fa4c 	bl	80077ac <_printf_i>
 8007314:	e7eb      	b.n	80072ee <_svfiprintf_r+0x1c2>
 8007316:	bf00      	nop
 8007318:	0800879d 	.word	0x0800879d
 800731c:	080087a7 	.word	0x080087a7
 8007320:	00000000 	.word	0x00000000
 8007324:	08007075 	.word	0x08007075
 8007328:	080087a3 	.word	0x080087a3

0800732c <_sungetc_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	1c4b      	adds	r3, r1, #1
 8007330:	4614      	mov	r4, r2
 8007332:	d103      	bne.n	800733c <_sungetc_r+0x10>
 8007334:	f04f 35ff 	mov.w	r5, #4294967295
 8007338:	4628      	mov	r0, r5
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	8993      	ldrh	r3, [r2, #12]
 800733e:	f023 0320 	bic.w	r3, r3, #32
 8007342:	8193      	strh	r3, [r2, #12]
 8007344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007346:	6852      	ldr	r2, [r2, #4]
 8007348:	b2cd      	uxtb	r5, r1
 800734a:	b18b      	cbz	r3, 8007370 <_sungetc_r+0x44>
 800734c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800734e:	4293      	cmp	r3, r2
 8007350:	dd08      	ble.n	8007364 <_sungetc_r+0x38>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	1e5a      	subs	r2, r3, #1
 8007356:	6022      	str	r2, [r4, #0]
 8007358:	f803 5c01 	strb.w	r5, [r3, #-1]
 800735c:	6863      	ldr	r3, [r4, #4]
 800735e:	3301      	adds	r3, #1
 8007360:	6063      	str	r3, [r4, #4]
 8007362:	e7e9      	b.n	8007338 <_sungetc_r+0xc>
 8007364:	4621      	mov	r1, r4
 8007366:	f000 fd45 	bl	8007df4 <__submore>
 800736a:	2800      	cmp	r0, #0
 800736c:	d0f1      	beq.n	8007352 <_sungetc_r+0x26>
 800736e:	e7e1      	b.n	8007334 <_sungetc_r+0x8>
 8007370:	6921      	ldr	r1, [r4, #16]
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	b151      	cbz	r1, 800738c <_sungetc_r+0x60>
 8007376:	4299      	cmp	r1, r3
 8007378:	d208      	bcs.n	800738c <_sungetc_r+0x60>
 800737a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800737e:	42a9      	cmp	r1, r5
 8007380:	d104      	bne.n	800738c <_sungetc_r+0x60>
 8007382:	3b01      	subs	r3, #1
 8007384:	3201      	adds	r2, #1
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	6062      	str	r2, [r4, #4]
 800738a:	e7d5      	b.n	8007338 <_sungetc_r+0xc>
 800738c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007394:	6363      	str	r3, [r4, #52]	; 0x34
 8007396:	2303      	movs	r3, #3
 8007398:	63a3      	str	r3, [r4, #56]	; 0x38
 800739a:	4623      	mov	r3, r4
 800739c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	2301      	movs	r3, #1
 80073a4:	e7dc      	b.n	8007360 <_sungetc_r+0x34>

080073a6 <__ssrefill_r>:
 80073a6:	b510      	push	{r4, lr}
 80073a8:	460c      	mov	r4, r1
 80073aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80073ac:	b169      	cbz	r1, 80073ca <__ssrefill_r+0x24>
 80073ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b2:	4299      	cmp	r1, r3
 80073b4:	d001      	beq.n	80073ba <__ssrefill_r+0x14>
 80073b6:	f000 fd81 	bl	8007ebc <_free_r>
 80073ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073bc:	6063      	str	r3, [r4, #4]
 80073be:	2000      	movs	r0, #0
 80073c0:	6360      	str	r0, [r4, #52]	; 0x34
 80073c2:	b113      	cbz	r3, 80073ca <__ssrefill_r+0x24>
 80073c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80073c6:	6023      	str	r3, [r4, #0]
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	2300      	movs	r3, #0
 80073d0:	6063      	str	r3, [r4, #4]
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	f043 0320 	orr.w	r3, r3, #32
 80073d8:	81a3      	strh	r3, [r4, #12]
 80073da:	f04f 30ff 	mov.w	r0, #4294967295
 80073de:	e7f3      	b.n	80073c8 <__ssrefill_r+0x22>

080073e0 <__ssvfiscanf_r>:
 80073e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e4:	460c      	mov	r4, r1
 80073e6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80073ea:	2100      	movs	r1, #0
 80073ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80073f0:	49a6      	ldr	r1, [pc, #664]	; (800768c <__ssvfiscanf_r+0x2ac>)
 80073f2:	91a0      	str	r1, [sp, #640]	; 0x280
 80073f4:	f10d 0804 	add.w	r8, sp, #4
 80073f8:	49a5      	ldr	r1, [pc, #660]	; (8007690 <__ssvfiscanf_r+0x2b0>)
 80073fa:	4fa6      	ldr	r7, [pc, #664]	; (8007694 <__ssvfiscanf_r+0x2b4>)
 80073fc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007698 <__ssvfiscanf_r+0x2b8>
 8007400:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007404:	4606      	mov	r6, r0
 8007406:	91a1      	str	r1, [sp, #644]	; 0x284
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	7813      	ldrb	r3, [r2, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 815a 	beq.w	80076c6 <__ssvfiscanf_r+0x2e6>
 8007412:	5dd9      	ldrb	r1, [r3, r7]
 8007414:	f011 0108 	ands.w	r1, r1, #8
 8007418:	f102 0501 	add.w	r5, r2, #1
 800741c:	d019      	beq.n	8007452 <__ssvfiscanf_r+0x72>
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	dd0f      	ble.n	8007444 <__ssvfiscanf_r+0x64>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	781a      	ldrb	r2, [r3, #0]
 8007428:	5cba      	ldrb	r2, [r7, r2]
 800742a:	0712      	lsls	r2, r2, #28
 800742c:	d401      	bmi.n	8007432 <__ssvfiscanf_r+0x52>
 800742e:	462a      	mov	r2, r5
 8007430:	e7eb      	b.n	800740a <__ssvfiscanf_r+0x2a>
 8007432:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007434:	3201      	adds	r2, #1
 8007436:	9245      	str	r2, [sp, #276]	; 0x114
 8007438:	6862      	ldr	r2, [r4, #4]
 800743a:	3301      	adds	r3, #1
 800743c:	3a01      	subs	r2, #1
 800743e:	6062      	str	r2, [r4, #4]
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	e7ec      	b.n	800741e <__ssvfiscanf_r+0x3e>
 8007444:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007446:	4621      	mov	r1, r4
 8007448:	4630      	mov	r0, r6
 800744a:	4798      	blx	r3
 800744c:	2800      	cmp	r0, #0
 800744e:	d0e9      	beq.n	8007424 <__ssvfiscanf_r+0x44>
 8007450:	e7ed      	b.n	800742e <__ssvfiscanf_r+0x4e>
 8007452:	2b25      	cmp	r3, #37	; 0x25
 8007454:	d012      	beq.n	800747c <__ssvfiscanf_r+0x9c>
 8007456:	469a      	mov	sl, r3
 8007458:	6863      	ldr	r3, [r4, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f340 8091 	ble.w	8007582 <__ssvfiscanf_r+0x1a2>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	7813      	ldrb	r3, [r2, #0]
 8007464:	4553      	cmp	r3, sl
 8007466:	f040 812e 	bne.w	80076c6 <__ssvfiscanf_r+0x2e6>
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	3b01      	subs	r3, #1
 800746e:	6063      	str	r3, [r4, #4]
 8007470:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007472:	3201      	adds	r2, #1
 8007474:	3301      	adds	r3, #1
 8007476:	6022      	str	r2, [r4, #0]
 8007478:	9345      	str	r3, [sp, #276]	; 0x114
 800747a:	e7d8      	b.n	800742e <__ssvfiscanf_r+0x4e>
 800747c:	9141      	str	r1, [sp, #260]	; 0x104
 800747e:	9143      	str	r1, [sp, #268]	; 0x10c
 8007480:	7853      	ldrb	r3, [r2, #1]
 8007482:	2b2a      	cmp	r3, #42	; 0x2a
 8007484:	bf02      	ittt	eq
 8007486:	2310      	moveq	r3, #16
 8007488:	1c95      	addeq	r5, r2, #2
 800748a:	9341      	streq	r3, [sp, #260]	; 0x104
 800748c:	220a      	movs	r2, #10
 800748e:	46aa      	mov	sl, r5
 8007490:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007494:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007498:	2b09      	cmp	r3, #9
 800749a:	d91d      	bls.n	80074d8 <__ssvfiscanf_r+0xf8>
 800749c:	487e      	ldr	r0, [pc, #504]	; (8007698 <__ssvfiscanf_r+0x2b8>)
 800749e:	2203      	movs	r2, #3
 80074a0:	f7f8 feb6 	bl	8000210 <memchr>
 80074a4:	b140      	cbz	r0, 80074b8 <__ssvfiscanf_r+0xd8>
 80074a6:	2301      	movs	r3, #1
 80074a8:	eba0 0009 	sub.w	r0, r0, r9
 80074ac:	fa03 f000 	lsl.w	r0, r3, r0
 80074b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80074b2:	4318      	orrs	r0, r3
 80074b4:	9041      	str	r0, [sp, #260]	; 0x104
 80074b6:	4655      	mov	r5, sl
 80074b8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80074bc:	2b78      	cmp	r3, #120	; 0x78
 80074be:	d806      	bhi.n	80074ce <__ssvfiscanf_r+0xee>
 80074c0:	2b57      	cmp	r3, #87	; 0x57
 80074c2:	d810      	bhi.n	80074e6 <__ssvfiscanf_r+0x106>
 80074c4:	2b25      	cmp	r3, #37	; 0x25
 80074c6:	d0c6      	beq.n	8007456 <__ssvfiscanf_r+0x76>
 80074c8:	d856      	bhi.n	8007578 <__ssvfiscanf_r+0x198>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d064      	beq.n	8007598 <__ssvfiscanf_r+0x1b8>
 80074ce:	2303      	movs	r3, #3
 80074d0:	9347      	str	r3, [sp, #284]	; 0x11c
 80074d2:	230a      	movs	r3, #10
 80074d4:	9342      	str	r3, [sp, #264]	; 0x108
 80074d6:	e071      	b.n	80075bc <__ssvfiscanf_r+0x1dc>
 80074d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80074da:	fb02 1103 	mla	r1, r2, r3, r1
 80074de:	3930      	subs	r1, #48	; 0x30
 80074e0:	9143      	str	r1, [sp, #268]	; 0x10c
 80074e2:	4655      	mov	r5, sl
 80074e4:	e7d3      	b.n	800748e <__ssvfiscanf_r+0xae>
 80074e6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80074ea:	2a20      	cmp	r2, #32
 80074ec:	d8ef      	bhi.n	80074ce <__ssvfiscanf_r+0xee>
 80074ee:	a101      	add	r1, pc, #4	; (adr r1, 80074f4 <__ssvfiscanf_r+0x114>)
 80074f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80074f4:	080075a7 	.word	0x080075a7
 80074f8:	080074cf 	.word	0x080074cf
 80074fc:	080074cf 	.word	0x080074cf
 8007500:	08007605 	.word	0x08007605
 8007504:	080074cf 	.word	0x080074cf
 8007508:	080074cf 	.word	0x080074cf
 800750c:	080074cf 	.word	0x080074cf
 8007510:	080074cf 	.word	0x080074cf
 8007514:	080074cf 	.word	0x080074cf
 8007518:	080074cf 	.word	0x080074cf
 800751c:	080074cf 	.word	0x080074cf
 8007520:	0800761b 	.word	0x0800761b
 8007524:	080075f1 	.word	0x080075f1
 8007528:	0800757f 	.word	0x0800757f
 800752c:	0800757f 	.word	0x0800757f
 8007530:	0800757f 	.word	0x0800757f
 8007534:	080074cf 	.word	0x080074cf
 8007538:	080075f5 	.word	0x080075f5
 800753c:	080074cf 	.word	0x080074cf
 8007540:	080074cf 	.word	0x080074cf
 8007544:	080074cf 	.word	0x080074cf
 8007548:	080074cf 	.word	0x080074cf
 800754c:	0800762b 	.word	0x0800762b
 8007550:	080075fd 	.word	0x080075fd
 8007554:	0800759f 	.word	0x0800759f
 8007558:	080074cf 	.word	0x080074cf
 800755c:	080074cf 	.word	0x080074cf
 8007560:	08007627 	.word	0x08007627
 8007564:	080074cf 	.word	0x080074cf
 8007568:	080075f1 	.word	0x080075f1
 800756c:	080074cf 	.word	0x080074cf
 8007570:	080074cf 	.word	0x080074cf
 8007574:	080075a7 	.word	0x080075a7
 8007578:	3b45      	subs	r3, #69	; 0x45
 800757a:	2b02      	cmp	r3, #2
 800757c:	d8a7      	bhi.n	80074ce <__ssvfiscanf_r+0xee>
 800757e:	2305      	movs	r3, #5
 8007580:	e01b      	b.n	80075ba <__ssvfiscanf_r+0x1da>
 8007582:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007584:	4621      	mov	r1, r4
 8007586:	4630      	mov	r0, r6
 8007588:	4798      	blx	r3
 800758a:	2800      	cmp	r0, #0
 800758c:	f43f af68 	beq.w	8007460 <__ssvfiscanf_r+0x80>
 8007590:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007592:	2800      	cmp	r0, #0
 8007594:	f040 808d 	bne.w	80076b2 <__ssvfiscanf_r+0x2d2>
 8007598:	f04f 30ff 	mov.w	r0, #4294967295
 800759c:	e08f      	b.n	80076be <__ssvfiscanf_r+0x2de>
 800759e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80075a0:	f042 0220 	orr.w	r2, r2, #32
 80075a4:	9241      	str	r2, [sp, #260]	; 0x104
 80075a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80075a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ac:	9241      	str	r2, [sp, #260]	; 0x104
 80075ae:	2210      	movs	r2, #16
 80075b0:	2b6f      	cmp	r3, #111	; 0x6f
 80075b2:	9242      	str	r2, [sp, #264]	; 0x108
 80075b4:	bf34      	ite	cc
 80075b6:	2303      	movcc	r3, #3
 80075b8:	2304      	movcs	r3, #4
 80075ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80075bc:	6863      	ldr	r3, [r4, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dd42      	ble.n	8007648 <__ssvfiscanf_r+0x268>
 80075c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80075c4:	0659      	lsls	r1, r3, #25
 80075c6:	d404      	bmi.n	80075d2 <__ssvfiscanf_r+0x1f2>
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	781a      	ldrb	r2, [r3, #0]
 80075cc:	5cba      	ldrb	r2, [r7, r2]
 80075ce:	0712      	lsls	r2, r2, #28
 80075d0:	d441      	bmi.n	8007656 <__ssvfiscanf_r+0x276>
 80075d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	dc50      	bgt.n	800767a <__ssvfiscanf_r+0x29a>
 80075d8:	466b      	mov	r3, sp
 80075da:	4622      	mov	r2, r4
 80075dc:	a941      	add	r1, sp, #260	; 0x104
 80075de:	4630      	mov	r0, r6
 80075e0:	f000 fa0a 	bl	80079f8 <_scanf_chars>
 80075e4:	2801      	cmp	r0, #1
 80075e6:	d06e      	beq.n	80076c6 <__ssvfiscanf_r+0x2e6>
 80075e8:	2802      	cmp	r0, #2
 80075ea:	f47f af20 	bne.w	800742e <__ssvfiscanf_r+0x4e>
 80075ee:	e7cf      	b.n	8007590 <__ssvfiscanf_r+0x1b0>
 80075f0:	220a      	movs	r2, #10
 80075f2:	e7dd      	b.n	80075b0 <__ssvfiscanf_r+0x1d0>
 80075f4:	2300      	movs	r3, #0
 80075f6:	9342      	str	r3, [sp, #264]	; 0x108
 80075f8:	2303      	movs	r3, #3
 80075fa:	e7de      	b.n	80075ba <__ssvfiscanf_r+0x1da>
 80075fc:	2308      	movs	r3, #8
 80075fe:	9342      	str	r3, [sp, #264]	; 0x108
 8007600:	2304      	movs	r3, #4
 8007602:	e7da      	b.n	80075ba <__ssvfiscanf_r+0x1da>
 8007604:	4629      	mov	r1, r5
 8007606:	4640      	mov	r0, r8
 8007608:	f000 fb48 	bl	8007c9c <__sccl>
 800760c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800760e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007612:	9341      	str	r3, [sp, #260]	; 0x104
 8007614:	4605      	mov	r5, r0
 8007616:	2301      	movs	r3, #1
 8007618:	e7cf      	b.n	80075ba <__ssvfiscanf_r+0x1da>
 800761a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800761c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007620:	9341      	str	r3, [sp, #260]	; 0x104
 8007622:	2300      	movs	r3, #0
 8007624:	e7c9      	b.n	80075ba <__ssvfiscanf_r+0x1da>
 8007626:	2302      	movs	r3, #2
 8007628:	e7c7      	b.n	80075ba <__ssvfiscanf_r+0x1da>
 800762a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800762c:	06c3      	lsls	r3, r0, #27
 800762e:	f53f aefe 	bmi.w	800742e <__ssvfiscanf_r+0x4e>
 8007632:	9b00      	ldr	r3, [sp, #0]
 8007634:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007636:	1d19      	adds	r1, r3, #4
 8007638:	9100      	str	r1, [sp, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f010 0f01 	tst.w	r0, #1
 8007640:	bf14      	ite	ne
 8007642:	801a      	strhne	r2, [r3, #0]
 8007644:	601a      	streq	r2, [r3, #0]
 8007646:	e6f2      	b.n	800742e <__ssvfiscanf_r+0x4e>
 8007648:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800764a:	4621      	mov	r1, r4
 800764c:	4630      	mov	r0, r6
 800764e:	4798      	blx	r3
 8007650:	2800      	cmp	r0, #0
 8007652:	d0b6      	beq.n	80075c2 <__ssvfiscanf_r+0x1e2>
 8007654:	e79c      	b.n	8007590 <__ssvfiscanf_r+0x1b0>
 8007656:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007658:	3201      	adds	r2, #1
 800765a:	9245      	str	r2, [sp, #276]	; 0x114
 800765c:	6862      	ldr	r2, [r4, #4]
 800765e:	3a01      	subs	r2, #1
 8007660:	2a00      	cmp	r2, #0
 8007662:	6062      	str	r2, [r4, #4]
 8007664:	dd02      	ble.n	800766c <__ssvfiscanf_r+0x28c>
 8007666:	3301      	adds	r3, #1
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	e7ad      	b.n	80075c8 <__ssvfiscanf_r+0x1e8>
 800766c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800766e:	4621      	mov	r1, r4
 8007670:	4630      	mov	r0, r6
 8007672:	4798      	blx	r3
 8007674:	2800      	cmp	r0, #0
 8007676:	d0a7      	beq.n	80075c8 <__ssvfiscanf_r+0x1e8>
 8007678:	e78a      	b.n	8007590 <__ssvfiscanf_r+0x1b0>
 800767a:	2b04      	cmp	r3, #4
 800767c:	dc0e      	bgt.n	800769c <__ssvfiscanf_r+0x2bc>
 800767e:	466b      	mov	r3, sp
 8007680:	4622      	mov	r2, r4
 8007682:	a941      	add	r1, sp, #260	; 0x104
 8007684:	4630      	mov	r0, r6
 8007686:	f000 fa11 	bl	8007aac <_scanf_i>
 800768a:	e7ab      	b.n	80075e4 <__ssvfiscanf_r+0x204>
 800768c:	0800732d 	.word	0x0800732d
 8007690:	080073a7 	.word	0x080073a7
 8007694:	0800869d 	.word	0x0800869d
 8007698:	080087a3 	.word	0x080087a3
 800769c:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <__ssvfiscanf_r+0x2ec>)
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f43f aec5 	beq.w	800742e <__ssvfiscanf_r+0x4e>
 80076a4:	466b      	mov	r3, sp
 80076a6:	4622      	mov	r2, r4
 80076a8:	a941      	add	r1, sp, #260	; 0x104
 80076aa:	4630      	mov	r0, r6
 80076ac:	f3af 8000 	nop.w
 80076b0:	e798      	b.n	80075e4 <__ssvfiscanf_r+0x204>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80076b8:	bf18      	it	ne
 80076ba:	f04f 30ff 	movne.w	r0, #4294967295
 80076be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80076c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80076c8:	e7f9      	b.n	80076be <__ssvfiscanf_r+0x2de>
 80076ca:	bf00      	nop
 80076cc:	00000000 	.word	0x00000000

080076d0 <_printf_common>:
 80076d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	4616      	mov	r6, r2
 80076d6:	4699      	mov	r9, r3
 80076d8:	688a      	ldr	r2, [r1, #8]
 80076da:	690b      	ldr	r3, [r1, #16]
 80076dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076e0:	4293      	cmp	r3, r2
 80076e2:	bfb8      	it	lt
 80076e4:	4613      	movlt	r3, r2
 80076e6:	6033      	str	r3, [r6, #0]
 80076e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076ec:	4607      	mov	r7, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	b10a      	cbz	r2, 80076f6 <_printf_common+0x26>
 80076f2:	3301      	adds	r3, #1
 80076f4:	6033      	str	r3, [r6, #0]
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	0699      	lsls	r1, r3, #26
 80076fa:	bf42      	ittt	mi
 80076fc:	6833      	ldrmi	r3, [r6, #0]
 80076fe:	3302      	addmi	r3, #2
 8007700:	6033      	strmi	r3, [r6, #0]
 8007702:	6825      	ldr	r5, [r4, #0]
 8007704:	f015 0506 	ands.w	r5, r5, #6
 8007708:	d106      	bne.n	8007718 <_printf_common+0x48>
 800770a:	f104 0a19 	add.w	sl, r4, #25
 800770e:	68e3      	ldr	r3, [r4, #12]
 8007710:	6832      	ldr	r2, [r6, #0]
 8007712:	1a9b      	subs	r3, r3, r2
 8007714:	42ab      	cmp	r3, r5
 8007716:	dc26      	bgt.n	8007766 <_printf_common+0x96>
 8007718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800771c:	1e13      	subs	r3, r2, #0
 800771e:	6822      	ldr	r2, [r4, #0]
 8007720:	bf18      	it	ne
 8007722:	2301      	movne	r3, #1
 8007724:	0692      	lsls	r2, r2, #26
 8007726:	d42b      	bmi.n	8007780 <_printf_common+0xb0>
 8007728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800772c:	4649      	mov	r1, r9
 800772e:	4638      	mov	r0, r7
 8007730:	47c0      	blx	r8
 8007732:	3001      	adds	r0, #1
 8007734:	d01e      	beq.n	8007774 <_printf_common+0xa4>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	68e5      	ldr	r5, [r4, #12]
 800773a:	6832      	ldr	r2, [r6, #0]
 800773c:	f003 0306 	and.w	r3, r3, #6
 8007740:	2b04      	cmp	r3, #4
 8007742:	bf08      	it	eq
 8007744:	1aad      	subeq	r5, r5, r2
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	6922      	ldr	r2, [r4, #16]
 800774a:	bf0c      	ite	eq
 800774c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007750:	2500      	movne	r5, #0
 8007752:	4293      	cmp	r3, r2
 8007754:	bfc4      	itt	gt
 8007756:	1a9b      	subgt	r3, r3, r2
 8007758:	18ed      	addgt	r5, r5, r3
 800775a:	2600      	movs	r6, #0
 800775c:	341a      	adds	r4, #26
 800775e:	42b5      	cmp	r5, r6
 8007760:	d11a      	bne.n	8007798 <_printf_common+0xc8>
 8007762:	2000      	movs	r0, #0
 8007764:	e008      	b.n	8007778 <_printf_common+0xa8>
 8007766:	2301      	movs	r3, #1
 8007768:	4652      	mov	r2, sl
 800776a:	4649      	mov	r1, r9
 800776c:	4638      	mov	r0, r7
 800776e:	47c0      	blx	r8
 8007770:	3001      	adds	r0, #1
 8007772:	d103      	bne.n	800777c <_printf_common+0xac>
 8007774:	f04f 30ff 	mov.w	r0, #4294967295
 8007778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777c:	3501      	adds	r5, #1
 800777e:	e7c6      	b.n	800770e <_printf_common+0x3e>
 8007780:	18e1      	adds	r1, r4, r3
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	2030      	movs	r0, #48	; 0x30
 8007786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800778a:	4422      	add	r2, r4
 800778c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007794:	3302      	adds	r3, #2
 8007796:	e7c7      	b.n	8007728 <_printf_common+0x58>
 8007798:	2301      	movs	r3, #1
 800779a:	4622      	mov	r2, r4
 800779c:	4649      	mov	r1, r9
 800779e:	4638      	mov	r0, r7
 80077a0:	47c0      	blx	r8
 80077a2:	3001      	adds	r0, #1
 80077a4:	d0e6      	beq.n	8007774 <_printf_common+0xa4>
 80077a6:	3601      	adds	r6, #1
 80077a8:	e7d9      	b.n	800775e <_printf_common+0x8e>
	...

080077ac <_printf_i>:
 80077ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	7e0f      	ldrb	r7, [r1, #24]
 80077b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077b4:	2f78      	cmp	r7, #120	; 0x78
 80077b6:	4691      	mov	r9, r2
 80077b8:	4680      	mov	r8, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	469a      	mov	sl, r3
 80077be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077c2:	d807      	bhi.n	80077d4 <_printf_i+0x28>
 80077c4:	2f62      	cmp	r7, #98	; 0x62
 80077c6:	d80a      	bhi.n	80077de <_printf_i+0x32>
 80077c8:	2f00      	cmp	r7, #0
 80077ca:	f000 80d8 	beq.w	800797e <_printf_i+0x1d2>
 80077ce:	2f58      	cmp	r7, #88	; 0x58
 80077d0:	f000 80a3 	beq.w	800791a <_printf_i+0x16e>
 80077d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077dc:	e03a      	b.n	8007854 <_printf_i+0xa8>
 80077de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077e2:	2b15      	cmp	r3, #21
 80077e4:	d8f6      	bhi.n	80077d4 <_printf_i+0x28>
 80077e6:	a101      	add	r1, pc, #4	; (adr r1, 80077ec <_printf_i+0x40>)
 80077e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077ec:	08007845 	.word	0x08007845
 80077f0:	08007859 	.word	0x08007859
 80077f4:	080077d5 	.word	0x080077d5
 80077f8:	080077d5 	.word	0x080077d5
 80077fc:	080077d5 	.word	0x080077d5
 8007800:	080077d5 	.word	0x080077d5
 8007804:	08007859 	.word	0x08007859
 8007808:	080077d5 	.word	0x080077d5
 800780c:	080077d5 	.word	0x080077d5
 8007810:	080077d5 	.word	0x080077d5
 8007814:	080077d5 	.word	0x080077d5
 8007818:	08007965 	.word	0x08007965
 800781c:	08007889 	.word	0x08007889
 8007820:	08007947 	.word	0x08007947
 8007824:	080077d5 	.word	0x080077d5
 8007828:	080077d5 	.word	0x080077d5
 800782c:	08007987 	.word	0x08007987
 8007830:	080077d5 	.word	0x080077d5
 8007834:	08007889 	.word	0x08007889
 8007838:	080077d5 	.word	0x080077d5
 800783c:	080077d5 	.word	0x080077d5
 8007840:	0800794f 	.word	0x0800794f
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	1d1a      	adds	r2, r3, #4
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	602a      	str	r2, [r5, #0]
 800784c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007854:	2301      	movs	r3, #1
 8007856:	e0a3      	b.n	80079a0 <_printf_i+0x1f4>
 8007858:	6820      	ldr	r0, [r4, #0]
 800785a:	6829      	ldr	r1, [r5, #0]
 800785c:	0606      	lsls	r6, r0, #24
 800785e:	f101 0304 	add.w	r3, r1, #4
 8007862:	d50a      	bpl.n	800787a <_printf_i+0xce>
 8007864:	680e      	ldr	r6, [r1, #0]
 8007866:	602b      	str	r3, [r5, #0]
 8007868:	2e00      	cmp	r6, #0
 800786a:	da03      	bge.n	8007874 <_printf_i+0xc8>
 800786c:	232d      	movs	r3, #45	; 0x2d
 800786e:	4276      	negs	r6, r6
 8007870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007874:	485e      	ldr	r0, [pc, #376]	; (80079f0 <_printf_i+0x244>)
 8007876:	230a      	movs	r3, #10
 8007878:	e019      	b.n	80078ae <_printf_i+0x102>
 800787a:	680e      	ldr	r6, [r1, #0]
 800787c:	602b      	str	r3, [r5, #0]
 800787e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007882:	bf18      	it	ne
 8007884:	b236      	sxthne	r6, r6
 8007886:	e7ef      	b.n	8007868 <_printf_i+0xbc>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	6820      	ldr	r0, [r4, #0]
 800788c:	1d19      	adds	r1, r3, #4
 800788e:	6029      	str	r1, [r5, #0]
 8007890:	0601      	lsls	r1, r0, #24
 8007892:	d501      	bpl.n	8007898 <_printf_i+0xec>
 8007894:	681e      	ldr	r6, [r3, #0]
 8007896:	e002      	b.n	800789e <_printf_i+0xf2>
 8007898:	0646      	lsls	r6, r0, #25
 800789a:	d5fb      	bpl.n	8007894 <_printf_i+0xe8>
 800789c:	881e      	ldrh	r6, [r3, #0]
 800789e:	4854      	ldr	r0, [pc, #336]	; (80079f0 <_printf_i+0x244>)
 80078a0:	2f6f      	cmp	r7, #111	; 0x6f
 80078a2:	bf0c      	ite	eq
 80078a4:	2308      	moveq	r3, #8
 80078a6:	230a      	movne	r3, #10
 80078a8:	2100      	movs	r1, #0
 80078aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078ae:	6865      	ldr	r5, [r4, #4]
 80078b0:	60a5      	str	r5, [r4, #8]
 80078b2:	2d00      	cmp	r5, #0
 80078b4:	bfa2      	ittt	ge
 80078b6:	6821      	ldrge	r1, [r4, #0]
 80078b8:	f021 0104 	bicge.w	r1, r1, #4
 80078bc:	6021      	strge	r1, [r4, #0]
 80078be:	b90e      	cbnz	r6, 80078c4 <_printf_i+0x118>
 80078c0:	2d00      	cmp	r5, #0
 80078c2:	d04d      	beq.n	8007960 <_printf_i+0x1b4>
 80078c4:	4615      	mov	r5, r2
 80078c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80078ca:	fb03 6711 	mls	r7, r3, r1, r6
 80078ce:	5dc7      	ldrb	r7, [r0, r7]
 80078d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078d4:	4637      	mov	r7, r6
 80078d6:	42bb      	cmp	r3, r7
 80078d8:	460e      	mov	r6, r1
 80078da:	d9f4      	bls.n	80078c6 <_printf_i+0x11a>
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d10b      	bne.n	80078f8 <_printf_i+0x14c>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	07de      	lsls	r6, r3, #31
 80078e4:	d508      	bpl.n	80078f8 <_printf_i+0x14c>
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	6861      	ldr	r1, [r4, #4]
 80078ea:	4299      	cmp	r1, r3
 80078ec:	bfde      	ittt	le
 80078ee:	2330      	movle	r3, #48	; 0x30
 80078f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078f8:	1b52      	subs	r2, r2, r5
 80078fa:	6122      	str	r2, [r4, #16]
 80078fc:	f8cd a000 	str.w	sl, [sp]
 8007900:	464b      	mov	r3, r9
 8007902:	aa03      	add	r2, sp, #12
 8007904:	4621      	mov	r1, r4
 8007906:	4640      	mov	r0, r8
 8007908:	f7ff fee2 	bl	80076d0 <_printf_common>
 800790c:	3001      	adds	r0, #1
 800790e:	d14c      	bne.n	80079aa <_printf_i+0x1fe>
 8007910:	f04f 30ff 	mov.w	r0, #4294967295
 8007914:	b004      	add	sp, #16
 8007916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791a:	4835      	ldr	r0, [pc, #212]	; (80079f0 <_printf_i+0x244>)
 800791c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007920:	6829      	ldr	r1, [r5, #0]
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	f851 6b04 	ldr.w	r6, [r1], #4
 8007928:	6029      	str	r1, [r5, #0]
 800792a:	061d      	lsls	r5, r3, #24
 800792c:	d514      	bpl.n	8007958 <_printf_i+0x1ac>
 800792e:	07df      	lsls	r7, r3, #31
 8007930:	bf44      	itt	mi
 8007932:	f043 0320 	orrmi.w	r3, r3, #32
 8007936:	6023      	strmi	r3, [r4, #0]
 8007938:	b91e      	cbnz	r6, 8007942 <_printf_i+0x196>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	f023 0320 	bic.w	r3, r3, #32
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	2310      	movs	r3, #16
 8007944:	e7b0      	b.n	80078a8 <_printf_i+0xfc>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	f043 0320 	orr.w	r3, r3, #32
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	2378      	movs	r3, #120	; 0x78
 8007950:	4828      	ldr	r0, [pc, #160]	; (80079f4 <_printf_i+0x248>)
 8007952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007956:	e7e3      	b.n	8007920 <_printf_i+0x174>
 8007958:	0659      	lsls	r1, r3, #25
 800795a:	bf48      	it	mi
 800795c:	b2b6      	uxthmi	r6, r6
 800795e:	e7e6      	b.n	800792e <_printf_i+0x182>
 8007960:	4615      	mov	r5, r2
 8007962:	e7bb      	b.n	80078dc <_printf_i+0x130>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	6826      	ldr	r6, [r4, #0]
 8007968:	6961      	ldr	r1, [r4, #20]
 800796a:	1d18      	adds	r0, r3, #4
 800796c:	6028      	str	r0, [r5, #0]
 800796e:	0635      	lsls	r5, r6, #24
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	d501      	bpl.n	8007978 <_printf_i+0x1cc>
 8007974:	6019      	str	r1, [r3, #0]
 8007976:	e002      	b.n	800797e <_printf_i+0x1d2>
 8007978:	0670      	lsls	r0, r6, #25
 800797a:	d5fb      	bpl.n	8007974 <_printf_i+0x1c8>
 800797c:	8019      	strh	r1, [r3, #0]
 800797e:	2300      	movs	r3, #0
 8007980:	6123      	str	r3, [r4, #16]
 8007982:	4615      	mov	r5, r2
 8007984:	e7ba      	b.n	80078fc <_printf_i+0x150>
 8007986:	682b      	ldr	r3, [r5, #0]
 8007988:	1d1a      	adds	r2, r3, #4
 800798a:	602a      	str	r2, [r5, #0]
 800798c:	681d      	ldr	r5, [r3, #0]
 800798e:	6862      	ldr	r2, [r4, #4]
 8007990:	2100      	movs	r1, #0
 8007992:	4628      	mov	r0, r5
 8007994:	f7f8 fc3c 	bl	8000210 <memchr>
 8007998:	b108      	cbz	r0, 800799e <_printf_i+0x1f2>
 800799a:	1b40      	subs	r0, r0, r5
 800799c:	6060      	str	r0, [r4, #4]
 800799e:	6863      	ldr	r3, [r4, #4]
 80079a0:	6123      	str	r3, [r4, #16]
 80079a2:	2300      	movs	r3, #0
 80079a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a8:	e7a8      	b.n	80078fc <_printf_i+0x150>
 80079aa:	6923      	ldr	r3, [r4, #16]
 80079ac:	462a      	mov	r2, r5
 80079ae:	4649      	mov	r1, r9
 80079b0:	4640      	mov	r0, r8
 80079b2:	47d0      	blx	sl
 80079b4:	3001      	adds	r0, #1
 80079b6:	d0ab      	beq.n	8007910 <_printf_i+0x164>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	079b      	lsls	r3, r3, #30
 80079bc:	d413      	bmi.n	80079e6 <_printf_i+0x23a>
 80079be:	68e0      	ldr	r0, [r4, #12]
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	4298      	cmp	r0, r3
 80079c4:	bfb8      	it	lt
 80079c6:	4618      	movlt	r0, r3
 80079c8:	e7a4      	b.n	8007914 <_printf_i+0x168>
 80079ca:	2301      	movs	r3, #1
 80079cc:	4632      	mov	r2, r6
 80079ce:	4649      	mov	r1, r9
 80079d0:	4640      	mov	r0, r8
 80079d2:	47d0      	blx	sl
 80079d4:	3001      	adds	r0, #1
 80079d6:	d09b      	beq.n	8007910 <_printf_i+0x164>
 80079d8:	3501      	adds	r5, #1
 80079da:	68e3      	ldr	r3, [r4, #12]
 80079dc:	9903      	ldr	r1, [sp, #12]
 80079de:	1a5b      	subs	r3, r3, r1
 80079e0:	42ab      	cmp	r3, r5
 80079e2:	dcf2      	bgt.n	80079ca <_printf_i+0x21e>
 80079e4:	e7eb      	b.n	80079be <_printf_i+0x212>
 80079e6:	2500      	movs	r5, #0
 80079e8:	f104 0619 	add.w	r6, r4, #25
 80079ec:	e7f5      	b.n	80079da <_printf_i+0x22e>
 80079ee:	bf00      	nop
 80079f0:	080087ae 	.word	0x080087ae
 80079f4:	080087bf 	.word	0x080087bf

080079f8 <_scanf_chars>:
 80079f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079fc:	4615      	mov	r5, r2
 80079fe:	688a      	ldr	r2, [r1, #8]
 8007a00:	4680      	mov	r8, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	b932      	cbnz	r2, 8007a14 <_scanf_chars+0x1c>
 8007a06:	698a      	ldr	r2, [r1, #24]
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	bf0c      	ite	eq
 8007a0c:	2201      	moveq	r2, #1
 8007a0e:	f04f 32ff 	movne.w	r2, #4294967295
 8007a12:	608a      	str	r2, [r1, #8]
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007aa8 <_scanf_chars+0xb0>
 8007a1a:	06d1      	lsls	r1, r2, #27
 8007a1c:	bf5f      	itttt	pl
 8007a1e:	681a      	ldrpl	r2, [r3, #0]
 8007a20:	1d11      	addpl	r1, r2, #4
 8007a22:	6019      	strpl	r1, [r3, #0]
 8007a24:	6816      	ldrpl	r6, [r2, #0]
 8007a26:	2700      	movs	r7, #0
 8007a28:	69a0      	ldr	r0, [r4, #24]
 8007a2a:	b188      	cbz	r0, 8007a50 <_scanf_chars+0x58>
 8007a2c:	2801      	cmp	r0, #1
 8007a2e:	d107      	bne.n	8007a40 <_scanf_chars+0x48>
 8007a30:	682a      	ldr	r2, [r5, #0]
 8007a32:	7811      	ldrb	r1, [r2, #0]
 8007a34:	6962      	ldr	r2, [r4, #20]
 8007a36:	5c52      	ldrb	r2, [r2, r1]
 8007a38:	b952      	cbnz	r2, 8007a50 <_scanf_chars+0x58>
 8007a3a:	2f00      	cmp	r7, #0
 8007a3c:	d031      	beq.n	8007aa2 <_scanf_chars+0xaa>
 8007a3e:	e022      	b.n	8007a86 <_scanf_chars+0x8e>
 8007a40:	2802      	cmp	r0, #2
 8007a42:	d120      	bne.n	8007a86 <_scanf_chars+0x8e>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007a4c:	071b      	lsls	r3, r3, #28
 8007a4e:	d41a      	bmi.n	8007a86 <_scanf_chars+0x8e>
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	06da      	lsls	r2, r3, #27
 8007a54:	bf5e      	ittt	pl
 8007a56:	682b      	ldrpl	r3, [r5, #0]
 8007a58:	781b      	ldrbpl	r3, [r3, #0]
 8007a5a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007a5e:	682a      	ldr	r2, [r5, #0]
 8007a60:	686b      	ldr	r3, [r5, #4]
 8007a62:	3201      	adds	r2, #1
 8007a64:	602a      	str	r2, [r5, #0]
 8007a66:	68a2      	ldr	r2, [r4, #8]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	3a01      	subs	r2, #1
 8007a6c:	606b      	str	r3, [r5, #4]
 8007a6e:	3701      	adds	r7, #1
 8007a70:	60a2      	str	r2, [r4, #8]
 8007a72:	b142      	cbz	r2, 8007a86 <_scanf_chars+0x8e>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dcd7      	bgt.n	8007a28 <_scanf_chars+0x30>
 8007a78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4640      	mov	r0, r8
 8007a80:	4798      	blx	r3
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d0d0      	beq.n	8007a28 <_scanf_chars+0x30>
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	f013 0310 	ands.w	r3, r3, #16
 8007a8c:	d105      	bne.n	8007a9a <_scanf_chars+0xa2>
 8007a8e:	68e2      	ldr	r2, [r4, #12]
 8007a90:	3201      	adds	r2, #1
 8007a92:	60e2      	str	r2, [r4, #12]
 8007a94:	69a2      	ldr	r2, [r4, #24]
 8007a96:	b102      	cbz	r2, 8007a9a <_scanf_chars+0xa2>
 8007a98:	7033      	strb	r3, [r6, #0]
 8007a9a:	6923      	ldr	r3, [r4, #16]
 8007a9c:	443b      	add	r3, r7
 8007a9e:	6123      	str	r3, [r4, #16]
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa6:	bf00      	nop
 8007aa8:	0800869d 	.word	0x0800869d

08007aac <_scanf_i>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	4698      	mov	r8, r3
 8007ab2:	4b76      	ldr	r3, [pc, #472]	; (8007c8c <_scanf_i+0x1e0>)
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	4682      	mov	sl, r0
 8007ab8:	4616      	mov	r6, r2
 8007aba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	ab03      	add	r3, sp, #12
 8007ac2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007ac6:	4b72      	ldr	r3, [pc, #456]	; (8007c90 <_scanf_i+0x1e4>)
 8007ac8:	69a1      	ldr	r1, [r4, #24]
 8007aca:	4a72      	ldr	r2, [pc, #456]	; (8007c94 <_scanf_i+0x1e8>)
 8007acc:	2903      	cmp	r1, #3
 8007ace:	bf18      	it	ne
 8007ad0:	461a      	movne	r2, r3
 8007ad2:	68a3      	ldr	r3, [r4, #8]
 8007ad4:	9201      	str	r2, [sp, #4]
 8007ad6:	1e5a      	subs	r2, r3, #1
 8007ad8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007adc:	bf88      	it	hi
 8007ade:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007ae2:	4627      	mov	r7, r4
 8007ae4:	bf82      	ittt	hi
 8007ae6:	eb03 0905 	addhi.w	r9, r3, r5
 8007aea:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007aee:	60a3      	strhi	r3, [r4, #8]
 8007af0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007af4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007af8:	bf98      	it	ls
 8007afa:	f04f 0900 	movls.w	r9, #0
 8007afe:	6023      	str	r3, [r4, #0]
 8007b00:	463d      	mov	r5, r7
 8007b02:	f04f 0b00 	mov.w	fp, #0
 8007b06:	6831      	ldr	r1, [r6, #0]
 8007b08:	ab03      	add	r3, sp, #12
 8007b0a:	7809      	ldrb	r1, [r1, #0]
 8007b0c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007b10:	2202      	movs	r2, #2
 8007b12:	f7f8 fb7d 	bl	8000210 <memchr>
 8007b16:	b328      	cbz	r0, 8007b64 <_scanf_i+0xb8>
 8007b18:	f1bb 0f01 	cmp.w	fp, #1
 8007b1c:	d159      	bne.n	8007bd2 <_scanf_i+0x126>
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	b92a      	cbnz	r2, 8007b2e <_scanf_i+0x82>
 8007b22:	6822      	ldr	r2, [r4, #0]
 8007b24:	2308      	movs	r3, #8
 8007b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b2a:	6063      	str	r3, [r4, #4]
 8007b2c:	6022      	str	r2, [r4, #0]
 8007b2e:	6822      	ldr	r2, [r4, #0]
 8007b30:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007b34:	6022      	str	r2, [r4, #0]
 8007b36:	68a2      	ldr	r2, [r4, #8]
 8007b38:	1e51      	subs	r1, r2, #1
 8007b3a:	60a1      	str	r1, [r4, #8]
 8007b3c:	b192      	cbz	r2, 8007b64 <_scanf_i+0xb8>
 8007b3e:	6832      	ldr	r2, [r6, #0]
 8007b40:	1c51      	adds	r1, r2, #1
 8007b42:	6031      	str	r1, [r6, #0]
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	f805 2b01 	strb.w	r2, [r5], #1
 8007b4a:	6872      	ldr	r2, [r6, #4]
 8007b4c:	3a01      	subs	r2, #1
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	6072      	str	r2, [r6, #4]
 8007b52:	dc07      	bgt.n	8007b64 <_scanf_i+0xb8>
 8007b54:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007b58:	4631      	mov	r1, r6
 8007b5a:	4650      	mov	r0, sl
 8007b5c:	4790      	blx	r2
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f040 8085 	bne.w	8007c6e <_scanf_i+0x1c2>
 8007b64:	f10b 0b01 	add.w	fp, fp, #1
 8007b68:	f1bb 0f03 	cmp.w	fp, #3
 8007b6c:	d1cb      	bne.n	8007b06 <_scanf_i+0x5a>
 8007b6e:	6863      	ldr	r3, [r4, #4]
 8007b70:	b90b      	cbnz	r3, 8007b76 <_scanf_i+0xca>
 8007b72:	230a      	movs	r3, #10
 8007b74:	6063      	str	r3, [r4, #4]
 8007b76:	6863      	ldr	r3, [r4, #4]
 8007b78:	4947      	ldr	r1, [pc, #284]	; (8007c98 <_scanf_i+0x1ec>)
 8007b7a:	6960      	ldr	r0, [r4, #20]
 8007b7c:	1ac9      	subs	r1, r1, r3
 8007b7e:	f000 f88d 	bl	8007c9c <__sccl>
 8007b82:	f04f 0b00 	mov.w	fp, #0
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	6822      	ldr	r2, [r4, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d03d      	beq.n	8007c0a <_scanf_i+0x15e>
 8007b8e:	6831      	ldr	r1, [r6, #0]
 8007b90:	6960      	ldr	r0, [r4, #20]
 8007b92:	f891 c000 	ldrb.w	ip, [r1]
 8007b96:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d035      	beq.n	8007c0a <_scanf_i+0x15e>
 8007b9e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007ba2:	d124      	bne.n	8007bee <_scanf_i+0x142>
 8007ba4:	0510      	lsls	r0, r2, #20
 8007ba6:	d522      	bpl.n	8007bee <_scanf_i+0x142>
 8007ba8:	f10b 0b01 	add.w	fp, fp, #1
 8007bac:	f1b9 0f00 	cmp.w	r9, #0
 8007bb0:	d003      	beq.n	8007bba <_scanf_i+0x10e>
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	f109 39ff 	add.w	r9, r9, #4294967295
 8007bb8:	60a3      	str	r3, [r4, #8]
 8007bba:	6873      	ldr	r3, [r6, #4]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	6073      	str	r3, [r6, #4]
 8007bc2:	dd1b      	ble.n	8007bfc <_scanf_i+0x150>
 8007bc4:	6833      	ldr	r3, [r6, #0]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	6033      	str	r3, [r6, #0]
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	60a3      	str	r3, [r4, #8]
 8007bd0:	e7d9      	b.n	8007b86 <_scanf_i+0xda>
 8007bd2:	f1bb 0f02 	cmp.w	fp, #2
 8007bd6:	d1ae      	bne.n	8007b36 <_scanf_i+0x8a>
 8007bd8:	6822      	ldr	r2, [r4, #0]
 8007bda:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007bde:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007be2:	d1bf      	bne.n	8007b64 <_scanf_i+0xb8>
 8007be4:	2310      	movs	r3, #16
 8007be6:	6063      	str	r3, [r4, #4]
 8007be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bec:	e7a2      	b.n	8007b34 <_scanf_i+0x88>
 8007bee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007bf2:	6022      	str	r2, [r4, #0]
 8007bf4:	780b      	ldrb	r3, [r1, #0]
 8007bf6:	f805 3b01 	strb.w	r3, [r5], #1
 8007bfa:	e7de      	b.n	8007bba <_scanf_i+0x10e>
 8007bfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c00:	4631      	mov	r1, r6
 8007c02:	4650      	mov	r0, sl
 8007c04:	4798      	blx	r3
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d0df      	beq.n	8007bca <_scanf_i+0x11e>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	05db      	lsls	r3, r3, #23
 8007c0e:	d50d      	bpl.n	8007c2c <_scanf_i+0x180>
 8007c10:	42bd      	cmp	r5, r7
 8007c12:	d909      	bls.n	8007c28 <_scanf_i+0x17c>
 8007c14:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007c18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c1c:	4632      	mov	r2, r6
 8007c1e:	4650      	mov	r0, sl
 8007c20:	4798      	blx	r3
 8007c22:	f105 39ff 	add.w	r9, r5, #4294967295
 8007c26:	464d      	mov	r5, r9
 8007c28:	42bd      	cmp	r5, r7
 8007c2a:	d02d      	beq.n	8007c88 <_scanf_i+0x1dc>
 8007c2c:	6822      	ldr	r2, [r4, #0]
 8007c2e:	f012 0210 	ands.w	r2, r2, #16
 8007c32:	d113      	bne.n	8007c5c <_scanf_i+0x1b0>
 8007c34:	702a      	strb	r2, [r5, #0]
 8007c36:	6863      	ldr	r3, [r4, #4]
 8007c38:	9e01      	ldr	r6, [sp, #4]
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	4650      	mov	r0, sl
 8007c3e:	47b0      	blx	r6
 8007c40:	6821      	ldr	r1, [r4, #0]
 8007c42:	f8d8 3000 	ldr.w	r3, [r8]
 8007c46:	f011 0f20 	tst.w	r1, #32
 8007c4a:	d013      	beq.n	8007c74 <_scanf_i+0x1c8>
 8007c4c:	1d1a      	adds	r2, r3, #4
 8007c4e:	f8c8 2000 	str.w	r2, [r8]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6018      	str	r0, [r3, #0]
 8007c56:	68e3      	ldr	r3, [r4, #12]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	60e3      	str	r3, [r4, #12]
 8007c5c:	1bed      	subs	r5, r5, r7
 8007c5e:	44ab      	add	fp, r5
 8007c60:	6925      	ldr	r5, [r4, #16]
 8007c62:	445d      	add	r5, fp
 8007c64:	6125      	str	r5, [r4, #16]
 8007c66:	2000      	movs	r0, #0
 8007c68:	b007      	add	sp, #28
 8007c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6e:	f04f 0b00 	mov.w	fp, #0
 8007c72:	e7ca      	b.n	8007c0a <_scanf_i+0x15e>
 8007c74:	1d1a      	adds	r2, r3, #4
 8007c76:	f8c8 2000 	str.w	r2, [r8]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f011 0f01 	tst.w	r1, #1
 8007c80:	bf14      	ite	ne
 8007c82:	8018      	strhne	r0, [r3, #0]
 8007c84:	6018      	streq	r0, [r3, #0]
 8007c86:	e7e6      	b.n	8007c56 <_scanf_i+0x1aa>
 8007c88:	2001      	movs	r0, #1
 8007c8a:	e7ed      	b.n	8007c68 <_scanf_i+0x1bc>
 8007c8c:	080083a0 	.word	0x080083a0
 8007c90:	08007df1 	.word	0x08007df1
 8007c94:	0800705d 	.word	0x0800705d
 8007c98:	080087e9 	.word	0x080087e9

08007c9c <__sccl>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	780b      	ldrb	r3, [r1, #0]
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	2b5e      	cmp	r3, #94	; 0x5e
 8007ca4:	bf0b      	itete	eq
 8007ca6:	784b      	ldrbeq	r3, [r1, #1]
 8007ca8:	1c48      	addne	r0, r1, #1
 8007caa:	1c88      	addeq	r0, r1, #2
 8007cac:	2200      	movne	r2, #0
 8007cae:	bf08      	it	eq
 8007cb0:	2201      	moveq	r2, #1
 8007cb2:	1e61      	subs	r1, r4, #1
 8007cb4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007cb8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007cbc:	42a9      	cmp	r1, r5
 8007cbe:	d1fb      	bne.n	8007cb8 <__sccl+0x1c>
 8007cc0:	b90b      	cbnz	r3, 8007cc6 <__sccl+0x2a>
 8007cc2:	3801      	subs	r0, #1
 8007cc4:	bd70      	pop	{r4, r5, r6, pc}
 8007cc6:	f082 0201 	eor.w	r2, r2, #1
 8007cca:	54e2      	strb	r2, [r4, r3]
 8007ccc:	4605      	mov	r5, r0
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007cd4:	292d      	cmp	r1, #45	; 0x2d
 8007cd6:	d006      	beq.n	8007ce6 <__sccl+0x4a>
 8007cd8:	295d      	cmp	r1, #93	; 0x5d
 8007cda:	d0f3      	beq.n	8007cc4 <__sccl+0x28>
 8007cdc:	b909      	cbnz	r1, 8007ce2 <__sccl+0x46>
 8007cde:	4628      	mov	r0, r5
 8007ce0:	e7f0      	b.n	8007cc4 <__sccl+0x28>
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	e7f1      	b.n	8007cca <__sccl+0x2e>
 8007ce6:	786e      	ldrb	r6, [r5, #1]
 8007ce8:	2e5d      	cmp	r6, #93	; 0x5d
 8007cea:	d0fa      	beq.n	8007ce2 <__sccl+0x46>
 8007cec:	42b3      	cmp	r3, r6
 8007cee:	dcf8      	bgt.n	8007ce2 <__sccl+0x46>
 8007cf0:	3502      	adds	r5, #2
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	3101      	adds	r1, #1
 8007cf6:	428e      	cmp	r6, r1
 8007cf8:	5462      	strb	r2, [r4, r1]
 8007cfa:	dcfb      	bgt.n	8007cf4 <__sccl+0x58>
 8007cfc:	1af1      	subs	r1, r6, r3
 8007cfe:	3901      	subs	r1, #1
 8007d00:	1c58      	adds	r0, r3, #1
 8007d02:	42b3      	cmp	r3, r6
 8007d04:	bfa8      	it	ge
 8007d06:	2100      	movge	r1, #0
 8007d08:	1843      	adds	r3, r0, r1
 8007d0a:	e7e0      	b.n	8007cce <__sccl+0x32>

08007d0c <_strtoul_l.constprop.0>:
 8007d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d10:	4f36      	ldr	r7, [pc, #216]	; (8007dec <_strtoul_l.constprop.0+0xe0>)
 8007d12:	4686      	mov	lr, r0
 8007d14:	460d      	mov	r5, r1
 8007d16:	4628      	mov	r0, r5
 8007d18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d1c:	5de6      	ldrb	r6, [r4, r7]
 8007d1e:	f016 0608 	ands.w	r6, r6, #8
 8007d22:	d1f8      	bne.n	8007d16 <_strtoul_l.constprop.0+0xa>
 8007d24:	2c2d      	cmp	r4, #45	; 0x2d
 8007d26:	d12f      	bne.n	8007d88 <_strtoul_l.constprop.0+0x7c>
 8007d28:	782c      	ldrb	r4, [r5, #0]
 8007d2a:	2601      	movs	r6, #1
 8007d2c:	1c85      	adds	r5, r0, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d057      	beq.n	8007de2 <_strtoul_l.constprop.0+0xd6>
 8007d32:	2b10      	cmp	r3, #16
 8007d34:	d109      	bne.n	8007d4a <_strtoul_l.constprop.0+0x3e>
 8007d36:	2c30      	cmp	r4, #48	; 0x30
 8007d38:	d107      	bne.n	8007d4a <_strtoul_l.constprop.0+0x3e>
 8007d3a:	7828      	ldrb	r0, [r5, #0]
 8007d3c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007d40:	2858      	cmp	r0, #88	; 0x58
 8007d42:	d149      	bne.n	8007dd8 <_strtoul_l.constprop.0+0xcc>
 8007d44:	786c      	ldrb	r4, [r5, #1]
 8007d46:	2310      	movs	r3, #16
 8007d48:	3502      	adds	r5, #2
 8007d4a:	f04f 38ff 	mov.w	r8, #4294967295
 8007d4e:	2700      	movs	r7, #0
 8007d50:	fbb8 f8f3 	udiv	r8, r8, r3
 8007d54:	fb03 f908 	mul.w	r9, r3, r8
 8007d58:	ea6f 0909 	mvn.w	r9, r9
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007d62:	f1bc 0f09 	cmp.w	ip, #9
 8007d66:	d814      	bhi.n	8007d92 <_strtoul_l.constprop.0+0x86>
 8007d68:	4664      	mov	r4, ip
 8007d6a:	42a3      	cmp	r3, r4
 8007d6c:	dd22      	ble.n	8007db4 <_strtoul_l.constprop.0+0xa8>
 8007d6e:	2f00      	cmp	r7, #0
 8007d70:	db1d      	blt.n	8007dae <_strtoul_l.constprop.0+0xa2>
 8007d72:	4580      	cmp	r8, r0
 8007d74:	d31b      	bcc.n	8007dae <_strtoul_l.constprop.0+0xa2>
 8007d76:	d101      	bne.n	8007d7c <_strtoul_l.constprop.0+0x70>
 8007d78:	45a1      	cmp	r9, r4
 8007d7a:	db18      	blt.n	8007dae <_strtoul_l.constprop.0+0xa2>
 8007d7c:	fb00 4003 	mla	r0, r0, r3, r4
 8007d80:	2701      	movs	r7, #1
 8007d82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d86:	e7ea      	b.n	8007d5e <_strtoul_l.constprop.0+0x52>
 8007d88:	2c2b      	cmp	r4, #43	; 0x2b
 8007d8a:	bf04      	itt	eq
 8007d8c:	782c      	ldrbeq	r4, [r5, #0]
 8007d8e:	1c85      	addeq	r5, r0, #2
 8007d90:	e7cd      	b.n	8007d2e <_strtoul_l.constprop.0+0x22>
 8007d92:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007d96:	f1bc 0f19 	cmp.w	ip, #25
 8007d9a:	d801      	bhi.n	8007da0 <_strtoul_l.constprop.0+0x94>
 8007d9c:	3c37      	subs	r4, #55	; 0x37
 8007d9e:	e7e4      	b.n	8007d6a <_strtoul_l.constprop.0+0x5e>
 8007da0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007da4:	f1bc 0f19 	cmp.w	ip, #25
 8007da8:	d804      	bhi.n	8007db4 <_strtoul_l.constprop.0+0xa8>
 8007daa:	3c57      	subs	r4, #87	; 0x57
 8007dac:	e7dd      	b.n	8007d6a <_strtoul_l.constprop.0+0x5e>
 8007dae:	f04f 37ff 	mov.w	r7, #4294967295
 8007db2:	e7e6      	b.n	8007d82 <_strtoul_l.constprop.0+0x76>
 8007db4:	2f00      	cmp	r7, #0
 8007db6:	da07      	bge.n	8007dc8 <_strtoul_l.constprop.0+0xbc>
 8007db8:	2322      	movs	r3, #34	; 0x22
 8007dba:	f8ce 3000 	str.w	r3, [lr]
 8007dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc2:	b932      	cbnz	r2, 8007dd2 <_strtoul_l.constprop.0+0xc6>
 8007dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dc8:	b106      	cbz	r6, 8007dcc <_strtoul_l.constprop.0+0xc0>
 8007dca:	4240      	negs	r0, r0
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	d0f9      	beq.n	8007dc4 <_strtoul_l.constprop.0+0xb8>
 8007dd0:	b107      	cbz	r7, 8007dd4 <_strtoul_l.constprop.0+0xc8>
 8007dd2:	1e69      	subs	r1, r5, #1
 8007dd4:	6011      	str	r1, [r2, #0]
 8007dd6:	e7f5      	b.n	8007dc4 <_strtoul_l.constprop.0+0xb8>
 8007dd8:	2430      	movs	r4, #48	; 0x30
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1b5      	bne.n	8007d4a <_strtoul_l.constprop.0+0x3e>
 8007dde:	2308      	movs	r3, #8
 8007de0:	e7b3      	b.n	8007d4a <_strtoul_l.constprop.0+0x3e>
 8007de2:	2c30      	cmp	r4, #48	; 0x30
 8007de4:	d0a9      	beq.n	8007d3a <_strtoul_l.constprop.0+0x2e>
 8007de6:	230a      	movs	r3, #10
 8007de8:	e7af      	b.n	8007d4a <_strtoul_l.constprop.0+0x3e>
 8007dea:	bf00      	nop
 8007dec:	0800869d 	.word	0x0800869d

08007df0 <_strtoul_r>:
 8007df0:	f7ff bf8c 	b.w	8007d0c <_strtoul_l.constprop.0>

08007df4 <__submore>:
 8007df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df8:	460c      	mov	r4, r1
 8007dfa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e00:	4299      	cmp	r1, r3
 8007e02:	d11d      	bne.n	8007e40 <__submore+0x4c>
 8007e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e08:	f000 f8c4 	bl	8007f94 <_malloc_r>
 8007e0c:	b918      	cbnz	r0, 8007e16 <__submore+0x22>
 8007e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8007e1c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007e20:	6360      	str	r0, [r4, #52]	; 0x34
 8007e22:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007e26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007e2a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007e2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007e32:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007e36:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007e3a:	6020      	str	r0, [r4, #0]
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	e7e8      	b.n	8007e12 <__submore+0x1e>
 8007e40:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007e42:	0077      	lsls	r7, r6, #1
 8007e44:	463a      	mov	r2, r7
 8007e46:	f000 f919 	bl	800807c <_realloc_r>
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d0de      	beq.n	8007e0e <__submore+0x1a>
 8007e50:	eb00 0806 	add.w	r8, r0, r6
 8007e54:	4601      	mov	r1, r0
 8007e56:	4632      	mov	r2, r6
 8007e58:	4640      	mov	r0, r8
 8007e5a:	f000 f807 	bl	8007e6c <memcpy>
 8007e5e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007e62:	f8c4 8000 	str.w	r8, [r4]
 8007e66:	e7e9      	b.n	8007e3c <__submore+0x48>

08007e68 <__retarget_lock_acquire_recursive>:
 8007e68:	4770      	bx	lr

08007e6a <__retarget_lock_release_recursive>:
 8007e6a:	4770      	bx	lr

08007e6c <memcpy>:
 8007e6c:	440a      	add	r2, r1
 8007e6e:	4291      	cmp	r1, r2
 8007e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e74:	d100      	bne.n	8007e78 <memcpy+0xc>
 8007e76:	4770      	bx	lr
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e82:	4291      	cmp	r1, r2
 8007e84:	d1f9      	bne.n	8007e7a <memcpy+0xe>
 8007e86:	bd10      	pop	{r4, pc}

08007e88 <memmove>:
 8007e88:	4288      	cmp	r0, r1
 8007e8a:	b510      	push	{r4, lr}
 8007e8c:	eb01 0402 	add.w	r4, r1, r2
 8007e90:	d902      	bls.n	8007e98 <memmove+0x10>
 8007e92:	4284      	cmp	r4, r0
 8007e94:	4623      	mov	r3, r4
 8007e96:	d807      	bhi.n	8007ea8 <memmove+0x20>
 8007e98:	1e43      	subs	r3, r0, #1
 8007e9a:	42a1      	cmp	r1, r4
 8007e9c:	d008      	beq.n	8007eb0 <memmove+0x28>
 8007e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ea6:	e7f8      	b.n	8007e9a <memmove+0x12>
 8007ea8:	4402      	add	r2, r0
 8007eaa:	4601      	mov	r1, r0
 8007eac:	428a      	cmp	r2, r1
 8007eae:	d100      	bne.n	8007eb2 <memmove+0x2a>
 8007eb0:	bd10      	pop	{r4, pc}
 8007eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eba:	e7f7      	b.n	8007eac <memmove+0x24>

08007ebc <_free_r>:
 8007ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ebe:	2900      	cmp	r1, #0
 8007ec0:	d044      	beq.n	8007f4c <_free_r+0x90>
 8007ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec6:	9001      	str	r0, [sp, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f1a1 0404 	sub.w	r4, r1, #4
 8007ece:	bfb8      	it	lt
 8007ed0:	18e4      	addlt	r4, r4, r3
 8007ed2:	f000 f913 	bl	80080fc <__malloc_lock>
 8007ed6:	4a1e      	ldr	r2, [pc, #120]	; (8007f50 <_free_r+0x94>)
 8007ed8:	9801      	ldr	r0, [sp, #4]
 8007eda:	6813      	ldr	r3, [r2, #0]
 8007edc:	b933      	cbnz	r3, 8007eec <_free_r+0x30>
 8007ede:	6063      	str	r3, [r4, #4]
 8007ee0:	6014      	str	r4, [r2, #0]
 8007ee2:	b003      	add	sp, #12
 8007ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ee8:	f000 b90e 	b.w	8008108 <__malloc_unlock>
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d908      	bls.n	8007f02 <_free_r+0x46>
 8007ef0:	6825      	ldr	r5, [r4, #0]
 8007ef2:	1961      	adds	r1, r4, r5
 8007ef4:	428b      	cmp	r3, r1
 8007ef6:	bf01      	itttt	eq
 8007ef8:	6819      	ldreq	r1, [r3, #0]
 8007efa:	685b      	ldreq	r3, [r3, #4]
 8007efc:	1949      	addeq	r1, r1, r5
 8007efe:	6021      	streq	r1, [r4, #0]
 8007f00:	e7ed      	b.n	8007ede <_free_r+0x22>
 8007f02:	461a      	mov	r2, r3
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	b10b      	cbz	r3, 8007f0c <_free_r+0x50>
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d9fa      	bls.n	8007f02 <_free_r+0x46>
 8007f0c:	6811      	ldr	r1, [r2, #0]
 8007f0e:	1855      	adds	r5, r2, r1
 8007f10:	42a5      	cmp	r5, r4
 8007f12:	d10b      	bne.n	8007f2c <_free_r+0x70>
 8007f14:	6824      	ldr	r4, [r4, #0]
 8007f16:	4421      	add	r1, r4
 8007f18:	1854      	adds	r4, r2, r1
 8007f1a:	42a3      	cmp	r3, r4
 8007f1c:	6011      	str	r1, [r2, #0]
 8007f1e:	d1e0      	bne.n	8007ee2 <_free_r+0x26>
 8007f20:	681c      	ldr	r4, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	6053      	str	r3, [r2, #4]
 8007f26:	4421      	add	r1, r4
 8007f28:	6011      	str	r1, [r2, #0]
 8007f2a:	e7da      	b.n	8007ee2 <_free_r+0x26>
 8007f2c:	d902      	bls.n	8007f34 <_free_r+0x78>
 8007f2e:	230c      	movs	r3, #12
 8007f30:	6003      	str	r3, [r0, #0]
 8007f32:	e7d6      	b.n	8007ee2 <_free_r+0x26>
 8007f34:	6825      	ldr	r5, [r4, #0]
 8007f36:	1961      	adds	r1, r4, r5
 8007f38:	428b      	cmp	r3, r1
 8007f3a:	bf04      	itt	eq
 8007f3c:	6819      	ldreq	r1, [r3, #0]
 8007f3e:	685b      	ldreq	r3, [r3, #4]
 8007f40:	6063      	str	r3, [r4, #4]
 8007f42:	bf04      	itt	eq
 8007f44:	1949      	addeq	r1, r1, r5
 8007f46:	6021      	streq	r1, [r4, #0]
 8007f48:	6054      	str	r4, [r2, #4]
 8007f4a:	e7ca      	b.n	8007ee2 <_free_r+0x26>
 8007f4c:	b003      	add	sp, #12
 8007f4e:	bd30      	pop	{r4, r5, pc}
 8007f50:	20000334 	.word	0x20000334

08007f54 <sbrk_aligned>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	4e0e      	ldr	r6, [pc, #56]	; (8007f90 <sbrk_aligned+0x3c>)
 8007f58:	460c      	mov	r4, r1
 8007f5a:	6831      	ldr	r1, [r6, #0]
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	b911      	cbnz	r1, 8007f66 <sbrk_aligned+0x12>
 8007f60:	f000 f8bc 	bl	80080dc <_sbrk_r>
 8007f64:	6030      	str	r0, [r6, #0]
 8007f66:	4621      	mov	r1, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f000 f8b7 	bl	80080dc <_sbrk_r>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d00a      	beq.n	8007f88 <sbrk_aligned+0x34>
 8007f72:	1cc4      	adds	r4, r0, #3
 8007f74:	f024 0403 	bic.w	r4, r4, #3
 8007f78:	42a0      	cmp	r0, r4
 8007f7a:	d007      	beq.n	8007f8c <sbrk_aligned+0x38>
 8007f7c:	1a21      	subs	r1, r4, r0
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f000 f8ac 	bl	80080dc <_sbrk_r>
 8007f84:	3001      	adds	r0, #1
 8007f86:	d101      	bne.n	8007f8c <sbrk_aligned+0x38>
 8007f88:	f04f 34ff 	mov.w	r4, #4294967295
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	20000338 	.word	0x20000338

08007f94 <_malloc_r>:
 8007f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f98:	1ccd      	adds	r5, r1, #3
 8007f9a:	f025 0503 	bic.w	r5, r5, #3
 8007f9e:	3508      	adds	r5, #8
 8007fa0:	2d0c      	cmp	r5, #12
 8007fa2:	bf38      	it	cc
 8007fa4:	250c      	movcc	r5, #12
 8007fa6:	2d00      	cmp	r5, #0
 8007fa8:	4607      	mov	r7, r0
 8007faa:	db01      	blt.n	8007fb0 <_malloc_r+0x1c>
 8007fac:	42a9      	cmp	r1, r5
 8007fae:	d905      	bls.n	8007fbc <_malloc_r+0x28>
 8007fb0:	230c      	movs	r3, #12
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	2600      	movs	r6, #0
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fbc:	4e2e      	ldr	r6, [pc, #184]	; (8008078 <_malloc_r+0xe4>)
 8007fbe:	f000 f89d 	bl	80080fc <__malloc_lock>
 8007fc2:	6833      	ldr	r3, [r6, #0]
 8007fc4:	461c      	mov	r4, r3
 8007fc6:	bb34      	cbnz	r4, 8008016 <_malloc_r+0x82>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4638      	mov	r0, r7
 8007fcc:	f7ff ffc2 	bl	8007f54 <sbrk_aligned>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	d14d      	bne.n	8008072 <_malloc_r+0xde>
 8007fd6:	6834      	ldr	r4, [r6, #0]
 8007fd8:	4626      	mov	r6, r4
 8007fda:	2e00      	cmp	r6, #0
 8007fdc:	d140      	bne.n	8008060 <_malloc_r+0xcc>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	eb04 0803 	add.w	r8, r4, r3
 8007fe8:	f000 f878 	bl	80080dc <_sbrk_r>
 8007fec:	4580      	cmp	r8, r0
 8007fee:	d13a      	bne.n	8008066 <_malloc_r+0xd2>
 8007ff0:	6821      	ldr	r1, [r4, #0]
 8007ff2:	3503      	adds	r5, #3
 8007ff4:	1a6d      	subs	r5, r5, r1
 8007ff6:	f025 0503 	bic.w	r5, r5, #3
 8007ffa:	3508      	adds	r5, #8
 8007ffc:	2d0c      	cmp	r5, #12
 8007ffe:	bf38      	it	cc
 8008000:	250c      	movcc	r5, #12
 8008002:	4629      	mov	r1, r5
 8008004:	4638      	mov	r0, r7
 8008006:	f7ff ffa5 	bl	8007f54 <sbrk_aligned>
 800800a:	3001      	adds	r0, #1
 800800c:	d02b      	beq.n	8008066 <_malloc_r+0xd2>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	442b      	add	r3, r5
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	e00e      	b.n	8008034 <_malloc_r+0xa0>
 8008016:	6822      	ldr	r2, [r4, #0]
 8008018:	1b52      	subs	r2, r2, r5
 800801a:	d41e      	bmi.n	800805a <_malloc_r+0xc6>
 800801c:	2a0b      	cmp	r2, #11
 800801e:	d916      	bls.n	800804e <_malloc_r+0xba>
 8008020:	1961      	adds	r1, r4, r5
 8008022:	42a3      	cmp	r3, r4
 8008024:	6025      	str	r5, [r4, #0]
 8008026:	bf18      	it	ne
 8008028:	6059      	strne	r1, [r3, #4]
 800802a:	6863      	ldr	r3, [r4, #4]
 800802c:	bf08      	it	eq
 800802e:	6031      	streq	r1, [r6, #0]
 8008030:	5162      	str	r2, [r4, r5]
 8008032:	604b      	str	r3, [r1, #4]
 8008034:	4638      	mov	r0, r7
 8008036:	f104 060b 	add.w	r6, r4, #11
 800803a:	f000 f865 	bl	8008108 <__malloc_unlock>
 800803e:	f026 0607 	bic.w	r6, r6, #7
 8008042:	1d23      	adds	r3, r4, #4
 8008044:	1af2      	subs	r2, r6, r3
 8008046:	d0b6      	beq.n	8007fb6 <_malloc_r+0x22>
 8008048:	1b9b      	subs	r3, r3, r6
 800804a:	50a3      	str	r3, [r4, r2]
 800804c:	e7b3      	b.n	8007fb6 <_malloc_r+0x22>
 800804e:	6862      	ldr	r2, [r4, #4]
 8008050:	42a3      	cmp	r3, r4
 8008052:	bf0c      	ite	eq
 8008054:	6032      	streq	r2, [r6, #0]
 8008056:	605a      	strne	r2, [r3, #4]
 8008058:	e7ec      	b.n	8008034 <_malloc_r+0xa0>
 800805a:	4623      	mov	r3, r4
 800805c:	6864      	ldr	r4, [r4, #4]
 800805e:	e7b2      	b.n	8007fc6 <_malloc_r+0x32>
 8008060:	4634      	mov	r4, r6
 8008062:	6876      	ldr	r6, [r6, #4]
 8008064:	e7b9      	b.n	8007fda <_malloc_r+0x46>
 8008066:	230c      	movs	r3, #12
 8008068:	603b      	str	r3, [r7, #0]
 800806a:	4638      	mov	r0, r7
 800806c:	f000 f84c 	bl	8008108 <__malloc_unlock>
 8008070:	e7a1      	b.n	8007fb6 <_malloc_r+0x22>
 8008072:	6025      	str	r5, [r4, #0]
 8008074:	e7de      	b.n	8008034 <_malloc_r+0xa0>
 8008076:	bf00      	nop
 8008078:	20000334 	.word	0x20000334

0800807c <_realloc_r>:
 800807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008080:	4680      	mov	r8, r0
 8008082:	4614      	mov	r4, r2
 8008084:	460e      	mov	r6, r1
 8008086:	b921      	cbnz	r1, 8008092 <_realloc_r+0x16>
 8008088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800808c:	4611      	mov	r1, r2
 800808e:	f7ff bf81 	b.w	8007f94 <_malloc_r>
 8008092:	b92a      	cbnz	r2, 80080a0 <_realloc_r+0x24>
 8008094:	f7ff ff12 	bl	8007ebc <_free_r>
 8008098:	4625      	mov	r5, r4
 800809a:	4628      	mov	r0, r5
 800809c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a0:	f000 f838 	bl	8008114 <_malloc_usable_size_r>
 80080a4:	4284      	cmp	r4, r0
 80080a6:	4607      	mov	r7, r0
 80080a8:	d802      	bhi.n	80080b0 <_realloc_r+0x34>
 80080aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080ae:	d812      	bhi.n	80080d6 <_realloc_r+0x5a>
 80080b0:	4621      	mov	r1, r4
 80080b2:	4640      	mov	r0, r8
 80080b4:	f7ff ff6e 	bl	8007f94 <_malloc_r>
 80080b8:	4605      	mov	r5, r0
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d0ed      	beq.n	800809a <_realloc_r+0x1e>
 80080be:	42bc      	cmp	r4, r7
 80080c0:	4622      	mov	r2, r4
 80080c2:	4631      	mov	r1, r6
 80080c4:	bf28      	it	cs
 80080c6:	463a      	movcs	r2, r7
 80080c8:	f7ff fed0 	bl	8007e6c <memcpy>
 80080cc:	4631      	mov	r1, r6
 80080ce:	4640      	mov	r0, r8
 80080d0:	f7ff fef4 	bl	8007ebc <_free_r>
 80080d4:	e7e1      	b.n	800809a <_realloc_r+0x1e>
 80080d6:	4635      	mov	r5, r6
 80080d8:	e7df      	b.n	800809a <_realloc_r+0x1e>
	...

080080dc <_sbrk_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4d06      	ldr	r5, [pc, #24]	; (80080f8 <_sbrk_r+0x1c>)
 80080e0:	2300      	movs	r3, #0
 80080e2:	4604      	mov	r4, r0
 80080e4:	4608      	mov	r0, r1
 80080e6:	602b      	str	r3, [r5, #0]
 80080e8:	f7f9 fa5c 	bl	80015a4 <_sbrk>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	d102      	bne.n	80080f6 <_sbrk_r+0x1a>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	b103      	cbz	r3, 80080f6 <_sbrk_r+0x1a>
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	bd38      	pop	{r3, r4, r5, pc}
 80080f8:	2000032c 	.word	0x2000032c

080080fc <__malloc_lock>:
 80080fc:	4801      	ldr	r0, [pc, #4]	; (8008104 <__malloc_lock+0x8>)
 80080fe:	f7ff beb3 	b.w	8007e68 <__retarget_lock_acquire_recursive>
 8008102:	bf00      	nop
 8008104:	20000330 	.word	0x20000330

08008108 <__malloc_unlock>:
 8008108:	4801      	ldr	r0, [pc, #4]	; (8008110 <__malloc_unlock+0x8>)
 800810a:	f7ff beae 	b.w	8007e6a <__retarget_lock_release_recursive>
 800810e:	bf00      	nop
 8008110:	20000330 	.word	0x20000330

08008114 <_malloc_usable_size_r>:
 8008114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008118:	1f18      	subs	r0, r3, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	bfbc      	itt	lt
 800811e:	580b      	ldrlt	r3, [r1, r0]
 8008120:	18c0      	addlt	r0, r0, r3
 8008122:	4770      	bx	lr

08008124 <_init>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	bf00      	nop
 8008128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812a:	bc08      	pop	{r3}
 800812c:	469e      	mov	lr, r3
 800812e:	4770      	bx	lr

08008130 <_fini>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr
