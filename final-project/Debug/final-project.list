
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .systemConfig 00000004  0807e800  0807e800  0002e800  2**0
                  ALLOC, READONLY
  2 .text         0000e028  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001058  0800e1c8  0800e1c8  0001e1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f220  0800f220  000203a8  2**0
                  CONTENTS
  5 .ARM          00000008  0800f220  0800f220  0001f220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800f228  0800f228  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800f228  0800f228  0001f228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800f22c  0800f22c  0001f22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000003a8  20000000  0800f230  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000009d8  200003a8  0800f5d8  000203a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d80  0800f5d8  00020d80  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d56e  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005276  00000000  00000000  0003d946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  00042bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001788  00000000  00000000  000445c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d982  00000000  00000000  00045d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000270be  00000000  00000000  000636d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c628  00000000  00000000  0008a790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00126db8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f04  00000000  00000000  00126e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a8 	.word	0x200003a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e1b0 	.word	0x0800e1b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003ac 	.word	0x200003ac
 80001dc:	0800e1b0 	.word	0x0800e1b0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f009 fa2b 	bl	800a368 <memset>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	cbuffer->buffer[cbuffer->write] = data;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	7992      	ldrb	r2, [r2, #6]
 8000f2e:	4413      	add	r3, r2
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b25a      	sxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	757b      	strb	r3, [r7, #21]
	uint8_t length;
	uint8_t read = cbuffer->read;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	795b      	ldrb	r3, [r3, #5]
 8000f7c:	74bb      	strb	r3, [r7, #18]
	uint8_t ch;
	length = cBuffer_Length(cbuffer);
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f89a 	bl	80010b8 <cBuffer_Length>
 8000f84:	4603      	mov	r3, r0
 8000f86:	753b      	strb	r3, [r7, #20]

	for (i=0; i < length;i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
 8000f8c:	e012      	b.n	8000fb4 <cBuffer_GetString+0x54>
	{
		err = cBuffer_Peek(cbuffer, &ch, &read);
 8000f8e:	f107 0212 	add.w	r2, r7, #18
 8000f92:	f107 0311 	add.w	r3, r7, #17
 8000f96:	4619      	mov	r1, r3
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f863 	bl	8001064 <cBuffer_Peek>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	757b      	strb	r3, [r7, #21]

		if (ch == '\r') // A string is found - copy it to the outgoing buffer
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	2b0d      	cmp	r3, #13
 8000fa6:	d102      	bne.n	8000fae <cBuffer_GetString+0x4e>
		{
			found = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75bb      	strb	r3, [r7, #22]
			break;
 8000fac:	e006      	b.n	8000fbc <cBuffer_GetString+0x5c>
	for (i=0; i < length;i++)
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	7d3b      	ldrb	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3e8      	bcc.n	8000f8e <cBuffer_GetString+0x2e>
		}
	}
	if (found)
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d020      	beq.n	8001004 <cBuffer_GetString+0xa4>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, read);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	7cba      	ldrb	r2, [r7, #18]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f88d 	bl	80010ea <cBuffer_LengthCustom>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000fd8:	f107 0313 	add.w	r3, r7, #19
 8000fdc:	4619      	mov	r1, r3
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f817 	bl	8001012 <cBuffer_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	757b      	strb	r3, [r7, #21]
			*string = chr;
 8000fe8:	7cfa      	ldrb	r2, [r7, #19]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	701a      	strb	r2, [r3, #0]
			string++;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
		} while (chr != sTerminator || err != CBUFFER_OK);
 8000ff4:	7cfb      	ldrb	r3, [r7, #19]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d1ed      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8000ffc:	7d7b      	ldrb	r3, [r7, #21]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1ea      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8001002:	e001      	b.n	8001008 <cBuffer_GetString+0xa8>
	}
	else
		err = CBUFFER_NO_STRING;
 8001004:	2303      	movs	r3, #3
 8001006:	757b      	strb	r3, [r7, #21]


	return err;
 8001008:	7d7b      	ldrb	r3, [r7, #21]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f84b 	bl	80010b8 <cBuffer_Length>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8001028:	2302      	movs	r3, #2
 800102a:	e017      	b.n	800105c <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	7952      	ldrb	r2, [r2, #5]
 8001034:	4413      	add	r3, r2
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	3301      	adds	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b25a      	sxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4013      	ands	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <cBuffer_Peek>:

CBUFFER_ERR cBuffer_Peek(cBuffer_t* cbuffer,uint8_t* data, uint8_t*read)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (cBuffer_Length(cbuffer) == 0)
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f821 	bl	80010b8 <cBuffer_Length>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <cBuffer_Peek+0x1c>
	{
		return CBUFFER_EMPTY;
 800107c:	2302      	movs	r3, #2
 800107e:	e017      	b.n	80010b0 <cBuffer_Peek+0x4c>
	}
	*data = cbuffer->buffer[*read];
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	701a      	strb	r2, [r3, #0]
	*read = ((*read)+1) & (cbuffer->size-1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25a      	sxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
	return CBUFFER_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	799a      	ldrb	r2, [r3, #6]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3

}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
 80010f6:	4613      	mov	r3, r2
 80010f8:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b25a      	sxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 800112a:	2120      	movs	r1, #32
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f009 ff0e 	bl	800af4e <strchr>
 8001132:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0 || cmdEnd-buffer != strlen(name))
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d009      	beq.n	800114e <ConsoleCommandMatch+0x2e>
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	461c      	mov	r4, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff f856 	bl	80001f4 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	429c      	cmp	r4, r3
 800114c:	d00b      	beq.n	8001166 <ConsoleCommandMatch+0x46>
	{
			r =  strcmp(name,buffer) == 0;
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f845 	bl	80001e0 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e00f      	b.n	8001186 <ConsoleCommandMatch+0x66>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff f844 	bl	80001f4 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f009 ff00 	bl	800af78 <strncmp>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	60fb      	str	r3, [r7, #12]

	}

	return r;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}

08001190 <ConsoleInit>:


// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001196:	f001 f91b 	bl	80023d0 <ConsoleIoInit>
	ConsoleIoSendString("Dodeca Timer - A Thousand Projects");
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <ConsoleInit+0x44>)
 800119c:	f001 f950 	bl	8002440 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <ConsoleInit+0x48>)
 80011a2:	f001 f94d 	bl	8002440 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <ConsoleInit+0x4c>)
 80011a8:	f001 f94a 	bl	8002440 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	e007      	b.n	80011c2 <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <ConsoleInit+0x50>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3301      	adds	r3, #1
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b63      	cmp	r3, #99	; 0x63
 80011c6:	d9f4      	bls.n	80011b2 <ConsoleInit+0x22>
	}

}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800e1c8 	.word	0x0800e1c8
 80011d8:	0800e1ec 	.word	0x0800e1ec
 80011dc:	0800e1f0 	.word	0x0800e1f0
 80011e0:	200003c4 	.word	0x200003c4

080011e4 <ConsolePrintPrompt>:

void ConsolePrintPrompt()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	ConsoleIoSendString(STR_ENDLINE);
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ConsolePrintPrompt+0x14>)
 80011ea:	f001 f929 	bl	8002440 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <ConsolePrintPrompt+0x18>)
 80011f0:	f001 f926 	bl	8002440 <ConsoleIoSendString>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800e1ec 	.word	0x0800e1ec
 80011fc:	0800e1f0 	.word	0x0800e1f0

08001200 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;
	eConsoleError consoleResult;

	consoleResult = ConsoleIoReceive(mReceiveBuffer);
 8001206:	4845      	ldr	r0, [pc, #276]	; (800131c <ConsoleProcess+0x11c>)
 8001208:	f001 f8fa 	bl	8002400 <ConsoleIoReceive>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]

	switch (consoleResult)
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d07d      	beq.n	8001312 <ConsoleProcess+0x112>
 8001216:	2b03      	cmp	r3, #3
 8001218:	dc7c      	bgt.n	8001314 <ConsoleProcess+0x114>
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <ConsoleProcess+0x28>
 800121e:	2b00      	cmp	r3, #0
 8001220:	db78      	blt.n	8001314 <ConsoleProcess+0x114>
 8001222:	3b01      	subs	r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	e075      	b.n	8001314 <ConsoleProcess+0x114>
	{
		case CONSOLE_ERROR:
		case CONSOLE_NO_STRING:
			break;
		case CONSOLE_SUCCESS:
			if ('\0' == mReceiveBuffer[0] )
 8001228:	4b3c      	ldr	r3, [pc, #240]	; (800131c <ConsoleProcess+0x11c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <ConsoleProcess+0x3e>
			{
				ConsoleIoSendString(STR_ENDLINE);
 8001230:	483b      	ldr	r0, [pc, #236]	; (8001320 <ConsoleProcess+0x120>)
 8001232:	f001 f905 	bl	8002440 <ConsoleIoSendString>
				ConsoleIoSendString(CONSOLE_PROMPT);
 8001236:	483b      	ldr	r0, [pc, #236]	; (8001324 <ConsoleProcess+0x124>)
 8001238:	f001 f902 	bl	8002440 <ConsoleIoSendString>
				return;
 800123c:	e06a      	b.n	8001314 <ConsoleProcess+0x114>
			}
			commandTable = ConsoleCommandsGetTable();
 800123e:	f001 f89f 	bl	8002380 <ConsoleCommandsGetTable>
 8001242:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	613b      	str	r3, [r7, #16]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800124e:	e040      	b.n	80012d2 <ConsoleProcess+0xd2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	461a      	mov	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4413      	add	r3, r2
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	492e      	ldr	r1, [pc, #184]	; (800131c <ConsoleProcess+0x11c>)
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5b 	bl	8001120 <ConsoleCommandMatch>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02d      	beq.n	80012cc <ConsoleProcess+0xcc>
				{
					result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	461a      	mov	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4413      	add	r3, r2
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4826      	ldr	r0, [pc, #152]	; (800131c <ConsoleProcess+0x11c>)
 8001284:	4798      	blx	r3
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01a      	beq.n	80012c6 <ConsoleProcess+0xc6>
					{
						ConsoleIoSendString("Error: ");
 8001290:	4825      	ldr	r0, [pc, #148]	; (8001328 <ConsoleProcess+0x128>)
 8001292:	f001 f8d5 	bl	8002440 <ConsoleIoSendString>
						ConsoleIoSendString((char*)mReceiveBuffer);
 8001296:	4821      	ldr	r0, [pc, #132]	; (800131c <ConsoleProcess+0x11c>)
 8001298:	f001 f8d2 	bl	8002440 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 800129c:	4820      	ldr	r0, [pc, #128]	; (8001320 <ConsoleProcess+0x120>)
 800129e:	f001 f8cf 	bl	8002440 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80012a2:	4822      	ldr	r0, [pc, #136]	; (800132c <ConsoleProcess+0x12c>)
 80012a4:	f001 f8cc 	bl	8002440 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	461a      	mov	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4413      	add	r3, r2
 80012b8:	3308      	adds	r3, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 f8c0 	bl	8002440 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80012c0:	4817      	ldr	r0, [pc, #92]	; (8001320 <ConsoleProcess+0x120>)
 80012c2:	f001 f8bd 	bl	8002440 <ConsoleIoSendString>
					}
					found = cmdIndex;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	e002      	b.n	80012d2 <ConsoleProcess+0xd2>
				}
				else
				{
					cmdIndex++;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	461a      	mov	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4413      	add	r3, r2
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <ConsoleProcess+0xf0>
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ee:	d0af      	beq.n	8001250 <ConsoleProcess+0x50>
				}
			}
			if (found == NOT_FOUND)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f6:	d105      	bne.n	8001304 <ConsoleProcess+0x104>
			{
				ConsoleIoSendString("Command not found: ");
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <ConsoleProcess+0x130>)
 80012fa:	f001 f8a1 	bl	8002440 <ConsoleIoSendString>
				ConsoleIoSendString((char*)mReceiveBuffer);
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <ConsoleProcess+0x11c>)
 8001300:	f001 f89e 	bl	8002440 <ConsoleIoSendString>

			}
			ConsoleIoSendString(STR_ENDLINE);
 8001304:	4806      	ldr	r0, [pc, #24]	; (8001320 <ConsoleProcess+0x120>)
 8001306:	f001 f89b 	bl	8002440 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <ConsoleProcess+0x124>)
 800130c:	f001 f898 	bl	8002440 <ConsoleIoSendString>

			break;
 8001310:	e000      	b.n	8001314 <ConsoleProcess+0x114>
		case CONSOLE_BUFFER_FULL:

		break;
 8001312:	bf00      	nop
	}

}
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200003c4 	.word	0x200003c4
 8001320:	0800e1ec 	.word	0x0800e1ec
 8001324:	0800e1f0 	.word	0x0800e1f0
 8001328:	0800e1f4 	.word	0x0800e1f4
 800132c:	0800e1fc 	.word	0x0800e1fc
 8001330:	0800e204 	.word	0x0800e204

08001334 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	460b      	mov	r3, r1
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800134e:	e00b      	b.n	8001368 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b20      	cmp	r3, #32
 800135a:	d102      	bne.n	8001362 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	3301      	adds	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001368:	7afb      	ldrb	r3, [r7, #11]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	429a      	cmp	r2, r3
 800136e:	d002      	beq.n	8001376 <ConsoleParamFindN+0x42>
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b63      	cmp	r3, #99	; 0x63
 8001374:	d9ec      	bls.n	8001350 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	2b64      	cmp	r3, #100	; 0x64
 800137a:	d102      	bne.n	8001382 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 800137c:	2310      	movs	r3, #16
 800137e:	75fb      	strb	r3, [r7, #23]
 8001380:	e002      	b.n	8001388 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	601a      	str	r2, [r3, #0]
	}
	return result;
 8001388:	7dfb      	ldrb	r3, [r7, #23]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <ConsoleReceiveParamString>:

// Assume the string is the last parameter and the the end is a null
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char* string, uint32_t maxLen)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	460b      	mov	r3, r1
 80013a4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
	eCommandResult_T result;
	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80013aa:	f107 0210 	add.w	r2, r7, #16
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff ffbe 	bl	8001334 <ConsoleParamFindN>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <ConsoleReceiveParamString+0x30>
		return result;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	e013      	b.n	80013ee <ConsoleReceiveParamString+0x58>



	// Check the length of the string
	if (strlen(&buffer[startIndex]) > maxLen)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7fe ff11 	bl	80001f4 <strlen>
 80013d2:	4602      	mov	r2, r0
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d201      	bcs.n	80013de <ConsoleReceiveParamString+0x48>
	{
		return COMMAND_ERROR;
 80013da:	23ff      	movs	r3, #255	; 0xff
 80013dc:	e007      	b.n	80013ee <ConsoleReceiveParamString+0x58>
	}

	// set the end of the string to a NULL for string termination
	strcpy(string,&buffer[startIndex]);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f009 fdbe 	bl	800af68 <strcpy>

	return COMMAND_SUCCESS;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b08a      	sub	sp, #40	; 0x28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	460b      	mov	r3, r1
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8001408:	f107 021c 	add.w	r2, r7, #28
 800140c:	7afb      	ldrb	r3, [r7, #11]
 800140e:	4619      	mov	r1, r3
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7ff ff8f 	bl	8001334 <ConsoleParamFindN>
 8001416:	4603      	mov	r3, r0
 8001418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	4413      	add	r3, r2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 8001430:	e011      	b.n	8001456 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8001432:	f107 0214 	add.w	r2, r7, #20
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	4413      	add	r3, r2
 800143a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800143e:	701a      	strb	r2, [r3, #0]
		i++;
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	3301      	adds	r3, #1
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	4413      	add	r3, r2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 8001456:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 800145e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001462:	2b20      	cmp	r3, #32
 8001464:	d002      	beq.n	800146c <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	2b07      	cmp	r3, #7
 800146a:	d9e2      	bls.n	8001432 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	2b08      	cmp	r3, #8
 8001470:	d102      	bne.n	8001478 <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001472:	2310      	movs	r3, #16
 8001474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8001478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11a      	bne.n	80014b6 <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8001480:	f107 0214 	add.w	r2, r7, #20
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	4413      	add	r3, r2
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4618      	mov	r0, r3
 8001492:	f001 fe95 	bl	80031c0 <isNumber>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 ff23 	bl	800a2ec <atoi>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	801a      	strh	r2, [r3, #0]
 80014ae:	e002      	b.n	80014b6 <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 80014b0:	2310      	movs	r3, #16
 80014b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	return result;
 80014b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 ffb8 	bl	8002440 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 ffab 	bl	8002440 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80014ea:	4804      	ldr	r0, [pc, #16]	; (80014fc <ConsoleSendLine+0x20>)
 80014ec:	f000 ffa8 	bl	8002440 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	0800e1ec 	.word	0x0800e1ec

08001500 <displayTask>:
	CONSOLE_COMMAND_TABLE_END // must be LAST
};


static void displayTask(uint8_t id)
{
 8001500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001502:	b0a7      	sub	sp, #156	; 0x9c
 8001504:	af04      	add	r7, sp, #16
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	char msg[120];
	taskItem_t *task = taskGet(id);
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 ff37 	bl	8004380 <taskGet>
 8001512:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	colour_t *colour = colourFindByCode(task->colour);
 8001516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 ffa5 	bl	800246c <colourFindByCode>
 8001522:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	sprintf(msg,"Task: %d - %s\n\tColour: %s %#08x\n\tDefault Min Time: %i\n\tDefault Max Time: %i\n",id,task->name,colour->name,(unsigned int)task->colour,task->defaultMinTime,task->defaultMaxTime);
 8001526:	79fc      	ldrb	r4, [r7, #7]
 8001528:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800152c:	1c5d      	adds	r5, r3, #1
 800152e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001532:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001536:	6a12      	ldr	r2, [r2, #32]
 8001538:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800153c:	8c89      	ldrh	r1, [r1, #36]	; 0x24
 800153e:	460e      	mov	r6, r1
 8001540:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001544:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 8001546:	f107 0008 	add.w	r0, r7, #8
 800154a:	9103      	str	r1, [sp, #12]
 800154c:	9602      	str	r6, [sp, #8]
 800154e:	9201      	str	r2, [sp, #4]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	462b      	mov	r3, r5
 8001554:	4622      	mov	r2, r4
 8001556:	4906      	ldr	r1, [pc, #24]	; (8001570 <displayTask+0x70>)
 8001558:	f009 fc68 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ffbb 	bl	80014dc <ConsoleSendLine>
}
 8001566:	bf00      	nop
 8001568:	378c      	adds	r7, #140	; 0x8c
 800156a:	46bd      	mov	sp, r7
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	bf00      	nop
 8001570:	0800e298 	.word	0x0800e298

08001574 <displayDodeca>:

static void displayDodeca(uint8_t id)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b0ad      	sub	sp, #180	; 0xb4
 8001578:	af04      	add	r7, sp, #16
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	char msg[120];
	char statename[20];
	dodecaItem_t *dodeca = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	taskItem_t *task;
	dodeca = dodecaGet(id);
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 ffa4 	bl	80024d4 <dodecaGet>
 800158c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	task = taskGet(dodeca->taskId);
 8001590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 fef2 	bl	8004380 <taskGet>
 800159c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	dodecaGetStateName(dodeca->state,statename);
 80015a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	f107 020c 	add.w	r2, r7, #12
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 ffd7 	bl	8002560 <dodecaGetStateName>
	sprintf(msg,"Dodeca: %i - %s\n\t \n\tState: %s\n\tMin Time: %d\n\tMax Time: %d",id,task->name,statename,dodeca->minTimeMins,dodeca->maxTimeMins);
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015b8:	1c59      	adds	r1, r3, #1
 80015ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015be:	7f1b      	ldrb	r3, [r3, #28]
 80015c0:	461c      	mov	r4, r3
 80015c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015c6:	7f5b      	ldrb	r3, [r3, #29]
 80015c8:	f107 0020 	add.w	r0, r7, #32
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	9401      	str	r4, [sp, #4]
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	460b      	mov	r3, r1
 80015d8:	4905      	ldr	r1, [pc, #20]	; (80015f0 <displayDodeca+0x7c>)
 80015da:	f009 fc27 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff7a 	bl	80014dc <ConsoleSendLine>
}
 80015e8:	bf00      	nop
 80015ea:	37a4      	adds	r7, #164	; 0xa4
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	0800e2e8 	.word	0x0800e2e8

080015f4 <ConsoleCommandDodecaSet>:

static eCommandResult_T ConsoleCommandDodecaSet(const char buffer[])
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0aa      	sub	sp, #168	; 0xa8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	taskItem_t *task;
	char msg[50];

		// get the command
		uint32_t cmdIndex;
		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &cmdIndex))
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	461a      	mov	r2, r3
 8001602:	2101      	movs	r1, #1
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fe95 	bl	8001334 <ConsoleParamFindN>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <ConsoleCommandDodecaSet+0x26>
		{
			ConsoleSendLine("Please supply a command");
 8001610:	485a      	ldr	r0, [pc, #360]	; (800177c <ConsoleCommandDodecaSet+0x188>)
 8001612:	f7ff ff63 	bl	80014dc <ConsoleSendLine>
			return COMMAND_PARAMETER_ERROR;
 8001616:	2310      	movs	r3, #16
 8001618:	e0ab      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
		}

		MPU6050ReadStable(&data);
 800161a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800161e:	4618      	mov	r0, r3
 8001620:	f001 f9d8 	bl	80029d4 <MPU6050ReadStable>
		dodecaId = detectFace(data.KalmanAngleX, data.KalmanAngleY);
 8001624:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001628:	ed97 6b24 	vldr	d6, [r7, #144]	; 0x90
 800162c:	eeb0 1a46 	vmov.f32	s2, s12
 8001630:	eef0 1a66 	vmov.f32	s3, s13
 8001634:	eeb0 0a47 	vmov.f32	s0, s14
 8001638:	eef0 0a67 	vmov.f32	s1, s15
 800163c:	f001 febe 	bl	80033bc <detectFace>
 8001640:	4603      	mov	r3, r0
 8001642:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6


		if (dodecaId< 0)
 8001646:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800164a:	2b00      	cmp	r3, #0
 800164c:	da04      	bge.n	8001658 <ConsoleCommandDodecaSet+0x64>
		{
			ConsoleSendLine("Face not detected");
 800164e:	484c      	ldr	r0, [pc, #304]	; (8001780 <ConsoleCommandDodecaSet+0x18c>)
 8001650:	f7ff ff44 	bl	80014dc <ConsoleSendLine>
			return COMMAND_ERROR;
 8001654:	23ff      	movs	r3, #255	; 0xff
 8001656:	e08c      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
		}
		sprintf(msg,"Detected face: %i",dodecaId);
 8001658:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4948      	ldr	r1, [pc, #288]	; (8001784 <ConsoleCommandDodecaSet+0x190>)
 8001662:	4618      	mov	r0, r3
 8001664:	f009 fbe2 	bl	800ae2c <siprintf>
		ConsoleSendLine(msg);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff35 	bl	80014dc <ConsoleSendLine>

		dodeca = dodecaGet(dodecaId);
 8001672:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f000 ff2b 	bl	80024d4 <dodecaGet>
 800167e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

		switch (buffer[cmdIndex])
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b74      	cmp	r3, #116	; 0x74
 800168c:	d006      	beq.n	800169c <ConsoleCommandDodecaSet+0xa8>
 800168e:	2b74      	cmp	r3, #116	; 0x74
 8001690:	dc68      	bgt.n	8001764 <ConsoleCommandDodecaSet+0x170>
 8001692:	2b69      	cmp	r3, #105	; 0x69
 8001694:	d04f      	beq.n	8001736 <ConsoleCommandDodecaSet+0x142>
 8001696:	2b6d      	cmp	r3, #109	; 0x6d
 8001698:	d036      	beq.n	8001708 <ConsoleCommandDodecaSet+0x114>
 800169a:	e063      	b.n	8001764 <ConsoleCommandDodecaSet+0x170>
		{
		case 't' :
				// Sets a task to the dodeca current facing up
				if (DODECA_STATE_ACTIVE == dodeca->state)
 800169c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d104      	bne.n	80016b0 <ConsoleCommandDodecaSet+0xbc>
				{
					ConsoleSendLine("Cannot change an Active Task");
 80016a6:	4838      	ldr	r0, [pc, #224]	; (8001788 <ConsoleCommandDodecaSet+0x194>)
 80016a8:	f7ff ff18 	bl	80014dc <ConsoleSendLine>
					return COMMAND_SUCCESS;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e060      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
				}


				// Set the Task Id
				if (COMMAND_SUCCESS != ConsoleReceiveParamInt16(buffer, 2, &value))
 80016b0:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 80016b4:	461a      	mov	r2, r3
 80016b6:	2102      	movs	r1, #2
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fe9c 	bl	80013f6 <ConsoleReceiveParamInt16>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <ConsoleCommandDodecaSet+0xd4>
				{
					return COMMAND_PARAMETER_ERROR;
 80016c4:	2310      	movs	r3, #16
 80016c6:	e054      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
				}

				if (value > TASK_COUNT_MAX)
 80016c8:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80016cc:	2b14      	cmp	r3, #20
 80016ce:	dd04      	ble.n	80016da <ConsoleCommandDodecaSet+0xe6>
				{
					ConsoleSendLine("Invalid Task Id");
 80016d0:	482e      	ldr	r0, [pc, #184]	; (800178c <ConsoleCommandDodecaSet+0x198>)
 80016d2:	f7ff ff03 	bl	80014dc <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 80016d6:	2310      	movs	r3, #16
 80016d8:	e04b      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
				}

				task = taskGet(value);
 80016da:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fe4d 	bl	8004380 <taskGet>
 80016e6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

				dodecaInitItem(dodecaId,task->defaultMinTime,task->defaultMaxTime,value);
 80016ea:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80016ee:	b2d8      	uxtb	r0, r3
 80016f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016f4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80016f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016fa:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80016fc:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f000 ff01 	bl	8002508 <dodecaInitItem>
			break;
 8001706:	e02d      	b.n	8001764 <ConsoleCommandDodecaSet+0x170>

		case 'm':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001708:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 800170c:	461a      	mov	r2, r3
 800170e:	2102      	movs	r1, #2
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fe70 	bl	80013f6 <ConsoleReceiveParamInt16>
				if (value <0)
 8001716:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800171a:	2b00      	cmp	r3, #0
 800171c:	da04      	bge.n	8001728 <ConsoleCommandDodecaSet+0x134>
				{
					ConsoleSendLine("Invalid Max time");
 800171e:	481c      	ldr	r0, [pc, #112]	; (8001790 <ConsoleCommandDodecaSet+0x19c>)
 8001720:	f7ff fedc 	bl	80014dc <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8001724:	2310      	movs	r3, #16
 8001726:	e024      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
				}
				dodeca->maxTimeMins = value;
 8001728:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800172c:	b2da      	uxtb	r2, r3
 800172e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001732:	775a      	strb	r2, [r3, #29]
			break;
 8001734:	e016      	b.n	8001764 <ConsoleCommandDodecaSet+0x170>
		case 'i':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001736:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 800173a:	461a      	mov	r2, r3
 800173c:	2102      	movs	r1, #2
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fe59 	bl	80013f6 <ConsoleReceiveParamInt16>
				if (value <0)
 8001744:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8001748:	2b00      	cmp	r3, #0
 800174a:	da04      	bge.n	8001756 <ConsoleCommandDodecaSet+0x162>
				{
					ConsoleSendLine("Invalid Min time");
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <ConsoleCommandDodecaSet+0x1a0>)
 800174e:	f7ff fec5 	bl	80014dc <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8001752:	2310      	movs	r3, #16
 8001754:	e00d      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
				}
				dodeca->minTimeMins = value;
 8001756:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800175a:	b2da      	uxtb	r2, r3
 800175c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001760:	771a      	strb	r2, [r3, #28]
			break;
 8001762:	bf00      	nop
		}
		// Show the current face info
		displayDodeca(dodecaId);
 8001764:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff02 	bl	8001574 <displayDodeca>
		return COMMAND_SUCCESS;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	37a8      	adds	r7, #168	; 0xa8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	0800e324 	.word	0x0800e324
 8001780:	0800e33c 	.word	0x0800e33c
 8001784:	0800e350 	.word	0x0800e350
 8001788:	0800e364 	.word	0x0800e364
 800178c:	0800e384 	.word	0x0800e384
 8001790:	0800e394 	.word	0x0800e394
 8001794:	0800e3a8 	.word	0x0800e3a8

08001798 <ConsoleCommandDodecaQuery>:

static eCommandResult_T ConsoleCommandDodecaQuery(const char buffer[])
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	uint32_t param1;

		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &param1))
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	461a      	mov	r2, r3
 80017a6:	2101      	movs	r1, #1
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff fdc3 	bl	8001334 <ConsoleParamFindN>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <ConsoleCommandDodecaQuery+0x38>
		{
			// List all tasks
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	75fb      	strb	r3, [r7, #23]
 80017b8:	e006      	b.n	80017c8 <ConsoleCommandDodecaQuery+0x30>
			{
				displayDodeca(f);
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fed9 	bl	8001574 <displayDodeca>
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	3301      	adds	r3, #1
 80017c6:	75fb      	strb	r3, [r7, #23]
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b0b      	cmp	r3, #11
 80017cc:	d9f5      	bls.n	80017ba <ConsoleCommandDodecaQuery+0x22>
 80017ce:	e019      	b.n	8001804 <ConsoleCommandDodecaQuery+0x6c>
			}
		}
		else
		{
			int16_t taskId;
			ConsoleReceiveParamInt16(buffer, 1, &taskId );
 80017d0:	f107 030e 	add.w	r3, r7, #14
 80017d4:	461a      	mov	r2, r3
 80017d6:	2101      	movs	r1, #1
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fe0c 	bl	80013f6 <ConsoleReceiveParamInt16>

			if (taskId < 0 || taskId > DODECA_COUNT_MAX-1)
 80017de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db03      	blt.n	80017ee <ConsoleCommandDodecaQuery+0x56>
 80017e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ea:	2b0b      	cmp	r3, #11
 80017ec:	dd04      	ble.n	80017f8 <ConsoleCommandDodecaQuery+0x60>
			{
				ConsoleSendLine("Invalid Task number");
 80017ee:	4808      	ldr	r0, [pc, #32]	; (8001810 <ConsoleCommandDodecaQuery+0x78>)
 80017f0:	f7ff fe74 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 80017f4:	2310      	movs	r3, #16
 80017f6:	e006      	b.n	8001806 <ConsoleCommandDodecaQuery+0x6e>
			}

			displayDodeca(taskId);
 80017f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff feb8 	bl	8001574 <displayDodeca>

		}
		return COMMAND_SUCCESS;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	0800e3bc 	.word	0x0800e3bc

08001814 <ConsoleCommandSaveConfig>:


static eCommandResult_T ConsoleCommandSaveConfig(const char buffer[])
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	sysConfigSave();
 800181c:	f002 fd2e 	bl	800427c <sysConfigSave>
	ConsoleSendLine("Config Saved!");
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <ConsoleCommandSaveConfig+0x1c>)
 8001822:	f7ff fe5b 	bl	80014dc <ConsoleSendLine>
	return COMMAND_SUCCESS;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	0800e3d0 	.word	0x0800e3d0

08001834 <ConsoleCommandTaskSet>:

static eCommandResult_T ConsoleCommandTaskSet(const char buffer[])
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08e      	sub	sp, #56	; 0x38
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

	// get the task Id to set
	int16_t taskId;
	char name[TASK_NAME_LENGHTH_MAX];
	if (COMMAND_SUCCESS != ConsoleReceiveParamInt16(buffer, 1, &taskId))
 800183c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8001840:	461a      	mov	r2, r3
 8001842:	2101      	movs	r1, #1
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fdd6 	bl	80013f6 <ConsoleReceiveParamInt16>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <ConsoleCommandTaskSet+0x20>
	{
		return COMMAND_PARAMETER_ERROR;
 8001850:	2310      	movs	r3, #16
 8001852:	e0a5      	b.n	80019a0 <ConsoleCommandTaskSet+0x16c>
	}

	if (taskId > TASK_COUNT_MAX)
 8001854:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001858:	2b14      	cmp	r3, #20
 800185a:	dd04      	ble.n	8001866 <ConsoleCommandTaskSet+0x32>
	{
		ConsoleSendLine("Invalid Task ID");
 800185c:	4852      	ldr	r0, [pc, #328]	; (80019a8 <ConsoleCommandTaskSet+0x174>)
 800185e:	f7ff fe3d 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001862:	2310      	movs	r3, #16
 8001864:	e09c      	b.n	80019a0 <ConsoleCommandTaskSet+0x16c>
	}

	// get the command
	uint32_t cmdIndex;
	if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 2, &cmdIndex))
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	461a      	mov	r2, r3
 800186c:	2102      	movs	r1, #2
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fd60 	bl	8001334 <ConsoleParamFindN>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <ConsoleCommandTaskSet+0x50>
	{
		ConsoleSendLine("Please supply a command");
 800187a:	484c      	ldr	r0, [pc, #304]	; (80019ac <ConsoleCommandTaskSet+0x178>)
 800187c:	f7ff fe2e 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001880:	2310      	movs	r3, #16
 8001882:	e08d      	b.n	80019a0 <ConsoleCommandTaskSet+0x16c>
	}

	taskItem_t *task;
	int16_t colour;
	int16_t minmax;
	task = taskGet(taskId);
 8001884:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fd78 	bl	8004380 <taskGet>
 8001890:	6378      	str	r0, [r7, #52]	; 0x34

	switch (buffer[cmdIndex])
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3b63      	subs	r3, #99	; 0x63
 800189c:	2b0b      	cmp	r3, #11
 800189e:	d878      	bhi.n	8001992 <ConsoleCommandTaskSet+0x15e>
 80018a0:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <ConsoleCommandTaskSet+0x74>)
 80018a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a6:	bf00      	nop
 80018a8:	08001913 	.word	0x08001913
 80018ac:	08001993 	.word	0x08001993
 80018b0:	08001993 	.word	0x08001993
 80018b4:	08001993 	.word	0x08001993
 80018b8:	08001993 	.word	0x08001993
 80018bc:	08001993 	.word	0x08001993
 80018c0:	08001967 	.word	0x08001967
 80018c4:	08001993 	.word	0x08001993
 80018c8:	08001993 	.word	0x08001993
 80018cc:	08001993 	.word	0x08001993
 80018d0:	0800193b 	.word	0x0800193b
 80018d4:	080018d9 	.word	0x080018d9
	{
	case 'n':
			// Get the task Name
			ConsoleReceiveParamString(buffer, 3, name,TASK_NAME_LENGHTH_MAX );
 80018d8:	f107 0214 	add.w	r2, r7, #20
 80018dc:	231e      	movs	r3, #30
 80018de:	2103      	movs	r1, #3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fd58 	bl	8001396 <ConsoleReceiveParamString>
			// Check Length
			if (strlen(name)< TASK_NAME_LENGHTH_MIN)
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fc82 	bl	80001f4 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d804      	bhi.n	8001900 <ConsoleCommandTaskSet+0xcc>
			{
				ConsoleSendLine("Name too short");
 80018f6:	482e      	ldr	r0, [pc, #184]	; (80019b0 <ConsoleCommandTaskSet+0x17c>)
 80018f8:	f7ff fdf0 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 80018fc:	2310      	movs	r3, #16
 80018fe:	e04f      	b.n	80019a0 <ConsoleCommandTaskSet+0x16c>
			}
			strcpy(task->name,name);
 8001900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001902:	3301      	adds	r3, #1
 8001904:	f107 0214 	add.w	r2, r7, #20
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f009 fb2c 	bl	800af68 <strcpy>
			break;
 8001910:	e03f      	b.n	8001992 <ConsoleCommandTaskSet+0x15e>
	case 'c':
			// get the colour number

			ConsoleReceiveParamInt16(buffer, 3, &colour);
 8001912:	f107 030e 	add.w	r3, r7, #14
 8001916:	461a      	mov	r2, r3
 8001918:	2103      	movs	r1, #3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fd6b 	bl	80013f6 <ConsoleReceiveParamInt16>
			if (colour > FACE_COUNT)
 8001920:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	dd04      	ble.n	8001932 <ConsoleCommandTaskSet+0xfe>
			{
				ConsoleSendLine("Invalid Colour");
 8001928:	4822      	ldr	r0, [pc, #136]	; (80019b4 <ConsoleCommandTaskSet+0x180>)
 800192a:	f7ff fdd7 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 800192e:	2310      	movs	r3, #16
 8001930:	e036      	b.n	80019a0 <ConsoleCommandTaskSet+0x16c>
			}
//			task->colour = ledColours.colour[colour].code;
			ConsoleSendString("Colour set : ");
 8001932:	4821      	ldr	r0, [pc, #132]	; (80019b8 <ConsoleCommandTaskSet+0x184>)
 8001934:	f7ff fdc5 	bl	80014c2 <ConsoleSendString>
//			ConsoleSendLine(ledColours.colour[colour].name);

		break;
 8001938:	e02b      	b.n	8001992 <ConsoleCommandTaskSet+0x15e>
	case 'm':
			ConsoleReceiveParamInt16(buffer, 3, &minmax);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	461a      	mov	r2, r3
 8001940:	2103      	movs	r1, #3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fd57 	bl	80013f6 <ConsoleReceiveParamInt16>
			if (minmax <0)
 8001948:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	da04      	bge.n	800195a <ConsoleCommandTaskSet+0x126>
			{
				ConsoleSendLine("Invalid Max time");
 8001950:	481a      	ldr	r0, [pc, #104]	; (80019bc <ConsoleCommandTaskSet+0x188>)
 8001952:	f7ff fdc3 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001956:	2310      	movs	r3, #16
 8001958:	e022      	b.n	80019a0 <ConsoleCommandTaskSet+0x16c>
			}
			task->defaultMaxTime = minmax;
 800195a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800195e:	b29a      	uxth	r2, r3
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	84da      	strh	r2, [r3, #38]	; 0x26
		break;
 8001964:	e015      	b.n	8001992 <ConsoleCommandTaskSet+0x15e>
	case 'i':
			ConsoleReceiveParamInt16(buffer, 3, &minmax);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	461a      	mov	r2, r3
 800196c:	2103      	movs	r1, #3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fd41 	bl	80013f6 <ConsoleReceiveParamInt16>
			if (minmax <0)
 8001974:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da04      	bge.n	8001986 <ConsoleCommandTaskSet+0x152>
			{
				ConsoleSendLine("Invalid Min time");
 800197c:	4810      	ldr	r0, [pc, #64]	; (80019c0 <ConsoleCommandTaskSet+0x18c>)
 800197e:	f7ff fdad 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001982:	2310      	movs	r3, #16
 8001984:	e00c      	b.n	80019a0 <ConsoleCommandTaskSet+0x16c>
			}
			task->defaultMinTime = minmax;
 8001986:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800198a:	b29a      	uxth	r2, r3
 800198c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198e:	849a      	strh	r2, [r3, #36]	; 0x24
		break;
 8001990:	bf00      	nop
	}


	// Show the current face info
	displayTask(taskId);
 8001992:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fdb1 	bl	8001500 <displayTask>
	return COMMAND_SUCCESS;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3738      	adds	r7, #56	; 0x38
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	0800e3e0 	.word	0x0800e3e0
 80019ac:	0800e324 	.word	0x0800e324
 80019b0:	0800e3f0 	.word	0x0800e3f0
 80019b4:	0800e400 	.word	0x0800e400
 80019b8:	0800e410 	.word	0x0800e410
 80019bc:	0800e394 	.word	0x0800e394
 80019c0:	0800e3a8 	.word	0x0800e3a8

080019c4 <ConsoleCommandTaskQuery>:
static eCommandResult_T ConsoleCommandTaskQuery(const char buffer[])
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	uint32_t param1;

	if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &param1))
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	461a      	mov	r2, r3
 80019d2:	2101      	movs	r1, #1
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fcad 	bl	8001334 <ConsoleParamFindN>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00d      	beq.n	80019fc <ConsoleCommandTaskQuery+0x38>
	{
		// List all tasks
		for (uint8_t f=0;f<TASK_COUNT_MAX;f++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	75fb      	strb	r3, [r7, #23]
 80019e4:	e006      	b.n	80019f4 <ConsoleCommandTaskQuery+0x30>
		{
			displayTask(f);
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fd89 	bl	8001500 <displayTask>
		for (uint8_t f=0;f<TASK_COUNT_MAX;f++)
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	3301      	adds	r3, #1
 80019f2:	75fb      	strb	r3, [r7, #23]
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b13      	cmp	r3, #19
 80019f8:	d9f5      	bls.n	80019e6 <ConsoleCommandTaskQuery+0x22>
 80019fa:	e019      	b.n	8001a30 <ConsoleCommandTaskQuery+0x6c>
		}
	}
	else
	{
		int16_t taskId;
		ConsoleReceiveParamInt16(buffer, 1, &taskId );
 80019fc:	f107 030e 	add.w	r3, r7, #14
 8001a00:	461a      	mov	r2, r3
 8001a02:	2101      	movs	r1, #1
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fcf6 	bl	80013f6 <ConsoleReceiveParamInt16>

		if (taskId < 0 || taskId > TASK_COUNT_MAX-1)
 8001a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db03      	blt.n	8001a1a <ConsoleCommandTaskQuery+0x56>
 8001a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a16:	2b13      	cmp	r3, #19
 8001a18:	dd04      	ble.n	8001a24 <ConsoleCommandTaskQuery+0x60>
		{
			ConsoleSendLine("Invalid Task number");
 8001a1a:	4808      	ldr	r0, [pc, #32]	; (8001a3c <ConsoleCommandTaskQuery+0x78>)
 8001a1c:	f7ff fd5e 	bl	80014dc <ConsoleSendLine>
			return COMMAND_PARAMETER_ERROR;
 8001a20:	2310      	movs	r3, #16
 8001a22:	e006      	b.n	8001a32 <ConsoleCommandTaskQuery+0x6e>
		}

		displayTask(taskId);
 8001a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fd68 	bl	8001500 <displayTask>

	}
	return COMMAND_SUCCESS;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	0800e3bc 	.word	0x0800e3bc

08001a40 <ConsoleCommandFaceUpQuery>:


static eCommandResult_T ConsoleCommandFaceUpQuery(const char buffer[])
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b0a5      	sub	sp, #148	; 0x94
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	6078      	str	r0, [r7, #4]

	uint8_t face;
	char msg[30];

	MPU6050_t data;
	MPU6050ReadStable(&data);
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 ffc1 	bl	80029d4 <MPU6050ReadStable>


	sprintf(msg,"Angle X: %f Y: %f",data.KalmanAngleX, data.KalmanAngleY);
 8001a52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a5a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001a5e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4926      	ldr	r1, [pc, #152]	; (8001b00 <ConsoleCommandFaceUpQuery+0xc0>)
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f009 f9df 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001a6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd32 	bl	80014dc <ConsoleSendLine>

	face = detectFace(data.KalmanAngleX, data.KalmanAngleY);
 8001a78:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001a7c:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8001a80:	eeb0 1a46 	vmov.f32	s2, s12
 8001a84:	eef0 1a66 	vmov.f32	s3, s13
 8001a88:	eeb0 0a47 	vmov.f32	s0, s14
 8001a8c:	eef0 0a67 	vmov.f32	s1, s15
 8001a90:	f001 fc94 	bl	80033bc <detectFace>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	uint32_t rgb_color = hsl_to_rgb((face*30), 255, 127);
 8001a9a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	227f      	movs	r2, #127	; 0x7f
 8001aaa:	21ff      	movs	r1, #255	; 0xff
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 feb7 	bl	8004820 <hsl_to_rgb>
 8001ab2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	ledAllOff();
 8001ab6:	f001 fbe9 	bl	800328c <ledAllOff>
	ledSetFaceColour(face, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001aba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001abe:	0c1b      	lsrs	r3, r3, #16
 8001ac0:	b2d9      	uxtb	r1, r3
 8001ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f897 0087 	ldrb.w	r0, [r7, #135]	; 0x87
 8001ad4:	f001 fbf7 	bl	80032c6 <ledSetFaceColour>
	ledRender();
 8001ad8:	f001 fbef 	bl	80032ba <ledRender>

	sprintf(msg,"Detected face %i is up",face);
 8001adc:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001ae0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <ConsoleCommandFaceUpQuery+0xc4>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f009 f9a0 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001aec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fcf3 	bl	80014dc <ConsoleSendLine>

	return COMMAND_SUCCESS;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	378c      	adds	r7, #140	; 0x8c
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}
 8001b00:	0800e420 	.word	0x0800e420
 8001b04:	0800e434 	.word	0x0800e434

08001b08 <ConsoleCommandLEDSet>:

static eCommandResult_T ConsoleCommandLEDSet(const char buffer[])
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	uint32_t startIndex;
	eCommandResult_T result;
	int16_t faceNumber;
	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	461a      	mov	r2, r3
 8001b16:	2101      	movs	r1, #1
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fc0b 	bl	8001334 <ConsoleParamFindN>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <ConsoleCommandLEDSet+0x24>
		return result;
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	e066      	b.n	8001bfa <ConsoleCommandLEDSet+0xf2>

	uint8_t command = buffer[startIndex];
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	75bb      	strb	r3, [r7, #22]
	switch (command)
 8001b36:	7dbb      	ldrb	r3, [r7, #22]
 8001b38:	2b6f      	cmp	r3, #111	; 0x6f
 8001b3a:	d053      	beq.n	8001be4 <ConsoleCommandLEDSet+0xdc>
 8001b3c:	2b6f      	cmp	r3, #111	; 0x6f
 8001b3e:	dc59      	bgt.n	8001bf4 <ConsoleCommandLEDSet+0xec>
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d054      	beq.n	8001bee <ConsoleCommandLEDSet+0xe6>
 8001b44:	2b66      	cmp	r3, #102	; 0x66
 8001b46:	d155      	bne.n	8001bf4 <ConsoleCommandLEDSet+0xec>
	{
		case 'f':

			result = ConsoleReceiveParamInt16(buffer, 2, &faceNumber);
 8001b48:	f107 030e 	add.w	r3, r7, #14
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2102      	movs	r1, #2
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fc50 	bl	80013f6 <ConsoleReceiveParamInt16>
 8001b56:	4603      	mov	r3, r0
 8001b58:	75fb      	strb	r3, [r7, #23]
			if (result != COMMAND_SUCCESS)
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <ConsoleCommandLEDSet+0x62>
			{
				ConsoleSendLine("Invalid Face ID");
 8001b60:	4828      	ldr	r0, [pc, #160]	; (8001c04 <ConsoleCommandLEDSet+0xfc>)
 8001b62:	f7ff fcbb 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001b66:	2310      	movs	r3, #16
 8001b68:	e047      	b.n	8001bfa <ConsoleCommandLEDSet+0xf2>
			}

			if (faceNumber >= PIXEL_RINGS)
 8001b6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b6e:	2b0b      	cmp	r3, #11
 8001b70:	dd04      	ble.n	8001b7c <ConsoleCommandLEDSet+0x74>
			{
				ConsoleSendLine("Invalid Face ID - Must be Zero Index");
 8001b72:	4825      	ldr	r0, [pc, #148]	; (8001c08 <ConsoleCommandLEDSet+0x100>)
 8001b74:	f7ff fcb2 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001b78:	2310      	movs	r3, #16
 8001b7a:	e03e      	b.n	8001bfa <ConsoleCommandLEDSet+0xf2>
			}


			result = ConsoleParamFindN(buffer,3,&startIndex);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	461a      	mov	r2, r3
 8001b82:	2103      	movs	r1, #3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fbd5 	bl	8001334 <ConsoleParamFindN>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	75fb      	strb	r3, [r7, #23]
			uint8_t colour = buffer[startIndex];
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	757b      	strb	r3, [r7, #21]
			if ('r' == colour)
 8001b98:	7d7b      	ldrb	r3, [r7, #21]
 8001b9a:	2b72      	cmp	r3, #114	; 0x72
 8001b9c:	d108      	bne.n	8001bb0 <ConsoleCommandLEDSet+0xa8>
				ledSetFaceColour(faceNumber,0xAA,00,0);
 8001b9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ba2:	b2d8      	uxtb	r0, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	21aa      	movs	r1, #170	; 0xaa
 8001baa:	f001 fb8c 	bl	80032c6 <ledSetFaceColour>
 8001bae:	e016      	b.n	8001bde <ConsoleCommandLEDSet+0xd6>
			else if ('g' == colour)
 8001bb0:	7d7b      	ldrb	r3, [r7, #21]
 8001bb2:	2b67      	cmp	r3, #103	; 0x67
 8001bb4:	d108      	bne.n	8001bc8 <ConsoleCommandLEDSet+0xc0>
				ledSetFaceColour(faceNumber,0x0,0xAA,0);
 8001bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bba:	b2d8      	uxtb	r0, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	22aa      	movs	r2, #170	; 0xaa
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	f001 fb80 	bl	80032c6 <ledSetFaceColour>
 8001bc6:	e00a      	b.n	8001bde <ConsoleCommandLEDSet+0xd6>
			else if ('b' == colour)
 8001bc8:	7d7b      	ldrb	r3, [r7, #21]
 8001bca:	2b62      	cmp	r3, #98	; 0x62
 8001bcc:	d107      	bne.n	8001bde <ConsoleCommandLEDSet+0xd6>
				ledSetFaceColour(faceNumber,0x0,0x0,0xAA);
 8001bce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bd2:	b2d8      	uxtb	r0, r3
 8001bd4:	23aa      	movs	r3, #170	; 0xaa
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	f001 fb74 	bl	80032c6 <ledSetFaceColour>

			ledRender();
 8001bde:	f001 fb6c 	bl	80032ba <ledRender>

			break;
 8001be2:	e009      	b.n	8001bf8 <ConsoleCommandLEDSet+0xf0>
		case 'o':
			ledAllOff();
 8001be4:	f001 fb52 	bl	800328c <ledAllOff>
			ledRender();
 8001be8:	f001 fb67 	bl	80032ba <ledRender>
			break;
 8001bec:	e004      	b.n	8001bf8 <ConsoleCommandLEDSet+0xf0>
		case'd':
				ledDance();
 8001bee:	f001 fb96 	bl	800331e <ledDance>
			break;
 8001bf2:	e001      	b.n	8001bf8 <ConsoleCommandLEDSet+0xf0>
		default :
			return CONSOLE_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <ConsoleCommandLEDSet+0xf2>
			break;
	}


	return CONSOLE_SUCCESS;
 8001bf8:	2300      	movs	r3, #0

}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	0800e44c 	.word	0x0800e44c
 8001c08:	0800e45c 	.word	0x0800e45c

08001c0c <ConsoleCommandMemTest>:

static eCommandResult_T ConsoleCommandMemTest(const char buffer[])
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
//
//	HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, 1);
//	Temp = (temp0 << 16) | (temp1 << 8) | temp2;
//	sprintf(msg,"Flash Mem Id \t%#02x %#02x %#02x %#02x %#02x %#02x %#02x %#02x ",id[0],id[1],id[2],id[3],id[4],id[5],id[6],id[7]);
//	ConsoleSendLine(msg);
	ConsoleSendLine("Commented out");
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <ConsoleCommandMemTest+0x18>)
 8001c16:	f7ff fc61 	bl	80014dc <ConsoleSendLine>
	return CONSOLE_SUCCESS;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	0800e484 	.word	0x0800e484

08001c28 <ConsoleCommandCPUQuery>:

static eCommandResult_T ConsoleCommandCPUQuery(const char buffer[])
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	; 0x30
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

	char msg[30];
	register int SP __asm("r13");


	sprintf(msg,"-- CPU Details --");
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	492b      	ldr	r1, [pc, #172]	; (8001ce4 <ConsoleCommandCPUQuery+0xbc>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f009 f8f8 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fc4b 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Stack Pointer \t\t%#08x",SP);
 8001c46:	466a      	mov	r2, sp
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4926      	ldr	r1, [pc, #152]	; (8001ce8 <ConsoleCommandCPUQuery+0xc0>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f009 f8ec 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fc3f 	bl	80014dc <ConsoleSendLine>

	unsigned int* HP = malloc(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f008 fb72 	bl	800a348 <malloc>
 8001c64:	4603      	mov	r3, r0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
	*HP=0xAB;
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	22ab      	movs	r2, #171	; 0xab
 8001c6c:	601a      	str	r2, [r3, #0]

	sprintf(msg,"Heap Pointer \t\t%#08x",(unsigned int)HP-1);
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	491d      	ldr	r1, [pc, #116]	; (8001cec <ConsoleCommandCPUQuery+0xc4>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f009 f8d7 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fc2a 	bl	80014dc <ConsoleSendLine>
	free(HP);
 8001c88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c8a:	f008 fb65 	bl	800a358 <free>
//	ConsoleSendLine(msg);

//	sprintf(msg,"Un-initialised global variable \t\t%#08x",(unsigned int)&uninitGlobalVar);
//	ConsoleSendLine(msg);

	sprintf(msg,"Const variable \t\t%#08x",(unsigned int)&constVar);
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <ConsoleCommandCPUQuery+0xc8>)
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4917      	ldr	r1, [pc, #92]	; (8001cf4 <ConsoleCommandCPUQuery+0xcc>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f009 f8c8 	bl	800ae2c <siprintf>
		ConsoleSendLine(msg);
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fc1b 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Static variable \t\t%#08x",(unsigned int)&staticVar);
 8001ca6:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <ConsoleCommandCPUQuery+0xd0>)
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	4913      	ldr	r1, [pc, #76]	; (8001cfc <ConsoleCommandCPUQuery+0xd4>)
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f009 f8bc 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fc0f 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Function variable \t\t%#08x",(unsigned int)&funcVar);
 8001cbe:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	490e      	ldr	r1, [pc, #56]	; (8001d00 <ConsoleCommandCPUQuery+0xd8>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f009 f8af 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fc02 	bl	80014dc <ConsoleSendLine>

	return CONSOLE_SUCCESS;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3730      	adds	r7, #48	; 0x30
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	0800e494 	.word	0x0800e494
 8001ce8:	0800e4a8 	.word	0x0800e4a8
 8001cec:	0800e4c0 	.word	0x0800e4c0
 8001cf0:	0800e884 	.word	0x0800e884
 8001cf4:	0800e4d8 	.word	0x0800e4d8
 8001cf8:	20000428 	.word	0x20000428
 8001cfc:	0800e4f0 	.word	0x0800e4f0
 8001d00:	0800e508 	.word	0x0800e508

08001d04 <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	461a      	mov	r2, r3
 8001d12:	2101      	movs	r1, #1
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fb0d 	bl	8001334 <ConsoleParamFindN>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 8001d24:	2310      	movs	r3, #16
 8001d26:	e049      	b.n	8001dbc <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	18d0      	adds	r0, r2, r3
 8001d2e:	f107 0114 	add.w	r1, r7, #20
 8001d32:	f107 0218 	add.w	r2, r7, #24
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4921      	ldr	r1, [pc, #132]	; (8001dc4 <ConsoleCommandDateSet+0xc0>)
 8001d40:	f009 f894 	bl	800ae6c <siscanf>

	if (!IS_RTC_DATE(day) )
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <ConsoleCommandDateSet+0x4c>
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b1f      	cmp	r3, #31
 8001d4e:	d904      	bls.n	8001d5a <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 8001d50:	481d      	ldr	r0, [pc, #116]	; (8001dc8 <ConsoleCommandDateSet+0xc4>)
 8001d52:	f7ff fbc3 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d56:	2310      	movs	r3, #16
 8001d58:	e030      	b.n	8001dbc <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <ConsoleCommandDateSet+0x62>
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d904      	bls.n	8001d70 <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 8001d66:	4819      	ldr	r0, [pc, #100]	; (8001dcc <ConsoleCommandDateSet+0xc8>)
 8001d68:	f7ff fbb8 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	e025      	b.n	8001dbc <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b63      	cmp	r3, #99	; 0x63
 8001d74:	d904      	bls.n	8001d80 <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8001d76:	4816      	ldr	r0, [pc, #88]	; (8001dd0 <ConsoleCommandDateSet+0xcc>)
 8001d78:	f7ff fbb0 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d7c:	2310      	movs	r3, #16
 8001d7e:	e01d      	b.n	8001dbc <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 8001d92:	2307      	movs	r3, #7
 8001d94:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <ConsoleCommandDateSet+0xd0>)
 8001da0:	f005 ff04 	bl	8007bac <HAL_RTC_SetDate>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 8001daa:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <ConsoleCommandDateSet+0xd4>)
 8001dac:	f7ff fb96 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001db0:	2310      	movs	r3, #16
 8001db2:	e003      	b.n	8001dbc <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8001db4:	4809      	ldr	r0, [pc, #36]	; (8001ddc <ConsoleCommandDateSet+0xd8>)
 8001db6:	f7ff fb91 	bl	80014dc <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001dba:	2300      	movs	r3, #0
	}
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	0800e524 	.word	0x0800e524
 8001dc8:	0800e530 	.word	0x0800e530
 8001dcc:	0800e554 	.word	0x0800e554
 8001dd0:	0800e578 	.word	0x0800e578
 8001dd4:	200004f0 	.word	0x200004f0
 8001dd8:	0800e59c 	.word	0x0800e59c
 8001ddc:	0800e5c0 	.word	0x0800e5c0

08001de0 <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08e      	sub	sp, #56	; 0x38
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	461a      	mov	r2, r3
 8001dee:	2101      	movs	r1, #1
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff fa9f 	bl	8001334 <ConsoleParamFindN>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 8001dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 8001e04:	2310      	movs	r3, #16
 8001e06:	e041      	b.n	8001e8c <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	18d0      	adds	r0, r2, r3
 8001e0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e12:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e16:	f107 0320 	add.w	r3, r7, #32
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	491d      	ldr	r1, [pc, #116]	; (8001e94 <ConsoleCommandTimeSet+0xb4>)
 8001e20:	f009 f824 	bl	800ae6c <siscanf>

	if (!IS_RTC_MINUTES(min) )
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	2b3b      	cmp	r3, #59	; 0x3b
 8001e28:	d904      	bls.n	8001e34 <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 8001e2a:	481b      	ldr	r0, [pc, #108]	; (8001e98 <ConsoleCommandTimeSet+0xb8>)
 8001e2c:	f7ff fb56 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001e30:	2310      	movs	r3, #16
 8001e32:	e02b      	b.n	8001e8c <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2b3b      	cmp	r3, #59	; 0x3b
 8001e38:	d904      	bls.n	8001e44 <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 8001e3a:	4818      	ldr	r0, [pc, #96]	; (8001e9c <ConsoleCommandTimeSet+0xbc>)
 8001e3c:	f7ff fb4e 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001e40:	2310      	movs	r3, #16
 8001e42:	e023      	b.n	8001e8c <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	2b17      	cmp	r3, #23
 8001e48:	d904      	bls.n	8001e54 <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 8001e4a:	4815      	ldr	r0, [pc, #84]	; (8001ea0 <ConsoleCommandTimeSet+0xc0>)
 8001e4c:	f7ff fb46 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001e50:	2310      	movs	r3, #16
 8001e52:	e01b      	b.n	8001e8c <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001e66:	f107 0308 	add.w	r3, r7, #8
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <ConsoleCommandTimeSet+0xc4>)
 8001e70:	f005 fda4 	bl	80079bc <HAL_RTC_SetTime>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <ConsoleCommandTimeSet+0xc8>)
 8001e7c:	f7ff fb2e 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001e80:	2310      	movs	r3, #16
 8001e82:	e003      	b.n	8001e8c <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Time Set");
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <ConsoleCommandTimeSet+0xcc>)
 8001e86:	f7ff fb29 	bl	80014dc <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001e8a:	2300      	movs	r3, #0
	}
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3730      	adds	r7, #48	; 0x30
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	0800e5cc 	.word	0x0800e5cc
 8001e98:	0800e5d8 	.word	0x0800e5d8
 8001e9c:	0800e5fc 	.word	0x0800e5fc
 8001ea0:	0800e624 	.word	0x0800e624
 8001ea4:	200004f0 	.word	0x200004f0
 8001ea8:	0800e648 	.word	0x0800e648
 8001eac:	0800e66c 	.word	0x0800e66c

08001eb0 <ConsoleCommandLipoQuery>:


static eCommandResult_T ConsoleCommandLipoQuery(const char buffer[])
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b090      	sub	sp, #64	; 0x40
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	uint16_t voltage;
	uint16_t temp;
	uint16_t version;
	char msg[50];
	lc709203_getCellVoltage(&voltage);
 8001eb8:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 f99c 	bl	80031fa <lc709203_getCellVoltage>
	lc709203_getCellTemp(&temp);
 8001ec2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 f9a4 	bl	8003214 <lc709203_getCellTemp>
	lc709203_getId(&version);
 8001ecc:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 f9ac 	bl	800322e <lc709203_getId>

	sprintf(msg,"-- Lipo Cell Details --");
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4922      	ldr	r1, [pc, #136]	; (8001f64 <ConsoleCommandLipoQuery+0xb4>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f008 ffa5 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff faf8 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Monitor Version: %d",version);
 8001eec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	491c      	ldr	r1, [pc, #112]	; (8001f68 <ConsoleCommandLipoQuery+0xb8>)
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f008 ff98 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff faeb 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Cell Voltage: %1.4f v",((double)voltage/1000));
 8001f06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb13 	bl	8000534 <__aeabi_ui2d>
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <ConsoleCommandLipoQuery+0xbc>)
 8001f14:	f7fe fcb2 	bl	800087c <__aeabi_ddiv>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	f107 0008 	add.w	r0, r7, #8
 8001f20:	4913      	ldr	r1, [pc, #76]	; (8001f70 <ConsoleCommandLipoQuery+0xc0>)
 8001f22:	f008 ff83 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001f26:	f107 0308 	add.w	r3, r7, #8
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fad6 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Cell Temp: %1.2f v",((double)temp/100));
 8001f30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fafe 	bl	8000534 <__aeabi_ui2d>
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <ConsoleCommandLipoQuery+0xc4>)
 8001f3e:	f7fe fc9d 	bl	800087c <__aeabi_ddiv>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	f107 0008 	add.w	r0, r7, #8
 8001f4a:	490b      	ldr	r1, [pc, #44]	; (8001f78 <ConsoleCommandLipoQuery+0xc8>)
 8001f4c:	f008 ff6e 	bl	800ae2c <siprintf>
	ConsoleSendLine(msg);
 8001f50:	f107 0308 	add.w	r3, r7, #8
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fac1 	bl	80014dc <ConsoleSendLine>



	return COMMAND_SUCCESS;
 8001f5a:	2300      	movs	r3, #0

}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3740      	adds	r7, #64	; 0x40
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	0800e678 	.word	0x0800e678
 8001f68:	0800e690 	.word	0x0800e690
 8001f6c:	408f4000 	.word	0x408f4000
 8001f70:	0800e6a4 	.word	0x0800e6a4
 8001f74:	40590000 	.word	0x40590000
 8001f78:	0800e6bc 	.word	0x0800e6bc

08001f7c <ConsoleCommandAccelQuery>:
 * @param: Buffer
 * @return: eCommandResult_T
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandAccelQuery(const char buffer[])
{
 8001f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f80:	b0c1      	sub	sp, #260	; 0x104
 8001f82:	af08      	add	r7, sp, #32
 8001f84:	6078      	str	r0, [r7, #4]
	int16_t n;
	MPU6050_t data;
	char msg[100];
	uint32_t paramIndex;
	float rawAveX = 0;
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float rawAveY = 0;
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	float rawAveZ = 0;
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	ConsoleParamFindN(buffer, 1 , &paramIndex);
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff f9c4 	bl	8001334 <ConsoleParamFindN>

	if (0 == paramIndex)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11a      	bne.n	8001fe8 <ConsoleCommandAccelQuery+0x6c>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 8001fb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4899      	ldr	r0, [pc, #612]	; (8002220 <ConsoleCommandAccelQuery+0x2a4>)
 8001fba:	f000 fd25 	bl	8002a08 <MPU6050_Read_All>
		sprintf(msg,"X Angle\t: %f \t\t Y Angle\t: %f\n",data.KalmanAngleX, data.KalmanAngleY);
 8001fbe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001fc2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001fc6:	f107 040c 	add.w	r4, r7, #12
 8001fca:	e9cd 2300 	strd	r2, r3, [sp]
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4994      	ldr	r1, [pc, #592]	; (8002224 <ConsoleCommandAccelQuery+0x2a8>)
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f008 ff29 	bl	800ae2c <siprintf>
		ConsoleSendLine(msg);
 8001fda:	f107 030c 	add.w	r3, r7, #12
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fa7c 	bl	80014dc <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e115      	b.n	8002214 <ConsoleCommandAccelQuery+0x298>
	}


	// Read Raw n Times (Param r n where n = number of reads
	switch (buffer[paramIndex])
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b72      	cmp	r3, #114	; 0x72
 8001ff2:	d009      	beq.n	8002008 <ConsoleCommandAccelQuery+0x8c>
 8001ff4:	2b72      	cmp	r3, #114	; 0x72
 8001ff6:	dc05      	bgt.n	8002004 <ConsoleCommandAccelQuery+0x88>
 8001ff8:	2b61      	cmp	r3, #97	; 0x61
 8001ffa:	f000 80b0 	beq.w	800215e <ConsoleCommandAccelQuery+0x1e2>
 8001ffe:	2b6b      	cmp	r3, #107	; 0x6b
 8002000:	f000 80dd 	beq.w	80021be <ConsoleCommandAccelQuery+0x242>
	{
		default:
				return COMMAND_PARAMETER_ERROR;
 8002004:	2310      	movs	r3, #16
 8002006:	e105      	b.n	8002214 <ConsoleCommandAccelQuery+0x298>
		case 'r':
				ConsoleReceiveParamInt16(buffer, 2, &n);
 8002008:	f107 03ce 	add.w	r3, r7, #206	; 0xce
 800200c:	461a      	mov	r2, r3
 800200e:	2102      	movs	r1, #2
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff f9f0 	bl	80013f6 <ConsoleReceiveParamInt16>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8002016:	2300      	movs	r3, #0
 8002018:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 800201c:	e052      	b.n	80020c4 <ConsoleCommandAccelQuery+0x148>
				{
					MPU6050_Read_Accel(&I2C_MPU6050, &data);
 800201e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002022:	4619      	mov	r1, r3
 8002024:	487e      	ldr	r0, [pc, #504]	; (8002220 <ConsoleCommandAccelQuery+0x2a4>)
 8002026:	f000 fc33 	bl	8002890 <MPU6050_Read_Accel>
					rawAveX += data.Accel_X_RAW;
 800202a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002036:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800203a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203e:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
					rawAveY += data.Accel_Y_RAW;
 8002042:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204e:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
					rawAveZ += data.Accel_Z_RAW;
 800205a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002066:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 800206a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206e:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
					sprintf(msg,"RAW:[X:%5i Y:%5i Z:5%i] G:[X:%2f Y:%2f Z:%2f]",data.Accel_X_RAW, data.Accel_Y_RAW,data.Accel_Z_RAW, data.Ax,data.Ay,data.Az);
 8002072:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8002076:	469c      	mov	ip, r3
 8002078:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800207c:	469e      	mov	lr, r3
 800207e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002088:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800208c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002090:	f107 060c 	add.w	r6, r7, #12
 8002094:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800209c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4673      	mov	r3, lr
 80020a6:	4662      	mov	r2, ip
 80020a8:	495f      	ldr	r1, [pc, #380]	; (8002228 <ConsoleCommandAccelQuery+0x2ac>)
 80020aa:	4630      	mov	r0, r6
 80020ac:	f008 febe 	bl	800ae2c <siprintf>
					ConsoleSendLine(msg);
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fa11 	bl	80014dc <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 80020ba:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80020be:	3301      	adds	r3, #1
 80020c0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80020c4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80020c8:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	; 0xce
 80020cc:	4293      	cmp	r3, r2
 80020ce:	dba6      	blt.n	800201e <ConsoleCommandAccelQuery+0xa2>
				}
				rawAveX = rawAveX/n;
 80020d0:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020dc:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 80020e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e4:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
				rawAveY = rawAveY/n;
 80020e8:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f4:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 80020f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020fc:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
				rawAveZ = rawAveZ/n;
 8002100:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210c:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 8002110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002114:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
				sprintf(msg,"\nRAW Average :[X:%5f Y:%5f Z:5%f]\n",rawAveX,rawAveY,rawAveZ);
 8002118:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800211c:	f7fe fa2c 	bl	8000578 <__aeabi_f2d>
 8002120:	4680      	mov	r8, r0
 8002122:	4689      	mov	r9, r1
 8002124:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002128:	f7fe fa26 	bl	8000578 <__aeabi_f2d>
 800212c:	4604      	mov	r4, r0
 800212e:	460d      	mov	r5, r1
 8002130:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002134:	f7fe fa20 	bl	8000578 <__aeabi_f2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	f107 000c 	add.w	r0, r7, #12
 8002140:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002144:	e9cd 4500 	strd	r4, r5, [sp]
 8002148:	4642      	mov	r2, r8
 800214a:	464b      	mov	r3, r9
 800214c:	4937      	ldr	r1, [pc, #220]	; (800222c <ConsoleCommandAccelQuery+0x2b0>)
 800214e:	f008 fe6d 	bl	800ae2c <siprintf>
				ConsoleSendLine(msg);
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f9c0 	bl	80014dc <ConsoleSendLine>
				break;
 800215c:	e059      	b.n	8002212 <ConsoleCommandAccelQuery+0x296>
		case 'a':
				ConsoleReceiveParamInt16(buffer, 2, &n);
 800215e:	f107 03ce 	add.w	r3, r7, #206	; 0xce
 8002162:	461a      	mov	r2, r3
 8002164:	2102      	movs	r1, #2
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff f945 	bl	80013f6 <ConsoleReceiveParamInt16>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 800216c:	2300      	movs	r3, #0
 800216e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8002172:	e01d      	b.n	80021b0 <ConsoleCommandAccelQuery+0x234>
				{
					MPU6050_Read_All(&I2C_MPU6050, &data);
 8002174:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002178:	4619      	mov	r1, r3
 800217a:	4829      	ldr	r0, [pc, #164]	; (8002220 <ConsoleCommandAccelQuery+0x2a4>)
 800217c:	f000 fc44 	bl	8002a08 <MPU6050_Read_All>
					sprintf(msg,"A:[X:%2f Y:%2f]",data.KalmanAngleX, data.KalmanAngleY);
 8002180:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002184:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002188:	f107 040c 	add.w	r4, r7, #12
 800218c:	e9cd 2300 	strd	r2, r3, [sp]
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4926      	ldr	r1, [pc, #152]	; (8002230 <ConsoleCommandAccelQuery+0x2b4>)
 8002196:	4620      	mov	r0, r4
 8002198:	f008 fe48 	bl	800ae2c <siprintf>
					ConsoleSendLine(msg);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f99b 	bl	80014dc <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 80021a6:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80021aa:	3301      	adds	r3, #1
 80021ac:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 80021b0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80021b4:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	; 0xce
 80021b8:	4293      	cmp	r3, r2
 80021ba:	dbdb      	blt.n	8002174 <ConsoleCommandAccelQuery+0x1f8>

				}
				break;
 80021bc:	e029      	b.n	8002212 <ConsoleCommandAccelQuery+0x296>
		case 'k':
				ConsoleSendLine("--* Kalman Angle *--");
 80021be:	481d      	ldr	r0, [pc, #116]	; (8002234 <ConsoleCommandAccelQuery+0x2b8>)
 80021c0:	f7ff f98c 	bl	80014dc <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 80021ca:	e00a      	b.n	80021e2 <ConsoleCommandAccelQuery+0x266>
				{
					MPU6050_Read_All(&I2C_MPU6050, &data);
 80021cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021d0:	4619      	mov	r1, r3
 80021d2:	4813      	ldr	r0, [pc, #76]	; (8002220 <ConsoleCommandAccelQuery+0x2a4>)
 80021d4:	f000 fc18 	bl	8002a08 <MPU6050_Read_All>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 80021d8:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80021dc:	3301      	adds	r3, #1
 80021de:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 80021e2:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80021e6:	2b31      	cmp	r3, #49	; 0x31
 80021e8:	d9f0      	bls.n	80021cc <ConsoleCommandAccelQuery+0x250>
				}
				sprintf(msg,"[X:%2f Y:%2f]\n",data.KalmanAngleX, data.KalmanAngleY);
 80021ea:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80021ee:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80021f2:	f107 040c 	add.w	r4, r7, #12
 80021f6:	e9cd 2300 	strd	r2, r3, [sp]
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	490e      	ldr	r1, [pc, #56]	; (8002238 <ConsoleCommandAccelQuery+0x2bc>)
 8002200:	4620      	mov	r0, r4
 8002202:	f008 fe13 	bl	800ae2c <siprintf>
				ConsoleSendLine(msg);
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f966 	bl	80014dc <ConsoleSendLine>

			break;
 8002210:	bf00      	nop
	}

	return COMMAND_SUCCESS;
 8002212:	2300      	movs	r3, #0



}
 8002214:	4618      	mov	r0, r3
 8002216:	37e4      	adds	r7, #228	; 0xe4
 8002218:	46bd      	mov	sp, r7
 800221a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800221e:	bf00      	nop
 8002220:	2000049c 	.word	0x2000049c
 8002224:	0800e6d0 	.word	0x0800e6d0
 8002228:	0800e6f0 	.word	0x0800e6f0
 800222c:	0800e720 	.word	0x0800e720
 8002230:	0800e744 	.word	0x0800e744
 8002234:	0800e754 	.word	0x0800e754
 8002238:	0800e76c 	.word	0x0800e76c

0800223c <ConsoleCommandTimeQuery>:


static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b092      	sub	sp, #72	; 0x48
 8002240:	af02      	add	r7, sp, #8
 8002242:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	2200      	movs	r2, #0
 800224a:	4619      	mov	r1, r3
 800224c:	480f      	ldr	r0, [pc, #60]	; (800228c <ConsoleCommandTimeQuery+0x50>)
 800224e:	f005 fc4f 	bl	8007af0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 8002252:	f107 0308 	add.w	r3, r7, #8
 8002256:	2200      	movs	r2, #0
 8002258:	4619      	mov	r1, r3
 800225a:	480c      	ldr	r0, [pc, #48]	; (800228c <ConsoleCommandTimeQuery+0x50>)
 800225c:	f005 fd2a 	bl	8007cb4 <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8002260:	7b3b      	ldrb	r3, [r7, #12]
 8002262:	461a      	mov	r2, r3
 8002264:	7b7b      	ldrb	r3, [r7, #13]
 8002266:	4619      	mov	r1, r3
 8002268:	7bbb      	ldrb	r3, [r7, #14]
 800226a:	f107 0020 	add.w	r0, r7, #32
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	460b      	mov	r3, r1
 8002272:	4907      	ldr	r1, [pc, #28]	; (8002290 <ConsoleCommandTimeQuery+0x54>)
 8002274:	f008 fdda 	bl	800ae2c <siprintf>
	ConsoleSendString(time);
 8002278:	f107 0320 	add.w	r3, r7, #32
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff f920 	bl	80014c2 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3740      	adds	r7, #64	; 0x40
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200004f0 	.word	0x200004f0
 8002290:	0800e77c 	.word	0x0800e77c

08002294 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08e      	sub	sp, #56	; 0x38
 8002298:	af02      	add	r7, sp, #8
 800229a:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2200      	movs	r2, #0
 80022a2:	4619      	mov	r1, r3
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <ConsoleCommandDateQuery+0x44>)
 80022a6:	f005 fd05 	bl	8007cb4 <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 80022aa:	7bbb      	ldrb	r3, [r7, #14]
 80022ac:	461a      	mov	r2, r3
 80022ae:	7b7b      	ldrb	r3, [r7, #13]
 80022b0:	4619      	mov	r1, r3
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	f107 0010 	add.w	r0, r7, #16
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	460b      	mov	r3, r1
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <ConsoleCommandDateQuery+0x48>)
 80022be:	f008 fdb5 	bl	800ae2c <siprintf>
	ConsoleSendString(date);
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff f8fb 	bl	80014c2 <ConsoleSendString>
	return COMMAND_SUCCESS;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200004f0 	.word	0x200004f0
 80022dc:	0800e794 	.word	0x0800e794

080022e0 <ConsoleCommandHelp>:




static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 80022e8:	2300      	movs	r3, #0
 80022ea:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 80022ec:	2312      	movs	r3, #18
 80022ee:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e01e      	b.n	8002334 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 80022f6:	4914      	ldr	r1, [pc, #80]	; (8002348 <ConsoleCommandHelp+0x68>)
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f89a 	bl	8002440 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 800230c:	480f      	ldr	r0, [pc, #60]	; (800234c <ConsoleCommandHelp+0x6c>)
 800230e:	f000 f897 	bl	8002440 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	3308      	adds	r3, #8
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <ConsoleCommandHelp+0x68>)
 8002320:	4413      	add	r3, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f88c 	bl	8002440 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8002328:	4809      	ldr	r0, [pc, #36]	; (8002350 <ConsoleCommandHelp+0x70>)
 800232a:	f000 f889 	bl	8002440 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3b01      	subs	r3, #1
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	429a      	cmp	r2, r3
 800233c:	d3db      	bcc.n	80022f6 <ConsoleCommandHelp+0x16>
	}
	return result;
 800233e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	0800e888 	.word	0x0800e888
 800234c:	0800e7ac 	.word	0x0800e7ac
 8002350:	0800e7b0 	.word	0x0800e7b0

08002354 <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <ConsoleCommandVer+0x24>)
 8002362:	f000 f86d 	bl	8002440 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <ConsoleCommandVer+0x28>)
 8002368:	f000 f86a 	bl	8002440 <ConsoleIoSendString>
	return result;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	0800e7b4 	.word	0x0800e7b4
 800237c:	0800e7b0 	.word	0x0800e7b0

08002380 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8002384:	4b02      	ldr	r3, [pc, #8]	; (8002390 <ConsoleCommandsGetTable+0x10>)
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	0800e888 	.word	0x0800e888

08002394 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 800239c:	2201      	movs	r2, #1
 800239e:	4909      	ldr	r1, [pc, #36]	; (80023c4 <HAL_UART_RxCpltCallback+0x30>)
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <HAL_UART_RxCpltCallback+0x34>)
 80023a2:	f007 f80a 	bl	80093ba <HAL_UART_Receive_IT>
    }



    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_UART_RxCpltCallback+0x30>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b0a      	cmp	r3, #10
 80023ac:	d005      	beq.n	80023ba <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_UART_RxCpltCallback+0x30>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_UART_RxCpltCallback+0x38>)
 80023b6:	f7fe fdb0 	bl	8000f1a <cBuffer_Write>

    }
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000474 	.word	0x20000474
 80023c8:	20000614 	.word	0x20000614
 80023cc:	2000046c 	.word	0x2000046c

080023d0 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 80023d4:	2240      	movs	r2, #64	; 0x40
 80023d6:	4906      	ldr	r1, [pc, #24]	; (80023f0 <ConsoleIoInit+0x20>)
 80023d8:	4806      	ldr	r0, [pc, #24]	; (80023f4 <ConsoleIoInit+0x24>)
 80023da:	f7fe fd7f 	bl	8000edc <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 80023de:	2201      	movs	r2, #1
 80023e0:	4905      	ldr	r1, [pc, #20]	; (80023f8 <ConsoleIoInit+0x28>)
 80023e2:	4806      	ldr	r0, [pc, #24]	; (80023fc <ConsoleIoInit+0x2c>)
 80023e4:	f006 ffe9 	bl	80093ba <HAL_UART_Receive_IT>

	return CONSOLE_SUCCESS;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000042c 	.word	0x2000042c
 80023f4:	2000046c 	.word	0x2000046c
 80023f8:	20000474 	.word	0x20000474
 80023fc:	20000614 	.word	0x20000614

08002400 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	uint8_t len;




	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 8002408:	f107 030f 	add.w	r3, r7, #15
 800240c:	220d      	movs	r2, #13
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	480a      	ldr	r0, [pc, #40]	; (800243c <ConsoleIoReceive+0x3c>)
 8002412:	f7fe fda5 	bl	8000f60 <cBuffer_GetString>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len-1]  = 0x0; //Terminate String in C Style
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	3b01      	subs	r3, #1
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fe8a 	bl	8003142 <manageBackSpace>
		return CONSOLE_SUCCESS;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <ConsoleIoReceive+0x34>
	}
	return CONSOLE_NO_STRING;
 8002432:	2302      	movs	r3, #2

}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	2000046c 	.word	0x2000046c

08002440 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fd fed3 	bl	80001f4 <strlen>
 800244e:	4603      	mov	r3, r0
 8002450:	b29a      	uxth	r2, r3
 8002452:	2364      	movs	r3, #100	; 0x64
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <ConsoleIoSendString+0x28>)
 8002458:	f006 ff1d 	bl	8009296 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000614 	.word	0x20000614

0800246c <colourFindByCode>:
			{"BRICK",0x640032}

};

colour_t * colourFindByCode(const uint32_t code)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e010      	b.n	800249c <colourFindByCode+0x30>
	{
		if (code == colours[i].code)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <colourFindByCode+0x44>)
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	4413      	add	r3, r2
 8002482:	330c      	adds	r3, #12
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	d104      	bne.n	8002496 <colourFindByCode+0x2a>
		{
			return &colours[i];
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <colourFindByCode+0x44>)
 8002492:	4413      	add	r3, r2
 8002494:	e006      	b.n	80024a4 <colourFindByCode+0x38>
	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	3301      	adds	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b0b      	cmp	r3, #11
 80024a0:	d9eb      	bls.n	800247a <colourFindByCode+0xe>
		}
	}
	return NULL;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	20000000 	.word	0x20000000

080024b4 <dodecaInit>:
		}
};


eDodecaErr_t dodecaInit(dodecaItems_t * items)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	dodecaItems = items;
 80024bc:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <dodecaInit+0x1c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
	return DODECA_ERR_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	20000478 	.word	0x20000478

080024d4 <dodecaGet>:

dodecaItem_t *dodecaGet(uint8_t id)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	if (id > DODECA_COUNT_MAX )
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	2b0c      	cmp	r3, #12
 80024e2:	d901      	bls.n	80024e8 <dodecaGet+0x14>
	{
		return 0x0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e007      	b.n	80024f8 <dodecaGet+0x24>
	}

	return &dodecaItems->items[id];
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <dodecaGet+0x30>)
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	79fa      	ldrb	r2, [r7, #7]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20000478 	.word	0x20000478

08002508 <dodecaInitItem>:

eDodecaErr_t dodecaInitItem(uint8_t id, uint16_t min, uint16_t max, uint8_t taskId)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	4604      	mov	r4, r0
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4623      	mov	r3, r4
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	4603      	mov	r3, r0
 800251c:	80bb      	strh	r3, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]
 8002522:	4613      	mov	r3, r2
 8002524:	71bb      	strb	r3, [r7, #6]
	dodecaItem_t *dodeca;
	dodeca = dodecaGet(id);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ffd3 	bl	80024d4 <dodecaGet>
 800252e:	60f8      	str	r0, [r7, #12]
	if (!dodeca) return DODECA_ERR_INVALID_ID;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <dodecaInitItem+0x32>
 8002536:	2301      	movs	r3, #1
 8002538:	e00e      	b.n	8002558 <dodecaInitItem+0x50>

	dodeca->state = DODECA_STATE_STOPPED;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2203      	movs	r2, #3
 800253e:	621a      	str	r2, [r3, #32]
	dodeca->maxTimeMins = max;
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	775a      	strb	r2, [r3, #29]
	dodeca->minTimeMins = min;
 8002548:	88bb      	ldrh	r3, [r7, #4]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	771a      	strb	r2, [r3, #28]
	dodeca->taskId = taskId;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	79ba      	ldrb	r2, [r7, #6]
 8002554:	701a      	strb	r2, [r3, #0]
	return DODECA_ERR_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bd90      	pop	{r4, r7, pc}

08002560 <dodecaGetStateName>:


eDodecaErr_t dodecaGetStateName(eDodecaState_t state,char* name)
{
 8002560:	b490      	push	{r4, r7}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]

	switch (state)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d016      	beq.n	800259e <dodecaGetStateName+0x3e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d824      	bhi.n	80025c0 <dodecaGetStateName+0x60>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d003      	beq.n	8002584 <dodecaGetStateName+0x24>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d015      	beq.n	80025ae <dodecaGetStateName+0x4e>
 8002582:	e01d      	b.n	80025c0 <dodecaGetStateName+0x60>
	{
		case DODECA_STATE_NOT_CONFIGURED : strcpy(name,"Not Configured"); break;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <dodecaGetStateName+0x80>)
 8002588:	461c      	mov	r4, r3
 800258a:	4613      	mov	r3, r2
 800258c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800258e:	6020      	str	r0, [r4, #0]
 8002590:	6061      	str	r1, [r4, #4]
 8002592:	60a2      	str	r2, [r4, #8]
 8002594:	881a      	ldrh	r2, [r3, #0]
 8002596:	789b      	ldrb	r3, [r3, #2]
 8002598:	81a2      	strh	r2, [r4, #12]
 800259a:	73a3      	strb	r3, [r4, #14]
 800259c:	e01a      	b.n	80025d4 <dodecaGetStateName+0x74>
		case DODECA_STATE_STOPPED : strcpy(name,"Stopped"); break;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	4910      	ldr	r1, [pc, #64]	; (80025e4 <dodecaGetStateName+0x84>)
 80025a2:	461a      	mov	r2, r3
 80025a4:	460b      	mov	r3, r1
 80025a6:	cb03      	ldmia	r3!, {r0, r1}
 80025a8:	6010      	str	r0, [r2, #0]
 80025aa:	6051      	str	r1, [r2, #4]
 80025ac:	e012      	b.n	80025d4 <dodecaGetStateName+0x74>
		case DODECA_STATE_ACTIVE : strcpy(name,"Active"); break;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <dodecaGetStateName+0x88>)
 80025b2:	6810      	ldr	r0, [r2, #0]
 80025b4:	6018      	str	r0, [r3, #0]
 80025b6:	8891      	ldrh	r1, [r2, #4]
 80025b8:	7992      	ldrb	r2, [r2, #6]
 80025ba:	8099      	strh	r1, [r3, #4]
 80025bc:	719a      	strb	r2, [r3, #6]
 80025be:	e009      	b.n	80025d4 <dodecaGetStateName+0x74>
		default: strcpy(name,"undefined"); break;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	490a      	ldr	r1, [pc, #40]	; (80025ec <dodecaGetStateName+0x8c>)
 80025c4:	461a      	mov	r2, r3
 80025c6:	460b      	mov	r3, r1
 80025c8:	cb03      	ldmia	r3!, {r0, r1}
 80025ca:	6010      	str	r0, [r2, #0]
 80025cc:	6051      	str	r1, [r2, #4]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	8113      	strh	r3, [r2, #8]
 80025d2:	bf00      	nop
	}

	return DODECA_ERR_OK;
 80025d4:	2300      	movs	r3, #0


}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc90      	pop	{r4, r7}
 80025de:	4770      	bx	lr
 80025e0:	0800e7c0 	.word	0x0800e7c0
 80025e4:	0800e7d0 	.word	0x0800e7d0
 80025e8:	0800e7d8 	.word	0x0800e7d8
 80025ec:	0800e7e0 	.word	0x0800e7e0

080025f0 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a2e      	ldr	r2, [pc, #184]	; (80026b8 <GetSector+0xc8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d806      	bhi.n	8002612 <GetSector+0x22>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260a:	d302      	bcc.n	8002612 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e04b      	b.n	80026aa <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a29      	ldr	r2, [pc, #164]	; (80026bc <GetSector+0xcc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d806      	bhi.n	8002628 <GetSector+0x38>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <GetSector+0xd0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d302      	bcc.n	8002628 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8002622:	2301      	movs	r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e040      	b.n	80026aa <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a26      	ldr	r2, [pc, #152]	; (80026c4 <GetSector+0xd4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d806      	bhi.n	800263e <GetSector+0x4e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a25      	ldr	r2, [pc, #148]	; (80026c8 <GetSector+0xd8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d302      	bcc.n	800263e <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8002638:	2302      	movs	r3, #2
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e035      	b.n	80026aa <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a22      	ldr	r2, [pc, #136]	; (80026cc <GetSector+0xdc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d206      	bcs.n	8002654 <GetSector+0x64>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a21      	ldr	r2, [pc, #132]	; (80026d0 <GetSector+0xe0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d302      	bcc.n	8002654 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800264e:	2303      	movs	r3, #3
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e02a      	b.n	80026aa <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <GetSector+0xe4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d206      	bcs.n	800266a <GetSector+0x7a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <GetSector+0xdc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d902      	bls.n	800266a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8002664:	2304      	movs	r3, #4
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e01f      	b.n	80026aa <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <GetSector+0xe8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d206      	bcs.n	8002680 <GetSector+0x90>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <GetSector+0xe4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d902      	bls.n	8002680 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800267a:	2305      	movs	r3, #5
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e014      	b.n	80026aa <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a16      	ldr	r2, [pc, #88]	; (80026dc <GetSector+0xec>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d206      	bcs.n	8002696 <GetSector+0xa6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <GetSector+0xe8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d902      	bls.n	8002696 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8002690:	2306      	movs	r3, #6
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e009      	b.n	80026aa <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <GetSector+0xf0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d205      	bcs.n	80026aa <GetSector+0xba>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <GetSector+0xec>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80026a6:	2307      	movs	r3, #7
 80026a8:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80026aa:	68fb      	ldr	r3, [r7, #12]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	08003ffe 	.word	0x08003ffe
 80026bc:	08007ffe 	.word	0x08007ffe
 80026c0:	08004000 	.word	0x08004000
 80026c4:	0800bffe 	.word	0x0800bffe
 80026c8:	08008000 	.word	0x08008000
 80026cc:	0800ffff 	.word	0x0800ffff
 80026d0:	0800c000 	.word	0x0800c000
 80026d4:	0801ffff 	.word	0x0801ffff
 80026d8:	0803ffff 	.word	0x0803ffff
 80026dc:	0805ffff 	.word	0x0805ffff
 80026e0:	0807ffff 	.word	0x0807ffff

080026e4 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, const uint16_t numberofwords)
{
 80026e4:	b5b0      	push	{r4, r5, r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80026f6:	f002 ffa5 	bl	8005644 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff ff78 	bl	80025f0 <GetSector>
 8002700:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 800270e:	69f8      	ldr	r0, [r7, #28]
 8002710:	f7ff ff6e 	bl	80025f0 <GetSector>
 8002714:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <Flash_Write_Data+0xb8>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <Flash_Write_Data+0xb8>)
 800271e:	2202      	movs	r2, #2
 8002720:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8002722:	4a1e      	ldr	r2, [pc, #120]	; (800279c <Flash_Write_Data+0xb8>)
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	3301      	adds	r3, #1
 8002730:	4a1a      	ldr	r2, [pc, #104]	; (800279c <Flash_Write_Data+0xb8>)
 8002732:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	4818      	ldr	r0, [pc, #96]	; (800279c <Flash_Write_Data+0xb8>)
 800273c:	f003 f900 	bl	8005940 <HAL_FLASHEx_Erase>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d01f      	beq.n	8002786 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8002746:	f002 ffaf 	bl	80056a8 <HAL_FLASH_GetError>
 800274a:	4603      	mov	r3, r0
 800274c:	e022      	b.n	8002794 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	4413      	add	r3, r2
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2200      	movs	r2, #0
 800275a:	461c      	mov	r4, r3
 800275c:	4615      	mov	r5, r2
 800275e:	4622      	mov	r2, r4
 8002760:	462b      	mov	r3, r5
 8002762:	68f9      	ldr	r1, [r7, #12]
 8002764:	2002      	movs	r0, #2
 8002766:	f002 ff19 	bl	800559c <HAL_FLASH_Program>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3304      	adds	r3, #4
 8002774:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	3301      	adds	r3, #1
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
 800277c:	e003      	b.n	8002786 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800277e:	f002 ff93 	bl	80056a8 <HAL_FLASH_GetError>
 8002782:	4603      	mov	r3, r0
 8002784:	e006      	b.n	8002794 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	429a      	cmp	r2, r3
 800278c:	dbdf      	blt.n	800274e <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800278e:	f002 ff7b 	bl	8005688 <HAL_FLASH_Lock>

	   return 0;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bdb0      	pop	{r4, r5, r7, pc}
 800279c:	2000047c 	.word	0x2000047c

080027a0 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, const uint16_t numberofwords)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
	uint32_t sofar = numberofwords;
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	617b      	str	r3, [r7, #20]
	while (sofar)
 80027b2:	e00c      	b.n	80027ce <Flash_Read_Data+0x2e>
	{
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3304      	adds	r3, #4
 80027c0:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3304      	adds	r3, #4
 80027c6:	60bb      	str	r3, [r7, #8]
		sofar--;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
	while (sofar)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1ef      	bne.n	80027b4 <Flash_Read_Data+0x14>
	}
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <MPU6050_Init>:





uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b088      	sub	sp, #32
 80027e6:	af04      	add	r7, sp, #16
 80027e8:	6078      	str	r0, [r7, #4]

    // check device ID WHO_AM_I



    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80027ea:	2364      	movs	r3, #100	; 0x64
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	f107 030f 	add.w	r3, r7, #15
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	2275      	movs	r2, #117	; 0x75
 80027fc:	21d0      	movs	r1, #208	; 0xd0
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f003 fd9c 	bl	800633c <HAL_I2C_Mem_Read>

    if (check == 114)  // 0x68 will be returned by the sensor if everything goes well
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b72      	cmp	r3, #114	; 0x72
 8002808:	d13d      	bne.n	8002886 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800280e:	2364      	movs	r3, #100	; 0x64
 8002810:	9302      	str	r3, [sp, #8]
 8002812:	2301      	movs	r3, #1
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	f107 030e 	add.w	r3, r7, #14
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2301      	movs	r3, #1
 800281e:	226b      	movs	r2, #107	; 0x6b
 8002820:	21d0      	movs	r1, #208	; 0xd0
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f003 fc90 	bl	8006148 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002828:	2307      	movs	r3, #7
 800282a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800282c:	2364      	movs	r3, #100	; 0x64
 800282e:	9302      	str	r3, [sp, #8]
 8002830:	2301      	movs	r3, #1
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	f107 030e 	add.w	r3, r7, #14
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2301      	movs	r3, #1
 800283c:	2219      	movs	r2, #25
 800283e:	21d0      	movs	r1, #208	; 0xd0
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f003 fc81 	bl	8006148 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800284a:	2364      	movs	r3, #100	; 0x64
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	2301      	movs	r3, #1
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	f107 030e 	add.w	r3, r7, #14
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2301      	movs	r3, #1
 800285a:	221c      	movs	r2, #28
 800285c:	21d0      	movs	r1, #208	; 0xd0
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f003 fc72 	bl	8006148 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002864:	2300      	movs	r3, #0
 8002866:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002868:	2364      	movs	r3, #100	; 0x64
 800286a:	9302      	str	r3, [sp, #8]
 800286c:	2301      	movs	r3, #1
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	f107 030e 	add.w	r3, r7, #14
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2301      	movs	r3, #1
 8002878:	221b      	movs	r2, #27
 800287a:	21d0      	movs	r1, #208	; 0xd0
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f003 fc63 	bl	8006148 <HAL_I2C_Mem_Write>
        return 0;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <MPU6050_Init+0xa6>
    }
    return 1;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af04      	add	r7, sp, #16
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 800289a:	2364      	movs	r3, #100	; 0x64
 800289c:	9302      	str	r3, [sp, #8]
 800289e:	2306      	movs	r3, #6
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	f107 0308 	add.w	r3, r7, #8
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2301      	movs	r3, #1
 80028aa:	223b      	movs	r2, #59	; 0x3b
 80028ac:	21d0      	movs	r1, #208	; 0xd0
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f003 fd44 	bl	800633c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80028b4:	7a3b      	ldrb	r3, [r7, #8]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	7a7b      	ldrb	r3, [r7, #9]
 80028bc:	b21b      	sxth	r3, r3
 80028be:	4313      	orrs	r3, r2
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80028c6:	7abb      	ldrb	r3, [r7, #10]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	b21a      	sxth	r2, r3
 80028cc:	7afb      	ldrb	r3, [r7, #11]
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80028d8:	7b3b      	ldrb	r3, [r7, #12]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	b21a      	sxth	r2, r3
 80028de:	7b7b      	ldrb	r3, [r7, #13]
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	809a      	strh	r2, [r3, #4]
   // DataStruct->Accel_X_RAW += CAL_X;
   // DataStruct->Accel_Y_RAW += CAL_Y;
  //  DataStruct->Accel_Z_RAW += CAL_Y;


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fe2f 	bl	8000554 <__aeabi_i2d>
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <MPU6050_Read_Accel+0x140>)
 80028fc:	f7fd ffbe 	bl	800087c <__aeabi_ddiv>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fe1f 	bl	8000554 <__aeabi_i2d>
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <MPU6050_Read_Accel+0x140>)
 800291c:	f7fd ffae 	bl	800087c <__aeabi_ddiv>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	6839      	ldr	r1, [r7, #0]
 8002926:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fe0f 	bl	8000554 <__aeabi_i2d>
 8002936:	a322      	add	r3, pc, #136	; (adr r3, 80029c0 <MPU6050_Read_Accel+0x130>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fd ff9e 	bl	800087c <__aeabi_ddiv>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	6839      	ldr	r1, [r7, #0]
 8002946:	e9c1 2306 	strd	r2, r3, [r1, #24]


    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002950:	a31d      	add	r3, pc, #116	; (adr r3, 80029c8 <MPU6050_Read_Accel+0x138>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fe f8d9 	bl	8000b0c <__aeabi_dcmplt>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <MPU6050_Read_Accel+0xde>
 8002960:	6839      	ldr	r1, [r7, #0]
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002974:	a314      	add	r3, pc, #80	; (adr r3, 80029c8 <MPU6050_Read_Accel+0x138>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fe f8c7 	bl	8000b0c <__aeabi_dcmplt>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <MPU6050_Read_Accel+0x102>
 8002984:	6839      	ldr	r1, [r7, #0]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002998:	a30b      	add	r3, pc, #44	; (adr r3, 80029c8 <MPU6050_Read_Accel+0x138>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f7fe f8b5 	bl	8000b0c <__aeabi_dcmplt>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d100      	bne.n	80029aa <MPU6050_Read_Accel+0x11a>


}
 80029a8:	e006      	b.n	80029b8 <MPU6050_Read_Accel+0x128>
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	00000000 	.word	0x00000000
 80029c4:	40cc2900 	.word	0x40cc2900
 80029c8:	70a3d70a 	.word	0x70a3d70a
 80029cc:	3fb70a3d 	.word	0x3fb70a3d
 80029d0:	40d00000 	.word	0x40d00000

080029d4 <MPU6050ReadStable>:
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}


void MPU6050ReadStable(MPU6050_t *data)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
	for (uint8_t cnt=0;cnt<20;cnt++)
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e006      	b.n	80029f0 <MPU6050ReadStable+0x1c>
		{
			MPU6050_Read_All(&I2C_MPU6050, data);
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4806      	ldr	r0, [pc, #24]	; (8002a00 <MPU6050ReadStable+0x2c>)
 80029e6:	f000 f80f 	bl	8002a08 <MPU6050_Read_All>
	for (uint8_t cnt=0;cnt<20;cnt++)
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	3301      	adds	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b13      	cmp	r3, #19
 80029f4:	d9f5      	bls.n	80029e2 <MPU6050ReadStable+0xe>
		}
}
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2000049c 	.word	0x2000049c
 8002a04:	00000000 	.word	0x00000000

08002a08 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a0c:	b094      	sub	sp, #80	; 0x50
 8002a0e:	af04      	add	r7, sp, #16
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002a14:	2364      	movs	r3, #100	; 0x64
 8002a16:	9302      	str	r3, [sp, #8]
 8002a18:	230e      	movs	r3, #14
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	f107 0308 	add.w	r3, r7, #8
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2301      	movs	r3, #1
 8002a24:	223b      	movs	r2, #59	; 0x3b
 8002a26:	21d0      	movs	r1, #208	; 0xd0
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f003 fc87 	bl	800633c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002a2e:	7a3b      	ldrb	r3, [r7, #8]
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	b21a      	sxth	r2, r3
 8002a34:	7a7b      	ldrb	r3, [r7, #9]
 8002a36:	b21b      	sxth	r3, r3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002a40:	7abb      	ldrb	r3, [r7, #10]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	b21a      	sxth	r2, r3
 8002a46:	7afb      	ldrb	r3, [r7, #11]
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	b21a      	sxth	r2, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002a52:	7b3b      	ldrb	r3, [r7, #12]
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	7b7b      	ldrb	r3, [r7, #13]
 8002a5a:	b21b      	sxth	r3, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b21a      	sxth	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	b21a      	sxth	r2, r3
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	b21b      	sxth	r3, r3
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002a72:	7c3b      	ldrb	r3, [r7, #16]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	b21a      	sxth	r2, r3
 8002a78:	7c7b      	ldrb	r3, [r7, #17]
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	b21a      	sxth	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002a84:	7cbb      	ldrb	r3, [r7, #18]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	b21a      	sxth	r2, r3
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	b21b      	sxth	r3, r3
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002a96:	7d3b      	ldrb	r3, [r7, #20]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	7d7b      	ldrb	r3, [r7, #21]
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	b21a      	sxth	r2, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	849a      	strh	r2, [r3, #36]	; 0x24

    // Callibrate
	DataStruct->Accel_X_RAW += CAL_X;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	b21a      	sxth	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW += CAL_Y;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW += CAL_Y;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	b21a      	sxth	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	809a      	strh	r2, [r3, #4]


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd32 	bl	8000554 <__aeabi_i2d>
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	4bb6      	ldr	r3, [pc, #728]	; (8002dd0 <MPU6050_Read_All+0x3c8>)
 8002af6:	f7fd fec1 	bl	800087c <__aeabi_ddiv>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fd22 	bl	8000554 <__aeabi_i2d>
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	4bae      	ldr	r3, [pc, #696]	; (8002dd0 <MPU6050_Read_All+0x3c8>)
 8002b16:	f7fd feb1 	bl	800087c <__aeabi_ddiv>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd12 	bl	8000554 <__aeabi_i2d>
 8002b30:	a39f      	add	r3, pc, #636	; (adr r3, 8002db0 <MPU6050_Read_All+0x3a8>)
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	f7fd fea1 	bl	800087c <__aeabi_ddiv>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	6839      	ldr	r1, [r7, #0]
 8002b40:	e9c1 2306 	strd	r2, r3, [r1, #24]





    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b4a:	a39b      	add	r3, pc, #620	; (adr r3, 8002db8 <MPU6050_Read_All+0x3b0>)
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	f7fd ffdc 	bl	8000b0c <__aeabi_dcmplt>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <MPU6050_Read_All+0x160>
 8002b5a:	6839      	ldr	r1, [r7, #0]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b6e:	a392      	add	r3, pc, #584	; (adr r3, 8002db8 <MPU6050_Read_All+0x3b0>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd ffca 	bl	8000b0c <__aeabi_dcmplt>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <MPU6050_Read_All+0x184>
 8002b7e:	6839      	ldr	r1, [r7, #0]
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002b92:	a389      	add	r3, pc, #548	; (adr r3, 8002db8 <MPU6050_Read_All+0x3b0>)
 8002b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b98:	f7fd ffb8 	bl	8000b0c <__aeabi_dcmplt>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <MPU6050_Read_All+0x1a8>
 8002ba2:	6839      	ldr	r1, [r7, #0]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9c1 2306 	strd	r2, r3, [r1, #24]


    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002bb0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bbc:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002dd4 <MPU6050_Read_All+0x3cc>
 8002bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002dd8 <MPU6050_Read_All+0x3d0>
 8002bc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fcbb 	bl	8000554 <__aeabi_i2d>
 8002bde:	a378      	add	r3, pc, #480	; (adr r3, 8002dc0 <MPU6050_Read_All+0x3b8>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fe4a 	bl	800087c <__aeabi_ddiv>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fcab 	bl	8000554 <__aeabi_i2d>
 8002bfe:	a370      	add	r3, pc, #448	; (adr r3, 8002dc0 <MPU6050_Read_All+0x3b8>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd fe3a 	bl	800087c <__aeabi_ddiv>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fc9b 	bl	8000554 <__aeabi_i2d>
 8002c1e:	a368      	add	r3, pc, #416	; (adr r3, 8002dc0 <MPU6050_Read_All+0x3b8>)
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f7fd fe2a 	bl	800087c <__aeabi_ddiv>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	6839      	ldr	r1, [r7, #0]
 8002c2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002c32:	f001 ff21 	bl	8004a78 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <MPU6050_Read_All+0x3d4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fc78 	bl	8000534 <__aeabi_ui2d>
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <MPU6050_Read_All+0x3d8>)
 8002c4a:	f7fd fe17 	bl	800087c <__aeabi_ddiv>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002c56:	f001 ff0f 	bl	8004a78 <HAL_GetTick>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a5f      	ldr	r2, [pc, #380]	; (8002ddc <MPU6050_Read_All+0x3d4>)
 8002c5e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c66:	461a      	mov	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c6e:	fb03 f202 	mul.w	r2, r3, r2
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc64 	bl	8000554 <__aeabi_i2d>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	ec43 2b10 	vmov	d0, r2, r3
 8002c94:	f00b f8e3 	bl	800de5e <sqrt>
 8002c98:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ca8:	f7fd ff26 	bl	8000af8 <__aeabi_dcmpeq>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d11f      	bne.n	8002cf2 <MPU6050_Read_All+0x2ea>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc4b 	bl	8000554 <__aeabi_i2d>
 8002cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cc2:	f7fd fddb 	bl	800087c <__aeabi_ddiv>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	ec43 2b17 	vmov	d7, r2, r3
 8002cce:	eeb0 0a47 	vmov.f32	s0, s14
 8002cd2:	eef0 0a67 	vmov.f32	s1, s15
 8002cd6:	f00a ff17 	bl	800db08 <atan>
 8002cda:	ec51 0b10 	vmov	r0, r1, d0
 8002cde:	a33a      	add	r3, pc, #232	; (adr r3, 8002dc8 <MPU6050_Read_All+0x3c0>)
 8002ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce4:	f7fd fca0 	bl	8000628 <__aeabi_dmul>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002cf0:	e005      	b.n	8002cfe <MPU6050_Read_All+0x2f6>
    } else {
        roll = 0.0;
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d04:	425b      	negs	r3, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc24 	bl	8000554 <__aeabi_i2d>
 8002d0c:	4682      	mov	sl, r0
 8002d0e:	468b      	mov	fp, r1
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fc1c 	bl	8000554 <__aeabi_i2d>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	ec43 2b11 	vmov	d1, r2, r3
 8002d24:	ec4b ab10 	vmov	d0, sl, fp
 8002d28:	f00b f897 	bl	800de5a <atan2>
 8002d2c:	ec51 0b10 	vmov	r0, r1, d0
 8002d30:	a325      	add	r3, pc, #148	; (adr r3, 8002dc8 <MPU6050_Read_All+0x3c0>)
 8002d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d36:	f7fd fc77 	bl	8000628 <__aeabi_dmul>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <MPU6050_Read_All+0x3dc>)
 8002d48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d4c:	f7fd fede 	bl	8000b0c <__aeabi_dcmplt>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <MPU6050_Read_All+0x364>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <MPU6050_Read_All+0x3e0>)
 8002d62:	f7fd fef1 	bl	8000b48 <__aeabi_dcmpgt>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d114      	bne.n	8002d96 <MPU6050_Read_All+0x38e>
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <MPU6050_Read_All+0x3e0>)
 8002d72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d76:	f7fd fee7 	bl	8000b48 <__aeabi_dcmpgt>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d037      	beq.n	8002df0 <MPU6050_Read_All+0x3e8>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <MPU6050_Read_All+0x3dc>)
 8002d8c:	f7fd febe 	bl	8000b0c <__aeabi_dcmplt>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d02c      	beq.n	8002df0 <MPU6050_Read_All+0x3e8>
        KalmanY.angle = pitch;
 8002d96:	4915      	ldr	r1, [pc, #84]	; (8002dec <MPU6050_Read_All+0x3e4>)
 8002d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d9c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002da0:	6839      	ldr	r1, [r7, #0]
 8002da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002daa:	e036      	b.n	8002e1a <MPU6050_Read_All+0x412>
 8002dac:	f3af 8000 	nop.w
 8002db0:	00000000 	.word	0x00000000
 8002db4:	40cc2900 	.word	0x40cc2900
 8002db8:	70a3d70a 	.word	0x70a3d70a
 8002dbc:	3fb70a3d 	.word	0x3fb70a3d
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	40606000 	.word	0x40606000
 8002dc8:	1a63c1f8 	.word	0x1a63c1f8
 8002dcc:	404ca5dc 	.word	0x404ca5dc
 8002dd0:	40d00000 	.word	0x40d00000
 8002dd4:	43aa0000 	.word	0x43aa0000
 8002dd8:	42121eb8 	.word	0x42121eb8
 8002ddc:	20000490 	.word	0x20000490
 8002de0:	408f4000 	.word	0x408f4000
 8002de4:	c0568000 	.word	0xc0568000
 8002de8:	40568000 	.word	0x40568000
 8002dec:	20000108 	.word	0x20000108
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002df6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002dfa:	eeb0 1a47 	vmov.f32	s2, s14
 8002dfe:	eef0 1a67 	vmov.f32	s3, s15
 8002e02:	ed97 0b06 	vldr	d0, [r7, #24]
 8002e06:	481e      	ldr	r0, [pc, #120]	; (8002e80 <MPU6050_Read_All+0x478>)
 8002e08:	f000 f840 	bl	8002e8c <Kalman_getAngle>
 8002e0c:	eeb0 7a40 	vmov.f32	s14, s0
 8002e10:	eef0 7a60 	vmov.f32	s15, s1
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002e20:	4690      	mov	r8, r2
 8002e22:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <MPU6050_Read_All+0x47c>)
 8002e2c:	4640      	mov	r0, r8
 8002e2e:	4649      	mov	r1, r9
 8002e30:	f7fd fe8a 	bl	8000b48 <__aeabi_dcmpgt>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <MPU6050_Read_All+0x444>
        DataStruct->Gx = -DataStruct->Gx;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e40:	4614      	mov	r4, r2
 8002e42:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002e52:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002e56:	eeb0 1a47 	vmov.f32	s2, s14
 8002e5a:	eef0 1a67 	vmov.f32	s3, s15
 8002e5e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002e62:	4809      	ldr	r0, [pc, #36]	; (8002e88 <MPU6050_Read_All+0x480>)
 8002e64:	f000 f812 	bl	8002e8c <Kalman_getAngle>
 8002e68:	eeb0 7a40 	vmov.f32	s14, s0
 8002e6c:	eef0 7a60 	vmov.f32	s15, s1
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8002e76:	bf00      	nop
 8002e78:	3740      	adds	r7, #64	; 0x40
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e80:	20000108 	.word	0x20000108
 8002e84:	40568000 	.word	0x40568000
 8002e88:	200000c0 	.word	0x200000c0

08002e8c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002e8c:	b5b0      	push	{r4, r5, r7, lr}
 8002e8e:	b096      	sub	sp, #88	; 0x58
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	61f8      	str	r0, [r7, #28]
 8002e94:	ed87 0b04 	vstr	d0, [r7, #16]
 8002e98:	ed87 1b02 	vstr	d1, [r7, #8]
 8002e9c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ea6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eaa:	f7fd fa05 	bl	80002b8 <__aeabi_dsub>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ec4:	f7fd fbb0 	bl	8000628 <__aeabi_dmul>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4620      	mov	r0, r4
 8002ece:	4629      	mov	r1, r5
 8002ed0:	f7fd f9f4 	bl	80002bc <__adddf3>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	69f9      	ldr	r1, [r7, #28]
 8002eda:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eee:	f7fd fb9b 	bl	8000628 <__aeabi_dmul>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f00:	f7fd f9da 	bl	80002b8 <__aeabi_dsub>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f12:	f7fd f9d1 	bl	80002b8 <__aeabi_dsub>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd f9ca 	bl	80002bc <__adddf3>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f34:	f7fd fb78 	bl	8000628 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f7fd f9bc 	bl	80002bc <__adddf3>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	69f9      	ldr	r1, [r7, #28]
 8002f4a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f5e:	f7fd fb63 	bl	8000628 <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4620      	mov	r0, r4
 8002f68:	4629      	mov	r1, r5
 8002f6a:	f7fd f9a5 	bl	80002b8 <__aeabi_dsub>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	69f9      	ldr	r1, [r7, #28]
 8002f74:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f88:	f7fd fb4e 	bl	8000628 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4620      	mov	r0, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	f7fd f990 	bl	80002b8 <__aeabi_dsub>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	69f9      	ldr	r1, [r7, #28]
 8002f9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb2:	f7fd fb39 	bl	8000628 <__aeabi_dmul>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4620      	mov	r0, r4
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	f7fd f97d 	bl	80002bc <__adddf3>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	69f9      	ldr	r1, [r7, #28]
 8002fc8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fd8:	f7fd f970 	bl	80002bc <__adddf3>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002fea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fee:	f7fd fc45 	bl	800087c <__aeabi_ddiv>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003004:	f7fd fc3a 	bl	800087c <__aeabi_ddiv>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003016:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800301a:	f7fd f94d 	bl	80002b8 <__aeabi_dsub>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800302c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003030:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003034:	f7fd faf8 	bl	8000628 <__aeabi_dmul>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4620      	mov	r0, r4
 800303e:	4629      	mov	r1, r5
 8003040:	f7fd f93c 	bl	80002bc <__adddf3>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	69f9      	ldr	r1, [r7, #28]
 800304a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003054:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800305c:	f7fd fae4 	bl	8000628 <__aeabi_dmul>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4620      	mov	r0, r4
 8003066:	4629      	mov	r1, r5
 8003068:	f7fd f928 	bl	80002bc <__adddf3>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	69f9      	ldr	r1, [r7, #28]
 8003072:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800307c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003086:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003090:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003098:	f7fd fac6 	bl	8000628 <__aeabi_dmul>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4620      	mov	r0, r4
 80030a2:	4629      	mov	r1, r5
 80030a4:	f7fd f908 	bl	80002b8 <__aeabi_dsub>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	69f9      	ldr	r1, [r7, #28]
 80030ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80030b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80030bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030c0:	f7fd fab2 	bl	8000628 <__aeabi_dmul>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4620      	mov	r0, r4
 80030ca:	4629      	mov	r1, r5
 80030cc:	f7fd f8f4 	bl	80002b8 <__aeabi_dsub>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	69f9      	ldr	r1, [r7, #28]
 80030d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80030e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030e8:	f7fd fa9e 	bl	8000628 <__aeabi_dmul>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4620      	mov	r0, r4
 80030f2:	4629      	mov	r1, r5
 80030f4:	f7fd f8e0 	bl	80002b8 <__aeabi_dsub>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	69f9      	ldr	r1, [r7, #28]
 80030fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003108:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800310c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003110:	f7fd fa8a 	bl	8000628 <__aeabi_dmul>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4620      	mov	r0, r4
 800311a:	4629      	mov	r1, r5
 800311c:	f7fd f8cc 	bl	80002b8 <__aeabi_dsub>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	69f9      	ldr	r1, [r7, #28]
 8003126:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003130:	ec43 2b17 	vmov	d7, r2, r3
};
 8003134:	eeb0 0a47 	vmov.f32	s0, s14
 8003138:	eef0 0a67 	vmov.f32	s1, s15
 800313c:	3758      	adds	r7, #88	; 0x58
 800313e:	46bd      	mov	sp, r7
 8003140:	bdb0      	pop	{r4, r5, r7, pc}

08003142 <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 800314e:	217f      	movs	r1, #127	; 0x7f
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f007 fefc 	bl	800af4e <strchr>
 8003156:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8003158:	e029      	b.n	80031ae <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b7f      	cmp	r3, #127	; 0x7f
 8003160:	d106      	bne.n	8003170 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3301      	adds	r3, #1
 8003166:	4619      	mov	r1, r3
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f007 fefd 	bl	800af68 <strcpy>
 800316e:	e019      	b.n	80031a4 <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b7f      	cmp	r3, #127	; 0x7f
 8003176:	d109      	bne.n	800318c <manageBackSpace+0x4a>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3b01      	subs	r3, #1
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e00b      	b.n	80031a4 <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b7f      	cmp	r3, #127	; 0x7f
 8003192:	d107      	bne.n	80031a4 <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e5a      	subs	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3301      	adds	r3, #1
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f007 fee2 	bl	800af68 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 80031a4:	217f      	movs	r1, #127	; 0x7f
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f007 fed1 	bl	800af4e <strchr>
 80031ac:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1d1      	bne.n	800315a <manageBackSpace+0x18>
		}
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 80031c8:	e00c      	b.n	80031e4 <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b2f      	cmp	r3, #47	; 0x2f
 80031d0:	d903      	bls.n	80031da <isNumber+0x1a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b39      	cmp	r3, #57	; 0x39
 80031d8:	d901      	bls.n	80031de <isNumber+0x1e>
			return 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	e007      	b.n	80031ee <isNumber+0x2e>
		string++;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3301      	adds	r3, #1
 80031e2:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ee      	bne.n	80031ca <isNumber+0xa>
	}
	return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <lc709203_getCellVoltage>:
 * @param: 16bit pointer to value
 * @return: Error Code
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getCellVoltage(uint16_t *voltage)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_VOLTAGE,voltage);
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	2009      	movs	r0, #9
 8003206:	f000 f81f 	bl	8003248 <lc709203_getRegisterValue>
 800320a:	4603      	mov	r3, r0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <lc709203_getCellTemp>:

eLC709203_Error_t lc709203_getCellTemp(uint16_t *voltage)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_TEMP,voltage);
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	2008      	movs	r0, #8
 8003220:	f000 f812 	bl	8003248 <lc709203_getRegisterValue>
 8003224:	4603      	mov	r3, r0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <lc709203_getId>:

eLC709203_Error_t lc709203_getId(uint16_t *version)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_IC_VERSION,version);
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	2011      	movs	r0, #17
 800323a:	f000 f805 	bl	8003248 <lc709203_getRegisterValue>
 800323e:	4603      	mov	r3, r0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <lc709203_getRegisterValue>:
 * @param: value - a 16 bit pointer to the value to be used
 * @return: Error code foe the function
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getRegisterValue (uint8_t reg,uint16_t *value)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af04      	add	r7, sp, #16
 800324e:	4603      	mov	r3, r0
 8003250:	6039      	str	r1, [r7, #0]
 8003252:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c1, LC709302_ADRESS, reg, 1, (uint8_t*)value, 2, 100);
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	b29a      	uxth	r2, r3
 8003258:	2364      	movs	r3, #100	; 0x64
 800325a:	9302      	str	r3, [sp, #8]
 800325c:	2302      	movs	r3, #2
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2301      	movs	r3, #1
 8003266:	2116      	movs	r1, #22
 8003268:	4807      	ldr	r0, [pc, #28]	; (8003288 <lc709203_getRegisterValue+0x40>)
 800326a:	f003 f867 	bl	800633c <HAL_I2C_Mem_Read>
 800326e:	4603      	mov	r3, r0
 8003270:	73fb      	strb	r3, [r7, #15]

	if (result != HAL_OK)
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <lc709203_getRegisterValue+0x34>
	{
		return LC798_COMM_ERROR;
 8003278:	2302      	movs	r3, #2
 800327a:	e000      	b.n	800327e <lc709203_getRegisterValue+0x36>
	}
	else
		return LC798_OK;
 800327c:	2301      	movs	r3, #1

}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	2000049c 	.word	0x2000049c

0800328c <ledAllOff>:




void ledAllOff()
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 8003292:	2300      	movs	r3, #0
 8003294:	71fb      	strb	r3, [r7, #7]
 8003296:	e008      	b.n	80032aa <ledAllOff+0x1e>
	{
		led_set_RGB(i,0x0,0,0);
 8003298:	79f8      	ldrb	r0, [r7, #7]
 800329a:	2300      	movs	r3, #0
 800329c:	2200      	movs	r2, #0
 800329e:	2100      	movs	r1, #0
 80032a0:	f001 f89e 	bl	80043e0 <led_set_RGB>
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	3301      	adds	r3, #1
 80032a8:	71fb      	strb	r3, [r7, #7]
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	2b8f      	cmp	r3, #143	; 0x8f
 80032ae:	d9f3      	bls.n	8003298 <ledAllOff+0xc>
	}

}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <ledRender>:

void ledRender()
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	af00      	add	r7, sp, #0
	led_render();
 80032be:	f001 f8f7 	bl	80044b0 <led_render>
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <ledSetFaceColour>:

void ledSetFaceColour(uint8_t face, uint8_t red, uint8_t green, uint8_t blue)
{
 80032c6:	b590      	push	{r4, r7, lr}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4604      	mov	r4, r0
 80032ce:	4608      	mov	r0, r1
 80032d0:	4611      	mov	r1, r2
 80032d2:	461a      	mov	r2, r3
 80032d4:	4623      	mov	r3, r4
 80032d6:	71fb      	strb	r3, [r7, #7]
 80032d8:	4603      	mov	r3, r0
 80032da:	71bb      	strb	r3, [r7, #6]
 80032dc:	460b      	mov	r3, r1
 80032de:	717b      	strb	r3, [r7, #5]
 80032e0:	4613      	mov	r3, r2
 80032e2:	713b      	strb	r3, [r7, #4]
	uint8_t offset = face * 12;
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	461a      	mov	r2, r3
 80032e8:	0052      	lsls	r2, r2, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	e008      	b.n	8003308 <ledSetFaceColour+0x42>
	{
		led_set_RGB(i,red,green,blue);
 80032f6:	793b      	ldrb	r3, [r7, #4]
 80032f8:	797a      	ldrb	r2, [r7, #5]
 80032fa:	79b9      	ldrb	r1, [r7, #6]
 80032fc:	7bf8      	ldrb	r0, [r7, #15]
 80032fe:	f001 f86f 	bl	80043e0 <led_set_RGB>
	for (uint8_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	3301      	adds	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	7bbb      	ldrb	r3, [r7, #14]
 800330a:	f103 020b 	add.w	r2, r3, #11
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	429a      	cmp	r2, r3
 8003312:	daf0      	bge.n	80032f6 <ledSetFaceColour+0x30>
	}

}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bd90      	pop	{r4, r7, pc}

0800331e <ledDance>:


void ledDance()
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
	int i=0;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
	while (i<10){
 8003328:	e040      	b.n	80033ac <ledDance+0x8e>
	 uint8_t angle = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	72fb      	strb	r3, [r7, #11]
	 const uint8_t angle_difference = 11;
 800332e:	230b      	movs	r3, #11
 8003330:	727b      	strb	r3, [r7, #9]
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8003332:	2300      	movs	r3, #0
 8003334:	72bb      	strb	r3, [r7, #10]
 8003336:	e02e      	b.n	8003396 <ledDance+0x78>
		  // Calculate color
			 HAL_Delay(100);
 8003338:	2064      	movs	r0, #100	; 0x64
 800333a:	f001 fba9 	bl	8004a90 <HAL_Delay>
			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 800333e:	7aba      	ldrb	r2, [r7, #10]
 8003340:	7a7b      	ldrb	r3, [r7, #9]
 8003342:	fb12 f303 	smulbb	r3, r2, r3
 8003346:	b2da      	uxtb	r2, r3
 8003348:	7afb      	ldrb	r3, [r7, #11]
 800334a:	4413      	add	r3, r2
 800334c:	b2db      	uxtb	r3, r3
 800334e:	227f      	movs	r2, #127	; 0x7f
 8003350:	21ff      	movs	r1, #255	; 0xff
 8003352:	4618      	mov	r0, r3
 8003354:	f001 fa64 	bl	8004820 <hsl_to_rgb>
 8003358:	6078      	str	r0, [r7, #4]
			// Set color
			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	b2d9      	uxtb	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	b2da      	uxtb	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	7ab8      	ldrb	r0, [r7, #10]
 800336c:	f001 f838 	bl	80043e0 <led_set_RGB>
			if (i>1)
 8003370:	7abb      	ldrb	r3, [r7, #10]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d907      	bls.n	8003386 <ledDance+0x68>
				led_set_RGB(i-1, 0,0,0);
 8003376:	7abb      	ldrb	r3, [r7, #10]
 8003378:	3b01      	subs	r3, #1
 800337a:	b2d8      	uxtb	r0, r3
 800337c:	2300      	movs	r3, #0
 800337e:	2200      	movs	r2, #0
 8003380:	2100      	movs	r1, #0
 8003382:	f001 f82d 	bl	80043e0 <led_set_RGB>
			++angle;
 8003386:	7afb      	ldrb	r3, [r7, #11]
 8003388:	3301      	adds	r3, #1
 800338a:	72fb      	strb	r3, [r7, #11]
			led_render();
 800338c:	f001 f890 	bl	80044b0 <led_render>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8003390:	7abb      	ldrb	r3, [r7, #10]
 8003392:	3301      	adds	r3, #1
 8003394:	72bb      	strb	r3, [r7, #10]
 8003396:	7abb      	ldrb	r3, [r7, #10]
 8003398:	2b8f      	cmp	r3, #143	; 0x8f
 800339a:	d9cd      	bls.n	8003338 <ledDance+0x1a>

		}
	  HAL_Delay(10);
 800339c:	200a      	movs	r0, #10
 800339e:	f001 fb77 	bl	8004a90 <HAL_Delay>
		// Write to LED
	  ledAllOff();
 80033a2:	f7ff ff73 	bl	800328c <ledAllOff>
	  i++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
	while (i<10){
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b09      	cmp	r3, #9
 80033b0:	ddbb      	ble.n	800332a <ledDance+0xc>
	}
}
 80033b2:	bf00      	nop
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <detectFace>:

};


int8_t detectFace(double x, double y)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	ed87 0b02 	vstr	d0, [r7, #8]
 80033c6:	ed87 1b00 	vstr	d1, [r7]
	uint8_t face;
	for (face=0; face<FACE_COUNT; face++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	75fb      	strb	r3, [r7, #23]
 80033ce:	e05d      	b.n	800348c <detectFace+0xd0>
	{
		if ( x > faceTable[face].xRTop && x < faceTable[face].xRBottom && y > faceTable[face].yRTop && y < faceTable[face].yRBottom )
 80033d0:	7dfa      	ldrb	r2, [r7, #23]
 80033d2:	4933      	ldr	r1, [pc, #204]	; (80034a0 <detectFace+0xe4>)
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	440b      	add	r3, r1
 80033de:	3302      	adds	r3, #2
 80033e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd f8b5 	bl	8000554 <__aeabi_i2d>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033f2:	f7fd fba9 	bl	8000b48 <__aeabi_dcmpgt>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d044      	beq.n	8003486 <detectFace+0xca>
 80033fc:	7dfa      	ldrb	r2, [r7, #23]
 80033fe:	4928      	ldr	r1, [pc, #160]	; (80034a0 <detectFace+0xe4>)
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	440b      	add	r3, r1
 800340a:	3304      	adds	r3, #4
 800340c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f89f 	bl	8000554 <__aeabi_i2d>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800341e:	f7fd fb75 	bl	8000b0c <__aeabi_dcmplt>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d02e      	beq.n	8003486 <detectFace+0xca>
 8003428:	7dfa      	ldrb	r2, [r7, #23]
 800342a:	491d      	ldr	r1, [pc, #116]	; (80034a0 <detectFace+0xe4>)
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	440b      	add	r3, r1
 8003436:	3306      	adds	r3, #6
 8003438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f889 	bl	8000554 <__aeabi_i2d>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800344a:	f7fd fb7d 	bl	8000b48 <__aeabi_dcmpgt>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d018      	beq.n	8003486 <detectFace+0xca>
 8003454:	7dfa      	ldrb	r2, [r7, #23]
 8003456:	4912      	ldr	r1, [pc, #72]	; (80034a0 <detectFace+0xe4>)
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	440b      	add	r3, r1
 8003462:	3308      	adds	r3, #8
 8003464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f873 	bl	8000554 <__aeabi_i2d>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003476:	f7fd fb49 	bl	8000b0c <__aeabi_dcmplt>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <detectFace+0xca>
			return face;
 8003480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003484:	e007      	b.n	8003496 <detectFace+0xda>
	for (face=0; face<FACE_COUNT; face++)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	3301      	adds	r3, #1
 800348a:	75fb      	strb	r3, [r7, #23]
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b0b      	cmp	r3, #11
 8003490:	d99e      	bls.n	80033d0 <detectFace+0x14>
	}
	return -1;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000150 	.word	0x20000150

080034a4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <MX_CRC_Init+0x20>)
 80034aa:	4a07      	ldr	r2, [pc, #28]	; (80034c8 <MX_CRC_Init+0x24>)
 80034ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80034ae:	4805      	ldr	r0, [pc, #20]	; (80034c4 <MX_CRC_Init+0x20>)
 80034b0:	f001 fc23 	bl	8004cfa <HAL_CRC_Init>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80034ba:	f000 fa87 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000494 	.word	0x20000494
 80034c8:	40023000 	.word	0x40023000

080034cc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <HAL_CRC_MspInit+0x3c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d10d      	bne.n	80034fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <HAL_CRC_MspInit+0x40>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	4a09      	ldr	r2, [pc, #36]	; (800350c <HAL_CRC_MspInit+0x40>)
 80034e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034ec:	6313      	str	r3, [r2, #48]	; 0x30
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_CRC_MspInit+0x40>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40023000 	.word	0x40023000
 800350c:	40023800 	.word	0x40023800

08003510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <MX_DMA_Init+0x3c>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a0b      	ldr	r2, [pc, #44]	; (800354c <MX_DMA_Init+0x3c>)
 8003520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <MX_DMA_Init+0x3c>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2100      	movs	r1, #0
 8003536:	2039      	movs	r0, #57	; 0x39
 8003538:	f001 fba9 	bl	8004c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800353c:	2039      	movs	r0, #57	; 0x39
 800353e:	f001 fbc2 	bl	8004cc6 <HAL_NVIC_EnableIRQ>

}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800

08003550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	4b38      	ldr	r3, [pc, #224]	; (800364c <MX_GPIO_Init+0xfc>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a37      	ldr	r2, [pc, #220]	; (800364c <MX_GPIO_Init+0xfc>)
 8003570:	f043 0304 	orr.w	r3, r3, #4
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b35      	ldr	r3, [pc, #212]	; (800364c <MX_GPIO_Init+0xfc>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4b31      	ldr	r3, [pc, #196]	; (800364c <MX_GPIO_Init+0xfc>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a30      	ldr	r2, [pc, #192]	; (800364c <MX_GPIO_Init+0xfc>)
 800358c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <MX_GPIO_Init+0xfc>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4b2a      	ldr	r3, [pc, #168]	; (800364c <MX_GPIO_Init+0xfc>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a29      	ldr	r2, [pc, #164]	; (800364c <MX_GPIO_Init+0xfc>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <MX_GPIO_Init+0xfc>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <MX_GPIO_Init+0xfc>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <MX_GPIO_Init+0xfc>)
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <MX_GPIO_Init+0xfc>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80035d6:	2200      	movs	r2, #0
 80035d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035dc:	481c      	ldr	r0, [pc, #112]	; (8003650 <MX_GPIO_Init+0x100>)
 80035de:	f002 fc55 	bl	8005e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, GPIO_PIN_RESET);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2110      	movs	r1, #16
 80035e6:	481b      	ldr	r0, [pc, #108]	; (8003654 <MX_GPIO_Init+0x104>)
 80035e8:	f002 fc50 	bl	8005e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80035ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f2:	2301      	movs	r3, #1
 80035f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4812      	ldr	r0, [pc, #72]	; (8003650 <MX_GPIO_Init+0x100>)
 8003606:	f002 fabd 	bl	8005b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_MEM_CS_Pin;
 800360a:	2310      	movs	r3, #16
 800360c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360e:	2301      	movs	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_MEM_CS_GPIO_Port, &GPIO_InitStruct);
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	4619      	mov	r1, r3
 8003620:	480c      	ldr	r0, [pc, #48]	; (8003654 <MX_GPIO_Init+0x104>)
 8003622:	f002 faaf 	bl	8005b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8003626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800362a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800362c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8003636:	f107 0314 	add.w	r3, r7, #20
 800363a:	4619      	mov	r1, r3
 800363c:	4806      	ldr	r0, [pc, #24]	; (8003658 <MX_GPIO_Init+0x108>)
 800363e:	f002 faa1 	bl	8005b84 <HAL_GPIO_Init>

}
 8003642:	bf00      	nop
 8003644:	3728      	adds	r7, #40	; 0x28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800
 8003650:	40020800 	.word	0x40020800
 8003654:	40020000 	.word	0x40020000
 8003658:	40020400 	.word	0x40020400

0800365c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003660:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <MX_I2C1_Init+0x54>)
 8003662:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <MX_I2C1_Init+0x58>)
 8003664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <MX_I2C1_Init+0x54>)
 8003668:	f242 7210 	movw	r2, #10000	; 0x2710
 800366c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <MX_I2C1_Init+0x54>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <MX_I2C1_Init+0x54>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <MX_I2C1_Init+0x54>)
 800367c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003680:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <MX_I2C1_Init+0x54>)
 8003684:	2200      	movs	r2, #0
 8003686:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <MX_I2C1_Init+0x54>)
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <MX_I2C1_Init+0x54>)
 8003690:	2200      	movs	r2, #0
 8003692:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <MX_I2C1_Init+0x54>)
 8003696:	2200      	movs	r2, #0
 8003698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800369a:	4805      	ldr	r0, [pc, #20]	; (80036b0 <MX_I2C1_Init+0x54>)
 800369c:	f002 fc10 	bl	8005ec0 <HAL_I2C_Init>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80036a6:	f000 f991 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	2000049c 	.word	0x2000049c
 80036b4:	40005400 	.word	0x40005400

080036b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a19      	ldr	r2, [pc, #100]	; (800373c <HAL_I2C_MspInit+0x84>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d12b      	bne.n	8003732 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	4b18      	ldr	r3, [pc, #96]	; (8003740 <HAL_I2C_MspInit+0x88>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	4a17      	ldr	r2, [pc, #92]	; (8003740 <HAL_I2C_MspInit+0x88>)
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_I2C_MspInit+0x88>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036f6:	23c0      	movs	r3, #192	; 0xc0
 80036f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036fa:	2312      	movs	r3, #18
 80036fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003702:	2303      	movs	r3, #3
 8003704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003706:	2304      	movs	r3, #4
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370a:	f107 0314 	add.w	r3, r7, #20
 800370e:	4619      	mov	r1, r3
 8003710:	480c      	ldr	r0, [pc, #48]	; (8003744 <HAL_I2C_MspInit+0x8c>)
 8003712:	f002 fa37 	bl	8005b84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_I2C_MspInit+0x88>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	4a08      	ldr	r2, [pc, #32]	; (8003740 <HAL_I2C_MspInit+0x88>)
 8003720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003724:	6413      	str	r3, [r2, #64]	; 0x40
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_I2C_MspInit+0x88>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003732:	bf00      	nop
 8003734:	3728      	adds	r7, #40	; 0x28
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40005400 	.word	0x40005400
 8003740:	40023800 	.word	0x40023800
 8003744:	40020400 	.word	0x40020400

08003748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b0a7      	sub	sp, #156	; 0x9c
 800374c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800374e:	f001 f92d 	bl	80049ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003752:	f000 f8d1 	bl	80038f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003756:	f7ff fefb 	bl	8003550 <MX_GPIO_Init>
  MX_RTC_Init();
 800375a:	f000 f93d 	bl	80039d8 <MX_RTC_Init>
  MX_DMA_Init();
 800375e:	f7ff fed7 	bl	8003510 <MX_DMA_Init>
  MX_I2C1_Init();
 8003762:	f7ff ff7b 	bl	800365c <MX_I2C1_Init>
  MX_TIM1_Init();
 8003766:	f000 fb45 	bl	8003df4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800376a:	f000 fc71 	bl	8004050 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800376e:	f000 f985 	bl	8003a7c <MX_SPI1_Init>
  MX_CRC_Init();
 8003772:	f7ff fe97 	bl	80034a4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  ledAllOff();
 8003776:	f7ff fd89 	bl	800328c <ledAllOff>
  sysConfigInit();
 800377a:	f000 fd0d 	bl	8004198 <sysConfigInit>
  systemConfig_t * config = systemConfigGet();
 800377e:	f000 fd2b 	bl	80041d8 <systemConfigGet>
 8003782:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  taskItems_t * taskItems = &config->configItems.tasksConfig;
 8003786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800378a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  dodecaItems_t *dodecaItems = &config->configItems.dodecaConfig;
 800378e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003792:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8003796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  taskInit(taskItems);
 800379a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800379e:	f000 fd89 	bl	80042b4 <taskInit>
  dodecaInit(dodecaItems);
 80037a2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80037a6:	f7fe fe85 	bl	80024b4 <dodecaInit>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
*/
  if (SYS_CONFIG_BAD_DATA == sysConfigRead())
 80037aa:	f000 fd4d 	bl	8004248 <sysConfigRead>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d103      	bne.n	80037bc <main+0x74>
  {
	  taskSetDefaultAll();
 80037b4:	f000 fd9f 	bl	80042f6 <taskSetDefaultAll>
	  sysConfigSave();
 80037b8:	f000 fd60 	bl	800427c <sysConfigSave>





  ConsoleInit();
 80037bc:	f7fd fce8 	bl	8001190 <ConsoleInit>
  ConsoleSendString("Console Initialised\n");
 80037c0:	4847      	ldr	r0, [pc, #284]	; (80038e0 <main+0x198>)
 80037c2:	f7fd fe7e 	bl	80014c2 <ConsoleSendString>
  HAL_Delay(100);
 80037c6:	2064      	movs	r0, #100	; 0x64
 80037c8:	f001 f962 	bl	8004a90 <HAL_Delay>
  if (MPU6050_Init(&hi2c1) == 1)
 80037cc:	4845      	ldr	r0, [pc, #276]	; (80038e4 <main+0x19c>)
 80037ce:	f7ff f808 	bl	80027e2 <MPU6050_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d103      	bne.n	80037e0 <main+0x98>
  {
	  ConsoleSendString("** ERROR Initialising MNP6050!\n");
 80037d8:	4843      	ldr	r0, [pc, #268]	; (80038e8 <main+0x1a0>)
 80037da:	f7fd fe72 	bl	80014c2 <ConsoleSendString>
 80037de:	e002      	b.n	80037e6 <main+0x9e>
  }
  else
  {
	  ConsoleSendString("MPU6050 Initialised\n");
 80037e0:	4842      	ldr	r0, [pc, #264]	; (80038ec <main+0x1a4>)
 80037e2:	f7fd fe6e 	bl	80014c2 <ConsoleSendString>
  }
  ConsolePrintPrompt();
 80037e6:	f7fd fcfd 	bl	80011e4 <ConsolePrintPrompt>
  uint8_t lastFace = 255;
 80037ea:	23ff      	movs	r3, #255	; 0xff
 80037ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 80037f0:	f7fd fd06 	bl	8001200 <ConsoleProcess>

	  MPU6050_t data;
	uint8_t face;
	char msg[30];
	for (uint8_t cnt=0;cnt<20;cnt++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80037fa:	e009      	b.n	8003810 <main+0xc8>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 80037fc:	463b      	mov	r3, r7
 80037fe:	4619      	mov	r1, r3
 8003800:	4838      	ldr	r0, [pc, #224]	; (80038e4 <main+0x19c>)
 8003802:	f7ff f901 	bl	8002a08 <MPU6050_Read_All>
	for (uint8_t cnt=0;cnt<20;cnt++)
 8003806:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800380a:	3301      	adds	r3, #1
 800380c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8003810:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003814:	2b13      	cmp	r3, #19
 8003816:	d9f1      	bls.n	80037fc <main+0xb4>
	}

	face = detectFace(data.KalmanAngleX, data.KalmanAngleY);
 8003818:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800381c:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8003820:	eeb0 1a46 	vmov.f32	s2, s12
 8003824:	eef0 1a66 	vmov.f32	s3, s13
 8003828:	eeb0 0a47 	vmov.f32	s0, s14
 800382c:	eef0 0a67 	vmov.f32	s1, s15
 8003830:	f7ff fdc4 	bl	80033bc <detectFace>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (255 == face)
 800383a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800383e:	2bff      	cmp	r3, #255	; 0xff
 8003840:	d102      	bne.n	8003848 <main+0x100>
	{
		ledAllOff();
 8003842:	f7ff fd23 	bl	800328c <ledAllOff>
 8003846:	e046      	b.n	80038d6 <main+0x18e>
	}

	else if (face != lastFace)
 8003848:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800384c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003850:	429a      	cmp	r2, r3
 8003852:	d040      	beq.n	80038d6 <main+0x18e>
	{
		lastFace = face;
 8003854:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003858:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		sprintf(msg,"Angle X: %f Y: %f",data.KalmanAngleX, data.KalmanAngleY);
 800385c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003860:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003864:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003868:	e9cd 2300 	strd	r2, r3, [sp]
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	491f      	ldr	r1, [pc, #124]	; (80038f0 <main+0x1a8>)
 8003872:	4620      	mov	r0, r4
 8003874:	f007 fada 	bl	800ae2c <siprintf>
		ConsoleSendLine(msg);
 8003878:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fe2d 	bl	80014dc <ConsoleSendLine>

		uint32_t rgb_color = hsl_to_rgb((face*30), 255, 127);
 8003882:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003886:	461a      	mov	r2, r3
 8003888:	0112      	lsls	r2, r2, #4
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	b2db      	uxtb	r3, r3
 8003890:	227f      	movs	r2, #127	; 0x7f
 8003892:	21ff      	movs	r1, #255	; 0xff
 8003894:	4618      	mov	r0, r3
 8003896:	f000 ffc3 	bl	8004820 <hsl_to_rgb>
 800389a:	67b8      	str	r0, [r7, #120]	; 0x78

		ledAllOff();
 800389c:	f7ff fcf6 	bl	800328c <ledAllOff>
		ledSetFaceColour(face, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 80038a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	b2d9      	uxtb	r1, r3
 80038a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f897 007f 	ldrb.w	r0, [r7, #127]	; 0x7f
 80038b4:	f7ff fd07 	bl	80032c6 <ledSetFaceColour>
		ledRender();
 80038b8:	f7ff fcff 	bl	80032ba <ledRender>

		sprintf(msg,"Detected face %i is up",face);
 80038bc:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80038c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038c4:	490b      	ldr	r1, [pc, #44]	; (80038f4 <main+0x1ac>)
 80038c6:	4618      	mov	r0, r3
 80038c8:	f007 fab0 	bl	800ae2c <siprintf>
		ConsoleSendLine(msg);
 80038cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd fe03 	bl	80014dc <ConsoleSendLine>
	}
	 HAL_Delay(200);
 80038d6:	20c8      	movs	r0, #200	; 0xc8
 80038d8:	f001 f8da 	bl	8004a90 <HAL_Delay>
  {
 80038dc:	e788      	b.n	80037f0 <main+0xa8>
 80038de:	bf00      	nop
 80038e0:	0800e7ec 	.word	0x0800e7ec
 80038e4:	2000049c 	.word	0x2000049c
 80038e8:	0800e804 	.word	0x0800e804
 80038ec:	0800e824 	.word	0x0800e824
 80038f0:	0800e83c 	.word	0x0800e83c
 80038f4:	0800e850 	.word	0x0800e850

080038f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b094      	sub	sp, #80	; 0x50
 80038fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038fe:	f107 0320 	add.w	r3, r7, #32
 8003902:	2230      	movs	r2, #48	; 0x30
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f006 fd2e 	bl	800a368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <SystemClock_Config+0xcc>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <SystemClock_Config+0xcc>)
 8003926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392a:	6413      	str	r3, [r2, #64]	; 0x40
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <SystemClock_Config+0xcc>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003938:	2300      	movs	r3, #0
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <SystemClock_Config+0xd0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a21      	ldr	r2, [pc, #132]	; (80039c8 <SystemClock_Config+0xd0>)
 8003942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <SystemClock_Config+0xd0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003954:	2305      	movs	r3, #5
 8003956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800395e:	2301      	movs	r3, #1
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003962:	2302      	movs	r3, #2
 8003964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800396c:	230c      	movs	r3, #12
 800396e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003970:	2360      	movs	r3, #96	; 0x60
 8003972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003974:	2302      	movs	r3, #2
 8003976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003978:	2304      	movs	r3, #4
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800397c:	f107 0320 	add.w	r3, r7, #32
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fa5d 	bl	8006e40 <HAL_RCC_OscConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800398c:	f000 f81e 	bl	80039cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003990:	230f      	movs	r3, #15
 8003992:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003994:	2302      	movs	r3, #2
 8003996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800399c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80039a6:	f107 030c 	add.w	r3, r7, #12
 80039aa:	2103      	movs	r1, #3
 80039ac:	4618      	mov	r0, r3
 80039ae:	f003 fcbf 	bl	8007330 <HAL_RCC_ClockConfig>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80039b8:	f000 f808 	bl	80039cc <Error_Handler>
  }
}
 80039bc:	bf00      	nop
 80039be:	3750      	adds	r7, #80	; 0x50
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40007000 	.word	0x40007000

080039cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039d0:	b672      	cpsid	i
}
 80039d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039d4:	e7fe      	b.n	80039d4 <Error_Handler+0x8>
	...

080039d8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80039dc:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <MX_RTC_Init+0x44>)
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <MX_RTC_Init+0x48>)
 80039e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80039e2:	4b0e      	ldr	r3, [pc, #56]	; (8003a1c <MX_RTC_Init+0x44>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <MX_RTC_Init+0x44>)
 80039ea:	227f      	movs	r2, #127	; 0x7f
 80039ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80039ee:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <MX_RTC_Init+0x44>)
 80039f0:	22ff      	movs	r2, #255	; 0xff
 80039f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <MX_RTC_Init+0x44>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <MX_RTC_Init+0x44>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <MX_RTC_Init+0x44>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a06:	4805      	ldr	r0, [pc, #20]	; (8003a1c <MX_RTC_Init+0x44>)
 8003a08:	f003 ff62 	bl	80078d0 <HAL_RTC_Init>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003a12:	f7ff ffdb 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200004f0 	.word	0x200004f0
 8003a20:	40002800 	.word	0x40002800

08003a24 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a2c:	f107 0308 	add.w	r3, r7, #8
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
 8003a3c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <HAL_RTC_MspInit+0x50>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d111      	bne.n	8003a6c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a50:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a52:	f107 0308 	add.w	r3, r7, #8
 8003a56:	4618      	mov	r0, r3
 8003a58:	f003 fe4a 	bl	80076f0 <HAL_RCCEx_PeriphCLKConfig>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003a62:	f7ff ffb3 	bl	80039cc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_RTC_MspInit+0x54>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40002800 	.word	0x40002800
 8003a78:	42470e3c 	.word	0x42470e3c

08003a7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003a82:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <MX_SPI1_Init+0x68>)
 8003a84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a8e:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003ac8:	220a      	movs	r2, #10
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003acc:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <MX_SPI1_Init+0x64>)
 8003ace:	f004 f9fd 	bl	8007ecc <HAL_SPI_Init>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ad8:	f7ff ff78 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000510 	.word	0x20000510
 8003ae4:	40013000 	.word	0x40013000

08003ae8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <HAL_SPI_MspInit+0x84>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d12b      	bne.n	8003b62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_SPI_MspInit+0x88>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <HAL_SPI_MspInit+0x88>)
 8003b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b18:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_SPI_MspInit+0x88>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_SPI_MspInit+0x88>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_SPI_MspInit+0x88>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6313      	str	r3, [r2, #48]	; 0x30
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_SPI_MspInit+0x88>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_MEM_SCK_Pin|SPI_MEM_MISO_Pin|SPI_MEM_MOSI_Pin;
 8003b42:	23e0      	movs	r3, #224	; 0xe0
 8003b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b46:	2302      	movs	r3, #2
 8003b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b52:	2305      	movs	r3, #5
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b56:	f107 0314 	add.w	r3, r7, #20
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4805      	ldr	r0, [pc, #20]	; (8003b74 <HAL_SPI_MspInit+0x8c>)
 8003b5e:	f002 f811 	bl	8005b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003b62:	bf00      	nop
 8003b64:	3728      	adds	r7, #40	; 0x28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40013000 	.word	0x40013000
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40020000 	.word	0x40020000

08003b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	4a0f      	ldr	r2, [pc, #60]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800

08003bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bcc:	e7fe      	b.n	8003bcc <NMI_Handler+0x4>

08003bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bd2:	e7fe      	b.n	8003bd2 <HardFault_Handler+0x4>

08003bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd8:	e7fe      	b.n	8003bd8 <MemManage_Handler+0x4>

08003bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bde:	e7fe      	b.n	8003bde <BusFault_Handler+0x4>

08003be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003be4:	e7fe      	b.n	8003be4 <UsageFault_Handler+0x4>

08003be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c02:	b480      	push	{r7}
 8003c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c14:	f000 ff1c 	bl	8004a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <USART1_IRQHandler+0x10>)
 8003c22:	f005 fbfb 	bl	800941c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000614 	.word	0x20000614

08003c30 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <DMA2_Stream1_IRQHandler+0x10>)
 8003c36:	f001 fa47 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200005b4 	.word	0x200005b4

08003c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
	return 1;
 8003c48:	2301      	movs	r3, #1
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_kill>:

int _kill(int pid, int sig)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c5e:	f006 fb49 	bl	800a2f4 <__errno>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2216      	movs	r2, #22
 8003c66:	601a      	str	r2, [r3, #0]
	return -1;
 8003c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <_exit>:

void _exit (int status)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ffe7 	bl	8003c54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c86:	e7fe      	b.n	8003c86 <_exit+0x12>

08003c88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e00a      	b.n	8003cb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c9a:	f3af 8000 	nop.w
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	60ba      	str	r2, [r7, #8]
 8003ca6:	b2ca      	uxtb	r2, r1
 8003ca8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3301      	adds	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	dbf0      	blt.n	8003c9a <_read+0x12>
	}

return len;
 8003cb8:	687b      	ldr	r3, [r7, #4]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b086      	sub	sp, #24
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	e009      	b.n	8003ce8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	60ba      	str	r2, [r7, #8]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	dbf1      	blt.n	8003cd4 <_write+0x12>
	}
	return len;
 8003cf0:	687b      	ldr	r3, [r7, #4]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_close>:

int _close(int file)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
	return -1;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d22:	605a      	str	r2, [r3, #4]
	return 0;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_isatty>:

int _isatty(int file)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
	return 1;
 8003d3a:	2301      	movs	r3, #1
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
	return 0;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <_sbrk+0x5c>)
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <_sbrk+0x60>)
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <_sbrk+0x64>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <_sbrk+0x64>)
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <_sbrk+0x68>)
 8003d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <_sbrk+0x64>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d207      	bcs.n	8003da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d94:	f006 faae 	bl	800a2f4 <__errno>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003da2:	e009      	b.n	8003db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003da4:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <_sbrk+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <_sbrk+0x64>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <_sbrk+0x64>)
 8003db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20020000 	.word	0x20020000
 8003dc4:	00000400 	.word	0x00000400
 8003dc8:	20000568 	.word	0x20000568
 8003dcc:	20000d80 	.word	0x20000d80

08003dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <SystemInit+0x20>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <SystemInit+0x20>)
 8003ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b096      	sub	sp, #88	; 0x58
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	611a      	str	r2, [r3, #16]
 8003e22:	615a      	str	r2, [r3, #20]
 8003e24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	2220      	movs	r2, #32
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f006 fa9b 	bl	800a368 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e32:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003e34:	4a3e      	ldr	r2, [pc, #248]	; (8003f30 <MX_TIM1_Init+0x13c>)
 8003e36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e38:	4b3c      	ldr	r3, [pc, #240]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 8003e44:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003e46:	227c      	movs	r2, #124	; 0x7c
 8003e48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e4a:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e50:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e56:	4b35      	ldr	r3, [pc, #212]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e5c:	4833      	ldr	r0, [pc, #204]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003e5e:	f004 f8be 	bl	8007fde <HAL_TIM_Base_Init>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003e68:	f7ff fdb0 	bl	80039cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e76:	4619      	mov	r1, r3
 8003e78:	482c      	ldr	r0, [pc, #176]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003e7a:	f004 fc91 	bl	80087a0 <HAL_TIM_ConfigClockSource>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003e84:	f7ff fda2 	bl	80039cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e88:	4828      	ldr	r0, [pc, #160]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003e8a:	f004 f8f7 	bl	800807c <HAL_TIM_PWM_Init>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003e94:	f7ff fd9a 	bl	80039cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ea0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4821      	ldr	r0, [pc, #132]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003ea8:	f005 f8e8 	bl	800907c <HAL_TIMEx_MasterConfigSynchronization>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003eb2:	f7ff fd8b 	bl	80039cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003eb6:	2360      	movs	r3, #96	; 0x60
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4814      	ldr	r0, [pc, #80]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003edc:	f004 fb9e 	bl	800861c <HAL_TIM_PWM_ConfigChannel>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003ee6:	f7ff fd71 	bl	80039cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f08:	1d3b      	adds	r3, r7, #4
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4807      	ldr	r0, [pc, #28]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003f0e:	f005 f923 	bl	8009158 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003f18:	f7ff fd58 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f1c:	4803      	ldr	r0, [pc, #12]	; (8003f2c <MX_TIM1_Init+0x138>)
 8003f1e:	f000 f85d 	bl	8003fdc <HAL_TIM_MspPostInit>

}
 8003f22:	bf00      	nop
 8003f24:	3758      	adds	r7, #88	; 0x58
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	2000056c 	.word	0x2000056c
 8003f30:	40010000 	.word	0x40010000

08003f34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <HAL_TIM_Base_MspInit+0x98>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d13e      	bne.n	8003fc4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6453      	str	r3, [r2, #68]	; 0x44
 8003f56:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <HAL_TIM_Base_MspInit+0x9c>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8003f62:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003f64:	4a1c      	ldr	r2, [pc, #112]	; (8003fd8 <HAL_TIM_Base_MspInit+0xa4>)
 8003f66:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003f68:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003f6a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003f6e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f70:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003f72:	2240      	movs	r2, #64	; 0x40
 8003f74:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f82:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003f86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f8a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f92:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f9a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003f9c:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003fa8:	480a      	ldr	r0, [pc, #40]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003faa:	f000 fef5 	bl	8004d98 <HAL_DMA_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003fb4:	f7ff fd0a 	bl	80039cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a06      	ldr	r2, [pc, #24]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8003fbe:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <HAL_TIM_Base_MspInit+0xa0>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	200005b4 	.word	0x200005b4
 8003fd8:	40026428 	.word	0x40026428

08003fdc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a12      	ldr	r2, [pc, #72]	; (8004044 <HAL_TIM_MspPostInit+0x68>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d11e      	bne.n	800403c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_TIM_MspPostInit+0x6c>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4a10      	ldr	r2, [pc, #64]	; (8004048 <HAL_TIM_MspPostInit+0x6c>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6313      	str	r3, [r2, #48]	; 0x30
 800400e:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <HAL_TIM_MspPostInit+0x6c>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 800401a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800401e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004020:	2302      	movs	r3, #2
 8004022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800402c:	2301      	movs	r3, #1
 800402e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	4619      	mov	r1, r3
 8004036:	4805      	ldr	r0, [pc, #20]	; (800404c <HAL_TIM_MspPostInit+0x70>)
 8004038:	f001 fda4 	bl	8005b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800403c:	bf00      	nop
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40010000 	.word	0x40010000
 8004048:	40023800 	.word	0x40023800
 800404c:	40020000 	.word	0x40020000

08004050 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004056:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <MX_USART1_UART_Init+0x50>)
 8004058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <MX_USART1_UART_Init+0x4c>)
 800405c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004064:	2200      	movs	r2, #0
 8004066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <MX_USART1_UART_Init+0x4c>)
 800406a:	2200      	movs	r2, #0
 800406c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004070:	2200      	movs	r2, #0
 8004072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004076:	220c      	movs	r2, #12
 8004078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <MX_USART1_UART_Init+0x4c>)
 800407c:	2200      	movs	r2, #0
 800407e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004082:	2200      	movs	r2, #0
 8004084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004086:	4805      	ldr	r0, [pc, #20]	; (800409c <MX_USART1_UART_Init+0x4c>)
 8004088:	f005 f8b8 	bl	80091fc <HAL_UART_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004092:	f7ff fc9b 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000614 	.word	0x20000614
 80040a0:	40011000 	.word	0x40011000

080040a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	; 0x28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <HAL_UART_MspInit+0x94>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d134      	bne.n	8004130 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	4b1c      	ldr	r3, [pc, #112]	; (800413c <HAL_UART_MspInit+0x98>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	4a1b      	ldr	r2, [pc, #108]	; (800413c <HAL_UART_MspInit+0x98>)
 80040d0:	f043 0310 	orr.w	r3, r3, #16
 80040d4:	6453      	str	r3, [r2, #68]	; 0x44
 80040d6:	4b19      	ldr	r3, [pc, #100]	; (800413c <HAL_UART_MspInit+0x98>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <HAL_UART_MspInit+0x98>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	4a14      	ldr	r2, [pc, #80]	; (800413c <HAL_UART_MspInit+0x98>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6313      	str	r3, [r2, #48]	; 0x30
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_UART_MspInit+0x98>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410c:	2303      	movs	r3, #3
 800410e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004110:	2307      	movs	r3, #7
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004114:	f107 0314 	add.w	r3, r7, #20
 8004118:	4619      	mov	r1, r3
 800411a:	4809      	ldr	r0, [pc, #36]	; (8004140 <HAL_UART_MspInit+0x9c>)
 800411c:	f001 fd32 	bl	8005b84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004120:	2200      	movs	r2, #0
 8004122:	2100      	movs	r1, #0
 8004124:	2025      	movs	r0, #37	; 0x25
 8004126:	f000 fdb2 	bl	8004c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800412a:	2025      	movs	r0, #37	; 0x25
 800412c:	f000 fdcb 	bl	8004cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004130:	bf00      	nop
 8004132:	3728      	adds	r7, #40	; 0x28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40011000 	.word	0x40011000
 800413c:	40023800 	.word	0x40023800
 8004140:	40020000 	.word	0x40020000

08004144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800417c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004148:	480d      	ldr	r0, [pc, #52]	; (8004180 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800414a:	490e      	ldr	r1, [pc, #56]	; (8004184 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800414c:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800414e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004150:	e002      	b.n	8004158 <LoopCopyDataInit>

08004152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004156:	3304      	adds	r3, #4

08004158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800415a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800415c:	d3f9      	bcc.n	8004152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800415e:	4a0b      	ldr	r2, [pc, #44]	; (800418c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004160:	4c0b      	ldr	r4, [pc, #44]	; (8004190 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004164:	e001      	b.n	800416a <LoopFillZerobss>

08004166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004168:	3204      	adds	r2, #4

0800416a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800416a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800416c:	d3fb      	bcc.n	8004166 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800416e:	f7ff fe2f 	bl	8003dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004172:	f006 f8c5 	bl	800a300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004176:	f7ff fae7 	bl	8003748 <main>
  bx  lr    
 800417a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800417c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004184:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8004188:	0800f230 	.word	0x0800f230
  ldr r2, =_sbss
 800418c:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 8004190:	20000d80 	.word	0x20000d80

08004194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004194:	e7fe      	b.n	8004194 <ADC_IRQHandler>
	...

08004198 <sysConfigInit>:
static uint16_t SYS_CONFIG_SIZE_DODEC;



void sysConfigInit()
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
	SYS_CONFIG_SIZE = sizeof(systemConfig.configItems)/4;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <sysConfigInit+0x30>)
 800419e:	f44f 729a 	mov.w	r2, #308	; 0x134
 80041a2:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_ALL_SIZE = sizeof(systemConfig)/4;
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <sysConfigInit+0x34>)
 80041a6:	f240 1235 	movw	r2, #309	; 0x135
 80041aa:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_SIZE_TASK = sizeof(systemConfig.configItems.tasksConfig);
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <sysConfigInit+0x38>)
 80041ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80041b2:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_SIZE_DODEC = sizeof(systemConfig.configItems.dodecaConfig);
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <sysConfigInit+0x3c>)
 80041b6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80041ba:	801a      	strh	r2, [r3, #0]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000b2c 	.word	0x20000b2c
 80041cc:	20000b2e 	.word	0x20000b2e
 80041d0:	20000b30 	.word	0x20000b30
 80041d4:	20000b32 	.word	0x20000b32

080041d8 <systemConfigGet>:

systemConfig_t *systemConfigGet()
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
	return &systemConfig;
 80041dc:	4b02      	ldr	r3, [pc, #8]	; (80041e8 <systemConfigGet+0x10>)
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	20000658 	.word	0x20000658

080041ec <sysConfigValidateConfig>:

static eSYSConfig_t sysConfigValidateConfig()
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 80041f2:	f000 f813 	bl	800421c <sysConfigCalcChecksum>
 80041f6:	6078      	str	r0, [r7, #4]
	uint32_t crcRO = systemConfigRO->checksum;
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <sysConfigValidateConfig+0x2c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8004200:	603b      	str	r3, [r7, #0]
	if (crc == crcRO)
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d101      	bne.n	800420e <sysConfigValidateConfig+0x22>
		return SYS_CONFIG_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <sysConfigValidateConfig+0x24>
	else
		return SYS_CONFIG_BAD_CHECKSUM;
 800420e:	2301      	movs	r3, #1
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	200001cc 	.word	0x200001cc

0800421c <sysConfigCalcChecksum>:

uint32_t sysConfigCalcChecksum()
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
	uint32_t crc;
	crc =  HAL_CRC_Calculate(&hcrc,  (uint32_t*)&systemConfig.configItems, SYS_CONFIG_SIZE);
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <sysConfigCalcChecksum+0x20>)
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4905      	ldr	r1, [pc, #20]	; (8004240 <sysConfigCalcChecksum+0x24>)
 800422a:	4806      	ldr	r0, [pc, #24]	; (8004244 <sysConfigCalcChecksum+0x28>)
 800422c:	f000 fd81 	bl	8004d32 <HAL_CRC_Calculate>
 8004230:	6078      	str	r0, [r7, #4]
	return crc;
 8004232:	687b      	ldr	r3, [r7, #4]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000b2c 	.word	0x20000b2c
 8004240:	20000658 	.word	0x20000658
 8004244:	20000494 	.word	0x20000494

08004248 <sysConfigRead>:




eSYSConfig_t sysConfigRead()
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
	Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,SYS_CONFIG_ALL_SIZE );
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <sysConfigRead+0x28>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a08      	ldr	r2, [pc, #32]	; (8004274 <sysConfigRead+0x2c>)
 8004252:	8812      	ldrh	r2, [r2, #0]
 8004254:	4908      	ldr	r1, [pc, #32]	; (8004278 <sysConfigRead+0x30>)
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe faa2 	bl	80027a0 <Flash_Read_Data>
	//Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,5 );
	if (SYS_CONFIG_BAD_CHECKSUM == sysConfigValidateConfig())
 800425c:	f7ff ffc6 	bl	80041ec <sysConfigValidateConfig>
 8004260:	4603      	mov	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <sysConfigRead+0x22>
		return SYS_CONFIG_BAD_DATA;
 8004266:	2302      	movs	r3, #2
 8004268:	e000      	b.n	800426c <sysConfigRead+0x24>
	else
		return TASK_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	0800edb0 	.word	0x0800edb0
 8004274:	20000b2e 	.word	0x20000b2e
 8004278:	20000658 	.word	0x20000658

0800427c <sysConfigSave>:

void sysConfigSave()
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 8004282:	f7ff ffcb 	bl	800421c <sysConfigCalcChecksum>
 8004286:	6078      	str	r0, [r7, #4]
	systemConfig.checksum = crc;
 8004288:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <sysConfigSave+0x2c>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c2 34d0 	str.w	r3, [r2, #1232]	; 0x4d0

	Flash_Write_Data(SYSTEM_CONFIG_ADDRESS, (uint32_t *)&systemConfig, SYS_CONFIG_ALL_SIZE);
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <sysConfigSave+0x30>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a06      	ldr	r2, [pc, #24]	; (80042b0 <sysConfigSave+0x34>)
 8004296:	8812      	ldrh	r2, [r2, #0]
 8004298:	4903      	ldr	r1, [pc, #12]	; (80042a8 <sysConfigSave+0x2c>)
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fa22 	bl	80026e4 <Flash_Write_Data>
	//TODO: Handle a Confug Save Error - Hard Fault!
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000658 	.word	0x20000658
 80042ac:	0800edb0 	.word	0x0800edb0
 80042b0:	20000b2e 	.word	0x20000b2e

080042b4 <taskInit>:




eTaskError_t taskInit(taskItems_t *taskItems)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	taskItemsPtr = taskItems;
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <taskInit+0x1c>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6013      	str	r3, [r2, #0]
	return TASK_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	20000b34 	.word	0x20000b34

080042d4 <taskValidateTaskId>:


eTaskError_t taskValidateTaskId(uint8_t id)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
	if (id > TASK_COUNT_MAX)
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	2b14      	cmp	r3, #20
 80042e2:	d901      	bls.n	80042e8 <taskValidateTaskId+0x14>
		return TASK_INVALID_ID;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <taskValidateTaskId+0x16>
	else
		return TASK_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <taskSetDefaultAll>:

eTaskError_t taskSetDefaultAll()
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
	for (uint8_t t=0;t<TASK_COUNT_MAX;t++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	71fb      	strb	r3, [r7, #7]
 8004300:	e006      	b.n	8004310 <taskSetDefaultAll+0x1a>
	{
		taskSetDefault(t);
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 f80b 	bl	8004320 <taskSetDefault>
	for (uint8_t t=0;t<TASK_COUNT_MAX;t++)
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	3301      	adds	r3, #1
 800430e:	71fb      	strb	r3, [r7, #7]
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	2b13      	cmp	r3, #19
 8004314:	d9f5      	bls.n	8004302 <taskSetDefaultAll+0xc>
	}
	return TASK_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <taskSetDefault>:

eTaskError_t taskSetDefault(uint8_t id)
{
 8004320:	b5b0      	push	{r4, r5, r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
	if (TASK_INVALID_ID == taskValidateTaskId(id)) return TASK_INVALID_ID;
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ffd1 	bl	80042d4 <taskValidateTaskId>
 8004332:	4603      	mov	r3, r0
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <taskSetDefault+0x1c>
 8004338:	2301      	movs	r3, #1
 800433a:	e01b      	b.n	8004374 <taskSetDefault+0x54>

	taskItem_t *item = taskGet(id);
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f81e 	bl	8004380 <taskGet>
 8004344:	60f8      	str	r0, [r7, #12]


	item->id = id;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	79fa      	ldrb	r2, [r7, #7]
 800434a:	701a      	strb	r2, [r3, #0]
	item->colour = 0;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	621a      	str	r2, [r3, #32]
	item->defaultMinTime = TASK_DEFAULT_MIN_TIME;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	22aa      	movs	r2, #170	; 0xaa
 8004356:	849a      	strh	r2, [r3, #36]	; 0x24
	item->defaultMaxTime = TASK_DEFAULT_MAX_TIME;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	22bb      	movs	r2, #187	; 0xbb
 800435c:	84da      	strh	r2, [r3, #38]	; 0x26
	strcpy(item->name,TASK_DEFAULT_NAME);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3301      	adds	r3, #1
 8004362:	4a06      	ldr	r2, [pc, #24]	; (800437c <taskSetDefault+0x5c>)
 8004364:	461c      	mov	r4, r3
 8004366:	4615      	mov	r5, r2
 8004368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800436a:	6020      	str	r0, [r4, #0]
 800436c:	6061      	str	r1, [r4, #4]
 800436e:	60a2      	str	r2, [r4, #8]
 8004370:	60e3      	str	r3, [r4, #12]

	return TASK_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bdb0      	pop	{r4, r5, r7, pc}
 800437c:	0800e868 	.word	0x0800e868

08004380 <taskGet>:
	strcpy(item->name,name);
	return TASK_OK;
}

taskItem_t *  taskGet(uint8_t id )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	71fb      	strb	r3, [r7, #7]
	if (TASK_INVALID_ID == taskValidateTaskId(id))
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ffa1 	bl	80042d4 <taskValidateTaskId>
 8004392:	4603      	mov	r3, r0
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <taskGet+0x1c>
		return 0x0;
 8004398:	2300      	movs	r3, #0
 800439a:	e007      	b.n	80043ac <taskGet+0x2c>

	return  &taskItemsPtr->items[id];
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <taskGet+0x34>)
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	79fa      	ldrb	r2, [r7, #7]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	440b      	add	r3, r1


}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000b34 	.word	0x20000b34

080043b8 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	460a      	mov	r2, r1
 80043c2:	71fb      	strb	r3, [r7, #7]
 80043c4:	4613      	mov	r3, r2
 80043c6:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	79ba      	ldrb	r2, [r7, #6]
 80043cc:	fb02 f303 	mul.w	r3, r2, r3
 80043d0:	121b      	asrs	r3, r3, #8
 80043d2:	b2db      	uxtb	r3, r3
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	71fb      	strb	r3, [r7, #7]
 80043f2:	4603      	mov	r3, r0
 80043f4:	71bb      	strb	r3, [r7, #6]
 80043f6:	460b      	mov	r3, r1
 80043f8:	717b      	strb	r3, [r7, #5]
 80043fa:	4613      	mov	r3, r2
 80043fc:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 80043fe:	79bb      	ldrb	r3, [r7, #6]
 8004400:	ee07 3a90 	vmov	s15, r3
 8004404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004408:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80044a8 <led_set_RGB+0xc8>
 800440c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004414:	edc7 7a00 	vstr	s15, [r7]
 8004418:	783b      	ldrb	r3, [r7, #0]
 800441a:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 800441c:	797b      	ldrb	r3, [r7, #5]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004426:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80044a8 <led_set_RGB+0xc8>
 800442a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800442e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004432:	edc7 7a00 	vstr	s15, [r7]
 8004436:	783b      	ldrb	r3, [r7, #0]
 8004438:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 800443a:	793b      	ldrb	r3, [r7, #4]
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004444:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80044a8 <led_set_RGB+0xc8>
 8004448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800444c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004450:	edc7 7a00 	vstr	s15, [r7]
 8004454:	783b      	ldrb	r3, [r7, #0]
 8004456:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8004458:	79fa      	ldrb	r2, [r7, #7]
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	189c      	adds	r4, r3, r2
 8004460:	797b      	ldrb	r3, [r7, #5]
 8004462:	21b0      	movs	r1, #176	; 0xb0
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ffa7 	bl	80043b8 <scale8>
 800446a:	4603      	mov	r3, r0
 800446c:	461a      	mov	r2, r3
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <led_set_RGB+0xcc>)
 8004470:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8004472:	79fa      	ldrb	r2, [r7, #7]
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	3301      	adds	r3, #1
 800447c:	490b      	ldr	r1, [pc, #44]	; (80044ac <led_set_RGB+0xcc>)
 800447e:	79ba      	ldrb	r2, [r7, #6]
 8004480:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8004482:	79fa      	ldrb	r2, [r7, #7]
 8004484:	4613      	mov	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4413      	add	r3, r2
 800448a:	1c9c      	adds	r4, r3, #2
 800448c:	793b      	ldrb	r3, [r7, #4]
 800448e:	21f0      	movs	r1, #240	; 0xf0
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ff91 	bl	80043b8 <scale8>
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	4b04      	ldr	r3, [pc, #16]	; (80044ac <led_set_RGB+0xcc>)
 800449c:	551a      	strb	r2, [r3, r4]

}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd90      	pop	{r4, r7, pc}
 80044a6:	bf00      	nop
 80044a8:	3e99999a 	.word	0x3e99999a
 80044ac:	20000b38 	.word	0x20000b38

080044b0 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 80044b6:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <led_render+0x148>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <led_render+0x1a>
 80044be:	4b4f      	ldr	r3, [pc, #316]	; (80045fc <led_render+0x14c>)
 80044c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d015      	beq.n	80044f6 <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	71fb      	strb	r3, [r7, #7]
 80044ce:	e007      	b.n	80044e0 <led_render+0x30>
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	4a4b      	ldr	r2, [pc, #300]	; (8004600 <led_render+0x150>)
 80044d4:	2100      	movs	r1, #0
 80044d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	3301      	adds	r3, #1
 80044de:	71fb      	strb	r3, [r7, #7]
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	2b2f      	cmp	r3, #47	; 0x2f
 80044e4:	d9f4      	bls.n	80044d0 <led_render+0x20>
    wr_buf_p = 0;
 80044e6:	4b44      	ldr	r3, [pc, #272]	; (80045f8 <led_render+0x148>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80044ec:	2100      	movs	r1, #0
 80044ee:	4845      	ldr	r0, [pc, #276]	; (8004604 <led_render+0x154>)
 80044f0:	f003 ffce 	bl	8008490 <HAL_TIM_PWM_Stop_DMA>
    return;
 80044f4:	e07c      	b.n	80045f0 <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80044f6:	2300      	movs	r3, #0
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	e06d      	b.n	80045d8 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 80044fc:	4b42      	ldr	r3, [pc, #264]	; (8004608 <led_render+0x158>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b00      	cmp	r3, #0
 800450e:	dd01      	ble.n	8004514 <led_render+0x64>
 8004510:	2150      	movs	r1, #80	; 0x50
 8004512:	e000      	b.n	8004516 <led_render+0x66>
 8004514:	2128      	movs	r1, #40	; 0x28
 8004516:	4a3a      	ldr	r2, [pc, #232]	; (8004600 <led_render+0x150>)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800451e:	4b3a      	ldr	r3, [pc, #232]	; (8004608 <led_render+0x158>)
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	461a      	mov	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	dd01      	ble.n	8004536 <led_render+0x86>
 8004532:	2150      	movs	r1, #80	; 0x50
 8004534:	e000      	b.n	8004538 <led_render+0x88>
 8004536:	2128      	movs	r1, #40	; 0x28
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	4a30      	ldr	r2, [pc, #192]	; (8004600 <led_render+0x150>)
 800453e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8004542:	4b31      	ldr	r3, [pc, #196]	; (8004608 <led_render+0x158>)
 8004544:	789b      	ldrb	r3, [r3, #2]
 8004546:	461a      	mov	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	2b00      	cmp	r3, #0
 8004554:	dd01      	ble.n	800455a <led_render+0xaa>
 8004556:	2150      	movs	r1, #80	; 0x50
 8004558:	e000      	b.n	800455c <led_render+0xac>
 800455a:	2128      	movs	r1, #40	; 0x28
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	3310      	adds	r3, #16
 8004560:	4a27      	ldr	r2, [pc, #156]	; (8004600 <led_render+0x150>)
 8004562:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <led_render+0x158>)
 8004568:	78db      	ldrb	r3, [r3, #3]
 800456a:	461a      	mov	r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b00      	cmp	r3, #0
 8004578:	dd01      	ble.n	800457e <led_render+0xce>
 800457a:	2150      	movs	r1, #80	; 0x50
 800457c:	e000      	b.n	8004580 <led_render+0xd0>
 800457e:	2128      	movs	r1, #40	; 0x28
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	3318      	adds	r3, #24
 8004584:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <led_render+0x150>)
 8004586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 800458a:	4b1f      	ldr	r3, [pc, #124]	; (8004608 <led_render+0x158>)
 800458c:	791b      	ldrb	r3, [r3, #4]
 800458e:	461a      	mov	r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	dd01      	ble.n	80045a2 <led_render+0xf2>
 800459e:	2150      	movs	r1, #80	; 0x50
 80045a0:	e000      	b.n	80045a4 <led_render+0xf4>
 80045a2:	2128      	movs	r1, #40	; 0x28
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	3320      	adds	r3, #32
 80045a8:	4a15      	ldr	r2, [pc, #84]	; (8004600 <led_render+0x150>)
 80045aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80045ae:	4b16      	ldr	r3, [pc, #88]	; (8004608 <led_render+0x158>)
 80045b0:	795b      	ldrb	r3, [r3, #5]
 80045b2:	461a      	mov	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	dd01      	ble.n	80045c6 <led_render+0x116>
 80045c2:	2150      	movs	r1, #80	; 0x50
 80045c4:	e000      	b.n	80045c8 <led_render+0x118>
 80045c6:	2128      	movs	r1, #40	; 0x28
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	3328      	adds	r3, #40	; 0x28
 80045cc:	4a0c      	ldr	r2, [pc, #48]	; (8004600 <led_render+0x150>)
 80045ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	3301      	adds	r3, #1
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b07      	cmp	r3, #7
 80045dc:	d98e      	bls.n	80044fc <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 80045de:	2330      	movs	r3, #48	; 0x30
 80045e0:	4a07      	ldr	r2, [pc, #28]	; (8004600 <led_render+0x150>)
 80045e2:	2100      	movs	r1, #0
 80045e4:	4807      	ldr	r0, [pc, #28]	; (8004604 <led_render+0x154>)
 80045e6:	f003 fda3 	bl	8008130 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 80045ea:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <led_render+0x148>)
 80045ec:	2202      	movs	r2, #2
 80045ee:	601a      	str	r2, [r3, #0]
}
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000d48 	.word	0x20000d48
 80045fc:	200005b4 	.word	0x200005b4
 8004600:	20000ce8 	.word	0x20000ce8
 8004604:	2000056c 	.word	0x2000056c
 8004608:	20000b38 	.word	0x20000b38

0800460c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8004614:	4b3a      	ldr	r3, [pc, #232]	; (8004700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b8f      	cmp	r3, #143	; 0x8f
 800461a:	d854      	bhi.n	80046c6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e048      	b.n	80046b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8004622:	4b37      	ldr	r3, [pc, #220]	; (8004700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	4413      	add	r3, r2
 800462c:	4a35      	ldr	r2, [pc, #212]	; (8004704 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800462e:	5cd3      	ldrb	r3, [r2, r3]
 8004630:	461a      	mov	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	dd01      	ble.n	8004644 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8004640:	2150      	movs	r1, #80	; 0x50
 8004642:	e000      	b.n	8004646 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8004644:	2128      	movs	r1, #40	; 0x28
 8004646:	4a30      	ldr	r2, [pc, #192]	; (8004708 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	3301      	adds	r3, #1
 800465a:	4a2a      	ldr	r2, [pc, #168]	; (8004704 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800465c:	5cd3      	ldrb	r3, [r2, r3]
 800465e:	461a      	mov	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	dd01      	ble.n	8004672 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 800466e:	2150      	movs	r1, #80	; 0x50
 8004670:	e000      	b.n	8004674 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8004672:	2128      	movs	r1, #40	; 0x28
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3308      	adds	r3, #8
 8004678:	4a23      	ldr	r2, [pc, #140]	; (8004708 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 800467a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	3302      	adds	r3, #2
 800468a:	4a1e      	ldr	r2, [pc, #120]	; (8004704 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800468c:	5cd3      	ldrb	r3, [r2, r3]
 800468e:	461a      	mov	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469a:	2b00      	cmp	r3, #0
 800469c:	dd01      	ble.n	80046a2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 800469e:	2150      	movs	r1, #80	; 0x50
 80046a0:	e000      	b.n	80046a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 80046a2:	2128      	movs	r1, #40	; 0x28
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3310      	adds	r3, #16
 80046a8:	4a17      	ldr	r2, [pc, #92]	; (8004708 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80046aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b07      	cmp	r3, #7
 80046b8:	d9b3      	bls.n	8004622 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 80046ba:	4b11      	ldr	r3, [pc, #68]	; (8004700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	4a0f      	ldr	r2, [pc, #60]	; (8004700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80046c2:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80046c4:	e016      	b.n	80046f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80046c6:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b91      	cmp	r3, #145	; 0x91
 80046cc:	d812      	bhi.n	80046f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	72fb      	strb	r3, [r7, #11]
 80046d2:	e007      	b.n	80046e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 80046d4:	7afb      	ldrb	r3, [r7, #11]
 80046d6:	4a0c      	ldr	r2, [pc, #48]	; (8004708 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80046d8:	2100      	movs	r1, #0
 80046da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80046de:	7afb      	ldrb	r3, [r7, #11]
 80046e0:	3301      	adds	r3, #1
 80046e2:	72fb      	strb	r3, [r7, #11]
 80046e4:	7afb      	ldrb	r3, [r7, #11]
 80046e6:	2b17      	cmp	r3, #23
 80046e8:	d9f4      	bls.n	80046d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3301      	adds	r3, #1
 80046f0:	4a03      	ldr	r2, [pc, #12]	; (8004700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80046f2:	6013      	str	r3, [r2, #0]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	20000d48 	.word	0x20000d48
 8004704:	20000b38 	.word	0x20000b38
 8004708:	20000ce8 	.word	0x20000ce8

0800470c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8004714:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b8f      	cmp	r3, #143	; 0x8f
 800471a:	d855      	bhi.n	80047c8 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e049      	b.n	80047b6 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8004722:	4b3b      	ldr	r3, [pc, #236]	; (8004810 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4613      	mov	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4413      	add	r3, r2
 800472c:	4a39      	ldr	r2, [pc, #228]	; (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800472e:	5cd3      	ldrb	r3, [r2, r3]
 8004730:	461a      	mov	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	2b00      	cmp	r3, #0
 800473e:	dd01      	ble.n	8004744 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8004740:	2150      	movs	r1, #80	; 0x50
 8004742:	e000      	b.n	8004746 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8004744:	2128      	movs	r1, #40	; 0x28
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3318      	adds	r3, #24
 800474a:	4a33      	ldr	r2, [pc, #204]	; (8004818 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800474c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8004750:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4413      	add	r3, r2
 800475a:	3301      	adds	r3, #1
 800475c:	4a2d      	ldr	r2, [pc, #180]	; (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800475e:	5cd3      	ldrb	r3, [r2, r3]
 8004760:	461a      	mov	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b00      	cmp	r3, #0
 800476e:	dd01      	ble.n	8004774 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8004770:	2150      	movs	r1, #80	; 0x50
 8004772:	e000      	b.n	8004776 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8004774:	2128      	movs	r1, #40	; 0x28
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3320      	adds	r3, #32
 800477a:	4a27      	ldr	r2, [pc, #156]	; (8004818 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800477c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8004780:	4b23      	ldr	r3, [pc, #140]	; (8004810 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4413      	add	r3, r2
 800478a:	3302      	adds	r3, #2
 800478c:	4a21      	ldr	r2, [pc, #132]	; (8004814 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	461a      	mov	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b00      	cmp	r3, #0
 800479e:	dd01      	ble.n	80047a4 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 80047a0:	2150      	movs	r1, #80	; 0x50
 80047a2:	e000      	b.n	80047a6 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 80047a4:	2128      	movs	r1, #40	; 0x28
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3328      	adds	r3, #40	; 0x28
 80047aa:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80047ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3301      	adds	r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b07      	cmp	r3, #7
 80047ba:	d9b2      	bls.n	8004722 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 80047bc:	4b14      	ldr	r3, [pc, #80]	; (8004810 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80047c4:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 80047c6:	e01e      	b.n	8004806 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b91      	cmp	r3, #145	; 0x91
 80047ce:	d813      	bhi.n	80047f8 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80047d0:	2318      	movs	r3, #24
 80047d2:	72fb      	strb	r3, [r7, #11]
 80047d4:	e007      	b.n	80047e6 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 80047d6:	7afb      	ldrb	r3, [r7, #11]
 80047d8:	4a0f      	ldr	r2, [pc, #60]	; (8004818 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80047da:	2100      	movs	r1, #0
 80047dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80047e0:	7afb      	ldrb	r3, [r7, #11]
 80047e2:	3301      	adds	r3, #1
 80047e4:	72fb      	strb	r3, [r7, #11]
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	2b2f      	cmp	r3, #47	; 0x2f
 80047ea:	d9f4      	bls.n	80047d6 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	4a07      	ldr	r2, [pc, #28]	; (8004810 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80047f4:	6013      	str	r3, [r2, #0]
}
 80047f6:	e006      	b.n	8004806 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80047fe:	2100      	movs	r1, #0
 8004800:	4806      	ldr	r0, [pc, #24]	; (800481c <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8004802:	f003 fe45 	bl	8008490 <HAL_TIM_PWM_Stop_DMA>
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000d48 	.word	0x20000d48
 8004814:	20000b38 	.word	0x20000b38
 8004818:	20000ce8 	.word	0x20000ce8
 800481c:	2000056c 	.word	0x2000056c

08004820 <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	71fb      	strb	r3, [r7, #7]
 800482a:	460b      	mov	r3, r1
 800482c:	71bb      	strb	r3, [r7, #6]
 800482e:	4613      	mov	r3, r2
 8004830:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8004832:	797b      	ldrb	r3, [r7, #5]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <hsl_to_rgb+0x1c>
 8004838:	2300      	movs	r3, #0
 800483a:	e0b1      	b.n	80049a0 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 800483c:	797b      	ldrb	r3, [r7, #5]
 800483e:	b29b      	uxth	r3, r3
 8004840:	3301      	adds	r3, #1
 8004842:	b29b      	uxth	r3, r3
 8004844:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8004846:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800484a:	2b00      	cmp	r3, #0
 800484c:	db09      	blt.n	8004862 <hsl_to_rgb+0x42>
 800484e:	89bb      	ldrh	r3, [r7, #12]
 8004850:	b29b      	uxth	r3, r3
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	79ba      	ldrb	r2, [r7, #6]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	121b      	asrs	r3, r3, #8
 800485c:	b2db      	uxtb	r3, r3
 800485e:	74fb      	strb	r3, [r7, #19]
 8004860:	e00a      	b.n	8004878 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8004862:	89bb      	ldrh	r3, [r7, #12]
 8004864:	b29b      	uxth	r3, r3
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800486c:	79ba      	ldrb	r2, [r7, #6]
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	121b      	asrs	r3, r3, #8
 8004874:	b2db      	uxtb	r3, r3
 8004876:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	b29b      	uxth	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	0052      	lsls	r2, r2, #1
 8004880:	4413      	add	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	b29b      	uxth	r3, r3
 8004886:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8004888:	897b      	ldrh	r3, [r7, #10]
 800488a:	b29b      	uxth	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8004890:	7d3b      	ldrb	r3, [r7, #20]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	b29b      	uxth	r3, r3
 8004896:	3301      	adds	r3, #1
 8004898:	b29b      	uxth	r3, r3
 800489a:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <hsl_to_rgb+0x9c>
 80048a8:	89fb      	ldrh	r3, [r7, #14]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	7cfa      	ldrb	r2, [r7, #19]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	121b      	asrs	r3, r3, #8
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	74bb      	strb	r3, [r7, #18]
 80048ba:	e00a      	b.n	80048d2 <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 80048bc:	89fb      	ldrh	r3, [r7, #14]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80048c4:	7cfa      	ldrb	r2, [r7, #19]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	121b      	asrs	r3, r3, #8
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 80048d2:	7cfb      	ldrb	r3, [r7, #19]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	797a      	ldrb	r2, [r7, #5]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 80048e2:	897b      	ldrh	r3, [r7, #10]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d839      	bhi.n	8004962 <hsl_to_rgb+0x142>
 80048ee:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <hsl_to_rgb+0xd4>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	08004909 	.word	0x08004909
 80048f8:	0800491b 	.word	0x0800491b
 80048fc:	0800492d 	.word	0x0800492d
 8004900:	0800493f 	.word	0x0800493f
 8004904:	08004951 	.word	0x08004951
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	75fb      	strb	r3, [r7, #23]
 800490e:	7cbb      	ldrb	r3, [r7, #18]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	75bb      	strb	r3, [r7, #22]
 8004914:	2300      	movs	r3, #0
 8004916:	757b      	strb	r3, [r7, #21]
 8004918:	e02c      	b.n	8004974 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 800491a:	7cbb      	ldrb	r3, [r7, #18]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	75fb      	strb	r3, [r7, #23]
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	75bb      	strb	r3, [r7, #22]
 8004926:	2300      	movs	r3, #0
 8004928:	757b      	strb	r3, [r7, #21]
 800492a:	e023      	b.n	8004974 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 800492c:	2300      	movs	r3, #0
 800492e:	75fb      	strb	r3, [r7, #23]
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	75bb      	strb	r3, [r7, #22]
 8004936:	7cbb      	ldrb	r3, [r7, #18]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	757b      	strb	r3, [r7, #21]
 800493c:	e01a      	b.n	8004974 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]
 8004942:	7cbb      	ldrb	r3, [r7, #18]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	75bb      	strb	r3, [r7, #22]
 8004948:	7cfb      	ldrb	r3, [r7, #19]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	757b      	strb	r3, [r7, #21]
 800494e:	e011      	b.n	8004974 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8004950:	7cbb      	ldrb	r3, [r7, #18]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	75fb      	strb	r3, [r7, #23]
 8004956:	2300      	movs	r3, #0
 8004958:	75bb      	strb	r3, [r7, #22]
 800495a:	7cfb      	ldrb	r3, [r7, #19]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	757b      	strb	r3, [r7, #21]
 8004960:	e008      	b.n	8004974 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8004962:	7cfb      	ldrb	r3, [r7, #19]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	75fb      	strb	r3, [r7, #23]
 8004968:	2300      	movs	r3, #0
 800496a:	75bb      	strb	r3, [r7, #22]
 800496c:	7cbb      	ldrb	r3, [r7, #18]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	757b      	strb	r3, [r7, #21]
 8004972:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	7c7b      	ldrb	r3, [r7, #17]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	4413      	add	r3, r2
 8004980:	041a      	lsls	r2, r3, #16
 8004982:	7dbb      	ldrb	r3, [r7, #22]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	4619      	mov	r1, r3
 8004988:	7c7b      	ldrb	r3, [r7, #17]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	440b      	add	r3, r1
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	431a      	orrs	r2, r3
 8004992:	7d7b      	ldrb	r3, [r7, #21]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	4619      	mov	r1, r3
 8004998:	7c7b      	ldrb	r3, [r7, #17]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	440b      	add	r3, r1
 800499e:	4313      	orrs	r3, r2
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_Init+0x40>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a0d      	ldr	r2, [pc, #52]	; (80049ec <HAL_Init+0x40>)
 80049b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_Init+0x40>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <HAL_Init+0x40>)
 80049c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_Init+0x40>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a07      	ldr	r2, [pc, #28]	; (80049ec <HAL_Init+0x40>)
 80049ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049d4:	2003      	movs	r0, #3
 80049d6:	f000 f94f 	bl	8004c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049da:	200f      	movs	r0, #15
 80049dc:	f000 f808 	bl	80049f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049e0:	f7ff f8ca 	bl	8003b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023c00 	.word	0x40023c00

080049f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049f8:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_InitTick+0x54>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <HAL_InitTick+0x58>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	4619      	mov	r1, r3
 8004a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f967 	bl	8004ce2 <HAL_SYSTICK_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e00e      	b.n	8004a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b0f      	cmp	r3, #15
 8004a22:	d80a      	bhi.n	8004a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a24:	2200      	movs	r2, #0
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	f000 f92f 	bl	8004c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a30:	4a06      	ldr	r2, [pc, #24]	; (8004a4c <HAL_InitTick+0x5c>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e000      	b.n	8004a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	200001c8 	.word	0x200001c8
 8004a48:	200001d4 	.word	0x200001d4
 8004a4c:	200001d0 	.word	0x200001d0

08004a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <HAL_IncTick+0x20>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_IncTick+0x24>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4413      	add	r3, r2
 8004a60:	4a04      	ldr	r2, [pc, #16]	; (8004a74 <HAL_IncTick+0x24>)
 8004a62:	6013      	str	r3, [r2, #0]
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	200001d4 	.word	0x200001d4
 8004a74:	20000d4c 	.word	0x20000d4c

08004a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <HAL_GetTick+0x14>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	20000d4c 	.word	0x20000d4c

08004a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a98:	f7ff ffee 	bl	8004a78 <HAL_GetTick>
 8004a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d005      	beq.n	8004ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004aaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <HAL_Delay+0x44>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ab6:	bf00      	nop
 8004ab8:	f7ff ffde 	bl	8004a78 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d8f7      	bhi.n	8004ab8 <HAL_Delay+0x28>
  {
  }
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200001d4 	.word	0x200001d4

08004ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <__NVIC_SetPriorityGrouping+0x44>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004af4:	4013      	ands	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b0a:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <__NVIC_SetPriorityGrouping+0x44>)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	60d3      	str	r3, [r2, #12]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <__NVIC_GetPriorityGrouping+0x18>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	f003 0307 	and.w	r3, r3, #7
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	db0b      	blt.n	8004b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	f003 021f 	and.w	r2, r3, #31
 8004b54:	4907      	ldr	r1, [pc, #28]	; (8004b74 <__NVIC_EnableIRQ+0x38>)
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	e000e100 	.word	0xe000e100

08004b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	6039      	str	r1, [r7, #0]
 8004b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	db0a      	blt.n	8004ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	490c      	ldr	r1, [pc, #48]	; (8004bc4 <__NVIC_SetPriority+0x4c>)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	0112      	lsls	r2, r2, #4
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ba0:	e00a      	b.n	8004bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	4908      	ldr	r1, [pc, #32]	; (8004bc8 <__NVIC_SetPriority+0x50>)
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	3b04      	subs	r3, #4
 8004bb0:	0112      	lsls	r2, r2, #4
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	761a      	strb	r2, [r3, #24]
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	e000e100 	.word	0xe000e100
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b089      	sub	sp, #36	; 0x24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f1c3 0307 	rsb	r3, r3, #7
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	bf28      	it	cs
 8004bea:	2304      	movcs	r3, #4
 8004bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	2b06      	cmp	r3, #6
 8004bf4:	d902      	bls.n	8004bfc <NVIC_EncodePriority+0x30>
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	3b03      	subs	r3, #3
 8004bfa:	e000      	b.n	8004bfe <NVIC_EncodePriority+0x32>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c00:	f04f 32ff 	mov.w	r2, #4294967295
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	401a      	ands	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c14:	f04f 31ff 	mov.w	r1, #4294967295
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1e:	43d9      	mvns	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c24:	4313      	orrs	r3, r2
         );
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3724      	adds	r7, #36	; 0x24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c44:	d301      	bcc.n	8004c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c46:	2301      	movs	r3, #1
 8004c48:	e00f      	b.n	8004c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <SysTick_Config+0x40>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c52:	210f      	movs	r1, #15
 8004c54:	f04f 30ff 	mov.w	r0, #4294967295
 8004c58:	f7ff ff8e 	bl	8004b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <SysTick_Config+0x40>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c62:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <SysTick_Config+0x40>)
 8004c64:	2207      	movs	r2, #7
 8004c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	e000e010 	.word	0xe000e010

08004c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff ff29 	bl	8004ad8 <__NVIC_SetPriorityGrouping>
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b086      	sub	sp, #24
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	4603      	mov	r3, r0
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ca0:	f7ff ff3e 	bl	8004b20 <__NVIC_GetPriorityGrouping>
 8004ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	6978      	ldr	r0, [r7, #20]
 8004cac:	f7ff ff8e 	bl	8004bcc <NVIC_EncodePriority>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff ff5d 	bl	8004b78 <__NVIC_SetPriority>
}
 8004cbe:	bf00      	nop
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	4603      	mov	r3, r0
 8004cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff ff31 	bl	8004b3c <__NVIC_EnableIRQ>
}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ffa2 	bl	8004c34 <SysTick_Config>
 8004cf0:	4603      	mov	r3, r0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e00e      	b.n	8004d2a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	795b      	ldrb	r3, [r3, #5]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d105      	bne.n	8004d22 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fe fbd5 	bl	80034cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b087      	sub	sp, #28
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004d3e:	2300      	movs	r3, #0
 8004d40:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2202      	movs	r2, #2
 8004d46:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e00a      	b.n	8004d74 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3301      	adds	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d3f0      	bcc.n	8004d5e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004d8a:	693b      	ldr	r3, [r7, #16]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004da4:	f7ff fe68 	bl	8004a78 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e099      	b.n	8004ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dd4:	e00f      	b.n	8004df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dd6:	f7ff fe4f 	bl	8004a78 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d908      	bls.n	8004df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2203      	movs	r2, #3
 8004dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e078      	b.n	8004ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e8      	bne.n	8004dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <HAL_DMA_Init+0x158>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d107      	bne.n	8004e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0307 	bic.w	r3, r3, #7
 8004e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d117      	bne.n	8004eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00e      	beq.n	8004eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fb01 	bl	80054a4 <DMA_CheckFifoParam>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2240      	movs	r2, #64	; 0x40
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e016      	b.n	8004ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fab8 	bl	8005438 <DMA_CalcBaseAndBitshift>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed0:	223f      	movs	r2, #63	; 0x3f
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	f010803f 	.word	0xf010803f

08004ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_DMA_Start_IT+0x26>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e040      	b.n	8004f9c <HAL_DMA_Start_IT+0xa8>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d12f      	bne.n	8004f8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fa4a 	bl	80053dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4c:	223f      	movs	r2, #63	; 0x3f
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0216 	orr.w	r2, r2, #22
 8004f62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e005      	b.n	8004f9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
 8004f98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fb2:	f7ff fd61 	bl	8004a78 <HAL_GetTick>
 8004fb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d008      	beq.n	8004fd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2280      	movs	r2, #128	; 0x80
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e052      	b.n	800507c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0216 	bic.w	r2, r2, #22
 8004fe4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <HAL_DMA_Abort+0x62>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0208 	bic.w	r2, r2, #8
 8005014:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005026:	e013      	b.n	8005050 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005028:	f7ff fd26 	bl	8004a78 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b05      	cmp	r3, #5
 8005034:	d90c      	bls.n	8005050 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2203      	movs	r2, #3
 8005040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e015      	b.n	800507c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e4      	bne.n	8005028 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	223f      	movs	r2, #63	; 0x3f
 8005064:	409a      	lsls	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d004      	beq.n	80050a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2280      	movs	r2, #128	; 0x80
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e00c      	b.n	80050bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2205      	movs	r2, #5
 80050a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050d4:	4b8e      	ldr	r3, [pc, #568]	; (8005310 <HAL_DMA_IRQHandler+0x248>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a8e      	ldr	r2, [pc, #568]	; (8005314 <HAL_DMA_IRQHandler+0x24c>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	0a9b      	lsrs	r3, r3, #10
 80050e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	2208      	movs	r2, #8
 80050f4:	409a      	lsls	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01a      	beq.n	8005134 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0204 	bic.w	r2, r2, #4
 800511a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005120:	2208      	movs	r2, #8
 8005122:	409a      	lsls	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	f043 0201 	orr.w	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005138:	2201      	movs	r2, #1
 800513a:	409a      	lsls	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d012      	beq.n	800516a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005156:	2201      	movs	r2, #1
 8005158:	409a      	lsls	r2, r3
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	f043 0202 	orr.w	r2, r3, #2
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	2204      	movs	r2, #4
 8005170:	409a      	lsls	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d012      	beq.n	80051a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00b      	beq.n	80051a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	2204      	movs	r2, #4
 800518e:	409a      	lsls	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	f043 0204 	orr.w	r2, r3, #4
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	2210      	movs	r2, #16
 80051a6:	409a      	lsls	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d043      	beq.n	8005238 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d03c      	beq.n	8005238 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	2210      	movs	r2, #16
 80051c4:	409a      	lsls	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d018      	beq.n	800520a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d108      	bne.n	80051f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d024      	beq.n	8005238 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
 80051f6:	e01f      	b.n	8005238 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01b      	beq.n	8005238 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
 8005208:	e016      	b.n	8005238 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d107      	bne.n	8005228 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0208 	bic.w	r2, r2, #8
 8005226:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523c:	2220      	movs	r2, #32
 800523e:	409a      	lsls	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 808f 	beq.w	8005368 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8087 	beq.w	8005368 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525e:	2220      	movs	r2, #32
 8005260:	409a      	lsls	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b05      	cmp	r3, #5
 8005270:	d136      	bne.n	80052e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0216 	bic.w	r2, r2, #22
 8005280:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695a      	ldr	r2, [r3, #20]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005290:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <HAL_DMA_IRQHandler+0x1da>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0208 	bic.w	r2, r2, #8
 80052b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b6:	223f      	movs	r2, #63	; 0x3f
 80052b8:	409a      	lsls	r2, r3
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d07e      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	4798      	blx	r3
        }
        return;
 80052de:	e079      	b.n	80053d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01d      	beq.n	800532a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	2b00      	cmp	r3, #0
 8005302:	d031      	beq.n	8005368 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
 800530c:	e02c      	b.n	8005368 <HAL_DMA_IRQHandler+0x2a0>
 800530e:	bf00      	nop
 8005310:	200001c8 	.word	0x200001c8
 8005314:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	2b00      	cmp	r3, #0
 800531e:	d023      	beq.n	8005368 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
 8005328:	e01e      	b.n	8005368 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10f      	bne.n	8005358 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0210 	bic.w	r2, r2, #16
 8005346:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	2b00      	cmp	r3, #0
 800536e:	d032      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d022      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2205      	movs	r2, #5
 8005380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	3301      	adds	r3, #1
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	429a      	cmp	r2, r3
 800539e:	d307      	bcc.n	80053b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f2      	bne.n	8005394 <HAL_DMA_IRQHandler+0x2cc>
 80053ae:	e000      	b.n	80053b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
 80053d2:	e000      	b.n	80053d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80053d4:	bf00      	nop
    }
  }
}
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d108      	bne.n	800541c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800541a:	e007      	b.n	800542c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	3b10      	subs	r3, #16
 8005448:	4a14      	ldr	r2, [pc, #80]	; (800549c <DMA_CalcBaseAndBitshift+0x64>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005452:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b03      	cmp	r3, #3
 8005464:	d909      	bls.n	800547a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	659a      	str	r2, [r3, #88]	; 0x58
 8005478:	e007      	b.n	800548a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	aaaaaaab 	.word	0xaaaaaaab
 80054a0:	0800edb4 	.word	0x0800edb4

080054a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11f      	bne.n	80054fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d856      	bhi.n	8005572 <DMA_CheckFifoParam+0xce>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <DMA_CheckFifoParam+0x28>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054ef 	.word	0x080054ef
 80054d4:	080054dd 	.word	0x080054dd
 80054d8:	08005573 	.word	0x08005573
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d046      	beq.n	8005576 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ec:	e043      	b.n	8005576 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054f6:	d140      	bne.n	800557a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054fc:	e03d      	b.n	800557a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005506:	d121      	bne.n	800554c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d837      	bhi.n	800557e <DMA_CheckFifoParam+0xda>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <DMA_CheckFifoParam+0x70>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005525 	.word	0x08005525
 8005518:	0800552b 	.word	0x0800552b
 800551c:	08005525 	.word	0x08005525
 8005520:	0800553d 	.word	0x0800553d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      break;
 8005528:	e030      	b.n	800558c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d025      	beq.n	8005582 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800553a:	e022      	b.n	8005582 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005544:	d11f      	bne.n	8005586 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800554a:	e01c      	b.n	8005586 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d903      	bls.n	800555a <DMA_CheckFifoParam+0xb6>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d003      	beq.n	8005560 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005558:	e018      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
      break;
 800555e:	e015      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00e      	beq.n	800558a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
      break;
 8005570:	e00b      	b.n	800558a <DMA_CheckFifoParam+0xe6>
      break;
 8005572:	bf00      	nop
 8005574:	e00a      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 8005576:	bf00      	nop
 8005578:	e008      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 800557a:	bf00      	nop
 800557c:	e006      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 800557e:	bf00      	nop
 8005580:	e004      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 8005582:	bf00      	nop
 8005584:	e002      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;   
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 800558a:	bf00      	nop
    }
  } 
  
  return status; 
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop

0800559c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055ae:	4b23      	ldr	r3, [pc, #140]	; (800563c <HAL_FLASH_Program+0xa0>)
 80055b0:	7e1b      	ldrb	r3, [r3, #24]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_FLASH_Program+0x1e>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e03b      	b.n	8005632 <HAL_FLASH_Program+0x96>
 80055ba:	4b20      	ldr	r3, [pc, #128]	; (800563c <HAL_FLASH_Program+0xa0>)
 80055bc:	2201      	movs	r2, #1
 80055be:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055c4:	f000 f87c 	bl	80056c0 <FLASH_WaitForLastOperation>
 80055c8:	4603      	mov	r3, r0
 80055ca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d12b      	bne.n	800562a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d105      	bne.n	80055e4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80055d8:	783b      	ldrb	r3, [r7, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	68b8      	ldr	r0, [r7, #8]
 80055de:	f000 f927 	bl	8005830 <FLASH_Program_Byte>
 80055e2:	e016      	b.n	8005612 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d105      	bne.n	80055f6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80055ea:	883b      	ldrh	r3, [r7, #0]
 80055ec:	4619      	mov	r1, r3
 80055ee:	68b8      	ldr	r0, [r7, #8]
 80055f0:	f000 f8fa 	bl	80057e8 <FLASH_Program_HalfWord>
 80055f4:	e00d      	b.n	8005612 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d105      	bne.n	8005608 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4619      	mov	r1, r3
 8005600:	68b8      	ldr	r0, [r7, #8]
 8005602:	f000 f8cf 	bl	80057a4 <FLASH_Program_Word>
 8005606:	e004      	b.n	8005612 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800560c:	68b8      	ldr	r0, [r7, #8]
 800560e:	f000 f897 	bl	8005740 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005612:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005616:	f000 f853 	bl	80056c0 <FLASH_WaitForLastOperation>
 800561a:	4603      	mov	r3, r0
 800561c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800561e:	4b08      	ldr	r3, [pc, #32]	; (8005640 <HAL_FLASH_Program+0xa4>)
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	4a07      	ldr	r2, [pc, #28]	; (8005640 <HAL_FLASH_Program+0xa4>)
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800562a:	4b04      	ldr	r3, [pc, #16]	; (800563c <HAL_FLASH_Program+0xa0>)
 800562c:	2200      	movs	r2, #0
 800562e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005630:	7dfb      	ldrb	r3, [r7, #23]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000d50 	.word	0x20000d50
 8005640:	40023c00 	.word	0x40023c00

08005644 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800564e:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_FLASH_Unlock+0x38>)
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	da0b      	bge.n	800566e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005656:	4b09      	ldr	r3, [pc, #36]	; (800567c <HAL_FLASH_Unlock+0x38>)
 8005658:	4a09      	ldr	r2, [pc, #36]	; (8005680 <HAL_FLASH_Unlock+0x3c>)
 800565a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800565c:	4b07      	ldr	r3, [pc, #28]	; (800567c <HAL_FLASH_Unlock+0x38>)
 800565e:	4a09      	ldr	r2, [pc, #36]	; (8005684 <HAL_FLASH_Unlock+0x40>)
 8005660:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005662:	4b06      	ldr	r3, [pc, #24]	; (800567c <HAL_FLASH_Unlock+0x38>)
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	da01      	bge.n	800566e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800566e:	79fb      	ldrb	r3, [r7, #7]
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40023c00 	.word	0x40023c00
 8005680:	45670123 	.word	0x45670123
 8005684:	cdef89ab 	.word	0xcdef89ab

08005688 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <HAL_FLASH_Lock+0x1c>)
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	4a04      	ldr	r2, [pc, #16]	; (80056a4 <HAL_FLASH_Lock+0x1c>)
 8005692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005696:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40023c00 	.word	0x40023c00

080056a8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <HAL_FLASH_GetError+0x14>)
 80056ae:	69db      	ldr	r3, [r3, #28]
}  
 80056b0:	4618      	mov	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20000d50 	.word	0x20000d50

080056c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80056cc:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <FLASH_WaitForLastOperation+0x78>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80056d2:	f7ff f9d1 	bl	8004a78 <HAL_GetTick>
 80056d6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80056d8:	e010      	b.n	80056fc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d00c      	beq.n	80056fc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <FLASH_WaitForLastOperation+0x38>
 80056e8:	f7ff f9c6 	bl	8004a78 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d201      	bcs.n	80056fc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e019      	b.n	8005730 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80056fc:	4b0f      	ldr	r3, [pc, #60]	; (800573c <FLASH_WaitForLastOperation+0x7c>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e8      	bne.n	80056da <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005708:	4b0c      	ldr	r3, [pc, #48]	; (800573c <FLASH_WaitForLastOperation+0x7c>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <FLASH_WaitForLastOperation+0x7c>)
 8005716:	2201      	movs	r2, #1
 8005718:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800571a:	4b08      	ldr	r3, [pc, #32]	; (800573c <FLASH_WaitForLastOperation+0x7c>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005726:	f000 f8a5 	bl	8005874 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
  
}  
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000d50 	.word	0x20000d50
 800573c:	40023c00 	.word	0x40023c00

08005740 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <FLASH_Program_DoubleWord+0x60>)
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <FLASH_Program_DoubleWord+0x60>)
 8005752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005756:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005758:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <FLASH_Program_DoubleWord+0x60>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	4a10      	ldr	r2, [pc, #64]	; (80057a0 <FLASH_Program_DoubleWord+0x60>)
 800575e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005762:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005764:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <FLASH_Program_DoubleWord+0x60>)
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <FLASH_Program_DoubleWord+0x60>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005776:	f3bf 8f6f 	isb	sy
}
 800577a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800577c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	000a      	movs	r2, r1
 800578a:	2300      	movs	r3, #0
 800578c:	68f9      	ldr	r1, [r7, #12]
 800578e:	3104      	adds	r1, #4
 8005790:	4613      	mov	r3, r2
 8005792:	600b      	str	r3, [r1, #0]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40023c00 	.word	0x40023c00

080057a4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057ae:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <FLASH_Program_Word+0x40>)
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	4a0c      	ldr	r2, [pc, #48]	; (80057e4 <FLASH_Program_Word+0x40>)
 80057b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80057ba:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <FLASH_Program_Word+0x40>)
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <FLASH_Program_Word+0x40>)
 80057c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057c6:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <FLASH_Program_Word+0x40>)
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	4a06      	ldr	r2, [pc, #24]	; (80057e4 <FLASH_Program_Word+0x40>)
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	601a      	str	r2, [r3, #0]
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	40023c00 	.word	0x40023c00

080057e8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057f4:	4b0d      	ldr	r3, [pc, #52]	; (800582c <FLASH_Program_HalfWord+0x44>)
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	4a0c      	ldr	r2, [pc, #48]	; (800582c <FLASH_Program_HalfWord+0x44>)
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005800:	4b0a      	ldr	r3, [pc, #40]	; (800582c <FLASH_Program_HalfWord+0x44>)
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	4a09      	ldr	r2, [pc, #36]	; (800582c <FLASH_Program_HalfWord+0x44>)
 8005806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800580c:	4b07      	ldr	r3, [pc, #28]	; (800582c <FLASH_Program_HalfWord+0x44>)
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	4a06      	ldr	r2, [pc, #24]	; (800582c <FLASH_Program_HalfWord+0x44>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	887a      	ldrh	r2, [r7, #2]
 800581c:	801a      	strh	r2, [r3, #0]
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40023c00 	.word	0x40023c00

08005830 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <FLASH_Program_Byte+0x40>)
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <FLASH_Program_Byte+0x40>)
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005848:	4b09      	ldr	r3, [pc, #36]	; (8005870 <FLASH_Program_Byte+0x40>)
 800584a:	4a09      	ldr	r2, [pc, #36]	; (8005870 <FLASH_Program_Byte+0x40>)
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <FLASH_Program_Byte+0x40>)
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	4a06      	ldr	r2, [pc, #24]	; (8005870 <FLASH_Program_Byte+0x40>)
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	701a      	strb	r2, [r3, #0]
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40023c00 	.word	0x40023c00

08005874 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005878:	4b2f      	ldr	r3, [pc, #188]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005884:	4b2d      	ldr	r3, [pc, #180]	; (800593c <FLASH_SetErrorCode+0xc8>)
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f043 0310 	orr.w	r3, r3, #16
 800588c:	4a2b      	ldr	r2, [pc, #172]	; (800593c <FLASH_SetErrorCode+0xc8>)
 800588e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005890:	4b29      	ldr	r3, [pc, #164]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 8005892:	2210      	movs	r2, #16
 8005894:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005896:	4b28      	ldr	r3, [pc, #160]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80058a2:	4b26      	ldr	r3, [pc, #152]	; (800593c <FLASH_SetErrorCode+0xc8>)
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f043 0308 	orr.w	r3, r3, #8
 80058aa:	4a24      	ldr	r2, [pc, #144]	; (800593c <FLASH_SetErrorCode+0xc8>)
 80058ac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80058ae:	4b22      	ldr	r3, [pc, #136]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 80058b0:	2220      	movs	r2, #32
 80058b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80058b4:	4b20      	ldr	r3, [pc, #128]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80058c0:	4b1e      	ldr	r3, [pc, #120]	; (800593c <FLASH_SetErrorCode+0xc8>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f043 0304 	orr.w	r3, r3, #4
 80058c8:	4a1c      	ldr	r2, [pc, #112]	; (800593c <FLASH_SetErrorCode+0xc8>)
 80058ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80058cc:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 80058ce:	2240      	movs	r2, #64	; 0x40
 80058d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80058d2:	4b19      	ldr	r3, [pc, #100]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80058de:	4b17      	ldr	r3, [pc, #92]	; (800593c <FLASH_SetErrorCode+0xc8>)
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f043 0302 	orr.w	r3, r3, #2
 80058e6:	4a15      	ldr	r2, [pc, #84]	; (800593c <FLASH_SetErrorCode+0xc8>)
 80058e8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 80058ec:	2280      	movs	r2, #128	; 0x80
 80058ee:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80058fc:	4b0f      	ldr	r3, [pc, #60]	; (800593c <FLASH_SetErrorCode+0xc8>)
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	4a0d      	ldr	r2, [pc, #52]	; (800593c <FLASH_SetErrorCode+0xc8>)
 8005906:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 800590a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800590e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005910:	4b09      	ldr	r3, [pc, #36]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800591c:	4b07      	ldr	r3, [pc, #28]	; (800593c <FLASH_SetErrorCode+0xc8>)
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	f043 0320 	orr.w	r3, r3, #32
 8005924:	4a05      	ldr	r2, [pc, #20]	; (800593c <FLASH_SetErrorCode+0xc8>)
 8005926:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <FLASH_SetErrorCode+0xc4>)
 800592a:	2202      	movs	r2, #2
 800592c:	60da      	str	r2, [r3, #12]
  }
}
 800592e:	bf00      	nop
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40023c00 	.word	0x40023c00
 800593c:	20000d50 	.word	0x20000d50

08005940 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005952:	4b31      	ldr	r3, [pc, #196]	; (8005a18 <HAL_FLASHEx_Erase+0xd8>)
 8005954:	7e1b      	ldrb	r3, [r3, #24]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_FLASHEx_Erase+0x1e>
 800595a:	2302      	movs	r3, #2
 800595c:	e058      	b.n	8005a10 <HAL_FLASHEx_Erase+0xd0>
 800595e:	4b2e      	ldr	r3, [pc, #184]	; (8005a18 <HAL_FLASHEx_Erase+0xd8>)
 8005960:	2201      	movs	r2, #1
 8005962:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005964:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005968:	f7ff feaa 	bl	80056c0 <FLASH_WaitForLastOperation>
 800596c:	4603      	mov	r3, r0
 800596e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d148      	bne.n	8005a08 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	f04f 32ff 	mov.w	r2, #4294967295
 800597c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d115      	bne.n	80059b2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f000 f844 	bl	8005a20 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005998:	f24c 3050 	movw	r0, #50000	; 0xc350
 800599c:	f7ff fe90 	bl	80056c0 <FLASH_WaitForLastOperation>
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80059a4:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <HAL_FLASHEx_Erase+0xdc>)
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <HAL_FLASHEx_Erase+0xdc>)
 80059aa:	f023 0304 	bic.w	r3, r3, #4
 80059ae:	6113      	str	r3, [r2, #16]
 80059b0:	e028      	b.n	8005a04 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	e01c      	b.n	80059f4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	4619      	mov	r1, r3
 80059c2:	68b8      	ldr	r0, [r7, #8]
 80059c4:	f000 f850 	bl	8005a68 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059cc:	f7ff fe78 	bl	80056c0 <FLASH_WaitForLastOperation>
 80059d0:	4603      	mov	r3, r0
 80059d2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80059d4:	4b11      	ldr	r3, [pc, #68]	; (8005a1c <HAL_FLASHEx_Erase+0xdc>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	4a10      	ldr	r2, [pc, #64]	; (8005a1c <HAL_FLASHEx_Erase+0xdc>)
 80059da:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80059de:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	601a      	str	r2, [r3, #0]
          break;
 80059ec:	e00a      	b.n	8005a04 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	3301      	adds	r3, #1
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4413      	add	r3, r2
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d3da      	bcc.n	80059ba <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a04:	f000 f878 	bl	8005af8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a08:	4b03      	ldr	r3, [pc, #12]	; (8005a18 <HAL_FLASHEx_Erase+0xd8>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	761a      	strb	r2, [r3, #24]

  return status;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000d50 	.word	0x20000d50
 8005a1c:	40023c00 	.word	0x40023c00

08005a20 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	6039      	str	r1, [r7, #0]
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <FLASH_MassErase+0x44>)
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	4a0c      	ldr	r2, [pc, #48]	; (8005a64 <FLASH_MassErase+0x44>)
 8005a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <FLASH_MassErase+0x44>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	4a09      	ldr	r2, [pc, #36]	; (8005a64 <FLASH_MassErase+0x44>)
 8005a3e:	f043 0304 	orr.w	r3, r3, #4
 8005a42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <FLASH_MassErase+0x44>)
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	4a05      	ldr	r2, [pc, #20]	; (8005a64 <FLASH_MassErase+0x44>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a54:	6113      	str	r3, [r2, #16]
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40023c00 	.word	0x40023c00

08005a68 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e010      	b.n	8005aa6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d103      	bne.n	8005a92 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	e009      	b.n	8005aa6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d103      	bne.n	8005aa0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e002      	b.n	8005aa6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005aa0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005aa4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005aa6:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <FLASH_Erase_Sector+0x8c>)
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	4a12      	ldr	r2, [pc, #72]	; (8005af4 <FLASH_Erase_Sector+0x8c>)
 8005aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005ab2:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <FLASH_Erase_Sector+0x8c>)
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	490f      	ldr	r1, [pc, #60]	; (8005af4 <FLASH_Erase_Sector+0x8c>)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <FLASH_Erase_Sector+0x8c>)
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	4a0c      	ldr	r2, [pc, #48]	; (8005af4 <FLASH_Erase_Sector+0x8c>)
 8005ac4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ac8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005aca:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <FLASH_Erase_Sector+0x8c>)
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	4a07      	ldr	r2, [pc, #28]	; (8005af4 <FLASH_Erase_Sector+0x8c>)
 8005ad6:	f043 0302 	orr.w	r3, r3, #2
 8005ada:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005adc:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <FLASH_Erase_Sector+0x8c>)
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	4a04      	ldr	r2, [pc, #16]	; (8005af4 <FLASH_Erase_Sector+0x8c>)
 8005ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae6:	6113      	str	r3, [r2, #16]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40023c00 	.word	0x40023c00

08005af8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005afc:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d017      	beq.n	8005b38 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b08:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1c      	ldr	r2, [pc, #112]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b12:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b14:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a16      	ldr	r2, [pc, #88]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b2a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b2c:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b36:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d017      	beq.n	8005b74 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b44:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a0d      	ldr	r2, [pc, #52]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b4e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a07      	ldr	r2, [pc, #28]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b66:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <FLASH_FlushCaches+0x88>)
 8005b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b72:	6013      	str	r3, [r2, #0]
  }
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40023c00 	.word	0x40023c00

08005b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
 8005b9e:	e159      	b.n	8005e54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	f040 8148 	bne.w	8005e4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d005      	beq.n	8005bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d130      	bne.n	8005c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	2203      	movs	r2, #3
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	43db      	mvns	r3, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4013      	ands	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	43db      	mvns	r3, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	f003 0201 	and.w	r2, r3, #1
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d017      	beq.n	8005c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	2203      	movs	r2, #3
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d123      	bne.n	8005cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	08da      	lsrs	r2, r3, #3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3208      	adds	r2, #8
 8005c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	220f      	movs	r2, #15
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	08da      	lsrs	r2, r3, #3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3208      	adds	r2, #8
 8005cc2:	69b9      	ldr	r1, [r7, #24]
 8005cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f003 0203 	and.w	r2, r3, #3
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 80a2 	beq.w	8005e4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	4b57      	ldr	r3, [pc, #348]	; (8005e6c <HAL_GPIO_Init+0x2e8>)
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	4a56      	ldr	r2, [pc, #344]	; (8005e6c <HAL_GPIO_Init+0x2e8>)
 8005d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d18:	6453      	str	r3, [r2, #68]	; 0x44
 8005d1a:	4b54      	ldr	r3, [pc, #336]	; (8005e6c <HAL_GPIO_Init+0x2e8>)
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d26:	4a52      	ldr	r2, [pc, #328]	; (8005e70 <HAL_GPIO_Init+0x2ec>)
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	089b      	lsrs	r3, r3, #2
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	220f      	movs	r2, #15
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	43db      	mvns	r3, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4013      	ands	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a49      	ldr	r2, [pc, #292]	; (8005e74 <HAL_GPIO_Init+0x2f0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d019      	beq.n	8005d86 <HAL_GPIO_Init+0x202>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a48      	ldr	r2, [pc, #288]	; (8005e78 <HAL_GPIO_Init+0x2f4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <HAL_GPIO_Init+0x1fe>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a47      	ldr	r2, [pc, #284]	; (8005e7c <HAL_GPIO_Init+0x2f8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00d      	beq.n	8005d7e <HAL_GPIO_Init+0x1fa>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a46      	ldr	r2, [pc, #280]	; (8005e80 <HAL_GPIO_Init+0x2fc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <HAL_GPIO_Init+0x1f6>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a45      	ldr	r2, [pc, #276]	; (8005e84 <HAL_GPIO_Init+0x300>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d101      	bne.n	8005d76 <HAL_GPIO_Init+0x1f2>
 8005d72:	2304      	movs	r3, #4
 8005d74:	e008      	b.n	8005d88 <HAL_GPIO_Init+0x204>
 8005d76:	2307      	movs	r3, #7
 8005d78:	e006      	b.n	8005d88 <HAL_GPIO_Init+0x204>
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e004      	b.n	8005d88 <HAL_GPIO_Init+0x204>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e002      	b.n	8005d88 <HAL_GPIO_Init+0x204>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <HAL_GPIO_Init+0x204>
 8005d86:	2300      	movs	r3, #0
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	f002 0203 	and.w	r2, r2, #3
 8005d8e:	0092      	lsls	r2, r2, #2
 8005d90:	4093      	lsls	r3, r2
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d98:	4935      	ldr	r1, [pc, #212]	; (8005e70 <HAL_GPIO_Init+0x2ec>)
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	089b      	lsrs	r3, r3, #2
 8005d9e:	3302      	adds	r3, #2
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005da6:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <HAL_GPIO_Init+0x304>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	43db      	mvns	r3, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	4013      	ands	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dca:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <HAL_GPIO_Init+0x304>)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005dd0:	4b2d      	ldr	r3, [pc, #180]	; (8005e88 <HAL_GPIO_Init+0x304>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005df4:	4a24      	ldr	r2, [pc, #144]	; (8005e88 <HAL_GPIO_Init+0x304>)
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005dfa:	4b23      	ldr	r3, [pc, #140]	; (8005e88 <HAL_GPIO_Init+0x304>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	43db      	mvns	r3, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	4013      	ands	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_GPIO_Init+0x304>)
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e24:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <HAL_GPIO_Init+0x304>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4013      	ands	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e48:	4a0f      	ldr	r2, [pc, #60]	; (8005e88 <HAL_GPIO_Init+0x304>)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3301      	adds	r3, #1
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	f67f aea2 	bls.w	8005ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	bf00      	nop
 8005e60:	3724      	adds	r7, #36	; 0x24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	40013800 	.word	0x40013800
 8005e74:	40020000 	.word	0x40020000
 8005e78:	40020400 	.word	0x40020400
 8005e7c:	40020800 	.word	0x40020800
 8005e80:	40020c00 	.word	0x40020c00
 8005e84:	40021000 	.word	0x40021000
 8005e88:	40013c00 	.word	0x40013c00

08005e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e9c:	787b      	ldrb	r3, [r7, #1]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ea2:	887a      	ldrh	r2, [r7, #2]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ea8:	e003      	b.n	8005eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005eaa:	887b      	ldrh	r3, [r7, #2]
 8005eac:	041a      	lsls	r2, r3, #16
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	619a      	str	r2, [r3, #24]
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e12b      	b.n	800612a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fd fbe6 	bl	80036b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2224      	movs	r2, #36	; 0x24
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0201 	bic.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f24:	f001 fbbc 	bl	80076a0 <HAL_RCC_GetPCLK1Freq>
 8005f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4a81      	ldr	r2, [pc, #516]	; (8006134 <HAL_I2C_Init+0x274>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d807      	bhi.n	8005f44 <HAL_I2C_Init+0x84>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4a80      	ldr	r2, [pc, #512]	; (8006138 <HAL_I2C_Init+0x278>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	bf94      	ite	ls
 8005f3c:	2301      	movls	r3, #1
 8005f3e:	2300      	movhi	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	e006      	b.n	8005f52 <HAL_I2C_Init+0x92>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4a7d      	ldr	r2, [pc, #500]	; (800613c <HAL_I2C_Init+0x27c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	bf94      	ite	ls
 8005f4c:	2301      	movls	r3, #1
 8005f4e:	2300      	movhi	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e0e7      	b.n	800612a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a78      	ldr	r2, [pc, #480]	; (8006140 <HAL_I2C_Init+0x280>)
 8005f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f62:	0c9b      	lsrs	r3, r3, #18
 8005f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	4a6a      	ldr	r2, [pc, #424]	; (8006134 <HAL_I2C_Init+0x274>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d802      	bhi.n	8005f94 <HAL_I2C_Init+0xd4>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	3301      	adds	r3, #1
 8005f92:	e009      	b.n	8005fa8 <HAL_I2C_Init+0xe8>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	4a69      	ldr	r2, [pc, #420]	; (8006144 <HAL_I2C_Init+0x284>)
 8005fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa4:	099b      	lsrs	r3, r3, #6
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6812      	ldr	r2, [r2, #0]
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005fba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	495c      	ldr	r1, [pc, #368]	; (8006134 <HAL_I2C_Init+0x274>)
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	d819      	bhi.n	8005ffc <HAL_I2C_Init+0x13c>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	1e59      	subs	r1, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fd6:	1c59      	adds	r1, r3, #1
 8005fd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005fdc:	400b      	ands	r3, r1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <HAL_I2C_Init+0x138>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	1e59      	subs	r1, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ff6:	e051      	b.n	800609c <HAL_I2C_Init+0x1dc>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	e04f      	b.n	800609c <HAL_I2C_Init+0x1dc>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d111      	bne.n	8006028 <HAL_I2C_Init+0x168>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	1e58      	subs	r0, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6859      	ldr	r1, [r3, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	440b      	add	r3, r1
 8006012:	fbb0 f3f3 	udiv	r3, r0, r3
 8006016:	3301      	adds	r3, #1
 8006018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800601c:	2b00      	cmp	r3, #0
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	e012      	b.n	800604e <HAL_I2C_Init+0x18e>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	1e58      	subs	r0, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6859      	ldr	r1, [r3, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	0099      	lsls	r1, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	fbb0 f3f3 	udiv	r3, r0, r3
 800603e:	3301      	adds	r3, #1
 8006040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006044:	2b00      	cmp	r3, #0
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_I2C_Init+0x196>
 8006052:	2301      	movs	r3, #1
 8006054:	e022      	b.n	800609c <HAL_I2C_Init+0x1dc>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10e      	bne.n	800607c <HAL_I2C_Init+0x1bc>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	1e58      	subs	r0, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6859      	ldr	r1, [r3, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	440b      	add	r3, r1
 800606c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006070:	3301      	adds	r3, #1
 8006072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607a:	e00f      	b.n	800609c <HAL_I2C_Init+0x1dc>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	1e58      	subs	r0, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6859      	ldr	r1, [r3, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	0099      	lsls	r1, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006092:	3301      	adds	r3, #1
 8006094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	6809      	ldr	r1, [r1, #0]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80060ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6911      	ldr	r1, [r2, #16]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68d2      	ldr	r2, [r2, #12]
 80060d6:	4311      	orrs	r1, r2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	430b      	orrs	r3, r1
 80060de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	000186a0 	.word	0x000186a0
 8006138:	001e847f 	.word	0x001e847f
 800613c:	003d08ff 	.word	0x003d08ff
 8006140:	431bde83 	.word	0x431bde83
 8006144:	10624dd3 	.word	0x10624dd3

08006148 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	4608      	mov	r0, r1
 8006152:	4611      	mov	r1, r2
 8006154:	461a      	mov	r2, r3
 8006156:	4603      	mov	r3, r0
 8006158:	817b      	strh	r3, [r7, #10]
 800615a:	460b      	mov	r3, r1
 800615c:	813b      	strh	r3, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006162:	f7fe fc89 	bl	8004a78 <HAL_GetTick>
 8006166:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b20      	cmp	r3, #32
 8006172:	f040 80d9 	bne.w	8006328 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	2319      	movs	r3, #25
 800617c:	2201      	movs	r2, #1
 800617e:	496d      	ldr	r1, [pc, #436]	; (8006334 <HAL_I2C_Mem_Write+0x1ec>)
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 fc7f 	bl	8006a84 <I2C_WaitOnFlagUntilTimeout>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800618c:	2302      	movs	r3, #2
 800618e:	e0cc      	b.n	800632a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_I2C_Mem_Write+0x56>
 800619a:	2302      	movs	r3, #2
 800619c:	e0c5      	b.n	800632a <HAL_I2C_Mem_Write+0x1e2>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d007      	beq.n	80061c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2221      	movs	r2, #33	; 0x21
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2240      	movs	r2, #64	; 0x40
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a3a      	ldr	r2, [r7, #32]
 80061ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a4d      	ldr	r2, [pc, #308]	; (8006338 <HAL_I2C_Mem_Write+0x1f0>)
 8006204:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006206:	88f8      	ldrh	r0, [r7, #6]
 8006208:	893a      	ldrh	r2, [r7, #8]
 800620a:	8979      	ldrh	r1, [r7, #10]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	4603      	mov	r3, r0
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fab6 	bl	8006788 <I2C_RequestMemoryWrite>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d052      	beq.n	80062c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e081      	b.n	800632a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fd00 	bl	8006c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00d      	beq.n	8006252 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	2b04      	cmp	r3, #4
 800623c:	d107      	bne.n	800624e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e06b      	b.n	800632a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	781a      	ldrb	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626c:	3b01      	subs	r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b04      	cmp	r3, #4
 800628e:	d11b      	bne.n	80062c8 <HAL_I2C_Mem_Write+0x180>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	d017      	beq.n	80062c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	781a      	ldrb	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1aa      	bne.n	8006226 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 fcec 	bl	8006cb2 <I2C_WaitOnBTFFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00d      	beq.n	80062fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d107      	bne.n	80062f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e016      	b.n	800632a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800630a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	e000      	b.n	800632a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006328:	2302      	movs	r3, #2
  }
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	00100002 	.word	0x00100002
 8006338:	ffff0000 	.word	0xffff0000

0800633c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08c      	sub	sp, #48	; 0x30
 8006340:	af02      	add	r7, sp, #8
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	4608      	mov	r0, r1
 8006346:	4611      	mov	r1, r2
 8006348:	461a      	mov	r2, r3
 800634a:	4603      	mov	r3, r0
 800634c:	817b      	strh	r3, [r7, #10]
 800634e:	460b      	mov	r3, r1
 8006350:	813b      	strh	r3, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006356:	f7fe fb8f 	bl	8004a78 <HAL_GetTick>
 800635a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b20      	cmp	r3, #32
 8006366:	f040 8208 	bne.w	800677a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	2319      	movs	r3, #25
 8006370:	2201      	movs	r2, #1
 8006372:	497b      	ldr	r1, [pc, #492]	; (8006560 <HAL_I2C_Mem_Read+0x224>)
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fb85 	bl	8006a84 <I2C_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006380:	2302      	movs	r3, #2
 8006382:	e1fb      	b.n	800677c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800638a:	2b01      	cmp	r3, #1
 800638c:	d101      	bne.n	8006392 <HAL_I2C_Mem_Read+0x56>
 800638e:	2302      	movs	r3, #2
 8006390:	e1f4      	b.n	800677c <HAL_I2C_Mem_Read+0x440>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d007      	beq.n	80063b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2222      	movs	r2, #34	; 0x22
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2240      	movs	r2, #64	; 0x40
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80063e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4a5b      	ldr	r2, [pc, #364]	; (8006564 <HAL_I2C_Mem_Read+0x228>)
 80063f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063fa:	88f8      	ldrh	r0, [r7, #6]
 80063fc:	893a      	ldrh	r2, [r7, #8]
 80063fe:	8979      	ldrh	r1, [r7, #10]
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	4603      	mov	r3, r0
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fa52 	bl	80068b4 <I2C_RequestMemoryRead>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e1b0      	b.n	800677c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641e:	2b00      	cmp	r3, #0
 8006420:	d113      	bne.n	800644a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006422:	2300      	movs	r3, #0
 8006424:	623b      	str	r3, [r7, #32]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	623b      	str	r3, [r7, #32]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	623b      	str	r3, [r7, #32]
 8006436:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e184      	b.n	8006754 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644e:	2b01      	cmp	r3, #1
 8006450:	d11b      	bne.n	800648a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006462:	2300      	movs	r3, #0
 8006464:	61fb      	str	r3, [r7, #28]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	e164      	b.n	8006754 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648e:	2b02      	cmp	r3, #2
 8006490:	d11b      	bne.n	80064ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	e144      	b.n	8006754 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ca:	2300      	movs	r3, #0
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80064e0:	e138      	b.n	8006754 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	f200 80f1 	bhi.w	80066ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d123      	bne.n	800653c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fc1b 	bl	8006d34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e139      	b.n	800677c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	855a      	strh	r2, [r3, #42]	; 0x2a
 800653a:	e10b      	b.n	8006754 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006540:	2b02      	cmp	r3, #2
 8006542:	d14e      	bne.n	80065e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	2200      	movs	r2, #0
 800654c:	4906      	ldr	r1, [pc, #24]	; (8006568 <HAL_I2C_Mem_Read+0x22c>)
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fa98 	bl	8006a84 <I2C_WaitOnFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e10e      	b.n	800677c <HAL_I2C_Mem_Read+0x440>
 800655e:	bf00      	nop
 8006560:	00100002 	.word	0x00100002
 8006564:	ffff0000 	.word	0xffff0000
 8006568:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800657a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065e0:	e0b8      	b.n	8006754 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	2200      	movs	r2, #0
 80065ea:	4966      	ldr	r1, [pc, #408]	; (8006784 <HAL_I2C_Mem_Read+0x448>)
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fa49 	bl	8006a84 <I2C_WaitOnFlagUntilTimeout>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0bf      	b.n	800677c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	2200      	movs	r2, #0
 8006646:	494f      	ldr	r1, [pc, #316]	; (8006784 <HAL_I2C_Mem_Read+0x448>)
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fa1b 	bl	8006a84 <I2C_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e091      	b.n	800677c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066cc:	e042      	b.n	8006754 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fb2e 	bl	8006d34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e04c      	b.n	800677c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fe:	3b01      	subs	r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	f003 0304 	and.w	r3, r3, #4
 800671e:	2b04      	cmp	r3, #4
 8006720:	d118      	bne.n	8006754 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006758:	2b00      	cmp	r3, #0
 800675a:	f47f aec2 	bne.w	80064e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	e000      	b.n	800677c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800677a:	2302      	movs	r3, #2
  }
}
 800677c:	4618      	mov	r0, r3
 800677e:	3728      	adds	r7, #40	; 0x28
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	00010004 	.word	0x00010004

08006788 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af02      	add	r7, sp, #8
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	4608      	mov	r0, r1
 8006792:	4611      	mov	r1, r2
 8006794:	461a      	mov	r2, r3
 8006796:	4603      	mov	r3, r0
 8006798:	817b      	strh	r3, [r7, #10]
 800679a:	460b      	mov	r3, r1
 800679c:	813b      	strh	r3, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f960 	bl	8006a84 <I2C_WaitOnFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00d      	beq.n	80067e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d8:	d103      	bne.n	80067e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e05f      	b.n	80068a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067e6:	897b      	ldrh	r3, [r7, #10]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	6a3a      	ldr	r2, [r7, #32]
 80067fa:	492d      	ldr	r1, [pc, #180]	; (80068b0 <I2C_RequestMemoryWrite+0x128>)
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f998 	bl	8006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e04c      	b.n	80068a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006824:	6a39      	ldr	r1, [r7, #32]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fa02 	bl	8006c30 <I2C_WaitOnTXEFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00d      	beq.n	800684e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	2b04      	cmp	r3, #4
 8006838:	d107      	bne.n	800684a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006848:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e02b      	b.n	80068a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d105      	bne.n	8006860 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006854:	893b      	ldrh	r3, [r7, #8]
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	611a      	str	r2, [r3, #16]
 800685e:	e021      	b.n	80068a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006860:	893b      	ldrh	r3, [r7, #8]
 8006862:	0a1b      	lsrs	r3, r3, #8
 8006864:	b29b      	uxth	r3, r3
 8006866:	b2da      	uxtb	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800686e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006870:	6a39      	ldr	r1, [r7, #32]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f9dc 	bl	8006c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00d      	beq.n	800689a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	2b04      	cmp	r3, #4
 8006884:	d107      	bne.n	8006896 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006894:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e005      	b.n	80068a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800689a:	893b      	ldrh	r3, [r7, #8]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	00010002 	.word	0x00010002

080068b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	4608      	mov	r0, r1
 80068be:	4611      	mov	r1, r2
 80068c0:	461a      	mov	r2, r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	817b      	strh	r3, [r7, #10]
 80068c6:	460b      	mov	r3, r1
 80068c8:	813b      	strh	r3, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 f8c2 	bl	8006a84 <I2C_WaitOnFlagUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00d      	beq.n	8006922 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006914:	d103      	bne.n	800691e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e0aa      	b.n	8006a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006922:	897b      	ldrh	r3, [r7, #10]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006930:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	6a3a      	ldr	r2, [r7, #32]
 8006936:	4952      	ldr	r1, [pc, #328]	; (8006a80 <I2C_RequestMemoryRead+0x1cc>)
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f8fa 	bl	8006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e097      	b.n	8006a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800695e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006960:	6a39      	ldr	r1, [r7, #32]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f964 	bl	8006c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00d      	beq.n	800698a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	2b04      	cmp	r3, #4
 8006974:	d107      	bne.n	8006986 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006984:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e076      	b.n	8006a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800698a:	88fb      	ldrh	r3, [r7, #6]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d105      	bne.n	800699c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006990:	893b      	ldrh	r3, [r7, #8]
 8006992:	b2da      	uxtb	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	611a      	str	r2, [r3, #16]
 800699a:	e021      	b.n	80069e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800699c:	893b      	ldrh	r3, [r7, #8]
 800699e:	0a1b      	lsrs	r3, r3, #8
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ac:	6a39      	ldr	r1, [r7, #32]
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f93e 	bl	8006c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00d      	beq.n	80069d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d107      	bne.n	80069d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e050      	b.n	8006a78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069d6:	893b      	ldrh	r3, [r7, #8]
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e2:	6a39      	ldr	r1, [r7, #32]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f923 	bl	8006c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d107      	bne.n	8006a08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e035      	b.n	8006a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f82b 	bl	8006a84 <I2C_WaitOnFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00d      	beq.n	8006a50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a42:	d103      	bne.n	8006a4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e013      	b.n	8006a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a50:	897b      	ldrh	r3, [r7, #10]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	f043 0301 	orr.w	r3, r3, #1
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	6a3a      	ldr	r2, [r7, #32]
 8006a64:	4906      	ldr	r1, [pc, #24]	; (8006a80 <I2C_RequestMemoryRead+0x1cc>)
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f863 	bl	8006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	00010002 	.word	0x00010002

08006a84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a94:	e025      	b.n	8006ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9c:	d021      	beq.n	8006ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9e:	f7fd ffeb 	bl	8004a78 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d302      	bcc.n	8006ab4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d116      	bne.n	8006ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	f043 0220 	orr.w	r2, r3, #32
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e023      	b.n	8006b2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	0c1b      	lsrs	r3, r3, #16
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d10d      	bne.n	8006b08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	43da      	mvns	r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4013      	ands	r3, r2
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	bf0c      	ite	eq
 8006afe:	2301      	moveq	r3, #1
 8006b00:	2300      	movne	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	e00c      	b.n	8006b22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	43da      	mvns	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4013      	ands	r3, r2
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bf0c      	ite	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	2300      	movne	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d0b6      	beq.n	8006a96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b40:	e051      	b.n	8006be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b50:	d123      	bne.n	8006b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	f043 0204 	orr.w	r2, r3, #4
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e046      	b.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d021      	beq.n	8006be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba2:	f7fd ff69 	bl	8004a78 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d302      	bcc.n	8006bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d116      	bne.n	8006be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	f043 0220 	orr.w	r2, r3, #32
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e020      	b.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	0c1b      	lsrs	r3, r3, #16
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d10c      	bne.n	8006c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	43da      	mvns	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	bf14      	ite	ne
 8006c02:	2301      	movne	r3, #1
 8006c04:	2300      	moveq	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	e00b      	b.n	8006c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	43da      	mvns	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	4013      	ands	r3, r2
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bf14      	ite	ne
 8006c1c:	2301      	movne	r3, #1
 8006c1e:	2300      	moveq	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d18d      	bne.n	8006b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c3c:	e02d      	b.n	8006c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f8ce 	bl	8006de0 <I2C_IsAcknowledgeFailed>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e02d      	b.n	8006caa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d021      	beq.n	8006c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c56:	f7fd ff0f 	bl	8004a78 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d302      	bcc.n	8006c6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d116      	bne.n	8006c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f043 0220 	orr.w	r2, r3, #32
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e007      	b.n	8006caa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca4:	2b80      	cmp	r3, #128	; 0x80
 8006ca6:	d1ca      	bne.n	8006c3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cbe:	e02d      	b.n	8006d1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f88d 	bl	8006de0 <I2C_IsAcknowledgeFailed>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e02d      	b.n	8006d2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd6:	d021      	beq.n	8006d1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd8:	f7fd fece 	bl	8004a78 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d302      	bcc.n	8006cee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d116      	bne.n	8006d1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	f043 0220 	orr.w	r2, r3, #32
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e007      	b.n	8006d2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d1ca      	bne.n	8006cc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d40:	e042      	b.n	8006dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f003 0310 	and.w	r3, r3, #16
 8006d4c:	2b10      	cmp	r3, #16
 8006d4e:	d119      	bne.n	8006d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f06f 0210 	mvn.w	r2, #16
 8006d58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e029      	b.n	8006dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d84:	f7fd fe78 	bl	8004a78 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d302      	bcc.n	8006d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d116      	bne.n	8006dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	f043 0220 	orr.w	r2, r3, #32
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e007      	b.n	8006dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	d1b5      	bne.n	8006d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df6:	d11b      	bne.n	8006e30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	f043 0204 	orr.w	r2, r3, #4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e267      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d075      	beq.n	8006f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e5e:	4b88      	ldr	r3, [pc, #544]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 030c 	and.w	r3, r3, #12
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d00c      	beq.n	8006e84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e6a:	4b85      	ldr	r3, [pc, #532]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d112      	bne.n	8006e9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e76:	4b82      	ldr	r3, [pc, #520]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e82:	d10b      	bne.n	8006e9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e84:	4b7e      	ldr	r3, [pc, #504]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d05b      	beq.n	8006f48 <HAL_RCC_OscConfig+0x108>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d157      	bne.n	8006f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e242      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea4:	d106      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x74>
 8006ea6:	4b76      	ldr	r3, [pc, #472]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a75      	ldr	r2, [pc, #468]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	e01d      	b.n	8006ef0 <HAL_RCC_OscConfig+0xb0>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ebc:	d10c      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x98>
 8006ebe:	4b70      	ldr	r3, [pc, #448]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a6f      	ldr	r2, [pc, #444]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	4b6d      	ldr	r3, [pc, #436]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a6c      	ldr	r2, [pc, #432]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	e00b      	b.n	8006ef0 <HAL_RCC_OscConfig+0xb0>
 8006ed8:	4b69      	ldr	r3, [pc, #420]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a68      	ldr	r2, [pc, #416]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	4b66      	ldr	r3, [pc, #408]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a65      	ldr	r2, [pc, #404]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d013      	beq.n	8006f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef8:	f7fd fdbe 	bl	8004a78 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f00:	f7fd fdba 	bl	8004a78 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b64      	cmp	r3, #100	; 0x64
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e207      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f12:	4b5b      	ldr	r3, [pc, #364]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f0      	beq.n	8006f00 <HAL_RCC_OscConfig+0xc0>
 8006f1e:	e014      	b.n	8006f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f20:	f7fd fdaa 	bl	8004a78 <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f28:	f7fd fda6 	bl	8004a78 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b64      	cmp	r3, #100	; 0x64
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e1f3      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f3a:	4b51      	ldr	r3, [pc, #324]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <HAL_RCC_OscConfig+0xe8>
 8006f46:	e000      	b.n	8006f4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d063      	beq.n	800701e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f56:	4b4a      	ldr	r3, [pc, #296]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 030c 	and.w	r3, r3, #12
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00b      	beq.n	8006f7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f62:	4b47      	ldr	r3, [pc, #284]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f6a:	2b08      	cmp	r3, #8
 8006f6c:	d11c      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f6e:	4b44      	ldr	r3, [pc, #272]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d116      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f7a:	4b41      	ldr	r3, [pc, #260]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <HAL_RCC_OscConfig+0x152>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d001      	beq.n	8006f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e1c7      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f92:	4b3b      	ldr	r3, [pc, #236]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	4937      	ldr	r1, [pc, #220]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fa6:	e03a      	b.n	800701e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d020      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fb0:	4b34      	ldr	r3, [pc, #208]	; (8007084 <HAL_RCC_OscConfig+0x244>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb6:	f7fd fd5f 	bl	8004a78 <HAL_GetTick>
 8006fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fbe:	f7fd fd5b 	bl	8004a78 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d901      	bls.n	8006fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e1a8      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fd0:	4b2b      	ldr	r3, [pc, #172]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0f0      	beq.n	8006fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fdc:	4b28      	ldr	r3, [pc, #160]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	4925      	ldr	r1, [pc, #148]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	600b      	str	r3, [r1, #0]
 8006ff0:	e015      	b.n	800701e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ff2:	4b24      	ldr	r3, [pc, #144]	; (8007084 <HAL_RCC_OscConfig+0x244>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff8:	f7fd fd3e 	bl	8004a78 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007000:	f7fd fd3a 	bl	8004a78 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e187      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007012:	4b1b      	ldr	r3, [pc, #108]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f0      	bne.n	8007000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d036      	beq.n	8007098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d016      	beq.n	8007060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007032:	4b15      	ldr	r3, [pc, #84]	; (8007088 <HAL_RCC_OscConfig+0x248>)
 8007034:	2201      	movs	r2, #1
 8007036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007038:	f7fd fd1e 	bl	8004a78 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007040:	f7fd fd1a 	bl	8004a78 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e167      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007052:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <HAL_RCC_OscConfig+0x240>)
 8007054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f0      	beq.n	8007040 <HAL_RCC_OscConfig+0x200>
 800705e:	e01b      	b.n	8007098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007060:	4b09      	ldr	r3, [pc, #36]	; (8007088 <HAL_RCC_OscConfig+0x248>)
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007066:	f7fd fd07 	bl	8004a78 <HAL_GetTick>
 800706a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800706c:	e00e      	b.n	800708c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800706e:	f7fd fd03 	bl	8004a78 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d907      	bls.n	800708c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e150      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
 8007080:	40023800 	.word	0x40023800
 8007084:	42470000 	.word	0x42470000
 8007088:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800708c:	4b88      	ldr	r3, [pc, #544]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 800708e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1ea      	bne.n	800706e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 8097 	beq.w	80071d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070aa:	4b81      	ldr	r3, [pc, #516]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10f      	bne.n	80070d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]
 80070ba:	4b7d      	ldr	r3, [pc, #500]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	4a7c      	ldr	r2, [pc, #496]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 80070c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c4:	6413      	str	r3, [r2, #64]	; 0x40
 80070c6:	4b7a      	ldr	r3, [pc, #488]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ce:	60bb      	str	r3, [r7, #8]
 80070d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070d2:	2301      	movs	r3, #1
 80070d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d6:	4b77      	ldr	r3, [pc, #476]	; (80072b4 <HAL_RCC_OscConfig+0x474>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d118      	bne.n	8007114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070e2:	4b74      	ldr	r3, [pc, #464]	; (80072b4 <HAL_RCC_OscConfig+0x474>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a73      	ldr	r2, [pc, #460]	; (80072b4 <HAL_RCC_OscConfig+0x474>)
 80070e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070ee:	f7fd fcc3 	bl	8004a78 <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070f6:	f7fd fcbf 	bl	8004a78 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e10c      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007108:	4b6a      	ldr	r3, [pc, #424]	; (80072b4 <HAL_RCC_OscConfig+0x474>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d106      	bne.n	800712a <HAL_RCC_OscConfig+0x2ea>
 800711c:	4b64      	ldr	r3, [pc, #400]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 800711e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007120:	4a63      	ldr	r2, [pc, #396]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	6713      	str	r3, [r2, #112]	; 0x70
 8007128:	e01c      	b.n	8007164 <HAL_RCC_OscConfig+0x324>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b05      	cmp	r3, #5
 8007130:	d10c      	bne.n	800714c <HAL_RCC_OscConfig+0x30c>
 8007132:	4b5f      	ldr	r3, [pc, #380]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 8007134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007136:	4a5e      	ldr	r2, [pc, #376]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 8007138:	f043 0304 	orr.w	r3, r3, #4
 800713c:	6713      	str	r3, [r2, #112]	; 0x70
 800713e:	4b5c      	ldr	r3, [pc, #368]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 8007140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007142:	4a5b      	ldr	r2, [pc, #364]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	6713      	str	r3, [r2, #112]	; 0x70
 800714a:	e00b      	b.n	8007164 <HAL_RCC_OscConfig+0x324>
 800714c:	4b58      	ldr	r3, [pc, #352]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 800714e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007150:	4a57      	ldr	r2, [pc, #348]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	6713      	str	r3, [r2, #112]	; 0x70
 8007158:	4b55      	ldr	r3, [pc, #340]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 800715a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715c:	4a54      	ldr	r2, [pc, #336]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 800715e:	f023 0304 	bic.w	r3, r3, #4
 8007162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d015      	beq.n	8007198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800716c:	f7fd fc84 	bl	8004a78 <HAL_GetTick>
 8007170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007172:	e00a      	b.n	800718a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007174:	f7fd fc80 	bl	8004a78 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007182:	4293      	cmp	r3, r2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e0cb      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800718a:	4b49      	ldr	r3, [pc, #292]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0ee      	beq.n	8007174 <HAL_RCC_OscConfig+0x334>
 8007196:	e014      	b.n	80071c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007198:	f7fd fc6e 	bl	8004a78 <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800719e:	e00a      	b.n	80071b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071a0:	f7fd fc6a 	bl	8004a78 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e0b5      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071b6:	4b3e      	ldr	r3, [pc, #248]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 80071b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1ee      	bne.n	80071a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d105      	bne.n	80071d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071c8:	4b39      	ldr	r3, [pc, #228]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071cc:	4a38      	ldr	r2, [pc, #224]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 80071ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80a1 	beq.w	8007320 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071de:	4b34      	ldr	r3, [pc, #208]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 030c 	and.w	r3, r3, #12
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d05c      	beq.n	80072a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d141      	bne.n	8007276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f2:	4b31      	ldr	r3, [pc, #196]	; (80072b8 <HAL_RCC_OscConfig+0x478>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f8:	f7fd fc3e 	bl	8004a78 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007200:	f7fd fc3a 	bl	8004a78 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e087      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007212:	4b27      	ldr	r3, [pc, #156]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1f0      	bne.n	8007200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	69da      	ldr	r2, [r3, #28]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	019b      	lsls	r3, r3, #6
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	085b      	lsrs	r3, r3, #1
 8007236:	3b01      	subs	r3, #1
 8007238:	041b      	lsls	r3, r3, #16
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	061b      	lsls	r3, r3, #24
 8007242:	491b      	ldr	r1, [pc, #108]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 8007244:	4313      	orrs	r3, r2
 8007246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007248:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <HAL_RCC_OscConfig+0x478>)
 800724a:	2201      	movs	r2, #1
 800724c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800724e:	f7fd fc13 	bl	8004a78 <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007256:	f7fd fc0f 	bl	8004a78 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e05c      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007268:	4b11      	ldr	r3, [pc, #68]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0f0      	beq.n	8007256 <HAL_RCC_OscConfig+0x416>
 8007274:	e054      	b.n	8007320 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007276:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <HAL_RCC_OscConfig+0x478>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800727c:	f7fd fbfc 	bl	8004a78 <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007284:	f7fd fbf8 	bl	8004a78 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e045      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007296:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <HAL_RCC_OscConfig+0x470>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f0      	bne.n	8007284 <HAL_RCC_OscConfig+0x444>
 80072a2:	e03d      	b.n	8007320 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d107      	bne.n	80072bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e038      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
 80072b0:	40023800 	.word	0x40023800
 80072b4:	40007000 	.word	0x40007000
 80072b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072bc:	4b1b      	ldr	r3, [pc, #108]	; (800732c <HAL_RCC_OscConfig+0x4ec>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d028      	beq.n	800731c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d121      	bne.n	800731c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d11a      	bne.n	800731c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072ec:	4013      	ands	r3, r2
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d111      	bne.n	800731c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	3b01      	subs	r3, #1
 8007306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007308:	429a      	cmp	r2, r3
 800730a:	d107      	bne.n	800731c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007318:	429a      	cmp	r2, r3
 800731a:	d001      	beq.n	8007320 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e000      	b.n	8007322 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40023800 	.word	0x40023800

08007330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e0cc      	b.n	80074de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007344:	4b68      	ldr	r3, [pc, #416]	; (80074e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d90c      	bls.n	800736c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007352:	4b65      	ldr	r3, [pc, #404]	; (80074e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800735a:	4b63      	ldr	r3, [pc, #396]	; (80074e8 <HAL_RCC_ClockConfig+0x1b8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d001      	beq.n	800736c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e0b8      	b.n	80074de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d020      	beq.n	80073ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d005      	beq.n	8007390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007384:	4b59      	ldr	r3, [pc, #356]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	4a58      	ldr	r2, [pc, #352]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800738e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d005      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800739c:	4b53      	ldr	r3, [pc, #332]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	4a52      	ldr	r2, [pc, #328]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 80073a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073a8:	4b50      	ldr	r3, [pc, #320]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	494d      	ldr	r1, [pc, #308]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d044      	beq.n	8007450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d107      	bne.n	80073de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ce:	4b47      	ldr	r3, [pc, #284]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d119      	bne.n	800740e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e07f      	b.n	80074de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d003      	beq.n	80073ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d107      	bne.n	80073fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ee:	4b3f      	ldr	r3, [pc, #252]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d109      	bne.n	800740e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e06f      	b.n	80074de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073fe:	4b3b      	ldr	r3, [pc, #236]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e067      	b.n	80074de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800740e:	4b37      	ldr	r3, [pc, #220]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f023 0203 	bic.w	r2, r3, #3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	4934      	ldr	r1, [pc, #208]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 800741c:	4313      	orrs	r3, r2
 800741e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007420:	f7fd fb2a 	bl	8004a78 <HAL_GetTick>
 8007424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007426:	e00a      	b.n	800743e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007428:	f7fd fb26 	bl	8004a78 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	f241 3288 	movw	r2, #5000	; 0x1388
 8007436:	4293      	cmp	r3, r2
 8007438:	d901      	bls.n	800743e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e04f      	b.n	80074de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743e:	4b2b      	ldr	r3, [pc, #172]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 020c 	and.w	r2, r3, #12
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	429a      	cmp	r2, r3
 800744e:	d1eb      	bne.n	8007428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007450:	4b25      	ldr	r3, [pc, #148]	; (80074e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d20c      	bcs.n	8007478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800745e:	4b22      	ldr	r3, [pc, #136]	; (80074e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007466:	4b20      	ldr	r3, [pc, #128]	; (80074e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	429a      	cmp	r2, r3
 8007472:	d001      	beq.n	8007478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e032      	b.n	80074de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d008      	beq.n	8007496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007484:	4b19      	ldr	r3, [pc, #100]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4916      	ldr	r1, [pc, #88]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 8007492:	4313      	orrs	r3, r2
 8007494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074a2:	4b12      	ldr	r3, [pc, #72]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	490e      	ldr	r1, [pc, #56]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074b6:	f000 f821 	bl	80074fc <HAL_RCC_GetSysClockFreq>
 80074ba:	4602      	mov	r2, r0
 80074bc:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <HAL_RCC_ClockConfig+0x1bc>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	091b      	lsrs	r3, r3, #4
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	490a      	ldr	r1, [pc, #40]	; (80074f0 <HAL_RCC_ClockConfig+0x1c0>)
 80074c8:	5ccb      	ldrb	r3, [r1, r3]
 80074ca:	fa22 f303 	lsr.w	r3, r2, r3
 80074ce:	4a09      	ldr	r2, [pc, #36]	; (80074f4 <HAL_RCC_ClockConfig+0x1c4>)
 80074d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <HAL_RCC_ClockConfig+0x1c8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fd fa8a 	bl	80049f0 <HAL_InitTick>

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	40023c00 	.word	0x40023c00
 80074ec:	40023800 	.word	0x40023800
 80074f0:	0800ed98 	.word	0x0800ed98
 80074f4:	200001c8 	.word	0x200001c8
 80074f8:	200001d0 	.word	0x200001d0

080074fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007500:	b090      	sub	sp, #64	; 0x40
 8007502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
 8007508:	2300      	movs	r3, #0
 800750a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800750c:	2300      	movs	r3, #0
 800750e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007514:	4b59      	ldr	r3, [pc, #356]	; (800767c <HAL_RCC_GetSysClockFreq+0x180>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f003 030c 	and.w	r3, r3, #12
 800751c:	2b08      	cmp	r3, #8
 800751e:	d00d      	beq.n	800753c <HAL_RCC_GetSysClockFreq+0x40>
 8007520:	2b08      	cmp	r3, #8
 8007522:	f200 80a1 	bhi.w	8007668 <HAL_RCC_GetSysClockFreq+0x16c>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <HAL_RCC_GetSysClockFreq+0x34>
 800752a:	2b04      	cmp	r3, #4
 800752c:	d003      	beq.n	8007536 <HAL_RCC_GetSysClockFreq+0x3a>
 800752e:	e09b      	b.n	8007668 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007530:	4b53      	ldr	r3, [pc, #332]	; (8007680 <HAL_RCC_GetSysClockFreq+0x184>)
 8007532:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007534:	e09b      	b.n	800766e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007536:	4b53      	ldr	r3, [pc, #332]	; (8007684 <HAL_RCC_GetSysClockFreq+0x188>)
 8007538:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800753a:	e098      	b.n	800766e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800753c:	4b4f      	ldr	r3, [pc, #316]	; (800767c <HAL_RCC_GetSysClockFreq+0x180>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007544:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007546:	4b4d      	ldr	r3, [pc, #308]	; (800767c <HAL_RCC_GetSysClockFreq+0x180>)
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d028      	beq.n	80075a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007552:	4b4a      	ldr	r3, [pc, #296]	; (800767c <HAL_RCC_GetSysClockFreq+0x180>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	099b      	lsrs	r3, r3, #6
 8007558:	2200      	movs	r2, #0
 800755a:	623b      	str	r3, [r7, #32]
 800755c:	627a      	str	r2, [r7, #36]	; 0x24
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007564:	2100      	movs	r1, #0
 8007566:	4b47      	ldr	r3, [pc, #284]	; (8007684 <HAL_RCC_GetSysClockFreq+0x188>)
 8007568:	fb03 f201 	mul.w	r2, r3, r1
 800756c:	2300      	movs	r3, #0
 800756e:	fb00 f303 	mul.w	r3, r0, r3
 8007572:	4413      	add	r3, r2
 8007574:	4a43      	ldr	r2, [pc, #268]	; (8007684 <HAL_RCC_GetSysClockFreq+0x188>)
 8007576:	fba0 1202 	umull	r1, r2, r0, r2
 800757a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800757c:	460a      	mov	r2, r1
 800757e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007582:	4413      	add	r3, r2
 8007584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007588:	2200      	movs	r2, #0
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	61fa      	str	r2, [r7, #28]
 800758e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007592:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007596:	f7f9 fb1f 	bl	8000bd8 <__aeabi_uldivmod>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4613      	mov	r3, r2
 80075a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075a2:	e053      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075a4:	4b35      	ldr	r3, [pc, #212]	; (800767c <HAL_RCC_GetSysClockFreq+0x180>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	099b      	lsrs	r3, r3, #6
 80075aa:	2200      	movs	r2, #0
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	617a      	str	r2, [r7, #20]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80075b6:	f04f 0b00 	mov.w	fp, #0
 80075ba:	4652      	mov	r2, sl
 80075bc:	465b      	mov	r3, fp
 80075be:	f04f 0000 	mov.w	r0, #0
 80075c2:	f04f 0100 	mov.w	r1, #0
 80075c6:	0159      	lsls	r1, r3, #5
 80075c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075cc:	0150      	lsls	r0, r2, #5
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	ebb2 080a 	subs.w	r8, r2, sl
 80075d6:	eb63 090b 	sbc.w	r9, r3, fp
 80075da:	f04f 0200 	mov.w	r2, #0
 80075de:	f04f 0300 	mov.w	r3, #0
 80075e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80075e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80075ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80075ee:	ebb2 0408 	subs.w	r4, r2, r8
 80075f2:	eb63 0509 	sbc.w	r5, r3, r9
 80075f6:	f04f 0200 	mov.w	r2, #0
 80075fa:	f04f 0300 	mov.w	r3, #0
 80075fe:	00eb      	lsls	r3, r5, #3
 8007600:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007604:	00e2      	lsls	r2, r4, #3
 8007606:	4614      	mov	r4, r2
 8007608:	461d      	mov	r5, r3
 800760a:	eb14 030a 	adds.w	r3, r4, sl
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	eb45 030b 	adc.w	r3, r5, fp
 8007614:	607b      	str	r3, [r7, #4]
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007622:	4629      	mov	r1, r5
 8007624:	028b      	lsls	r3, r1, #10
 8007626:	4621      	mov	r1, r4
 8007628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800762c:	4621      	mov	r1, r4
 800762e:	028a      	lsls	r2, r1, #10
 8007630:	4610      	mov	r0, r2
 8007632:	4619      	mov	r1, r3
 8007634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007636:	2200      	movs	r2, #0
 8007638:	60bb      	str	r3, [r7, #8]
 800763a:	60fa      	str	r2, [r7, #12]
 800763c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007640:	f7f9 faca 	bl	8000bd8 <__aeabi_uldivmod>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4613      	mov	r3, r2
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <HAL_RCC_GetSysClockFreq+0x180>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	0c1b      	lsrs	r3, r3, #16
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	3301      	adds	r3, #1
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800765c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	fbb2 f3f3 	udiv	r3, r2, r3
 8007664:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007666:	e002      	b.n	800766e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007668:	4b05      	ldr	r3, [pc, #20]	; (8007680 <HAL_RCC_GetSysClockFreq+0x184>)
 800766a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800766c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800766e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007670:	4618      	mov	r0, r3
 8007672:	3740      	adds	r7, #64	; 0x40
 8007674:	46bd      	mov	sp, r7
 8007676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800767a:	bf00      	nop
 800767c:	40023800 	.word	0x40023800
 8007680:	00f42400 	.word	0x00f42400
 8007684:	017d7840 	.word	0x017d7840

08007688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800768c:	4b03      	ldr	r3, [pc, #12]	; (800769c <HAL_RCC_GetHCLKFreq+0x14>)
 800768e:	681b      	ldr	r3, [r3, #0]
}
 8007690:	4618      	mov	r0, r3
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	200001c8 	.word	0x200001c8

080076a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076a4:	f7ff fff0 	bl	8007688 <HAL_RCC_GetHCLKFreq>
 80076a8:	4602      	mov	r2, r0
 80076aa:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	0a9b      	lsrs	r3, r3, #10
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	4903      	ldr	r1, [pc, #12]	; (80076c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076b6:	5ccb      	ldrb	r3, [r1, r3]
 80076b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076bc:	4618      	mov	r0, r3
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40023800 	.word	0x40023800
 80076c4:	0800eda8 	.word	0x0800eda8

080076c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80076cc:	f7ff ffdc 	bl	8007688 <HAL_RCC_GetHCLKFreq>
 80076d0:	4602      	mov	r2, r0
 80076d2:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	0b5b      	lsrs	r3, r3, #13
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	4903      	ldr	r1, [pc, #12]	; (80076ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80076de:	5ccb      	ldrb	r3, [r1, r3]
 80076e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	40023800 	.word	0x40023800
 80076ec:	0800eda8 	.word	0x0800eda8

080076f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d105      	bne.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007714:	2b00      	cmp	r3, #0
 8007716:	d038      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007718:	4b68      	ldr	r3, [pc, #416]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800771e:	f7fd f9ab 	bl	8004a78 <HAL_GetTick>
 8007722:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007724:	e008      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007726:	f7fd f9a7 	bl	8004a78 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d901      	bls.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e0bd      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007738:	4b61      	ldr	r3, [pc, #388]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f0      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	019b      	lsls	r3, r3, #6
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	071b      	lsls	r3, r3, #28
 8007756:	495a      	ldr	r1, [pc, #360]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007758:	4313      	orrs	r3, r2
 800775a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800775e:	4b57      	ldr	r3, [pc, #348]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007760:	2201      	movs	r2, #1
 8007762:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007764:	f7fd f988 	bl	8004a78 <HAL_GetTick>
 8007768:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800776a:	e008      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800776c:	f7fd f984 	bl	8004a78 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e09a      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800777e:	4b50      	ldr	r3, [pc, #320]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0f0      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8083 	beq.w	800789e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	4b48      	ldr	r3, [pc, #288]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	4a47      	ldr	r2, [pc, #284]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a6:	6413      	str	r3, [r2, #64]	; 0x40
 80077a8:	4b45      	ldr	r3, [pc, #276]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b0:	60fb      	str	r3, [r7, #12]
 80077b2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80077b4:	4b43      	ldr	r3, [pc, #268]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a42      	ldr	r2, [pc, #264]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077be:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077c0:	f7fd f95a 	bl	8004a78 <HAL_GetTick>
 80077c4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077c6:	e008      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80077c8:	f7fd f956 	bl	8004a78 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d901      	bls.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e06c      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077da:	4b3a      	ldr	r3, [pc, #232]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0f0      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077e6:	4b36      	ldr	r3, [pc, #216]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ee:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d02f      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	429a      	cmp	r2, r3
 8007802:	d028      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007804:	4b2e      	ldr	r3, [pc, #184]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800780c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800780e:	4b2e      	ldr	r3, [pc, #184]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007810:	2201      	movs	r2, #1
 8007812:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007814:	4b2c      	ldr	r3, [pc, #176]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800781a:	4a29      	ldr	r2, [pc, #164]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007820:	4b27      	ldr	r3, [pc, #156]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b01      	cmp	r3, #1
 800782a:	d114      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800782c:	f7fd f924 	bl	8004a78 <HAL_GetTick>
 8007830:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007832:	e00a      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007834:	f7fd f920 	bl	8004a78 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007842:	4293      	cmp	r3, r2
 8007844:	d901      	bls.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e034      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800784a:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800784c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0ee      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007862:	d10d      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007864:	4b16      	ldr	r3, [pc, #88]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007878:	4911      	ldr	r1, [pc, #68]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800787a:	4313      	orrs	r3, r2
 800787c:	608b      	str	r3, [r1, #8]
 800787e:	e005      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007880:	4b0f      	ldr	r3, [pc, #60]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	4a0e      	ldr	r2, [pc, #56]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007886:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800788a:	6093      	str	r3, [r2, #8]
 800788c:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800788e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007898:	4909      	ldr	r1, [pc, #36]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800789a:	4313      	orrs	r3, r2
 800789c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7d1a      	ldrb	r2, [r3, #20]
 80078ae:	4b07      	ldr	r3, [pc, #28]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80078b0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	42470068 	.word	0x42470068
 80078c0:	40023800 	.word	0x40023800
 80078c4:	40007000 	.word	0x40007000
 80078c8:	42470e40 	.word	0x42470e40
 80078cc:	424711e0 	.word	0x424711e0

080078d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e066      	b.n	80079b4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	7f5b      	ldrb	r3, [r3, #29]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d105      	bne.n	80078fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7fc f894 	bl	8003a24 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	22ca      	movs	r2, #202	; 0xca
 8007908:	625a      	str	r2, [r3, #36]	; 0x24
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2253      	movs	r2, #83	; 0x53
 8007910:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa45 	bl	8007da2 <RTC_EnterInitMode>
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d12c      	bne.n	800797c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007934:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6899      	ldr	r1, [r3, #8]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	68d2      	ldr	r2, [r2, #12]
 800795c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6919      	ldr	r1, [r3, #16]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	041a      	lsls	r2, r3, #16
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fa4c 	bl	8007e10 <RTC_ExitInitMode>
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d113      	bne.n	80079aa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007990:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	22ff      	movs	r2, #255	; 0xff
 80079b0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80079bc:	b590      	push	{r4, r7, lr}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	7f1b      	ldrb	r3, [r3, #28]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_RTC_SetTime+0x1c>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e087      	b.n	8007ae8 <HAL_RTC_SetTime+0x12c>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2202      	movs	r2, #2
 80079e2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d126      	bne.n	8007a38 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d102      	bne.n	80079fe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2200      	movs	r2, #0
 80079fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fa29 	bl	8007e5a <RTC_ByteToBcd2>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fa22 	bl	8007e5a <RTC_ByteToBcd2>
 8007a16:	4603      	mov	r3, r0
 8007a18:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007a1a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	789b      	ldrb	r3, [r3, #2]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fa1a 	bl	8007e5a <RTC_ByteToBcd2>
 8007a26:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a28:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	78db      	ldrb	r3, [r3, #3]
 8007a30:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	e018      	b.n	8007a6a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d102      	bne.n	8007a4c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	785b      	ldrb	r3, [r3, #1]
 8007a56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007a58:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007a5e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	78db      	ldrb	r3, [r3, #3]
 8007a64:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	22ca      	movs	r2, #202	; 0xca
 8007a70:	625a      	str	r2, [r3, #36]	; 0x24
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2253      	movs	r2, #83	; 0x53
 8007a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f991 	bl	8007da2 <RTC_EnterInitMode>
 8007a80:	4603      	mov	r3, r0
 8007a82:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007a84:	7cfb      	ldrb	r3, [r7, #19]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d120      	bne.n	8007acc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007a94:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007a98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007aa8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6899      	ldr	r1, [r3, #8]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 f9a4 	bl	8007e10 <RTC_ExitInitMode>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007acc:	7cfb      	ldrb	r3, [r7, #19]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d102      	bne.n	8007ad8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	22ff      	movs	r2, #255	; 0xff
 8007ade:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	771a      	strb	r2, [r3, #28]

  return status;
 8007ae6:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd90      	pop	{r4, r7, pc}

08007af0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007b22:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	0a1b      	lsrs	r3, r3, #8
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	0d9b      	lsrs	r3, r3, #22
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d11a      	bne.n	8007ba2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 f98f 	bl	8007e94 <RTC_Bcd2ToByte>
 8007b76:	4603      	mov	r3, r0
 8007b78:	461a      	mov	r2, r3
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	785b      	ldrb	r3, [r3, #1]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f986 	bl	8007e94 <RTC_Bcd2ToByte>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	789b      	ldrb	r3, [r3, #2]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 f97d 	bl	8007e94 <RTC_Bcd2ToByte>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007bac:	b590      	push	{r4, r7, lr}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	7f1b      	ldrb	r3, [r3, #28]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_RTC_SetDate+0x1c>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e071      	b.n	8007cac <HAL_RTC_SetDate+0x100>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_RTC_SetDate+0x4c>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	f003 0310 	and.w	r3, r3, #16
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d008      	beq.n	8007bf8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	f023 0310 	bic.w	r3, r3, #16
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	330a      	adds	r3, #10
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d11c      	bne.n	8007c38 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	78db      	ldrb	r3, [r3, #3]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 f929 	bl	8007e5a <RTC_ByteToBcd2>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 f922 	bl	8007e5a <RTC_ByteToBcd2>
 8007c16:	4603      	mov	r3, r0
 8007c18:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c1a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	789b      	ldrb	r3, [r3, #2]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 f91a 	bl	8007e5a <RTC_ByteToBcd2>
 8007c26:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c28:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c32:	4313      	orrs	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e00e      	b.n	8007c56 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	78db      	ldrb	r3, [r3, #3]
 8007c3c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c44:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007c4a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	22ca      	movs	r2, #202	; 0xca
 8007c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2253      	movs	r2, #83	; 0x53
 8007c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 f89b 	bl	8007da2 <RTC_EnterInitMode>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007c70:	7cfb      	ldrb	r3, [r7, #19]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10c      	bne.n	8007c90 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c84:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 f8c2 	bl	8007e10 <RTC_ExitInitMode>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007c90:	7cfb      	ldrb	r3, [r7, #19]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d102      	bne.n	8007c9c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	22ff      	movs	r2, #255	; 0xff
 8007ca2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	771a      	strb	r2, [r3, #28]

  return status;
 8007caa:	7cfb      	ldrb	r3, [r7, #19]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd90      	pop	{r4, r7, pc}

08007cb4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007cce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007cd2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	0c1b      	lsrs	r3, r3, #16
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	0a1b      	lsrs	r3, r3, #8
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f003 031f 	and.w	r3, r3, #31
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	0b5b      	lsrs	r3, r3, #13
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d11a      	bne.n	8007d48 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	78db      	ldrb	r3, [r3, #3]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f8bc 	bl	8007e94 <RTC_Bcd2ToByte>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	461a      	mov	r2, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 f8b3 	bl	8007e94 <RTC_Bcd2ToByte>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	461a      	mov	r2, r3
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	789b      	ldrb	r3, [r3, #2]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f8aa 	bl	8007e94 <RTC_Bcd2ToByte>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461a      	mov	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d6c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d6e:	f7fc fe83 	bl	8004a78 <HAL_GetTick>
 8007d72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d74:	e009      	b.n	8007d8a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d76:	f7fc fe7f 	bl	8004a78 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d84:	d901      	bls.n	8007d8a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e007      	b.n	8007d9a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0ee      	beq.n	8007d76 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d122      	bne.n	8007e06 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dd0:	f7fc fe52 	bl	8004a78 <HAL_GetTick>
 8007dd4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007dd6:	e00c      	b.n	8007df2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007dd8:	f7fc fe4e 	bl	8004a78 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007de6:	d904      	bls.n	8007df2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2204      	movs	r2, #4
 8007dec:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <RTC_EnterInitMode+0x64>
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d1e8      	bne.n	8007dd8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e2a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10a      	bne.n	8007e50 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff ff89 	bl	8007d52 <HAL_RTC_WaitForSynchro>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2204      	movs	r2, #4
 8007e4a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	4603      	mov	r3, r0
 8007e62:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007e68:	e005      	b.n	8007e76 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	3b0a      	subs	r3, #10
 8007e74:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	2b09      	cmp	r3, #9
 8007e7a:	d8f6      	bhi.n	8007e6a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	b2db      	uxtb	r3, r3
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	091b      	lsrs	r3, r3, #4
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	0092      	lsls	r2, r2, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	f003 030f 	and.w	r3, r3, #15
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	b2db      	uxtb	r3, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e07b      	b.n	8007fd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d108      	bne.n	8007ef8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eee:	d009      	beq.n	8007f04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	61da      	str	r2, [r3, #28]
 8007ef6:	e005      	b.n	8007f04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fb fde2 	bl	8003ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	431a      	orrs	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f88:	ea42 0103 	orr.w	r1, r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	0c1b      	lsrs	r3, r3, #16
 8007fa2:	f003 0104 	and.w	r1, r3, #4
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	f003 0210 	and.w	r2, r3, #16
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e041      	b.n	8008074 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7fb ff95 	bl	8003f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2202      	movs	r2, #2
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3304      	adds	r3, #4
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f000 fd61 	bl	8008ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e041      	b.n	8008112 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f839 	bl	800811a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3304      	adds	r3, #4
 80080b8:	4619      	mov	r1, r3
 80080ba:	4610      	mov	r0, r2
 80080bc:	f000 fd12 	bl	8008ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
	...

08008130 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d109      	bne.n	800815c <HAL_TIM_PWM_Start_DMA+0x2c>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	bf0c      	ite	eq
 8008154:	2301      	moveq	r3, #1
 8008156:	2300      	movne	r3, #0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	e022      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x72>
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b04      	cmp	r3, #4
 8008160:	d109      	bne.n	8008176 <HAL_TIM_PWM_Start_DMA+0x46>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	bf0c      	ite	eq
 800816e:	2301      	moveq	r3, #1
 8008170:	2300      	movne	r3, #0
 8008172:	b2db      	uxtb	r3, r3
 8008174:	e015      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x72>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b08      	cmp	r3, #8
 800817a:	d109      	bne.n	8008190 <HAL_TIM_PWM_Start_DMA+0x60>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	bf0c      	ite	eq
 8008188:	2301      	moveq	r3, #1
 800818a:	2300      	movne	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	e008      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x72>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	bf0c      	ite	eq
 800819c:	2301      	moveq	r3, #1
 800819e:	2300      	movne	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80081a6:	2302      	movs	r3, #2
 80081a8:	e15d      	b.n	8008466 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d109      	bne.n	80081c4 <HAL_TIM_PWM_Start_DMA+0x94>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	bf0c      	ite	eq
 80081bc:	2301      	moveq	r3, #1
 80081be:	2300      	movne	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	e022      	b.n	800820a <HAL_TIM_PWM_Start_DMA+0xda>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d109      	bne.n	80081de <HAL_TIM_PWM_Start_DMA+0xae>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	bf0c      	ite	eq
 80081d6:	2301      	moveq	r3, #1
 80081d8:	2300      	movne	r3, #0
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	e015      	b.n	800820a <HAL_TIM_PWM_Start_DMA+0xda>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d109      	bne.n	80081f8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	bf0c      	ite	eq
 80081f0:	2301      	moveq	r3, #1
 80081f2:	2300      	movne	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	e008      	b.n	800820a <HAL_TIM_PWM_Start_DMA+0xda>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b01      	cmp	r3, #1
 8008202:	bf0c      	ite	eq
 8008204:	2301      	moveq	r3, #1
 8008206:	2300      	movne	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d024      	beq.n	8008258 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d104      	bne.n	800821e <HAL_TIM_PWM_Start_DMA+0xee>
 8008214:	887b      	ldrh	r3, [r7, #2]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e123      	b.n	8008466 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <HAL_TIM_PWM_Start_DMA+0xfe>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800822c:	e016      	b.n	800825c <HAL_TIM_PWM_Start_DMA+0x12c>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b04      	cmp	r3, #4
 8008232:	d104      	bne.n	800823e <HAL_TIM_PWM_Start_DMA+0x10e>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800823c:	e00e      	b.n	800825c <HAL_TIM_PWM_Start_DMA+0x12c>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b08      	cmp	r3, #8
 8008242:	d104      	bne.n	800824e <HAL_TIM_PWM_Start_DMA+0x11e>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800824c:	e006      	b.n	800825c <HAL_TIM_PWM_Start_DMA+0x12c>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2202      	movs	r2, #2
 8008252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008256:	e001      	b.n	800825c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e104      	b.n	8008466 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2b0c      	cmp	r3, #12
 8008260:	f200 80ae 	bhi.w	80083c0 <HAL_TIM_PWM_Start_DMA+0x290>
 8008264:	a201      	add	r2, pc, #4	; (adr r2, 800826c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	080082a1 	.word	0x080082a1
 8008270:	080083c1 	.word	0x080083c1
 8008274:	080083c1 	.word	0x080083c1
 8008278:	080083c1 	.word	0x080083c1
 800827c:	080082e9 	.word	0x080082e9
 8008280:	080083c1 	.word	0x080083c1
 8008284:	080083c1 	.word	0x080083c1
 8008288:	080083c1 	.word	0x080083c1
 800828c:	08008331 	.word	0x08008331
 8008290:	080083c1 	.word	0x080083c1
 8008294:	080083c1 	.word	0x080083c1
 8008298:	080083c1 	.word	0x080083c1
 800829c:	08008379 	.word	0x08008379
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	4a72      	ldr	r2, [pc, #456]	; (8008470 <HAL_TIM_PWM_Start_DMA+0x340>)
 80082a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	4a71      	ldr	r2, [pc, #452]	; (8008474 <HAL_TIM_PWM_Start_DMA+0x344>)
 80082ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	4a70      	ldr	r2, [pc, #448]	; (8008478 <HAL_TIM_PWM_Start_DMA+0x348>)
 80082b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3334      	adds	r3, #52	; 0x34
 80082c4:	461a      	mov	r2, r3
 80082c6:	887b      	ldrh	r3, [r7, #2]
 80082c8:	f7fc fe14 	bl	8004ef4 <HAL_DMA_Start_IT>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e0c7      	b.n	8008466 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082e4:	60da      	str	r2, [r3, #12]
      break;
 80082e6:	e06e      	b.n	80083c6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	4a60      	ldr	r2, [pc, #384]	; (8008470 <HAL_TIM_PWM_Start_DMA+0x340>)
 80082ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f4:	4a5f      	ldr	r2, [pc, #380]	; (8008474 <HAL_TIM_PWM_Start_DMA+0x344>)
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	4a5e      	ldr	r2, [pc, #376]	; (8008478 <HAL_TIM_PWM_Start_DMA+0x348>)
 80082fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3338      	adds	r3, #56	; 0x38
 800830c:	461a      	mov	r2, r3
 800830e:	887b      	ldrh	r3, [r7, #2]
 8008310:	f7fc fdf0 	bl	8004ef4 <HAL_DMA_Start_IT>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e0a3      	b.n	8008466 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800832c:	60da      	str	r2, [r3, #12]
      break;
 800832e:	e04a      	b.n	80083c6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008334:	4a4e      	ldr	r2, [pc, #312]	; (8008470 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008336:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	4a4d      	ldr	r2, [pc, #308]	; (8008474 <HAL_TIM_PWM_Start_DMA+0x344>)
 800833e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	4a4c      	ldr	r2, [pc, #304]	; (8008478 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008346:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	333c      	adds	r3, #60	; 0x3c
 8008354:	461a      	mov	r2, r3
 8008356:	887b      	ldrh	r3, [r7, #2]
 8008358:	f7fc fdcc 	bl	8004ef4 <HAL_DMA_Start_IT>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e07f      	b.n	8008466 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008374:	60da      	str	r2, [r3, #12]
      break;
 8008376:	e026      	b.n	80083c6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837c:	4a3c      	ldr	r2, [pc, #240]	; (8008470 <HAL_TIM_PWM_Start_DMA+0x340>)
 800837e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008384:	4a3b      	ldr	r2, [pc, #236]	; (8008474 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838c:	4a3a      	ldr	r2, [pc, #232]	; (8008478 <HAL_TIM_PWM_Start_DMA+0x348>)
 800838e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008394:	6879      	ldr	r1, [r7, #4]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3340      	adds	r3, #64	; 0x40
 800839c:	461a      	mov	r2, r3
 800839e:	887b      	ldrh	r3, [r7, #2]
 80083a0:	f7fc fda8 	bl	8004ef4 <HAL_DMA_Start_IT>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e05b      	b.n	8008466 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083bc:	60da      	str	r2, [r3, #12]
      break;
 80083be:	e002      	b.n	80083c6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]
      break;
 80083c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d14b      	bne.n	8008464 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2201      	movs	r2, #1
 80083d2:	68b9      	ldr	r1, [r7, #8]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fe2b 	bl	8009030 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a27      	ldr	r2, [pc, #156]	; (800847c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d107      	bne.n	80083f4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a20      	ldr	r2, [pc, #128]	; (800847c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d018      	beq.n	8008430 <HAL_TIM_PWM_Start_DMA+0x300>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008406:	d013      	beq.n	8008430 <HAL_TIM_PWM_Start_DMA+0x300>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1c      	ldr	r2, [pc, #112]	; (8008480 <HAL_TIM_PWM_Start_DMA+0x350>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00e      	beq.n	8008430 <HAL_TIM_PWM_Start_DMA+0x300>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a1b      	ldr	r2, [pc, #108]	; (8008484 <HAL_TIM_PWM_Start_DMA+0x354>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d009      	beq.n	8008430 <HAL_TIM_PWM_Start_DMA+0x300>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a19      	ldr	r2, [pc, #100]	; (8008488 <HAL_TIM_PWM_Start_DMA+0x358>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d004      	beq.n	8008430 <HAL_TIM_PWM_Start_DMA+0x300>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a18      	ldr	r2, [pc, #96]	; (800848c <HAL_TIM_PWM_Start_DMA+0x35c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d111      	bne.n	8008454 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2b06      	cmp	r3, #6
 8008440:	d010      	beq.n	8008464 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0201 	orr.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008452:	e007      	b.n	8008464 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008464:	7dfb      	ldrb	r3, [r7, #23]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	080089d5 	.word	0x080089d5
 8008474:	08008a7d 	.word	0x08008a7d
 8008478:	08008943 	.word	0x08008943
 800847c:	40010000 	.word	0x40010000
 8008480:	40000400 	.word	0x40000400
 8008484:	40000800 	.word	0x40000800
 8008488:	40000c00 	.word	0x40000c00
 800848c:	40014000 	.word	0x40014000

08008490 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	2b0c      	cmp	r3, #12
 80084a2:	d855      	bhi.n	8008550 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80084a4:	a201      	add	r2, pc, #4	; (adr r2, 80084ac <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	080084e1 	.word	0x080084e1
 80084b0:	08008551 	.word	0x08008551
 80084b4:	08008551 	.word	0x08008551
 80084b8:	08008551 	.word	0x08008551
 80084bc:	080084fd 	.word	0x080084fd
 80084c0:	08008551 	.word	0x08008551
 80084c4:	08008551 	.word	0x08008551
 80084c8:	08008551 	.word	0x08008551
 80084cc:	08008519 	.word	0x08008519
 80084d0:	08008551 	.word	0x08008551
 80084d4:	08008551 	.word	0x08008551
 80084d8:	08008551 	.word	0x08008551
 80084dc:	08008535 	.word	0x08008535
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80084ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fc fdc5 	bl	8005084 <HAL_DMA_Abort_IT>
      break;
 80084fa:	e02c      	b.n	8008556 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68da      	ldr	r2, [r3, #12]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800850a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	4618      	mov	r0, r3
 8008512:	f7fc fdb7 	bl	8005084 <HAL_DMA_Abort_IT>
      break;
 8008516:	e01e      	b.n	8008556 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008526:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	4618      	mov	r0, r3
 800852e:	f7fc fda9 	bl	8005084 <HAL_DMA_Abort_IT>
      break;
 8008532:	e010      	b.n	8008556 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008542:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008548:	4618      	mov	r0, r3
 800854a:	f7fc fd9b 	bl	8005084 <HAL_DMA_Abort_IT>
      break;
 800854e:	e002      	b.n	8008556 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	73fb      	strb	r3, [r7, #15]
      break;
 8008554:	bf00      	nop
  }

  if (status == HAL_OK)
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d157      	bne.n	800860c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2200      	movs	r2, #0
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fd63 	bl	8009030 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a2a      	ldr	r2, [pc, #168]	; (8008618 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d117      	bne.n	80085a4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a1a      	ldr	r2, [r3, #32]
 800857a:	f241 1311 	movw	r3, #4369	; 0x1111
 800857e:	4013      	ands	r3, r2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10f      	bne.n	80085a4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6a1a      	ldr	r2, [r3, #32]
 800858a:	f240 4344 	movw	r3, #1092	; 0x444
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d107      	bne.n	80085a4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6a1a      	ldr	r2, [r3, #32]
 80085aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80085ae:	4013      	ands	r3, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10f      	bne.n	80085d4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6a1a      	ldr	r2, [r3, #32]
 80085ba:	f240 4344 	movw	r3, #1092	; 0x444
 80085be:	4013      	ands	r3, r2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d107      	bne.n	80085d4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0201 	bic.w	r2, r2, #1
 80085d2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d104      	bne.n	80085e4 <HAL_TIM_PWM_Stop_DMA+0x154>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085e2:	e013      	b.n	800860c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d104      	bne.n	80085f4 <HAL_TIM_PWM_Stop_DMA+0x164>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085f2:	e00b      	b.n	800860c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d104      	bne.n	8008604 <HAL_TIM_PWM_Stop_DMA+0x174>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008602:	e003      	b.n	800860c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	40010000 	.word	0x40010000

0800861c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008632:	2b01      	cmp	r3, #1
 8008634:	d101      	bne.n	800863a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008636:	2302      	movs	r3, #2
 8008638:	e0ae      	b.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b0c      	cmp	r3, #12
 8008646:	f200 809f 	bhi.w	8008788 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800864a:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	08008685 	.word	0x08008685
 8008654:	08008789 	.word	0x08008789
 8008658:	08008789 	.word	0x08008789
 800865c:	08008789 	.word	0x08008789
 8008660:	080086c5 	.word	0x080086c5
 8008664:	08008789 	.word	0x08008789
 8008668:	08008789 	.word	0x08008789
 800866c:	08008789 	.word	0x08008789
 8008670:	08008707 	.word	0x08008707
 8008674:	08008789 	.word	0x08008789
 8008678:	08008789 	.word	0x08008789
 800867c:	08008789 	.word	0x08008789
 8008680:	08008747 	.word	0x08008747
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 faaa 	bl	8008be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699a      	ldr	r2, [r3, #24]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0208 	orr.w	r2, r2, #8
 800869e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699a      	ldr	r2, [r3, #24]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0204 	bic.w	r2, r2, #4
 80086ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6999      	ldr	r1, [r3, #24]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	691a      	ldr	r2, [r3, #16]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	619a      	str	r2, [r3, #24]
      break;
 80086c2:	e064      	b.n	800878e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 faf0 	bl	8008cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699a      	ldr	r2, [r3, #24]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6999      	ldr	r1, [r3, #24]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	021a      	lsls	r2, r3, #8
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	619a      	str	r2, [r3, #24]
      break;
 8008704:	e043      	b.n	800878e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68b9      	ldr	r1, [r7, #8]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fb3b 	bl	8008d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	69da      	ldr	r2, [r3, #28]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f042 0208 	orr.w	r2, r2, #8
 8008720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69da      	ldr	r2, [r3, #28]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0204 	bic.w	r2, r2, #4
 8008730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69d9      	ldr	r1, [r3, #28]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	61da      	str	r2, [r3, #28]
      break;
 8008744:	e023      	b.n	800878e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fb85 	bl	8008e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69da      	ldr	r2, [r3, #28]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69da      	ldr	r2, [r3, #28]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	69d9      	ldr	r1, [r3, #28]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	021a      	lsls	r2, r3, #8
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	61da      	str	r2, [r3, #28]
      break;
 8008786:	e002      	b.n	800878e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	75fb      	strb	r3, [r7, #23]
      break;
 800878c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_TIM_ConfigClockSource+0x1c>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e0b4      	b.n	8008926 <HAL_TIM_ConfigClockSource+0x186>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80087da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087f4:	d03e      	beq.n	8008874 <HAL_TIM_ConfigClockSource+0xd4>
 80087f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087fa:	f200 8087 	bhi.w	800890c <HAL_TIM_ConfigClockSource+0x16c>
 80087fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008802:	f000 8086 	beq.w	8008912 <HAL_TIM_ConfigClockSource+0x172>
 8008806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880a:	d87f      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 800880c:	2b70      	cmp	r3, #112	; 0x70
 800880e:	d01a      	beq.n	8008846 <HAL_TIM_ConfigClockSource+0xa6>
 8008810:	2b70      	cmp	r3, #112	; 0x70
 8008812:	d87b      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 8008814:	2b60      	cmp	r3, #96	; 0x60
 8008816:	d050      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0x11a>
 8008818:	2b60      	cmp	r3, #96	; 0x60
 800881a:	d877      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 800881c:	2b50      	cmp	r3, #80	; 0x50
 800881e:	d03c      	beq.n	800889a <HAL_TIM_ConfigClockSource+0xfa>
 8008820:	2b50      	cmp	r3, #80	; 0x50
 8008822:	d873      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 8008824:	2b40      	cmp	r3, #64	; 0x40
 8008826:	d058      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x13a>
 8008828:	2b40      	cmp	r3, #64	; 0x40
 800882a:	d86f      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 800882c:	2b30      	cmp	r3, #48	; 0x30
 800882e:	d064      	beq.n	80088fa <HAL_TIM_ConfigClockSource+0x15a>
 8008830:	2b30      	cmp	r3, #48	; 0x30
 8008832:	d86b      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 8008834:	2b20      	cmp	r3, #32
 8008836:	d060      	beq.n	80088fa <HAL_TIM_ConfigClockSource+0x15a>
 8008838:	2b20      	cmp	r3, #32
 800883a:	d867      	bhi.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d05c      	beq.n	80088fa <HAL_TIM_ConfigClockSource+0x15a>
 8008840:	2b10      	cmp	r3, #16
 8008842:	d05a      	beq.n	80088fa <HAL_TIM_ConfigClockSource+0x15a>
 8008844:	e062      	b.n	800890c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6818      	ldr	r0, [r3, #0]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	6899      	ldr	r1, [r3, #8]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685a      	ldr	r2, [r3, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f000 fbcb 	bl	8008ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	609a      	str	r2, [r3, #8]
      break;
 8008872:	e04f      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6899      	ldr	r1, [r3, #8]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f000 fbb4 	bl	8008ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008896:	609a      	str	r2, [r3, #8]
      break;
 8008898:	e03c      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	6859      	ldr	r1, [r3, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f000 fb28 	bl	8008efc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2150      	movs	r1, #80	; 0x50
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fb81 	bl	8008fba <TIM_ITRx_SetConfig>
      break;
 80088b8:	e02c      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6859      	ldr	r1, [r3, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f000 fb47 	bl	8008f5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2160      	movs	r1, #96	; 0x60
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fb71 	bl	8008fba <TIM_ITRx_SetConfig>
      break;
 80088d8:	e01c      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6818      	ldr	r0, [r3, #0]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	6859      	ldr	r1, [r3, #4]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	461a      	mov	r2, r3
 80088e8:	f000 fb08 	bl	8008efc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2140      	movs	r1, #64	; 0x40
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fb61 	bl	8008fba <TIM_ITRx_SetConfig>
      break;
 80088f8:	e00c      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4619      	mov	r1, r3
 8008904:	4610      	mov	r0, r2
 8008906:	f000 fb58 	bl	8008fba <TIM_ITRx_SetConfig>
      break;
 800890a:	e003      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	73fb      	strb	r3, [r7, #15]
      break;
 8008910:	e000      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800892e:	b480      	push	{r7}
 8008930:	b083      	sub	sp, #12
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008936:	bf00      	nop
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d107      	bne.n	800896a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2201      	movs	r2, #1
 800895e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008968:	e02a      	b.n	80089c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	d107      	bne.n	8008984 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2202      	movs	r2, #2
 8008978:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008982:	e01d      	b.n	80089c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d107      	bne.n	800899e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2204      	movs	r2, #4
 8008992:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800899c:	e010      	b.n	80089c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d107      	bne.n	80089b8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2208      	movs	r2, #8
 80089ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089b6:	e003      	b.n	80089c0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f7ff ffb4 	bl	800892e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	771a      	strb	r2, [r3, #28]
}
 80089cc:	bf00      	nop
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d10b      	bne.n	8008a04 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d136      	bne.n	8008a68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a02:	e031      	b.n	8008a68 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d10b      	bne.n	8008a26 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2202      	movs	r2, #2
 8008a12:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d125      	bne.n	8008a68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a24:	e020      	b.n	8008a68 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d10b      	bne.n	8008a48 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2204      	movs	r2, #4
 8008a34:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d114      	bne.n	8008a68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a46:	e00f      	b.n	8008a68 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d10a      	bne.n	8008a68 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2208      	movs	r2, #8
 8008a56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d103      	bne.n	8008a68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7fb fe4f 	bl	800470c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	771a      	strb	r2, [r3, #28]
}
 8008a74:	bf00      	nop
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a88:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d103      	bne.n	8008a9c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	771a      	strb	r2, [r3, #28]
 8008a9a:	e019      	b.n	8008ad0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d103      	bne.n	8008aae <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	771a      	strb	r2, [r3, #28]
 8008aac:	e010      	b.n	8008ad0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d103      	bne.n	8008ac0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2204      	movs	r2, #4
 8008abc:	771a      	strb	r2, [r3, #28]
 8008abe:	e007      	b.n	8008ad0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d102      	bne.n	8008ad0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2208      	movs	r2, #8
 8008ace:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7fb fd9b 	bl	800460c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	771a      	strb	r2, [r3, #28]
}
 8008adc:	bf00      	nop
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a34      	ldr	r2, [pc, #208]	; (8008bc8 <TIM_Base_SetConfig+0xe4>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00f      	beq.n	8008b1c <TIM_Base_SetConfig+0x38>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b02:	d00b      	beq.n	8008b1c <TIM_Base_SetConfig+0x38>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a31      	ldr	r2, [pc, #196]	; (8008bcc <TIM_Base_SetConfig+0xe8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d007      	beq.n	8008b1c <TIM_Base_SetConfig+0x38>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a30      	ldr	r2, [pc, #192]	; (8008bd0 <TIM_Base_SetConfig+0xec>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d003      	beq.n	8008b1c <TIM_Base_SetConfig+0x38>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a2f      	ldr	r2, [pc, #188]	; (8008bd4 <TIM_Base_SetConfig+0xf0>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d108      	bne.n	8008b2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a25      	ldr	r2, [pc, #148]	; (8008bc8 <TIM_Base_SetConfig+0xe4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d01b      	beq.n	8008b6e <TIM_Base_SetConfig+0x8a>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3c:	d017      	beq.n	8008b6e <TIM_Base_SetConfig+0x8a>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a22      	ldr	r2, [pc, #136]	; (8008bcc <TIM_Base_SetConfig+0xe8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d013      	beq.n	8008b6e <TIM_Base_SetConfig+0x8a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a21      	ldr	r2, [pc, #132]	; (8008bd0 <TIM_Base_SetConfig+0xec>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d00f      	beq.n	8008b6e <TIM_Base_SetConfig+0x8a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a20      	ldr	r2, [pc, #128]	; (8008bd4 <TIM_Base_SetConfig+0xf0>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d00b      	beq.n	8008b6e <TIM_Base_SetConfig+0x8a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a1f      	ldr	r2, [pc, #124]	; (8008bd8 <TIM_Base_SetConfig+0xf4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d007      	beq.n	8008b6e <TIM_Base_SetConfig+0x8a>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a1e      	ldr	r2, [pc, #120]	; (8008bdc <TIM_Base_SetConfig+0xf8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d003      	beq.n	8008b6e <TIM_Base_SetConfig+0x8a>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a1d      	ldr	r2, [pc, #116]	; (8008be0 <TIM_Base_SetConfig+0xfc>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d108      	bne.n	8008b80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a08      	ldr	r2, [pc, #32]	; (8008bc8 <TIM_Base_SetConfig+0xe4>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d103      	bne.n	8008bb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	615a      	str	r2, [r3, #20]
}
 8008bba:	bf00      	nop
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40010000 	.word	0x40010000
 8008bcc:	40000400 	.word	0x40000400
 8008bd0:	40000800 	.word	0x40000800
 8008bd4:	40000c00 	.word	0x40000c00
 8008bd8:	40014000 	.word	0x40014000
 8008bdc:	40014400 	.word	0x40014400
 8008be0:	40014800 	.word	0x40014800

08008be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	f023 0201 	bic.w	r2, r3, #1
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0303 	bic.w	r3, r3, #3
 8008c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f023 0302 	bic.w	r3, r3, #2
 8008c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a1c      	ldr	r2, [pc, #112]	; (8008cac <TIM_OC1_SetConfig+0xc8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d10c      	bne.n	8008c5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f023 0308 	bic.w	r3, r3, #8
 8008c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f023 0304 	bic.w	r3, r3, #4
 8008c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a13      	ldr	r2, [pc, #76]	; (8008cac <TIM_OC1_SetConfig+0xc8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d111      	bne.n	8008c86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	621a      	str	r2, [r3, #32]
}
 8008ca0:	bf00      	nop
 8008ca2:	371c      	adds	r7, #28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	40010000 	.word	0x40010000

08008cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	f023 0210 	bic.w	r2, r3, #16
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	021b      	lsls	r3, r3, #8
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f023 0320 	bic.w	r3, r3, #32
 8008cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	011b      	lsls	r3, r3, #4
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a1e      	ldr	r2, [pc, #120]	; (8008d84 <TIM_OC2_SetConfig+0xd4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d10d      	bne.n	8008d2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a15      	ldr	r2, [pc, #84]	; (8008d84 <TIM_OC2_SetConfig+0xd4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d113      	bne.n	8008d5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	621a      	str	r2, [r3, #32]
}
 8008d76:	bf00      	nop
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	40010000 	.word	0x40010000

08008d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0303 	bic.w	r3, r3, #3
 8008dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	021b      	lsls	r3, r3, #8
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a1d      	ldr	r2, [pc, #116]	; (8008e58 <TIM_OC3_SetConfig+0xd0>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d10d      	bne.n	8008e02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a14      	ldr	r2, [pc, #80]	; (8008e58 <TIM_OC3_SetConfig+0xd0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d113      	bne.n	8008e32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	011b      	lsls	r3, r3, #4
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	621a      	str	r2, [r3, #32]
}
 8008e4c:	bf00      	nop
 8008e4e:	371c      	adds	r7, #28
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	40010000 	.word	0x40010000

08008e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	031b      	lsls	r3, r3, #12
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a10      	ldr	r2, [pc, #64]	; (8008ef8 <TIM_OC4_SetConfig+0x9c>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d109      	bne.n	8008ed0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	019b      	lsls	r3, r3, #6
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40010000 	.word	0x40010000

08008efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	f023 0201 	bic.w	r2, r3, #1
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f023 030a 	bic.w	r3, r3, #10
 8008f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	621a      	str	r2, [r3, #32]
}
 8008f4e:	bf00      	nop
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b087      	sub	sp, #28
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	f023 0210 	bic.w	r2, r3, #16
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	031b      	lsls	r3, r3, #12
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	621a      	str	r2, [r3, #32]
}
 8008fae:	bf00      	nop
 8008fb0:	371c      	adds	r7, #28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b085      	sub	sp, #20
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	f043 0307 	orr.w	r3, r3, #7
 8008fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	609a      	str	r2, [r3, #8]
}
 8008fe4:	bf00      	nop
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800900a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	021a      	lsls	r2, r3, #8
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	431a      	orrs	r2, r3
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	4313      	orrs	r3, r2
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4313      	orrs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	609a      	str	r2, [r3, #8]
}
 8009024:	bf00      	nop
 8009026:	371c      	adds	r7, #28
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	f003 031f 	and.w	r3, r3, #31
 8009042:	2201      	movs	r2, #1
 8009044:	fa02 f303 	lsl.w	r3, r2, r3
 8009048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a1a      	ldr	r2, [r3, #32]
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	43db      	mvns	r3, r3
 8009052:	401a      	ands	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6a1a      	ldr	r2, [r3, #32]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	f003 031f 	and.w	r3, r3, #31
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	fa01 f303 	lsl.w	r3, r1, r3
 8009068:	431a      	orrs	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	621a      	str	r2, [r3, #32]
}
 800906e:	bf00      	nop
 8009070:	371c      	adds	r7, #28
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
	...

0800907c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009090:	2302      	movs	r3, #2
 8009092:	e050      	b.n	8009136 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a1c      	ldr	r2, [pc, #112]	; (8009144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d018      	beq.n	800910a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e0:	d013      	beq.n	800910a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a18      	ldr	r2, [pc, #96]	; (8009148 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00e      	beq.n	800910a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a16      	ldr	r2, [pc, #88]	; (800914c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d009      	beq.n	800910a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a15      	ldr	r2, [pc, #84]	; (8009150 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d004      	beq.n	800910a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a13      	ldr	r2, [pc, #76]	; (8009154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d10c      	bne.n	8009124 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	4313      	orrs	r3, r2
 800911a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	40010000 	.word	0x40010000
 8009148:	40000400 	.word	0x40000400
 800914c:	40000800 	.word	0x40000800
 8009150:	40000c00 	.word	0x40000c00
 8009154:	40014000 	.word	0x40014000

08009158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800916c:	2b01      	cmp	r3, #1
 800916e:	d101      	bne.n	8009174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009170:	2302      	movs	r3, #2
 8009172:	e03d      	b.n	80091f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	4313      	orrs	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e03f      	b.n	800928e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d106      	bne.n	8009228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7fa ff3e 	bl	80040a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2224      	movs	r2, #36	; 0x24
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800923e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fddf 	bl	8009e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	695a      	ldr	r2, [r3, #20]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2220      	movs	r2, #32
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2220      	movs	r2, #32
 8009288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b08a      	sub	sp, #40	; 0x28
 800929a:	af02      	add	r7, sp, #8
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	603b      	str	r3, [r7, #0]
 80092a2:	4613      	mov	r3, r2
 80092a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	d17c      	bne.n	80093b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <HAL_UART_Transmit+0x2c>
 80092bc:	88fb      	ldrh	r3, [r7, #6]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e075      	b.n	80093b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d101      	bne.n	80092d4 <HAL_UART_Transmit+0x3e>
 80092d0:	2302      	movs	r3, #2
 80092d2:	e06e      	b.n	80093b2 <HAL_UART_Transmit+0x11c>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2221      	movs	r2, #33	; 0x21
 80092e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092ea:	f7fb fbc5 	bl	8004a78 <HAL_GetTick>
 80092ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	88fa      	ldrh	r2, [r7, #6]
 80092f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	88fa      	ldrh	r2, [r7, #6]
 80092fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009304:	d108      	bne.n	8009318 <HAL_UART_Transmit+0x82>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d104      	bne.n	8009318 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800930e:	2300      	movs	r3, #0
 8009310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	61bb      	str	r3, [r7, #24]
 8009316:	e003      	b.n	8009320 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800931c:	2300      	movs	r3, #0
 800931e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009328:	e02a      	b.n	8009380 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2200      	movs	r2, #0
 8009332:	2180      	movs	r1, #128	; 0x80
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f000 fb1f 	bl	8009978 <UART_WaitOnFlagUntilTimeout>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e036      	b.n	80093b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10b      	bne.n	8009362 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009358:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	3302      	adds	r3, #2
 800935e:	61bb      	str	r3, [r7, #24]
 8009360:	e007      	b.n	8009372 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	781a      	ldrb	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	3301      	adds	r3, #1
 8009370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009376:	b29b      	uxth	r3, r3
 8009378:	3b01      	subs	r3, #1
 800937a:	b29a      	uxth	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009384:	b29b      	uxth	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1cf      	bne.n	800932a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2200      	movs	r2, #0
 8009392:	2140      	movs	r1, #64	; 0x40
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 faef 	bl	8009978 <UART_WaitOnFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e006      	b.n	80093b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2220      	movs	r2, #32
 80093a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	e000      	b.n	80093b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80093b0:	2302      	movs	r3, #2
  }
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3720      	adds	r7, #32
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	4613      	mov	r3, r2
 80093c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b20      	cmp	r3, #32
 80093d2:	d11d      	bne.n	8009410 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <HAL_UART_Receive_IT+0x26>
 80093da:	88fb      	ldrh	r3, [r7, #6]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e016      	b.n	8009412 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d101      	bne.n	80093f2 <HAL_UART_Receive_IT+0x38>
 80093ee:	2302      	movs	r3, #2
 80093f0:	e00f      	b.n	8009412 <HAL_UART_Receive_IT+0x58>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009400:	88fb      	ldrh	r3, [r7, #6]
 8009402:	461a      	mov	r2, r3
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 fb24 	bl	8009a54 <UART_Start_Receive_IT>
 800940c:	4603      	mov	r3, r0
 800940e:	e000      	b.n	8009412 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009410:	2302      	movs	r3, #2
  }
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
	...

0800941c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b0ba      	sub	sp, #232	; 0xe8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009442:	2300      	movs	r3, #0
 8009444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009448:	2300      	movs	r3, #0
 800944a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800944e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009452:	f003 030f 	and.w	r3, r3, #15
 8009456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800945a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10f      	bne.n	8009482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <HAL_UART_IRQHandler+0x66>
 800946e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fc07 	bl	8009c8e <UART_Receive_IT>
      return;
 8009480:	e256      	b.n	8009930 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 80de 	beq.w	8009648 <HAL_UART_IRQHandler+0x22c>
 800948c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800949c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 80d1 	beq.w	8009648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80094a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00b      	beq.n	80094ca <HAL_UART_IRQHandler+0xae>
 80094b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d005      	beq.n	80094ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c2:	f043 0201 	orr.w	r2, r3, #1
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00b      	beq.n	80094ee <HAL_UART_IRQHandler+0xd2>
 80094d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d005      	beq.n	80094ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e6:	f043 0202 	orr.w	r2, r3, #2
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094f2:	f003 0302 	and.w	r3, r3, #2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00b      	beq.n	8009512 <HAL_UART_IRQHandler+0xf6>
 80094fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d005      	beq.n	8009512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	f043 0204 	orr.w	r2, r3, #4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009516:	f003 0308 	and.w	r3, r3, #8
 800951a:	2b00      	cmp	r3, #0
 800951c:	d011      	beq.n	8009542 <HAL_UART_IRQHandler+0x126>
 800951e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009522:	f003 0320 	and.w	r3, r3, #32
 8009526:	2b00      	cmp	r3, #0
 8009528:	d105      	bne.n	8009536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800952a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b00      	cmp	r3, #0
 8009534:	d005      	beq.n	8009542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953a:	f043 0208 	orr.w	r2, r3, #8
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 81ed 	beq.w	8009926 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800954c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009550:	f003 0320 	and.w	r3, r3, #32
 8009554:	2b00      	cmp	r3, #0
 8009556:	d008      	beq.n	800956a <HAL_UART_IRQHandler+0x14e>
 8009558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fb92 	bl	8009c8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009574:	2b40      	cmp	r3, #64	; 0x40
 8009576:	bf0c      	ite	eq
 8009578:	2301      	moveq	r3, #1
 800957a:	2300      	movne	r3, #0
 800957c:	b2db      	uxtb	r3, r3
 800957e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009586:	f003 0308 	and.w	r3, r3, #8
 800958a:	2b00      	cmp	r3, #0
 800958c:	d103      	bne.n	8009596 <HAL_UART_IRQHandler+0x17a>
 800958e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009592:	2b00      	cmp	r3, #0
 8009594:	d04f      	beq.n	8009636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fa9a 	bl	8009ad0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a6:	2b40      	cmp	r3, #64	; 0x40
 80095a8:	d141      	bne.n	800962e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3314      	adds	r3, #20
 80095b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80095c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3314      	adds	r3, #20
 80095d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80095d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80095da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80095ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1d9      	bne.n	80095aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d013      	beq.n	8009626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	4a7d      	ldr	r2, [pc, #500]	; (80097f8 <HAL_UART_IRQHandler+0x3dc>)
 8009604:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960a:	4618      	mov	r0, r3
 800960c:	f7fb fd3a 	bl	8005084 <HAL_DMA_Abort_IT>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d016      	beq.n	8009644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009620:	4610      	mov	r0, r2
 8009622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009624:	e00e      	b.n	8009644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f990 	bl	800994c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800962c:	e00a      	b.n	8009644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f98c 	bl	800994c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009634:	e006      	b.n	8009644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f988 	bl	800994c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009642:	e170      	b.n	8009926 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009644:	bf00      	nop
    return;
 8009646:	e16e      	b.n	8009926 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964c:	2b01      	cmp	r3, #1
 800964e:	f040 814a 	bne.w	80098e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009656:	f003 0310 	and.w	r3, r3, #16
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 8143 	beq.w	80098e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009664:	f003 0310 	and.w	r3, r3, #16
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 813c 	beq.w	80098e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800966e:	2300      	movs	r3, #0
 8009670:	60bb      	str	r3, [r7, #8]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	60bb      	str	r3, [r7, #8]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	60bb      	str	r3, [r7, #8]
 8009682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968e:	2b40      	cmp	r3, #64	; 0x40
 8009690:	f040 80b4 	bne.w	80097fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 8140 	beq.w	800992a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096b2:	429a      	cmp	r2, r3
 80096b4:	f080 8139 	bcs.w	800992a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ca:	f000 8088 	beq.w	80097de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	330c      	adds	r3, #12
 80096d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80096e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	330c      	adds	r3, #12
 80096f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80096fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009706:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1d9      	bne.n	80096ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3314      	adds	r3, #20
 8009720:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800972a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800972c:	f023 0301 	bic.w	r3, r3, #1
 8009730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3314      	adds	r3, #20
 800973a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800973e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009742:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009746:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1e1      	bne.n	800971a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3314      	adds	r3, #20
 800975c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800976c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3314      	adds	r3, #20
 8009776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800977a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800977c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e3      	bne.n	8009756 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2220      	movs	r2, #32
 8009792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	330c      	adds	r3, #12
 80097a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ae:	f023 0310 	bic.w	r3, r3, #16
 80097b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	330c      	adds	r3, #12
 80097bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80097c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80097c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097c8:	e841 2300 	strex	r3, r2, [r1]
 80097cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e3      	bne.n	800979c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fb fbe3 	bl	8004fa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8b6 	bl	8009960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097f4:	e099      	b.n	800992a <HAL_UART_IRQHandler+0x50e>
 80097f6:	bf00      	nop
 80097f8:	08009b97 	.word	0x08009b97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009804:	b29b      	uxth	r3, r3
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009810:	b29b      	uxth	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 808b 	beq.w	800992e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8086 	beq.w	800992e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	330c      	adds	r3, #12
 8009828:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982c:	e853 3f00 	ldrex	r3, [r3]
 8009830:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	330c      	adds	r3, #12
 8009842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009846:	647a      	str	r2, [r7, #68]	; 0x44
 8009848:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800984c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e3      	bne.n	8009822 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3314      	adds	r3, #20
 8009860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	623b      	str	r3, [r7, #32]
   return(result);
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f023 0301 	bic.w	r3, r3, #1
 8009870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3314      	adds	r3, #20
 800987a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800987e:	633a      	str	r2, [r7, #48]	; 0x30
 8009880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e3      	bne.n	800985a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	330c      	adds	r3, #12
 80098a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0310 	bic.w	r3, r3, #16
 80098b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	330c      	adds	r3, #12
 80098c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80098c4:	61fa      	str	r2, [r7, #28]
 80098c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	69b9      	ldr	r1, [r7, #24]
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	617b      	str	r3, [r7, #20]
   return(result);
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e3      	bne.n	80098a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f83e 	bl	8009960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098e4:	e023      	b.n	800992e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80098e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d009      	beq.n	8009906 <HAL_UART_IRQHandler+0x4ea>
 80098f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f95d 	bl	8009bbe <UART_Transmit_IT>
    return;
 8009904:	e014      	b.n	8009930 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00e      	beq.n	8009930 <HAL_UART_IRQHandler+0x514>
 8009912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d008      	beq.n	8009930 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f99d 	bl	8009c5e <UART_EndTransmit_IT>
    return;
 8009924:	e004      	b.n	8009930 <HAL_UART_IRQHandler+0x514>
    return;
 8009926:	bf00      	nop
 8009928:	e002      	b.n	8009930 <HAL_UART_IRQHandler+0x514>
      return;
 800992a:	bf00      	nop
 800992c:	e000      	b.n	8009930 <HAL_UART_IRQHandler+0x514>
      return;
 800992e:	bf00      	nop
  }
}
 8009930:	37e8      	adds	r7, #232	; 0xe8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop

08009938 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b090      	sub	sp, #64	; 0x40
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	603b      	str	r3, [r7, #0]
 8009984:	4613      	mov	r3, r2
 8009986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009988:	e050      	b.n	8009a2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800998a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800998c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009990:	d04c      	beq.n	8009a2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009994:	2b00      	cmp	r3, #0
 8009996:	d007      	beq.n	80099a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009998:	f7fb f86e 	bl	8004a78 <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d241      	bcs.n	8009a2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	330c      	adds	r3, #12
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099c8:	637a      	str	r2, [r7, #52]	; 0x34
 80099ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e5      	bne.n	80099a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3314      	adds	r3, #20
 80099e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	613b      	str	r3, [r7, #16]
   return(result);
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f023 0301 	bic.w	r3, r3, #1
 80099f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3314      	adds	r3, #20
 80099fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099fc:	623a      	str	r2, [r7, #32]
 80099fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	69f9      	ldr	r1, [r7, #28]
 8009a02:	6a3a      	ldr	r2, [r7, #32]
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e5      	bne.n	80099dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e00f      	b.n	8009a4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	4013      	ands	r3, r2
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	bf0c      	ite	eq
 8009a3c:	2301      	moveq	r3, #1
 8009a3e:	2300      	movne	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	461a      	mov	r2, r3
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d09f      	beq.n	800998a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3740      	adds	r7, #64	; 0x40
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	88fa      	ldrh	r2, [r7, #6]
 8009a6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	88fa      	ldrh	r2, [r7, #6]
 8009a72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2222      	movs	r2, #34	; 0x22
 8009a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d007      	beq.n	8009aa2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009aa0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	695a      	ldr	r2, [r3, #20]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f042 0201 	orr.w	r2, r2, #1
 8009ab0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f042 0220 	orr.w	r2, r2, #32
 8009ac0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b095      	sub	sp, #84	; 0x54
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	330c      	adds	r3, #12
 8009ade:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae2:	e853 3f00 	ldrex	r3, [r3]
 8009ae6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	330c      	adds	r3, #12
 8009af6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009af8:	643a      	str	r2, [r7, #64]	; 0x40
 8009afa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e5      	bne.n	8009ad8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3314      	adds	r3, #20
 8009b12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	e853 3f00 	ldrex	r3, [r3]
 8009b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	f023 0301 	bic.w	r3, r3, #1
 8009b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3314      	adds	r3, #20
 8009b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b34:	e841 2300 	strex	r3, r2, [r1]
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1e5      	bne.n	8009b0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d119      	bne.n	8009b7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	330c      	adds	r3, #12
 8009b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	f023 0310 	bic.w	r3, r3, #16
 8009b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	330c      	adds	r3, #12
 8009b66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b68:	61ba      	str	r2, [r7, #24]
 8009b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6979      	ldr	r1, [r7, #20]
 8009b6e:	69ba      	ldr	r2, [r7, #24]
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	613b      	str	r3, [r7, #16]
   return(result);
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e5      	bne.n	8009b48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2220      	movs	r2, #32
 8009b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b8a:	bf00      	nop
 8009b8c:	3754      	adds	r7, #84	; 0x54
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f7ff fecb 	bl	800994c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bb6:	bf00      	nop
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b085      	sub	sp, #20
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b21      	cmp	r3, #33	; 0x21
 8009bd0:	d13e      	bne.n	8009c50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bda:	d114      	bne.n	8009c06 <UART_Transmit_IT+0x48>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d110      	bne.n	8009c06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a1b      	ldr	r3, [r3, #32]
 8009be8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	1c9a      	adds	r2, r3, #2
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	621a      	str	r2, [r3, #32]
 8009c04:	e008      	b.n	8009c18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	1c59      	adds	r1, r3, #1
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6211      	str	r1, [r2, #32]
 8009c10:	781a      	ldrb	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	4619      	mov	r1, r3
 8009c26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10f      	bne.n	8009c4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	e000      	b.n	8009c52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c50:	2302      	movs	r3, #2
  }
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68da      	ldr	r2, [r3, #12]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7ff fe5a 	bl	8009938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b08c      	sub	sp, #48	; 0x30
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b22      	cmp	r3, #34	; 0x22
 8009ca0:	f040 80ab 	bne.w	8009dfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cac:	d117      	bne.n	8009cde <UART_Receive_IT+0x50>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d113      	bne.n	8009cde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd6:	1c9a      	adds	r2, r3, #2
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	629a      	str	r2, [r3, #40]	; 0x28
 8009cdc:	e026      	b.n	8009d2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf0:	d007      	beq.n	8009d02 <UART_Receive_IT+0x74>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10a      	bne.n	8009d10 <UART_Receive_IT+0x82>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d106      	bne.n	8009d10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0c:	701a      	strb	r2, [r3, #0]
 8009d0e:	e008      	b.n	8009d22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d26:	1c5a      	adds	r2, r3, #1
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d15a      	bne.n	8009df6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68da      	ldr	r2, [r3, #12]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 0220 	bic.w	r2, r2, #32
 8009d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	695a      	ldr	r2, [r3, #20]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f022 0201 	bic.w	r2, r2, #1
 8009d6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2220      	movs	r2, #32
 8009d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d135      	bne.n	8009dec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	330c      	adds	r3, #12
 8009d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	613b      	str	r3, [r7, #16]
   return(result);
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f023 0310 	bic.w	r3, r3, #16
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	330c      	adds	r3, #12
 8009da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da6:	623a      	str	r2, [r7, #32]
 8009da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	69f9      	ldr	r1, [r7, #28]
 8009dac:	6a3a      	ldr	r2, [r7, #32]
 8009dae:	e841 2300 	strex	r3, r2, [r1]
 8009db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e5      	bne.n	8009d86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0310 	and.w	r3, r3, #16
 8009dc4:	2b10      	cmp	r3, #16
 8009dc6:	d10a      	bne.n	8009dde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff fdbb 	bl	8009960 <HAL_UARTEx_RxEventCallback>
 8009dea:	e002      	b.n	8009df2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7f8 fad1 	bl	8002394 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	e002      	b.n	8009dfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	e000      	b.n	8009dfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009dfa:	2302      	movs	r3, #2
  }
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3730      	adds	r7, #48	; 0x30
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e08:	b0c0      	sub	sp, #256	; 0x100
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e20:	68d9      	ldr	r1, [r3, #12]
 8009e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	ea40 0301 	orr.w	r3, r0, r1
 8009e2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e32:	689a      	ldr	r2, [r3, #8]
 8009e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	431a      	orrs	r2, r3
 8009e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	431a      	orrs	r2, r3
 8009e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e5c:	f021 010c 	bic.w	r1, r1, #12
 8009e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e6a:	430b      	orrs	r3, r1
 8009e6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e7e:	6999      	ldr	r1, [r3, #24]
 8009e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	ea40 0301 	orr.w	r3, r0, r1
 8009e8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	4b8f      	ldr	r3, [pc, #572]	; (800a0d0 <UART_SetConfig+0x2cc>)
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d005      	beq.n	8009ea4 <UART_SetConfig+0xa0>
 8009e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	4b8d      	ldr	r3, [pc, #564]	; (800a0d4 <UART_SetConfig+0x2d0>)
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d104      	bne.n	8009eae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ea4:	f7fd fc10 	bl	80076c8 <HAL_RCC_GetPCLK2Freq>
 8009ea8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009eac:	e003      	b.n	8009eb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009eae:	f7fd fbf7 	bl	80076a0 <HAL_RCC_GetPCLK1Freq>
 8009eb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eba:	69db      	ldr	r3, [r3, #28]
 8009ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ec0:	f040 810c 	bne.w	800a0dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ece:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009ed2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009ed6:	4622      	mov	r2, r4
 8009ed8:	462b      	mov	r3, r5
 8009eda:	1891      	adds	r1, r2, r2
 8009edc:	65b9      	str	r1, [r7, #88]	; 0x58
 8009ede:	415b      	adcs	r3, r3
 8009ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ee2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	eb12 0801 	adds.w	r8, r2, r1
 8009eec:	4629      	mov	r1, r5
 8009eee:	eb43 0901 	adc.w	r9, r3, r1
 8009ef2:	f04f 0200 	mov.w	r2, #0
 8009ef6:	f04f 0300 	mov.w	r3, #0
 8009efa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009efe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f06:	4690      	mov	r8, r2
 8009f08:	4699      	mov	r9, r3
 8009f0a:	4623      	mov	r3, r4
 8009f0c:	eb18 0303 	adds.w	r3, r8, r3
 8009f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f14:	462b      	mov	r3, r5
 8009f16:	eb49 0303 	adc.w	r3, r9, r3
 8009f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f32:	460b      	mov	r3, r1
 8009f34:	18db      	adds	r3, r3, r3
 8009f36:	653b      	str	r3, [r7, #80]	; 0x50
 8009f38:	4613      	mov	r3, r2
 8009f3a:	eb42 0303 	adc.w	r3, r2, r3
 8009f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8009f40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009f48:	f7f6 fe46 	bl	8000bd8 <__aeabi_uldivmod>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4b61      	ldr	r3, [pc, #388]	; (800a0d8 <UART_SetConfig+0x2d4>)
 8009f52:	fba3 2302 	umull	r2, r3, r3, r2
 8009f56:	095b      	lsrs	r3, r3, #5
 8009f58:	011c      	lsls	r4, r3, #4
 8009f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009f68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009f6c:	4642      	mov	r2, r8
 8009f6e:	464b      	mov	r3, r9
 8009f70:	1891      	adds	r1, r2, r2
 8009f72:	64b9      	str	r1, [r7, #72]	; 0x48
 8009f74:	415b      	adcs	r3, r3
 8009f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009f7c:	4641      	mov	r1, r8
 8009f7e:	eb12 0a01 	adds.w	sl, r2, r1
 8009f82:	4649      	mov	r1, r9
 8009f84:	eb43 0b01 	adc.w	fp, r3, r1
 8009f88:	f04f 0200 	mov.w	r2, #0
 8009f8c:	f04f 0300 	mov.w	r3, #0
 8009f90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f9c:	4692      	mov	sl, r2
 8009f9e:	469b      	mov	fp, r3
 8009fa0:	4643      	mov	r3, r8
 8009fa2:	eb1a 0303 	adds.w	r3, sl, r3
 8009fa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009faa:	464b      	mov	r3, r9
 8009fac:	eb4b 0303 	adc.w	r3, fp, r3
 8009fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009fc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	18db      	adds	r3, r3, r3
 8009fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8009fce:	4613      	mov	r3, r2
 8009fd0:	eb42 0303 	adc.w	r3, r2, r3
 8009fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009fda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009fde:	f7f6 fdfb 	bl	8000bd8 <__aeabi_uldivmod>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4b3b      	ldr	r3, [pc, #236]	; (800a0d8 <UART_SetConfig+0x2d4>)
 8009fea:	fba3 2301 	umull	r2, r3, r3, r1
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	2264      	movs	r2, #100	; 0x64
 8009ff2:	fb02 f303 	mul.w	r3, r2, r3
 8009ff6:	1acb      	subs	r3, r1, r3
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009ffe:	4b36      	ldr	r3, [pc, #216]	; (800a0d8 <UART_SetConfig+0x2d4>)
 800a000:	fba3 2302 	umull	r2, r3, r3, r2
 800a004:	095b      	lsrs	r3, r3, #5
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a00c:	441c      	add	r4, r3
 800a00e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a012:	2200      	movs	r2, #0
 800a014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a018:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a01c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a020:	4642      	mov	r2, r8
 800a022:	464b      	mov	r3, r9
 800a024:	1891      	adds	r1, r2, r2
 800a026:	63b9      	str	r1, [r7, #56]	; 0x38
 800a028:	415b      	adcs	r3, r3
 800a02a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a02c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a030:	4641      	mov	r1, r8
 800a032:	1851      	adds	r1, r2, r1
 800a034:	6339      	str	r1, [r7, #48]	; 0x30
 800a036:	4649      	mov	r1, r9
 800a038:	414b      	adcs	r3, r1
 800a03a:	637b      	str	r3, [r7, #52]	; 0x34
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	f04f 0300 	mov.w	r3, #0
 800a044:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a048:	4659      	mov	r1, fp
 800a04a:	00cb      	lsls	r3, r1, #3
 800a04c:	4651      	mov	r1, sl
 800a04e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a052:	4651      	mov	r1, sl
 800a054:	00ca      	lsls	r2, r1, #3
 800a056:	4610      	mov	r0, r2
 800a058:	4619      	mov	r1, r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	4642      	mov	r2, r8
 800a05e:	189b      	adds	r3, r3, r2
 800a060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a064:	464b      	mov	r3, r9
 800a066:	460a      	mov	r2, r1
 800a068:	eb42 0303 	adc.w	r3, r2, r3
 800a06c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a07c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a080:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a084:	460b      	mov	r3, r1
 800a086:	18db      	adds	r3, r3, r3
 800a088:	62bb      	str	r3, [r7, #40]	; 0x28
 800a08a:	4613      	mov	r3, r2
 800a08c:	eb42 0303 	adc.w	r3, r2, r3
 800a090:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a096:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a09a:	f7f6 fd9d 	bl	8000bd8 <__aeabi_uldivmod>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4b0d      	ldr	r3, [pc, #52]	; (800a0d8 <UART_SetConfig+0x2d4>)
 800a0a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a0a8:	095b      	lsrs	r3, r3, #5
 800a0aa:	2164      	movs	r1, #100	; 0x64
 800a0ac:	fb01 f303 	mul.w	r3, r1, r3
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	00db      	lsls	r3, r3, #3
 800a0b4:	3332      	adds	r3, #50	; 0x32
 800a0b6:	4a08      	ldr	r2, [pc, #32]	; (800a0d8 <UART_SetConfig+0x2d4>)
 800a0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0bc:	095b      	lsrs	r3, r3, #5
 800a0be:	f003 0207 	and.w	r2, r3, #7
 800a0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4422      	add	r2, r4
 800a0ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a0cc:	e105      	b.n	800a2da <UART_SetConfig+0x4d6>
 800a0ce:	bf00      	nop
 800a0d0:	40011000 	.word	0x40011000
 800a0d4:	40011400 	.word	0x40011400
 800a0d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a0e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a0ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	464b      	mov	r3, r9
 800a0f2:	1891      	adds	r1, r2, r2
 800a0f4:	6239      	str	r1, [r7, #32]
 800a0f6:	415b      	adcs	r3, r3
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a0fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0fe:	4641      	mov	r1, r8
 800a100:	1854      	adds	r4, r2, r1
 800a102:	4649      	mov	r1, r9
 800a104:	eb43 0501 	adc.w	r5, r3, r1
 800a108:	f04f 0200 	mov.w	r2, #0
 800a10c:	f04f 0300 	mov.w	r3, #0
 800a110:	00eb      	lsls	r3, r5, #3
 800a112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a116:	00e2      	lsls	r2, r4, #3
 800a118:	4614      	mov	r4, r2
 800a11a:	461d      	mov	r5, r3
 800a11c:	4643      	mov	r3, r8
 800a11e:	18e3      	adds	r3, r4, r3
 800a120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a124:	464b      	mov	r3, r9
 800a126:	eb45 0303 	adc.w	r3, r5, r3
 800a12a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a13a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a13e:	f04f 0200 	mov.w	r2, #0
 800a142:	f04f 0300 	mov.w	r3, #0
 800a146:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a14a:	4629      	mov	r1, r5
 800a14c:	008b      	lsls	r3, r1, #2
 800a14e:	4621      	mov	r1, r4
 800a150:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a154:	4621      	mov	r1, r4
 800a156:	008a      	lsls	r2, r1, #2
 800a158:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a15c:	f7f6 fd3c 	bl	8000bd8 <__aeabi_uldivmod>
 800a160:	4602      	mov	r2, r0
 800a162:	460b      	mov	r3, r1
 800a164:	4b60      	ldr	r3, [pc, #384]	; (800a2e8 <UART_SetConfig+0x4e4>)
 800a166:	fba3 2302 	umull	r2, r3, r3, r2
 800a16a:	095b      	lsrs	r3, r3, #5
 800a16c:	011c      	lsls	r4, r3, #4
 800a16e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a172:	2200      	movs	r2, #0
 800a174:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a178:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a17c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a180:	4642      	mov	r2, r8
 800a182:	464b      	mov	r3, r9
 800a184:	1891      	adds	r1, r2, r2
 800a186:	61b9      	str	r1, [r7, #24]
 800a188:	415b      	adcs	r3, r3
 800a18a:	61fb      	str	r3, [r7, #28]
 800a18c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a190:	4641      	mov	r1, r8
 800a192:	1851      	adds	r1, r2, r1
 800a194:	6139      	str	r1, [r7, #16]
 800a196:	4649      	mov	r1, r9
 800a198:	414b      	adcs	r3, r1
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	f04f 0200 	mov.w	r2, #0
 800a1a0:	f04f 0300 	mov.w	r3, #0
 800a1a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1a8:	4659      	mov	r1, fp
 800a1aa:	00cb      	lsls	r3, r1, #3
 800a1ac:	4651      	mov	r1, sl
 800a1ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1b2:	4651      	mov	r1, sl
 800a1b4:	00ca      	lsls	r2, r1, #3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4642      	mov	r2, r8
 800a1be:	189b      	adds	r3, r3, r2
 800a1c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1c4:	464b      	mov	r3, r9
 800a1c6:	460a      	mov	r2, r1
 800a1c8:	eb42 0303 	adc.w	r3, r2, r3
 800a1cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a1da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a1dc:	f04f 0200 	mov.w	r2, #0
 800a1e0:	f04f 0300 	mov.w	r3, #0
 800a1e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	008b      	lsls	r3, r1, #2
 800a1ec:	4641      	mov	r1, r8
 800a1ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1f2:	4641      	mov	r1, r8
 800a1f4:	008a      	lsls	r2, r1, #2
 800a1f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a1fa:	f7f6 fced 	bl	8000bd8 <__aeabi_uldivmod>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4b39      	ldr	r3, [pc, #228]	; (800a2e8 <UART_SetConfig+0x4e4>)
 800a204:	fba3 1302 	umull	r1, r3, r3, r2
 800a208:	095b      	lsrs	r3, r3, #5
 800a20a:	2164      	movs	r1, #100	; 0x64
 800a20c:	fb01 f303 	mul.w	r3, r1, r3
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	011b      	lsls	r3, r3, #4
 800a214:	3332      	adds	r3, #50	; 0x32
 800a216:	4a34      	ldr	r2, [pc, #208]	; (800a2e8 <UART_SetConfig+0x4e4>)
 800a218:	fba2 2303 	umull	r2, r3, r2, r3
 800a21c:	095b      	lsrs	r3, r3, #5
 800a21e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a222:	441c      	add	r4, r3
 800a224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a228:	2200      	movs	r2, #0
 800a22a:	673b      	str	r3, [r7, #112]	; 0x70
 800a22c:	677a      	str	r2, [r7, #116]	; 0x74
 800a22e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a232:	4642      	mov	r2, r8
 800a234:	464b      	mov	r3, r9
 800a236:	1891      	adds	r1, r2, r2
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	415b      	adcs	r3, r3
 800a23c:	60fb      	str	r3, [r7, #12]
 800a23e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a242:	4641      	mov	r1, r8
 800a244:	1851      	adds	r1, r2, r1
 800a246:	6039      	str	r1, [r7, #0]
 800a248:	4649      	mov	r1, r9
 800a24a:	414b      	adcs	r3, r1
 800a24c:	607b      	str	r3, [r7, #4]
 800a24e:	f04f 0200 	mov.w	r2, #0
 800a252:	f04f 0300 	mov.w	r3, #0
 800a256:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a25a:	4659      	mov	r1, fp
 800a25c:	00cb      	lsls	r3, r1, #3
 800a25e:	4651      	mov	r1, sl
 800a260:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a264:	4651      	mov	r1, sl
 800a266:	00ca      	lsls	r2, r1, #3
 800a268:	4610      	mov	r0, r2
 800a26a:	4619      	mov	r1, r3
 800a26c:	4603      	mov	r3, r0
 800a26e:	4642      	mov	r2, r8
 800a270:	189b      	adds	r3, r3, r2
 800a272:	66bb      	str	r3, [r7, #104]	; 0x68
 800a274:	464b      	mov	r3, r9
 800a276:	460a      	mov	r2, r1
 800a278:	eb42 0303 	adc.w	r3, r2, r3
 800a27c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	663b      	str	r3, [r7, #96]	; 0x60
 800a288:	667a      	str	r2, [r7, #100]	; 0x64
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	f04f 0300 	mov.w	r3, #0
 800a292:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a296:	4649      	mov	r1, r9
 800a298:	008b      	lsls	r3, r1, #2
 800a29a:	4641      	mov	r1, r8
 800a29c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2a0:	4641      	mov	r1, r8
 800a2a2:	008a      	lsls	r2, r1, #2
 800a2a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a2a8:	f7f6 fc96 	bl	8000bd8 <__aeabi_uldivmod>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4b0d      	ldr	r3, [pc, #52]	; (800a2e8 <UART_SetConfig+0x4e4>)
 800a2b2:	fba3 1302 	umull	r1, r3, r3, r2
 800a2b6:	095b      	lsrs	r3, r3, #5
 800a2b8:	2164      	movs	r1, #100	; 0x64
 800a2ba:	fb01 f303 	mul.w	r3, r1, r3
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	011b      	lsls	r3, r3, #4
 800a2c2:	3332      	adds	r3, #50	; 0x32
 800a2c4:	4a08      	ldr	r2, [pc, #32]	; (800a2e8 <UART_SetConfig+0x4e4>)
 800a2c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ca:	095b      	lsrs	r3, r3, #5
 800a2cc:	f003 020f 	and.w	r2, r3, #15
 800a2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4422      	add	r2, r4
 800a2d8:	609a      	str	r2, [r3, #8]
}
 800a2da:	bf00      	nop
 800a2dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2e6:	bf00      	nop
 800a2e8:	51eb851f 	.word	0x51eb851f

0800a2ec <atoi>:
 800a2ec:	220a      	movs	r2, #10
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	f000 beda 	b.w	800b0a8 <strtol>

0800a2f4 <__errno>:
 800a2f4:	4b01      	ldr	r3, [pc, #4]	; (800a2fc <__errno+0x8>)
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	200001d8 	.word	0x200001d8

0800a300 <__libc_init_array>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	4d0d      	ldr	r5, [pc, #52]	; (800a338 <__libc_init_array+0x38>)
 800a304:	4c0d      	ldr	r4, [pc, #52]	; (800a33c <__libc_init_array+0x3c>)
 800a306:	1b64      	subs	r4, r4, r5
 800a308:	10a4      	asrs	r4, r4, #2
 800a30a:	2600      	movs	r6, #0
 800a30c:	42a6      	cmp	r6, r4
 800a30e:	d109      	bne.n	800a324 <__libc_init_array+0x24>
 800a310:	4d0b      	ldr	r5, [pc, #44]	; (800a340 <__libc_init_array+0x40>)
 800a312:	4c0c      	ldr	r4, [pc, #48]	; (800a344 <__libc_init_array+0x44>)
 800a314:	f003 ff4c 	bl	800e1b0 <_init>
 800a318:	1b64      	subs	r4, r4, r5
 800a31a:	10a4      	asrs	r4, r4, #2
 800a31c:	2600      	movs	r6, #0
 800a31e:	42a6      	cmp	r6, r4
 800a320:	d105      	bne.n	800a32e <__libc_init_array+0x2e>
 800a322:	bd70      	pop	{r4, r5, r6, pc}
 800a324:	f855 3b04 	ldr.w	r3, [r5], #4
 800a328:	4798      	blx	r3
 800a32a:	3601      	adds	r6, #1
 800a32c:	e7ee      	b.n	800a30c <__libc_init_array+0xc>
 800a32e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a332:	4798      	blx	r3
 800a334:	3601      	adds	r6, #1
 800a336:	e7f2      	b.n	800a31e <__libc_init_array+0x1e>
 800a338:	0800f228 	.word	0x0800f228
 800a33c:	0800f228 	.word	0x0800f228
 800a340:	0800f228 	.word	0x0800f228
 800a344:	0800f22c 	.word	0x0800f22c

0800a348 <malloc>:
 800a348:	4b02      	ldr	r3, [pc, #8]	; (800a354 <malloc+0xc>)
 800a34a:	4601      	mov	r1, r0
 800a34c:	6818      	ldr	r0, [r3, #0]
 800a34e:	f000 b87f 	b.w	800a450 <_malloc_r>
 800a352:	bf00      	nop
 800a354:	200001d8 	.word	0x200001d8

0800a358 <free>:
 800a358:	4b02      	ldr	r3, [pc, #8]	; (800a364 <free+0xc>)
 800a35a:	4601      	mov	r1, r0
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	f000 b80b 	b.w	800a378 <_free_r>
 800a362:	bf00      	nop
 800a364:	200001d8 	.word	0x200001d8

0800a368 <memset>:
 800a368:	4402      	add	r2, r0
 800a36a:	4603      	mov	r3, r0
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d100      	bne.n	800a372 <memset+0xa>
 800a370:	4770      	bx	lr
 800a372:	f803 1b01 	strb.w	r1, [r3], #1
 800a376:	e7f9      	b.n	800a36c <memset+0x4>

0800a378 <_free_r>:
 800a378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a37a:	2900      	cmp	r1, #0
 800a37c:	d044      	beq.n	800a408 <_free_r+0x90>
 800a37e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a382:	9001      	str	r0, [sp, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	f1a1 0404 	sub.w	r4, r1, #4
 800a38a:	bfb8      	it	lt
 800a38c:	18e4      	addlt	r4, r4, r3
 800a38e:	f001 fd55 	bl	800be3c <__malloc_lock>
 800a392:	4a1e      	ldr	r2, [pc, #120]	; (800a40c <_free_r+0x94>)
 800a394:	9801      	ldr	r0, [sp, #4]
 800a396:	6813      	ldr	r3, [r2, #0]
 800a398:	b933      	cbnz	r3, 800a3a8 <_free_r+0x30>
 800a39a:	6063      	str	r3, [r4, #4]
 800a39c:	6014      	str	r4, [r2, #0]
 800a39e:	b003      	add	sp, #12
 800a3a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3a4:	f001 bd50 	b.w	800be48 <__malloc_unlock>
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	d908      	bls.n	800a3be <_free_r+0x46>
 800a3ac:	6825      	ldr	r5, [r4, #0]
 800a3ae:	1961      	adds	r1, r4, r5
 800a3b0:	428b      	cmp	r3, r1
 800a3b2:	bf01      	itttt	eq
 800a3b4:	6819      	ldreq	r1, [r3, #0]
 800a3b6:	685b      	ldreq	r3, [r3, #4]
 800a3b8:	1949      	addeq	r1, r1, r5
 800a3ba:	6021      	streq	r1, [r4, #0]
 800a3bc:	e7ed      	b.n	800a39a <_free_r+0x22>
 800a3be:	461a      	mov	r2, r3
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	b10b      	cbz	r3, 800a3c8 <_free_r+0x50>
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	d9fa      	bls.n	800a3be <_free_r+0x46>
 800a3c8:	6811      	ldr	r1, [r2, #0]
 800a3ca:	1855      	adds	r5, r2, r1
 800a3cc:	42a5      	cmp	r5, r4
 800a3ce:	d10b      	bne.n	800a3e8 <_free_r+0x70>
 800a3d0:	6824      	ldr	r4, [r4, #0]
 800a3d2:	4421      	add	r1, r4
 800a3d4:	1854      	adds	r4, r2, r1
 800a3d6:	42a3      	cmp	r3, r4
 800a3d8:	6011      	str	r1, [r2, #0]
 800a3da:	d1e0      	bne.n	800a39e <_free_r+0x26>
 800a3dc:	681c      	ldr	r4, [r3, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	6053      	str	r3, [r2, #4]
 800a3e2:	4421      	add	r1, r4
 800a3e4:	6011      	str	r1, [r2, #0]
 800a3e6:	e7da      	b.n	800a39e <_free_r+0x26>
 800a3e8:	d902      	bls.n	800a3f0 <_free_r+0x78>
 800a3ea:	230c      	movs	r3, #12
 800a3ec:	6003      	str	r3, [r0, #0]
 800a3ee:	e7d6      	b.n	800a39e <_free_r+0x26>
 800a3f0:	6825      	ldr	r5, [r4, #0]
 800a3f2:	1961      	adds	r1, r4, r5
 800a3f4:	428b      	cmp	r3, r1
 800a3f6:	bf04      	itt	eq
 800a3f8:	6819      	ldreq	r1, [r3, #0]
 800a3fa:	685b      	ldreq	r3, [r3, #4]
 800a3fc:	6063      	str	r3, [r4, #4]
 800a3fe:	bf04      	itt	eq
 800a400:	1949      	addeq	r1, r1, r5
 800a402:	6021      	streq	r1, [r4, #0]
 800a404:	6054      	str	r4, [r2, #4]
 800a406:	e7ca      	b.n	800a39e <_free_r+0x26>
 800a408:	b003      	add	sp, #12
 800a40a:	bd30      	pop	{r4, r5, pc}
 800a40c:	20000d70 	.word	0x20000d70

0800a410 <sbrk_aligned>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	4e0e      	ldr	r6, [pc, #56]	; (800a44c <sbrk_aligned+0x3c>)
 800a414:	460c      	mov	r4, r1
 800a416:	6831      	ldr	r1, [r6, #0]
 800a418:	4605      	mov	r5, r0
 800a41a:	b911      	cbnz	r1, 800a422 <sbrk_aligned+0x12>
 800a41c:	f000 fcf6 	bl	800ae0c <_sbrk_r>
 800a420:	6030      	str	r0, [r6, #0]
 800a422:	4621      	mov	r1, r4
 800a424:	4628      	mov	r0, r5
 800a426:	f000 fcf1 	bl	800ae0c <_sbrk_r>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	d00a      	beq.n	800a444 <sbrk_aligned+0x34>
 800a42e:	1cc4      	adds	r4, r0, #3
 800a430:	f024 0403 	bic.w	r4, r4, #3
 800a434:	42a0      	cmp	r0, r4
 800a436:	d007      	beq.n	800a448 <sbrk_aligned+0x38>
 800a438:	1a21      	subs	r1, r4, r0
 800a43a:	4628      	mov	r0, r5
 800a43c:	f000 fce6 	bl	800ae0c <_sbrk_r>
 800a440:	3001      	adds	r0, #1
 800a442:	d101      	bne.n	800a448 <sbrk_aligned+0x38>
 800a444:	f04f 34ff 	mov.w	r4, #4294967295
 800a448:	4620      	mov	r0, r4
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	20000d74 	.word	0x20000d74

0800a450 <_malloc_r>:
 800a450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a454:	1ccd      	adds	r5, r1, #3
 800a456:	f025 0503 	bic.w	r5, r5, #3
 800a45a:	3508      	adds	r5, #8
 800a45c:	2d0c      	cmp	r5, #12
 800a45e:	bf38      	it	cc
 800a460:	250c      	movcc	r5, #12
 800a462:	2d00      	cmp	r5, #0
 800a464:	4607      	mov	r7, r0
 800a466:	db01      	blt.n	800a46c <_malloc_r+0x1c>
 800a468:	42a9      	cmp	r1, r5
 800a46a:	d905      	bls.n	800a478 <_malloc_r+0x28>
 800a46c:	230c      	movs	r3, #12
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	2600      	movs	r6, #0
 800a472:	4630      	mov	r0, r6
 800a474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a478:	4e2e      	ldr	r6, [pc, #184]	; (800a534 <_malloc_r+0xe4>)
 800a47a:	f001 fcdf 	bl	800be3c <__malloc_lock>
 800a47e:	6833      	ldr	r3, [r6, #0]
 800a480:	461c      	mov	r4, r3
 800a482:	bb34      	cbnz	r4, 800a4d2 <_malloc_r+0x82>
 800a484:	4629      	mov	r1, r5
 800a486:	4638      	mov	r0, r7
 800a488:	f7ff ffc2 	bl	800a410 <sbrk_aligned>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	4604      	mov	r4, r0
 800a490:	d14d      	bne.n	800a52e <_malloc_r+0xde>
 800a492:	6834      	ldr	r4, [r6, #0]
 800a494:	4626      	mov	r6, r4
 800a496:	2e00      	cmp	r6, #0
 800a498:	d140      	bne.n	800a51c <_malloc_r+0xcc>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	4631      	mov	r1, r6
 800a49e:	4638      	mov	r0, r7
 800a4a0:	eb04 0803 	add.w	r8, r4, r3
 800a4a4:	f000 fcb2 	bl	800ae0c <_sbrk_r>
 800a4a8:	4580      	cmp	r8, r0
 800a4aa:	d13a      	bne.n	800a522 <_malloc_r+0xd2>
 800a4ac:	6821      	ldr	r1, [r4, #0]
 800a4ae:	3503      	adds	r5, #3
 800a4b0:	1a6d      	subs	r5, r5, r1
 800a4b2:	f025 0503 	bic.w	r5, r5, #3
 800a4b6:	3508      	adds	r5, #8
 800a4b8:	2d0c      	cmp	r5, #12
 800a4ba:	bf38      	it	cc
 800a4bc:	250c      	movcc	r5, #12
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	f7ff ffa5 	bl	800a410 <sbrk_aligned>
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	d02b      	beq.n	800a522 <_malloc_r+0xd2>
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	442b      	add	r3, r5
 800a4ce:	6023      	str	r3, [r4, #0]
 800a4d0:	e00e      	b.n	800a4f0 <_malloc_r+0xa0>
 800a4d2:	6822      	ldr	r2, [r4, #0]
 800a4d4:	1b52      	subs	r2, r2, r5
 800a4d6:	d41e      	bmi.n	800a516 <_malloc_r+0xc6>
 800a4d8:	2a0b      	cmp	r2, #11
 800a4da:	d916      	bls.n	800a50a <_malloc_r+0xba>
 800a4dc:	1961      	adds	r1, r4, r5
 800a4de:	42a3      	cmp	r3, r4
 800a4e0:	6025      	str	r5, [r4, #0]
 800a4e2:	bf18      	it	ne
 800a4e4:	6059      	strne	r1, [r3, #4]
 800a4e6:	6863      	ldr	r3, [r4, #4]
 800a4e8:	bf08      	it	eq
 800a4ea:	6031      	streq	r1, [r6, #0]
 800a4ec:	5162      	str	r2, [r4, r5]
 800a4ee:	604b      	str	r3, [r1, #4]
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	f104 060b 	add.w	r6, r4, #11
 800a4f6:	f001 fca7 	bl	800be48 <__malloc_unlock>
 800a4fa:	f026 0607 	bic.w	r6, r6, #7
 800a4fe:	1d23      	adds	r3, r4, #4
 800a500:	1af2      	subs	r2, r6, r3
 800a502:	d0b6      	beq.n	800a472 <_malloc_r+0x22>
 800a504:	1b9b      	subs	r3, r3, r6
 800a506:	50a3      	str	r3, [r4, r2]
 800a508:	e7b3      	b.n	800a472 <_malloc_r+0x22>
 800a50a:	6862      	ldr	r2, [r4, #4]
 800a50c:	42a3      	cmp	r3, r4
 800a50e:	bf0c      	ite	eq
 800a510:	6032      	streq	r2, [r6, #0]
 800a512:	605a      	strne	r2, [r3, #4]
 800a514:	e7ec      	b.n	800a4f0 <_malloc_r+0xa0>
 800a516:	4623      	mov	r3, r4
 800a518:	6864      	ldr	r4, [r4, #4]
 800a51a:	e7b2      	b.n	800a482 <_malloc_r+0x32>
 800a51c:	4634      	mov	r4, r6
 800a51e:	6876      	ldr	r6, [r6, #4]
 800a520:	e7b9      	b.n	800a496 <_malloc_r+0x46>
 800a522:	230c      	movs	r3, #12
 800a524:	603b      	str	r3, [r7, #0]
 800a526:	4638      	mov	r0, r7
 800a528:	f001 fc8e 	bl	800be48 <__malloc_unlock>
 800a52c:	e7a1      	b.n	800a472 <_malloc_r+0x22>
 800a52e:	6025      	str	r5, [r4, #0]
 800a530:	e7de      	b.n	800a4f0 <_malloc_r+0xa0>
 800a532:	bf00      	nop
 800a534:	20000d70 	.word	0x20000d70

0800a538 <__cvt>:
 800a538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	ec55 4b10 	vmov	r4, r5, d0
 800a540:	2d00      	cmp	r5, #0
 800a542:	460e      	mov	r6, r1
 800a544:	4619      	mov	r1, r3
 800a546:	462b      	mov	r3, r5
 800a548:	bfbb      	ittet	lt
 800a54a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a54e:	461d      	movlt	r5, r3
 800a550:	2300      	movge	r3, #0
 800a552:	232d      	movlt	r3, #45	; 0x2d
 800a554:	700b      	strb	r3, [r1, #0]
 800a556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a558:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a55c:	4691      	mov	r9, r2
 800a55e:	f023 0820 	bic.w	r8, r3, #32
 800a562:	bfbc      	itt	lt
 800a564:	4622      	movlt	r2, r4
 800a566:	4614      	movlt	r4, r2
 800a568:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a56c:	d005      	beq.n	800a57a <__cvt+0x42>
 800a56e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a572:	d100      	bne.n	800a576 <__cvt+0x3e>
 800a574:	3601      	adds	r6, #1
 800a576:	2102      	movs	r1, #2
 800a578:	e000      	b.n	800a57c <__cvt+0x44>
 800a57a:	2103      	movs	r1, #3
 800a57c:	ab03      	add	r3, sp, #12
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	ab02      	add	r3, sp, #8
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	ec45 4b10 	vmov	d0, r4, r5
 800a588:	4653      	mov	r3, sl
 800a58a:	4632      	mov	r2, r6
 800a58c:	f000 fe44 	bl	800b218 <_dtoa_r>
 800a590:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a594:	4607      	mov	r7, r0
 800a596:	d102      	bne.n	800a59e <__cvt+0x66>
 800a598:	f019 0f01 	tst.w	r9, #1
 800a59c:	d022      	beq.n	800a5e4 <__cvt+0xac>
 800a59e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5a2:	eb07 0906 	add.w	r9, r7, r6
 800a5a6:	d110      	bne.n	800a5ca <__cvt+0x92>
 800a5a8:	783b      	ldrb	r3, [r7, #0]
 800a5aa:	2b30      	cmp	r3, #48	; 0x30
 800a5ac:	d10a      	bne.n	800a5c4 <__cvt+0x8c>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	f7f6 fa9f 	bl	8000af8 <__aeabi_dcmpeq>
 800a5ba:	b918      	cbnz	r0, 800a5c4 <__cvt+0x8c>
 800a5bc:	f1c6 0601 	rsb	r6, r6, #1
 800a5c0:	f8ca 6000 	str.w	r6, [sl]
 800a5c4:	f8da 3000 	ldr.w	r3, [sl]
 800a5c8:	4499      	add	r9, r3
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f7f6 fa91 	bl	8000af8 <__aeabi_dcmpeq>
 800a5d6:	b108      	cbz	r0, 800a5dc <__cvt+0xa4>
 800a5d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5dc:	2230      	movs	r2, #48	; 0x30
 800a5de:	9b03      	ldr	r3, [sp, #12]
 800a5e0:	454b      	cmp	r3, r9
 800a5e2:	d307      	bcc.n	800a5f4 <__cvt+0xbc>
 800a5e4:	9b03      	ldr	r3, [sp, #12]
 800a5e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5e8:	1bdb      	subs	r3, r3, r7
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	b004      	add	sp, #16
 800a5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f4:	1c59      	adds	r1, r3, #1
 800a5f6:	9103      	str	r1, [sp, #12]
 800a5f8:	701a      	strb	r2, [r3, #0]
 800a5fa:	e7f0      	b.n	800a5de <__cvt+0xa6>

0800a5fc <__exponent>:
 800a5fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5fe:	4603      	mov	r3, r0
 800a600:	2900      	cmp	r1, #0
 800a602:	bfb8      	it	lt
 800a604:	4249      	neglt	r1, r1
 800a606:	f803 2b02 	strb.w	r2, [r3], #2
 800a60a:	bfb4      	ite	lt
 800a60c:	222d      	movlt	r2, #45	; 0x2d
 800a60e:	222b      	movge	r2, #43	; 0x2b
 800a610:	2909      	cmp	r1, #9
 800a612:	7042      	strb	r2, [r0, #1]
 800a614:	dd2a      	ble.n	800a66c <__exponent+0x70>
 800a616:	f10d 0407 	add.w	r4, sp, #7
 800a61a:	46a4      	mov	ip, r4
 800a61c:	270a      	movs	r7, #10
 800a61e:	46a6      	mov	lr, r4
 800a620:	460a      	mov	r2, r1
 800a622:	fb91 f6f7 	sdiv	r6, r1, r7
 800a626:	fb07 1516 	mls	r5, r7, r6, r1
 800a62a:	3530      	adds	r5, #48	; 0x30
 800a62c:	2a63      	cmp	r2, #99	; 0x63
 800a62e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a632:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a636:	4631      	mov	r1, r6
 800a638:	dcf1      	bgt.n	800a61e <__exponent+0x22>
 800a63a:	3130      	adds	r1, #48	; 0x30
 800a63c:	f1ae 0502 	sub.w	r5, lr, #2
 800a640:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a644:	1c44      	adds	r4, r0, #1
 800a646:	4629      	mov	r1, r5
 800a648:	4561      	cmp	r1, ip
 800a64a:	d30a      	bcc.n	800a662 <__exponent+0x66>
 800a64c:	f10d 0209 	add.w	r2, sp, #9
 800a650:	eba2 020e 	sub.w	r2, r2, lr
 800a654:	4565      	cmp	r5, ip
 800a656:	bf88      	it	hi
 800a658:	2200      	movhi	r2, #0
 800a65a:	4413      	add	r3, r2
 800a65c:	1a18      	subs	r0, r3, r0
 800a65e:	b003      	add	sp, #12
 800a660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a662:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a666:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a66a:	e7ed      	b.n	800a648 <__exponent+0x4c>
 800a66c:	2330      	movs	r3, #48	; 0x30
 800a66e:	3130      	adds	r1, #48	; 0x30
 800a670:	7083      	strb	r3, [r0, #2]
 800a672:	70c1      	strb	r1, [r0, #3]
 800a674:	1d03      	adds	r3, r0, #4
 800a676:	e7f1      	b.n	800a65c <__exponent+0x60>

0800a678 <_printf_float>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	ed2d 8b02 	vpush	{d8}
 800a680:	b08d      	sub	sp, #52	; 0x34
 800a682:	460c      	mov	r4, r1
 800a684:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a688:	4616      	mov	r6, r2
 800a68a:	461f      	mov	r7, r3
 800a68c:	4605      	mov	r5, r0
 800a68e:	f001 fbb1 	bl	800bdf4 <_localeconv_r>
 800a692:	f8d0 a000 	ldr.w	sl, [r0]
 800a696:	4650      	mov	r0, sl
 800a698:	f7f5 fdac 	bl	80001f4 <strlen>
 800a69c:	2300      	movs	r3, #0
 800a69e:	930a      	str	r3, [sp, #40]	; 0x28
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a6ac:	3307      	adds	r3, #7
 800a6ae:	f023 0307 	bic.w	r3, r3, #7
 800a6b2:	f103 0208 	add.w	r2, r3, #8
 800a6b6:	f8c8 2000 	str.w	r2, [r8]
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a6c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a6c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6ca:	9307      	str	r3, [sp, #28]
 800a6cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6d0:	ee08 0a10 	vmov	s16, r0
 800a6d4:	4b9f      	ldr	r3, [pc, #636]	; (800a954 <_printf_float+0x2dc>)
 800a6d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295
 800a6de:	f7f6 fa3d 	bl	8000b5c <__aeabi_dcmpun>
 800a6e2:	bb88      	cbnz	r0, 800a748 <_printf_float+0xd0>
 800a6e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6e8:	4b9a      	ldr	r3, [pc, #616]	; (800a954 <_printf_float+0x2dc>)
 800a6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ee:	f7f6 fa17 	bl	8000b20 <__aeabi_dcmple>
 800a6f2:	bb48      	cbnz	r0, 800a748 <_printf_float+0xd0>
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	f7f6 fa06 	bl	8000b0c <__aeabi_dcmplt>
 800a700:	b110      	cbz	r0, 800a708 <_printf_float+0x90>
 800a702:	232d      	movs	r3, #45	; 0x2d
 800a704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a708:	4b93      	ldr	r3, [pc, #588]	; (800a958 <_printf_float+0x2e0>)
 800a70a:	4894      	ldr	r0, [pc, #592]	; (800a95c <_printf_float+0x2e4>)
 800a70c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a710:	bf94      	ite	ls
 800a712:	4698      	movls	r8, r3
 800a714:	4680      	movhi	r8, r0
 800a716:	2303      	movs	r3, #3
 800a718:	6123      	str	r3, [r4, #16]
 800a71a:	9b05      	ldr	r3, [sp, #20]
 800a71c:	f023 0204 	bic.w	r2, r3, #4
 800a720:	6022      	str	r2, [r4, #0]
 800a722:	f04f 0900 	mov.w	r9, #0
 800a726:	9700      	str	r7, [sp, #0]
 800a728:	4633      	mov	r3, r6
 800a72a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a72c:	4621      	mov	r1, r4
 800a72e:	4628      	mov	r0, r5
 800a730:	f000 f9d8 	bl	800aae4 <_printf_common>
 800a734:	3001      	adds	r0, #1
 800a736:	f040 8090 	bne.w	800a85a <_printf_float+0x1e2>
 800a73a:	f04f 30ff 	mov.w	r0, #4294967295
 800a73e:	b00d      	add	sp, #52	; 0x34
 800a740:	ecbd 8b02 	vpop	{d8}
 800a744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a748:	4642      	mov	r2, r8
 800a74a:	464b      	mov	r3, r9
 800a74c:	4640      	mov	r0, r8
 800a74e:	4649      	mov	r1, r9
 800a750:	f7f6 fa04 	bl	8000b5c <__aeabi_dcmpun>
 800a754:	b140      	cbz	r0, 800a768 <_printf_float+0xf0>
 800a756:	464b      	mov	r3, r9
 800a758:	2b00      	cmp	r3, #0
 800a75a:	bfbc      	itt	lt
 800a75c:	232d      	movlt	r3, #45	; 0x2d
 800a75e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a762:	487f      	ldr	r0, [pc, #508]	; (800a960 <_printf_float+0x2e8>)
 800a764:	4b7f      	ldr	r3, [pc, #508]	; (800a964 <_printf_float+0x2ec>)
 800a766:	e7d1      	b.n	800a70c <_printf_float+0x94>
 800a768:	6863      	ldr	r3, [r4, #4]
 800a76a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a76e:	9206      	str	r2, [sp, #24]
 800a770:	1c5a      	adds	r2, r3, #1
 800a772:	d13f      	bne.n	800a7f4 <_printf_float+0x17c>
 800a774:	2306      	movs	r3, #6
 800a776:	6063      	str	r3, [r4, #4]
 800a778:	9b05      	ldr	r3, [sp, #20]
 800a77a:	6861      	ldr	r1, [r4, #4]
 800a77c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a780:	2300      	movs	r3, #0
 800a782:	9303      	str	r3, [sp, #12]
 800a784:	ab0a      	add	r3, sp, #40	; 0x28
 800a786:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a78a:	ab09      	add	r3, sp, #36	; 0x24
 800a78c:	ec49 8b10 	vmov	d0, r8, r9
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	6022      	str	r2, [r4, #0]
 800a794:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a798:	4628      	mov	r0, r5
 800a79a:	f7ff fecd 	bl	800a538 <__cvt>
 800a79e:	9b06      	ldr	r3, [sp, #24]
 800a7a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7a2:	2b47      	cmp	r3, #71	; 0x47
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	d108      	bne.n	800a7ba <_printf_float+0x142>
 800a7a8:	1cc8      	adds	r0, r1, #3
 800a7aa:	db02      	blt.n	800a7b2 <_printf_float+0x13a>
 800a7ac:	6863      	ldr	r3, [r4, #4]
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	dd41      	ble.n	800a836 <_printf_float+0x1be>
 800a7b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a7b6:	fa5f fb8b 	uxtb.w	fp, fp
 800a7ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7be:	d820      	bhi.n	800a802 <_printf_float+0x18a>
 800a7c0:	3901      	subs	r1, #1
 800a7c2:	465a      	mov	r2, fp
 800a7c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a7c8:	9109      	str	r1, [sp, #36]	; 0x24
 800a7ca:	f7ff ff17 	bl	800a5fc <__exponent>
 800a7ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7d0:	1813      	adds	r3, r2, r0
 800a7d2:	2a01      	cmp	r2, #1
 800a7d4:	4681      	mov	r9, r0
 800a7d6:	6123      	str	r3, [r4, #16]
 800a7d8:	dc02      	bgt.n	800a7e0 <_printf_float+0x168>
 800a7da:	6822      	ldr	r2, [r4, #0]
 800a7dc:	07d2      	lsls	r2, r2, #31
 800a7de:	d501      	bpl.n	800a7e4 <_printf_float+0x16c>
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	6123      	str	r3, [r4, #16]
 800a7e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d09c      	beq.n	800a726 <_printf_float+0xae>
 800a7ec:	232d      	movs	r3, #45	; 0x2d
 800a7ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f2:	e798      	b.n	800a726 <_printf_float+0xae>
 800a7f4:	9a06      	ldr	r2, [sp, #24]
 800a7f6:	2a47      	cmp	r2, #71	; 0x47
 800a7f8:	d1be      	bne.n	800a778 <_printf_float+0x100>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1bc      	bne.n	800a778 <_printf_float+0x100>
 800a7fe:	2301      	movs	r3, #1
 800a800:	e7b9      	b.n	800a776 <_printf_float+0xfe>
 800a802:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a806:	d118      	bne.n	800a83a <_printf_float+0x1c2>
 800a808:	2900      	cmp	r1, #0
 800a80a:	6863      	ldr	r3, [r4, #4]
 800a80c:	dd0b      	ble.n	800a826 <_printf_float+0x1ae>
 800a80e:	6121      	str	r1, [r4, #16]
 800a810:	b913      	cbnz	r3, 800a818 <_printf_float+0x1a0>
 800a812:	6822      	ldr	r2, [r4, #0]
 800a814:	07d0      	lsls	r0, r2, #31
 800a816:	d502      	bpl.n	800a81e <_printf_float+0x1a6>
 800a818:	3301      	adds	r3, #1
 800a81a:	440b      	add	r3, r1
 800a81c:	6123      	str	r3, [r4, #16]
 800a81e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a820:	f04f 0900 	mov.w	r9, #0
 800a824:	e7de      	b.n	800a7e4 <_printf_float+0x16c>
 800a826:	b913      	cbnz	r3, 800a82e <_printf_float+0x1b6>
 800a828:	6822      	ldr	r2, [r4, #0]
 800a82a:	07d2      	lsls	r2, r2, #31
 800a82c:	d501      	bpl.n	800a832 <_printf_float+0x1ba>
 800a82e:	3302      	adds	r3, #2
 800a830:	e7f4      	b.n	800a81c <_printf_float+0x1a4>
 800a832:	2301      	movs	r3, #1
 800a834:	e7f2      	b.n	800a81c <_printf_float+0x1a4>
 800a836:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a83c:	4299      	cmp	r1, r3
 800a83e:	db05      	blt.n	800a84c <_printf_float+0x1d4>
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	6121      	str	r1, [r4, #16]
 800a844:	07d8      	lsls	r0, r3, #31
 800a846:	d5ea      	bpl.n	800a81e <_printf_float+0x1a6>
 800a848:	1c4b      	adds	r3, r1, #1
 800a84a:	e7e7      	b.n	800a81c <_printf_float+0x1a4>
 800a84c:	2900      	cmp	r1, #0
 800a84e:	bfd4      	ite	le
 800a850:	f1c1 0202 	rsble	r2, r1, #2
 800a854:	2201      	movgt	r2, #1
 800a856:	4413      	add	r3, r2
 800a858:	e7e0      	b.n	800a81c <_printf_float+0x1a4>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	055a      	lsls	r2, r3, #21
 800a85e:	d407      	bmi.n	800a870 <_printf_float+0x1f8>
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	4642      	mov	r2, r8
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	d12c      	bne.n	800a8c8 <_printf_float+0x250>
 800a86e:	e764      	b.n	800a73a <_printf_float+0xc2>
 800a870:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a874:	f240 80e0 	bls.w	800aa38 <_printf_float+0x3c0>
 800a878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a87c:	2200      	movs	r2, #0
 800a87e:	2300      	movs	r3, #0
 800a880:	f7f6 f93a 	bl	8000af8 <__aeabi_dcmpeq>
 800a884:	2800      	cmp	r0, #0
 800a886:	d034      	beq.n	800a8f2 <_printf_float+0x27a>
 800a888:	4a37      	ldr	r2, [pc, #220]	; (800a968 <_printf_float+0x2f0>)
 800a88a:	2301      	movs	r3, #1
 800a88c:	4631      	mov	r1, r6
 800a88e:	4628      	mov	r0, r5
 800a890:	47b8      	blx	r7
 800a892:	3001      	adds	r0, #1
 800a894:	f43f af51 	beq.w	800a73a <_printf_float+0xc2>
 800a898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a89c:	429a      	cmp	r2, r3
 800a89e:	db02      	blt.n	800a8a6 <_printf_float+0x22e>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	07d8      	lsls	r0, r3, #31
 800a8a4:	d510      	bpl.n	800a8c8 <_printf_float+0x250>
 800a8a6:	ee18 3a10 	vmov	r3, s16
 800a8aa:	4652      	mov	r2, sl
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	47b8      	blx	r7
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	f43f af41 	beq.w	800a73a <_printf_float+0xc2>
 800a8b8:	f04f 0800 	mov.w	r8, #0
 800a8bc:	f104 091a 	add.w	r9, r4, #26
 800a8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	4543      	cmp	r3, r8
 800a8c6:	dc09      	bgt.n	800a8dc <_printf_float+0x264>
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	079b      	lsls	r3, r3, #30
 800a8cc:	f100 8105 	bmi.w	800aada <_printf_float+0x462>
 800a8d0:	68e0      	ldr	r0, [r4, #12]
 800a8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8d4:	4298      	cmp	r0, r3
 800a8d6:	bfb8      	it	lt
 800a8d8:	4618      	movlt	r0, r3
 800a8da:	e730      	b.n	800a73e <_printf_float+0xc6>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	464a      	mov	r2, r9
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	47b8      	blx	r7
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	f43f af27 	beq.w	800a73a <_printf_float+0xc2>
 800a8ec:	f108 0801 	add.w	r8, r8, #1
 800a8f0:	e7e6      	b.n	800a8c0 <_printf_float+0x248>
 800a8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	dc39      	bgt.n	800a96c <_printf_float+0x2f4>
 800a8f8:	4a1b      	ldr	r2, [pc, #108]	; (800a968 <_printf_float+0x2f0>)
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4628      	mov	r0, r5
 800a900:	47b8      	blx	r7
 800a902:	3001      	adds	r0, #1
 800a904:	f43f af19 	beq.w	800a73a <_printf_float+0xc2>
 800a908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a90c:	4313      	orrs	r3, r2
 800a90e:	d102      	bne.n	800a916 <_printf_float+0x29e>
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	07d9      	lsls	r1, r3, #31
 800a914:	d5d8      	bpl.n	800a8c8 <_printf_float+0x250>
 800a916:	ee18 3a10 	vmov	r3, s16
 800a91a:	4652      	mov	r2, sl
 800a91c:	4631      	mov	r1, r6
 800a91e:	4628      	mov	r0, r5
 800a920:	47b8      	blx	r7
 800a922:	3001      	adds	r0, #1
 800a924:	f43f af09 	beq.w	800a73a <_printf_float+0xc2>
 800a928:	f04f 0900 	mov.w	r9, #0
 800a92c:	f104 0a1a 	add.w	sl, r4, #26
 800a930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a932:	425b      	negs	r3, r3
 800a934:	454b      	cmp	r3, r9
 800a936:	dc01      	bgt.n	800a93c <_printf_float+0x2c4>
 800a938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a93a:	e792      	b.n	800a862 <_printf_float+0x1ea>
 800a93c:	2301      	movs	r3, #1
 800a93e:	4652      	mov	r2, sl
 800a940:	4631      	mov	r1, r6
 800a942:	4628      	mov	r0, r5
 800a944:	47b8      	blx	r7
 800a946:	3001      	adds	r0, #1
 800a948:	f43f aef7 	beq.w	800a73a <_printf_float+0xc2>
 800a94c:	f109 0901 	add.w	r9, r9, #1
 800a950:	e7ee      	b.n	800a930 <_printf_float+0x2b8>
 800a952:	bf00      	nop
 800a954:	7fefffff 	.word	0x7fefffff
 800a958:	0800edc0 	.word	0x0800edc0
 800a95c:	0800edc4 	.word	0x0800edc4
 800a960:	0800edcc 	.word	0x0800edcc
 800a964:	0800edc8 	.word	0x0800edc8
 800a968:	0800f0f1 	.word	0x0800f0f1
 800a96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a96e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a970:	429a      	cmp	r2, r3
 800a972:	bfa8      	it	ge
 800a974:	461a      	movge	r2, r3
 800a976:	2a00      	cmp	r2, #0
 800a978:	4691      	mov	r9, r2
 800a97a:	dc37      	bgt.n	800a9ec <_printf_float+0x374>
 800a97c:	f04f 0b00 	mov.w	fp, #0
 800a980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a984:	f104 021a 	add.w	r2, r4, #26
 800a988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a98a:	9305      	str	r3, [sp, #20]
 800a98c:	eba3 0309 	sub.w	r3, r3, r9
 800a990:	455b      	cmp	r3, fp
 800a992:	dc33      	bgt.n	800a9fc <_printf_float+0x384>
 800a994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a998:	429a      	cmp	r2, r3
 800a99a:	db3b      	blt.n	800aa14 <_printf_float+0x39c>
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	07da      	lsls	r2, r3, #31
 800a9a0:	d438      	bmi.n	800aa14 <_printf_float+0x39c>
 800a9a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a4:	9a05      	ldr	r2, [sp, #20]
 800a9a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9a8:	1a9a      	subs	r2, r3, r2
 800a9aa:	eba3 0901 	sub.w	r9, r3, r1
 800a9ae:	4591      	cmp	r9, r2
 800a9b0:	bfa8      	it	ge
 800a9b2:	4691      	movge	r9, r2
 800a9b4:	f1b9 0f00 	cmp.w	r9, #0
 800a9b8:	dc35      	bgt.n	800aa26 <_printf_float+0x3ae>
 800a9ba:	f04f 0800 	mov.w	r8, #0
 800a9be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9c2:	f104 0a1a 	add.w	sl, r4, #26
 800a9c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9ca:	1a9b      	subs	r3, r3, r2
 800a9cc:	eba3 0309 	sub.w	r3, r3, r9
 800a9d0:	4543      	cmp	r3, r8
 800a9d2:	f77f af79 	ble.w	800a8c8 <_printf_float+0x250>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	4652      	mov	r2, sl
 800a9da:	4631      	mov	r1, r6
 800a9dc:	4628      	mov	r0, r5
 800a9de:	47b8      	blx	r7
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	f43f aeaa 	beq.w	800a73a <_printf_float+0xc2>
 800a9e6:	f108 0801 	add.w	r8, r8, #1
 800a9ea:	e7ec      	b.n	800a9c6 <_printf_float+0x34e>
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	47b8      	blx	r7
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	d1c0      	bne.n	800a97c <_printf_float+0x304>
 800a9fa:	e69e      	b.n	800a73a <_printf_float+0xc2>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4628      	mov	r0, r5
 800aa02:	9205      	str	r2, [sp, #20]
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	f43f ae97 	beq.w	800a73a <_printf_float+0xc2>
 800aa0c:	9a05      	ldr	r2, [sp, #20]
 800aa0e:	f10b 0b01 	add.w	fp, fp, #1
 800aa12:	e7b9      	b.n	800a988 <_printf_float+0x310>
 800aa14:	ee18 3a10 	vmov	r3, s16
 800aa18:	4652      	mov	r2, sl
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	47b8      	blx	r7
 800aa20:	3001      	adds	r0, #1
 800aa22:	d1be      	bne.n	800a9a2 <_printf_float+0x32a>
 800aa24:	e689      	b.n	800a73a <_printf_float+0xc2>
 800aa26:	9a05      	ldr	r2, [sp, #20]
 800aa28:	464b      	mov	r3, r9
 800aa2a:	4442      	add	r2, r8
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b8      	blx	r7
 800aa32:	3001      	adds	r0, #1
 800aa34:	d1c1      	bne.n	800a9ba <_printf_float+0x342>
 800aa36:	e680      	b.n	800a73a <_printf_float+0xc2>
 800aa38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa3a:	2a01      	cmp	r2, #1
 800aa3c:	dc01      	bgt.n	800aa42 <_printf_float+0x3ca>
 800aa3e:	07db      	lsls	r3, r3, #31
 800aa40:	d538      	bpl.n	800aab4 <_printf_float+0x43c>
 800aa42:	2301      	movs	r3, #1
 800aa44:	4642      	mov	r2, r8
 800aa46:	4631      	mov	r1, r6
 800aa48:	4628      	mov	r0, r5
 800aa4a:	47b8      	blx	r7
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	f43f ae74 	beq.w	800a73a <_printf_float+0xc2>
 800aa52:	ee18 3a10 	vmov	r3, s16
 800aa56:	4652      	mov	r2, sl
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	47b8      	blx	r7
 800aa5e:	3001      	adds	r0, #1
 800aa60:	f43f ae6b 	beq.w	800a73a <_printf_float+0xc2>
 800aa64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f7f6 f844 	bl	8000af8 <__aeabi_dcmpeq>
 800aa70:	b9d8      	cbnz	r0, 800aaaa <_printf_float+0x432>
 800aa72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa74:	f108 0201 	add.w	r2, r8, #1
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	4631      	mov	r1, r6
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	47b8      	blx	r7
 800aa80:	3001      	adds	r0, #1
 800aa82:	d10e      	bne.n	800aaa2 <_printf_float+0x42a>
 800aa84:	e659      	b.n	800a73a <_printf_float+0xc2>
 800aa86:	2301      	movs	r3, #1
 800aa88:	4652      	mov	r2, sl
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	47b8      	blx	r7
 800aa90:	3001      	adds	r0, #1
 800aa92:	f43f ae52 	beq.w	800a73a <_printf_float+0xc2>
 800aa96:	f108 0801 	add.w	r8, r8, #1
 800aa9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	4543      	cmp	r3, r8
 800aaa0:	dcf1      	bgt.n	800aa86 <_printf_float+0x40e>
 800aaa2:	464b      	mov	r3, r9
 800aaa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aaa8:	e6dc      	b.n	800a864 <_printf_float+0x1ec>
 800aaaa:	f04f 0800 	mov.w	r8, #0
 800aaae:	f104 0a1a 	add.w	sl, r4, #26
 800aab2:	e7f2      	b.n	800aa9a <_printf_float+0x422>
 800aab4:	2301      	movs	r3, #1
 800aab6:	4642      	mov	r2, r8
 800aab8:	e7df      	b.n	800aa7a <_printf_float+0x402>
 800aaba:	2301      	movs	r3, #1
 800aabc:	464a      	mov	r2, r9
 800aabe:	4631      	mov	r1, r6
 800aac0:	4628      	mov	r0, r5
 800aac2:	47b8      	blx	r7
 800aac4:	3001      	adds	r0, #1
 800aac6:	f43f ae38 	beq.w	800a73a <_printf_float+0xc2>
 800aaca:	f108 0801 	add.w	r8, r8, #1
 800aace:	68e3      	ldr	r3, [r4, #12]
 800aad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aad2:	1a5b      	subs	r3, r3, r1
 800aad4:	4543      	cmp	r3, r8
 800aad6:	dcf0      	bgt.n	800aaba <_printf_float+0x442>
 800aad8:	e6fa      	b.n	800a8d0 <_printf_float+0x258>
 800aada:	f04f 0800 	mov.w	r8, #0
 800aade:	f104 0919 	add.w	r9, r4, #25
 800aae2:	e7f4      	b.n	800aace <_printf_float+0x456>

0800aae4 <_printf_common>:
 800aae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae8:	4616      	mov	r6, r2
 800aaea:	4699      	mov	r9, r3
 800aaec:	688a      	ldr	r2, [r1, #8]
 800aaee:	690b      	ldr	r3, [r1, #16]
 800aaf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	bfb8      	it	lt
 800aaf8:	4613      	movlt	r3, r2
 800aafa:	6033      	str	r3, [r6, #0]
 800aafc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab00:	4607      	mov	r7, r0
 800ab02:	460c      	mov	r4, r1
 800ab04:	b10a      	cbz	r2, 800ab0a <_printf_common+0x26>
 800ab06:	3301      	adds	r3, #1
 800ab08:	6033      	str	r3, [r6, #0]
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	0699      	lsls	r1, r3, #26
 800ab0e:	bf42      	ittt	mi
 800ab10:	6833      	ldrmi	r3, [r6, #0]
 800ab12:	3302      	addmi	r3, #2
 800ab14:	6033      	strmi	r3, [r6, #0]
 800ab16:	6825      	ldr	r5, [r4, #0]
 800ab18:	f015 0506 	ands.w	r5, r5, #6
 800ab1c:	d106      	bne.n	800ab2c <_printf_common+0x48>
 800ab1e:	f104 0a19 	add.w	sl, r4, #25
 800ab22:	68e3      	ldr	r3, [r4, #12]
 800ab24:	6832      	ldr	r2, [r6, #0]
 800ab26:	1a9b      	subs	r3, r3, r2
 800ab28:	42ab      	cmp	r3, r5
 800ab2a:	dc26      	bgt.n	800ab7a <_printf_common+0x96>
 800ab2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab30:	1e13      	subs	r3, r2, #0
 800ab32:	6822      	ldr	r2, [r4, #0]
 800ab34:	bf18      	it	ne
 800ab36:	2301      	movne	r3, #1
 800ab38:	0692      	lsls	r2, r2, #26
 800ab3a:	d42b      	bmi.n	800ab94 <_printf_common+0xb0>
 800ab3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab40:	4649      	mov	r1, r9
 800ab42:	4638      	mov	r0, r7
 800ab44:	47c0      	blx	r8
 800ab46:	3001      	adds	r0, #1
 800ab48:	d01e      	beq.n	800ab88 <_printf_common+0xa4>
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	68e5      	ldr	r5, [r4, #12]
 800ab4e:	6832      	ldr	r2, [r6, #0]
 800ab50:	f003 0306 	and.w	r3, r3, #6
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	bf08      	it	eq
 800ab58:	1aad      	subeq	r5, r5, r2
 800ab5a:	68a3      	ldr	r3, [r4, #8]
 800ab5c:	6922      	ldr	r2, [r4, #16]
 800ab5e:	bf0c      	ite	eq
 800ab60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab64:	2500      	movne	r5, #0
 800ab66:	4293      	cmp	r3, r2
 800ab68:	bfc4      	itt	gt
 800ab6a:	1a9b      	subgt	r3, r3, r2
 800ab6c:	18ed      	addgt	r5, r5, r3
 800ab6e:	2600      	movs	r6, #0
 800ab70:	341a      	adds	r4, #26
 800ab72:	42b5      	cmp	r5, r6
 800ab74:	d11a      	bne.n	800abac <_printf_common+0xc8>
 800ab76:	2000      	movs	r0, #0
 800ab78:	e008      	b.n	800ab8c <_printf_common+0xa8>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	4652      	mov	r2, sl
 800ab7e:	4649      	mov	r1, r9
 800ab80:	4638      	mov	r0, r7
 800ab82:	47c0      	blx	r8
 800ab84:	3001      	adds	r0, #1
 800ab86:	d103      	bne.n	800ab90 <_printf_common+0xac>
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab90:	3501      	adds	r5, #1
 800ab92:	e7c6      	b.n	800ab22 <_printf_common+0x3e>
 800ab94:	18e1      	adds	r1, r4, r3
 800ab96:	1c5a      	adds	r2, r3, #1
 800ab98:	2030      	movs	r0, #48	; 0x30
 800ab9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab9e:	4422      	add	r2, r4
 800aba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aba8:	3302      	adds	r3, #2
 800abaa:	e7c7      	b.n	800ab3c <_printf_common+0x58>
 800abac:	2301      	movs	r3, #1
 800abae:	4622      	mov	r2, r4
 800abb0:	4649      	mov	r1, r9
 800abb2:	4638      	mov	r0, r7
 800abb4:	47c0      	blx	r8
 800abb6:	3001      	adds	r0, #1
 800abb8:	d0e6      	beq.n	800ab88 <_printf_common+0xa4>
 800abba:	3601      	adds	r6, #1
 800abbc:	e7d9      	b.n	800ab72 <_printf_common+0x8e>
	...

0800abc0 <_printf_i>:
 800abc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc4:	7e0f      	ldrb	r7, [r1, #24]
 800abc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abc8:	2f78      	cmp	r7, #120	; 0x78
 800abca:	4691      	mov	r9, r2
 800abcc:	4680      	mov	r8, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	469a      	mov	sl, r3
 800abd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abd6:	d807      	bhi.n	800abe8 <_printf_i+0x28>
 800abd8:	2f62      	cmp	r7, #98	; 0x62
 800abda:	d80a      	bhi.n	800abf2 <_printf_i+0x32>
 800abdc:	2f00      	cmp	r7, #0
 800abde:	f000 80d8 	beq.w	800ad92 <_printf_i+0x1d2>
 800abe2:	2f58      	cmp	r7, #88	; 0x58
 800abe4:	f000 80a3 	beq.w	800ad2e <_printf_i+0x16e>
 800abe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abf0:	e03a      	b.n	800ac68 <_printf_i+0xa8>
 800abf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abf6:	2b15      	cmp	r3, #21
 800abf8:	d8f6      	bhi.n	800abe8 <_printf_i+0x28>
 800abfa:	a101      	add	r1, pc, #4	; (adr r1, 800ac00 <_printf_i+0x40>)
 800abfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac00:	0800ac59 	.word	0x0800ac59
 800ac04:	0800ac6d 	.word	0x0800ac6d
 800ac08:	0800abe9 	.word	0x0800abe9
 800ac0c:	0800abe9 	.word	0x0800abe9
 800ac10:	0800abe9 	.word	0x0800abe9
 800ac14:	0800abe9 	.word	0x0800abe9
 800ac18:	0800ac6d 	.word	0x0800ac6d
 800ac1c:	0800abe9 	.word	0x0800abe9
 800ac20:	0800abe9 	.word	0x0800abe9
 800ac24:	0800abe9 	.word	0x0800abe9
 800ac28:	0800abe9 	.word	0x0800abe9
 800ac2c:	0800ad79 	.word	0x0800ad79
 800ac30:	0800ac9d 	.word	0x0800ac9d
 800ac34:	0800ad5b 	.word	0x0800ad5b
 800ac38:	0800abe9 	.word	0x0800abe9
 800ac3c:	0800abe9 	.word	0x0800abe9
 800ac40:	0800ad9b 	.word	0x0800ad9b
 800ac44:	0800abe9 	.word	0x0800abe9
 800ac48:	0800ac9d 	.word	0x0800ac9d
 800ac4c:	0800abe9 	.word	0x0800abe9
 800ac50:	0800abe9 	.word	0x0800abe9
 800ac54:	0800ad63 	.word	0x0800ad63
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	1d1a      	adds	r2, r3, #4
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	602a      	str	r2, [r5, #0]
 800ac60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e0a3      	b.n	800adb4 <_printf_i+0x1f4>
 800ac6c:	6820      	ldr	r0, [r4, #0]
 800ac6e:	6829      	ldr	r1, [r5, #0]
 800ac70:	0606      	lsls	r6, r0, #24
 800ac72:	f101 0304 	add.w	r3, r1, #4
 800ac76:	d50a      	bpl.n	800ac8e <_printf_i+0xce>
 800ac78:	680e      	ldr	r6, [r1, #0]
 800ac7a:	602b      	str	r3, [r5, #0]
 800ac7c:	2e00      	cmp	r6, #0
 800ac7e:	da03      	bge.n	800ac88 <_printf_i+0xc8>
 800ac80:	232d      	movs	r3, #45	; 0x2d
 800ac82:	4276      	negs	r6, r6
 800ac84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac88:	485e      	ldr	r0, [pc, #376]	; (800ae04 <_printf_i+0x244>)
 800ac8a:	230a      	movs	r3, #10
 800ac8c:	e019      	b.n	800acc2 <_printf_i+0x102>
 800ac8e:	680e      	ldr	r6, [r1, #0]
 800ac90:	602b      	str	r3, [r5, #0]
 800ac92:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac96:	bf18      	it	ne
 800ac98:	b236      	sxthne	r6, r6
 800ac9a:	e7ef      	b.n	800ac7c <_printf_i+0xbc>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	6820      	ldr	r0, [r4, #0]
 800aca0:	1d19      	adds	r1, r3, #4
 800aca2:	6029      	str	r1, [r5, #0]
 800aca4:	0601      	lsls	r1, r0, #24
 800aca6:	d501      	bpl.n	800acac <_printf_i+0xec>
 800aca8:	681e      	ldr	r6, [r3, #0]
 800acaa:	e002      	b.n	800acb2 <_printf_i+0xf2>
 800acac:	0646      	lsls	r6, r0, #25
 800acae:	d5fb      	bpl.n	800aca8 <_printf_i+0xe8>
 800acb0:	881e      	ldrh	r6, [r3, #0]
 800acb2:	4854      	ldr	r0, [pc, #336]	; (800ae04 <_printf_i+0x244>)
 800acb4:	2f6f      	cmp	r7, #111	; 0x6f
 800acb6:	bf0c      	ite	eq
 800acb8:	2308      	moveq	r3, #8
 800acba:	230a      	movne	r3, #10
 800acbc:	2100      	movs	r1, #0
 800acbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acc2:	6865      	ldr	r5, [r4, #4]
 800acc4:	60a5      	str	r5, [r4, #8]
 800acc6:	2d00      	cmp	r5, #0
 800acc8:	bfa2      	ittt	ge
 800acca:	6821      	ldrge	r1, [r4, #0]
 800accc:	f021 0104 	bicge.w	r1, r1, #4
 800acd0:	6021      	strge	r1, [r4, #0]
 800acd2:	b90e      	cbnz	r6, 800acd8 <_printf_i+0x118>
 800acd4:	2d00      	cmp	r5, #0
 800acd6:	d04d      	beq.n	800ad74 <_printf_i+0x1b4>
 800acd8:	4615      	mov	r5, r2
 800acda:	fbb6 f1f3 	udiv	r1, r6, r3
 800acde:	fb03 6711 	mls	r7, r3, r1, r6
 800ace2:	5dc7      	ldrb	r7, [r0, r7]
 800ace4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ace8:	4637      	mov	r7, r6
 800acea:	42bb      	cmp	r3, r7
 800acec:	460e      	mov	r6, r1
 800acee:	d9f4      	bls.n	800acda <_printf_i+0x11a>
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	d10b      	bne.n	800ad0c <_printf_i+0x14c>
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	07de      	lsls	r6, r3, #31
 800acf8:	d508      	bpl.n	800ad0c <_printf_i+0x14c>
 800acfa:	6923      	ldr	r3, [r4, #16]
 800acfc:	6861      	ldr	r1, [r4, #4]
 800acfe:	4299      	cmp	r1, r3
 800ad00:	bfde      	ittt	le
 800ad02:	2330      	movle	r3, #48	; 0x30
 800ad04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad08:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad0c:	1b52      	subs	r2, r2, r5
 800ad0e:	6122      	str	r2, [r4, #16]
 800ad10:	f8cd a000 	str.w	sl, [sp]
 800ad14:	464b      	mov	r3, r9
 800ad16:	aa03      	add	r2, sp, #12
 800ad18:	4621      	mov	r1, r4
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	f7ff fee2 	bl	800aae4 <_printf_common>
 800ad20:	3001      	adds	r0, #1
 800ad22:	d14c      	bne.n	800adbe <_printf_i+0x1fe>
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	b004      	add	sp, #16
 800ad2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2e:	4835      	ldr	r0, [pc, #212]	; (800ae04 <_printf_i+0x244>)
 800ad30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad34:	6829      	ldr	r1, [r5, #0]
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad3c:	6029      	str	r1, [r5, #0]
 800ad3e:	061d      	lsls	r5, r3, #24
 800ad40:	d514      	bpl.n	800ad6c <_printf_i+0x1ac>
 800ad42:	07df      	lsls	r7, r3, #31
 800ad44:	bf44      	itt	mi
 800ad46:	f043 0320 	orrmi.w	r3, r3, #32
 800ad4a:	6023      	strmi	r3, [r4, #0]
 800ad4c:	b91e      	cbnz	r6, 800ad56 <_printf_i+0x196>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	f023 0320 	bic.w	r3, r3, #32
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	2310      	movs	r3, #16
 800ad58:	e7b0      	b.n	800acbc <_printf_i+0xfc>
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	f043 0320 	orr.w	r3, r3, #32
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	2378      	movs	r3, #120	; 0x78
 800ad64:	4828      	ldr	r0, [pc, #160]	; (800ae08 <_printf_i+0x248>)
 800ad66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad6a:	e7e3      	b.n	800ad34 <_printf_i+0x174>
 800ad6c:	0659      	lsls	r1, r3, #25
 800ad6e:	bf48      	it	mi
 800ad70:	b2b6      	uxthmi	r6, r6
 800ad72:	e7e6      	b.n	800ad42 <_printf_i+0x182>
 800ad74:	4615      	mov	r5, r2
 800ad76:	e7bb      	b.n	800acf0 <_printf_i+0x130>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	6826      	ldr	r6, [r4, #0]
 800ad7c:	6961      	ldr	r1, [r4, #20]
 800ad7e:	1d18      	adds	r0, r3, #4
 800ad80:	6028      	str	r0, [r5, #0]
 800ad82:	0635      	lsls	r5, r6, #24
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	d501      	bpl.n	800ad8c <_printf_i+0x1cc>
 800ad88:	6019      	str	r1, [r3, #0]
 800ad8a:	e002      	b.n	800ad92 <_printf_i+0x1d2>
 800ad8c:	0670      	lsls	r0, r6, #25
 800ad8e:	d5fb      	bpl.n	800ad88 <_printf_i+0x1c8>
 800ad90:	8019      	strh	r1, [r3, #0]
 800ad92:	2300      	movs	r3, #0
 800ad94:	6123      	str	r3, [r4, #16]
 800ad96:	4615      	mov	r5, r2
 800ad98:	e7ba      	b.n	800ad10 <_printf_i+0x150>
 800ad9a:	682b      	ldr	r3, [r5, #0]
 800ad9c:	1d1a      	adds	r2, r3, #4
 800ad9e:	602a      	str	r2, [r5, #0]
 800ada0:	681d      	ldr	r5, [r3, #0]
 800ada2:	6862      	ldr	r2, [r4, #4]
 800ada4:	2100      	movs	r1, #0
 800ada6:	4628      	mov	r0, r5
 800ada8:	f7f5 fa32 	bl	8000210 <memchr>
 800adac:	b108      	cbz	r0, 800adb2 <_printf_i+0x1f2>
 800adae:	1b40      	subs	r0, r0, r5
 800adb0:	6060      	str	r0, [r4, #4]
 800adb2:	6863      	ldr	r3, [r4, #4]
 800adb4:	6123      	str	r3, [r4, #16]
 800adb6:	2300      	movs	r3, #0
 800adb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adbc:	e7a8      	b.n	800ad10 <_printf_i+0x150>
 800adbe:	6923      	ldr	r3, [r4, #16]
 800adc0:	462a      	mov	r2, r5
 800adc2:	4649      	mov	r1, r9
 800adc4:	4640      	mov	r0, r8
 800adc6:	47d0      	blx	sl
 800adc8:	3001      	adds	r0, #1
 800adca:	d0ab      	beq.n	800ad24 <_printf_i+0x164>
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	079b      	lsls	r3, r3, #30
 800add0:	d413      	bmi.n	800adfa <_printf_i+0x23a>
 800add2:	68e0      	ldr	r0, [r4, #12]
 800add4:	9b03      	ldr	r3, [sp, #12]
 800add6:	4298      	cmp	r0, r3
 800add8:	bfb8      	it	lt
 800adda:	4618      	movlt	r0, r3
 800addc:	e7a4      	b.n	800ad28 <_printf_i+0x168>
 800adde:	2301      	movs	r3, #1
 800ade0:	4632      	mov	r2, r6
 800ade2:	4649      	mov	r1, r9
 800ade4:	4640      	mov	r0, r8
 800ade6:	47d0      	blx	sl
 800ade8:	3001      	adds	r0, #1
 800adea:	d09b      	beq.n	800ad24 <_printf_i+0x164>
 800adec:	3501      	adds	r5, #1
 800adee:	68e3      	ldr	r3, [r4, #12]
 800adf0:	9903      	ldr	r1, [sp, #12]
 800adf2:	1a5b      	subs	r3, r3, r1
 800adf4:	42ab      	cmp	r3, r5
 800adf6:	dcf2      	bgt.n	800adde <_printf_i+0x21e>
 800adf8:	e7eb      	b.n	800add2 <_printf_i+0x212>
 800adfa:	2500      	movs	r5, #0
 800adfc:	f104 0619 	add.w	r6, r4, #25
 800ae00:	e7f5      	b.n	800adee <_printf_i+0x22e>
 800ae02:	bf00      	nop
 800ae04:	0800edd0 	.word	0x0800edd0
 800ae08:	0800ede1 	.word	0x0800ede1

0800ae0c <_sbrk_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4d06      	ldr	r5, [pc, #24]	; (800ae28 <_sbrk_r+0x1c>)
 800ae10:	2300      	movs	r3, #0
 800ae12:	4604      	mov	r4, r0
 800ae14:	4608      	mov	r0, r1
 800ae16:	602b      	str	r3, [r5, #0]
 800ae18:	f7f8 ffa4 	bl	8003d64 <_sbrk>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_sbrk_r+0x1a>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_sbrk_r+0x1a>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	20000d78 	.word	0x20000d78

0800ae2c <siprintf>:
 800ae2c:	b40e      	push	{r1, r2, r3}
 800ae2e:	b500      	push	{lr}
 800ae30:	b09c      	sub	sp, #112	; 0x70
 800ae32:	ab1d      	add	r3, sp, #116	; 0x74
 800ae34:	9002      	str	r0, [sp, #8]
 800ae36:	9006      	str	r0, [sp, #24]
 800ae38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae3c:	4809      	ldr	r0, [pc, #36]	; (800ae64 <siprintf+0x38>)
 800ae3e:	9107      	str	r1, [sp, #28]
 800ae40:	9104      	str	r1, [sp, #16]
 800ae42:	4909      	ldr	r1, [pc, #36]	; (800ae68 <siprintf+0x3c>)
 800ae44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae48:	9105      	str	r1, [sp, #20]
 800ae4a:	6800      	ldr	r0, [r0, #0]
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	a902      	add	r1, sp, #8
 800ae50:	f001 fbf6 	bl	800c640 <_svfiprintf_r>
 800ae54:	9b02      	ldr	r3, [sp, #8]
 800ae56:	2200      	movs	r2, #0
 800ae58:	701a      	strb	r2, [r3, #0]
 800ae5a:	b01c      	add	sp, #112	; 0x70
 800ae5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae60:	b003      	add	sp, #12
 800ae62:	4770      	bx	lr
 800ae64:	200001d8 	.word	0x200001d8
 800ae68:	ffff0208 	.word	0xffff0208

0800ae6c <siscanf>:
 800ae6c:	b40e      	push	{r1, r2, r3}
 800ae6e:	b510      	push	{r4, lr}
 800ae70:	b09f      	sub	sp, #124	; 0x7c
 800ae72:	ac21      	add	r4, sp, #132	; 0x84
 800ae74:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ae78:	f854 2b04 	ldr.w	r2, [r4], #4
 800ae7c:	9201      	str	r2, [sp, #4]
 800ae7e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ae82:	9004      	str	r0, [sp, #16]
 800ae84:	9008      	str	r0, [sp, #32]
 800ae86:	f7f5 f9b5 	bl	80001f4 <strlen>
 800ae8a:	4b0c      	ldr	r3, [pc, #48]	; (800aebc <siscanf+0x50>)
 800ae8c:	9005      	str	r0, [sp, #20]
 800ae8e:	9009      	str	r0, [sp, #36]	; 0x24
 800ae90:	930d      	str	r3, [sp, #52]	; 0x34
 800ae92:	480b      	ldr	r0, [pc, #44]	; (800aec0 <siscanf+0x54>)
 800ae94:	9a01      	ldr	r2, [sp, #4]
 800ae96:	6800      	ldr	r0, [r0, #0]
 800ae98:	9403      	str	r4, [sp, #12]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	9311      	str	r3, [sp, #68]	; 0x44
 800ae9e:	9316      	str	r3, [sp, #88]	; 0x58
 800aea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aea4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aea8:	a904      	add	r1, sp, #16
 800aeaa:	4623      	mov	r3, r4
 800aeac:	f001 fd22 	bl	800c8f4 <__ssvfiscanf_r>
 800aeb0:	b01f      	add	sp, #124	; 0x7c
 800aeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeb6:	b003      	add	sp, #12
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	0800aee7 	.word	0x0800aee7
 800aec0:	200001d8 	.word	0x200001d8

0800aec4 <__sread>:
 800aec4:	b510      	push	{r4, lr}
 800aec6:	460c      	mov	r4, r1
 800aec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aecc:	f001 ffdc 	bl	800ce88 <_read_r>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	bfab      	itete	ge
 800aed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aed6:	89a3      	ldrhlt	r3, [r4, #12]
 800aed8:	181b      	addge	r3, r3, r0
 800aeda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aede:	bfac      	ite	ge
 800aee0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aee2:	81a3      	strhlt	r3, [r4, #12]
 800aee4:	bd10      	pop	{r4, pc}

0800aee6 <__seofread>:
 800aee6:	2000      	movs	r0, #0
 800aee8:	4770      	bx	lr

0800aeea <__swrite>:
 800aeea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeee:	461f      	mov	r7, r3
 800aef0:	898b      	ldrh	r3, [r1, #12]
 800aef2:	05db      	lsls	r3, r3, #23
 800aef4:	4605      	mov	r5, r0
 800aef6:	460c      	mov	r4, r1
 800aef8:	4616      	mov	r6, r2
 800aefa:	d505      	bpl.n	800af08 <__swrite+0x1e>
 800aefc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af00:	2302      	movs	r3, #2
 800af02:	2200      	movs	r2, #0
 800af04:	f000 ff7a 	bl	800bdfc <_lseek_r>
 800af08:	89a3      	ldrh	r3, [r4, #12]
 800af0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af12:	81a3      	strh	r3, [r4, #12]
 800af14:	4632      	mov	r2, r6
 800af16:	463b      	mov	r3, r7
 800af18:	4628      	mov	r0, r5
 800af1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af1e:	f000 b8cd 	b.w	800b0bc <_write_r>

0800af22 <__sseek>:
 800af22:	b510      	push	{r4, lr}
 800af24:	460c      	mov	r4, r1
 800af26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af2a:	f000 ff67 	bl	800bdfc <_lseek_r>
 800af2e:	1c43      	adds	r3, r0, #1
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	bf15      	itete	ne
 800af34:	6560      	strne	r0, [r4, #84]	; 0x54
 800af36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af3e:	81a3      	strheq	r3, [r4, #12]
 800af40:	bf18      	it	ne
 800af42:	81a3      	strhne	r3, [r4, #12]
 800af44:	bd10      	pop	{r4, pc}

0800af46 <__sclose>:
 800af46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af4a:	f000 b8c9 	b.w	800b0e0 <_close_r>

0800af4e <strchr>:
 800af4e:	b2c9      	uxtb	r1, r1
 800af50:	4603      	mov	r3, r0
 800af52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af56:	b11a      	cbz	r2, 800af60 <strchr+0x12>
 800af58:	428a      	cmp	r2, r1
 800af5a:	d1f9      	bne.n	800af50 <strchr+0x2>
 800af5c:	4618      	mov	r0, r3
 800af5e:	4770      	bx	lr
 800af60:	2900      	cmp	r1, #0
 800af62:	bf18      	it	ne
 800af64:	2300      	movne	r3, #0
 800af66:	e7f9      	b.n	800af5c <strchr+0xe>

0800af68 <strcpy>:
 800af68:	4603      	mov	r3, r0
 800af6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af6e:	f803 2b01 	strb.w	r2, [r3], #1
 800af72:	2a00      	cmp	r2, #0
 800af74:	d1f9      	bne.n	800af6a <strcpy+0x2>
 800af76:	4770      	bx	lr

0800af78 <strncmp>:
 800af78:	b510      	push	{r4, lr}
 800af7a:	b17a      	cbz	r2, 800af9c <strncmp+0x24>
 800af7c:	4603      	mov	r3, r0
 800af7e:	3901      	subs	r1, #1
 800af80:	1884      	adds	r4, r0, r2
 800af82:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af8a:	4290      	cmp	r0, r2
 800af8c:	d101      	bne.n	800af92 <strncmp+0x1a>
 800af8e:	42a3      	cmp	r3, r4
 800af90:	d101      	bne.n	800af96 <strncmp+0x1e>
 800af92:	1a80      	subs	r0, r0, r2
 800af94:	bd10      	pop	{r4, pc}
 800af96:	2800      	cmp	r0, #0
 800af98:	d1f3      	bne.n	800af82 <strncmp+0xa>
 800af9a:	e7fa      	b.n	800af92 <strncmp+0x1a>
 800af9c:	4610      	mov	r0, r2
 800af9e:	e7f9      	b.n	800af94 <strncmp+0x1c>

0800afa0 <_strtol_l.constprop.0>:
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa6:	d001      	beq.n	800afac <_strtol_l.constprop.0+0xc>
 800afa8:	2b24      	cmp	r3, #36	; 0x24
 800afaa:	d906      	bls.n	800afba <_strtol_l.constprop.0+0x1a>
 800afac:	f7ff f9a2 	bl	800a2f4 <__errno>
 800afb0:	2316      	movs	r3, #22
 800afb2:	6003      	str	r3, [r0, #0]
 800afb4:	2000      	movs	r0, #0
 800afb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b0a0 <_strtol_l.constprop.0+0x100>
 800afbe:	460d      	mov	r5, r1
 800afc0:	462e      	mov	r6, r5
 800afc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afc6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800afca:	f017 0708 	ands.w	r7, r7, #8
 800afce:	d1f7      	bne.n	800afc0 <_strtol_l.constprop.0+0x20>
 800afd0:	2c2d      	cmp	r4, #45	; 0x2d
 800afd2:	d132      	bne.n	800b03a <_strtol_l.constprop.0+0x9a>
 800afd4:	782c      	ldrb	r4, [r5, #0]
 800afd6:	2701      	movs	r7, #1
 800afd8:	1cb5      	adds	r5, r6, #2
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d05b      	beq.n	800b096 <_strtol_l.constprop.0+0xf6>
 800afde:	2b10      	cmp	r3, #16
 800afe0:	d109      	bne.n	800aff6 <_strtol_l.constprop.0+0x56>
 800afe2:	2c30      	cmp	r4, #48	; 0x30
 800afe4:	d107      	bne.n	800aff6 <_strtol_l.constprop.0+0x56>
 800afe6:	782c      	ldrb	r4, [r5, #0]
 800afe8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800afec:	2c58      	cmp	r4, #88	; 0x58
 800afee:	d14d      	bne.n	800b08c <_strtol_l.constprop.0+0xec>
 800aff0:	786c      	ldrb	r4, [r5, #1]
 800aff2:	2310      	movs	r3, #16
 800aff4:	3502      	adds	r5, #2
 800aff6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800affa:	f108 38ff 	add.w	r8, r8, #4294967295
 800affe:	f04f 0c00 	mov.w	ip, #0
 800b002:	fbb8 f9f3 	udiv	r9, r8, r3
 800b006:	4666      	mov	r6, ip
 800b008:	fb03 8a19 	mls	sl, r3, r9, r8
 800b00c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b010:	f1be 0f09 	cmp.w	lr, #9
 800b014:	d816      	bhi.n	800b044 <_strtol_l.constprop.0+0xa4>
 800b016:	4674      	mov	r4, lr
 800b018:	42a3      	cmp	r3, r4
 800b01a:	dd24      	ble.n	800b066 <_strtol_l.constprop.0+0xc6>
 800b01c:	f1bc 0f00 	cmp.w	ip, #0
 800b020:	db1e      	blt.n	800b060 <_strtol_l.constprop.0+0xc0>
 800b022:	45b1      	cmp	r9, r6
 800b024:	d31c      	bcc.n	800b060 <_strtol_l.constprop.0+0xc0>
 800b026:	d101      	bne.n	800b02c <_strtol_l.constprop.0+0x8c>
 800b028:	45a2      	cmp	sl, r4
 800b02a:	db19      	blt.n	800b060 <_strtol_l.constprop.0+0xc0>
 800b02c:	fb06 4603 	mla	r6, r6, r3, r4
 800b030:	f04f 0c01 	mov.w	ip, #1
 800b034:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b038:	e7e8      	b.n	800b00c <_strtol_l.constprop.0+0x6c>
 800b03a:	2c2b      	cmp	r4, #43	; 0x2b
 800b03c:	bf04      	itt	eq
 800b03e:	782c      	ldrbeq	r4, [r5, #0]
 800b040:	1cb5      	addeq	r5, r6, #2
 800b042:	e7ca      	b.n	800afda <_strtol_l.constprop.0+0x3a>
 800b044:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b048:	f1be 0f19 	cmp.w	lr, #25
 800b04c:	d801      	bhi.n	800b052 <_strtol_l.constprop.0+0xb2>
 800b04e:	3c37      	subs	r4, #55	; 0x37
 800b050:	e7e2      	b.n	800b018 <_strtol_l.constprop.0+0x78>
 800b052:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b056:	f1be 0f19 	cmp.w	lr, #25
 800b05a:	d804      	bhi.n	800b066 <_strtol_l.constprop.0+0xc6>
 800b05c:	3c57      	subs	r4, #87	; 0x57
 800b05e:	e7db      	b.n	800b018 <_strtol_l.constprop.0+0x78>
 800b060:	f04f 3cff 	mov.w	ip, #4294967295
 800b064:	e7e6      	b.n	800b034 <_strtol_l.constprop.0+0x94>
 800b066:	f1bc 0f00 	cmp.w	ip, #0
 800b06a:	da05      	bge.n	800b078 <_strtol_l.constprop.0+0xd8>
 800b06c:	2322      	movs	r3, #34	; 0x22
 800b06e:	6003      	str	r3, [r0, #0]
 800b070:	4646      	mov	r6, r8
 800b072:	b942      	cbnz	r2, 800b086 <_strtol_l.constprop.0+0xe6>
 800b074:	4630      	mov	r0, r6
 800b076:	e79e      	b.n	800afb6 <_strtol_l.constprop.0+0x16>
 800b078:	b107      	cbz	r7, 800b07c <_strtol_l.constprop.0+0xdc>
 800b07a:	4276      	negs	r6, r6
 800b07c:	2a00      	cmp	r2, #0
 800b07e:	d0f9      	beq.n	800b074 <_strtol_l.constprop.0+0xd4>
 800b080:	f1bc 0f00 	cmp.w	ip, #0
 800b084:	d000      	beq.n	800b088 <_strtol_l.constprop.0+0xe8>
 800b086:	1e69      	subs	r1, r5, #1
 800b088:	6011      	str	r1, [r2, #0]
 800b08a:	e7f3      	b.n	800b074 <_strtol_l.constprop.0+0xd4>
 800b08c:	2430      	movs	r4, #48	; 0x30
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1b1      	bne.n	800aff6 <_strtol_l.constprop.0+0x56>
 800b092:	2308      	movs	r3, #8
 800b094:	e7af      	b.n	800aff6 <_strtol_l.constprop.0+0x56>
 800b096:	2c30      	cmp	r4, #48	; 0x30
 800b098:	d0a5      	beq.n	800afe6 <_strtol_l.constprop.0+0x46>
 800b09a:	230a      	movs	r3, #10
 800b09c:	e7ab      	b.n	800aff6 <_strtol_l.constprop.0+0x56>
 800b09e:	bf00      	nop
 800b0a0:	0800edf3 	.word	0x0800edf3

0800b0a4 <_strtol_r>:
 800b0a4:	f7ff bf7c 	b.w	800afa0 <_strtol_l.constprop.0>

0800b0a8 <strtol>:
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	460a      	mov	r2, r1
 800b0ac:	4601      	mov	r1, r0
 800b0ae:	4802      	ldr	r0, [pc, #8]	; (800b0b8 <strtol+0x10>)
 800b0b0:	6800      	ldr	r0, [r0, #0]
 800b0b2:	f7ff bf75 	b.w	800afa0 <_strtol_l.constprop.0>
 800b0b6:	bf00      	nop
 800b0b8:	200001d8 	.word	0x200001d8

0800b0bc <_write_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d07      	ldr	r5, [pc, #28]	; (800b0dc <_write_r+0x20>)
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	602a      	str	r2, [r5, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	f7f8 fdf9 	bl	8003cc2 <_write>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d102      	bne.n	800b0da <_write_r+0x1e>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b103      	cbz	r3, 800b0da <_write_r+0x1e>
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	20000d78 	.word	0x20000d78

0800b0e0 <_close_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	4d06      	ldr	r5, [pc, #24]	; (800b0fc <_close_r+0x1c>)
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	4608      	mov	r0, r1
 800b0ea:	602b      	str	r3, [r5, #0]
 800b0ec:	f7f8 fe05 	bl	8003cfa <_close>
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	d102      	bne.n	800b0fa <_close_r+0x1a>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	b103      	cbz	r3, 800b0fa <_close_r+0x1a>
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	20000d78 	.word	0x20000d78

0800b100 <quorem>:
 800b100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	6903      	ldr	r3, [r0, #16]
 800b106:	690c      	ldr	r4, [r1, #16]
 800b108:	42a3      	cmp	r3, r4
 800b10a:	4607      	mov	r7, r0
 800b10c:	f2c0 8081 	blt.w	800b212 <quorem+0x112>
 800b110:	3c01      	subs	r4, #1
 800b112:	f101 0814 	add.w	r8, r1, #20
 800b116:	f100 0514 	add.w	r5, r0, #20
 800b11a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b128:	3301      	adds	r3, #1
 800b12a:	429a      	cmp	r2, r3
 800b12c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b134:	fbb2 f6f3 	udiv	r6, r2, r3
 800b138:	d331      	bcc.n	800b19e <quorem+0x9e>
 800b13a:	f04f 0e00 	mov.w	lr, #0
 800b13e:	4640      	mov	r0, r8
 800b140:	46ac      	mov	ip, r5
 800b142:	46f2      	mov	sl, lr
 800b144:	f850 2b04 	ldr.w	r2, [r0], #4
 800b148:	b293      	uxth	r3, r2
 800b14a:	fb06 e303 	mla	r3, r6, r3, lr
 800b14e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b152:	b29b      	uxth	r3, r3
 800b154:	ebaa 0303 	sub.w	r3, sl, r3
 800b158:	f8dc a000 	ldr.w	sl, [ip]
 800b15c:	0c12      	lsrs	r2, r2, #16
 800b15e:	fa13 f38a 	uxtah	r3, r3, sl
 800b162:	fb06 e202 	mla	r2, r6, r2, lr
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	9b00      	ldr	r3, [sp, #0]
 800b16a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b16e:	b292      	uxth	r2, r2
 800b170:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b178:	f8bd 3000 	ldrh.w	r3, [sp]
 800b17c:	4581      	cmp	r9, r0
 800b17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b182:	f84c 3b04 	str.w	r3, [ip], #4
 800b186:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b18a:	d2db      	bcs.n	800b144 <quorem+0x44>
 800b18c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b190:	b92b      	cbnz	r3, 800b19e <quorem+0x9e>
 800b192:	9b01      	ldr	r3, [sp, #4]
 800b194:	3b04      	subs	r3, #4
 800b196:	429d      	cmp	r5, r3
 800b198:	461a      	mov	r2, r3
 800b19a:	d32e      	bcc.n	800b1fa <quorem+0xfa>
 800b19c:	613c      	str	r4, [r7, #16]
 800b19e:	4638      	mov	r0, r7
 800b1a0:	f001 f8da 	bl	800c358 <__mcmp>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	db24      	blt.n	800b1f2 <quorem+0xf2>
 800b1a8:	3601      	adds	r6, #1
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	f04f 0c00 	mov.w	ip, #0
 800b1b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1b4:	f8d0 e000 	ldr.w	lr, [r0]
 800b1b8:	b293      	uxth	r3, r2
 800b1ba:	ebac 0303 	sub.w	r3, ip, r3
 800b1be:	0c12      	lsrs	r2, r2, #16
 800b1c0:	fa13 f38e 	uxtah	r3, r3, lr
 800b1c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b1c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1d2:	45c1      	cmp	r9, r8
 800b1d4:	f840 3b04 	str.w	r3, [r0], #4
 800b1d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1dc:	d2e8      	bcs.n	800b1b0 <quorem+0xb0>
 800b1de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1e6:	b922      	cbnz	r2, 800b1f2 <quorem+0xf2>
 800b1e8:	3b04      	subs	r3, #4
 800b1ea:	429d      	cmp	r5, r3
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	d30a      	bcc.n	800b206 <quorem+0x106>
 800b1f0:	613c      	str	r4, [r7, #16]
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	b003      	add	sp, #12
 800b1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fa:	6812      	ldr	r2, [r2, #0]
 800b1fc:	3b04      	subs	r3, #4
 800b1fe:	2a00      	cmp	r2, #0
 800b200:	d1cc      	bne.n	800b19c <quorem+0x9c>
 800b202:	3c01      	subs	r4, #1
 800b204:	e7c7      	b.n	800b196 <quorem+0x96>
 800b206:	6812      	ldr	r2, [r2, #0]
 800b208:	3b04      	subs	r3, #4
 800b20a:	2a00      	cmp	r2, #0
 800b20c:	d1f0      	bne.n	800b1f0 <quorem+0xf0>
 800b20e:	3c01      	subs	r4, #1
 800b210:	e7eb      	b.n	800b1ea <quorem+0xea>
 800b212:	2000      	movs	r0, #0
 800b214:	e7ee      	b.n	800b1f4 <quorem+0xf4>
	...

0800b218 <_dtoa_r>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	ed2d 8b04 	vpush	{d8-d9}
 800b220:	ec57 6b10 	vmov	r6, r7, d0
 800b224:	b093      	sub	sp, #76	; 0x4c
 800b226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b22c:	9106      	str	r1, [sp, #24]
 800b22e:	ee10 aa10 	vmov	sl, s0
 800b232:	4604      	mov	r4, r0
 800b234:	9209      	str	r2, [sp, #36]	; 0x24
 800b236:	930c      	str	r3, [sp, #48]	; 0x30
 800b238:	46bb      	mov	fp, r7
 800b23a:	b975      	cbnz	r5, 800b25a <_dtoa_r+0x42>
 800b23c:	2010      	movs	r0, #16
 800b23e:	f7ff f883 	bl	800a348 <malloc>
 800b242:	4602      	mov	r2, r0
 800b244:	6260      	str	r0, [r4, #36]	; 0x24
 800b246:	b920      	cbnz	r0, 800b252 <_dtoa_r+0x3a>
 800b248:	4ba7      	ldr	r3, [pc, #668]	; (800b4e8 <_dtoa_r+0x2d0>)
 800b24a:	21ea      	movs	r1, #234	; 0xea
 800b24c:	48a7      	ldr	r0, [pc, #668]	; (800b4ec <_dtoa_r+0x2d4>)
 800b24e:	f001 ff13 	bl	800d078 <__assert_func>
 800b252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b256:	6005      	str	r5, [r0, #0]
 800b258:	60c5      	str	r5, [r0, #12]
 800b25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b25c:	6819      	ldr	r1, [r3, #0]
 800b25e:	b151      	cbz	r1, 800b276 <_dtoa_r+0x5e>
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	604a      	str	r2, [r1, #4]
 800b264:	2301      	movs	r3, #1
 800b266:	4093      	lsls	r3, r2
 800b268:	608b      	str	r3, [r1, #8]
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 fe32 	bl	800bed4 <_Bfree>
 800b270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b272:	2200      	movs	r2, #0
 800b274:	601a      	str	r2, [r3, #0]
 800b276:	1e3b      	subs	r3, r7, #0
 800b278:	bfaa      	itet	ge
 800b27a:	2300      	movge	r3, #0
 800b27c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b280:	f8c8 3000 	strge.w	r3, [r8]
 800b284:	4b9a      	ldr	r3, [pc, #616]	; (800b4f0 <_dtoa_r+0x2d8>)
 800b286:	bfbc      	itt	lt
 800b288:	2201      	movlt	r2, #1
 800b28a:	f8c8 2000 	strlt.w	r2, [r8]
 800b28e:	ea33 030b 	bics.w	r3, r3, fp
 800b292:	d11b      	bne.n	800b2cc <_dtoa_r+0xb4>
 800b294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b296:	f242 730f 	movw	r3, #9999	; 0x270f
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2a0:	4333      	orrs	r3, r6
 800b2a2:	f000 8592 	beq.w	800bdca <_dtoa_r+0xbb2>
 800b2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2a8:	b963      	cbnz	r3, 800b2c4 <_dtoa_r+0xac>
 800b2aa:	4b92      	ldr	r3, [pc, #584]	; (800b4f4 <_dtoa_r+0x2dc>)
 800b2ac:	e022      	b.n	800b2f4 <_dtoa_r+0xdc>
 800b2ae:	4b92      	ldr	r3, [pc, #584]	; (800b4f8 <_dtoa_r+0x2e0>)
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	9801      	ldr	r0, [sp, #4]
 800b2ba:	b013      	add	sp, #76	; 0x4c
 800b2bc:	ecbd 8b04 	vpop	{d8-d9}
 800b2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c4:	4b8b      	ldr	r3, [pc, #556]	; (800b4f4 <_dtoa_r+0x2dc>)
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	3303      	adds	r3, #3
 800b2ca:	e7f3      	b.n	800b2b4 <_dtoa_r+0x9c>
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	4659      	mov	r1, fp
 800b2d4:	f7f5 fc10 	bl	8000af8 <__aeabi_dcmpeq>
 800b2d8:	ec4b ab19 	vmov	d9, sl, fp
 800b2dc:	4680      	mov	r8, r0
 800b2de:	b158      	cbz	r0, 800b2f8 <_dtoa_r+0xe0>
 800b2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	6013      	str	r3, [r2, #0]
 800b2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 856b 	beq.w	800bdc4 <_dtoa_r+0xbac>
 800b2ee:	4883      	ldr	r0, [pc, #524]	; (800b4fc <_dtoa_r+0x2e4>)
 800b2f0:	6018      	str	r0, [r3, #0]
 800b2f2:	1e43      	subs	r3, r0, #1
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	e7df      	b.n	800b2b8 <_dtoa_r+0xa0>
 800b2f8:	ec4b ab10 	vmov	d0, sl, fp
 800b2fc:	aa10      	add	r2, sp, #64	; 0x40
 800b2fe:	a911      	add	r1, sp, #68	; 0x44
 800b300:	4620      	mov	r0, r4
 800b302:	f001 f8cf 	bl	800c4a4 <__d2b>
 800b306:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b30a:	ee08 0a10 	vmov	s16, r0
 800b30e:	2d00      	cmp	r5, #0
 800b310:	f000 8084 	beq.w	800b41c <_dtoa_r+0x204>
 800b314:	ee19 3a90 	vmov	r3, s19
 800b318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b31c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b320:	4656      	mov	r6, sl
 800b322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b32a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b32e:	4b74      	ldr	r3, [pc, #464]	; (800b500 <_dtoa_r+0x2e8>)
 800b330:	2200      	movs	r2, #0
 800b332:	4630      	mov	r0, r6
 800b334:	4639      	mov	r1, r7
 800b336:	f7f4 ffbf 	bl	80002b8 <__aeabi_dsub>
 800b33a:	a365      	add	r3, pc, #404	; (adr r3, 800b4d0 <_dtoa_r+0x2b8>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f7f5 f972 	bl	8000628 <__aeabi_dmul>
 800b344:	a364      	add	r3, pc, #400	; (adr r3, 800b4d8 <_dtoa_r+0x2c0>)
 800b346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34a:	f7f4 ffb7 	bl	80002bc <__adddf3>
 800b34e:	4606      	mov	r6, r0
 800b350:	4628      	mov	r0, r5
 800b352:	460f      	mov	r7, r1
 800b354:	f7f5 f8fe 	bl	8000554 <__aeabi_i2d>
 800b358:	a361      	add	r3, pc, #388	; (adr r3, 800b4e0 <_dtoa_r+0x2c8>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f5 f963 	bl	8000628 <__aeabi_dmul>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4630      	mov	r0, r6
 800b368:	4639      	mov	r1, r7
 800b36a:	f7f4 ffa7 	bl	80002bc <__adddf3>
 800b36e:	4606      	mov	r6, r0
 800b370:	460f      	mov	r7, r1
 800b372:	f7f5 fc09 	bl	8000b88 <__aeabi_d2iz>
 800b376:	2200      	movs	r2, #0
 800b378:	9000      	str	r0, [sp, #0]
 800b37a:	2300      	movs	r3, #0
 800b37c:	4630      	mov	r0, r6
 800b37e:	4639      	mov	r1, r7
 800b380:	f7f5 fbc4 	bl	8000b0c <__aeabi_dcmplt>
 800b384:	b150      	cbz	r0, 800b39c <_dtoa_r+0x184>
 800b386:	9800      	ldr	r0, [sp, #0]
 800b388:	f7f5 f8e4 	bl	8000554 <__aeabi_i2d>
 800b38c:	4632      	mov	r2, r6
 800b38e:	463b      	mov	r3, r7
 800b390:	f7f5 fbb2 	bl	8000af8 <__aeabi_dcmpeq>
 800b394:	b910      	cbnz	r0, 800b39c <_dtoa_r+0x184>
 800b396:	9b00      	ldr	r3, [sp, #0]
 800b398:	3b01      	subs	r3, #1
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	2b16      	cmp	r3, #22
 800b3a0:	d85a      	bhi.n	800b458 <_dtoa_r+0x240>
 800b3a2:	9a00      	ldr	r2, [sp, #0]
 800b3a4:	4b57      	ldr	r3, [pc, #348]	; (800b504 <_dtoa_r+0x2ec>)
 800b3a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	ec51 0b19 	vmov	r0, r1, d9
 800b3b2:	f7f5 fbab 	bl	8000b0c <__aeabi_dcmplt>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d050      	beq.n	800b45c <_dtoa_r+0x244>
 800b3ba:	9b00      	ldr	r3, [sp, #0]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3c6:	1b5d      	subs	r5, r3, r5
 800b3c8:	1e6b      	subs	r3, r5, #1
 800b3ca:	9305      	str	r3, [sp, #20]
 800b3cc:	bf45      	ittet	mi
 800b3ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800b3d2:	9304      	strmi	r3, [sp, #16]
 800b3d4:	2300      	movpl	r3, #0
 800b3d6:	2300      	movmi	r3, #0
 800b3d8:	bf4c      	ite	mi
 800b3da:	9305      	strmi	r3, [sp, #20]
 800b3dc:	9304      	strpl	r3, [sp, #16]
 800b3de:	9b00      	ldr	r3, [sp, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	db3d      	blt.n	800b460 <_dtoa_r+0x248>
 800b3e4:	9b05      	ldr	r3, [sp, #20]
 800b3e6:	9a00      	ldr	r2, [sp, #0]
 800b3e8:	920a      	str	r2, [sp, #40]	; 0x28
 800b3ea:	4413      	add	r3, r2
 800b3ec:	9305      	str	r3, [sp, #20]
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9307      	str	r3, [sp, #28]
 800b3f2:	9b06      	ldr	r3, [sp, #24]
 800b3f4:	2b09      	cmp	r3, #9
 800b3f6:	f200 8089 	bhi.w	800b50c <_dtoa_r+0x2f4>
 800b3fa:	2b05      	cmp	r3, #5
 800b3fc:	bfc4      	itt	gt
 800b3fe:	3b04      	subgt	r3, #4
 800b400:	9306      	strgt	r3, [sp, #24]
 800b402:	9b06      	ldr	r3, [sp, #24]
 800b404:	f1a3 0302 	sub.w	r3, r3, #2
 800b408:	bfcc      	ite	gt
 800b40a:	2500      	movgt	r5, #0
 800b40c:	2501      	movle	r5, #1
 800b40e:	2b03      	cmp	r3, #3
 800b410:	f200 8087 	bhi.w	800b522 <_dtoa_r+0x30a>
 800b414:	e8df f003 	tbb	[pc, r3]
 800b418:	59383a2d 	.word	0x59383a2d
 800b41c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b420:	441d      	add	r5, r3
 800b422:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b426:	2b20      	cmp	r3, #32
 800b428:	bfc1      	itttt	gt
 800b42a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b42e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b432:	fa0b f303 	lslgt.w	r3, fp, r3
 800b436:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b43a:	bfda      	itte	le
 800b43c:	f1c3 0320 	rsble	r3, r3, #32
 800b440:	fa06 f003 	lslle.w	r0, r6, r3
 800b444:	4318      	orrgt	r0, r3
 800b446:	f7f5 f875 	bl	8000534 <__aeabi_ui2d>
 800b44a:	2301      	movs	r3, #1
 800b44c:	4606      	mov	r6, r0
 800b44e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b452:	3d01      	subs	r5, #1
 800b454:	930e      	str	r3, [sp, #56]	; 0x38
 800b456:	e76a      	b.n	800b32e <_dtoa_r+0x116>
 800b458:	2301      	movs	r3, #1
 800b45a:	e7b2      	b.n	800b3c2 <_dtoa_r+0x1aa>
 800b45c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b45e:	e7b1      	b.n	800b3c4 <_dtoa_r+0x1ac>
 800b460:	9b04      	ldr	r3, [sp, #16]
 800b462:	9a00      	ldr	r2, [sp, #0]
 800b464:	1a9b      	subs	r3, r3, r2
 800b466:	9304      	str	r3, [sp, #16]
 800b468:	4253      	negs	r3, r2
 800b46a:	9307      	str	r3, [sp, #28]
 800b46c:	2300      	movs	r3, #0
 800b46e:	930a      	str	r3, [sp, #40]	; 0x28
 800b470:	e7bf      	b.n	800b3f2 <_dtoa_r+0x1da>
 800b472:	2300      	movs	r3, #0
 800b474:	9308      	str	r3, [sp, #32]
 800b476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dc55      	bgt.n	800b528 <_dtoa_r+0x310>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b482:	461a      	mov	r2, r3
 800b484:	9209      	str	r2, [sp, #36]	; 0x24
 800b486:	e00c      	b.n	800b4a2 <_dtoa_r+0x28a>
 800b488:	2301      	movs	r3, #1
 800b48a:	e7f3      	b.n	800b474 <_dtoa_r+0x25c>
 800b48c:	2300      	movs	r3, #0
 800b48e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b490:	9308      	str	r3, [sp, #32]
 800b492:	9b00      	ldr	r3, [sp, #0]
 800b494:	4413      	add	r3, r2
 800b496:	9302      	str	r3, [sp, #8]
 800b498:	3301      	adds	r3, #1
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	9303      	str	r3, [sp, #12]
 800b49e:	bfb8      	it	lt
 800b4a0:	2301      	movlt	r3, #1
 800b4a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	6042      	str	r2, [r0, #4]
 800b4a8:	2204      	movs	r2, #4
 800b4aa:	f102 0614 	add.w	r6, r2, #20
 800b4ae:	429e      	cmp	r6, r3
 800b4b0:	6841      	ldr	r1, [r0, #4]
 800b4b2:	d93d      	bls.n	800b530 <_dtoa_r+0x318>
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fccd 	bl	800be54 <_Balloc>
 800b4ba:	9001      	str	r0, [sp, #4]
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d13b      	bne.n	800b538 <_dtoa_r+0x320>
 800b4c0:	4b11      	ldr	r3, [pc, #68]	; (800b508 <_dtoa_r+0x2f0>)
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b4c8:	e6c0      	b.n	800b24c <_dtoa_r+0x34>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e7df      	b.n	800b48e <_dtoa_r+0x276>
 800b4ce:	bf00      	nop
 800b4d0:	636f4361 	.word	0x636f4361
 800b4d4:	3fd287a7 	.word	0x3fd287a7
 800b4d8:	8b60c8b3 	.word	0x8b60c8b3
 800b4dc:	3fc68a28 	.word	0x3fc68a28
 800b4e0:	509f79fb 	.word	0x509f79fb
 800b4e4:	3fd34413 	.word	0x3fd34413
 800b4e8:	0800ef00 	.word	0x0800ef00
 800b4ec:	0800ef17 	.word	0x0800ef17
 800b4f0:	7ff00000 	.word	0x7ff00000
 800b4f4:	0800eefc 	.word	0x0800eefc
 800b4f8:	0800eef3 	.word	0x0800eef3
 800b4fc:	0800f0f2 	.word	0x0800f0f2
 800b500:	3ff80000 	.word	0x3ff80000
 800b504:	0800f008 	.word	0x0800f008
 800b508:	0800ef72 	.word	0x0800ef72
 800b50c:	2501      	movs	r5, #1
 800b50e:	2300      	movs	r3, #0
 800b510:	9306      	str	r3, [sp, #24]
 800b512:	9508      	str	r5, [sp, #32]
 800b514:	f04f 33ff 	mov.w	r3, #4294967295
 800b518:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b51c:	2200      	movs	r2, #0
 800b51e:	2312      	movs	r3, #18
 800b520:	e7b0      	b.n	800b484 <_dtoa_r+0x26c>
 800b522:	2301      	movs	r3, #1
 800b524:	9308      	str	r3, [sp, #32]
 800b526:	e7f5      	b.n	800b514 <_dtoa_r+0x2fc>
 800b528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b52e:	e7b8      	b.n	800b4a2 <_dtoa_r+0x28a>
 800b530:	3101      	adds	r1, #1
 800b532:	6041      	str	r1, [r0, #4]
 800b534:	0052      	lsls	r2, r2, #1
 800b536:	e7b8      	b.n	800b4aa <_dtoa_r+0x292>
 800b538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b53a:	9a01      	ldr	r2, [sp, #4]
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	2b0e      	cmp	r3, #14
 800b542:	f200 809d 	bhi.w	800b680 <_dtoa_r+0x468>
 800b546:	2d00      	cmp	r5, #0
 800b548:	f000 809a 	beq.w	800b680 <_dtoa_r+0x468>
 800b54c:	9b00      	ldr	r3, [sp, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	dd32      	ble.n	800b5b8 <_dtoa_r+0x3a0>
 800b552:	4ab7      	ldr	r2, [pc, #732]	; (800b830 <_dtoa_r+0x618>)
 800b554:	f003 030f 	and.w	r3, r3, #15
 800b558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b55c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b560:	9b00      	ldr	r3, [sp, #0]
 800b562:	05d8      	lsls	r0, r3, #23
 800b564:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b568:	d516      	bpl.n	800b598 <_dtoa_r+0x380>
 800b56a:	4bb2      	ldr	r3, [pc, #712]	; (800b834 <_dtoa_r+0x61c>)
 800b56c:	ec51 0b19 	vmov	r0, r1, d9
 800b570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b574:	f7f5 f982 	bl	800087c <__aeabi_ddiv>
 800b578:	f007 070f 	and.w	r7, r7, #15
 800b57c:	4682      	mov	sl, r0
 800b57e:	468b      	mov	fp, r1
 800b580:	2503      	movs	r5, #3
 800b582:	4eac      	ldr	r6, [pc, #688]	; (800b834 <_dtoa_r+0x61c>)
 800b584:	b957      	cbnz	r7, 800b59c <_dtoa_r+0x384>
 800b586:	4642      	mov	r2, r8
 800b588:	464b      	mov	r3, r9
 800b58a:	4650      	mov	r0, sl
 800b58c:	4659      	mov	r1, fp
 800b58e:	f7f5 f975 	bl	800087c <__aeabi_ddiv>
 800b592:	4682      	mov	sl, r0
 800b594:	468b      	mov	fp, r1
 800b596:	e028      	b.n	800b5ea <_dtoa_r+0x3d2>
 800b598:	2502      	movs	r5, #2
 800b59a:	e7f2      	b.n	800b582 <_dtoa_r+0x36a>
 800b59c:	07f9      	lsls	r1, r7, #31
 800b59e:	d508      	bpl.n	800b5b2 <_dtoa_r+0x39a>
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5a8:	f7f5 f83e 	bl	8000628 <__aeabi_dmul>
 800b5ac:	3501      	adds	r5, #1
 800b5ae:	4680      	mov	r8, r0
 800b5b0:	4689      	mov	r9, r1
 800b5b2:	107f      	asrs	r7, r7, #1
 800b5b4:	3608      	adds	r6, #8
 800b5b6:	e7e5      	b.n	800b584 <_dtoa_r+0x36c>
 800b5b8:	f000 809b 	beq.w	800b6f2 <_dtoa_r+0x4da>
 800b5bc:	9b00      	ldr	r3, [sp, #0]
 800b5be:	4f9d      	ldr	r7, [pc, #628]	; (800b834 <_dtoa_r+0x61c>)
 800b5c0:	425e      	negs	r6, r3
 800b5c2:	4b9b      	ldr	r3, [pc, #620]	; (800b830 <_dtoa_r+0x618>)
 800b5c4:	f006 020f 	and.w	r2, r6, #15
 800b5c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	ec51 0b19 	vmov	r0, r1, d9
 800b5d4:	f7f5 f828 	bl	8000628 <__aeabi_dmul>
 800b5d8:	1136      	asrs	r6, r6, #4
 800b5da:	4682      	mov	sl, r0
 800b5dc:	468b      	mov	fp, r1
 800b5de:	2300      	movs	r3, #0
 800b5e0:	2502      	movs	r5, #2
 800b5e2:	2e00      	cmp	r6, #0
 800b5e4:	d17a      	bne.n	800b6dc <_dtoa_r+0x4c4>
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1d3      	bne.n	800b592 <_dtoa_r+0x37a>
 800b5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 8082 	beq.w	800b6f6 <_dtoa_r+0x4de>
 800b5f2:	4b91      	ldr	r3, [pc, #580]	; (800b838 <_dtoa_r+0x620>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	4650      	mov	r0, sl
 800b5f8:	4659      	mov	r1, fp
 800b5fa:	f7f5 fa87 	bl	8000b0c <__aeabi_dcmplt>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d079      	beq.n	800b6f6 <_dtoa_r+0x4de>
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d076      	beq.n	800b6f6 <_dtoa_r+0x4de>
 800b608:	9b02      	ldr	r3, [sp, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	dd36      	ble.n	800b67c <_dtoa_r+0x464>
 800b60e:	9b00      	ldr	r3, [sp, #0]
 800b610:	4650      	mov	r0, sl
 800b612:	4659      	mov	r1, fp
 800b614:	1e5f      	subs	r7, r3, #1
 800b616:	2200      	movs	r2, #0
 800b618:	4b88      	ldr	r3, [pc, #544]	; (800b83c <_dtoa_r+0x624>)
 800b61a:	f7f5 f805 	bl	8000628 <__aeabi_dmul>
 800b61e:	9e02      	ldr	r6, [sp, #8]
 800b620:	4682      	mov	sl, r0
 800b622:	468b      	mov	fp, r1
 800b624:	3501      	adds	r5, #1
 800b626:	4628      	mov	r0, r5
 800b628:	f7f4 ff94 	bl	8000554 <__aeabi_i2d>
 800b62c:	4652      	mov	r2, sl
 800b62e:	465b      	mov	r3, fp
 800b630:	f7f4 fffa 	bl	8000628 <__aeabi_dmul>
 800b634:	4b82      	ldr	r3, [pc, #520]	; (800b840 <_dtoa_r+0x628>)
 800b636:	2200      	movs	r2, #0
 800b638:	f7f4 fe40 	bl	80002bc <__adddf3>
 800b63c:	46d0      	mov	r8, sl
 800b63e:	46d9      	mov	r9, fp
 800b640:	4682      	mov	sl, r0
 800b642:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b646:	2e00      	cmp	r6, #0
 800b648:	d158      	bne.n	800b6fc <_dtoa_r+0x4e4>
 800b64a:	4b7e      	ldr	r3, [pc, #504]	; (800b844 <_dtoa_r+0x62c>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	4640      	mov	r0, r8
 800b650:	4649      	mov	r1, r9
 800b652:	f7f4 fe31 	bl	80002b8 <__aeabi_dsub>
 800b656:	4652      	mov	r2, sl
 800b658:	465b      	mov	r3, fp
 800b65a:	4680      	mov	r8, r0
 800b65c:	4689      	mov	r9, r1
 800b65e:	f7f5 fa73 	bl	8000b48 <__aeabi_dcmpgt>
 800b662:	2800      	cmp	r0, #0
 800b664:	f040 8295 	bne.w	800bb92 <_dtoa_r+0x97a>
 800b668:	4652      	mov	r2, sl
 800b66a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b66e:	4640      	mov	r0, r8
 800b670:	4649      	mov	r1, r9
 800b672:	f7f5 fa4b 	bl	8000b0c <__aeabi_dcmplt>
 800b676:	2800      	cmp	r0, #0
 800b678:	f040 8289 	bne.w	800bb8e <_dtoa_r+0x976>
 800b67c:	ec5b ab19 	vmov	sl, fp, d9
 800b680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b682:	2b00      	cmp	r3, #0
 800b684:	f2c0 8148 	blt.w	800b918 <_dtoa_r+0x700>
 800b688:	9a00      	ldr	r2, [sp, #0]
 800b68a:	2a0e      	cmp	r2, #14
 800b68c:	f300 8144 	bgt.w	800b918 <_dtoa_r+0x700>
 800b690:	4b67      	ldr	r3, [pc, #412]	; (800b830 <_dtoa_r+0x618>)
 800b692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f280 80d5 	bge.w	800b84c <_dtoa_r+0x634>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f300 80d1 	bgt.w	800b84c <_dtoa_r+0x634>
 800b6aa:	f040 826f 	bne.w	800bb8c <_dtoa_r+0x974>
 800b6ae:	4b65      	ldr	r3, [pc, #404]	; (800b844 <_dtoa_r+0x62c>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	f7f4 ffb7 	bl	8000628 <__aeabi_dmul>
 800b6ba:	4652      	mov	r2, sl
 800b6bc:	465b      	mov	r3, fp
 800b6be:	f7f5 fa39 	bl	8000b34 <__aeabi_dcmpge>
 800b6c2:	9e03      	ldr	r6, [sp, #12]
 800b6c4:	4637      	mov	r7, r6
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	f040 8245 	bne.w	800bb56 <_dtoa_r+0x93e>
 800b6cc:	9d01      	ldr	r5, [sp, #4]
 800b6ce:	2331      	movs	r3, #49	; 0x31
 800b6d0:	f805 3b01 	strb.w	r3, [r5], #1
 800b6d4:	9b00      	ldr	r3, [sp, #0]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	e240      	b.n	800bb5e <_dtoa_r+0x946>
 800b6dc:	07f2      	lsls	r2, r6, #31
 800b6de:	d505      	bpl.n	800b6ec <_dtoa_r+0x4d4>
 800b6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e4:	f7f4 ffa0 	bl	8000628 <__aeabi_dmul>
 800b6e8:	3501      	adds	r5, #1
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	1076      	asrs	r6, r6, #1
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	e777      	b.n	800b5e2 <_dtoa_r+0x3ca>
 800b6f2:	2502      	movs	r5, #2
 800b6f4:	e779      	b.n	800b5ea <_dtoa_r+0x3d2>
 800b6f6:	9f00      	ldr	r7, [sp, #0]
 800b6f8:	9e03      	ldr	r6, [sp, #12]
 800b6fa:	e794      	b.n	800b626 <_dtoa_r+0x40e>
 800b6fc:	9901      	ldr	r1, [sp, #4]
 800b6fe:	4b4c      	ldr	r3, [pc, #304]	; (800b830 <_dtoa_r+0x618>)
 800b700:	4431      	add	r1, r6
 800b702:	910d      	str	r1, [sp, #52]	; 0x34
 800b704:	9908      	ldr	r1, [sp, #32]
 800b706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b70a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b70e:	2900      	cmp	r1, #0
 800b710:	d043      	beq.n	800b79a <_dtoa_r+0x582>
 800b712:	494d      	ldr	r1, [pc, #308]	; (800b848 <_dtoa_r+0x630>)
 800b714:	2000      	movs	r0, #0
 800b716:	f7f5 f8b1 	bl	800087c <__aeabi_ddiv>
 800b71a:	4652      	mov	r2, sl
 800b71c:	465b      	mov	r3, fp
 800b71e:	f7f4 fdcb 	bl	80002b8 <__aeabi_dsub>
 800b722:	9d01      	ldr	r5, [sp, #4]
 800b724:	4682      	mov	sl, r0
 800b726:	468b      	mov	fp, r1
 800b728:	4649      	mov	r1, r9
 800b72a:	4640      	mov	r0, r8
 800b72c:	f7f5 fa2c 	bl	8000b88 <__aeabi_d2iz>
 800b730:	4606      	mov	r6, r0
 800b732:	f7f4 ff0f 	bl	8000554 <__aeabi_i2d>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	4640      	mov	r0, r8
 800b73c:	4649      	mov	r1, r9
 800b73e:	f7f4 fdbb 	bl	80002b8 <__aeabi_dsub>
 800b742:	3630      	adds	r6, #48	; 0x30
 800b744:	f805 6b01 	strb.w	r6, [r5], #1
 800b748:	4652      	mov	r2, sl
 800b74a:	465b      	mov	r3, fp
 800b74c:	4680      	mov	r8, r0
 800b74e:	4689      	mov	r9, r1
 800b750:	f7f5 f9dc 	bl	8000b0c <__aeabi_dcmplt>
 800b754:	2800      	cmp	r0, #0
 800b756:	d163      	bne.n	800b820 <_dtoa_r+0x608>
 800b758:	4642      	mov	r2, r8
 800b75a:	464b      	mov	r3, r9
 800b75c:	4936      	ldr	r1, [pc, #216]	; (800b838 <_dtoa_r+0x620>)
 800b75e:	2000      	movs	r0, #0
 800b760:	f7f4 fdaa 	bl	80002b8 <__aeabi_dsub>
 800b764:	4652      	mov	r2, sl
 800b766:	465b      	mov	r3, fp
 800b768:	f7f5 f9d0 	bl	8000b0c <__aeabi_dcmplt>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	f040 80b5 	bne.w	800b8dc <_dtoa_r+0x6c4>
 800b772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b774:	429d      	cmp	r5, r3
 800b776:	d081      	beq.n	800b67c <_dtoa_r+0x464>
 800b778:	4b30      	ldr	r3, [pc, #192]	; (800b83c <_dtoa_r+0x624>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	4650      	mov	r0, sl
 800b77e:	4659      	mov	r1, fp
 800b780:	f7f4 ff52 	bl	8000628 <__aeabi_dmul>
 800b784:	4b2d      	ldr	r3, [pc, #180]	; (800b83c <_dtoa_r+0x624>)
 800b786:	4682      	mov	sl, r0
 800b788:	468b      	mov	fp, r1
 800b78a:	4640      	mov	r0, r8
 800b78c:	4649      	mov	r1, r9
 800b78e:	2200      	movs	r2, #0
 800b790:	f7f4 ff4a 	bl	8000628 <__aeabi_dmul>
 800b794:	4680      	mov	r8, r0
 800b796:	4689      	mov	r9, r1
 800b798:	e7c6      	b.n	800b728 <_dtoa_r+0x510>
 800b79a:	4650      	mov	r0, sl
 800b79c:	4659      	mov	r1, fp
 800b79e:	f7f4 ff43 	bl	8000628 <__aeabi_dmul>
 800b7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7a4:	9d01      	ldr	r5, [sp, #4]
 800b7a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7a8:	4682      	mov	sl, r0
 800b7aa:	468b      	mov	fp, r1
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	f7f5 f9ea 	bl	8000b88 <__aeabi_d2iz>
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	f7f4 fecd 	bl	8000554 <__aeabi_i2d>
 800b7ba:	3630      	adds	r6, #48	; 0x30
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	f7f4 fd78 	bl	80002b8 <__aeabi_dsub>
 800b7c8:	f805 6b01 	strb.w	r6, [r5], #1
 800b7cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ce:	429d      	cmp	r5, r3
 800b7d0:	4680      	mov	r8, r0
 800b7d2:	4689      	mov	r9, r1
 800b7d4:	f04f 0200 	mov.w	r2, #0
 800b7d8:	d124      	bne.n	800b824 <_dtoa_r+0x60c>
 800b7da:	4b1b      	ldr	r3, [pc, #108]	; (800b848 <_dtoa_r+0x630>)
 800b7dc:	4650      	mov	r0, sl
 800b7de:	4659      	mov	r1, fp
 800b7e0:	f7f4 fd6c 	bl	80002bc <__adddf3>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	f7f5 f9ac 	bl	8000b48 <__aeabi_dcmpgt>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d173      	bne.n	800b8dc <_dtoa_r+0x6c4>
 800b7f4:	4652      	mov	r2, sl
 800b7f6:	465b      	mov	r3, fp
 800b7f8:	4913      	ldr	r1, [pc, #76]	; (800b848 <_dtoa_r+0x630>)
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	f7f4 fd5c 	bl	80002b8 <__aeabi_dsub>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4640      	mov	r0, r8
 800b806:	4649      	mov	r1, r9
 800b808:	f7f5 f980 	bl	8000b0c <__aeabi_dcmplt>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	f43f af35 	beq.w	800b67c <_dtoa_r+0x464>
 800b812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b814:	1e6b      	subs	r3, r5, #1
 800b816:	930f      	str	r3, [sp, #60]	; 0x3c
 800b818:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b81c:	2b30      	cmp	r3, #48	; 0x30
 800b81e:	d0f8      	beq.n	800b812 <_dtoa_r+0x5fa>
 800b820:	9700      	str	r7, [sp, #0]
 800b822:	e049      	b.n	800b8b8 <_dtoa_r+0x6a0>
 800b824:	4b05      	ldr	r3, [pc, #20]	; (800b83c <_dtoa_r+0x624>)
 800b826:	f7f4 feff 	bl	8000628 <__aeabi_dmul>
 800b82a:	4680      	mov	r8, r0
 800b82c:	4689      	mov	r9, r1
 800b82e:	e7bd      	b.n	800b7ac <_dtoa_r+0x594>
 800b830:	0800f008 	.word	0x0800f008
 800b834:	0800efe0 	.word	0x0800efe0
 800b838:	3ff00000 	.word	0x3ff00000
 800b83c:	40240000 	.word	0x40240000
 800b840:	401c0000 	.word	0x401c0000
 800b844:	40140000 	.word	0x40140000
 800b848:	3fe00000 	.word	0x3fe00000
 800b84c:	9d01      	ldr	r5, [sp, #4]
 800b84e:	4656      	mov	r6, sl
 800b850:	465f      	mov	r7, fp
 800b852:	4642      	mov	r2, r8
 800b854:	464b      	mov	r3, r9
 800b856:	4630      	mov	r0, r6
 800b858:	4639      	mov	r1, r7
 800b85a:	f7f5 f80f 	bl	800087c <__aeabi_ddiv>
 800b85e:	f7f5 f993 	bl	8000b88 <__aeabi_d2iz>
 800b862:	4682      	mov	sl, r0
 800b864:	f7f4 fe76 	bl	8000554 <__aeabi_i2d>
 800b868:	4642      	mov	r2, r8
 800b86a:	464b      	mov	r3, r9
 800b86c:	f7f4 fedc 	bl	8000628 <__aeabi_dmul>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4630      	mov	r0, r6
 800b876:	4639      	mov	r1, r7
 800b878:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b87c:	f7f4 fd1c 	bl	80002b8 <__aeabi_dsub>
 800b880:	f805 6b01 	strb.w	r6, [r5], #1
 800b884:	9e01      	ldr	r6, [sp, #4]
 800b886:	9f03      	ldr	r7, [sp, #12]
 800b888:	1bae      	subs	r6, r5, r6
 800b88a:	42b7      	cmp	r7, r6
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	d135      	bne.n	800b8fe <_dtoa_r+0x6e6>
 800b892:	f7f4 fd13 	bl	80002bc <__adddf3>
 800b896:	4642      	mov	r2, r8
 800b898:	464b      	mov	r3, r9
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	f7f5 f953 	bl	8000b48 <__aeabi_dcmpgt>
 800b8a2:	b9d0      	cbnz	r0, 800b8da <_dtoa_r+0x6c2>
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f5 f924 	bl	8000af8 <__aeabi_dcmpeq>
 800b8b0:	b110      	cbz	r0, 800b8b8 <_dtoa_r+0x6a0>
 800b8b2:	f01a 0f01 	tst.w	sl, #1
 800b8b6:	d110      	bne.n	800b8da <_dtoa_r+0x6c2>
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	ee18 1a10 	vmov	r1, s16
 800b8be:	f000 fb09 	bl	800bed4 <_Bfree>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9800      	ldr	r0, [sp, #0]
 800b8c6:	702b      	strb	r3, [r5, #0]
 800b8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8ca:	3001      	adds	r0, #1
 800b8cc:	6018      	str	r0, [r3, #0]
 800b8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f43f acf1 	beq.w	800b2b8 <_dtoa_r+0xa0>
 800b8d6:	601d      	str	r5, [r3, #0]
 800b8d8:	e4ee      	b.n	800b2b8 <_dtoa_r+0xa0>
 800b8da:	9f00      	ldr	r7, [sp, #0]
 800b8dc:	462b      	mov	r3, r5
 800b8de:	461d      	mov	r5, r3
 800b8e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8e4:	2a39      	cmp	r2, #57	; 0x39
 800b8e6:	d106      	bne.n	800b8f6 <_dtoa_r+0x6de>
 800b8e8:	9a01      	ldr	r2, [sp, #4]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d1f7      	bne.n	800b8de <_dtoa_r+0x6c6>
 800b8ee:	9901      	ldr	r1, [sp, #4]
 800b8f0:	2230      	movs	r2, #48	; 0x30
 800b8f2:	3701      	adds	r7, #1
 800b8f4:	700a      	strb	r2, [r1, #0]
 800b8f6:	781a      	ldrb	r2, [r3, #0]
 800b8f8:	3201      	adds	r2, #1
 800b8fa:	701a      	strb	r2, [r3, #0]
 800b8fc:	e790      	b.n	800b820 <_dtoa_r+0x608>
 800b8fe:	4ba6      	ldr	r3, [pc, #664]	; (800bb98 <_dtoa_r+0x980>)
 800b900:	2200      	movs	r2, #0
 800b902:	f7f4 fe91 	bl	8000628 <__aeabi_dmul>
 800b906:	2200      	movs	r2, #0
 800b908:	2300      	movs	r3, #0
 800b90a:	4606      	mov	r6, r0
 800b90c:	460f      	mov	r7, r1
 800b90e:	f7f5 f8f3 	bl	8000af8 <__aeabi_dcmpeq>
 800b912:	2800      	cmp	r0, #0
 800b914:	d09d      	beq.n	800b852 <_dtoa_r+0x63a>
 800b916:	e7cf      	b.n	800b8b8 <_dtoa_r+0x6a0>
 800b918:	9a08      	ldr	r2, [sp, #32]
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	f000 80d7 	beq.w	800bace <_dtoa_r+0x8b6>
 800b920:	9a06      	ldr	r2, [sp, #24]
 800b922:	2a01      	cmp	r2, #1
 800b924:	f300 80ba 	bgt.w	800ba9c <_dtoa_r+0x884>
 800b928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b92a:	2a00      	cmp	r2, #0
 800b92c:	f000 80b2 	beq.w	800ba94 <_dtoa_r+0x87c>
 800b930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b934:	9e07      	ldr	r6, [sp, #28]
 800b936:	9d04      	ldr	r5, [sp, #16]
 800b938:	9a04      	ldr	r2, [sp, #16]
 800b93a:	441a      	add	r2, r3
 800b93c:	9204      	str	r2, [sp, #16]
 800b93e:	9a05      	ldr	r2, [sp, #20]
 800b940:	2101      	movs	r1, #1
 800b942:	441a      	add	r2, r3
 800b944:	4620      	mov	r0, r4
 800b946:	9205      	str	r2, [sp, #20]
 800b948:	f000 fb7c 	bl	800c044 <__i2b>
 800b94c:	4607      	mov	r7, r0
 800b94e:	2d00      	cmp	r5, #0
 800b950:	dd0c      	ble.n	800b96c <_dtoa_r+0x754>
 800b952:	9b05      	ldr	r3, [sp, #20]
 800b954:	2b00      	cmp	r3, #0
 800b956:	dd09      	ble.n	800b96c <_dtoa_r+0x754>
 800b958:	42ab      	cmp	r3, r5
 800b95a:	9a04      	ldr	r2, [sp, #16]
 800b95c:	bfa8      	it	ge
 800b95e:	462b      	movge	r3, r5
 800b960:	1ad2      	subs	r2, r2, r3
 800b962:	9204      	str	r2, [sp, #16]
 800b964:	9a05      	ldr	r2, [sp, #20]
 800b966:	1aed      	subs	r5, r5, r3
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	9305      	str	r3, [sp, #20]
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	b31b      	cbz	r3, 800b9b8 <_dtoa_r+0x7a0>
 800b970:	9b08      	ldr	r3, [sp, #32]
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 80af 	beq.w	800bad6 <_dtoa_r+0x8be>
 800b978:	2e00      	cmp	r6, #0
 800b97a:	dd13      	ble.n	800b9a4 <_dtoa_r+0x78c>
 800b97c:	4639      	mov	r1, r7
 800b97e:	4632      	mov	r2, r6
 800b980:	4620      	mov	r0, r4
 800b982:	f000 fc1f 	bl	800c1c4 <__pow5mult>
 800b986:	ee18 2a10 	vmov	r2, s16
 800b98a:	4601      	mov	r1, r0
 800b98c:	4607      	mov	r7, r0
 800b98e:	4620      	mov	r0, r4
 800b990:	f000 fb6e 	bl	800c070 <__multiply>
 800b994:	ee18 1a10 	vmov	r1, s16
 800b998:	4680      	mov	r8, r0
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 fa9a 	bl	800bed4 <_Bfree>
 800b9a0:	ee08 8a10 	vmov	s16, r8
 800b9a4:	9b07      	ldr	r3, [sp, #28]
 800b9a6:	1b9a      	subs	r2, r3, r6
 800b9a8:	d006      	beq.n	800b9b8 <_dtoa_r+0x7a0>
 800b9aa:	ee18 1a10 	vmov	r1, s16
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f000 fc08 	bl	800c1c4 <__pow5mult>
 800b9b4:	ee08 0a10 	vmov	s16, r0
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 fb42 	bl	800c044 <__i2b>
 800b9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	f340 8088 	ble.w	800bada <_dtoa_r+0x8c2>
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4601      	mov	r1, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fbf8 	bl	800c1c4 <__pow5mult>
 800b9d4:	9b06      	ldr	r3, [sp, #24]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	4606      	mov	r6, r0
 800b9da:	f340 8081 	ble.w	800bae0 <_dtoa_r+0x8c8>
 800b9de:	f04f 0800 	mov.w	r8, #0
 800b9e2:	6933      	ldr	r3, [r6, #16]
 800b9e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b9e8:	6918      	ldr	r0, [r3, #16]
 800b9ea:	f000 fadb 	bl	800bfa4 <__hi0bits>
 800b9ee:	f1c0 0020 	rsb	r0, r0, #32
 800b9f2:	9b05      	ldr	r3, [sp, #20]
 800b9f4:	4418      	add	r0, r3
 800b9f6:	f010 001f 	ands.w	r0, r0, #31
 800b9fa:	f000 8092 	beq.w	800bb22 <_dtoa_r+0x90a>
 800b9fe:	f1c0 0320 	rsb	r3, r0, #32
 800ba02:	2b04      	cmp	r3, #4
 800ba04:	f340 808a 	ble.w	800bb1c <_dtoa_r+0x904>
 800ba08:	f1c0 001c 	rsb	r0, r0, #28
 800ba0c:	9b04      	ldr	r3, [sp, #16]
 800ba0e:	4403      	add	r3, r0
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	9b05      	ldr	r3, [sp, #20]
 800ba14:	4403      	add	r3, r0
 800ba16:	4405      	add	r5, r0
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	9b04      	ldr	r3, [sp, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dd07      	ble.n	800ba30 <_dtoa_r+0x818>
 800ba20:	ee18 1a10 	vmov	r1, s16
 800ba24:	461a      	mov	r2, r3
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 fc26 	bl	800c278 <__lshift>
 800ba2c:	ee08 0a10 	vmov	s16, r0
 800ba30:	9b05      	ldr	r3, [sp, #20]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	dd05      	ble.n	800ba42 <_dtoa_r+0x82a>
 800ba36:	4631      	mov	r1, r6
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f000 fc1c 	bl	800c278 <__lshift>
 800ba40:	4606      	mov	r6, r0
 800ba42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d06e      	beq.n	800bb26 <_dtoa_r+0x90e>
 800ba48:	ee18 0a10 	vmov	r0, s16
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	f000 fc83 	bl	800c358 <__mcmp>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	da67      	bge.n	800bb26 <_dtoa_r+0x90e>
 800ba56:	9b00      	ldr	r3, [sp, #0]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	ee18 1a10 	vmov	r1, s16
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	220a      	movs	r2, #10
 800ba62:	2300      	movs	r3, #0
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fa57 	bl	800bf18 <__multadd>
 800ba6a:	9b08      	ldr	r3, [sp, #32]
 800ba6c:	ee08 0a10 	vmov	s16, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 81b1 	beq.w	800bdd8 <_dtoa_r+0xbc0>
 800ba76:	2300      	movs	r3, #0
 800ba78:	4639      	mov	r1, r7
 800ba7a:	220a      	movs	r2, #10
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 fa4b 	bl	800bf18 <__multadd>
 800ba82:	9b02      	ldr	r3, [sp, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	4607      	mov	r7, r0
 800ba88:	f300 808e 	bgt.w	800bba8 <_dtoa_r+0x990>
 800ba8c:	9b06      	ldr	r3, [sp, #24]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	dc51      	bgt.n	800bb36 <_dtoa_r+0x91e>
 800ba92:	e089      	b.n	800bba8 <_dtoa_r+0x990>
 800ba94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba9a:	e74b      	b.n	800b934 <_dtoa_r+0x71c>
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	1e5e      	subs	r6, r3, #1
 800baa0:	9b07      	ldr	r3, [sp, #28]
 800baa2:	42b3      	cmp	r3, r6
 800baa4:	bfbf      	itttt	lt
 800baa6:	9b07      	ldrlt	r3, [sp, #28]
 800baa8:	9607      	strlt	r6, [sp, #28]
 800baaa:	1af2      	sublt	r2, r6, r3
 800baac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800baae:	bfb6      	itet	lt
 800bab0:	189b      	addlt	r3, r3, r2
 800bab2:	1b9e      	subge	r6, r3, r6
 800bab4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	bfb8      	it	lt
 800baba:	2600      	movlt	r6, #0
 800babc:	2b00      	cmp	r3, #0
 800babe:	bfb7      	itett	lt
 800bac0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bac4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bac8:	1a9d      	sublt	r5, r3, r2
 800baca:	2300      	movlt	r3, #0
 800bacc:	e734      	b.n	800b938 <_dtoa_r+0x720>
 800bace:	9e07      	ldr	r6, [sp, #28]
 800bad0:	9d04      	ldr	r5, [sp, #16]
 800bad2:	9f08      	ldr	r7, [sp, #32]
 800bad4:	e73b      	b.n	800b94e <_dtoa_r+0x736>
 800bad6:	9a07      	ldr	r2, [sp, #28]
 800bad8:	e767      	b.n	800b9aa <_dtoa_r+0x792>
 800bada:	9b06      	ldr	r3, [sp, #24]
 800badc:	2b01      	cmp	r3, #1
 800bade:	dc18      	bgt.n	800bb12 <_dtoa_r+0x8fa>
 800bae0:	f1ba 0f00 	cmp.w	sl, #0
 800bae4:	d115      	bne.n	800bb12 <_dtoa_r+0x8fa>
 800bae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800baea:	b993      	cbnz	r3, 800bb12 <_dtoa_r+0x8fa>
 800baec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800baf0:	0d1b      	lsrs	r3, r3, #20
 800baf2:	051b      	lsls	r3, r3, #20
 800baf4:	b183      	cbz	r3, 800bb18 <_dtoa_r+0x900>
 800baf6:	9b04      	ldr	r3, [sp, #16]
 800baf8:	3301      	adds	r3, #1
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	9b05      	ldr	r3, [sp, #20]
 800bafe:	3301      	adds	r3, #1
 800bb00:	9305      	str	r3, [sp, #20]
 800bb02:	f04f 0801 	mov.w	r8, #1
 800bb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f47f af6a 	bne.w	800b9e2 <_dtoa_r+0x7ca>
 800bb0e:	2001      	movs	r0, #1
 800bb10:	e76f      	b.n	800b9f2 <_dtoa_r+0x7da>
 800bb12:	f04f 0800 	mov.w	r8, #0
 800bb16:	e7f6      	b.n	800bb06 <_dtoa_r+0x8ee>
 800bb18:	4698      	mov	r8, r3
 800bb1a:	e7f4      	b.n	800bb06 <_dtoa_r+0x8ee>
 800bb1c:	f43f af7d 	beq.w	800ba1a <_dtoa_r+0x802>
 800bb20:	4618      	mov	r0, r3
 800bb22:	301c      	adds	r0, #28
 800bb24:	e772      	b.n	800ba0c <_dtoa_r+0x7f4>
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	dc37      	bgt.n	800bb9c <_dtoa_r+0x984>
 800bb2c:	9b06      	ldr	r3, [sp, #24]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	dd34      	ble.n	800bb9c <_dtoa_r+0x984>
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	9302      	str	r3, [sp, #8]
 800bb36:	9b02      	ldr	r3, [sp, #8]
 800bb38:	b96b      	cbnz	r3, 800bb56 <_dtoa_r+0x93e>
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	2205      	movs	r2, #5
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f000 f9ea 	bl	800bf18 <__multadd>
 800bb44:	4601      	mov	r1, r0
 800bb46:	4606      	mov	r6, r0
 800bb48:	ee18 0a10 	vmov	r0, s16
 800bb4c:	f000 fc04 	bl	800c358 <__mcmp>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	f73f adbb 	bgt.w	800b6cc <_dtoa_r+0x4b4>
 800bb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb58:	9d01      	ldr	r5, [sp, #4]
 800bb5a:	43db      	mvns	r3, r3
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	f04f 0800 	mov.w	r8, #0
 800bb62:	4631      	mov	r1, r6
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 f9b5 	bl	800bed4 <_Bfree>
 800bb6a:	2f00      	cmp	r7, #0
 800bb6c:	f43f aea4 	beq.w	800b8b8 <_dtoa_r+0x6a0>
 800bb70:	f1b8 0f00 	cmp.w	r8, #0
 800bb74:	d005      	beq.n	800bb82 <_dtoa_r+0x96a>
 800bb76:	45b8      	cmp	r8, r7
 800bb78:	d003      	beq.n	800bb82 <_dtoa_r+0x96a>
 800bb7a:	4641      	mov	r1, r8
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 f9a9 	bl	800bed4 <_Bfree>
 800bb82:	4639      	mov	r1, r7
 800bb84:	4620      	mov	r0, r4
 800bb86:	f000 f9a5 	bl	800bed4 <_Bfree>
 800bb8a:	e695      	b.n	800b8b8 <_dtoa_r+0x6a0>
 800bb8c:	2600      	movs	r6, #0
 800bb8e:	4637      	mov	r7, r6
 800bb90:	e7e1      	b.n	800bb56 <_dtoa_r+0x93e>
 800bb92:	9700      	str	r7, [sp, #0]
 800bb94:	4637      	mov	r7, r6
 800bb96:	e599      	b.n	800b6cc <_dtoa_r+0x4b4>
 800bb98:	40240000 	.word	0x40240000
 800bb9c:	9b08      	ldr	r3, [sp, #32]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f000 80ca 	beq.w	800bd38 <_dtoa_r+0xb20>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	9302      	str	r3, [sp, #8]
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	dd05      	ble.n	800bbb8 <_dtoa_r+0x9a0>
 800bbac:	4639      	mov	r1, r7
 800bbae:	462a      	mov	r2, r5
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 fb61 	bl	800c278 <__lshift>
 800bbb6:	4607      	mov	r7, r0
 800bbb8:	f1b8 0f00 	cmp.w	r8, #0
 800bbbc:	d05b      	beq.n	800bc76 <_dtoa_r+0xa5e>
 800bbbe:	6879      	ldr	r1, [r7, #4]
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 f947 	bl	800be54 <_Balloc>
 800bbc6:	4605      	mov	r5, r0
 800bbc8:	b928      	cbnz	r0, 800bbd6 <_dtoa_r+0x9be>
 800bbca:	4b87      	ldr	r3, [pc, #540]	; (800bde8 <_dtoa_r+0xbd0>)
 800bbcc:	4602      	mov	r2, r0
 800bbce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bbd2:	f7ff bb3b 	b.w	800b24c <_dtoa_r+0x34>
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	3202      	adds	r2, #2
 800bbda:	0092      	lsls	r2, r2, #2
 800bbdc:	f107 010c 	add.w	r1, r7, #12
 800bbe0:	300c      	adds	r0, #12
 800bbe2:	f000 f91d 	bl	800be20 <memcpy>
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 fb44 	bl	800c278 <__lshift>
 800bbf0:	9b01      	ldr	r3, [sp, #4]
 800bbf2:	f103 0901 	add.w	r9, r3, #1
 800bbf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	9305      	str	r3, [sp, #20]
 800bbfe:	f00a 0301 	and.w	r3, sl, #1
 800bc02:	46b8      	mov	r8, r7
 800bc04:	9304      	str	r3, [sp, #16]
 800bc06:	4607      	mov	r7, r0
 800bc08:	4631      	mov	r1, r6
 800bc0a:	ee18 0a10 	vmov	r0, s16
 800bc0e:	f7ff fa77 	bl	800b100 <quorem>
 800bc12:	4641      	mov	r1, r8
 800bc14:	9002      	str	r0, [sp, #8]
 800bc16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc1a:	ee18 0a10 	vmov	r0, s16
 800bc1e:	f000 fb9b 	bl	800c358 <__mcmp>
 800bc22:	463a      	mov	r2, r7
 800bc24:	9003      	str	r0, [sp, #12]
 800bc26:	4631      	mov	r1, r6
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 fbb1 	bl	800c390 <__mdiff>
 800bc2e:	68c2      	ldr	r2, [r0, #12]
 800bc30:	f109 3bff 	add.w	fp, r9, #4294967295
 800bc34:	4605      	mov	r5, r0
 800bc36:	bb02      	cbnz	r2, 800bc7a <_dtoa_r+0xa62>
 800bc38:	4601      	mov	r1, r0
 800bc3a:	ee18 0a10 	vmov	r0, s16
 800bc3e:	f000 fb8b 	bl	800c358 <__mcmp>
 800bc42:	4602      	mov	r2, r0
 800bc44:	4629      	mov	r1, r5
 800bc46:	4620      	mov	r0, r4
 800bc48:	9207      	str	r2, [sp, #28]
 800bc4a:	f000 f943 	bl	800bed4 <_Bfree>
 800bc4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bc52:	ea43 0102 	orr.w	r1, r3, r2
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	430b      	orrs	r3, r1
 800bc5a:	464d      	mov	r5, r9
 800bc5c:	d10f      	bne.n	800bc7e <_dtoa_r+0xa66>
 800bc5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc62:	d02a      	beq.n	800bcba <_dtoa_r+0xaa2>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	dd02      	ble.n	800bc70 <_dtoa_r+0xa58>
 800bc6a:	9b02      	ldr	r3, [sp, #8]
 800bc6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bc70:	f88b a000 	strb.w	sl, [fp]
 800bc74:	e775      	b.n	800bb62 <_dtoa_r+0x94a>
 800bc76:	4638      	mov	r0, r7
 800bc78:	e7ba      	b.n	800bbf0 <_dtoa_r+0x9d8>
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	e7e2      	b.n	800bc44 <_dtoa_r+0xa2c>
 800bc7e:	9b03      	ldr	r3, [sp, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	db04      	blt.n	800bc8e <_dtoa_r+0xa76>
 800bc84:	9906      	ldr	r1, [sp, #24]
 800bc86:	430b      	orrs	r3, r1
 800bc88:	9904      	ldr	r1, [sp, #16]
 800bc8a:	430b      	orrs	r3, r1
 800bc8c:	d122      	bne.n	800bcd4 <_dtoa_r+0xabc>
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	ddee      	ble.n	800bc70 <_dtoa_r+0xa58>
 800bc92:	ee18 1a10 	vmov	r1, s16
 800bc96:	2201      	movs	r2, #1
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f000 faed 	bl	800c278 <__lshift>
 800bc9e:	4631      	mov	r1, r6
 800bca0:	ee08 0a10 	vmov	s16, r0
 800bca4:	f000 fb58 	bl	800c358 <__mcmp>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	dc03      	bgt.n	800bcb4 <_dtoa_r+0xa9c>
 800bcac:	d1e0      	bne.n	800bc70 <_dtoa_r+0xa58>
 800bcae:	f01a 0f01 	tst.w	sl, #1
 800bcb2:	d0dd      	beq.n	800bc70 <_dtoa_r+0xa58>
 800bcb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcb8:	d1d7      	bne.n	800bc6a <_dtoa_r+0xa52>
 800bcba:	2339      	movs	r3, #57	; 0x39
 800bcbc:	f88b 3000 	strb.w	r3, [fp]
 800bcc0:	462b      	mov	r3, r5
 800bcc2:	461d      	mov	r5, r3
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcca:	2a39      	cmp	r2, #57	; 0x39
 800bccc:	d071      	beq.n	800bdb2 <_dtoa_r+0xb9a>
 800bcce:	3201      	adds	r2, #1
 800bcd0:	701a      	strb	r2, [r3, #0]
 800bcd2:	e746      	b.n	800bb62 <_dtoa_r+0x94a>
 800bcd4:	2a00      	cmp	r2, #0
 800bcd6:	dd07      	ble.n	800bce8 <_dtoa_r+0xad0>
 800bcd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcdc:	d0ed      	beq.n	800bcba <_dtoa_r+0xaa2>
 800bcde:	f10a 0301 	add.w	r3, sl, #1
 800bce2:	f88b 3000 	strb.w	r3, [fp]
 800bce6:	e73c      	b.n	800bb62 <_dtoa_r+0x94a>
 800bce8:	9b05      	ldr	r3, [sp, #20]
 800bcea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bcee:	4599      	cmp	r9, r3
 800bcf0:	d047      	beq.n	800bd82 <_dtoa_r+0xb6a>
 800bcf2:	ee18 1a10 	vmov	r1, s16
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	220a      	movs	r2, #10
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 f90c 	bl	800bf18 <__multadd>
 800bd00:	45b8      	cmp	r8, r7
 800bd02:	ee08 0a10 	vmov	s16, r0
 800bd06:	f04f 0300 	mov.w	r3, #0
 800bd0a:	f04f 020a 	mov.w	r2, #10
 800bd0e:	4641      	mov	r1, r8
 800bd10:	4620      	mov	r0, r4
 800bd12:	d106      	bne.n	800bd22 <_dtoa_r+0xb0a>
 800bd14:	f000 f900 	bl	800bf18 <__multadd>
 800bd18:	4680      	mov	r8, r0
 800bd1a:	4607      	mov	r7, r0
 800bd1c:	f109 0901 	add.w	r9, r9, #1
 800bd20:	e772      	b.n	800bc08 <_dtoa_r+0x9f0>
 800bd22:	f000 f8f9 	bl	800bf18 <__multadd>
 800bd26:	4639      	mov	r1, r7
 800bd28:	4680      	mov	r8, r0
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	220a      	movs	r2, #10
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 f8f2 	bl	800bf18 <__multadd>
 800bd34:	4607      	mov	r7, r0
 800bd36:	e7f1      	b.n	800bd1c <_dtoa_r+0xb04>
 800bd38:	9b03      	ldr	r3, [sp, #12]
 800bd3a:	9302      	str	r3, [sp, #8]
 800bd3c:	9d01      	ldr	r5, [sp, #4]
 800bd3e:	ee18 0a10 	vmov	r0, s16
 800bd42:	4631      	mov	r1, r6
 800bd44:	f7ff f9dc 	bl	800b100 <quorem>
 800bd48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd4c:	9b01      	ldr	r3, [sp, #4]
 800bd4e:	f805 ab01 	strb.w	sl, [r5], #1
 800bd52:	1aea      	subs	r2, r5, r3
 800bd54:	9b02      	ldr	r3, [sp, #8]
 800bd56:	4293      	cmp	r3, r2
 800bd58:	dd09      	ble.n	800bd6e <_dtoa_r+0xb56>
 800bd5a:	ee18 1a10 	vmov	r1, s16
 800bd5e:	2300      	movs	r3, #0
 800bd60:	220a      	movs	r2, #10
 800bd62:	4620      	mov	r0, r4
 800bd64:	f000 f8d8 	bl	800bf18 <__multadd>
 800bd68:	ee08 0a10 	vmov	s16, r0
 800bd6c:	e7e7      	b.n	800bd3e <_dtoa_r+0xb26>
 800bd6e:	9b02      	ldr	r3, [sp, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	bfc8      	it	gt
 800bd74:	461d      	movgt	r5, r3
 800bd76:	9b01      	ldr	r3, [sp, #4]
 800bd78:	bfd8      	it	le
 800bd7a:	2501      	movle	r5, #1
 800bd7c:	441d      	add	r5, r3
 800bd7e:	f04f 0800 	mov.w	r8, #0
 800bd82:	ee18 1a10 	vmov	r1, s16
 800bd86:	2201      	movs	r2, #1
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fa75 	bl	800c278 <__lshift>
 800bd8e:	4631      	mov	r1, r6
 800bd90:	ee08 0a10 	vmov	s16, r0
 800bd94:	f000 fae0 	bl	800c358 <__mcmp>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	dc91      	bgt.n	800bcc0 <_dtoa_r+0xaa8>
 800bd9c:	d102      	bne.n	800bda4 <_dtoa_r+0xb8c>
 800bd9e:	f01a 0f01 	tst.w	sl, #1
 800bda2:	d18d      	bne.n	800bcc0 <_dtoa_r+0xaa8>
 800bda4:	462b      	mov	r3, r5
 800bda6:	461d      	mov	r5, r3
 800bda8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdac:	2a30      	cmp	r2, #48	; 0x30
 800bdae:	d0fa      	beq.n	800bda6 <_dtoa_r+0xb8e>
 800bdb0:	e6d7      	b.n	800bb62 <_dtoa_r+0x94a>
 800bdb2:	9a01      	ldr	r2, [sp, #4]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d184      	bne.n	800bcc2 <_dtoa_r+0xaaa>
 800bdb8:	9b00      	ldr	r3, [sp, #0]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	2331      	movs	r3, #49	; 0x31
 800bdc0:	7013      	strb	r3, [r2, #0]
 800bdc2:	e6ce      	b.n	800bb62 <_dtoa_r+0x94a>
 800bdc4:	4b09      	ldr	r3, [pc, #36]	; (800bdec <_dtoa_r+0xbd4>)
 800bdc6:	f7ff ba95 	b.w	800b2f4 <_dtoa_r+0xdc>
 800bdca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f47f aa6e 	bne.w	800b2ae <_dtoa_r+0x96>
 800bdd2:	4b07      	ldr	r3, [pc, #28]	; (800bdf0 <_dtoa_r+0xbd8>)
 800bdd4:	f7ff ba8e 	b.w	800b2f4 <_dtoa_r+0xdc>
 800bdd8:	9b02      	ldr	r3, [sp, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	dcae      	bgt.n	800bd3c <_dtoa_r+0xb24>
 800bdde:	9b06      	ldr	r3, [sp, #24]
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	f73f aea8 	bgt.w	800bb36 <_dtoa_r+0x91e>
 800bde6:	e7a9      	b.n	800bd3c <_dtoa_r+0xb24>
 800bde8:	0800ef72 	.word	0x0800ef72
 800bdec:	0800f0f1 	.word	0x0800f0f1
 800bdf0:	0800eef3 	.word	0x0800eef3

0800bdf4 <_localeconv_r>:
 800bdf4:	4800      	ldr	r0, [pc, #0]	; (800bdf8 <_localeconv_r+0x4>)
 800bdf6:	4770      	bx	lr
 800bdf8:	2000032c 	.word	0x2000032c

0800bdfc <_lseek_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d07      	ldr	r5, [pc, #28]	; (800be1c <_lseek_r+0x20>)
 800be00:	4604      	mov	r4, r0
 800be02:	4608      	mov	r0, r1
 800be04:	4611      	mov	r1, r2
 800be06:	2200      	movs	r2, #0
 800be08:	602a      	str	r2, [r5, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	f7f7 ff9c 	bl	8003d48 <_lseek>
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d102      	bne.n	800be1a <_lseek_r+0x1e>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	b103      	cbz	r3, 800be1a <_lseek_r+0x1e>
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	20000d78 	.word	0x20000d78

0800be20 <memcpy>:
 800be20:	440a      	add	r2, r1
 800be22:	4291      	cmp	r1, r2
 800be24:	f100 33ff 	add.w	r3, r0, #4294967295
 800be28:	d100      	bne.n	800be2c <memcpy+0xc>
 800be2a:	4770      	bx	lr
 800be2c:	b510      	push	{r4, lr}
 800be2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be36:	4291      	cmp	r1, r2
 800be38:	d1f9      	bne.n	800be2e <memcpy+0xe>
 800be3a:	bd10      	pop	{r4, pc}

0800be3c <__malloc_lock>:
 800be3c:	4801      	ldr	r0, [pc, #4]	; (800be44 <__malloc_lock+0x8>)
 800be3e:	f001 bb03 	b.w	800d448 <__retarget_lock_acquire_recursive>
 800be42:	bf00      	nop
 800be44:	20000d7c 	.word	0x20000d7c

0800be48 <__malloc_unlock>:
 800be48:	4801      	ldr	r0, [pc, #4]	; (800be50 <__malloc_unlock+0x8>)
 800be4a:	f001 bafe 	b.w	800d44a <__retarget_lock_release_recursive>
 800be4e:	bf00      	nop
 800be50:	20000d7c 	.word	0x20000d7c

0800be54 <_Balloc>:
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be58:	4604      	mov	r4, r0
 800be5a:	460d      	mov	r5, r1
 800be5c:	b976      	cbnz	r6, 800be7c <_Balloc+0x28>
 800be5e:	2010      	movs	r0, #16
 800be60:	f7fe fa72 	bl	800a348 <malloc>
 800be64:	4602      	mov	r2, r0
 800be66:	6260      	str	r0, [r4, #36]	; 0x24
 800be68:	b920      	cbnz	r0, 800be74 <_Balloc+0x20>
 800be6a:	4b18      	ldr	r3, [pc, #96]	; (800becc <_Balloc+0x78>)
 800be6c:	4818      	ldr	r0, [pc, #96]	; (800bed0 <_Balloc+0x7c>)
 800be6e:	2166      	movs	r1, #102	; 0x66
 800be70:	f001 f902 	bl	800d078 <__assert_func>
 800be74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be78:	6006      	str	r6, [r0, #0]
 800be7a:	60c6      	str	r6, [r0, #12]
 800be7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be7e:	68f3      	ldr	r3, [r6, #12]
 800be80:	b183      	cbz	r3, 800bea4 <_Balloc+0x50>
 800be82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be8a:	b9b8      	cbnz	r0, 800bebc <_Balloc+0x68>
 800be8c:	2101      	movs	r1, #1
 800be8e:	fa01 f605 	lsl.w	r6, r1, r5
 800be92:	1d72      	adds	r2, r6, #5
 800be94:	0092      	lsls	r2, r2, #2
 800be96:	4620      	mov	r0, r4
 800be98:	f000 fb60 	bl	800c55c <_calloc_r>
 800be9c:	b160      	cbz	r0, 800beb8 <_Balloc+0x64>
 800be9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bea2:	e00e      	b.n	800bec2 <_Balloc+0x6e>
 800bea4:	2221      	movs	r2, #33	; 0x21
 800bea6:	2104      	movs	r1, #4
 800bea8:	4620      	mov	r0, r4
 800beaa:	f000 fb57 	bl	800c55c <_calloc_r>
 800beae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beb0:	60f0      	str	r0, [r6, #12]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e4      	bne.n	800be82 <_Balloc+0x2e>
 800beb8:	2000      	movs	r0, #0
 800beba:	bd70      	pop	{r4, r5, r6, pc}
 800bebc:	6802      	ldr	r2, [r0, #0]
 800bebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bec2:	2300      	movs	r3, #0
 800bec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bec8:	e7f7      	b.n	800beba <_Balloc+0x66>
 800beca:	bf00      	nop
 800becc:	0800ef00 	.word	0x0800ef00
 800bed0:	0800ef83 	.word	0x0800ef83

0800bed4 <_Bfree>:
 800bed4:	b570      	push	{r4, r5, r6, lr}
 800bed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bed8:	4605      	mov	r5, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	b976      	cbnz	r6, 800befc <_Bfree+0x28>
 800bede:	2010      	movs	r0, #16
 800bee0:	f7fe fa32 	bl	800a348 <malloc>
 800bee4:	4602      	mov	r2, r0
 800bee6:	6268      	str	r0, [r5, #36]	; 0x24
 800bee8:	b920      	cbnz	r0, 800bef4 <_Bfree+0x20>
 800beea:	4b09      	ldr	r3, [pc, #36]	; (800bf10 <_Bfree+0x3c>)
 800beec:	4809      	ldr	r0, [pc, #36]	; (800bf14 <_Bfree+0x40>)
 800beee:	218a      	movs	r1, #138	; 0x8a
 800bef0:	f001 f8c2 	bl	800d078 <__assert_func>
 800bef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bef8:	6006      	str	r6, [r0, #0]
 800befa:	60c6      	str	r6, [r0, #12]
 800befc:	b13c      	cbz	r4, 800bf0e <_Bfree+0x3a>
 800befe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf00:	6862      	ldr	r2, [r4, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf08:	6021      	str	r1, [r4, #0]
 800bf0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf0e:	bd70      	pop	{r4, r5, r6, pc}
 800bf10:	0800ef00 	.word	0x0800ef00
 800bf14:	0800ef83 	.word	0x0800ef83

0800bf18 <__multadd>:
 800bf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1c:	690d      	ldr	r5, [r1, #16]
 800bf1e:	4607      	mov	r7, r0
 800bf20:	460c      	mov	r4, r1
 800bf22:	461e      	mov	r6, r3
 800bf24:	f101 0c14 	add.w	ip, r1, #20
 800bf28:	2000      	movs	r0, #0
 800bf2a:	f8dc 3000 	ldr.w	r3, [ip]
 800bf2e:	b299      	uxth	r1, r3
 800bf30:	fb02 6101 	mla	r1, r2, r1, r6
 800bf34:	0c1e      	lsrs	r6, r3, #16
 800bf36:	0c0b      	lsrs	r3, r1, #16
 800bf38:	fb02 3306 	mla	r3, r2, r6, r3
 800bf3c:	b289      	uxth	r1, r1
 800bf3e:	3001      	adds	r0, #1
 800bf40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf44:	4285      	cmp	r5, r0
 800bf46:	f84c 1b04 	str.w	r1, [ip], #4
 800bf4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf4e:	dcec      	bgt.n	800bf2a <__multadd+0x12>
 800bf50:	b30e      	cbz	r6, 800bf96 <__multadd+0x7e>
 800bf52:	68a3      	ldr	r3, [r4, #8]
 800bf54:	42ab      	cmp	r3, r5
 800bf56:	dc19      	bgt.n	800bf8c <__multadd+0x74>
 800bf58:	6861      	ldr	r1, [r4, #4]
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	3101      	adds	r1, #1
 800bf5e:	f7ff ff79 	bl	800be54 <_Balloc>
 800bf62:	4680      	mov	r8, r0
 800bf64:	b928      	cbnz	r0, 800bf72 <__multadd+0x5a>
 800bf66:	4602      	mov	r2, r0
 800bf68:	4b0c      	ldr	r3, [pc, #48]	; (800bf9c <__multadd+0x84>)
 800bf6a:	480d      	ldr	r0, [pc, #52]	; (800bfa0 <__multadd+0x88>)
 800bf6c:	21b5      	movs	r1, #181	; 0xb5
 800bf6e:	f001 f883 	bl	800d078 <__assert_func>
 800bf72:	6922      	ldr	r2, [r4, #16]
 800bf74:	3202      	adds	r2, #2
 800bf76:	f104 010c 	add.w	r1, r4, #12
 800bf7a:	0092      	lsls	r2, r2, #2
 800bf7c:	300c      	adds	r0, #12
 800bf7e:	f7ff ff4f 	bl	800be20 <memcpy>
 800bf82:	4621      	mov	r1, r4
 800bf84:	4638      	mov	r0, r7
 800bf86:	f7ff ffa5 	bl	800bed4 <_Bfree>
 800bf8a:	4644      	mov	r4, r8
 800bf8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf90:	3501      	adds	r5, #1
 800bf92:	615e      	str	r6, [r3, #20]
 800bf94:	6125      	str	r5, [r4, #16]
 800bf96:	4620      	mov	r0, r4
 800bf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf9c:	0800ef72 	.word	0x0800ef72
 800bfa0:	0800ef83 	.word	0x0800ef83

0800bfa4 <__hi0bits>:
 800bfa4:	0c03      	lsrs	r3, r0, #16
 800bfa6:	041b      	lsls	r3, r3, #16
 800bfa8:	b9d3      	cbnz	r3, 800bfe0 <__hi0bits+0x3c>
 800bfaa:	0400      	lsls	r0, r0, #16
 800bfac:	2310      	movs	r3, #16
 800bfae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bfb2:	bf04      	itt	eq
 800bfb4:	0200      	lsleq	r0, r0, #8
 800bfb6:	3308      	addeq	r3, #8
 800bfb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bfbc:	bf04      	itt	eq
 800bfbe:	0100      	lsleq	r0, r0, #4
 800bfc0:	3304      	addeq	r3, #4
 800bfc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfc6:	bf04      	itt	eq
 800bfc8:	0080      	lsleq	r0, r0, #2
 800bfca:	3302      	addeq	r3, #2
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	db05      	blt.n	800bfdc <__hi0bits+0x38>
 800bfd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfd4:	f103 0301 	add.w	r3, r3, #1
 800bfd8:	bf08      	it	eq
 800bfda:	2320      	moveq	r3, #32
 800bfdc:	4618      	mov	r0, r3
 800bfde:	4770      	bx	lr
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	e7e4      	b.n	800bfae <__hi0bits+0xa>

0800bfe4 <__lo0bits>:
 800bfe4:	6803      	ldr	r3, [r0, #0]
 800bfe6:	f013 0207 	ands.w	r2, r3, #7
 800bfea:	4601      	mov	r1, r0
 800bfec:	d00b      	beq.n	800c006 <__lo0bits+0x22>
 800bfee:	07da      	lsls	r2, r3, #31
 800bff0:	d423      	bmi.n	800c03a <__lo0bits+0x56>
 800bff2:	0798      	lsls	r0, r3, #30
 800bff4:	bf49      	itett	mi
 800bff6:	085b      	lsrmi	r3, r3, #1
 800bff8:	089b      	lsrpl	r3, r3, #2
 800bffa:	2001      	movmi	r0, #1
 800bffc:	600b      	strmi	r3, [r1, #0]
 800bffe:	bf5c      	itt	pl
 800c000:	600b      	strpl	r3, [r1, #0]
 800c002:	2002      	movpl	r0, #2
 800c004:	4770      	bx	lr
 800c006:	b298      	uxth	r0, r3
 800c008:	b9a8      	cbnz	r0, 800c036 <__lo0bits+0x52>
 800c00a:	0c1b      	lsrs	r3, r3, #16
 800c00c:	2010      	movs	r0, #16
 800c00e:	b2da      	uxtb	r2, r3
 800c010:	b90a      	cbnz	r2, 800c016 <__lo0bits+0x32>
 800c012:	3008      	adds	r0, #8
 800c014:	0a1b      	lsrs	r3, r3, #8
 800c016:	071a      	lsls	r2, r3, #28
 800c018:	bf04      	itt	eq
 800c01a:	091b      	lsreq	r3, r3, #4
 800c01c:	3004      	addeq	r0, #4
 800c01e:	079a      	lsls	r2, r3, #30
 800c020:	bf04      	itt	eq
 800c022:	089b      	lsreq	r3, r3, #2
 800c024:	3002      	addeq	r0, #2
 800c026:	07da      	lsls	r2, r3, #31
 800c028:	d403      	bmi.n	800c032 <__lo0bits+0x4e>
 800c02a:	085b      	lsrs	r3, r3, #1
 800c02c:	f100 0001 	add.w	r0, r0, #1
 800c030:	d005      	beq.n	800c03e <__lo0bits+0x5a>
 800c032:	600b      	str	r3, [r1, #0]
 800c034:	4770      	bx	lr
 800c036:	4610      	mov	r0, r2
 800c038:	e7e9      	b.n	800c00e <__lo0bits+0x2a>
 800c03a:	2000      	movs	r0, #0
 800c03c:	4770      	bx	lr
 800c03e:	2020      	movs	r0, #32
 800c040:	4770      	bx	lr
	...

0800c044 <__i2b>:
 800c044:	b510      	push	{r4, lr}
 800c046:	460c      	mov	r4, r1
 800c048:	2101      	movs	r1, #1
 800c04a:	f7ff ff03 	bl	800be54 <_Balloc>
 800c04e:	4602      	mov	r2, r0
 800c050:	b928      	cbnz	r0, 800c05e <__i2b+0x1a>
 800c052:	4b05      	ldr	r3, [pc, #20]	; (800c068 <__i2b+0x24>)
 800c054:	4805      	ldr	r0, [pc, #20]	; (800c06c <__i2b+0x28>)
 800c056:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c05a:	f001 f80d 	bl	800d078 <__assert_func>
 800c05e:	2301      	movs	r3, #1
 800c060:	6144      	str	r4, [r0, #20]
 800c062:	6103      	str	r3, [r0, #16]
 800c064:	bd10      	pop	{r4, pc}
 800c066:	bf00      	nop
 800c068:	0800ef72 	.word	0x0800ef72
 800c06c:	0800ef83 	.word	0x0800ef83

0800c070 <__multiply>:
 800c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	4691      	mov	r9, r2
 800c076:	690a      	ldr	r2, [r1, #16]
 800c078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	bfb8      	it	lt
 800c080:	460b      	movlt	r3, r1
 800c082:	460c      	mov	r4, r1
 800c084:	bfbc      	itt	lt
 800c086:	464c      	movlt	r4, r9
 800c088:	4699      	movlt	r9, r3
 800c08a:	6927      	ldr	r7, [r4, #16]
 800c08c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c090:	68a3      	ldr	r3, [r4, #8]
 800c092:	6861      	ldr	r1, [r4, #4]
 800c094:	eb07 060a 	add.w	r6, r7, sl
 800c098:	42b3      	cmp	r3, r6
 800c09a:	b085      	sub	sp, #20
 800c09c:	bfb8      	it	lt
 800c09e:	3101      	addlt	r1, #1
 800c0a0:	f7ff fed8 	bl	800be54 <_Balloc>
 800c0a4:	b930      	cbnz	r0, 800c0b4 <__multiply+0x44>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	4b44      	ldr	r3, [pc, #272]	; (800c1bc <__multiply+0x14c>)
 800c0aa:	4845      	ldr	r0, [pc, #276]	; (800c1c0 <__multiply+0x150>)
 800c0ac:	f240 115d 	movw	r1, #349	; 0x15d
 800c0b0:	f000 ffe2 	bl	800d078 <__assert_func>
 800c0b4:	f100 0514 	add.w	r5, r0, #20
 800c0b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0bc:	462b      	mov	r3, r5
 800c0be:	2200      	movs	r2, #0
 800c0c0:	4543      	cmp	r3, r8
 800c0c2:	d321      	bcc.n	800c108 <__multiply+0x98>
 800c0c4:	f104 0314 	add.w	r3, r4, #20
 800c0c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0cc:	f109 0314 	add.w	r3, r9, #20
 800c0d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0d4:	9202      	str	r2, [sp, #8]
 800c0d6:	1b3a      	subs	r2, r7, r4
 800c0d8:	3a15      	subs	r2, #21
 800c0da:	f022 0203 	bic.w	r2, r2, #3
 800c0de:	3204      	adds	r2, #4
 800c0e0:	f104 0115 	add.w	r1, r4, #21
 800c0e4:	428f      	cmp	r7, r1
 800c0e6:	bf38      	it	cc
 800c0e8:	2204      	movcc	r2, #4
 800c0ea:	9201      	str	r2, [sp, #4]
 800c0ec:	9a02      	ldr	r2, [sp, #8]
 800c0ee:	9303      	str	r3, [sp, #12]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d80c      	bhi.n	800c10e <__multiply+0x9e>
 800c0f4:	2e00      	cmp	r6, #0
 800c0f6:	dd03      	ble.n	800c100 <__multiply+0x90>
 800c0f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d05a      	beq.n	800c1b6 <__multiply+0x146>
 800c100:	6106      	str	r6, [r0, #16]
 800c102:	b005      	add	sp, #20
 800c104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c108:	f843 2b04 	str.w	r2, [r3], #4
 800c10c:	e7d8      	b.n	800c0c0 <__multiply+0x50>
 800c10e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c112:	f1ba 0f00 	cmp.w	sl, #0
 800c116:	d024      	beq.n	800c162 <__multiply+0xf2>
 800c118:	f104 0e14 	add.w	lr, r4, #20
 800c11c:	46a9      	mov	r9, r5
 800c11e:	f04f 0c00 	mov.w	ip, #0
 800c122:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c126:	f8d9 1000 	ldr.w	r1, [r9]
 800c12a:	fa1f fb82 	uxth.w	fp, r2
 800c12e:	b289      	uxth	r1, r1
 800c130:	fb0a 110b 	mla	r1, sl, fp, r1
 800c134:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c138:	f8d9 2000 	ldr.w	r2, [r9]
 800c13c:	4461      	add	r1, ip
 800c13e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c142:	fb0a c20b 	mla	r2, sl, fp, ip
 800c146:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c14a:	b289      	uxth	r1, r1
 800c14c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c150:	4577      	cmp	r7, lr
 800c152:	f849 1b04 	str.w	r1, [r9], #4
 800c156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c15a:	d8e2      	bhi.n	800c122 <__multiply+0xb2>
 800c15c:	9a01      	ldr	r2, [sp, #4]
 800c15e:	f845 c002 	str.w	ip, [r5, r2]
 800c162:	9a03      	ldr	r2, [sp, #12]
 800c164:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c168:	3304      	adds	r3, #4
 800c16a:	f1b9 0f00 	cmp.w	r9, #0
 800c16e:	d020      	beq.n	800c1b2 <__multiply+0x142>
 800c170:	6829      	ldr	r1, [r5, #0]
 800c172:	f104 0c14 	add.w	ip, r4, #20
 800c176:	46ae      	mov	lr, r5
 800c178:	f04f 0a00 	mov.w	sl, #0
 800c17c:	f8bc b000 	ldrh.w	fp, [ip]
 800c180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c184:	fb09 220b 	mla	r2, r9, fp, r2
 800c188:	4492      	add	sl, r2
 800c18a:	b289      	uxth	r1, r1
 800c18c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c190:	f84e 1b04 	str.w	r1, [lr], #4
 800c194:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c198:	f8be 1000 	ldrh.w	r1, [lr]
 800c19c:	0c12      	lsrs	r2, r2, #16
 800c19e:	fb09 1102 	mla	r1, r9, r2, r1
 800c1a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c1a6:	4567      	cmp	r7, ip
 800c1a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1ac:	d8e6      	bhi.n	800c17c <__multiply+0x10c>
 800c1ae:	9a01      	ldr	r2, [sp, #4]
 800c1b0:	50a9      	str	r1, [r5, r2]
 800c1b2:	3504      	adds	r5, #4
 800c1b4:	e79a      	b.n	800c0ec <__multiply+0x7c>
 800c1b6:	3e01      	subs	r6, #1
 800c1b8:	e79c      	b.n	800c0f4 <__multiply+0x84>
 800c1ba:	bf00      	nop
 800c1bc:	0800ef72 	.word	0x0800ef72
 800c1c0:	0800ef83 	.word	0x0800ef83

0800c1c4 <__pow5mult>:
 800c1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c8:	4615      	mov	r5, r2
 800c1ca:	f012 0203 	ands.w	r2, r2, #3
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	460f      	mov	r7, r1
 800c1d2:	d007      	beq.n	800c1e4 <__pow5mult+0x20>
 800c1d4:	4c25      	ldr	r4, [pc, #148]	; (800c26c <__pow5mult+0xa8>)
 800c1d6:	3a01      	subs	r2, #1
 800c1d8:	2300      	movs	r3, #0
 800c1da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1de:	f7ff fe9b 	bl	800bf18 <__multadd>
 800c1e2:	4607      	mov	r7, r0
 800c1e4:	10ad      	asrs	r5, r5, #2
 800c1e6:	d03d      	beq.n	800c264 <__pow5mult+0xa0>
 800c1e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1ea:	b97c      	cbnz	r4, 800c20c <__pow5mult+0x48>
 800c1ec:	2010      	movs	r0, #16
 800c1ee:	f7fe f8ab 	bl	800a348 <malloc>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	6270      	str	r0, [r6, #36]	; 0x24
 800c1f6:	b928      	cbnz	r0, 800c204 <__pow5mult+0x40>
 800c1f8:	4b1d      	ldr	r3, [pc, #116]	; (800c270 <__pow5mult+0xac>)
 800c1fa:	481e      	ldr	r0, [pc, #120]	; (800c274 <__pow5mult+0xb0>)
 800c1fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c200:	f000 ff3a 	bl	800d078 <__assert_func>
 800c204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c208:	6004      	str	r4, [r0, #0]
 800c20a:	60c4      	str	r4, [r0, #12]
 800c20c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c214:	b94c      	cbnz	r4, 800c22a <__pow5mult+0x66>
 800c216:	f240 2171 	movw	r1, #625	; 0x271
 800c21a:	4630      	mov	r0, r6
 800c21c:	f7ff ff12 	bl	800c044 <__i2b>
 800c220:	2300      	movs	r3, #0
 800c222:	f8c8 0008 	str.w	r0, [r8, #8]
 800c226:	4604      	mov	r4, r0
 800c228:	6003      	str	r3, [r0, #0]
 800c22a:	f04f 0900 	mov.w	r9, #0
 800c22e:	07eb      	lsls	r3, r5, #31
 800c230:	d50a      	bpl.n	800c248 <__pow5mult+0x84>
 800c232:	4639      	mov	r1, r7
 800c234:	4622      	mov	r2, r4
 800c236:	4630      	mov	r0, r6
 800c238:	f7ff ff1a 	bl	800c070 <__multiply>
 800c23c:	4639      	mov	r1, r7
 800c23e:	4680      	mov	r8, r0
 800c240:	4630      	mov	r0, r6
 800c242:	f7ff fe47 	bl	800bed4 <_Bfree>
 800c246:	4647      	mov	r7, r8
 800c248:	106d      	asrs	r5, r5, #1
 800c24a:	d00b      	beq.n	800c264 <__pow5mult+0xa0>
 800c24c:	6820      	ldr	r0, [r4, #0]
 800c24e:	b938      	cbnz	r0, 800c260 <__pow5mult+0x9c>
 800c250:	4622      	mov	r2, r4
 800c252:	4621      	mov	r1, r4
 800c254:	4630      	mov	r0, r6
 800c256:	f7ff ff0b 	bl	800c070 <__multiply>
 800c25a:	6020      	str	r0, [r4, #0]
 800c25c:	f8c0 9000 	str.w	r9, [r0]
 800c260:	4604      	mov	r4, r0
 800c262:	e7e4      	b.n	800c22e <__pow5mult+0x6a>
 800c264:	4638      	mov	r0, r7
 800c266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c26a:	bf00      	nop
 800c26c:	0800f0d0 	.word	0x0800f0d0
 800c270:	0800ef00 	.word	0x0800ef00
 800c274:	0800ef83 	.word	0x0800ef83

0800c278 <__lshift>:
 800c278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c27c:	460c      	mov	r4, r1
 800c27e:	6849      	ldr	r1, [r1, #4]
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c286:	68a3      	ldr	r3, [r4, #8]
 800c288:	4607      	mov	r7, r0
 800c28a:	4691      	mov	r9, r2
 800c28c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c290:	f108 0601 	add.w	r6, r8, #1
 800c294:	42b3      	cmp	r3, r6
 800c296:	db0b      	blt.n	800c2b0 <__lshift+0x38>
 800c298:	4638      	mov	r0, r7
 800c29a:	f7ff fddb 	bl	800be54 <_Balloc>
 800c29e:	4605      	mov	r5, r0
 800c2a0:	b948      	cbnz	r0, 800c2b6 <__lshift+0x3e>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	4b2a      	ldr	r3, [pc, #168]	; (800c350 <__lshift+0xd8>)
 800c2a6:	482b      	ldr	r0, [pc, #172]	; (800c354 <__lshift+0xdc>)
 800c2a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c2ac:	f000 fee4 	bl	800d078 <__assert_func>
 800c2b0:	3101      	adds	r1, #1
 800c2b2:	005b      	lsls	r3, r3, #1
 800c2b4:	e7ee      	b.n	800c294 <__lshift+0x1c>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f100 0114 	add.w	r1, r0, #20
 800c2bc:	f100 0210 	add.w	r2, r0, #16
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	4553      	cmp	r3, sl
 800c2c4:	db37      	blt.n	800c336 <__lshift+0xbe>
 800c2c6:	6920      	ldr	r0, [r4, #16]
 800c2c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2cc:	f104 0314 	add.w	r3, r4, #20
 800c2d0:	f019 091f 	ands.w	r9, r9, #31
 800c2d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c2dc:	d02f      	beq.n	800c33e <__lshift+0xc6>
 800c2de:	f1c9 0e20 	rsb	lr, r9, #32
 800c2e2:	468a      	mov	sl, r1
 800c2e4:	f04f 0c00 	mov.w	ip, #0
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	fa02 f209 	lsl.w	r2, r2, r9
 800c2ee:	ea42 020c 	orr.w	r2, r2, ip
 800c2f2:	f84a 2b04 	str.w	r2, [sl], #4
 800c2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2fa:	4298      	cmp	r0, r3
 800c2fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c300:	d8f2      	bhi.n	800c2e8 <__lshift+0x70>
 800c302:	1b03      	subs	r3, r0, r4
 800c304:	3b15      	subs	r3, #21
 800c306:	f023 0303 	bic.w	r3, r3, #3
 800c30a:	3304      	adds	r3, #4
 800c30c:	f104 0215 	add.w	r2, r4, #21
 800c310:	4290      	cmp	r0, r2
 800c312:	bf38      	it	cc
 800c314:	2304      	movcc	r3, #4
 800c316:	f841 c003 	str.w	ip, [r1, r3]
 800c31a:	f1bc 0f00 	cmp.w	ip, #0
 800c31e:	d001      	beq.n	800c324 <__lshift+0xac>
 800c320:	f108 0602 	add.w	r6, r8, #2
 800c324:	3e01      	subs	r6, #1
 800c326:	4638      	mov	r0, r7
 800c328:	612e      	str	r6, [r5, #16]
 800c32a:	4621      	mov	r1, r4
 800c32c:	f7ff fdd2 	bl	800bed4 <_Bfree>
 800c330:	4628      	mov	r0, r5
 800c332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c336:	f842 0f04 	str.w	r0, [r2, #4]!
 800c33a:	3301      	adds	r3, #1
 800c33c:	e7c1      	b.n	800c2c2 <__lshift+0x4a>
 800c33e:	3904      	subs	r1, #4
 800c340:	f853 2b04 	ldr.w	r2, [r3], #4
 800c344:	f841 2f04 	str.w	r2, [r1, #4]!
 800c348:	4298      	cmp	r0, r3
 800c34a:	d8f9      	bhi.n	800c340 <__lshift+0xc8>
 800c34c:	e7ea      	b.n	800c324 <__lshift+0xac>
 800c34e:	bf00      	nop
 800c350:	0800ef72 	.word	0x0800ef72
 800c354:	0800ef83 	.word	0x0800ef83

0800c358 <__mcmp>:
 800c358:	b530      	push	{r4, r5, lr}
 800c35a:	6902      	ldr	r2, [r0, #16]
 800c35c:	690c      	ldr	r4, [r1, #16]
 800c35e:	1b12      	subs	r2, r2, r4
 800c360:	d10e      	bne.n	800c380 <__mcmp+0x28>
 800c362:	f100 0314 	add.w	r3, r0, #20
 800c366:	3114      	adds	r1, #20
 800c368:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c36c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c370:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c374:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c378:	42a5      	cmp	r5, r4
 800c37a:	d003      	beq.n	800c384 <__mcmp+0x2c>
 800c37c:	d305      	bcc.n	800c38a <__mcmp+0x32>
 800c37e:	2201      	movs	r2, #1
 800c380:	4610      	mov	r0, r2
 800c382:	bd30      	pop	{r4, r5, pc}
 800c384:	4283      	cmp	r3, r0
 800c386:	d3f3      	bcc.n	800c370 <__mcmp+0x18>
 800c388:	e7fa      	b.n	800c380 <__mcmp+0x28>
 800c38a:	f04f 32ff 	mov.w	r2, #4294967295
 800c38e:	e7f7      	b.n	800c380 <__mcmp+0x28>

0800c390 <__mdiff>:
 800c390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c394:	460c      	mov	r4, r1
 800c396:	4606      	mov	r6, r0
 800c398:	4611      	mov	r1, r2
 800c39a:	4620      	mov	r0, r4
 800c39c:	4690      	mov	r8, r2
 800c39e:	f7ff ffdb 	bl	800c358 <__mcmp>
 800c3a2:	1e05      	subs	r5, r0, #0
 800c3a4:	d110      	bne.n	800c3c8 <__mdiff+0x38>
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	f7ff fd53 	bl	800be54 <_Balloc>
 800c3ae:	b930      	cbnz	r0, 800c3be <__mdiff+0x2e>
 800c3b0:	4b3a      	ldr	r3, [pc, #232]	; (800c49c <__mdiff+0x10c>)
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	f240 2132 	movw	r1, #562	; 0x232
 800c3b8:	4839      	ldr	r0, [pc, #228]	; (800c4a0 <__mdiff+0x110>)
 800c3ba:	f000 fe5d 	bl	800d078 <__assert_func>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c8:	bfa4      	itt	ge
 800c3ca:	4643      	movge	r3, r8
 800c3cc:	46a0      	movge	r8, r4
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3d4:	bfa6      	itte	ge
 800c3d6:	461c      	movge	r4, r3
 800c3d8:	2500      	movge	r5, #0
 800c3da:	2501      	movlt	r5, #1
 800c3dc:	f7ff fd3a 	bl	800be54 <_Balloc>
 800c3e0:	b920      	cbnz	r0, 800c3ec <__mdiff+0x5c>
 800c3e2:	4b2e      	ldr	r3, [pc, #184]	; (800c49c <__mdiff+0x10c>)
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3ea:	e7e5      	b.n	800c3b8 <__mdiff+0x28>
 800c3ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3f0:	6926      	ldr	r6, [r4, #16]
 800c3f2:	60c5      	str	r5, [r0, #12]
 800c3f4:	f104 0914 	add.w	r9, r4, #20
 800c3f8:	f108 0514 	add.w	r5, r8, #20
 800c3fc:	f100 0e14 	add.w	lr, r0, #20
 800c400:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c404:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c408:	f108 0210 	add.w	r2, r8, #16
 800c40c:	46f2      	mov	sl, lr
 800c40e:	2100      	movs	r1, #0
 800c410:	f859 3b04 	ldr.w	r3, [r9], #4
 800c414:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c418:	fa1f f883 	uxth.w	r8, r3
 800c41c:	fa11 f18b 	uxtah	r1, r1, fp
 800c420:	0c1b      	lsrs	r3, r3, #16
 800c422:	eba1 0808 	sub.w	r8, r1, r8
 800c426:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c42a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c42e:	fa1f f888 	uxth.w	r8, r8
 800c432:	1419      	asrs	r1, r3, #16
 800c434:	454e      	cmp	r6, r9
 800c436:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c43a:	f84a 3b04 	str.w	r3, [sl], #4
 800c43e:	d8e7      	bhi.n	800c410 <__mdiff+0x80>
 800c440:	1b33      	subs	r3, r6, r4
 800c442:	3b15      	subs	r3, #21
 800c444:	f023 0303 	bic.w	r3, r3, #3
 800c448:	3304      	adds	r3, #4
 800c44a:	3415      	adds	r4, #21
 800c44c:	42a6      	cmp	r6, r4
 800c44e:	bf38      	it	cc
 800c450:	2304      	movcc	r3, #4
 800c452:	441d      	add	r5, r3
 800c454:	4473      	add	r3, lr
 800c456:	469e      	mov	lr, r3
 800c458:	462e      	mov	r6, r5
 800c45a:	4566      	cmp	r6, ip
 800c45c:	d30e      	bcc.n	800c47c <__mdiff+0xec>
 800c45e:	f10c 0203 	add.w	r2, ip, #3
 800c462:	1b52      	subs	r2, r2, r5
 800c464:	f022 0203 	bic.w	r2, r2, #3
 800c468:	3d03      	subs	r5, #3
 800c46a:	45ac      	cmp	ip, r5
 800c46c:	bf38      	it	cc
 800c46e:	2200      	movcc	r2, #0
 800c470:	441a      	add	r2, r3
 800c472:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c476:	b17b      	cbz	r3, 800c498 <__mdiff+0x108>
 800c478:	6107      	str	r7, [r0, #16]
 800c47a:	e7a3      	b.n	800c3c4 <__mdiff+0x34>
 800c47c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c480:	fa11 f288 	uxtah	r2, r1, r8
 800c484:	1414      	asrs	r4, r2, #16
 800c486:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c48a:	b292      	uxth	r2, r2
 800c48c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c490:	f84e 2b04 	str.w	r2, [lr], #4
 800c494:	1421      	asrs	r1, r4, #16
 800c496:	e7e0      	b.n	800c45a <__mdiff+0xca>
 800c498:	3f01      	subs	r7, #1
 800c49a:	e7ea      	b.n	800c472 <__mdiff+0xe2>
 800c49c:	0800ef72 	.word	0x0800ef72
 800c4a0:	0800ef83 	.word	0x0800ef83

0800c4a4 <__d2b>:
 800c4a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4a8:	4689      	mov	r9, r1
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	ec57 6b10 	vmov	r6, r7, d0
 800c4b0:	4690      	mov	r8, r2
 800c4b2:	f7ff fccf 	bl	800be54 <_Balloc>
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	b930      	cbnz	r0, 800c4c8 <__d2b+0x24>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	4b25      	ldr	r3, [pc, #148]	; (800c554 <__d2b+0xb0>)
 800c4be:	4826      	ldr	r0, [pc, #152]	; (800c558 <__d2b+0xb4>)
 800c4c0:	f240 310a 	movw	r1, #778	; 0x30a
 800c4c4:	f000 fdd8 	bl	800d078 <__assert_func>
 800c4c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c4cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4d0:	bb35      	cbnz	r5, 800c520 <__d2b+0x7c>
 800c4d2:	2e00      	cmp	r6, #0
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	d028      	beq.n	800c52a <__d2b+0x86>
 800c4d8:	4668      	mov	r0, sp
 800c4da:	9600      	str	r6, [sp, #0]
 800c4dc:	f7ff fd82 	bl	800bfe4 <__lo0bits>
 800c4e0:	9900      	ldr	r1, [sp, #0]
 800c4e2:	b300      	cbz	r0, 800c526 <__d2b+0x82>
 800c4e4:	9a01      	ldr	r2, [sp, #4]
 800c4e6:	f1c0 0320 	rsb	r3, r0, #32
 800c4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ee:	430b      	orrs	r3, r1
 800c4f0:	40c2      	lsrs	r2, r0
 800c4f2:	6163      	str	r3, [r4, #20]
 800c4f4:	9201      	str	r2, [sp, #4]
 800c4f6:	9b01      	ldr	r3, [sp, #4]
 800c4f8:	61a3      	str	r3, [r4, #24]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	bf14      	ite	ne
 800c4fe:	2202      	movne	r2, #2
 800c500:	2201      	moveq	r2, #1
 800c502:	6122      	str	r2, [r4, #16]
 800c504:	b1d5      	cbz	r5, 800c53c <__d2b+0x98>
 800c506:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c50a:	4405      	add	r5, r0
 800c50c:	f8c9 5000 	str.w	r5, [r9]
 800c510:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c514:	f8c8 0000 	str.w	r0, [r8]
 800c518:	4620      	mov	r0, r4
 800c51a:	b003      	add	sp, #12
 800c51c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c524:	e7d5      	b.n	800c4d2 <__d2b+0x2e>
 800c526:	6161      	str	r1, [r4, #20]
 800c528:	e7e5      	b.n	800c4f6 <__d2b+0x52>
 800c52a:	a801      	add	r0, sp, #4
 800c52c:	f7ff fd5a 	bl	800bfe4 <__lo0bits>
 800c530:	9b01      	ldr	r3, [sp, #4]
 800c532:	6163      	str	r3, [r4, #20]
 800c534:	2201      	movs	r2, #1
 800c536:	6122      	str	r2, [r4, #16]
 800c538:	3020      	adds	r0, #32
 800c53a:	e7e3      	b.n	800c504 <__d2b+0x60>
 800c53c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c540:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c544:	f8c9 0000 	str.w	r0, [r9]
 800c548:	6918      	ldr	r0, [r3, #16]
 800c54a:	f7ff fd2b 	bl	800bfa4 <__hi0bits>
 800c54e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c552:	e7df      	b.n	800c514 <__d2b+0x70>
 800c554:	0800ef72 	.word	0x0800ef72
 800c558:	0800ef83 	.word	0x0800ef83

0800c55c <_calloc_r>:
 800c55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c55e:	fba1 2402 	umull	r2, r4, r1, r2
 800c562:	b94c      	cbnz	r4, 800c578 <_calloc_r+0x1c>
 800c564:	4611      	mov	r1, r2
 800c566:	9201      	str	r2, [sp, #4]
 800c568:	f7fd ff72 	bl	800a450 <_malloc_r>
 800c56c:	9a01      	ldr	r2, [sp, #4]
 800c56e:	4605      	mov	r5, r0
 800c570:	b930      	cbnz	r0, 800c580 <_calloc_r+0x24>
 800c572:	4628      	mov	r0, r5
 800c574:	b003      	add	sp, #12
 800c576:	bd30      	pop	{r4, r5, pc}
 800c578:	220c      	movs	r2, #12
 800c57a:	6002      	str	r2, [r0, #0]
 800c57c:	2500      	movs	r5, #0
 800c57e:	e7f8      	b.n	800c572 <_calloc_r+0x16>
 800c580:	4621      	mov	r1, r4
 800c582:	f7fd fef1 	bl	800a368 <memset>
 800c586:	e7f4      	b.n	800c572 <_calloc_r+0x16>

0800c588 <__ssputs_r>:
 800c588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c58c:	688e      	ldr	r6, [r1, #8]
 800c58e:	429e      	cmp	r6, r3
 800c590:	4682      	mov	sl, r0
 800c592:	460c      	mov	r4, r1
 800c594:	4690      	mov	r8, r2
 800c596:	461f      	mov	r7, r3
 800c598:	d838      	bhi.n	800c60c <__ssputs_r+0x84>
 800c59a:	898a      	ldrh	r2, [r1, #12]
 800c59c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5a0:	d032      	beq.n	800c608 <__ssputs_r+0x80>
 800c5a2:	6825      	ldr	r5, [r4, #0]
 800c5a4:	6909      	ldr	r1, [r1, #16]
 800c5a6:	eba5 0901 	sub.w	r9, r5, r1
 800c5aa:	6965      	ldr	r5, [r4, #20]
 800c5ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	444b      	add	r3, r9
 800c5b8:	106d      	asrs	r5, r5, #1
 800c5ba:	429d      	cmp	r5, r3
 800c5bc:	bf38      	it	cc
 800c5be:	461d      	movcc	r5, r3
 800c5c0:	0553      	lsls	r3, r2, #21
 800c5c2:	d531      	bpl.n	800c628 <__ssputs_r+0xa0>
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	f7fd ff43 	bl	800a450 <_malloc_r>
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	b950      	cbnz	r0, 800c5e4 <__ssputs_r+0x5c>
 800c5ce:	230c      	movs	r3, #12
 800c5d0:	f8ca 3000 	str.w	r3, [sl]
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e4:	6921      	ldr	r1, [r4, #16]
 800c5e6:	464a      	mov	r2, r9
 800c5e8:	f7ff fc1a 	bl	800be20 <memcpy>
 800c5ec:	89a3      	ldrh	r3, [r4, #12]
 800c5ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5f6:	81a3      	strh	r3, [r4, #12]
 800c5f8:	6126      	str	r6, [r4, #16]
 800c5fa:	6165      	str	r5, [r4, #20]
 800c5fc:	444e      	add	r6, r9
 800c5fe:	eba5 0509 	sub.w	r5, r5, r9
 800c602:	6026      	str	r6, [r4, #0]
 800c604:	60a5      	str	r5, [r4, #8]
 800c606:	463e      	mov	r6, r7
 800c608:	42be      	cmp	r6, r7
 800c60a:	d900      	bls.n	800c60e <__ssputs_r+0x86>
 800c60c:	463e      	mov	r6, r7
 800c60e:	6820      	ldr	r0, [r4, #0]
 800c610:	4632      	mov	r2, r6
 800c612:	4641      	mov	r1, r8
 800c614:	f000 ff2c 	bl	800d470 <memmove>
 800c618:	68a3      	ldr	r3, [r4, #8]
 800c61a:	1b9b      	subs	r3, r3, r6
 800c61c:	60a3      	str	r3, [r4, #8]
 800c61e:	6823      	ldr	r3, [r4, #0]
 800c620:	4433      	add	r3, r6
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	2000      	movs	r0, #0
 800c626:	e7db      	b.n	800c5e0 <__ssputs_r+0x58>
 800c628:	462a      	mov	r2, r5
 800c62a:	f000 ff3b 	bl	800d4a4 <_realloc_r>
 800c62e:	4606      	mov	r6, r0
 800c630:	2800      	cmp	r0, #0
 800c632:	d1e1      	bne.n	800c5f8 <__ssputs_r+0x70>
 800c634:	6921      	ldr	r1, [r4, #16]
 800c636:	4650      	mov	r0, sl
 800c638:	f7fd fe9e 	bl	800a378 <_free_r>
 800c63c:	e7c7      	b.n	800c5ce <__ssputs_r+0x46>
	...

0800c640 <_svfiprintf_r>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	4698      	mov	r8, r3
 800c646:	898b      	ldrh	r3, [r1, #12]
 800c648:	061b      	lsls	r3, r3, #24
 800c64a:	b09d      	sub	sp, #116	; 0x74
 800c64c:	4607      	mov	r7, r0
 800c64e:	460d      	mov	r5, r1
 800c650:	4614      	mov	r4, r2
 800c652:	d50e      	bpl.n	800c672 <_svfiprintf_r+0x32>
 800c654:	690b      	ldr	r3, [r1, #16]
 800c656:	b963      	cbnz	r3, 800c672 <_svfiprintf_r+0x32>
 800c658:	2140      	movs	r1, #64	; 0x40
 800c65a:	f7fd fef9 	bl	800a450 <_malloc_r>
 800c65e:	6028      	str	r0, [r5, #0]
 800c660:	6128      	str	r0, [r5, #16]
 800c662:	b920      	cbnz	r0, 800c66e <_svfiprintf_r+0x2e>
 800c664:	230c      	movs	r3, #12
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	f04f 30ff 	mov.w	r0, #4294967295
 800c66c:	e0d1      	b.n	800c812 <_svfiprintf_r+0x1d2>
 800c66e:	2340      	movs	r3, #64	; 0x40
 800c670:	616b      	str	r3, [r5, #20]
 800c672:	2300      	movs	r3, #0
 800c674:	9309      	str	r3, [sp, #36]	; 0x24
 800c676:	2320      	movs	r3, #32
 800c678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c67c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c680:	2330      	movs	r3, #48	; 0x30
 800c682:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c82c <_svfiprintf_r+0x1ec>
 800c686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c68a:	f04f 0901 	mov.w	r9, #1
 800c68e:	4623      	mov	r3, r4
 800c690:	469a      	mov	sl, r3
 800c692:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c696:	b10a      	cbz	r2, 800c69c <_svfiprintf_r+0x5c>
 800c698:	2a25      	cmp	r2, #37	; 0x25
 800c69a:	d1f9      	bne.n	800c690 <_svfiprintf_r+0x50>
 800c69c:	ebba 0b04 	subs.w	fp, sl, r4
 800c6a0:	d00b      	beq.n	800c6ba <_svfiprintf_r+0x7a>
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	4622      	mov	r2, r4
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f7ff ff6d 	bl	800c588 <__ssputs_r>
 800c6ae:	3001      	adds	r0, #1
 800c6b0:	f000 80aa 	beq.w	800c808 <_svfiprintf_r+0x1c8>
 800c6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6b6:	445a      	add	r2, fp
 800c6b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 80a2 	beq.w	800c808 <_svfiprintf_r+0x1c8>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6ce:	f10a 0a01 	add.w	sl, sl, #1
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	9307      	str	r3, [sp, #28]
 800c6d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6da:	931a      	str	r3, [sp, #104]	; 0x68
 800c6dc:	4654      	mov	r4, sl
 800c6de:	2205      	movs	r2, #5
 800c6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e4:	4851      	ldr	r0, [pc, #324]	; (800c82c <_svfiprintf_r+0x1ec>)
 800c6e6:	f7f3 fd93 	bl	8000210 <memchr>
 800c6ea:	9a04      	ldr	r2, [sp, #16]
 800c6ec:	b9d8      	cbnz	r0, 800c726 <_svfiprintf_r+0xe6>
 800c6ee:	06d0      	lsls	r0, r2, #27
 800c6f0:	bf44      	itt	mi
 800c6f2:	2320      	movmi	r3, #32
 800c6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f8:	0711      	lsls	r1, r2, #28
 800c6fa:	bf44      	itt	mi
 800c6fc:	232b      	movmi	r3, #43	; 0x2b
 800c6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c702:	f89a 3000 	ldrb.w	r3, [sl]
 800c706:	2b2a      	cmp	r3, #42	; 0x2a
 800c708:	d015      	beq.n	800c736 <_svfiprintf_r+0xf6>
 800c70a:	9a07      	ldr	r2, [sp, #28]
 800c70c:	4654      	mov	r4, sl
 800c70e:	2000      	movs	r0, #0
 800c710:	f04f 0c0a 	mov.w	ip, #10
 800c714:	4621      	mov	r1, r4
 800c716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c71a:	3b30      	subs	r3, #48	; 0x30
 800c71c:	2b09      	cmp	r3, #9
 800c71e:	d94e      	bls.n	800c7be <_svfiprintf_r+0x17e>
 800c720:	b1b0      	cbz	r0, 800c750 <_svfiprintf_r+0x110>
 800c722:	9207      	str	r2, [sp, #28]
 800c724:	e014      	b.n	800c750 <_svfiprintf_r+0x110>
 800c726:	eba0 0308 	sub.w	r3, r0, r8
 800c72a:	fa09 f303 	lsl.w	r3, r9, r3
 800c72e:	4313      	orrs	r3, r2
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	46a2      	mov	sl, r4
 800c734:	e7d2      	b.n	800c6dc <_svfiprintf_r+0x9c>
 800c736:	9b03      	ldr	r3, [sp, #12]
 800c738:	1d19      	adds	r1, r3, #4
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	9103      	str	r1, [sp, #12]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	bfbb      	ittet	lt
 800c742:	425b      	neglt	r3, r3
 800c744:	f042 0202 	orrlt.w	r2, r2, #2
 800c748:	9307      	strge	r3, [sp, #28]
 800c74a:	9307      	strlt	r3, [sp, #28]
 800c74c:	bfb8      	it	lt
 800c74e:	9204      	strlt	r2, [sp, #16]
 800c750:	7823      	ldrb	r3, [r4, #0]
 800c752:	2b2e      	cmp	r3, #46	; 0x2e
 800c754:	d10c      	bne.n	800c770 <_svfiprintf_r+0x130>
 800c756:	7863      	ldrb	r3, [r4, #1]
 800c758:	2b2a      	cmp	r3, #42	; 0x2a
 800c75a:	d135      	bne.n	800c7c8 <_svfiprintf_r+0x188>
 800c75c:	9b03      	ldr	r3, [sp, #12]
 800c75e:	1d1a      	adds	r2, r3, #4
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	9203      	str	r2, [sp, #12]
 800c764:	2b00      	cmp	r3, #0
 800c766:	bfb8      	it	lt
 800c768:	f04f 33ff 	movlt.w	r3, #4294967295
 800c76c:	3402      	adds	r4, #2
 800c76e:	9305      	str	r3, [sp, #20]
 800c770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c83c <_svfiprintf_r+0x1fc>
 800c774:	7821      	ldrb	r1, [r4, #0]
 800c776:	2203      	movs	r2, #3
 800c778:	4650      	mov	r0, sl
 800c77a:	f7f3 fd49 	bl	8000210 <memchr>
 800c77e:	b140      	cbz	r0, 800c792 <_svfiprintf_r+0x152>
 800c780:	2340      	movs	r3, #64	; 0x40
 800c782:	eba0 000a 	sub.w	r0, r0, sl
 800c786:	fa03 f000 	lsl.w	r0, r3, r0
 800c78a:	9b04      	ldr	r3, [sp, #16]
 800c78c:	4303      	orrs	r3, r0
 800c78e:	3401      	adds	r4, #1
 800c790:	9304      	str	r3, [sp, #16]
 800c792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c796:	4826      	ldr	r0, [pc, #152]	; (800c830 <_svfiprintf_r+0x1f0>)
 800c798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c79c:	2206      	movs	r2, #6
 800c79e:	f7f3 fd37 	bl	8000210 <memchr>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d038      	beq.n	800c818 <_svfiprintf_r+0x1d8>
 800c7a6:	4b23      	ldr	r3, [pc, #140]	; (800c834 <_svfiprintf_r+0x1f4>)
 800c7a8:	bb1b      	cbnz	r3, 800c7f2 <_svfiprintf_r+0x1b2>
 800c7aa:	9b03      	ldr	r3, [sp, #12]
 800c7ac:	3307      	adds	r3, #7
 800c7ae:	f023 0307 	bic.w	r3, r3, #7
 800c7b2:	3308      	adds	r3, #8
 800c7b4:	9303      	str	r3, [sp, #12]
 800c7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b8:	4433      	add	r3, r6
 800c7ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c7bc:	e767      	b.n	800c68e <_svfiprintf_r+0x4e>
 800c7be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	2001      	movs	r0, #1
 800c7c6:	e7a5      	b.n	800c714 <_svfiprintf_r+0xd4>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	3401      	adds	r4, #1
 800c7cc:	9305      	str	r3, [sp, #20]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	f04f 0c0a 	mov.w	ip, #10
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7da:	3a30      	subs	r2, #48	; 0x30
 800c7dc:	2a09      	cmp	r2, #9
 800c7de:	d903      	bls.n	800c7e8 <_svfiprintf_r+0x1a8>
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d0c5      	beq.n	800c770 <_svfiprintf_r+0x130>
 800c7e4:	9105      	str	r1, [sp, #20]
 800c7e6:	e7c3      	b.n	800c770 <_svfiprintf_r+0x130>
 800c7e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e7f0      	b.n	800c7d4 <_svfiprintf_r+0x194>
 800c7f2:	ab03      	add	r3, sp, #12
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	462a      	mov	r2, r5
 800c7f8:	4b0f      	ldr	r3, [pc, #60]	; (800c838 <_svfiprintf_r+0x1f8>)
 800c7fa:	a904      	add	r1, sp, #16
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7fd ff3b 	bl	800a678 <_printf_float>
 800c802:	1c42      	adds	r2, r0, #1
 800c804:	4606      	mov	r6, r0
 800c806:	d1d6      	bne.n	800c7b6 <_svfiprintf_r+0x176>
 800c808:	89ab      	ldrh	r3, [r5, #12]
 800c80a:	065b      	lsls	r3, r3, #25
 800c80c:	f53f af2c 	bmi.w	800c668 <_svfiprintf_r+0x28>
 800c810:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c812:	b01d      	add	sp, #116	; 0x74
 800c814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c818:	ab03      	add	r3, sp, #12
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	462a      	mov	r2, r5
 800c81e:	4b06      	ldr	r3, [pc, #24]	; (800c838 <_svfiprintf_r+0x1f8>)
 800c820:	a904      	add	r1, sp, #16
 800c822:	4638      	mov	r0, r7
 800c824:	f7fe f9cc 	bl	800abc0 <_printf_i>
 800c828:	e7eb      	b.n	800c802 <_svfiprintf_r+0x1c2>
 800c82a:	bf00      	nop
 800c82c:	0800f0dc 	.word	0x0800f0dc
 800c830:	0800f0e6 	.word	0x0800f0e6
 800c834:	0800a679 	.word	0x0800a679
 800c838:	0800c589 	.word	0x0800c589
 800c83c:	0800f0e2 	.word	0x0800f0e2

0800c840 <_sungetc_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	1c4b      	adds	r3, r1, #1
 800c844:	4614      	mov	r4, r2
 800c846:	d103      	bne.n	800c850 <_sungetc_r+0x10>
 800c848:	f04f 35ff 	mov.w	r5, #4294967295
 800c84c:	4628      	mov	r0, r5
 800c84e:	bd38      	pop	{r3, r4, r5, pc}
 800c850:	8993      	ldrh	r3, [r2, #12]
 800c852:	f023 0320 	bic.w	r3, r3, #32
 800c856:	8193      	strh	r3, [r2, #12]
 800c858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c85a:	6852      	ldr	r2, [r2, #4]
 800c85c:	b2cd      	uxtb	r5, r1
 800c85e:	b18b      	cbz	r3, 800c884 <_sungetc_r+0x44>
 800c860:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c862:	4293      	cmp	r3, r2
 800c864:	dd08      	ble.n	800c878 <_sungetc_r+0x38>
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	1e5a      	subs	r2, r3, #1
 800c86a:	6022      	str	r2, [r4, #0]
 800c86c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c870:	6863      	ldr	r3, [r4, #4]
 800c872:	3301      	adds	r3, #1
 800c874:	6063      	str	r3, [r4, #4]
 800c876:	e7e9      	b.n	800c84c <_sungetc_r+0xc>
 800c878:	4621      	mov	r1, r4
 800c87a:	f000 fbc3 	bl	800d004 <__submore>
 800c87e:	2800      	cmp	r0, #0
 800c880:	d0f1      	beq.n	800c866 <_sungetc_r+0x26>
 800c882:	e7e1      	b.n	800c848 <_sungetc_r+0x8>
 800c884:	6921      	ldr	r1, [r4, #16]
 800c886:	6823      	ldr	r3, [r4, #0]
 800c888:	b151      	cbz	r1, 800c8a0 <_sungetc_r+0x60>
 800c88a:	4299      	cmp	r1, r3
 800c88c:	d208      	bcs.n	800c8a0 <_sungetc_r+0x60>
 800c88e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c892:	42a9      	cmp	r1, r5
 800c894:	d104      	bne.n	800c8a0 <_sungetc_r+0x60>
 800c896:	3b01      	subs	r3, #1
 800c898:	3201      	adds	r2, #1
 800c89a:	6023      	str	r3, [r4, #0]
 800c89c:	6062      	str	r2, [r4, #4]
 800c89e:	e7d5      	b.n	800c84c <_sungetc_r+0xc>
 800c8a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c8a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8a8:	6363      	str	r3, [r4, #52]	; 0x34
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	63a3      	str	r3, [r4, #56]	; 0x38
 800c8ae:	4623      	mov	r3, r4
 800c8b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e7dc      	b.n	800c874 <_sungetc_r+0x34>

0800c8ba <__ssrefill_r>:
 800c8ba:	b510      	push	{r4, lr}
 800c8bc:	460c      	mov	r4, r1
 800c8be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c8c0:	b169      	cbz	r1, 800c8de <__ssrefill_r+0x24>
 800c8c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8c6:	4299      	cmp	r1, r3
 800c8c8:	d001      	beq.n	800c8ce <__ssrefill_r+0x14>
 800c8ca:	f7fd fd55 	bl	800a378 <_free_r>
 800c8ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8d0:	6063      	str	r3, [r4, #4]
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	6360      	str	r0, [r4, #52]	; 0x34
 800c8d6:	b113      	cbz	r3, 800c8de <__ssrefill_r+0x24>
 800c8d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	bd10      	pop	{r4, pc}
 800c8de:	6923      	ldr	r3, [r4, #16]
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	6063      	str	r3, [r4, #4]
 800c8e6:	89a3      	ldrh	r3, [r4, #12]
 800c8e8:	f043 0320 	orr.w	r3, r3, #32
 800c8ec:	81a3      	strh	r3, [r4, #12]
 800c8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f2:	e7f3      	b.n	800c8dc <__ssrefill_r+0x22>

0800c8f4 <__ssvfiscanf_r>:
 800c8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c8fe:	2100      	movs	r1, #0
 800c900:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c904:	49a6      	ldr	r1, [pc, #664]	; (800cba0 <__ssvfiscanf_r+0x2ac>)
 800c906:	91a0      	str	r1, [sp, #640]	; 0x280
 800c908:	f10d 0804 	add.w	r8, sp, #4
 800c90c:	49a5      	ldr	r1, [pc, #660]	; (800cba4 <__ssvfiscanf_r+0x2b0>)
 800c90e:	4fa6      	ldr	r7, [pc, #664]	; (800cba8 <__ssvfiscanf_r+0x2b4>)
 800c910:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cbac <__ssvfiscanf_r+0x2b8>
 800c914:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c918:	4606      	mov	r6, r0
 800c91a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	7813      	ldrb	r3, [r2, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f000 815a 	beq.w	800cbda <__ssvfiscanf_r+0x2e6>
 800c926:	5dd9      	ldrb	r1, [r3, r7]
 800c928:	f011 0108 	ands.w	r1, r1, #8
 800c92c:	f102 0501 	add.w	r5, r2, #1
 800c930:	d019      	beq.n	800c966 <__ssvfiscanf_r+0x72>
 800c932:	6863      	ldr	r3, [r4, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	dd0f      	ble.n	800c958 <__ssvfiscanf_r+0x64>
 800c938:	6823      	ldr	r3, [r4, #0]
 800c93a:	781a      	ldrb	r2, [r3, #0]
 800c93c:	5cba      	ldrb	r2, [r7, r2]
 800c93e:	0712      	lsls	r2, r2, #28
 800c940:	d401      	bmi.n	800c946 <__ssvfiscanf_r+0x52>
 800c942:	462a      	mov	r2, r5
 800c944:	e7eb      	b.n	800c91e <__ssvfiscanf_r+0x2a>
 800c946:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c948:	3201      	adds	r2, #1
 800c94a:	9245      	str	r2, [sp, #276]	; 0x114
 800c94c:	6862      	ldr	r2, [r4, #4]
 800c94e:	3301      	adds	r3, #1
 800c950:	3a01      	subs	r2, #1
 800c952:	6062      	str	r2, [r4, #4]
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	e7ec      	b.n	800c932 <__ssvfiscanf_r+0x3e>
 800c958:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c95a:	4621      	mov	r1, r4
 800c95c:	4630      	mov	r0, r6
 800c95e:	4798      	blx	r3
 800c960:	2800      	cmp	r0, #0
 800c962:	d0e9      	beq.n	800c938 <__ssvfiscanf_r+0x44>
 800c964:	e7ed      	b.n	800c942 <__ssvfiscanf_r+0x4e>
 800c966:	2b25      	cmp	r3, #37	; 0x25
 800c968:	d012      	beq.n	800c990 <__ssvfiscanf_r+0x9c>
 800c96a:	469a      	mov	sl, r3
 800c96c:	6863      	ldr	r3, [r4, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f340 8091 	ble.w	800ca96 <__ssvfiscanf_r+0x1a2>
 800c974:	6822      	ldr	r2, [r4, #0]
 800c976:	7813      	ldrb	r3, [r2, #0]
 800c978:	4553      	cmp	r3, sl
 800c97a:	f040 812e 	bne.w	800cbda <__ssvfiscanf_r+0x2e6>
 800c97e:	6863      	ldr	r3, [r4, #4]
 800c980:	3b01      	subs	r3, #1
 800c982:	6063      	str	r3, [r4, #4]
 800c984:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c986:	3201      	adds	r2, #1
 800c988:	3301      	adds	r3, #1
 800c98a:	6022      	str	r2, [r4, #0]
 800c98c:	9345      	str	r3, [sp, #276]	; 0x114
 800c98e:	e7d8      	b.n	800c942 <__ssvfiscanf_r+0x4e>
 800c990:	9141      	str	r1, [sp, #260]	; 0x104
 800c992:	9143      	str	r1, [sp, #268]	; 0x10c
 800c994:	7853      	ldrb	r3, [r2, #1]
 800c996:	2b2a      	cmp	r3, #42	; 0x2a
 800c998:	bf02      	ittt	eq
 800c99a:	2310      	moveq	r3, #16
 800c99c:	1c95      	addeq	r5, r2, #2
 800c99e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c9a0:	220a      	movs	r2, #10
 800c9a2:	46aa      	mov	sl, r5
 800c9a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c9a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c9ac:	2b09      	cmp	r3, #9
 800c9ae:	d91d      	bls.n	800c9ec <__ssvfiscanf_r+0xf8>
 800c9b0:	487e      	ldr	r0, [pc, #504]	; (800cbac <__ssvfiscanf_r+0x2b8>)
 800c9b2:	2203      	movs	r2, #3
 800c9b4:	f7f3 fc2c 	bl	8000210 <memchr>
 800c9b8:	b140      	cbz	r0, 800c9cc <__ssvfiscanf_r+0xd8>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	eba0 0009 	sub.w	r0, r0, r9
 800c9c0:	fa03 f000 	lsl.w	r0, r3, r0
 800c9c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c9c6:	4318      	orrs	r0, r3
 800c9c8:	9041      	str	r0, [sp, #260]	; 0x104
 800c9ca:	4655      	mov	r5, sl
 800c9cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c9d0:	2b78      	cmp	r3, #120	; 0x78
 800c9d2:	d806      	bhi.n	800c9e2 <__ssvfiscanf_r+0xee>
 800c9d4:	2b57      	cmp	r3, #87	; 0x57
 800c9d6:	d810      	bhi.n	800c9fa <__ssvfiscanf_r+0x106>
 800c9d8:	2b25      	cmp	r3, #37	; 0x25
 800c9da:	d0c6      	beq.n	800c96a <__ssvfiscanf_r+0x76>
 800c9dc:	d856      	bhi.n	800ca8c <__ssvfiscanf_r+0x198>
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d064      	beq.n	800caac <__ssvfiscanf_r+0x1b8>
 800c9e2:	2303      	movs	r3, #3
 800c9e4:	9347      	str	r3, [sp, #284]	; 0x11c
 800c9e6:	230a      	movs	r3, #10
 800c9e8:	9342      	str	r3, [sp, #264]	; 0x108
 800c9ea:	e071      	b.n	800cad0 <__ssvfiscanf_r+0x1dc>
 800c9ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c9ee:	fb02 1103 	mla	r1, r2, r3, r1
 800c9f2:	3930      	subs	r1, #48	; 0x30
 800c9f4:	9143      	str	r1, [sp, #268]	; 0x10c
 800c9f6:	4655      	mov	r5, sl
 800c9f8:	e7d3      	b.n	800c9a2 <__ssvfiscanf_r+0xae>
 800c9fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c9fe:	2a20      	cmp	r2, #32
 800ca00:	d8ef      	bhi.n	800c9e2 <__ssvfiscanf_r+0xee>
 800ca02:	a101      	add	r1, pc, #4	; (adr r1, 800ca08 <__ssvfiscanf_r+0x114>)
 800ca04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca08:	0800cabb 	.word	0x0800cabb
 800ca0c:	0800c9e3 	.word	0x0800c9e3
 800ca10:	0800c9e3 	.word	0x0800c9e3
 800ca14:	0800cb19 	.word	0x0800cb19
 800ca18:	0800c9e3 	.word	0x0800c9e3
 800ca1c:	0800c9e3 	.word	0x0800c9e3
 800ca20:	0800c9e3 	.word	0x0800c9e3
 800ca24:	0800c9e3 	.word	0x0800c9e3
 800ca28:	0800c9e3 	.word	0x0800c9e3
 800ca2c:	0800c9e3 	.word	0x0800c9e3
 800ca30:	0800c9e3 	.word	0x0800c9e3
 800ca34:	0800cb2f 	.word	0x0800cb2f
 800ca38:	0800cb05 	.word	0x0800cb05
 800ca3c:	0800ca93 	.word	0x0800ca93
 800ca40:	0800ca93 	.word	0x0800ca93
 800ca44:	0800ca93 	.word	0x0800ca93
 800ca48:	0800c9e3 	.word	0x0800c9e3
 800ca4c:	0800cb09 	.word	0x0800cb09
 800ca50:	0800c9e3 	.word	0x0800c9e3
 800ca54:	0800c9e3 	.word	0x0800c9e3
 800ca58:	0800c9e3 	.word	0x0800c9e3
 800ca5c:	0800c9e3 	.word	0x0800c9e3
 800ca60:	0800cb3f 	.word	0x0800cb3f
 800ca64:	0800cb11 	.word	0x0800cb11
 800ca68:	0800cab3 	.word	0x0800cab3
 800ca6c:	0800c9e3 	.word	0x0800c9e3
 800ca70:	0800c9e3 	.word	0x0800c9e3
 800ca74:	0800cb3b 	.word	0x0800cb3b
 800ca78:	0800c9e3 	.word	0x0800c9e3
 800ca7c:	0800cb05 	.word	0x0800cb05
 800ca80:	0800c9e3 	.word	0x0800c9e3
 800ca84:	0800c9e3 	.word	0x0800c9e3
 800ca88:	0800cabb 	.word	0x0800cabb
 800ca8c:	3b45      	subs	r3, #69	; 0x45
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d8a7      	bhi.n	800c9e2 <__ssvfiscanf_r+0xee>
 800ca92:	2305      	movs	r3, #5
 800ca94:	e01b      	b.n	800cace <__ssvfiscanf_r+0x1da>
 800ca96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca98:	4621      	mov	r1, r4
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	4798      	blx	r3
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	f43f af68 	beq.w	800c974 <__ssvfiscanf_r+0x80>
 800caa4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800caa6:	2800      	cmp	r0, #0
 800caa8:	f040 808d 	bne.w	800cbc6 <__ssvfiscanf_r+0x2d2>
 800caac:	f04f 30ff 	mov.w	r0, #4294967295
 800cab0:	e08f      	b.n	800cbd2 <__ssvfiscanf_r+0x2de>
 800cab2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cab4:	f042 0220 	orr.w	r2, r2, #32
 800cab8:	9241      	str	r2, [sp, #260]	; 0x104
 800caba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cabc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cac0:	9241      	str	r2, [sp, #260]	; 0x104
 800cac2:	2210      	movs	r2, #16
 800cac4:	2b6f      	cmp	r3, #111	; 0x6f
 800cac6:	9242      	str	r2, [sp, #264]	; 0x108
 800cac8:	bf34      	ite	cc
 800caca:	2303      	movcc	r3, #3
 800cacc:	2304      	movcs	r3, #4
 800cace:	9347      	str	r3, [sp, #284]	; 0x11c
 800cad0:	6863      	ldr	r3, [r4, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	dd42      	ble.n	800cb5c <__ssvfiscanf_r+0x268>
 800cad6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cad8:	0659      	lsls	r1, r3, #25
 800cada:	d404      	bmi.n	800cae6 <__ssvfiscanf_r+0x1f2>
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	781a      	ldrb	r2, [r3, #0]
 800cae0:	5cba      	ldrb	r2, [r7, r2]
 800cae2:	0712      	lsls	r2, r2, #28
 800cae4:	d441      	bmi.n	800cb6a <__ssvfiscanf_r+0x276>
 800cae6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cae8:	2b02      	cmp	r3, #2
 800caea:	dc50      	bgt.n	800cb8e <__ssvfiscanf_r+0x29a>
 800caec:	466b      	mov	r3, sp
 800caee:	4622      	mov	r2, r4
 800caf0:	a941      	add	r1, sp, #260	; 0x104
 800caf2:	4630      	mov	r0, r6
 800caf4:	f000 f876 	bl	800cbe4 <_scanf_chars>
 800caf8:	2801      	cmp	r0, #1
 800cafa:	d06e      	beq.n	800cbda <__ssvfiscanf_r+0x2e6>
 800cafc:	2802      	cmp	r0, #2
 800cafe:	f47f af20 	bne.w	800c942 <__ssvfiscanf_r+0x4e>
 800cb02:	e7cf      	b.n	800caa4 <__ssvfiscanf_r+0x1b0>
 800cb04:	220a      	movs	r2, #10
 800cb06:	e7dd      	b.n	800cac4 <__ssvfiscanf_r+0x1d0>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	9342      	str	r3, [sp, #264]	; 0x108
 800cb0c:	2303      	movs	r3, #3
 800cb0e:	e7de      	b.n	800cace <__ssvfiscanf_r+0x1da>
 800cb10:	2308      	movs	r3, #8
 800cb12:	9342      	str	r3, [sp, #264]	; 0x108
 800cb14:	2304      	movs	r3, #4
 800cb16:	e7da      	b.n	800cace <__ssvfiscanf_r+0x1da>
 800cb18:	4629      	mov	r1, r5
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	f000 f9c6 	bl	800ceac <__sccl>
 800cb20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb26:	9341      	str	r3, [sp, #260]	; 0x104
 800cb28:	4605      	mov	r5, r0
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e7cf      	b.n	800cace <__ssvfiscanf_r+0x1da>
 800cb2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb34:	9341      	str	r3, [sp, #260]	; 0x104
 800cb36:	2300      	movs	r3, #0
 800cb38:	e7c9      	b.n	800cace <__ssvfiscanf_r+0x1da>
 800cb3a:	2302      	movs	r3, #2
 800cb3c:	e7c7      	b.n	800cace <__ssvfiscanf_r+0x1da>
 800cb3e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cb40:	06c3      	lsls	r3, r0, #27
 800cb42:	f53f aefe 	bmi.w	800c942 <__ssvfiscanf_r+0x4e>
 800cb46:	9b00      	ldr	r3, [sp, #0]
 800cb48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb4a:	1d19      	adds	r1, r3, #4
 800cb4c:	9100      	str	r1, [sp, #0]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f010 0f01 	tst.w	r0, #1
 800cb54:	bf14      	ite	ne
 800cb56:	801a      	strhne	r2, [r3, #0]
 800cb58:	601a      	streq	r2, [r3, #0]
 800cb5a:	e6f2      	b.n	800c942 <__ssvfiscanf_r+0x4e>
 800cb5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb5e:	4621      	mov	r1, r4
 800cb60:	4630      	mov	r0, r6
 800cb62:	4798      	blx	r3
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d0b6      	beq.n	800cad6 <__ssvfiscanf_r+0x1e2>
 800cb68:	e79c      	b.n	800caa4 <__ssvfiscanf_r+0x1b0>
 800cb6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb6c:	3201      	adds	r2, #1
 800cb6e:	9245      	str	r2, [sp, #276]	; 0x114
 800cb70:	6862      	ldr	r2, [r4, #4]
 800cb72:	3a01      	subs	r2, #1
 800cb74:	2a00      	cmp	r2, #0
 800cb76:	6062      	str	r2, [r4, #4]
 800cb78:	dd02      	ble.n	800cb80 <__ssvfiscanf_r+0x28c>
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	e7ad      	b.n	800cadc <__ssvfiscanf_r+0x1e8>
 800cb80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb82:	4621      	mov	r1, r4
 800cb84:	4630      	mov	r0, r6
 800cb86:	4798      	blx	r3
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d0a7      	beq.n	800cadc <__ssvfiscanf_r+0x1e8>
 800cb8c:	e78a      	b.n	800caa4 <__ssvfiscanf_r+0x1b0>
 800cb8e:	2b04      	cmp	r3, #4
 800cb90:	dc0e      	bgt.n	800cbb0 <__ssvfiscanf_r+0x2bc>
 800cb92:	466b      	mov	r3, sp
 800cb94:	4622      	mov	r2, r4
 800cb96:	a941      	add	r1, sp, #260	; 0x104
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f000 f87d 	bl	800cc98 <_scanf_i>
 800cb9e:	e7ab      	b.n	800caf8 <__ssvfiscanf_r+0x204>
 800cba0:	0800c841 	.word	0x0800c841
 800cba4:	0800c8bb 	.word	0x0800c8bb
 800cba8:	0800edf3 	.word	0x0800edf3
 800cbac:	0800f0e2 	.word	0x0800f0e2
 800cbb0:	4b0b      	ldr	r3, [pc, #44]	; (800cbe0 <__ssvfiscanf_r+0x2ec>)
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f43f aec5 	beq.w	800c942 <__ssvfiscanf_r+0x4e>
 800cbb8:	466b      	mov	r3, sp
 800cbba:	4622      	mov	r2, r4
 800cbbc:	a941      	add	r1, sp, #260	; 0x104
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	f3af 8000 	nop.w
 800cbc4:	e798      	b.n	800caf8 <__ssvfiscanf_r+0x204>
 800cbc6:	89a3      	ldrh	r3, [r4, #12]
 800cbc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cbcc:	bf18      	it	ne
 800cbce:	f04f 30ff 	movne.w	r0, #4294967295
 800cbd2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbda:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cbdc:	e7f9      	b.n	800cbd2 <__ssvfiscanf_r+0x2de>
 800cbde:	bf00      	nop
 800cbe0:	00000000 	.word	0x00000000

0800cbe4 <_scanf_chars>:
 800cbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbe8:	4615      	mov	r5, r2
 800cbea:	688a      	ldr	r2, [r1, #8]
 800cbec:	4680      	mov	r8, r0
 800cbee:	460c      	mov	r4, r1
 800cbf0:	b932      	cbnz	r2, 800cc00 <_scanf_chars+0x1c>
 800cbf2:	698a      	ldr	r2, [r1, #24]
 800cbf4:	2a00      	cmp	r2, #0
 800cbf6:	bf0c      	ite	eq
 800cbf8:	2201      	moveq	r2, #1
 800cbfa:	f04f 32ff 	movne.w	r2, #4294967295
 800cbfe:	608a      	str	r2, [r1, #8]
 800cc00:	6822      	ldr	r2, [r4, #0]
 800cc02:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cc94 <_scanf_chars+0xb0>
 800cc06:	06d1      	lsls	r1, r2, #27
 800cc08:	bf5f      	itttt	pl
 800cc0a:	681a      	ldrpl	r2, [r3, #0]
 800cc0c:	1d11      	addpl	r1, r2, #4
 800cc0e:	6019      	strpl	r1, [r3, #0]
 800cc10:	6816      	ldrpl	r6, [r2, #0]
 800cc12:	2700      	movs	r7, #0
 800cc14:	69a0      	ldr	r0, [r4, #24]
 800cc16:	b188      	cbz	r0, 800cc3c <_scanf_chars+0x58>
 800cc18:	2801      	cmp	r0, #1
 800cc1a:	d107      	bne.n	800cc2c <_scanf_chars+0x48>
 800cc1c:	682a      	ldr	r2, [r5, #0]
 800cc1e:	7811      	ldrb	r1, [r2, #0]
 800cc20:	6962      	ldr	r2, [r4, #20]
 800cc22:	5c52      	ldrb	r2, [r2, r1]
 800cc24:	b952      	cbnz	r2, 800cc3c <_scanf_chars+0x58>
 800cc26:	2f00      	cmp	r7, #0
 800cc28:	d031      	beq.n	800cc8e <_scanf_chars+0xaa>
 800cc2a:	e022      	b.n	800cc72 <_scanf_chars+0x8e>
 800cc2c:	2802      	cmp	r0, #2
 800cc2e:	d120      	bne.n	800cc72 <_scanf_chars+0x8e>
 800cc30:	682b      	ldr	r3, [r5, #0]
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cc38:	071b      	lsls	r3, r3, #28
 800cc3a:	d41a      	bmi.n	800cc72 <_scanf_chars+0x8e>
 800cc3c:	6823      	ldr	r3, [r4, #0]
 800cc3e:	06da      	lsls	r2, r3, #27
 800cc40:	bf5e      	ittt	pl
 800cc42:	682b      	ldrpl	r3, [r5, #0]
 800cc44:	781b      	ldrbpl	r3, [r3, #0]
 800cc46:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cc4a:	682a      	ldr	r2, [r5, #0]
 800cc4c:	686b      	ldr	r3, [r5, #4]
 800cc4e:	3201      	adds	r2, #1
 800cc50:	602a      	str	r2, [r5, #0]
 800cc52:	68a2      	ldr	r2, [r4, #8]
 800cc54:	3b01      	subs	r3, #1
 800cc56:	3a01      	subs	r2, #1
 800cc58:	606b      	str	r3, [r5, #4]
 800cc5a:	3701      	adds	r7, #1
 800cc5c:	60a2      	str	r2, [r4, #8]
 800cc5e:	b142      	cbz	r2, 800cc72 <_scanf_chars+0x8e>
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	dcd7      	bgt.n	800cc14 <_scanf_chars+0x30>
 800cc64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cc68:	4629      	mov	r1, r5
 800cc6a:	4640      	mov	r0, r8
 800cc6c:	4798      	blx	r3
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d0d0      	beq.n	800cc14 <_scanf_chars+0x30>
 800cc72:	6823      	ldr	r3, [r4, #0]
 800cc74:	f013 0310 	ands.w	r3, r3, #16
 800cc78:	d105      	bne.n	800cc86 <_scanf_chars+0xa2>
 800cc7a:	68e2      	ldr	r2, [r4, #12]
 800cc7c:	3201      	adds	r2, #1
 800cc7e:	60e2      	str	r2, [r4, #12]
 800cc80:	69a2      	ldr	r2, [r4, #24]
 800cc82:	b102      	cbz	r2, 800cc86 <_scanf_chars+0xa2>
 800cc84:	7033      	strb	r3, [r6, #0]
 800cc86:	6923      	ldr	r3, [r4, #16]
 800cc88:	443b      	add	r3, r7
 800cc8a:	6123      	str	r3, [r4, #16]
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc92:	bf00      	nop
 800cc94:	0800edf3 	.word	0x0800edf3

0800cc98 <_scanf_i>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	4698      	mov	r8, r3
 800cc9e:	4b76      	ldr	r3, [pc, #472]	; (800ce78 <_scanf_i+0x1e0>)
 800cca0:	460c      	mov	r4, r1
 800cca2:	4682      	mov	sl, r0
 800cca4:	4616      	mov	r6, r2
 800cca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccaa:	b087      	sub	sp, #28
 800ccac:	ab03      	add	r3, sp, #12
 800ccae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ccb2:	4b72      	ldr	r3, [pc, #456]	; (800ce7c <_scanf_i+0x1e4>)
 800ccb4:	69a1      	ldr	r1, [r4, #24]
 800ccb6:	4a72      	ldr	r2, [pc, #456]	; (800ce80 <_scanf_i+0x1e8>)
 800ccb8:	2903      	cmp	r1, #3
 800ccba:	bf18      	it	ne
 800ccbc:	461a      	movne	r2, r3
 800ccbe:	68a3      	ldr	r3, [r4, #8]
 800ccc0:	9201      	str	r2, [sp, #4]
 800ccc2:	1e5a      	subs	r2, r3, #1
 800ccc4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ccc8:	bf88      	it	hi
 800ccca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ccce:	4627      	mov	r7, r4
 800ccd0:	bf82      	ittt	hi
 800ccd2:	eb03 0905 	addhi.w	r9, r3, r5
 800ccd6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ccda:	60a3      	strhi	r3, [r4, #8]
 800ccdc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cce0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cce4:	bf98      	it	ls
 800cce6:	f04f 0900 	movls.w	r9, #0
 800ccea:	6023      	str	r3, [r4, #0]
 800ccec:	463d      	mov	r5, r7
 800ccee:	f04f 0b00 	mov.w	fp, #0
 800ccf2:	6831      	ldr	r1, [r6, #0]
 800ccf4:	ab03      	add	r3, sp, #12
 800ccf6:	7809      	ldrb	r1, [r1, #0]
 800ccf8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ccfc:	2202      	movs	r2, #2
 800ccfe:	f7f3 fa87 	bl	8000210 <memchr>
 800cd02:	b328      	cbz	r0, 800cd50 <_scanf_i+0xb8>
 800cd04:	f1bb 0f01 	cmp.w	fp, #1
 800cd08:	d159      	bne.n	800cdbe <_scanf_i+0x126>
 800cd0a:	6862      	ldr	r2, [r4, #4]
 800cd0c:	b92a      	cbnz	r2, 800cd1a <_scanf_i+0x82>
 800cd0e:	6822      	ldr	r2, [r4, #0]
 800cd10:	2308      	movs	r3, #8
 800cd12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd16:	6063      	str	r3, [r4, #4]
 800cd18:	6022      	str	r2, [r4, #0]
 800cd1a:	6822      	ldr	r2, [r4, #0]
 800cd1c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cd20:	6022      	str	r2, [r4, #0]
 800cd22:	68a2      	ldr	r2, [r4, #8]
 800cd24:	1e51      	subs	r1, r2, #1
 800cd26:	60a1      	str	r1, [r4, #8]
 800cd28:	b192      	cbz	r2, 800cd50 <_scanf_i+0xb8>
 800cd2a:	6832      	ldr	r2, [r6, #0]
 800cd2c:	1c51      	adds	r1, r2, #1
 800cd2e:	6031      	str	r1, [r6, #0]
 800cd30:	7812      	ldrb	r2, [r2, #0]
 800cd32:	f805 2b01 	strb.w	r2, [r5], #1
 800cd36:	6872      	ldr	r2, [r6, #4]
 800cd38:	3a01      	subs	r2, #1
 800cd3a:	2a00      	cmp	r2, #0
 800cd3c:	6072      	str	r2, [r6, #4]
 800cd3e:	dc07      	bgt.n	800cd50 <_scanf_i+0xb8>
 800cd40:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cd44:	4631      	mov	r1, r6
 800cd46:	4650      	mov	r0, sl
 800cd48:	4790      	blx	r2
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	f040 8085 	bne.w	800ce5a <_scanf_i+0x1c2>
 800cd50:	f10b 0b01 	add.w	fp, fp, #1
 800cd54:	f1bb 0f03 	cmp.w	fp, #3
 800cd58:	d1cb      	bne.n	800ccf2 <_scanf_i+0x5a>
 800cd5a:	6863      	ldr	r3, [r4, #4]
 800cd5c:	b90b      	cbnz	r3, 800cd62 <_scanf_i+0xca>
 800cd5e:	230a      	movs	r3, #10
 800cd60:	6063      	str	r3, [r4, #4]
 800cd62:	6863      	ldr	r3, [r4, #4]
 800cd64:	4947      	ldr	r1, [pc, #284]	; (800ce84 <_scanf_i+0x1ec>)
 800cd66:	6960      	ldr	r0, [r4, #20]
 800cd68:	1ac9      	subs	r1, r1, r3
 800cd6a:	f000 f89f 	bl	800ceac <__sccl>
 800cd6e:	f04f 0b00 	mov.w	fp, #0
 800cd72:	68a3      	ldr	r3, [r4, #8]
 800cd74:	6822      	ldr	r2, [r4, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d03d      	beq.n	800cdf6 <_scanf_i+0x15e>
 800cd7a:	6831      	ldr	r1, [r6, #0]
 800cd7c:	6960      	ldr	r0, [r4, #20]
 800cd7e:	f891 c000 	ldrb.w	ip, [r1]
 800cd82:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d035      	beq.n	800cdf6 <_scanf_i+0x15e>
 800cd8a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cd8e:	d124      	bne.n	800cdda <_scanf_i+0x142>
 800cd90:	0510      	lsls	r0, r2, #20
 800cd92:	d522      	bpl.n	800cdda <_scanf_i+0x142>
 800cd94:	f10b 0b01 	add.w	fp, fp, #1
 800cd98:	f1b9 0f00 	cmp.w	r9, #0
 800cd9c:	d003      	beq.n	800cda6 <_scanf_i+0x10e>
 800cd9e:	3301      	adds	r3, #1
 800cda0:	f109 39ff 	add.w	r9, r9, #4294967295
 800cda4:	60a3      	str	r3, [r4, #8]
 800cda6:	6873      	ldr	r3, [r6, #4]
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	6073      	str	r3, [r6, #4]
 800cdae:	dd1b      	ble.n	800cde8 <_scanf_i+0x150>
 800cdb0:	6833      	ldr	r3, [r6, #0]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	6033      	str	r3, [r6, #0]
 800cdb6:	68a3      	ldr	r3, [r4, #8]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	60a3      	str	r3, [r4, #8]
 800cdbc:	e7d9      	b.n	800cd72 <_scanf_i+0xda>
 800cdbe:	f1bb 0f02 	cmp.w	fp, #2
 800cdc2:	d1ae      	bne.n	800cd22 <_scanf_i+0x8a>
 800cdc4:	6822      	ldr	r2, [r4, #0]
 800cdc6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cdca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cdce:	d1bf      	bne.n	800cd50 <_scanf_i+0xb8>
 800cdd0:	2310      	movs	r3, #16
 800cdd2:	6063      	str	r3, [r4, #4]
 800cdd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cdd8:	e7a2      	b.n	800cd20 <_scanf_i+0x88>
 800cdda:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cdde:	6022      	str	r2, [r4, #0]
 800cde0:	780b      	ldrb	r3, [r1, #0]
 800cde2:	f805 3b01 	strb.w	r3, [r5], #1
 800cde6:	e7de      	b.n	800cda6 <_scanf_i+0x10e>
 800cde8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cdec:	4631      	mov	r1, r6
 800cdee:	4650      	mov	r0, sl
 800cdf0:	4798      	blx	r3
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d0df      	beq.n	800cdb6 <_scanf_i+0x11e>
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	05db      	lsls	r3, r3, #23
 800cdfa:	d50d      	bpl.n	800ce18 <_scanf_i+0x180>
 800cdfc:	42bd      	cmp	r5, r7
 800cdfe:	d909      	bls.n	800ce14 <_scanf_i+0x17c>
 800ce00:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ce04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce08:	4632      	mov	r2, r6
 800ce0a:	4650      	mov	r0, sl
 800ce0c:	4798      	blx	r3
 800ce0e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ce12:	464d      	mov	r5, r9
 800ce14:	42bd      	cmp	r5, r7
 800ce16:	d02d      	beq.n	800ce74 <_scanf_i+0x1dc>
 800ce18:	6822      	ldr	r2, [r4, #0]
 800ce1a:	f012 0210 	ands.w	r2, r2, #16
 800ce1e:	d113      	bne.n	800ce48 <_scanf_i+0x1b0>
 800ce20:	702a      	strb	r2, [r5, #0]
 800ce22:	6863      	ldr	r3, [r4, #4]
 800ce24:	9e01      	ldr	r6, [sp, #4]
 800ce26:	4639      	mov	r1, r7
 800ce28:	4650      	mov	r0, sl
 800ce2a:	47b0      	blx	r6
 800ce2c:	6821      	ldr	r1, [r4, #0]
 800ce2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce32:	f011 0f20 	tst.w	r1, #32
 800ce36:	d013      	beq.n	800ce60 <_scanf_i+0x1c8>
 800ce38:	1d1a      	adds	r2, r3, #4
 800ce3a:	f8c8 2000 	str.w	r2, [r8]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6018      	str	r0, [r3, #0]
 800ce42:	68e3      	ldr	r3, [r4, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	60e3      	str	r3, [r4, #12]
 800ce48:	1bed      	subs	r5, r5, r7
 800ce4a:	44ab      	add	fp, r5
 800ce4c:	6925      	ldr	r5, [r4, #16]
 800ce4e:	445d      	add	r5, fp
 800ce50:	6125      	str	r5, [r4, #16]
 800ce52:	2000      	movs	r0, #0
 800ce54:	b007      	add	sp, #28
 800ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5a:	f04f 0b00 	mov.w	fp, #0
 800ce5e:	e7ca      	b.n	800cdf6 <_scanf_i+0x15e>
 800ce60:	1d1a      	adds	r2, r3, #4
 800ce62:	f8c8 2000 	str.w	r2, [r8]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f011 0f01 	tst.w	r1, #1
 800ce6c:	bf14      	ite	ne
 800ce6e:	8018      	strhne	r0, [r3, #0]
 800ce70:	6018      	streq	r0, [r3, #0]
 800ce72:	e7e6      	b.n	800ce42 <_scanf_i+0x1aa>
 800ce74:	2001      	movs	r0, #1
 800ce76:	e7ed      	b.n	800ce54 <_scanf_i+0x1bc>
 800ce78:	0800e878 	.word	0x0800e878
 800ce7c:	0800d001 	.word	0x0800d001
 800ce80:	0800b0a5 	.word	0x0800b0a5
 800ce84:	0800f106 	.word	0x0800f106

0800ce88 <_read_r>:
 800ce88:	b538      	push	{r3, r4, r5, lr}
 800ce8a:	4d07      	ldr	r5, [pc, #28]	; (800cea8 <_read_r+0x20>)
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	4608      	mov	r0, r1
 800ce90:	4611      	mov	r1, r2
 800ce92:	2200      	movs	r2, #0
 800ce94:	602a      	str	r2, [r5, #0]
 800ce96:	461a      	mov	r2, r3
 800ce98:	f7f6 fef6 	bl	8003c88 <_read>
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d102      	bne.n	800cea6 <_read_r+0x1e>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	b103      	cbz	r3, 800cea6 <_read_r+0x1e>
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	bd38      	pop	{r3, r4, r5, pc}
 800cea8:	20000d78 	.word	0x20000d78

0800ceac <__sccl>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	780b      	ldrb	r3, [r1, #0]
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	2b5e      	cmp	r3, #94	; 0x5e
 800ceb4:	bf0b      	itete	eq
 800ceb6:	784b      	ldrbeq	r3, [r1, #1]
 800ceb8:	1c48      	addne	r0, r1, #1
 800ceba:	1c88      	addeq	r0, r1, #2
 800cebc:	2200      	movne	r2, #0
 800cebe:	bf08      	it	eq
 800cec0:	2201      	moveq	r2, #1
 800cec2:	1e61      	subs	r1, r4, #1
 800cec4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cec8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cecc:	42a9      	cmp	r1, r5
 800cece:	d1fb      	bne.n	800cec8 <__sccl+0x1c>
 800ced0:	b90b      	cbnz	r3, 800ced6 <__sccl+0x2a>
 800ced2:	3801      	subs	r0, #1
 800ced4:	bd70      	pop	{r4, r5, r6, pc}
 800ced6:	f082 0201 	eor.w	r2, r2, #1
 800ceda:	54e2      	strb	r2, [r4, r3]
 800cedc:	4605      	mov	r5, r0
 800cede:	4628      	mov	r0, r5
 800cee0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cee4:	292d      	cmp	r1, #45	; 0x2d
 800cee6:	d006      	beq.n	800cef6 <__sccl+0x4a>
 800cee8:	295d      	cmp	r1, #93	; 0x5d
 800ceea:	d0f3      	beq.n	800ced4 <__sccl+0x28>
 800ceec:	b909      	cbnz	r1, 800cef2 <__sccl+0x46>
 800ceee:	4628      	mov	r0, r5
 800cef0:	e7f0      	b.n	800ced4 <__sccl+0x28>
 800cef2:	460b      	mov	r3, r1
 800cef4:	e7f1      	b.n	800ceda <__sccl+0x2e>
 800cef6:	786e      	ldrb	r6, [r5, #1]
 800cef8:	2e5d      	cmp	r6, #93	; 0x5d
 800cefa:	d0fa      	beq.n	800cef2 <__sccl+0x46>
 800cefc:	42b3      	cmp	r3, r6
 800cefe:	dcf8      	bgt.n	800cef2 <__sccl+0x46>
 800cf00:	3502      	adds	r5, #2
 800cf02:	4619      	mov	r1, r3
 800cf04:	3101      	adds	r1, #1
 800cf06:	428e      	cmp	r6, r1
 800cf08:	5462      	strb	r2, [r4, r1]
 800cf0a:	dcfb      	bgt.n	800cf04 <__sccl+0x58>
 800cf0c:	1af1      	subs	r1, r6, r3
 800cf0e:	3901      	subs	r1, #1
 800cf10:	1c58      	adds	r0, r3, #1
 800cf12:	42b3      	cmp	r3, r6
 800cf14:	bfa8      	it	ge
 800cf16:	2100      	movge	r1, #0
 800cf18:	1843      	adds	r3, r0, r1
 800cf1a:	e7e0      	b.n	800cede <__sccl+0x32>

0800cf1c <_strtoul_l.constprop.0>:
 800cf1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf20:	4f36      	ldr	r7, [pc, #216]	; (800cffc <_strtoul_l.constprop.0+0xe0>)
 800cf22:	4686      	mov	lr, r0
 800cf24:	460d      	mov	r5, r1
 800cf26:	4628      	mov	r0, r5
 800cf28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf2c:	5de6      	ldrb	r6, [r4, r7]
 800cf2e:	f016 0608 	ands.w	r6, r6, #8
 800cf32:	d1f8      	bne.n	800cf26 <_strtoul_l.constprop.0+0xa>
 800cf34:	2c2d      	cmp	r4, #45	; 0x2d
 800cf36:	d12f      	bne.n	800cf98 <_strtoul_l.constprop.0+0x7c>
 800cf38:	782c      	ldrb	r4, [r5, #0]
 800cf3a:	2601      	movs	r6, #1
 800cf3c:	1c85      	adds	r5, r0, #2
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d057      	beq.n	800cff2 <_strtoul_l.constprop.0+0xd6>
 800cf42:	2b10      	cmp	r3, #16
 800cf44:	d109      	bne.n	800cf5a <_strtoul_l.constprop.0+0x3e>
 800cf46:	2c30      	cmp	r4, #48	; 0x30
 800cf48:	d107      	bne.n	800cf5a <_strtoul_l.constprop.0+0x3e>
 800cf4a:	7828      	ldrb	r0, [r5, #0]
 800cf4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cf50:	2858      	cmp	r0, #88	; 0x58
 800cf52:	d149      	bne.n	800cfe8 <_strtoul_l.constprop.0+0xcc>
 800cf54:	786c      	ldrb	r4, [r5, #1]
 800cf56:	2310      	movs	r3, #16
 800cf58:	3502      	adds	r5, #2
 800cf5a:	f04f 38ff 	mov.w	r8, #4294967295
 800cf5e:	2700      	movs	r7, #0
 800cf60:	fbb8 f8f3 	udiv	r8, r8, r3
 800cf64:	fb03 f908 	mul.w	r9, r3, r8
 800cf68:	ea6f 0909 	mvn.w	r9, r9
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf72:	f1bc 0f09 	cmp.w	ip, #9
 800cf76:	d814      	bhi.n	800cfa2 <_strtoul_l.constprop.0+0x86>
 800cf78:	4664      	mov	r4, ip
 800cf7a:	42a3      	cmp	r3, r4
 800cf7c:	dd22      	ble.n	800cfc4 <_strtoul_l.constprop.0+0xa8>
 800cf7e:	2f00      	cmp	r7, #0
 800cf80:	db1d      	blt.n	800cfbe <_strtoul_l.constprop.0+0xa2>
 800cf82:	4580      	cmp	r8, r0
 800cf84:	d31b      	bcc.n	800cfbe <_strtoul_l.constprop.0+0xa2>
 800cf86:	d101      	bne.n	800cf8c <_strtoul_l.constprop.0+0x70>
 800cf88:	45a1      	cmp	r9, r4
 800cf8a:	db18      	blt.n	800cfbe <_strtoul_l.constprop.0+0xa2>
 800cf8c:	fb00 4003 	mla	r0, r0, r3, r4
 800cf90:	2701      	movs	r7, #1
 800cf92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf96:	e7ea      	b.n	800cf6e <_strtoul_l.constprop.0+0x52>
 800cf98:	2c2b      	cmp	r4, #43	; 0x2b
 800cf9a:	bf04      	itt	eq
 800cf9c:	782c      	ldrbeq	r4, [r5, #0]
 800cf9e:	1c85      	addeq	r5, r0, #2
 800cfa0:	e7cd      	b.n	800cf3e <_strtoul_l.constprop.0+0x22>
 800cfa2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cfa6:	f1bc 0f19 	cmp.w	ip, #25
 800cfaa:	d801      	bhi.n	800cfb0 <_strtoul_l.constprop.0+0x94>
 800cfac:	3c37      	subs	r4, #55	; 0x37
 800cfae:	e7e4      	b.n	800cf7a <_strtoul_l.constprop.0+0x5e>
 800cfb0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cfb4:	f1bc 0f19 	cmp.w	ip, #25
 800cfb8:	d804      	bhi.n	800cfc4 <_strtoul_l.constprop.0+0xa8>
 800cfba:	3c57      	subs	r4, #87	; 0x57
 800cfbc:	e7dd      	b.n	800cf7a <_strtoul_l.constprop.0+0x5e>
 800cfbe:	f04f 37ff 	mov.w	r7, #4294967295
 800cfc2:	e7e6      	b.n	800cf92 <_strtoul_l.constprop.0+0x76>
 800cfc4:	2f00      	cmp	r7, #0
 800cfc6:	da07      	bge.n	800cfd8 <_strtoul_l.constprop.0+0xbc>
 800cfc8:	2322      	movs	r3, #34	; 0x22
 800cfca:	f8ce 3000 	str.w	r3, [lr]
 800cfce:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd2:	b932      	cbnz	r2, 800cfe2 <_strtoul_l.constprop.0+0xc6>
 800cfd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfd8:	b106      	cbz	r6, 800cfdc <_strtoul_l.constprop.0+0xc0>
 800cfda:	4240      	negs	r0, r0
 800cfdc:	2a00      	cmp	r2, #0
 800cfde:	d0f9      	beq.n	800cfd4 <_strtoul_l.constprop.0+0xb8>
 800cfe0:	b107      	cbz	r7, 800cfe4 <_strtoul_l.constprop.0+0xc8>
 800cfe2:	1e69      	subs	r1, r5, #1
 800cfe4:	6011      	str	r1, [r2, #0]
 800cfe6:	e7f5      	b.n	800cfd4 <_strtoul_l.constprop.0+0xb8>
 800cfe8:	2430      	movs	r4, #48	; 0x30
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1b5      	bne.n	800cf5a <_strtoul_l.constprop.0+0x3e>
 800cfee:	2308      	movs	r3, #8
 800cff0:	e7b3      	b.n	800cf5a <_strtoul_l.constprop.0+0x3e>
 800cff2:	2c30      	cmp	r4, #48	; 0x30
 800cff4:	d0a9      	beq.n	800cf4a <_strtoul_l.constprop.0+0x2e>
 800cff6:	230a      	movs	r3, #10
 800cff8:	e7af      	b.n	800cf5a <_strtoul_l.constprop.0+0x3e>
 800cffa:	bf00      	nop
 800cffc:	0800edf3 	.word	0x0800edf3

0800d000 <_strtoul_r>:
 800d000:	f7ff bf8c 	b.w	800cf1c <_strtoul_l.constprop.0>

0800d004 <__submore>:
 800d004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d008:	460c      	mov	r4, r1
 800d00a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d010:	4299      	cmp	r1, r3
 800d012:	d11d      	bne.n	800d050 <__submore+0x4c>
 800d014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d018:	f7fd fa1a 	bl	800a450 <_malloc_r>
 800d01c:	b918      	cbnz	r0, 800d026 <__submore+0x22>
 800d01e:	f04f 30ff 	mov.w	r0, #4294967295
 800d022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d02a:	63a3      	str	r3, [r4, #56]	; 0x38
 800d02c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d030:	6360      	str	r0, [r4, #52]	; 0x34
 800d032:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d036:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d03a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d03e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d042:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d046:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d04a:	6020      	str	r0, [r4, #0]
 800d04c:	2000      	movs	r0, #0
 800d04e:	e7e8      	b.n	800d022 <__submore+0x1e>
 800d050:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d052:	0077      	lsls	r7, r6, #1
 800d054:	463a      	mov	r2, r7
 800d056:	f000 fa25 	bl	800d4a4 <_realloc_r>
 800d05a:	4605      	mov	r5, r0
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d0de      	beq.n	800d01e <__submore+0x1a>
 800d060:	eb00 0806 	add.w	r8, r0, r6
 800d064:	4601      	mov	r1, r0
 800d066:	4632      	mov	r2, r6
 800d068:	4640      	mov	r0, r8
 800d06a:	f7fe fed9 	bl	800be20 <memcpy>
 800d06e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d072:	f8c4 8000 	str.w	r8, [r4]
 800d076:	e7e9      	b.n	800d04c <__submore+0x48>

0800d078 <__assert_func>:
 800d078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d07a:	4614      	mov	r4, r2
 800d07c:	461a      	mov	r2, r3
 800d07e:	4b09      	ldr	r3, [pc, #36]	; (800d0a4 <__assert_func+0x2c>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4605      	mov	r5, r0
 800d084:	68d8      	ldr	r0, [r3, #12]
 800d086:	b14c      	cbz	r4, 800d09c <__assert_func+0x24>
 800d088:	4b07      	ldr	r3, [pc, #28]	; (800d0a8 <__assert_func+0x30>)
 800d08a:	9100      	str	r1, [sp, #0]
 800d08c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d090:	4906      	ldr	r1, [pc, #24]	; (800d0ac <__assert_func+0x34>)
 800d092:	462b      	mov	r3, r5
 800d094:	f000 f9a6 	bl	800d3e4 <fiprintf>
 800d098:	f000 fc5a 	bl	800d950 <abort>
 800d09c:	4b04      	ldr	r3, [pc, #16]	; (800d0b0 <__assert_func+0x38>)
 800d09e:	461c      	mov	r4, r3
 800d0a0:	e7f3      	b.n	800d08a <__assert_func+0x12>
 800d0a2:	bf00      	nop
 800d0a4:	200001d8 	.word	0x200001d8
 800d0a8:	0800f108 	.word	0x0800f108
 800d0ac:	0800f115 	.word	0x0800f115
 800d0b0:	0800f143 	.word	0x0800f143

0800d0b4 <__sflush_r>:
 800d0b4:	898a      	ldrh	r2, [r1, #12]
 800d0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	0710      	lsls	r0, r2, #28
 800d0be:	460c      	mov	r4, r1
 800d0c0:	d458      	bmi.n	800d174 <__sflush_r+0xc0>
 800d0c2:	684b      	ldr	r3, [r1, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	dc05      	bgt.n	800d0d4 <__sflush_r+0x20>
 800d0c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	dc02      	bgt.n	800d0d4 <__sflush_r+0x20>
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0d6:	2e00      	cmp	r6, #0
 800d0d8:	d0f9      	beq.n	800d0ce <__sflush_r+0x1a>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0e0:	682f      	ldr	r7, [r5, #0]
 800d0e2:	602b      	str	r3, [r5, #0]
 800d0e4:	d032      	beq.n	800d14c <__sflush_r+0x98>
 800d0e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	075a      	lsls	r2, r3, #29
 800d0ec:	d505      	bpl.n	800d0fa <__sflush_r+0x46>
 800d0ee:	6863      	ldr	r3, [r4, #4]
 800d0f0:	1ac0      	subs	r0, r0, r3
 800d0f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0f4:	b10b      	cbz	r3, 800d0fa <__sflush_r+0x46>
 800d0f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0f8:	1ac0      	subs	r0, r0, r3
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d100:	6a21      	ldr	r1, [r4, #32]
 800d102:	4628      	mov	r0, r5
 800d104:	47b0      	blx	r6
 800d106:	1c43      	adds	r3, r0, #1
 800d108:	89a3      	ldrh	r3, [r4, #12]
 800d10a:	d106      	bne.n	800d11a <__sflush_r+0x66>
 800d10c:	6829      	ldr	r1, [r5, #0]
 800d10e:	291d      	cmp	r1, #29
 800d110:	d82c      	bhi.n	800d16c <__sflush_r+0xb8>
 800d112:	4a2a      	ldr	r2, [pc, #168]	; (800d1bc <__sflush_r+0x108>)
 800d114:	40ca      	lsrs	r2, r1
 800d116:	07d6      	lsls	r6, r2, #31
 800d118:	d528      	bpl.n	800d16c <__sflush_r+0xb8>
 800d11a:	2200      	movs	r2, #0
 800d11c:	6062      	str	r2, [r4, #4]
 800d11e:	04d9      	lsls	r1, r3, #19
 800d120:	6922      	ldr	r2, [r4, #16]
 800d122:	6022      	str	r2, [r4, #0]
 800d124:	d504      	bpl.n	800d130 <__sflush_r+0x7c>
 800d126:	1c42      	adds	r2, r0, #1
 800d128:	d101      	bne.n	800d12e <__sflush_r+0x7a>
 800d12a:	682b      	ldr	r3, [r5, #0]
 800d12c:	b903      	cbnz	r3, 800d130 <__sflush_r+0x7c>
 800d12e:	6560      	str	r0, [r4, #84]	; 0x54
 800d130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d132:	602f      	str	r7, [r5, #0]
 800d134:	2900      	cmp	r1, #0
 800d136:	d0ca      	beq.n	800d0ce <__sflush_r+0x1a>
 800d138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d13c:	4299      	cmp	r1, r3
 800d13e:	d002      	beq.n	800d146 <__sflush_r+0x92>
 800d140:	4628      	mov	r0, r5
 800d142:	f7fd f919 	bl	800a378 <_free_r>
 800d146:	2000      	movs	r0, #0
 800d148:	6360      	str	r0, [r4, #52]	; 0x34
 800d14a:	e7c1      	b.n	800d0d0 <__sflush_r+0x1c>
 800d14c:	6a21      	ldr	r1, [r4, #32]
 800d14e:	2301      	movs	r3, #1
 800d150:	4628      	mov	r0, r5
 800d152:	47b0      	blx	r6
 800d154:	1c41      	adds	r1, r0, #1
 800d156:	d1c7      	bne.n	800d0e8 <__sflush_r+0x34>
 800d158:	682b      	ldr	r3, [r5, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d0c4      	beq.n	800d0e8 <__sflush_r+0x34>
 800d15e:	2b1d      	cmp	r3, #29
 800d160:	d001      	beq.n	800d166 <__sflush_r+0xb2>
 800d162:	2b16      	cmp	r3, #22
 800d164:	d101      	bne.n	800d16a <__sflush_r+0xb6>
 800d166:	602f      	str	r7, [r5, #0]
 800d168:	e7b1      	b.n	800d0ce <__sflush_r+0x1a>
 800d16a:	89a3      	ldrh	r3, [r4, #12]
 800d16c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d170:	81a3      	strh	r3, [r4, #12]
 800d172:	e7ad      	b.n	800d0d0 <__sflush_r+0x1c>
 800d174:	690f      	ldr	r7, [r1, #16]
 800d176:	2f00      	cmp	r7, #0
 800d178:	d0a9      	beq.n	800d0ce <__sflush_r+0x1a>
 800d17a:	0793      	lsls	r3, r2, #30
 800d17c:	680e      	ldr	r6, [r1, #0]
 800d17e:	bf08      	it	eq
 800d180:	694b      	ldreq	r3, [r1, #20]
 800d182:	600f      	str	r7, [r1, #0]
 800d184:	bf18      	it	ne
 800d186:	2300      	movne	r3, #0
 800d188:	eba6 0807 	sub.w	r8, r6, r7
 800d18c:	608b      	str	r3, [r1, #8]
 800d18e:	f1b8 0f00 	cmp.w	r8, #0
 800d192:	dd9c      	ble.n	800d0ce <__sflush_r+0x1a>
 800d194:	6a21      	ldr	r1, [r4, #32]
 800d196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d198:	4643      	mov	r3, r8
 800d19a:	463a      	mov	r2, r7
 800d19c:	4628      	mov	r0, r5
 800d19e:	47b0      	blx	r6
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	dc06      	bgt.n	800d1b2 <__sflush_r+0xfe>
 800d1a4:	89a3      	ldrh	r3, [r4, #12]
 800d1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1aa:	81a3      	strh	r3, [r4, #12]
 800d1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b0:	e78e      	b.n	800d0d0 <__sflush_r+0x1c>
 800d1b2:	4407      	add	r7, r0
 800d1b4:	eba8 0800 	sub.w	r8, r8, r0
 800d1b8:	e7e9      	b.n	800d18e <__sflush_r+0xda>
 800d1ba:	bf00      	nop
 800d1bc:	20400001 	.word	0x20400001

0800d1c0 <_fflush_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	690b      	ldr	r3, [r1, #16]
 800d1c4:	4605      	mov	r5, r0
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	b913      	cbnz	r3, 800d1d0 <_fflush_r+0x10>
 800d1ca:	2500      	movs	r5, #0
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}
 800d1d0:	b118      	cbz	r0, 800d1da <_fflush_r+0x1a>
 800d1d2:	6983      	ldr	r3, [r0, #24]
 800d1d4:	b90b      	cbnz	r3, 800d1da <_fflush_r+0x1a>
 800d1d6:	f000 f887 	bl	800d2e8 <__sinit>
 800d1da:	4b14      	ldr	r3, [pc, #80]	; (800d22c <_fflush_r+0x6c>)
 800d1dc:	429c      	cmp	r4, r3
 800d1de:	d11b      	bne.n	800d218 <_fflush_r+0x58>
 800d1e0:	686c      	ldr	r4, [r5, #4]
 800d1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d0ef      	beq.n	800d1ca <_fflush_r+0xa>
 800d1ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1ec:	07d0      	lsls	r0, r2, #31
 800d1ee:	d404      	bmi.n	800d1fa <_fflush_r+0x3a>
 800d1f0:	0599      	lsls	r1, r3, #22
 800d1f2:	d402      	bmi.n	800d1fa <_fflush_r+0x3a>
 800d1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1f6:	f000 f927 	bl	800d448 <__retarget_lock_acquire_recursive>
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	4621      	mov	r1, r4
 800d1fe:	f7ff ff59 	bl	800d0b4 <__sflush_r>
 800d202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d204:	07da      	lsls	r2, r3, #31
 800d206:	4605      	mov	r5, r0
 800d208:	d4e0      	bmi.n	800d1cc <_fflush_r+0xc>
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	059b      	lsls	r3, r3, #22
 800d20e:	d4dd      	bmi.n	800d1cc <_fflush_r+0xc>
 800d210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d212:	f000 f91a 	bl	800d44a <__retarget_lock_release_recursive>
 800d216:	e7d9      	b.n	800d1cc <_fflush_r+0xc>
 800d218:	4b05      	ldr	r3, [pc, #20]	; (800d230 <_fflush_r+0x70>)
 800d21a:	429c      	cmp	r4, r3
 800d21c:	d101      	bne.n	800d222 <_fflush_r+0x62>
 800d21e:	68ac      	ldr	r4, [r5, #8]
 800d220:	e7df      	b.n	800d1e2 <_fflush_r+0x22>
 800d222:	4b04      	ldr	r3, [pc, #16]	; (800d234 <_fflush_r+0x74>)
 800d224:	429c      	cmp	r4, r3
 800d226:	bf08      	it	eq
 800d228:	68ec      	ldreq	r4, [r5, #12]
 800d22a:	e7da      	b.n	800d1e2 <_fflush_r+0x22>
 800d22c:	0800f164 	.word	0x0800f164
 800d230:	0800f184 	.word	0x0800f184
 800d234:	0800f144 	.word	0x0800f144

0800d238 <std>:
 800d238:	2300      	movs	r3, #0
 800d23a:	b510      	push	{r4, lr}
 800d23c:	4604      	mov	r4, r0
 800d23e:	e9c0 3300 	strd	r3, r3, [r0]
 800d242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d246:	6083      	str	r3, [r0, #8]
 800d248:	8181      	strh	r1, [r0, #12]
 800d24a:	6643      	str	r3, [r0, #100]	; 0x64
 800d24c:	81c2      	strh	r2, [r0, #14]
 800d24e:	6183      	str	r3, [r0, #24]
 800d250:	4619      	mov	r1, r3
 800d252:	2208      	movs	r2, #8
 800d254:	305c      	adds	r0, #92	; 0x5c
 800d256:	f7fd f887 	bl	800a368 <memset>
 800d25a:	4b05      	ldr	r3, [pc, #20]	; (800d270 <std+0x38>)
 800d25c:	6263      	str	r3, [r4, #36]	; 0x24
 800d25e:	4b05      	ldr	r3, [pc, #20]	; (800d274 <std+0x3c>)
 800d260:	62a3      	str	r3, [r4, #40]	; 0x28
 800d262:	4b05      	ldr	r3, [pc, #20]	; (800d278 <std+0x40>)
 800d264:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d266:	4b05      	ldr	r3, [pc, #20]	; (800d27c <std+0x44>)
 800d268:	6224      	str	r4, [r4, #32]
 800d26a:	6323      	str	r3, [r4, #48]	; 0x30
 800d26c:	bd10      	pop	{r4, pc}
 800d26e:	bf00      	nop
 800d270:	0800aec5 	.word	0x0800aec5
 800d274:	0800aeeb 	.word	0x0800aeeb
 800d278:	0800af23 	.word	0x0800af23
 800d27c:	0800af47 	.word	0x0800af47

0800d280 <_cleanup_r>:
 800d280:	4901      	ldr	r1, [pc, #4]	; (800d288 <_cleanup_r+0x8>)
 800d282:	f000 b8c1 	b.w	800d408 <_fwalk_reent>
 800d286:	bf00      	nop
 800d288:	0800d1c1 	.word	0x0800d1c1

0800d28c <__sfmoreglue>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	2268      	movs	r2, #104	; 0x68
 800d290:	1e4d      	subs	r5, r1, #1
 800d292:	4355      	muls	r5, r2
 800d294:	460e      	mov	r6, r1
 800d296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d29a:	f7fd f8d9 	bl	800a450 <_malloc_r>
 800d29e:	4604      	mov	r4, r0
 800d2a0:	b140      	cbz	r0, 800d2b4 <__sfmoreglue+0x28>
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	e9c0 1600 	strd	r1, r6, [r0]
 800d2a8:	300c      	adds	r0, #12
 800d2aa:	60a0      	str	r0, [r4, #8]
 800d2ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d2b0:	f7fd f85a 	bl	800a368 <memset>
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	bd70      	pop	{r4, r5, r6, pc}

0800d2b8 <__sfp_lock_acquire>:
 800d2b8:	4801      	ldr	r0, [pc, #4]	; (800d2c0 <__sfp_lock_acquire+0x8>)
 800d2ba:	f000 b8c5 	b.w	800d448 <__retarget_lock_acquire_recursive>
 800d2be:	bf00      	nop
 800d2c0:	20000d7d 	.word	0x20000d7d

0800d2c4 <__sfp_lock_release>:
 800d2c4:	4801      	ldr	r0, [pc, #4]	; (800d2cc <__sfp_lock_release+0x8>)
 800d2c6:	f000 b8c0 	b.w	800d44a <__retarget_lock_release_recursive>
 800d2ca:	bf00      	nop
 800d2cc:	20000d7d 	.word	0x20000d7d

0800d2d0 <__sinit_lock_acquire>:
 800d2d0:	4801      	ldr	r0, [pc, #4]	; (800d2d8 <__sinit_lock_acquire+0x8>)
 800d2d2:	f000 b8b9 	b.w	800d448 <__retarget_lock_acquire_recursive>
 800d2d6:	bf00      	nop
 800d2d8:	20000d7e 	.word	0x20000d7e

0800d2dc <__sinit_lock_release>:
 800d2dc:	4801      	ldr	r0, [pc, #4]	; (800d2e4 <__sinit_lock_release+0x8>)
 800d2de:	f000 b8b4 	b.w	800d44a <__retarget_lock_release_recursive>
 800d2e2:	bf00      	nop
 800d2e4:	20000d7e 	.word	0x20000d7e

0800d2e8 <__sinit>:
 800d2e8:	b510      	push	{r4, lr}
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	f7ff fff0 	bl	800d2d0 <__sinit_lock_acquire>
 800d2f0:	69a3      	ldr	r3, [r4, #24]
 800d2f2:	b11b      	cbz	r3, 800d2fc <__sinit+0x14>
 800d2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2f8:	f7ff bff0 	b.w	800d2dc <__sinit_lock_release>
 800d2fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d300:	6523      	str	r3, [r4, #80]	; 0x50
 800d302:	4b13      	ldr	r3, [pc, #76]	; (800d350 <__sinit+0x68>)
 800d304:	4a13      	ldr	r2, [pc, #76]	; (800d354 <__sinit+0x6c>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	62a2      	str	r2, [r4, #40]	; 0x28
 800d30a:	42a3      	cmp	r3, r4
 800d30c:	bf04      	itt	eq
 800d30e:	2301      	moveq	r3, #1
 800d310:	61a3      	streq	r3, [r4, #24]
 800d312:	4620      	mov	r0, r4
 800d314:	f000 f820 	bl	800d358 <__sfp>
 800d318:	6060      	str	r0, [r4, #4]
 800d31a:	4620      	mov	r0, r4
 800d31c:	f000 f81c 	bl	800d358 <__sfp>
 800d320:	60a0      	str	r0, [r4, #8]
 800d322:	4620      	mov	r0, r4
 800d324:	f000 f818 	bl	800d358 <__sfp>
 800d328:	2200      	movs	r2, #0
 800d32a:	60e0      	str	r0, [r4, #12]
 800d32c:	2104      	movs	r1, #4
 800d32e:	6860      	ldr	r0, [r4, #4]
 800d330:	f7ff ff82 	bl	800d238 <std>
 800d334:	68a0      	ldr	r0, [r4, #8]
 800d336:	2201      	movs	r2, #1
 800d338:	2109      	movs	r1, #9
 800d33a:	f7ff ff7d 	bl	800d238 <std>
 800d33e:	68e0      	ldr	r0, [r4, #12]
 800d340:	2202      	movs	r2, #2
 800d342:	2112      	movs	r1, #18
 800d344:	f7ff ff78 	bl	800d238 <std>
 800d348:	2301      	movs	r3, #1
 800d34a:	61a3      	str	r3, [r4, #24]
 800d34c:	e7d2      	b.n	800d2f4 <__sinit+0xc>
 800d34e:	bf00      	nop
 800d350:	0800edbc 	.word	0x0800edbc
 800d354:	0800d281 	.word	0x0800d281

0800d358 <__sfp>:
 800d358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35a:	4607      	mov	r7, r0
 800d35c:	f7ff ffac 	bl	800d2b8 <__sfp_lock_acquire>
 800d360:	4b1e      	ldr	r3, [pc, #120]	; (800d3dc <__sfp+0x84>)
 800d362:	681e      	ldr	r6, [r3, #0]
 800d364:	69b3      	ldr	r3, [r6, #24]
 800d366:	b913      	cbnz	r3, 800d36e <__sfp+0x16>
 800d368:	4630      	mov	r0, r6
 800d36a:	f7ff ffbd 	bl	800d2e8 <__sinit>
 800d36e:	3648      	adds	r6, #72	; 0x48
 800d370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d374:	3b01      	subs	r3, #1
 800d376:	d503      	bpl.n	800d380 <__sfp+0x28>
 800d378:	6833      	ldr	r3, [r6, #0]
 800d37a:	b30b      	cbz	r3, 800d3c0 <__sfp+0x68>
 800d37c:	6836      	ldr	r6, [r6, #0]
 800d37e:	e7f7      	b.n	800d370 <__sfp+0x18>
 800d380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d384:	b9d5      	cbnz	r5, 800d3bc <__sfp+0x64>
 800d386:	4b16      	ldr	r3, [pc, #88]	; (800d3e0 <__sfp+0x88>)
 800d388:	60e3      	str	r3, [r4, #12]
 800d38a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d38e:	6665      	str	r5, [r4, #100]	; 0x64
 800d390:	f000 f859 	bl	800d446 <__retarget_lock_init_recursive>
 800d394:	f7ff ff96 	bl	800d2c4 <__sfp_lock_release>
 800d398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d39c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d3a0:	6025      	str	r5, [r4, #0]
 800d3a2:	61a5      	str	r5, [r4, #24]
 800d3a4:	2208      	movs	r2, #8
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d3ac:	f7fc ffdc 	bl	800a368 <memset>
 800d3b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d3b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3bc:	3468      	adds	r4, #104	; 0x68
 800d3be:	e7d9      	b.n	800d374 <__sfp+0x1c>
 800d3c0:	2104      	movs	r1, #4
 800d3c2:	4638      	mov	r0, r7
 800d3c4:	f7ff ff62 	bl	800d28c <__sfmoreglue>
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	6030      	str	r0, [r6, #0]
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d1d5      	bne.n	800d37c <__sfp+0x24>
 800d3d0:	f7ff ff78 	bl	800d2c4 <__sfp_lock_release>
 800d3d4:	230c      	movs	r3, #12
 800d3d6:	603b      	str	r3, [r7, #0]
 800d3d8:	e7ee      	b.n	800d3b8 <__sfp+0x60>
 800d3da:	bf00      	nop
 800d3dc:	0800edbc 	.word	0x0800edbc
 800d3e0:	ffff0001 	.word	0xffff0001

0800d3e4 <fiprintf>:
 800d3e4:	b40e      	push	{r1, r2, r3}
 800d3e6:	b503      	push	{r0, r1, lr}
 800d3e8:	4601      	mov	r1, r0
 800d3ea:	ab03      	add	r3, sp, #12
 800d3ec:	4805      	ldr	r0, [pc, #20]	; (800d404 <fiprintf+0x20>)
 800d3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3f2:	6800      	ldr	r0, [r0, #0]
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	f000 f8ad 	bl	800d554 <_vfiprintf_r>
 800d3fa:	b002      	add	sp, #8
 800d3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d400:	b003      	add	sp, #12
 800d402:	4770      	bx	lr
 800d404:	200001d8 	.word	0x200001d8

0800d408 <_fwalk_reent>:
 800d408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d40c:	4606      	mov	r6, r0
 800d40e:	4688      	mov	r8, r1
 800d410:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d414:	2700      	movs	r7, #0
 800d416:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d41a:	f1b9 0901 	subs.w	r9, r9, #1
 800d41e:	d505      	bpl.n	800d42c <_fwalk_reent+0x24>
 800d420:	6824      	ldr	r4, [r4, #0]
 800d422:	2c00      	cmp	r4, #0
 800d424:	d1f7      	bne.n	800d416 <_fwalk_reent+0xe>
 800d426:	4638      	mov	r0, r7
 800d428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d42c:	89ab      	ldrh	r3, [r5, #12]
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d907      	bls.n	800d442 <_fwalk_reent+0x3a>
 800d432:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d436:	3301      	adds	r3, #1
 800d438:	d003      	beq.n	800d442 <_fwalk_reent+0x3a>
 800d43a:	4629      	mov	r1, r5
 800d43c:	4630      	mov	r0, r6
 800d43e:	47c0      	blx	r8
 800d440:	4307      	orrs	r7, r0
 800d442:	3568      	adds	r5, #104	; 0x68
 800d444:	e7e9      	b.n	800d41a <_fwalk_reent+0x12>

0800d446 <__retarget_lock_init_recursive>:
 800d446:	4770      	bx	lr

0800d448 <__retarget_lock_acquire_recursive>:
 800d448:	4770      	bx	lr

0800d44a <__retarget_lock_release_recursive>:
 800d44a:	4770      	bx	lr

0800d44c <__ascii_mbtowc>:
 800d44c:	b082      	sub	sp, #8
 800d44e:	b901      	cbnz	r1, 800d452 <__ascii_mbtowc+0x6>
 800d450:	a901      	add	r1, sp, #4
 800d452:	b142      	cbz	r2, 800d466 <__ascii_mbtowc+0x1a>
 800d454:	b14b      	cbz	r3, 800d46a <__ascii_mbtowc+0x1e>
 800d456:	7813      	ldrb	r3, [r2, #0]
 800d458:	600b      	str	r3, [r1, #0]
 800d45a:	7812      	ldrb	r2, [r2, #0]
 800d45c:	1e10      	subs	r0, r2, #0
 800d45e:	bf18      	it	ne
 800d460:	2001      	movne	r0, #1
 800d462:	b002      	add	sp, #8
 800d464:	4770      	bx	lr
 800d466:	4610      	mov	r0, r2
 800d468:	e7fb      	b.n	800d462 <__ascii_mbtowc+0x16>
 800d46a:	f06f 0001 	mvn.w	r0, #1
 800d46e:	e7f8      	b.n	800d462 <__ascii_mbtowc+0x16>

0800d470 <memmove>:
 800d470:	4288      	cmp	r0, r1
 800d472:	b510      	push	{r4, lr}
 800d474:	eb01 0402 	add.w	r4, r1, r2
 800d478:	d902      	bls.n	800d480 <memmove+0x10>
 800d47a:	4284      	cmp	r4, r0
 800d47c:	4623      	mov	r3, r4
 800d47e:	d807      	bhi.n	800d490 <memmove+0x20>
 800d480:	1e43      	subs	r3, r0, #1
 800d482:	42a1      	cmp	r1, r4
 800d484:	d008      	beq.n	800d498 <memmove+0x28>
 800d486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d48a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d48e:	e7f8      	b.n	800d482 <memmove+0x12>
 800d490:	4402      	add	r2, r0
 800d492:	4601      	mov	r1, r0
 800d494:	428a      	cmp	r2, r1
 800d496:	d100      	bne.n	800d49a <memmove+0x2a>
 800d498:	bd10      	pop	{r4, pc}
 800d49a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d49e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4a2:	e7f7      	b.n	800d494 <memmove+0x24>

0800d4a4 <_realloc_r>:
 800d4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a8:	4680      	mov	r8, r0
 800d4aa:	4614      	mov	r4, r2
 800d4ac:	460e      	mov	r6, r1
 800d4ae:	b921      	cbnz	r1, 800d4ba <_realloc_r+0x16>
 800d4b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b4:	4611      	mov	r1, r2
 800d4b6:	f7fc bfcb 	b.w	800a450 <_malloc_r>
 800d4ba:	b92a      	cbnz	r2, 800d4c8 <_realloc_r+0x24>
 800d4bc:	f7fc ff5c 	bl	800a378 <_free_r>
 800d4c0:	4625      	mov	r5, r4
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c8:	f000 faae 	bl	800da28 <_malloc_usable_size_r>
 800d4cc:	4284      	cmp	r4, r0
 800d4ce:	4607      	mov	r7, r0
 800d4d0:	d802      	bhi.n	800d4d8 <_realloc_r+0x34>
 800d4d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4d6:	d812      	bhi.n	800d4fe <_realloc_r+0x5a>
 800d4d8:	4621      	mov	r1, r4
 800d4da:	4640      	mov	r0, r8
 800d4dc:	f7fc ffb8 	bl	800a450 <_malloc_r>
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d0ed      	beq.n	800d4c2 <_realloc_r+0x1e>
 800d4e6:	42bc      	cmp	r4, r7
 800d4e8:	4622      	mov	r2, r4
 800d4ea:	4631      	mov	r1, r6
 800d4ec:	bf28      	it	cs
 800d4ee:	463a      	movcs	r2, r7
 800d4f0:	f7fe fc96 	bl	800be20 <memcpy>
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	f7fc ff3e 	bl	800a378 <_free_r>
 800d4fc:	e7e1      	b.n	800d4c2 <_realloc_r+0x1e>
 800d4fe:	4635      	mov	r5, r6
 800d500:	e7df      	b.n	800d4c2 <_realloc_r+0x1e>

0800d502 <__sfputc_r>:
 800d502:	6893      	ldr	r3, [r2, #8]
 800d504:	3b01      	subs	r3, #1
 800d506:	2b00      	cmp	r3, #0
 800d508:	b410      	push	{r4}
 800d50a:	6093      	str	r3, [r2, #8]
 800d50c:	da08      	bge.n	800d520 <__sfputc_r+0x1e>
 800d50e:	6994      	ldr	r4, [r2, #24]
 800d510:	42a3      	cmp	r3, r4
 800d512:	db01      	blt.n	800d518 <__sfputc_r+0x16>
 800d514:	290a      	cmp	r1, #10
 800d516:	d103      	bne.n	800d520 <__sfputc_r+0x1e>
 800d518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d51c:	f000 b94a 	b.w	800d7b4 <__swbuf_r>
 800d520:	6813      	ldr	r3, [r2, #0]
 800d522:	1c58      	adds	r0, r3, #1
 800d524:	6010      	str	r0, [r2, #0]
 800d526:	7019      	strb	r1, [r3, #0]
 800d528:	4608      	mov	r0, r1
 800d52a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <__sfputs_r>:
 800d530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d532:	4606      	mov	r6, r0
 800d534:	460f      	mov	r7, r1
 800d536:	4614      	mov	r4, r2
 800d538:	18d5      	adds	r5, r2, r3
 800d53a:	42ac      	cmp	r4, r5
 800d53c:	d101      	bne.n	800d542 <__sfputs_r+0x12>
 800d53e:	2000      	movs	r0, #0
 800d540:	e007      	b.n	800d552 <__sfputs_r+0x22>
 800d542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d546:	463a      	mov	r2, r7
 800d548:	4630      	mov	r0, r6
 800d54a:	f7ff ffda 	bl	800d502 <__sfputc_r>
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	d1f3      	bne.n	800d53a <__sfputs_r+0xa>
 800d552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d554 <_vfiprintf_r>:
 800d554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d558:	460d      	mov	r5, r1
 800d55a:	b09d      	sub	sp, #116	; 0x74
 800d55c:	4614      	mov	r4, r2
 800d55e:	4698      	mov	r8, r3
 800d560:	4606      	mov	r6, r0
 800d562:	b118      	cbz	r0, 800d56c <_vfiprintf_r+0x18>
 800d564:	6983      	ldr	r3, [r0, #24]
 800d566:	b90b      	cbnz	r3, 800d56c <_vfiprintf_r+0x18>
 800d568:	f7ff febe 	bl	800d2e8 <__sinit>
 800d56c:	4b89      	ldr	r3, [pc, #548]	; (800d794 <_vfiprintf_r+0x240>)
 800d56e:	429d      	cmp	r5, r3
 800d570:	d11b      	bne.n	800d5aa <_vfiprintf_r+0x56>
 800d572:	6875      	ldr	r5, [r6, #4]
 800d574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d576:	07d9      	lsls	r1, r3, #31
 800d578:	d405      	bmi.n	800d586 <_vfiprintf_r+0x32>
 800d57a:	89ab      	ldrh	r3, [r5, #12]
 800d57c:	059a      	lsls	r2, r3, #22
 800d57e:	d402      	bmi.n	800d586 <_vfiprintf_r+0x32>
 800d580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d582:	f7ff ff61 	bl	800d448 <__retarget_lock_acquire_recursive>
 800d586:	89ab      	ldrh	r3, [r5, #12]
 800d588:	071b      	lsls	r3, r3, #28
 800d58a:	d501      	bpl.n	800d590 <_vfiprintf_r+0x3c>
 800d58c:	692b      	ldr	r3, [r5, #16]
 800d58e:	b9eb      	cbnz	r3, 800d5cc <_vfiprintf_r+0x78>
 800d590:	4629      	mov	r1, r5
 800d592:	4630      	mov	r0, r6
 800d594:	f000 f96e 	bl	800d874 <__swsetup_r>
 800d598:	b1c0      	cbz	r0, 800d5cc <_vfiprintf_r+0x78>
 800d59a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d59c:	07dc      	lsls	r4, r3, #31
 800d59e:	d50e      	bpl.n	800d5be <_vfiprintf_r+0x6a>
 800d5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a4:	b01d      	add	sp, #116	; 0x74
 800d5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5aa:	4b7b      	ldr	r3, [pc, #492]	; (800d798 <_vfiprintf_r+0x244>)
 800d5ac:	429d      	cmp	r5, r3
 800d5ae:	d101      	bne.n	800d5b4 <_vfiprintf_r+0x60>
 800d5b0:	68b5      	ldr	r5, [r6, #8]
 800d5b2:	e7df      	b.n	800d574 <_vfiprintf_r+0x20>
 800d5b4:	4b79      	ldr	r3, [pc, #484]	; (800d79c <_vfiprintf_r+0x248>)
 800d5b6:	429d      	cmp	r5, r3
 800d5b8:	bf08      	it	eq
 800d5ba:	68f5      	ldreq	r5, [r6, #12]
 800d5bc:	e7da      	b.n	800d574 <_vfiprintf_r+0x20>
 800d5be:	89ab      	ldrh	r3, [r5, #12]
 800d5c0:	0598      	lsls	r0, r3, #22
 800d5c2:	d4ed      	bmi.n	800d5a0 <_vfiprintf_r+0x4c>
 800d5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5c6:	f7ff ff40 	bl	800d44a <__retarget_lock_release_recursive>
 800d5ca:	e7e9      	b.n	800d5a0 <_vfiprintf_r+0x4c>
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d0:	2320      	movs	r3, #32
 800d5d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5da:	2330      	movs	r3, #48	; 0x30
 800d5dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7a0 <_vfiprintf_r+0x24c>
 800d5e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5e4:	f04f 0901 	mov.w	r9, #1
 800d5e8:	4623      	mov	r3, r4
 800d5ea:	469a      	mov	sl, r3
 800d5ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5f0:	b10a      	cbz	r2, 800d5f6 <_vfiprintf_r+0xa2>
 800d5f2:	2a25      	cmp	r2, #37	; 0x25
 800d5f4:	d1f9      	bne.n	800d5ea <_vfiprintf_r+0x96>
 800d5f6:	ebba 0b04 	subs.w	fp, sl, r4
 800d5fa:	d00b      	beq.n	800d614 <_vfiprintf_r+0xc0>
 800d5fc:	465b      	mov	r3, fp
 800d5fe:	4622      	mov	r2, r4
 800d600:	4629      	mov	r1, r5
 800d602:	4630      	mov	r0, r6
 800d604:	f7ff ff94 	bl	800d530 <__sfputs_r>
 800d608:	3001      	adds	r0, #1
 800d60a:	f000 80aa 	beq.w	800d762 <_vfiprintf_r+0x20e>
 800d60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d610:	445a      	add	r2, fp
 800d612:	9209      	str	r2, [sp, #36]	; 0x24
 800d614:	f89a 3000 	ldrb.w	r3, [sl]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f000 80a2 	beq.w	800d762 <_vfiprintf_r+0x20e>
 800d61e:	2300      	movs	r3, #0
 800d620:	f04f 32ff 	mov.w	r2, #4294967295
 800d624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d628:	f10a 0a01 	add.w	sl, sl, #1
 800d62c:	9304      	str	r3, [sp, #16]
 800d62e:	9307      	str	r3, [sp, #28]
 800d630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d634:	931a      	str	r3, [sp, #104]	; 0x68
 800d636:	4654      	mov	r4, sl
 800d638:	2205      	movs	r2, #5
 800d63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d63e:	4858      	ldr	r0, [pc, #352]	; (800d7a0 <_vfiprintf_r+0x24c>)
 800d640:	f7f2 fde6 	bl	8000210 <memchr>
 800d644:	9a04      	ldr	r2, [sp, #16]
 800d646:	b9d8      	cbnz	r0, 800d680 <_vfiprintf_r+0x12c>
 800d648:	06d1      	lsls	r1, r2, #27
 800d64a:	bf44      	itt	mi
 800d64c:	2320      	movmi	r3, #32
 800d64e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d652:	0713      	lsls	r3, r2, #28
 800d654:	bf44      	itt	mi
 800d656:	232b      	movmi	r3, #43	; 0x2b
 800d658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d65c:	f89a 3000 	ldrb.w	r3, [sl]
 800d660:	2b2a      	cmp	r3, #42	; 0x2a
 800d662:	d015      	beq.n	800d690 <_vfiprintf_r+0x13c>
 800d664:	9a07      	ldr	r2, [sp, #28]
 800d666:	4654      	mov	r4, sl
 800d668:	2000      	movs	r0, #0
 800d66a:	f04f 0c0a 	mov.w	ip, #10
 800d66e:	4621      	mov	r1, r4
 800d670:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d674:	3b30      	subs	r3, #48	; 0x30
 800d676:	2b09      	cmp	r3, #9
 800d678:	d94e      	bls.n	800d718 <_vfiprintf_r+0x1c4>
 800d67a:	b1b0      	cbz	r0, 800d6aa <_vfiprintf_r+0x156>
 800d67c:	9207      	str	r2, [sp, #28]
 800d67e:	e014      	b.n	800d6aa <_vfiprintf_r+0x156>
 800d680:	eba0 0308 	sub.w	r3, r0, r8
 800d684:	fa09 f303 	lsl.w	r3, r9, r3
 800d688:	4313      	orrs	r3, r2
 800d68a:	9304      	str	r3, [sp, #16]
 800d68c:	46a2      	mov	sl, r4
 800d68e:	e7d2      	b.n	800d636 <_vfiprintf_r+0xe2>
 800d690:	9b03      	ldr	r3, [sp, #12]
 800d692:	1d19      	adds	r1, r3, #4
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	9103      	str	r1, [sp, #12]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	bfbb      	ittet	lt
 800d69c:	425b      	neglt	r3, r3
 800d69e:	f042 0202 	orrlt.w	r2, r2, #2
 800d6a2:	9307      	strge	r3, [sp, #28]
 800d6a4:	9307      	strlt	r3, [sp, #28]
 800d6a6:	bfb8      	it	lt
 800d6a8:	9204      	strlt	r2, [sp, #16]
 800d6aa:	7823      	ldrb	r3, [r4, #0]
 800d6ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d6ae:	d10c      	bne.n	800d6ca <_vfiprintf_r+0x176>
 800d6b0:	7863      	ldrb	r3, [r4, #1]
 800d6b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b4:	d135      	bne.n	800d722 <_vfiprintf_r+0x1ce>
 800d6b6:	9b03      	ldr	r3, [sp, #12]
 800d6b8:	1d1a      	adds	r2, r3, #4
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	9203      	str	r2, [sp, #12]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	bfb8      	it	lt
 800d6c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6c6:	3402      	adds	r4, #2
 800d6c8:	9305      	str	r3, [sp, #20]
 800d6ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7b0 <_vfiprintf_r+0x25c>
 800d6ce:	7821      	ldrb	r1, [r4, #0]
 800d6d0:	2203      	movs	r2, #3
 800d6d2:	4650      	mov	r0, sl
 800d6d4:	f7f2 fd9c 	bl	8000210 <memchr>
 800d6d8:	b140      	cbz	r0, 800d6ec <_vfiprintf_r+0x198>
 800d6da:	2340      	movs	r3, #64	; 0x40
 800d6dc:	eba0 000a 	sub.w	r0, r0, sl
 800d6e0:	fa03 f000 	lsl.w	r0, r3, r0
 800d6e4:	9b04      	ldr	r3, [sp, #16]
 800d6e6:	4303      	orrs	r3, r0
 800d6e8:	3401      	adds	r4, #1
 800d6ea:	9304      	str	r3, [sp, #16]
 800d6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f0:	482c      	ldr	r0, [pc, #176]	; (800d7a4 <_vfiprintf_r+0x250>)
 800d6f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6f6:	2206      	movs	r2, #6
 800d6f8:	f7f2 fd8a 	bl	8000210 <memchr>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d03f      	beq.n	800d780 <_vfiprintf_r+0x22c>
 800d700:	4b29      	ldr	r3, [pc, #164]	; (800d7a8 <_vfiprintf_r+0x254>)
 800d702:	bb1b      	cbnz	r3, 800d74c <_vfiprintf_r+0x1f8>
 800d704:	9b03      	ldr	r3, [sp, #12]
 800d706:	3307      	adds	r3, #7
 800d708:	f023 0307 	bic.w	r3, r3, #7
 800d70c:	3308      	adds	r3, #8
 800d70e:	9303      	str	r3, [sp, #12]
 800d710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d712:	443b      	add	r3, r7
 800d714:	9309      	str	r3, [sp, #36]	; 0x24
 800d716:	e767      	b.n	800d5e8 <_vfiprintf_r+0x94>
 800d718:	fb0c 3202 	mla	r2, ip, r2, r3
 800d71c:	460c      	mov	r4, r1
 800d71e:	2001      	movs	r0, #1
 800d720:	e7a5      	b.n	800d66e <_vfiprintf_r+0x11a>
 800d722:	2300      	movs	r3, #0
 800d724:	3401      	adds	r4, #1
 800d726:	9305      	str	r3, [sp, #20]
 800d728:	4619      	mov	r1, r3
 800d72a:	f04f 0c0a 	mov.w	ip, #10
 800d72e:	4620      	mov	r0, r4
 800d730:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d734:	3a30      	subs	r2, #48	; 0x30
 800d736:	2a09      	cmp	r2, #9
 800d738:	d903      	bls.n	800d742 <_vfiprintf_r+0x1ee>
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d0c5      	beq.n	800d6ca <_vfiprintf_r+0x176>
 800d73e:	9105      	str	r1, [sp, #20]
 800d740:	e7c3      	b.n	800d6ca <_vfiprintf_r+0x176>
 800d742:	fb0c 2101 	mla	r1, ip, r1, r2
 800d746:	4604      	mov	r4, r0
 800d748:	2301      	movs	r3, #1
 800d74a:	e7f0      	b.n	800d72e <_vfiprintf_r+0x1da>
 800d74c:	ab03      	add	r3, sp, #12
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	462a      	mov	r2, r5
 800d752:	4b16      	ldr	r3, [pc, #88]	; (800d7ac <_vfiprintf_r+0x258>)
 800d754:	a904      	add	r1, sp, #16
 800d756:	4630      	mov	r0, r6
 800d758:	f7fc ff8e 	bl	800a678 <_printf_float>
 800d75c:	4607      	mov	r7, r0
 800d75e:	1c78      	adds	r0, r7, #1
 800d760:	d1d6      	bne.n	800d710 <_vfiprintf_r+0x1bc>
 800d762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d764:	07d9      	lsls	r1, r3, #31
 800d766:	d405      	bmi.n	800d774 <_vfiprintf_r+0x220>
 800d768:	89ab      	ldrh	r3, [r5, #12]
 800d76a:	059a      	lsls	r2, r3, #22
 800d76c:	d402      	bmi.n	800d774 <_vfiprintf_r+0x220>
 800d76e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d770:	f7ff fe6b 	bl	800d44a <__retarget_lock_release_recursive>
 800d774:	89ab      	ldrh	r3, [r5, #12]
 800d776:	065b      	lsls	r3, r3, #25
 800d778:	f53f af12 	bmi.w	800d5a0 <_vfiprintf_r+0x4c>
 800d77c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d77e:	e711      	b.n	800d5a4 <_vfiprintf_r+0x50>
 800d780:	ab03      	add	r3, sp, #12
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	462a      	mov	r2, r5
 800d786:	4b09      	ldr	r3, [pc, #36]	; (800d7ac <_vfiprintf_r+0x258>)
 800d788:	a904      	add	r1, sp, #16
 800d78a:	4630      	mov	r0, r6
 800d78c:	f7fd fa18 	bl	800abc0 <_printf_i>
 800d790:	e7e4      	b.n	800d75c <_vfiprintf_r+0x208>
 800d792:	bf00      	nop
 800d794:	0800f164 	.word	0x0800f164
 800d798:	0800f184 	.word	0x0800f184
 800d79c:	0800f144 	.word	0x0800f144
 800d7a0:	0800f0dc 	.word	0x0800f0dc
 800d7a4:	0800f0e6 	.word	0x0800f0e6
 800d7a8:	0800a679 	.word	0x0800a679
 800d7ac:	0800d531 	.word	0x0800d531
 800d7b0:	0800f0e2 	.word	0x0800f0e2

0800d7b4 <__swbuf_r>:
 800d7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b6:	460e      	mov	r6, r1
 800d7b8:	4614      	mov	r4, r2
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	b118      	cbz	r0, 800d7c6 <__swbuf_r+0x12>
 800d7be:	6983      	ldr	r3, [r0, #24]
 800d7c0:	b90b      	cbnz	r3, 800d7c6 <__swbuf_r+0x12>
 800d7c2:	f7ff fd91 	bl	800d2e8 <__sinit>
 800d7c6:	4b21      	ldr	r3, [pc, #132]	; (800d84c <__swbuf_r+0x98>)
 800d7c8:	429c      	cmp	r4, r3
 800d7ca:	d12b      	bne.n	800d824 <__swbuf_r+0x70>
 800d7cc:	686c      	ldr	r4, [r5, #4]
 800d7ce:	69a3      	ldr	r3, [r4, #24]
 800d7d0:	60a3      	str	r3, [r4, #8]
 800d7d2:	89a3      	ldrh	r3, [r4, #12]
 800d7d4:	071a      	lsls	r2, r3, #28
 800d7d6:	d52f      	bpl.n	800d838 <__swbuf_r+0x84>
 800d7d8:	6923      	ldr	r3, [r4, #16]
 800d7da:	b36b      	cbz	r3, 800d838 <__swbuf_r+0x84>
 800d7dc:	6923      	ldr	r3, [r4, #16]
 800d7de:	6820      	ldr	r0, [r4, #0]
 800d7e0:	1ac0      	subs	r0, r0, r3
 800d7e2:	6963      	ldr	r3, [r4, #20]
 800d7e4:	b2f6      	uxtb	r6, r6
 800d7e6:	4283      	cmp	r3, r0
 800d7e8:	4637      	mov	r7, r6
 800d7ea:	dc04      	bgt.n	800d7f6 <__swbuf_r+0x42>
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f7ff fce6 	bl	800d1c0 <_fflush_r>
 800d7f4:	bb30      	cbnz	r0, 800d844 <__swbuf_r+0x90>
 800d7f6:	68a3      	ldr	r3, [r4, #8]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	60a3      	str	r3, [r4, #8]
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	1c5a      	adds	r2, r3, #1
 800d800:	6022      	str	r2, [r4, #0]
 800d802:	701e      	strb	r6, [r3, #0]
 800d804:	6963      	ldr	r3, [r4, #20]
 800d806:	3001      	adds	r0, #1
 800d808:	4283      	cmp	r3, r0
 800d80a:	d004      	beq.n	800d816 <__swbuf_r+0x62>
 800d80c:	89a3      	ldrh	r3, [r4, #12]
 800d80e:	07db      	lsls	r3, r3, #31
 800d810:	d506      	bpl.n	800d820 <__swbuf_r+0x6c>
 800d812:	2e0a      	cmp	r6, #10
 800d814:	d104      	bne.n	800d820 <__swbuf_r+0x6c>
 800d816:	4621      	mov	r1, r4
 800d818:	4628      	mov	r0, r5
 800d81a:	f7ff fcd1 	bl	800d1c0 <_fflush_r>
 800d81e:	b988      	cbnz	r0, 800d844 <__swbuf_r+0x90>
 800d820:	4638      	mov	r0, r7
 800d822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d824:	4b0a      	ldr	r3, [pc, #40]	; (800d850 <__swbuf_r+0x9c>)
 800d826:	429c      	cmp	r4, r3
 800d828:	d101      	bne.n	800d82e <__swbuf_r+0x7a>
 800d82a:	68ac      	ldr	r4, [r5, #8]
 800d82c:	e7cf      	b.n	800d7ce <__swbuf_r+0x1a>
 800d82e:	4b09      	ldr	r3, [pc, #36]	; (800d854 <__swbuf_r+0xa0>)
 800d830:	429c      	cmp	r4, r3
 800d832:	bf08      	it	eq
 800d834:	68ec      	ldreq	r4, [r5, #12]
 800d836:	e7ca      	b.n	800d7ce <__swbuf_r+0x1a>
 800d838:	4621      	mov	r1, r4
 800d83a:	4628      	mov	r0, r5
 800d83c:	f000 f81a 	bl	800d874 <__swsetup_r>
 800d840:	2800      	cmp	r0, #0
 800d842:	d0cb      	beq.n	800d7dc <__swbuf_r+0x28>
 800d844:	f04f 37ff 	mov.w	r7, #4294967295
 800d848:	e7ea      	b.n	800d820 <__swbuf_r+0x6c>
 800d84a:	bf00      	nop
 800d84c:	0800f164 	.word	0x0800f164
 800d850:	0800f184 	.word	0x0800f184
 800d854:	0800f144 	.word	0x0800f144

0800d858 <__ascii_wctomb>:
 800d858:	b149      	cbz	r1, 800d86e <__ascii_wctomb+0x16>
 800d85a:	2aff      	cmp	r2, #255	; 0xff
 800d85c:	bf85      	ittet	hi
 800d85e:	238a      	movhi	r3, #138	; 0x8a
 800d860:	6003      	strhi	r3, [r0, #0]
 800d862:	700a      	strbls	r2, [r1, #0]
 800d864:	f04f 30ff 	movhi.w	r0, #4294967295
 800d868:	bf98      	it	ls
 800d86a:	2001      	movls	r0, #1
 800d86c:	4770      	bx	lr
 800d86e:	4608      	mov	r0, r1
 800d870:	4770      	bx	lr
	...

0800d874 <__swsetup_r>:
 800d874:	4b32      	ldr	r3, [pc, #200]	; (800d940 <__swsetup_r+0xcc>)
 800d876:	b570      	push	{r4, r5, r6, lr}
 800d878:	681d      	ldr	r5, [r3, #0]
 800d87a:	4606      	mov	r6, r0
 800d87c:	460c      	mov	r4, r1
 800d87e:	b125      	cbz	r5, 800d88a <__swsetup_r+0x16>
 800d880:	69ab      	ldr	r3, [r5, #24]
 800d882:	b913      	cbnz	r3, 800d88a <__swsetup_r+0x16>
 800d884:	4628      	mov	r0, r5
 800d886:	f7ff fd2f 	bl	800d2e8 <__sinit>
 800d88a:	4b2e      	ldr	r3, [pc, #184]	; (800d944 <__swsetup_r+0xd0>)
 800d88c:	429c      	cmp	r4, r3
 800d88e:	d10f      	bne.n	800d8b0 <__swsetup_r+0x3c>
 800d890:	686c      	ldr	r4, [r5, #4]
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d898:	0719      	lsls	r1, r3, #28
 800d89a:	d42c      	bmi.n	800d8f6 <__swsetup_r+0x82>
 800d89c:	06dd      	lsls	r5, r3, #27
 800d89e:	d411      	bmi.n	800d8c4 <__swsetup_r+0x50>
 800d8a0:	2309      	movs	r3, #9
 800d8a2:	6033      	str	r3, [r6, #0]
 800d8a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8a8:	81a3      	strh	r3, [r4, #12]
 800d8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ae:	e03e      	b.n	800d92e <__swsetup_r+0xba>
 800d8b0:	4b25      	ldr	r3, [pc, #148]	; (800d948 <__swsetup_r+0xd4>)
 800d8b2:	429c      	cmp	r4, r3
 800d8b4:	d101      	bne.n	800d8ba <__swsetup_r+0x46>
 800d8b6:	68ac      	ldr	r4, [r5, #8]
 800d8b8:	e7eb      	b.n	800d892 <__swsetup_r+0x1e>
 800d8ba:	4b24      	ldr	r3, [pc, #144]	; (800d94c <__swsetup_r+0xd8>)
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	bf08      	it	eq
 800d8c0:	68ec      	ldreq	r4, [r5, #12]
 800d8c2:	e7e6      	b.n	800d892 <__swsetup_r+0x1e>
 800d8c4:	0758      	lsls	r0, r3, #29
 800d8c6:	d512      	bpl.n	800d8ee <__swsetup_r+0x7a>
 800d8c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8ca:	b141      	cbz	r1, 800d8de <__swsetup_r+0x6a>
 800d8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8d0:	4299      	cmp	r1, r3
 800d8d2:	d002      	beq.n	800d8da <__swsetup_r+0x66>
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	f7fc fd4f 	bl	800a378 <_free_r>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	6363      	str	r3, [r4, #52]	; 0x34
 800d8de:	89a3      	ldrh	r3, [r4, #12]
 800d8e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d8e4:	81a3      	strh	r3, [r4, #12]
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	6063      	str	r3, [r4, #4]
 800d8ea:	6923      	ldr	r3, [r4, #16]
 800d8ec:	6023      	str	r3, [r4, #0]
 800d8ee:	89a3      	ldrh	r3, [r4, #12]
 800d8f0:	f043 0308 	orr.w	r3, r3, #8
 800d8f4:	81a3      	strh	r3, [r4, #12]
 800d8f6:	6923      	ldr	r3, [r4, #16]
 800d8f8:	b94b      	cbnz	r3, 800d90e <__swsetup_r+0x9a>
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d904:	d003      	beq.n	800d90e <__swsetup_r+0x9a>
 800d906:	4621      	mov	r1, r4
 800d908:	4630      	mov	r0, r6
 800d90a:	f000 f84d 	bl	800d9a8 <__smakebuf_r>
 800d90e:	89a0      	ldrh	r0, [r4, #12]
 800d910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d914:	f010 0301 	ands.w	r3, r0, #1
 800d918:	d00a      	beq.n	800d930 <__swsetup_r+0xbc>
 800d91a:	2300      	movs	r3, #0
 800d91c:	60a3      	str	r3, [r4, #8]
 800d91e:	6963      	ldr	r3, [r4, #20]
 800d920:	425b      	negs	r3, r3
 800d922:	61a3      	str	r3, [r4, #24]
 800d924:	6923      	ldr	r3, [r4, #16]
 800d926:	b943      	cbnz	r3, 800d93a <__swsetup_r+0xc6>
 800d928:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d92c:	d1ba      	bne.n	800d8a4 <__swsetup_r+0x30>
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
 800d930:	0781      	lsls	r1, r0, #30
 800d932:	bf58      	it	pl
 800d934:	6963      	ldrpl	r3, [r4, #20]
 800d936:	60a3      	str	r3, [r4, #8]
 800d938:	e7f4      	b.n	800d924 <__swsetup_r+0xb0>
 800d93a:	2000      	movs	r0, #0
 800d93c:	e7f7      	b.n	800d92e <__swsetup_r+0xba>
 800d93e:	bf00      	nop
 800d940:	200001d8 	.word	0x200001d8
 800d944:	0800f164 	.word	0x0800f164
 800d948:	0800f184 	.word	0x0800f184
 800d94c:	0800f144 	.word	0x0800f144

0800d950 <abort>:
 800d950:	b508      	push	{r3, lr}
 800d952:	2006      	movs	r0, #6
 800d954:	f000 f898 	bl	800da88 <raise>
 800d958:	2001      	movs	r0, #1
 800d95a:	f7f6 f98b 	bl	8003c74 <_exit>

0800d95e <__swhatbuf_r>:
 800d95e:	b570      	push	{r4, r5, r6, lr}
 800d960:	460e      	mov	r6, r1
 800d962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d966:	2900      	cmp	r1, #0
 800d968:	b096      	sub	sp, #88	; 0x58
 800d96a:	4614      	mov	r4, r2
 800d96c:	461d      	mov	r5, r3
 800d96e:	da08      	bge.n	800d982 <__swhatbuf_r+0x24>
 800d970:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d974:	2200      	movs	r2, #0
 800d976:	602a      	str	r2, [r5, #0]
 800d978:	061a      	lsls	r2, r3, #24
 800d97a:	d410      	bmi.n	800d99e <__swhatbuf_r+0x40>
 800d97c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d980:	e00e      	b.n	800d9a0 <__swhatbuf_r+0x42>
 800d982:	466a      	mov	r2, sp
 800d984:	f000 f89c 	bl	800dac0 <_fstat_r>
 800d988:	2800      	cmp	r0, #0
 800d98a:	dbf1      	blt.n	800d970 <__swhatbuf_r+0x12>
 800d98c:	9a01      	ldr	r2, [sp, #4]
 800d98e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d992:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d996:	425a      	negs	r2, r3
 800d998:	415a      	adcs	r2, r3
 800d99a:	602a      	str	r2, [r5, #0]
 800d99c:	e7ee      	b.n	800d97c <__swhatbuf_r+0x1e>
 800d99e:	2340      	movs	r3, #64	; 0x40
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	6023      	str	r3, [r4, #0]
 800d9a4:	b016      	add	sp, #88	; 0x58
 800d9a6:	bd70      	pop	{r4, r5, r6, pc}

0800d9a8 <__smakebuf_r>:
 800d9a8:	898b      	ldrh	r3, [r1, #12]
 800d9aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9ac:	079d      	lsls	r5, r3, #30
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	d507      	bpl.n	800d9c4 <__smakebuf_r+0x1c>
 800d9b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9b8:	6023      	str	r3, [r4, #0]
 800d9ba:	6123      	str	r3, [r4, #16]
 800d9bc:	2301      	movs	r3, #1
 800d9be:	6163      	str	r3, [r4, #20]
 800d9c0:	b002      	add	sp, #8
 800d9c2:	bd70      	pop	{r4, r5, r6, pc}
 800d9c4:	ab01      	add	r3, sp, #4
 800d9c6:	466a      	mov	r2, sp
 800d9c8:	f7ff ffc9 	bl	800d95e <__swhatbuf_r>
 800d9cc:	9900      	ldr	r1, [sp, #0]
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	f7fc fd3d 	bl	800a450 <_malloc_r>
 800d9d6:	b948      	cbnz	r0, 800d9ec <__smakebuf_r+0x44>
 800d9d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9dc:	059a      	lsls	r2, r3, #22
 800d9de:	d4ef      	bmi.n	800d9c0 <__smakebuf_r+0x18>
 800d9e0:	f023 0303 	bic.w	r3, r3, #3
 800d9e4:	f043 0302 	orr.w	r3, r3, #2
 800d9e8:	81a3      	strh	r3, [r4, #12]
 800d9ea:	e7e3      	b.n	800d9b4 <__smakebuf_r+0xc>
 800d9ec:	4b0d      	ldr	r3, [pc, #52]	; (800da24 <__smakebuf_r+0x7c>)
 800d9ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	6020      	str	r0, [r4, #0]
 800d9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9f8:	81a3      	strh	r3, [r4, #12]
 800d9fa:	9b00      	ldr	r3, [sp, #0]
 800d9fc:	6163      	str	r3, [r4, #20]
 800d9fe:	9b01      	ldr	r3, [sp, #4]
 800da00:	6120      	str	r0, [r4, #16]
 800da02:	b15b      	cbz	r3, 800da1c <__smakebuf_r+0x74>
 800da04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da08:	4630      	mov	r0, r6
 800da0a:	f000 f86b 	bl	800dae4 <_isatty_r>
 800da0e:	b128      	cbz	r0, 800da1c <__smakebuf_r+0x74>
 800da10:	89a3      	ldrh	r3, [r4, #12]
 800da12:	f023 0303 	bic.w	r3, r3, #3
 800da16:	f043 0301 	orr.w	r3, r3, #1
 800da1a:	81a3      	strh	r3, [r4, #12]
 800da1c:	89a0      	ldrh	r0, [r4, #12]
 800da1e:	4305      	orrs	r5, r0
 800da20:	81a5      	strh	r5, [r4, #12]
 800da22:	e7cd      	b.n	800d9c0 <__smakebuf_r+0x18>
 800da24:	0800d281 	.word	0x0800d281

0800da28 <_malloc_usable_size_r>:
 800da28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da2c:	1f18      	subs	r0, r3, #4
 800da2e:	2b00      	cmp	r3, #0
 800da30:	bfbc      	itt	lt
 800da32:	580b      	ldrlt	r3, [r1, r0]
 800da34:	18c0      	addlt	r0, r0, r3
 800da36:	4770      	bx	lr

0800da38 <_raise_r>:
 800da38:	291f      	cmp	r1, #31
 800da3a:	b538      	push	{r3, r4, r5, lr}
 800da3c:	4604      	mov	r4, r0
 800da3e:	460d      	mov	r5, r1
 800da40:	d904      	bls.n	800da4c <_raise_r+0x14>
 800da42:	2316      	movs	r3, #22
 800da44:	6003      	str	r3, [r0, #0]
 800da46:	f04f 30ff 	mov.w	r0, #4294967295
 800da4a:	bd38      	pop	{r3, r4, r5, pc}
 800da4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da4e:	b112      	cbz	r2, 800da56 <_raise_r+0x1e>
 800da50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da54:	b94b      	cbnz	r3, 800da6a <_raise_r+0x32>
 800da56:	4620      	mov	r0, r4
 800da58:	f000 f830 	bl	800dabc <_getpid_r>
 800da5c:	462a      	mov	r2, r5
 800da5e:	4601      	mov	r1, r0
 800da60:	4620      	mov	r0, r4
 800da62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da66:	f000 b817 	b.w	800da98 <_kill_r>
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d00a      	beq.n	800da84 <_raise_r+0x4c>
 800da6e:	1c59      	adds	r1, r3, #1
 800da70:	d103      	bne.n	800da7a <_raise_r+0x42>
 800da72:	2316      	movs	r3, #22
 800da74:	6003      	str	r3, [r0, #0]
 800da76:	2001      	movs	r0, #1
 800da78:	e7e7      	b.n	800da4a <_raise_r+0x12>
 800da7a:	2400      	movs	r4, #0
 800da7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da80:	4628      	mov	r0, r5
 800da82:	4798      	blx	r3
 800da84:	2000      	movs	r0, #0
 800da86:	e7e0      	b.n	800da4a <_raise_r+0x12>

0800da88 <raise>:
 800da88:	4b02      	ldr	r3, [pc, #8]	; (800da94 <raise+0xc>)
 800da8a:	4601      	mov	r1, r0
 800da8c:	6818      	ldr	r0, [r3, #0]
 800da8e:	f7ff bfd3 	b.w	800da38 <_raise_r>
 800da92:	bf00      	nop
 800da94:	200001d8 	.word	0x200001d8

0800da98 <_kill_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	4d07      	ldr	r5, [pc, #28]	; (800dab8 <_kill_r+0x20>)
 800da9c:	2300      	movs	r3, #0
 800da9e:	4604      	mov	r4, r0
 800daa0:	4608      	mov	r0, r1
 800daa2:	4611      	mov	r1, r2
 800daa4:	602b      	str	r3, [r5, #0]
 800daa6:	f7f6 f8d5 	bl	8003c54 <_kill>
 800daaa:	1c43      	adds	r3, r0, #1
 800daac:	d102      	bne.n	800dab4 <_kill_r+0x1c>
 800daae:	682b      	ldr	r3, [r5, #0]
 800dab0:	b103      	cbz	r3, 800dab4 <_kill_r+0x1c>
 800dab2:	6023      	str	r3, [r4, #0]
 800dab4:	bd38      	pop	{r3, r4, r5, pc}
 800dab6:	bf00      	nop
 800dab8:	20000d78 	.word	0x20000d78

0800dabc <_getpid_r>:
 800dabc:	f7f6 b8c2 	b.w	8003c44 <_getpid>

0800dac0 <_fstat_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4d07      	ldr	r5, [pc, #28]	; (800dae0 <_fstat_r+0x20>)
 800dac4:	2300      	movs	r3, #0
 800dac6:	4604      	mov	r4, r0
 800dac8:	4608      	mov	r0, r1
 800daca:	4611      	mov	r1, r2
 800dacc:	602b      	str	r3, [r5, #0]
 800dace:	f7f6 f920 	bl	8003d12 <_fstat>
 800dad2:	1c43      	adds	r3, r0, #1
 800dad4:	d102      	bne.n	800dadc <_fstat_r+0x1c>
 800dad6:	682b      	ldr	r3, [r5, #0]
 800dad8:	b103      	cbz	r3, 800dadc <_fstat_r+0x1c>
 800dada:	6023      	str	r3, [r4, #0]
 800dadc:	bd38      	pop	{r3, r4, r5, pc}
 800dade:	bf00      	nop
 800dae0:	20000d78 	.word	0x20000d78

0800dae4 <_isatty_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4d06      	ldr	r5, [pc, #24]	; (800db00 <_isatty_r+0x1c>)
 800dae8:	2300      	movs	r3, #0
 800daea:	4604      	mov	r4, r0
 800daec:	4608      	mov	r0, r1
 800daee:	602b      	str	r3, [r5, #0]
 800daf0:	f7f6 f91f 	bl	8003d32 <_isatty>
 800daf4:	1c43      	adds	r3, r0, #1
 800daf6:	d102      	bne.n	800dafe <_isatty_r+0x1a>
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	b103      	cbz	r3, 800dafe <_isatty_r+0x1a>
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	bd38      	pop	{r3, r4, r5, pc}
 800db00:	20000d78 	.word	0x20000d78
 800db04:	00000000 	.word	0x00000000

0800db08 <atan>:
 800db08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	ec55 4b10 	vmov	r4, r5, d0
 800db10:	4bc3      	ldr	r3, [pc, #780]	; (800de20 <atan+0x318>)
 800db12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db16:	429e      	cmp	r6, r3
 800db18:	46ab      	mov	fp, r5
 800db1a:	dd18      	ble.n	800db4e <atan+0x46>
 800db1c:	4bc1      	ldr	r3, [pc, #772]	; (800de24 <atan+0x31c>)
 800db1e:	429e      	cmp	r6, r3
 800db20:	dc01      	bgt.n	800db26 <atan+0x1e>
 800db22:	d109      	bne.n	800db38 <atan+0x30>
 800db24:	b144      	cbz	r4, 800db38 <atan+0x30>
 800db26:	4622      	mov	r2, r4
 800db28:	462b      	mov	r3, r5
 800db2a:	4620      	mov	r0, r4
 800db2c:	4629      	mov	r1, r5
 800db2e:	f7f2 fbc5 	bl	80002bc <__adddf3>
 800db32:	4604      	mov	r4, r0
 800db34:	460d      	mov	r5, r1
 800db36:	e006      	b.n	800db46 <atan+0x3e>
 800db38:	f1bb 0f00 	cmp.w	fp, #0
 800db3c:	f300 8131 	bgt.w	800dda2 <atan+0x29a>
 800db40:	a59b      	add	r5, pc, #620	; (adr r5, 800ddb0 <atan+0x2a8>)
 800db42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db46:	ec45 4b10 	vmov	d0, r4, r5
 800db4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4e:	4bb6      	ldr	r3, [pc, #728]	; (800de28 <atan+0x320>)
 800db50:	429e      	cmp	r6, r3
 800db52:	dc14      	bgt.n	800db7e <atan+0x76>
 800db54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800db58:	429e      	cmp	r6, r3
 800db5a:	dc0d      	bgt.n	800db78 <atan+0x70>
 800db5c:	a396      	add	r3, pc, #600	; (adr r3, 800ddb8 <atan+0x2b0>)
 800db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db62:	ee10 0a10 	vmov	r0, s0
 800db66:	4629      	mov	r1, r5
 800db68:	f7f2 fba8 	bl	80002bc <__adddf3>
 800db6c:	4baf      	ldr	r3, [pc, #700]	; (800de2c <atan+0x324>)
 800db6e:	2200      	movs	r2, #0
 800db70:	f7f2 ffea 	bl	8000b48 <__aeabi_dcmpgt>
 800db74:	2800      	cmp	r0, #0
 800db76:	d1e6      	bne.n	800db46 <atan+0x3e>
 800db78:	f04f 3aff 	mov.w	sl, #4294967295
 800db7c:	e02b      	b.n	800dbd6 <atan+0xce>
 800db7e:	f000 f963 	bl	800de48 <fabs>
 800db82:	4bab      	ldr	r3, [pc, #684]	; (800de30 <atan+0x328>)
 800db84:	429e      	cmp	r6, r3
 800db86:	ec55 4b10 	vmov	r4, r5, d0
 800db8a:	f300 80bf 	bgt.w	800dd0c <atan+0x204>
 800db8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800db92:	429e      	cmp	r6, r3
 800db94:	f300 80a0 	bgt.w	800dcd8 <atan+0x1d0>
 800db98:	ee10 2a10 	vmov	r2, s0
 800db9c:	ee10 0a10 	vmov	r0, s0
 800dba0:	462b      	mov	r3, r5
 800dba2:	4629      	mov	r1, r5
 800dba4:	f7f2 fb8a 	bl	80002bc <__adddf3>
 800dba8:	4ba0      	ldr	r3, [pc, #640]	; (800de2c <atan+0x324>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f7f2 fb84 	bl	80002b8 <__aeabi_dsub>
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	460f      	mov	r7, r1
 800dbb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dbba:	4620      	mov	r0, r4
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	f7f2 fb7d 	bl	80002bc <__adddf3>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	4639      	mov	r1, r7
 800dbca:	f7f2 fe57 	bl	800087c <__aeabi_ddiv>
 800dbce:	f04f 0a00 	mov.w	sl, #0
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	460d      	mov	r5, r1
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	462b      	mov	r3, r5
 800dbda:	4620      	mov	r0, r4
 800dbdc:	4629      	mov	r1, r5
 800dbde:	f7f2 fd23 	bl	8000628 <__aeabi_dmul>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	4680      	mov	r8, r0
 800dbe8:	4689      	mov	r9, r1
 800dbea:	f7f2 fd1d 	bl	8000628 <__aeabi_dmul>
 800dbee:	a374      	add	r3, pc, #464	; (adr r3, 800ddc0 <atan+0x2b8>)
 800dbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf4:	4606      	mov	r6, r0
 800dbf6:	460f      	mov	r7, r1
 800dbf8:	f7f2 fd16 	bl	8000628 <__aeabi_dmul>
 800dbfc:	a372      	add	r3, pc, #456	; (adr r3, 800ddc8 <atan+0x2c0>)
 800dbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc02:	f7f2 fb5b 	bl	80002bc <__adddf3>
 800dc06:	4632      	mov	r2, r6
 800dc08:	463b      	mov	r3, r7
 800dc0a:	f7f2 fd0d 	bl	8000628 <__aeabi_dmul>
 800dc0e:	a370      	add	r3, pc, #448	; (adr r3, 800ddd0 <atan+0x2c8>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	f7f2 fb52 	bl	80002bc <__adddf3>
 800dc18:	4632      	mov	r2, r6
 800dc1a:	463b      	mov	r3, r7
 800dc1c:	f7f2 fd04 	bl	8000628 <__aeabi_dmul>
 800dc20:	a36d      	add	r3, pc, #436	; (adr r3, 800ddd8 <atan+0x2d0>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	f7f2 fb49 	bl	80002bc <__adddf3>
 800dc2a:	4632      	mov	r2, r6
 800dc2c:	463b      	mov	r3, r7
 800dc2e:	f7f2 fcfb 	bl	8000628 <__aeabi_dmul>
 800dc32:	a36b      	add	r3, pc, #428	; (adr r3, 800dde0 <atan+0x2d8>)
 800dc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc38:	f7f2 fb40 	bl	80002bc <__adddf3>
 800dc3c:	4632      	mov	r2, r6
 800dc3e:	463b      	mov	r3, r7
 800dc40:	f7f2 fcf2 	bl	8000628 <__aeabi_dmul>
 800dc44:	a368      	add	r3, pc, #416	; (adr r3, 800dde8 <atan+0x2e0>)
 800dc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4a:	f7f2 fb37 	bl	80002bc <__adddf3>
 800dc4e:	4642      	mov	r2, r8
 800dc50:	464b      	mov	r3, r9
 800dc52:	f7f2 fce9 	bl	8000628 <__aeabi_dmul>
 800dc56:	a366      	add	r3, pc, #408	; (adr r3, 800ddf0 <atan+0x2e8>)
 800dc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5c:	4680      	mov	r8, r0
 800dc5e:	4689      	mov	r9, r1
 800dc60:	4630      	mov	r0, r6
 800dc62:	4639      	mov	r1, r7
 800dc64:	f7f2 fce0 	bl	8000628 <__aeabi_dmul>
 800dc68:	a363      	add	r3, pc, #396	; (adr r3, 800ddf8 <atan+0x2f0>)
 800dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6e:	f7f2 fb23 	bl	80002b8 <__aeabi_dsub>
 800dc72:	4632      	mov	r2, r6
 800dc74:	463b      	mov	r3, r7
 800dc76:	f7f2 fcd7 	bl	8000628 <__aeabi_dmul>
 800dc7a:	a361      	add	r3, pc, #388	; (adr r3, 800de00 <atan+0x2f8>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	f7f2 fb1a 	bl	80002b8 <__aeabi_dsub>
 800dc84:	4632      	mov	r2, r6
 800dc86:	463b      	mov	r3, r7
 800dc88:	f7f2 fcce 	bl	8000628 <__aeabi_dmul>
 800dc8c:	a35e      	add	r3, pc, #376	; (adr r3, 800de08 <atan+0x300>)
 800dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc92:	f7f2 fb11 	bl	80002b8 <__aeabi_dsub>
 800dc96:	4632      	mov	r2, r6
 800dc98:	463b      	mov	r3, r7
 800dc9a:	f7f2 fcc5 	bl	8000628 <__aeabi_dmul>
 800dc9e:	a35c      	add	r3, pc, #368	; (adr r3, 800de10 <atan+0x308>)
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	f7f2 fb08 	bl	80002b8 <__aeabi_dsub>
 800dca8:	4632      	mov	r2, r6
 800dcaa:	463b      	mov	r3, r7
 800dcac:	f7f2 fcbc 	bl	8000628 <__aeabi_dmul>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4640      	mov	r0, r8
 800dcb6:	4649      	mov	r1, r9
 800dcb8:	f7f2 fb00 	bl	80002bc <__adddf3>
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	462b      	mov	r3, r5
 800dcc0:	f7f2 fcb2 	bl	8000628 <__aeabi_dmul>
 800dcc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	d14b      	bne.n	800dd66 <atan+0x25e>
 800dcce:	4620      	mov	r0, r4
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	f7f2 faf1 	bl	80002b8 <__aeabi_dsub>
 800dcd6:	e72c      	b.n	800db32 <atan+0x2a>
 800dcd8:	ee10 0a10 	vmov	r0, s0
 800dcdc:	4b53      	ldr	r3, [pc, #332]	; (800de2c <atan+0x324>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	4629      	mov	r1, r5
 800dce2:	f7f2 fae9 	bl	80002b8 <__aeabi_dsub>
 800dce6:	4b51      	ldr	r3, [pc, #324]	; (800de2c <atan+0x324>)
 800dce8:	4606      	mov	r6, r0
 800dcea:	460f      	mov	r7, r1
 800dcec:	2200      	movs	r2, #0
 800dcee:	4620      	mov	r0, r4
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	f7f2 fae3 	bl	80002bc <__adddf3>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	4639      	mov	r1, r7
 800dcfe:	f7f2 fdbd 	bl	800087c <__aeabi_ddiv>
 800dd02:	f04f 0a01 	mov.w	sl, #1
 800dd06:	4604      	mov	r4, r0
 800dd08:	460d      	mov	r5, r1
 800dd0a:	e764      	b.n	800dbd6 <atan+0xce>
 800dd0c:	4b49      	ldr	r3, [pc, #292]	; (800de34 <atan+0x32c>)
 800dd0e:	429e      	cmp	r6, r3
 800dd10:	da1d      	bge.n	800dd4e <atan+0x246>
 800dd12:	ee10 0a10 	vmov	r0, s0
 800dd16:	4b48      	ldr	r3, [pc, #288]	; (800de38 <atan+0x330>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	4629      	mov	r1, r5
 800dd1c:	f7f2 facc 	bl	80002b8 <__aeabi_dsub>
 800dd20:	4b45      	ldr	r3, [pc, #276]	; (800de38 <atan+0x330>)
 800dd22:	4606      	mov	r6, r0
 800dd24:	460f      	mov	r7, r1
 800dd26:	2200      	movs	r2, #0
 800dd28:	4620      	mov	r0, r4
 800dd2a:	4629      	mov	r1, r5
 800dd2c:	f7f2 fc7c 	bl	8000628 <__aeabi_dmul>
 800dd30:	4b3e      	ldr	r3, [pc, #248]	; (800de2c <atan+0x324>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	f7f2 fac2 	bl	80002bc <__adddf3>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	4639      	mov	r1, r7
 800dd40:	f7f2 fd9c 	bl	800087c <__aeabi_ddiv>
 800dd44:	f04f 0a02 	mov.w	sl, #2
 800dd48:	4604      	mov	r4, r0
 800dd4a:	460d      	mov	r5, r1
 800dd4c:	e743      	b.n	800dbd6 <atan+0xce>
 800dd4e:	462b      	mov	r3, r5
 800dd50:	ee10 2a10 	vmov	r2, s0
 800dd54:	4939      	ldr	r1, [pc, #228]	; (800de3c <atan+0x334>)
 800dd56:	2000      	movs	r0, #0
 800dd58:	f7f2 fd90 	bl	800087c <__aeabi_ddiv>
 800dd5c:	f04f 0a03 	mov.w	sl, #3
 800dd60:	4604      	mov	r4, r0
 800dd62:	460d      	mov	r5, r1
 800dd64:	e737      	b.n	800dbd6 <atan+0xce>
 800dd66:	4b36      	ldr	r3, [pc, #216]	; (800de40 <atan+0x338>)
 800dd68:	4e36      	ldr	r6, [pc, #216]	; (800de44 <atan+0x33c>)
 800dd6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dd6e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800dd72:	e9da 2300 	ldrd	r2, r3, [sl]
 800dd76:	f7f2 fa9f 	bl	80002b8 <__aeabi_dsub>
 800dd7a:	4622      	mov	r2, r4
 800dd7c:	462b      	mov	r3, r5
 800dd7e:	f7f2 fa9b 	bl	80002b8 <__aeabi_dsub>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dd8a:	f7f2 fa95 	bl	80002b8 <__aeabi_dsub>
 800dd8e:	f1bb 0f00 	cmp.w	fp, #0
 800dd92:	4604      	mov	r4, r0
 800dd94:	460d      	mov	r5, r1
 800dd96:	f6bf aed6 	bge.w	800db46 <atan+0x3e>
 800dd9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd9e:	461d      	mov	r5, r3
 800dda0:	e6d1      	b.n	800db46 <atan+0x3e>
 800dda2:	a51d      	add	r5, pc, #116	; (adr r5, 800de18 <atan+0x310>)
 800dda4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dda8:	e6cd      	b.n	800db46 <atan+0x3e>
 800ddaa:	bf00      	nop
 800ddac:	f3af 8000 	nop.w
 800ddb0:	54442d18 	.word	0x54442d18
 800ddb4:	bff921fb 	.word	0xbff921fb
 800ddb8:	8800759c 	.word	0x8800759c
 800ddbc:	7e37e43c 	.word	0x7e37e43c
 800ddc0:	e322da11 	.word	0xe322da11
 800ddc4:	3f90ad3a 	.word	0x3f90ad3a
 800ddc8:	24760deb 	.word	0x24760deb
 800ddcc:	3fa97b4b 	.word	0x3fa97b4b
 800ddd0:	a0d03d51 	.word	0xa0d03d51
 800ddd4:	3fb10d66 	.word	0x3fb10d66
 800ddd8:	c54c206e 	.word	0xc54c206e
 800dddc:	3fb745cd 	.word	0x3fb745cd
 800dde0:	920083ff 	.word	0x920083ff
 800dde4:	3fc24924 	.word	0x3fc24924
 800dde8:	5555550d 	.word	0x5555550d
 800ddec:	3fd55555 	.word	0x3fd55555
 800ddf0:	2c6a6c2f 	.word	0x2c6a6c2f
 800ddf4:	bfa2b444 	.word	0xbfa2b444
 800ddf8:	52defd9a 	.word	0x52defd9a
 800ddfc:	3fadde2d 	.word	0x3fadde2d
 800de00:	af749a6d 	.word	0xaf749a6d
 800de04:	3fb3b0f2 	.word	0x3fb3b0f2
 800de08:	fe231671 	.word	0xfe231671
 800de0c:	3fbc71c6 	.word	0x3fbc71c6
 800de10:	9998ebc4 	.word	0x9998ebc4
 800de14:	3fc99999 	.word	0x3fc99999
 800de18:	54442d18 	.word	0x54442d18
 800de1c:	3ff921fb 	.word	0x3ff921fb
 800de20:	440fffff 	.word	0x440fffff
 800de24:	7ff00000 	.word	0x7ff00000
 800de28:	3fdbffff 	.word	0x3fdbffff
 800de2c:	3ff00000 	.word	0x3ff00000
 800de30:	3ff2ffff 	.word	0x3ff2ffff
 800de34:	40038000 	.word	0x40038000
 800de38:	3ff80000 	.word	0x3ff80000
 800de3c:	bff00000 	.word	0xbff00000
 800de40:	0800f1d0 	.word	0x0800f1d0
 800de44:	0800f1b0 	.word	0x0800f1b0

0800de48 <fabs>:
 800de48:	ec51 0b10 	vmov	r0, r1, d0
 800de4c:	ee10 2a10 	vmov	r2, s0
 800de50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de54:	ec43 2b10 	vmov	d0, r2, r3
 800de58:	4770      	bx	lr

0800de5a <atan2>:
 800de5a:	f000 b82d 	b.w	800deb8 <__ieee754_atan2>

0800de5e <sqrt>:
 800de5e:	b538      	push	{r3, r4, r5, lr}
 800de60:	ed2d 8b02 	vpush	{d8}
 800de64:	ec55 4b10 	vmov	r4, r5, d0
 800de68:	f000 f8f0 	bl	800e04c <__ieee754_sqrt>
 800de6c:	4622      	mov	r2, r4
 800de6e:	462b      	mov	r3, r5
 800de70:	4620      	mov	r0, r4
 800de72:	4629      	mov	r1, r5
 800de74:	eeb0 8a40 	vmov.f32	s16, s0
 800de78:	eef0 8a60 	vmov.f32	s17, s1
 800de7c:	f7f2 fe6e 	bl	8000b5c <__aeabi_dcmpun>
 800de80:	b990      	cbnz	r0, 800dea8 <sqrt+0x4a>
 800de82:	2200      	movs	r2, #0
 800de84:	2300      	movs	r3, #0
 800de86:	4620      	mov	r0, r4
 800de88:	4629      	mov	r1, r5
 800de8a:	f7f2 fe3f 	bl	8000b0c <__aeabi_dcmplt>
 800de8e:	b158      	cbz	r0, 800dea8 <sqrt+0x4a>
 800de90:	f7fc fa30 	bl	800a2f4 <__errno>
 800de94:	2321      	movs	r3, #33	; 0x21
 800de96:	6003      	str	r3, [r0, #0]
 800de98:	2200      	movs	r2, #0
 800de9a:	2300      	movs	r3, #0
 800de9c:	4610      	mov	r0, r2
 800de9e:	4619      	mov	r1, r3
 800dea0:	f7f2 fcec 	bl	800087c <__aeabi_ddiv>
 800dea4:	ec41 0b18 	vmov	d8, r0, r1
 800dea8:	eeb0 0a48 	vmov.f32	s0, s16
 800deac:	eef0 0a68 	vmov.f32	s1, s17
 800deb0:	ecbd 8b02 	vpop	{d8}
 800deb4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800deb8 <__ieee754_atan2>:
 800deb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800debc:	ec57 6b11 	vmov	r6, r7, d1
 800dec0:	4273      	negs	r3, r6
 800dec2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e048 <__ieee754_atan2+0x190>
 800dec6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800deca:	4333      	orrs	r3, r6
 800decc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ded0:	4573      	cmp	r3, lr
 800ded2:	ec51 0b10 	vmov	r0, r1, d0
 800ded6:	ee11 8a10 	vmov	r8, s2
 800deda:	d80a      	bhi.n	800def2 <__ieee754_atan2+0x3a>
 800dedc:	4244      	negs	r4, r0
 800dede:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dee2:	4304      	orrs	r4, r0
 800dee4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800dee8:	4574      	cmp	r4, lr
 800deea:	ee10 9a10 	vmov	r9, s0
 800deee:	468c      	mov	ip, r1
 800def0:	d907      	bls.n	800df02 <__ieee754_atan2+0x4a>
 800def2:	4632      	mov	r2, r6
 800def4:	463b      	mov	r3, r7
 800def6:	f7f2 f9e1 	bl	80002bc <__adddf3>
 800defa:	ec41 0b10 	vmov	d0, r0, r1
 800defe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800df06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800df0a:	4334      	orrs	r4, r6
 800df0c:	d103      	bne.n	800df16 <__ieee754_atan2+0x5e>
 800df0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df12:	f7ff bdf9 	b.w	800db08 <atan>
 800df16:	17bc      	asrs	r4, r7, #30
 800df18:	f004 0402 	and.w	r4, r4, #2
 800df1c:	ea53 0909 	orrs.w	r9, r3, r9
 800df20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800df24:	d107      	bne.n	800df36 <__ieee754_atan2+0x7e>
 800df26:	2c02      	cmp	r4, #2
 800df28:	d060      	beq.n	800dfec <__ieee754_atan2+0x134>
 800df2a:	2c03      	cmp	r4, #3
 800df2c:	d1e5      	bne.n	800defa <__ieee754_atan2+0x42>
 800df2e:	a142      	add	r1, pc, #264	; (adr r1, 800e038 <__ieee754_atan2+0x180>)
 800df30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df34:	e7e1      	b.n	800defa <__ieee754_atan2+0x42>
 800df36:	ea52 0808 	orrs.w	r8, r2, r8
 800df3a:	d106      	bne.n	800df4a <__ieee754_atan2+0x92>
 800df3c:	f1bc 0f00 	cmp.w	ip, #0
 800df40:	da5f      	bge.n	800e002 <__ieee754_atan2+0x14a>
 800df42:	a13f      	add	r1, pc, #252	; (adr r1, 800e040 <__ieee754_atan2+0x188>)
 800df44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df48:	e7d7      	b.n	800defa <__ieee754_atan2+0x42>
 800df4a:	4572      	cmp	r2, lr
 800df4c:	d10f      	bne.n	800df6e <__ieee754_atan2+0xb6>
 800df4e:	4293      	cmp	r3, r2
 800df50:	f104 34ff 	add.w	r4, r4, #4294967295
 800df54:	d107      	bne.n	800df66 <__ieee754_atan2+0xae>
 800df56:	2c02      	cmp	r4, #2
 800df58:	d84c      	bhi.n	800dff4 <__ieee754_atan2+0x13c>
 800df5a:	4b35      	ldr	r3, [pc, #212]	; (800e030 <__ieee754_atan2+0x178>)
 800df5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800df60:	e9d4 0100 	ldrd	r0, r1, [r4]
 800df64:	e7c9      	b.n	800defa <__ieee754_atan2+0x42>
 800df66:	2c02      	cmp	r4, #2
 800df68:	d848      	bhi.n	800dffc <__ieee754_atan2+0x144>
 800df6a:	4b32      	ldr	r3, [pc, #200]	; (800e034 <__ieee754_atan2+0x17c>)
 800df6c:	e7f6      	b.n	800df5c <__ieee754_atan2+0xa4>
 800df6e:	4573      	cmp	r3, lr
 800df70:	d0e4      	beq.n	800df3c <__ieee754_atan2+0x84>
 800df72:	1a9b      	subs	r3, r3, r2
 800df74:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800df78:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df7c:	da1e      	bge.n	800dfbc <__ieee754_atan2+0x104>
 800df7e:	2f00      	cmp	r7, #0
 800df80:	da01      	bge.n	800df86 <__ieee754_atan2+0xce>
 800df82:	323c      	adds	r2, #60	; 0x3c
 800df84:	db1e      	blt.n	800dfc4 <__ieee754_atan2+0x10c>
 800df86:	4632      	mov	r2, r6
 800df88:	463b      	mov	r3, r7
 800df8a:	f7f2 fc77 	bl	800087c <__aeabi_ddiv>
 800df8e:	ec41 0b10 	vmov	d0, r0, r1
 800df92:	f7ff ff59 	bl	800de48 <fabs>
 800df96:	f7ff fdb7 	bl	800db08 <atan>
 800df9a:	ec51 0b10 	vmov	r0, r1, d0
 800df9e:	2c01      	cmp	r4, #1
 800dfa0:	d013      	beq.n	800dfca <__ieee754_atan2+0x112>
 800dfa2:	2c02      	cmp	r4, #2
 800dfa4:	d015      	beq.n	800dfd2 <__ieee754_atan2+0x11a>
 800dfa6:	2c00      	cmp	r4, #0
 800dfa8:	d0a7      	beq.n	800defa <__ieee754_atan2+0x42>
 800dfaa:	a319      	add	r3, pc, #100	; (adr r3, 800e010 <__ieee754_atan2+0x158>)
 800dfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb0:	f7f2 f982 	bl	80002b8 <__aeabi_dsub>
 800dfb4:	a318      	add	r3, pc, #96	; (adr r3, 800e018 <__ieee754_atan2+0x160>)
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	e014      	b.n	800dfe6 <__ieee754_atan2+0x12e>
 800dfbc:	a118      	add	r1, pc, #96	; (adr r1, 800e020 <__ieee754_atan2+0x168>)
 800dfbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfc2:	e7ec      	b.n	800df9e <__ieee754_atan2+0xe6>
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	e7e9      	b.n	800df9e <__ieee754_atan2+0xe6>
 800dfca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfce:	4619      	mov	r1, r3
 800dfd0:	e793      	b.n	800defa <__ieee754_atan2+0x42>
 800dfd2:	a30f      	add	r3, pc, #60	; (adr r3, 800e010 <__ieee754_atan2+0x158>)
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	f7f2 f96e 	bl	80002b8 <__aeabi_dsub>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	460b      	mov	r3, r1
 800dfe0:	a10d      	add	r1, pc, #52	; (adr r1, 800e018 <__ieee754_atan2+0x160>)
 800dfe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfe6:	f7f2 f967 	bl	80002b8 <__aeabi_dsub>
 800dfea:	e786      	b.n	800defa <__ieee754_atan2+0x42>
 800dfec:	a10a      	add	r1, pc, #40	; (adr r1, 800e018 <__ieee754_atan2+0x160>)
 800dfee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dff2:	e782      	b.n	800defa <__ieee754_atan2+0x42>
 800dff4:	a10c      	add	r1, pc, #48	; (adr r1, 800e028 <__ieee754_atan2+0x170>)
 800dff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dffa:	e77e      	b.n	800defa <__ieee754_atan2+0x42>
 800dffc:	2000      	movs	r0, #0
 800dffe:	2100      	movs	r1, #0
 800e000:	e77b      	b.n	800defa <__ieee754_atan2+0x42>
 800e002:	a107      	add	r1, pc, #28	; (adr r1, 800e020 <__ieee754_atan2+0x168>)
 800e004:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e008:	e777      	b.n	800defa <__ieee754_atan2+0x42>
 800e00a:	bf00      	nop
 800e00c:	f3af 8000 	nop.w
 800e010:	33145c07 	.word	0x33145c07
 800e014:	3ca1a626 	.word	0x3ca1a626
 800e018:	54442d18 	.word	0x54442d18
 800e01c:	400921fb 	.word	0x400921fb
 800e020:	54442d18 	.word	0x54442d18
 800e024:	3ff921fb 	.word	0x3ff921fb
 800e028:	54442d18 	.word	0x54442d18
 800e02c:	3fe921fb 	.word	0x3fe921fb
 800e030:	0800f1f0 	.word	0x0800f1f0
 800e034:	0800f208 	.word	0x0800f208
 800e038:	54442d18 	.word	0x54442d18
 800e03c:	c00921fb 	.word	0xc00921fb
 800e040:	54442d18 	.word	0x54442d18
 800e044:	bff921fb 	.word	0xbff921fb
 800e048:	7ff00000 	.word	0x7ff00000

0800e04c <__ieee754_sqrt>:
 800e04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e050:	ec55 4b10 	vmov	r4, r5, d0
 800e054:	4e55      	ldr	r6, [pc, #340]	; (800e1ac <__ieee754_sqrt+0x160>)
 800e056:	43ae      	bics	r6, r5
 800e058:	ee10 0a10 	vmov	r0, s0
 800e05c:	ee10 3a10 	vmov	r3, s0
 800e060:	462a      	mov	r2, r5
 800e062:	4629      	mov	r1, r5
 800e064:	d110      	bne.n	800e088 <__ieee754_sqrt+0x3c>
 800e066:	ee10 2a10 	vmov	r2, s0
 800e06a:	462b      	mov	r3, r5
 800e06c:	f7f2 fadc 	bl	8000628 <__aeabi_dmul>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	4620      	mov	r0, r4
 800e076:	4629      	mov	r1, r5
 800e078:	f7f2 f920 	bl	80002bc <__adddf3>
 800e07c:	4604      	mov	r4, r0
 800e07e:	460d      	mov	r5, r1
 800e080:	ec45 4b10 	vmov	d0, r4, r5
 800e084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e088:	2d00      	cmp	r5, #0
 800e08a:	dc10      	bgt.n	800e0ae <__ieee754_sqrt+0x62>
 800e08c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e090:	4330      	orrs	r0, r6
 800e092:	d0f5      	beq.n	800e080 <__ieee754_sqrt+0x34>
 800e094:	b15d      	cbz	r5, 800e0ae <__ieee754_sqrt+0x62>
 800e096:	ee10 2a10 	vmov	r2, s0
 800e09a:	462b      	mov	r3, r5
 800e09c:	ee10 0a10 	vmov	r0, s0
 800e0a0:	f7f2 f90a 	bl	80002b8 <__aeabi_dsub>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	f7f2 fbe8 	bl	800087c <__aeabi_ddiv>
 800e0ac:	e7e6      	b.n	800e07c <__ieee754_sqrt+0x30>
 800e0ae:	1512      	asrs	r2, r2, #20
 800e0b0:	d074      	beq.n	800e19c <__ieee754_sqrt+0x150>
 800e0b2:	07d4      	lsls	r4, r2, #31
 800e0b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e0b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e0bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e0c0:	bf5e      	ittt	pl
 800e0c2:	0fda      	lsrpl	r2, r3, #31
 800e0c4:	005b      	lslpl	r3, r3, #1
 800e0c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e0ca:	2400      	movs	r4, #0
 800e0cc:	0fda      	lsrs	r2, r3, #31
 800e0ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e0d2:	107f      	asrs	r7, r7, #1
 800e0d4:	005b      	lsls	r3, r3, #1
 800e0d6:	2516      	movs	r5, #22
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e0de:	1886      	adds	r6, r0, r2
 800e0e0:	428e      	cmp	r6, r1
 800e0e2:	bfde      	ittt	le
 800e0e4:	1b89      	suble	r1, r1, r6
 800e0e6:	18b0      	addle	r0, r6, r2
 800e0e8:	18a4      	addle	r4, r4, r2
 800e0ea:	0049      	lsls	r1, r1, #1
 800e0ec:	3d01      	subs	r5, #1
 800e0ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e0f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e0f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e0fa:	d1f0      	bne.n	800e0de <__ieee754_sqrt+0x92>
 800e0fc:	462a      	mov	r2, r5
 800e0fe:	f04f 0e20 	mov.w	lr, #32
 800e102:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e106:	4281      	cmp	r1, r0
 800e108:	eb06 0c05 	add.w	ip, r6, r5
 800e10c:	dc02      	bgt.n	800e114 <__ieee754_sqrt+0xc8>
 800e10e:	d113      	bne.n	800e138 <__ieee754_sqrt+0xec>
 800e110:	459c      	cmp	ip, r3
 800e112:	d811      	bhi.n	800e138 <__ieee754_sqrt+0xec>
 800e114:	f1bc 0f00 	cmp.w	ip, #0
 800e118:	eb0c 0506 	add.w	r5, ip, r6
 800e11c:	da43      	bge.n	800e1a6 <__ieee754_sqrt+0x15a>
 800e11e:	2d00      	cmp	r5, #0
 800e120:	db41      	blt.n	800e1a6 <__ieee754_sqrt+0x15a>
 800e122:	f100 0801 	add.w	r8, r0, #1
 800e126:	1a09      	subs	r1, r1, r0
 800e128:	459c      	cmp	ip, r3
 800e12a:	bf88      	it	hi
 800e12c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e130:	eba3 030c 	sub.w	r3, r3, ip
 800e134:	4432      	add	r2, r6
 800e136:	4640      	mov	r0, r8
 800e138:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e13c:	f1be 0e01 	subs.w	lr, lr, #1
 800e140:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e148:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e14c:	d1db      	bne.n	800e106 <__ieee754_sqrt+0xba>
 800e14e:	430b      	orrs	r3, r1
 800e150:	d006      	beq.n	800e160 <__ieee754_sqrt+0x114>
 800e152:	1c50      	adds	r0, r2, #1
 800e154:	bf13      	iteet	ne
 800e156:	3201      	addne	r2, #1
 800e158:	3401      	addeq	r4, #1
 800e15a:	4672      	moveq	r2, lr
 800e15c:	f022 0201 	bicne.w	r2, r2, #1
 800e160:	1063      	asrs	r3, r4, #1
 800e162:	0852      	lsrs	r2, r2, #1
 800e164:	07e1      	lsls	r1, r4, #31
 800e166:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e16a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e16e:	bf48      	it	mi
 800e170:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e174:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e178:	4614      	mov	r4, r2
 800e17a:	e781      	b.n	800e080 <__ieee754_sqrt+0x34>
 800e17c:	0ad9      	lsrs	r1, r3, #11
 800e17e:	3815      	subs	r0, #21
 800e180:	055b      	lsls	r3, r3, #21
 800e182:	2900      	cmp	r1, #0
 800e184:	d0fa      	beq.n	800e17c <__ieee754_sqrt+0x130>
 800e186:	02cd      	lsls	r5, r1, #11
 800e188:	d50a      	bpl.n	800e1a0 <__ieee754_sqrt+0x154>
 800e18a:	f1c2 0420 	rsb	r4, r2, #32
 800e18e:	fa23 f404 	lsr.w	r4, r3, r4
 800e192:	1e55      	subs	r5, r2, #1
 800e194:	4093      	lsls	r3, r2
 800e196:	4321      	orrs	r1, r4
 800e198:	1b42      	subs	r2, r0, r5
 800e19a:	e78a      	b.n	800e0b2 <__ieee754_sqrt+0x66>
 800e19c:	4610      	mov	r0, r2
 800e19e:	e7f0      	b.n	800e182 <__ieee754_sqrt+0x136>
 800e1a0:	0049      	lsls	r1, r1, #1
 800e1a2:	3201      	adds	r2, #1
 800e1a4:	e7ef      	b.n	800e186 <__ieee754_sqrt+0x13a>
 800e1a6:	4680      	mov	r8, r0
 800e1a8:	e7bd      	b.n	800e126 <__ieee754_sqrt+0xda>
 800e1aa:	bf00      	nop
 800e1ac:	7ff00000 	.word	0x7ff00000

0800e1b0 <_init>:
 800e1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b2:	bf00      	nop
 800e1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1b6:	bc08      	pop	{r3}
 800e1b8:	469e      	mov	lr, r3
 800e1ba:	4770      	bx	lr

0800e1bc <_fini>:
 800e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1be:	bf00      	nop
 800e1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1c2:	bc08      	pop	{r3}
 800e1c4:	469e      	mov	lr, r3
 800e1c6:	4770      	bx	lr
