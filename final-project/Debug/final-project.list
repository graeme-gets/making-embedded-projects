
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  0800c290  0800c290  0001c290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cca0  0800cca0  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cca0  0800cca0  0001cca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cca8  0800cca8  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca8  0800cca8  0001cca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccac  0800ccac  0001ccac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800ccb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000026c  0800cf1c  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800cf1c  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170c1  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f9  00000000  00000000  0003735d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003c028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acc7  00000000  00000000  0003d258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be8f  00000000  00000000  00057f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099269  00000000  00000000  00073dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000674c  00000000  00000000  0010d068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000026c 	.word	0x2000026c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c278 	.word	0x0800c278

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000270 	.word	0x20000270
 80001dc:	0800c278 	.word	0x0800c278

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f007 fa87 	bl	8008420 <memset>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	cbuffer->buffer[cbuffer->write] = data;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	7992      	ldrb	r2, [r2, #6]
 8000f2e:	4413      	add	r3, r2
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b25a      	sxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	757b      	strb	r3, [r7, #21]
	uint8_t length;
	uint8_t read = cbuffer->read;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	795b      	ldrb	r3, [r3, #5]
 8000f7c:	74bb      	strb	r3, [r7, #18]
	uint8_t ch;
	length = cBuffer_Length(cbuffer);
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f89a 	bl	80010b8 <cBuffer_Length>
 8000f84:	4603      	mov	r3, r0
 8000f86:	753b      	strb	r3, [r7, #20]

	for (i=0; i < length;i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
 8000f8c:	e012      	b.n	8000fb4 <cBuffer_GetString+0x54>
	{
		err = cBuffer_Peek(cbuffer, &ch, &read);
 8000f8e:	f107 0212 	add.w	r2, r7, #18
 8000f92:	f107 0311 	add.w	r3, r7, #17
 8000f96:	4619      	mov	r1, r3
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f863 	bl	8001064 <cBuffer_Peek>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	757b      	strb	r3, [r7, #21]

		if (ch == '\r') // A string is found - copy it to the outgoing buffer
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	2b0d      	cmp	r3, #13
 8000fa6:	d102      	bne.n	8000fae <cBuffer_GetString+0x4e>
		{
			found = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75bb      	strb	r3, [r7, #22]
			break;
 8000fac:	e006      	b.n	8000fbc <cBuffer_GetString+0x5c>
	for (i=0; i < length;i++)
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	7d3b      	ldrb	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3e8      	bcc.n	8000f8e <cBuffer_GetString+0x2e>
		}
	}
	if (found)
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d020      	beq.n	8001004 <cBuffer_GetString+0xa4>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, read);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	7cba      	ldrb	r2, [r7, #18]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f88d 	bl	80010ea <cBuffer_LengthCustom>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000fd8:	f107 0313 	add.w	r3, r7, #19
 8000fdc:	4619      	mov	r1, r3
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f817 	bl	8001012 <cBuffer_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	757b      	strb	r3, [r7, #21]
			*string = chr;
 8000fe8:	7cfa      	ldrb	r2, [r7, #19]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	701a      	strb	r2, [r3, #0]
			string++;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
		} while (chr != sTerminator || err != CBUFFER_OK);
 8000ff4:	7cfb      	ldrb	r3, [r7, #19]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d1ed      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8000ffc:	7d7b      	ldrb	r3, [r7, #21]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1ea      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8001002:	e001      	b.n	8001008 <cBuffer_GetString+0xa8>
	}
	else
		err = CBUFFER_NO_STRING;
 8001004:	2303      	movs	r3, #3
 8001006:	757b      	strb	r3, [r7, #21]


	return err;
 8001008:	7d7b      	ldrb	r3, [r7, #21]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f84b 	bl	80010b8 <cBuffer_Length>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8001028:	2302      	movs	r3, #2
 800102a:	e017      	b.n	800105c <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	7952      	ldrb	r2, [r2, #5]
 8001034:	4413      	add	r3, r2
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	3301      	adds	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b25a      	sxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4013      	ands	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <cBuffer_Peek>:

CBUFFER_ERR cBuffer_Peek(cBuffer_t* cbuffer,uint8_t* data, uint8_t*read)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (cBuffer_Length(cbuffer) == 0)
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f821 	bl	80010b8 <cBuffer_Length>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <cBuffer_Peek+0x1c>
	{
		return CBUFFER_EMPTY;
 800107c:	2302      	movs	r3, #2
 800107e:	e017      	b.n	80010b0 <cBuffer_Peek+0x4c>
	}
	*data = cbuffer->buffer[*read];
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	701a      	strb	r2, [r3, #0]
	*read = ((*read)+1) & (cbuffer->size-1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25a      	sxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
	return CBUFFER_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	799a      	ldrb	r2, [r3, #6]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3

}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
 80010f6:	4613      	mov	r3, r2
 80010f8:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b25a      	sxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 800112a:	2120      	movs	r1, #32
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f007 fe7a 	bl	8008e26 <strchr>
 8001132:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <ConsoleCommandMatch+0x32>
	{
			r =  strcmp(name,buffer) == 0;
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff f84f 	bl	80001e0 <strcmp>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e00f      	b.n	8001172 <ConsoleCommandMatch+0x52>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff f84e 	bl	80001f4 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	6839      	ldr	r1, [r7, #0]
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f007 fe76 	bl	8008e50 <strncmp>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	60fb      	str	r3, [r7, #12]
	}

	return r;
 8001172:	68fb      	ldr	r3, [r7, #12]

}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <ConsoleInit>:


// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001182:	f000 fb93 	bl	80018ac <ConsoleIoInit>
	ConsoleIoSendString("Dodec Timer - A Thousand Projects");
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <ConsoleInit+0x44>)
 8001188:	f000 fbc8 	bl	800191c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <ConsoleInit+0x48>)
 800118e:	f000 fbc5 	bl	800191c <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <ConsoleInit+0x4c>)
 8001194:	f000 fbc2 	bl	800191c <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	e007      	b.n	80011ae <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <ConsoleInit+0x50>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3301      	adds	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b63      	cmp	r3, #99	; 0x63
 80011b2:	d9f4      	bls.n	800119e <ConsoleInit+0x22>
	}

}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	0800c290 	.word	0x0800c290
 80011c4:	0800c2b4 	.word	0x0800c2b4
 80011c8:	0800c2b8 	.word	0x0800c2b8
 80011cc:	20000288 	.word	0x20000288

080011d0 <ConsolePrintPrompt>:

void ConsolePrintPrompt()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	ConsoleIoSendString(STR_ENDLINE);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <ConsolePrintPrompt+0x14>)
 80011d6:	f000 fba1 	bl	800191c <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <ConsolePrintPrompt+0x18>)
 80011dc:	f000 fb9e 	bl	800191c <ConsoleIoSendString>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800c2b4 	.word	0x0800c2b4
 80011e8:	0800c2b8 	.word	0x0800c2b8

080011ec <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;
	eConsoleError consoleResult;

	consoleResult = ConsoleIoReceive(mReceiveBuffer);
 80011f2:	4843      	ldr	r0, [pc, #268]	; (8001300 <ConsoleProcess+0x114>)
 80011f4:	f000 fb72 	bl	80018dc <ConsoleIoReceive>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]

	switch (consoleResult)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d07a      	beq.n	80012f8 <ConsoleProcess+0x10c>
 8001202:	2b03      	cmp	r3, #3
 8001204:	dc79      	bgt.n	80012fa <ConsoleProcess+0x10e>
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <ConsoleProcess+0x28>
 800120a:	2b00      	cmp	r3, #0
 800120c:	db75      	blt.n	80012fa <ConsoleProcess+0x10e>
 800120e:	3b01      	subs	r3, #1
 8001210:	2b01      	cmp	r3, #1
 8001212:	e072      	b.n	80012fa <ConsoleProcess+0x10e>
	{
		case CONSOLE_ERROR:
		case CONSOLE_NO_STRING:
			break;
		case CONSOLE_SUCCESS:
			if ('\0' == mReceiveBuffer[0] )
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <ConsoleProcess+0x114>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <ConsoleProcess+0x3e>
			{
				ConsoleIoSendString(STR_ENDLINE);
 800121c:	4839      	ldr	r0, [pc, #228]	; (8001304 <ConsoleProcess+0x118>)
 800121e:	f000 fb7d 	bl	800191c <ConsoleIoSendString>
				ConsoleIoSendString(CONSOLE_PROMPT);
 8001222:	4839      	ldr	r0, [pc, #228]	; (8001308 <ConsoleProcess+0x11c>)
 8001224:	f000 fb7a 	bl	800191c <ConsoleIoSendString>
				return;
 8001228:	e067      	b.n	80012fa <ConsoleProcess+0x10e>
			}
			commandTable = ConsoleCommandsGetTable();
 800122a:	f000 fb17 	bl	800185c <ConsoleCommandsGetTable>
 800122e:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	613b      	str	r3, [r7, #16]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800123a:	e03d      	b.n	80012b8 <ConsoleProcess+0xcc>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	461a      	mov	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4413      	add	r3, r2
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	492c      	ldr	r1, [pc, #176]	; (8001300 <ConsoleProcess+0x114>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff65 	bl	8001120 <ConsoleCommandMatch>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d02a      	beq.n	80012b2 <ConsoleProcess+0xc6>
				{
					result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4413      	add	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4824      	ldr	r0, [pc, #144]	; (8001300 <ConsoleProcess+0x114>)
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d017      	beq.n	80012ac <ConsoleProcess+0xc0>
					{
						ConsoleIoSendString("Error: ");
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <ConsoleProcess+0x120>)
 800127e:	f000 fb4d 	bl	800191c <ConsoleIoSendString>
						ConsoleIoSendString((char*)mReceiveBuffer);
 8001282:	481f      	ldr	r0, [pc, #124]	; (8001300 <ConsoleProcess+0x114>)
 8001284:	f000 fb4a 	bl	800191c <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 8001288:	4821      	ldr	r0, [pc, #132]	; (8001310 <ConsoleProcess+0x124>)
 800128a:	f000 fb47 	bl	800191c <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	461a      	mov	r2, r3
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	4413      	add	r3, r2
 800129e:	3308      	adds	r3, #8
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fb3b 	bl	800191c <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80012a6:	4817      	ldr	r0, [pc, #92]	; (8001304 <ConsoleProcess+0x118>)
 80012a8:	f000 fb38 	bl	800191c <ConsoleIoSendString>
					}
					found = cmdIndex;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	e002      	b.n	80012b8 <ConsoleProcess+0xcc>
				}
				else
				{
					cmdIndex++;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4613      	mov	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <ConsoleProcess+0xea>
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d0b2      	beq.n	800123c <ConsoleProcess+0x50>
				}
			}
			if (found == NOT_FOUND)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d105      	bne.n	80012ea <ConsoleProcess+0xfe>
			{
				ConsoleIoSendString("Command not found: ");
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <ConsoleProcess+0x128>)
 80012e0:	f000 fb1c 	bl	800191c <ConsoleIoSendString>
				ConsoleIoSendString((char*)mReceiveBuffer);
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <ConsoleProcess+0x114>)
 80012e6:	f000 fb19 	bl	800191c <ConsoleIoSendString>

			}
			ConsoleIoSendString(STR_ENDLINE);
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <ConsoleProcess+0x118>)
 80012ec:	f000 fb16 	bl	800191c <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <ConsoleProcess+0x11c>)
 80012f2:	f000 fb13 	bl	800191c <ConsoleIoSendString>

			break;
 80012f6:	e000      	b.n	80012fa <ConsoleProcess+0x10e>
		case CONSOLE_BUFFER_FULL:

		break;
 80012f8:	bf00      	nop
	}

}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000288 	.word	0x20000288
 8001304:	0800c2b4 	.word	0x0800c2b4
 8001308:	0800c2b8 	.word	0x0800c2b8
 800130c:	0800c2bc 	.word	0x0800c2bc
 8001310:	0800c2c4 	.word	0x0800c2c4
 8001314:	0800c2cc 	.word	0x0800c2cc

08001318 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	460b      	mov	r3, r1
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001332:	e00b      	b.n	800134c <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b20      	cmp	r3, #32
 800133e:	d102      	bne.n	8001346 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	3301      	adds	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	429a      	cmp	r2, r3
 8001352:	d002      	beq.n	800135a <ConsoleParamFindN+0x42>
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b63      	cmp	r3, #99	; 0x63
 8001358:	d9ec      	bls.n	8001334 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2b64      	cmp	r3, #100	; 0x64
 800135e:	d102      	bne.n	8001366 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001360:	2310      	movs	r3, #16
 8001362:	75fb      	strb	r3, [r7, #23]
 8001364:	e002      	b.n	800136c <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	601a      	str	r2, [r3, #0]
	}
	return result;
 800136c:	7dfb      	ldrb	r3, [r7, #23]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b08a      	sub	sp, #40	; 0x28
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	460b      	mov	r3, r1
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800138c:	f107 021c 	add.w	r2, r7, #28
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	4619      	mov	r1, r3
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f7ff ffbf 	bl	8001318 <ConsoleParamFindN>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	4413      	add	r3, r2
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 80013b4:	e011      	b.n	80013da <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 80013b6:	f107 0214 	add.w	r2, r7, #20
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	4413      	add	r3, r2
 80013be:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80013c2:	701a      	strb	r2, [r3, #0]
		i++;
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	3301      	adds	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	4413      	add	r3, r2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 80013da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 80013e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d002      	beq.n	80013f0 <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d9e2      	bls.n	80013b6 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d102      	bne.n	80013fc <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 80013f6:	2310      	movs	r3, #16
 80013f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80013fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11a      	bne.n	800143a <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8001404:	f107 0214 	add.w	r2, r7, #20
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f000 feab 	bl	8002170 <isNumber>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4618      	mov	r0, r3
 8001426:	f006 ffcd 	bl	80083c4 <atoi>
 800142a:	4603      	mov	r3, r0
 800142c:	b21a      	sxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	e002      	b.n	800143a <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 8001434:	2310      	movs	r3, #16
 8001436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}


	return result;
 800143a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800143e:	4618      	mov	r0, r3
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fa64 	bl	800191c <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fa57 	bl	800191c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <ConsoleSendLine+0x20>)
 8001470:	f000 fa54 	bl	800191c <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800c2b4 	.word	0x0800c2b4

08001484 <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af02      	add	r7, sp, #8
 800148a:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	461a      	mov	r2, r3
 8001492:	2101      	movs	r1, #1
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff3f 	bl	8001318 <ConsoleParamFindN>
 800149a:	4603      	mov	r3, r0
 800149c:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 80014a4:	2310      	movs	r3, #16
 80014a6:	e049      	b.n	800153c <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	18d0      	adds	r0, r2, r3
 80014ae:	f107 0114 	add.w	r1, r7, #20
 80014b2:	f107 0218 	add.w	r2, r7, #24
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	460b      	mov	r3, r1
 80014be:	4921      	ldr	r1, [pc, #132]	; (8001544 <ConsoleCommandDateSet+0xc0>)
 80014c0:	f007 fc40 	bl	8008d44 <siscanf>

	if (!IS_RTC_DATE(day) )
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <ConsoleCommandDateSet+0x4c>
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b1f      	cmp	r3, #31
 80014ce:	d904      	bls.n	80014da <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 80014d0:	481d      	ldr	r0, [pc, #116]	; (8001548 <ConsoleCommandDateSet+0xc4>)
 80014d2:	f7ff ffc5 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80014d6:	2310      	movs	r3, #16
 80014d8:	e030      	b.n	800153c <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <ConsoleCommandDateSet+0x62>
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d904      	bls.n	80014f0 <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 80014e6:	4819      	ldr	r0, [pc, #100]	; (800154c <ConsoleCommandDateSet+0xc8>)
 80014e8:	f7ff ffba 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80014ec:	2310      	movs	r3, #16
 80014ee:	e025      	b.n	800153c <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	2b63      	cmp	r3, #99	; 0x63
 80014f4:	d904      	bls.n	8001500 <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 80014f6:	4816      	ldr	r0, [pc, #88]	; (8001550 <ConsoleCommandDateSet+0xcc>)
 80014f8:	f7ff ffb2 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80014fc:	2310      	movs	r3, #16
 80014fe:	e01d      	b.n	800153c <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 8001512:	2307      	movs	r3, #7
 8001514:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <ConsoleCommandDateSet+0xd0>)
 8001520:	f004 fc3a 	bl	8005d98 <HAL_RTC_SetDate>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 800152a:	480b      	ldr	r0, [pc, #44]	; (8001558 <ConsoleCommandDateSet+0xd4>)
 800152c:	f7ff ff98 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001530:	2310      	movs	r3, #16
 8001532:	e003      	b.n	800153c <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8001534:	4809      	ldr	r0, [pc, #36]	; (800155c <ConsoleCommandDateSet+0xd8>)
 8001536:	f7ff ff93 	bl	8001460 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 800153a:	2300      	movs	r3, #0
	}
}
 800153c:	4618      	mov	r0, r3
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	0800c320 	.word	0x0800c320
 8001548:	0800c32c 	.word	0x0800c32c
 800154c:	0800c350 	.word	0x0800c350
 8001550:	0800c374 	.word	0x0800c374
 8001554:	20000390 	.word	0x20000390
 8001558:	0800c398 	.word	0x0800c398
 800155c:	0800c3bc 	.word	0x0800c3bc

08001560 <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af02      	add	r7, sp, #8
 8001566:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	461a      	mov	r2, r3
 800156e:	2101      	movs	r1, #1
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fed1 	bl	8001318 <ConsoleParamFindN>
 8001576:	4603      	mov	r3, r0
 8001578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 800157c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 8001584:	2310      	movs	r3, #16
 8001586:	e041      	b.n	800160c <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	18d0      	adds	r0, r2, r3
 800158e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001592:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	460b      	mov	r3, r1
 800159e:	491d      	ldr	r1, [pc, #116]	; (8001614 <ConsoleCommandTimeSet+0xb4>)
 80015a0:	f007 fbd0 	bl	8008d44 <siscanf>

	if (!IS_RTC_MINUTES(min) )
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	2b3b      	cmp	r3, #59	; 0x3b
 80015a8:	d904      	bls.n	80015b4 <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 80015aa:	481b      	ldr	r0, [pc, #108]	; (8001618 <ConsoleCommandTimeSet+0xb8>)
 80015ac:	f7ff ff58 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80015b0:	2310      	movs	r3, #16
 80015b2:	e02b      	b.n	800160c <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	2b3b      	cmp	r3, #59	; 0x3b
 80015b8:	d904      	bls.n	80015c4 <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <ConsoleCommandTimeSet+0xbc>)
 80015bc:	f7ff ff50 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80015c0:	2310      	movs	r3, #16
 80015c2:	e023      	b.n	800160c <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	2b17      	cmp	r3, #23
 80015c8:	d904      	bls.n	80015d4 <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 80015ca:	4815      	ldr	r0, [pc, #84]	; (8001620 <ConsoleCommandTimeSet+0xc0>)
 80015cc:	f7ff ff48 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80015d0:	2310      	movs	r3, #16
 80015d2:	e01b      	b.n	800160c <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <ConsoleCommandTimeSet+0xc4>)
 80015f0:	f004 fada 	bl	8005ba8 <HAL_RTC_SetTime>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 80015fa:	480b      	ldr	r0, [pc, #44]	; (8001628 <ConsoleCommandTimeSet+0xc8>)
 80015fc:	f7ff ff30 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001600:	2310      	movs	r3, #16
 8001602:	e003      	b.n	800160c <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Time Set");
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <ConsoleCommandTimeSet+0xcc>)
 8001606:	f7ff ff2b 	bl	8001460 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 800160a:	2300      	movs	r3, #0
	}
}
 800160c:	4618      	mov	r0, r3
 800160e:	3730      	adds	r7, #48	; 0x30
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	0800c3c8 	.word	0x0800c3c8
 8001618:	0800c3d4 	.word	0x0800c3d4
 800161c:	0800c3f8 	.word	0x0800c3f8
 8001620:	0800c420 	.word	0x0800c420
 8001624:	20000390 	.word	0x20000390
 8001628:	0800c444 	.word	0x0800c444
 800162c:	0800c468 	.word	0x0800c468

08001630 <ConsoleCommandLedToggle>:


static eCommandResult_T ConsoleCommandLedToggle(const char buffer[])
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	eCommandResult_T result;
	int16_t parameterInt;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	461a      	mov	r2, r3
 800163e:	2101      	movs	r1, #1
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fe9a 	bl	800137a <ConsoleReceiveParamInt16>
 8001646:	4603      	mov	r3, r0
 8001648:	73fb      	strb	r3, [r7, #15]
	if (result == COMMAND_PARAMETER_ERROR)
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	2b10      	cmp	r3, #16
 800164e:	d101      	bne.n	8001654 <ConsoleCommandLedToggle+0x24>
			return result;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	e011      	b.n	8001678 <ConsoleCommandLedToggle+0x48>
	if (0 == parameterInt )
 8001654:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d106      	bne.n	800166a <ConsoleCommandLedToggle+0x3a>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001662:	4807      	ldr	r0, [pc, #28]	; (8001680 <ConsoleCommandLedToggle+0x50>)
 8001664:	f002 fd08 	bl	8004078 <HAL_GPIO_WritePin>
 8001668:	e005      	b.n	8001676 <ConsoleCommandLedToggle+0x46>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <ConsoleCommandLedToggle+0x50>)
 8001672:	f002 fd01 	bl	8004078 <HAL_GPIO_WritePin>

	return COMMAND_SUCCESS;
 8001676:	2300      	movs	r3, #0

}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020800 	.word	0x40020800

08001684 <ConsoleCommandAccelQuery>:
 * @param: Buffer
 * @return: eCommandResult_T
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandAccelQuery(const char buffer[])
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b0a9      	sub	sp, #164	; 0xa4
 8001688:	af02      	add	r7, sp, #8
 800168a:	6078      	str	r0, [r7, #4]

	MPU6050_t data;
	char msg[50];
	MPU6050_Read_All(&I2C_MPU6050, &data);
 800168c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001690:	4619      	mov	r1, r3
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <ConsoleCommandAccelQuery+0x44>)
 8001694:	f000 f9b0 	bl	80019f8 <MPU6050_Read_All>

	sprintf(msg,"X Angle\t: %f \t\t Y Angle\t: %f\n",data.KalmanAngleX, data.KalmanAngleY);
 8001698:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800169c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80016a0:	f107 040c 	add.w	r4, r7, #12
 80016a4:	e9cd 2300 	strd	r2, r3, [sp]
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <ConsoleCommandAccelQuery+0x48>)
 80016ae:	4620      	mov	r0, r4
 80016b0:	f007 fb28 	bl	8008d04 <siprintf>
	ConsoleSendLine(msg);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fed1 	bl	8001460 <ConsoleSendLine>


	return COMMAND_SUCCESS;
 80016be:	2300      	movs	r3, #0

}
 80016c0:	4618      	mov	r0, r3
 80016c2:	379c      	adds	r7, #156	; 0x9c
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	2000033c 	.word	0x2000033c
 80016cc:	0800c474 	.word	0x0800c474

080016d0 <ConsoleCommandTimeQuery>:


static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b092      	sub	sp, #72	; 0x48
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	480f      	ldr	r0, [pc, #60]	; (8001720 <ConsoleCommandTimeQuery+0x50>)
 80016e2:	f004 fafb 	bl	8005cdc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	2200      	movs	r2, #0
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <ConsoleCommandTimeQuery+0x50>)
 80016f0:	f004 fbd6 	bl	8005ea0 <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80016f4:	7b3b      	ldrb	r3, [r7, #12]
 80016f6:	461a      	mov	r2, r3
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	4619      	mov	r1, r3
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	f107 0020 	add.w	r0, r7, #32
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	460b      	mov	r3, r1
 8001706:	4907      	ldr	r1, [pc, #28]	; (8001724 <ConsoleCommandTimeQuery+0x54>)
 8001708:	f007 fafc 	bl	8008d04 <siprintf>
	ConsoleSendString(time);
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fe98 	bl	8001446 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3740      	adds	r7, #64	; 0x40
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000390 	.word	0x20000390
 8001724:	0800c494 	.word	0x0800c494

08001728 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <ConsoleCommandDateQuery+0x44>)
 800173a:	f004 fbb1 	bl	8005ea0 <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	461a      	mov	r2, r3
 8001742:	7b7b      	ldrb	r3, [r7, #13]
 8001744:	4619      	mov	r1, r3
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	f107 0010 	add.w	r0, r7, #16
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	460b      	mov	r3, r1
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <ConsoleCommandDateQuery+0x48>)
 8001752:	f007 fad7 	bl	8008d04 <siprintf>
	ConsoleSendString(date);
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fe73 	bl	8001446 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3730      	adds	r7, #48	; 0x30
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000390 	.word	0x20000390
 8001770:	0800c4ac 	.word	0x0800c4ac

08001774 <ConsoleCommandLedQuery>:


static eCommandResult_T ConsoleCommandLedQuery(const char buffer[])
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin)==0)
 800177c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001780:	480a      	ldr	r0, [pc, #40]	; (80017ac <ConsoleCommandLedQuery+0x38>)
 8001782:	f002 fc61 	bl	8004048 <HAL_GPIO_ReadPin>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d103      	bne.n	8001794 <ConsoleCommandLedQuery+0x20>
			ConsoleIoSendString("LED is ON ");
 800178c:	4808      	ldr	r0, [pc, #32]	; (80017b0 <ConsoleCommandLedQuery+0x3c>)
 800178e:	f000 f8c5 	bl	800191c <ConsoleIoSendString>
 8001792:	e002      	b.n	800179a <ConsoleCommandLedQuery+0x26>
	else
		ConsoleIoSendString("LED is OFF ");
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <ConsoleCommandLedQuery+0x40>)
 8001796:	f000 f8c1 	bl	800191c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800179a:	4807      	ldr	r0, [pc, #28]	; (80017b8 <ConsoleCommandLedQuery+0x44>)
 800179c:	f000 f8be 	bl	800191c <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40020800 	.word	0x40020800
 80017b0:	0800c4c4 	.word	0x0800c4c4
 80017b4:	0800c4d0 	.word	0x0800c4d0
 80017b8:	0800c4dc 	.word	0x0800c4dc

080017bc <ConsoleCommandHelp>:



static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 80017c4:	2300      	movs	r3, #0
 80017c6:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 80017c8:	230a      	movs	r3, #10
 80017ca:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e01e      	b.n	8001810 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 80017d2:	4914      	ldr	r1, [pc, #80]	; (8001824 <ConsoleCommandHelp+0x68>)
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	4613      	mov	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f89a 	bl	800191c <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 80017e8:	480f      	ldr	r0, [pc, #60]	; (8001828 <ConsoleCommandHelp+0x6c>)
 80017ea:	f000 f897 	bl	800191c <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	3308      	adds	r3, #8
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <ConsoleCommandHelp+0x68>)
 80017fc:	4413      	add	r3, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f88c 	bl	800191c <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8001804:	4809      	ldr	r0, [pc, #36]	; (800182c <ConsoleCommandHelp+0x70>)
 8001806:	f000 f889 	bl	800191c <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3b01      	subs	r3, #1
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	429a      	cmp	r2, r3
 8001818:	d3db      	bcc.n	80017d2 <ConsoleCommandHelp+0x16>
	}
	return result;
 800181a:	7cfb      	ldrb	r3, [r7, #19]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	0800c54c 	.word	0x0800c54c
 8001828:	0800c4e0 	.word	0x0800c4e0
 800182c:	0800c4dc 	.word	0x0800c4dc

08001830 <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <ConsoleCommandVer+0x24>)
 800183e:	f000 f86d 	bl	800191c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <ConsoleCommandVer+0x28>)
 8001844:	f000 f86a 	bl	800191c <ConsoleIoSendString>
	return result;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	0800c4e4 	.word	0x0800c4e4
 8001858:	0800c4dc 	.word	0x0800c4dc

0800185c <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <ConsoleCommandsGetTable+0x10>)
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	0800c54c 	.word	0x0800c54c

08001870 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8001878:	2201      	movs	r2, #1
 800187a:	4909      	ldr	r1, [pc, #36]	; (80018a0 <HAL_UART_RxCpltCallback+0x30>)
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <HAL_UART_RxCpltCallback+0x34>)
 800187e:	f005 fe08 	bl	8007492 <HAL_UART_Receive_IT>
    }



    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_UART_RxCpltCallback+0x30>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b0a      	cmp	r3, #10
 8001888:	d005      	beq.n	8001896 <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_UART_RxCpltCallback+0x30>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <HAL_UART_RxCpltCallback+0x38>)
 8001892:	f7ff fb42 	bl	8000f1a <cBuffer_Write>

    }
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000334 	.word	0x20000334
 80018a4:	2000045c 	.word	0x2000045c
 80018a8:	2000032c 	.word	0x2000032c

080018ac <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 80018b0:	2240      	movs	r2, #64	; 0x40
 80018b2:	4906      	ldr	r1, [pc, #24]	; (80018cc <ConsoleIoInit+0x20>)
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <ConsoleIoInit+0x24>)
 80018b6:	f7ff fb11 	bl	8000edc <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 80018ba:	2201      	movs	r2, #1
 80018bc:	4905      	ldr	r1, [pc, #20]	; (80018d4 <ConsoleIoInit+0x28>)
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <ConsoleIoInit+0x2c>)
 80018c0:	f005 fde7 	bl	8007492 <HAL_UART_Receive_IT>

	return CONSOLE_SUCCESS;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200002ec 	.word	0x200002ec
 80018d0:	2000032c 	.word	0x2000032c
 80018d4:	20000334 	.word	0x20000334
 80018d8:	2000045c 	.word	0x2000045c

080018dc <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	uint8_t len;




	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 80018e4:	f107 030f 	add.w	r3, r7, #15
 80018e8:	220d      	movs	r2, #13
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	480a      	ldr	r0, [pc, #40]	; (8001918 <ConsoleIoReceive+0x3c>)
 80018ee:	f7ff fb37 	bl	8000f60 <cBuffer_GetString>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len-1]  = 0x0; //Terminate String in C Style
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fbf4 	bl	80020f2 <manageBackSpace>
		return CONSOLE_SUCCESS;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <ConsoleIoReceive+0x34>
	}
	return CONSOLE_NO_STRING;
 800190e:	2302      	movs	r3, #2

}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	2000032c 	.word	0x2000032c

0800191c <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7fe fc65 	bl	80001f4 <strlen>
 800192a:	4603      	mov	r3, r0
 800192c:	b29a      	uxth	r2, r3
 800192e:	2364      	movs	r3, #100	; 0x64
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4804      	ldr	r0, [pc, #16]	; (8001944 <ConsoleIoSendString+0x28>)
 8001934:	f005 fd1b 	bl	800736e <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000045c 	.word	0x2000045c

08001948 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af04      	add	r7, sp, #16
 800194e:	6078      	str	r0, [r7, #4]

    // check device ID WHO_AM_I



    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001950:	2364      	movs	r3, #100	; 0x64
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	2301      	movs	r3, #1
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	f107 030f 	add.w	r3, r7, #15
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2301      	movs	r3, #1
 8001960:	2275      	movs	r2, #117	; 0x75
 8001962:	21d0      	movs	r1, #208	; 0xd0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f002 fddf 	bl	8004528 <HAL_I2C_Mem_Read>

    if (check == 114)  // 0x68 will be returned by the sensor if everything goes well
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	2b72      	cmp	r3, #114	; 0x72
 800196e:	d13d      	bne.n	80019ec <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001974:	2364      	movs	r3, #100	; 0x64
 8001976:	9302      	str	r3, [sp, #8]
 8001978:	2301      	movs	r3, #1
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	f107 030e 	add.w	r3, r7, #14
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	226b      	movs	r2, #107	; 0x6b
 8001986:	21d0      	movs	r1, #208	; 0xd0
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f002 fcd3 	bl	8004334 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800198e:	2307      	movs	r3, #7
 8001990:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	2301      	movs	r3, #1
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	f107 030e 	add.w	r3, r7, #14
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2301      	movs	r3, #1
 80019a2:	2219      	movs	r2, #25
 80019a4:	21d0      	movs	r1, #208	; 0xd0
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f002 fcc4 	bl	8004334 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80019b0:	2364      	movs	r3, #100	; 0x64
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	2301      	movs	r3, #1
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	f107 030e 	add.w	r3, r7, #14
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	221c      	movs	r2, #28
 80019c2:	21d0      	movs	r1, #208	; 0xd0
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f002 fcb5 	bl	8004334 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	2301      	movs	r3, #1
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	f107 030e 	add.w	r3, r7, #14
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2301      	movs	r3, #1
 80019de:	221b      	movs	r2, #27
 80019e0:	21d0      	movs	r1, #208	; 0xd0
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f002 fca6 	bl	8004334 <HAL_I2C_Mem_Write>
        return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e000      	b.n	80019ee <MPU6050_Init+0xa6>
    }
    return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80019f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019fc:	b094      	sub	sp, #80	; 0x50
 80019fe:	af04      	add	r7, sp, #16
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001a04:	2364      	movs	r3, #100	; 0x64
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	230e      	movs	r3, #14
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2301      	movs	r3, #1
 8001a14:	223b      	movs	r2, #59	; 0x3b
 8001a16:	21d0      	movs	r1, #208	; 0xd0
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f002 fd85 	bl	8004528 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001a1e:	7a3b      	ldrb	r3, [r7, #8]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	7a7b      	ldrb	r3, [r7, #9]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001a30:	7abb      	ldrb	r3, [r7, #10]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	7afb      	ldrb	r3, [r7, #11]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001a42:	7b3b      	ldrb	r3, [r7, #12]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	7b7b      	ldrb	r3, [r7, #13]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001a62:	7c3b      	ldrb	r3, [r7, #16]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	7c7b      	ldrb	r3, [r7, #17]
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	b21a      	sxth	r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001a74:	7cbb      	ldrb	r3, [r7, #18]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	7cfb      	ldrb	r3, [r7, #19]
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001a86:	7d3b      	ldrb	r3, [r7, #20]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	7d7b      	ldrb	r3, [r7, #21]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd58 	bl	8000554 <__aeabi_i2d>
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4bb5      	ldr	r3, [pc, #724]	; (8001d80 <MPU6050_Read_All+0x388>)
 8001aaa:	f7fe fee7 	bl	800087c <__aeabi_ddiv>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd48 	bl	8000554 <__aeabi_i2d>
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4bad      	ldr	r3, [pc, #692]	; (8001d80 <MPU6050_Read_All+0x388>)
 8001aca:	f7fe fed7 	bl	800087c <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	6839      	ldr	r1, [r7, #0]
 8001ad4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd38 	bl	8000554 <__aeabi_i2d>
 8001ae4:	a39e      	add	r3, pc, #632	; (adr r3, 8001d60 <MPU6050_Read_All+0x368>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fec7 	bl	800087c <__aeabi_ddiv>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	6839      	ldr	r1, [r7, #0]
 8001af4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    // Callibrate
       //DataStruct->Ax += CAL_X;
      // DataStruct->Ay += CAL_Y;
       //DataStruct->Az += CAL_Y;

    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001afe:	a39a      	add	r3, pc, #616	; (adr r3, 8001d68 <MPU6050_Read_All+0x370>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7ff f802 	bl	8000b0c <__aeabi_dcmplt>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <MPU6050_Read_All+0x124>
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b22:	a391      	add	r3, pc, #580	; (adr r3, 8001d68 <MPU6050_Read_All+0x370>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fff0 	bl	8000b0c <__aeabi_dcmplt>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <MPU6050_Read_All+0x148>
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b46:	a388      	add	r3, pc, #544	; (adr r3, 8001d68 <MPU6050_Read_All+0x370>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe ffde 	bl	8000b0c <__aeabi_dcmplt>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <MPU6050_Read_All+0x16c>
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9c1 2306 	strd	r2, r3, [r1, #24]


    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001b64:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b70:	eddf 6a84 	vldr	s13, [pc, #528]	; 8001d84 <MPU6050_Read_All+0x38c>
 8001b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b78:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001d88 <MPU6050_Read_All+0x390>
 8001b7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fce1 	bl	8000554 <__aeabi_i2d>
 8001b92:	a377      	add	r3, pc, #476	; (adr r3, 8001d70 <MPU6050_Read_All+0x378>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fe70 	bl	800087c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	6839      	ldr	r1, [r7, #0]
 8001ba2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fcd1 	bl	8000554 <__aeabi_i2d>
 8001bb2:	a36f      	add	r3, pc, #444	; (adr r3, 8001d70 <MPU6050_Read_All+0x378>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe fe60 	bl	800087c <__aeabi_ddiv>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	6839      	ldr	r1, [r7, #0]
 8001bc2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fcc1 	bl	8000554 <__aeabi_i2d>
 8001bd2:	a367      	add	r3, pc, #412	; (adr r3, 8001d70 <MPU6050_Read_All+0x378>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fe50 	bl	800087c <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	6839      	ldr	r1, [r7, #0]
 8001be2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001be6:	f001 fb67 	bl	80032b8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <MPU6050_Read_All+0x394>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fc9e 	bl	8000534 <__aeabi_ui2d>
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b64      	ldr	r3, [pc, #400]	; (8001d90 <MPU6050_Read_All+0x398>)
 8001bfe:	f7fe fe3d 	bl	800087c <__aeabi_ddiv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001c0a:	f001 fb55 	bl	80032b8 <HAL_GetTick>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a5e      	ldr	r2, [pc, #376]	; (8001d8c <MPU6050_Read_All+0x394>)
 8001c12:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c22:	fb03 f202 	mul.w	r2, r3, r2
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc8a 	bl	8000554 <__aeabi_i2d>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	ec43 2b10 	vmov	d0, r2, r3
 8001c48:	f00a f96d 	bl	800bf26 <sqrt>
 8001c4c:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c5c:	f7fe ff4c 	bl	8000af8 <__aeabi_dcmpeq>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d11f      	bne.n	8001ca6 <MPU6050_Read_All+0x2ae>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc71 	bl	8000554 <__aeabi_i2d>
 8001c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c76:	f7fe fe01 	bl	800087c <__aeabi_ddiv>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	ec43 2b17 	vmov	d7, r2, r3
 8001c82:	eeb0 0a47 	vmov.f32	s0, s14
 8001c86:	eef0 0a67 	vmov.f32	s1, s15
 8001c8a:	f009 ffa1 	bl	800bbd0 <atan>
 8001c8e:	ec51 0b10 	vmov	r0, r1, d0
 8001c92:	a339      	add	r3, pc, #228	; (adr r3, 8001d78 <MPU6050_Read_All+0x380>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fcc6 	bl	8000628 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ca4:	e005      	b.n	8001cb2 <MPU6050_Read_All+0x2ba>
    } else {
        roll = 0.0;
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb8:	425b      	negs	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc4a 	bl	8000554 <__aeabi_i2d>
 8001cc0:	4682      	mov	sl, r0
 8001cc2:	468b      	mov	fp, r1
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc42 	bl	8000554 <__aeabi_i2d>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	ec43 2b11 	vmov	d1, r2, r3
 8001cd8:	ec4b ab10 	vmov	d0, sl, fp
 8001cdc:	f00a f921 	bl	800bf22 <atan2>
 8001ce0:	ec51 0b10 	vmov	r0, r1, d0
 8001ce4:	a324      	add	r3, pc, #144	; (adr r3, 8001d78 <MPU6050_Read_All+0x380>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f7fe fc9d 	bl	8000628 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <MPU6050_Read_All+0x39c>)
 8001cfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d00:	f7fe ff04 	bl	8000b0c <__aeabi_dcmplt>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00a      	beq.n	8001d20 <MPU6050_Read_All+0x328>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <MPU6050_Read_All+0x3a0>)
 8001d16:	f7fe ff17 	bl	8000b48 <__aeabi_dcmpgt>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d114      	bne.n	8001d4a <MPU6050_Read_All+0x352>
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <MPU6050_Read_All+0x3a0>)
 8001d26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d2a:	f7fe ff0d 	bl	8000b48 <__aeabi_dcmpgt>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d035      	beq.n	8001da0 <MPU6050_Read_All+0x3a8>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <MPU6050_Read_All+0x39c>)
 8001d40:	f7fe fee4 	bl	8000b0c <__aeabi_dcmplt>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d02a      	beq.n	8001da0 <MPU6050_Read_All+0x3a8>
        KalmanY.angle = pitch;
 8001d4a:	4914      	ldr	r1, [pc, #80]	; (8001d9c <MPU6050_Read_All+0x3a4>)
 8001d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d50:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001d54:	6839      	ldr	r1, [r7, #0]
 8001d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d5a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001d5e:	e034      	b.n	8001dca <MPU6050_Read_All+0x3d2>
 8001d60:	00000000 	.word	0x00000000
 8001d64:	40cc2900 	.word	0x40cc2900
 8001d68:	70a3d70a 	.word	0x70a3d70a
 8001d6c:	3fb70a3d 	.word	0x3fb70a3d
 8001d70:	00000000 	.word	0x00000000
 8001d74:	40606000 	.word	0x40606000
 8001d78:	1a63c1f8 	.word	0x1a63c1f8
 8001d7c:	404ca5dc 	.word	0x404ca5dc
 8001d80:	40d00000 	.word	0x40d00000
 8001d84:	43aa0000 	.word	0x43aa0000
 8001d88:	42121eb8 	.word	0x42121eb8
 8001d8c:	20000338 	.word	0x20000338
 8001d90:	408f4000 	.word	0x408f4000
 8001d94:	c0568000 	.word	0xc0568000
 8001d98:	40568000 	.word	0x40568000
 8001d9c:	20000048 	.word	0x20000048
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001da6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001daa:	eeb0 1a47 	vmov.f32	s2, s14
 8001dae:	eef0 1a67 	vmov.f32	s3, s15
 8001db2:	ed97 0b06 	vldr	d0, [r7, #24]
 8001db6:	481e      	ldr	r0, [pc, #120]	; (8001e30 <MPU6050_Read_All+0x438>)
 8001db8:	f000 f840 	bl	8001e3c <Kalman_getAngle>
 8001dbc:	eeb0 7a40 	vmov.f32	s14, s0
 8001dc0:	eef0 7a60 	vmov.f32	s15, s1
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001dd0:	4690      	mov	r8, r2
 8001dd2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <MPU6050_Read_All+0x43c>)
 8001ddc:	4640      	mov	r0, r8
 8001dde:	4649      	mov	r1, r9
 8001de0:	f7fe feb2 	bl	8000b48 <__aeabi_dcmpgt>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <MPU6050_Read_All+0x404>
        DataStruct->Gx = -DataStruct->Gx;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001df0:	4614      	mov	r4, r2
 8001df2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001e02:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001e06:	eeb0 1a47 	vmov.f32	s2, s14
 8001e0a:	eef0 1a67 	vmov.f32	s3, s15
 8001e0e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <MPU6050_Read_All+0x440>)
 8001e14:	f000 f812 	bl	8001e3c <Kalman_getAngle>
 8001e18:	eeb0 7a40 	vmov.f32	s14, s0
 8001e1c:	eef0 7a60 	vmov.f32	s15, s1
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8001e26:	bf00      	nop
 8001e28:	3740      	adds	r7, #64	; 0x40
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e30:	20000048 	.word	0x20000048
 8001e34:	40568000 	.word	0x40568000
 8001e38:	20000000 	.word	0x20000000

08001e3c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b096      	sub	sp, #88	; 0x58
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	61f8      	str	r0, [r7, #28]
 8001e44:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e48:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e4c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e5a:	f7fe fa2d 	bl	80002b8 <__aeabi_dsub>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e74:	f7fe fbd8 	bl	8000628 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fa1c 	bl	80002bc <__adddf3>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	69f9      	ldr	r1, [r7, #28]
 8001e8a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e9e:	f7fe fbc3 	bl	8000628 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001eb0:	f7fe fa02 	bl	80002b8 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001ec2:	f7fe f9f9 	bl	80002b8 <__aeabi_dsub>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe f9f2 	bl	80002bc <__adddf3>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ee4:	f7fe fba0 	bl	8000628 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4620      	mov	r0, r4
 8001eee:	4629      	mov	r1, r5
 8001ef0:	f7fe f9e4 	bl	80002bc <__adddf3>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	69f9      	ldr	r1, [r7, #28]
 8001efa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f0e:	f7fe fb8b 	bl	8000628 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4620      	mov	r0, r4
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f7fe f9cd 	bl	80002b8 <__aeabi_dsub>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	69f9      	ldr	r1, [r7, #28]
 8001f24:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f38:	f7fe fb76 	bl	8000628 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f9b8 	bl	80002b8 <__aeabi_dsub>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	69f9      	ldr	r1, [r7, #28]
 8001f4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f62:	f7fe fb61 	bl	8000628 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	f7fe f9a5 	bl	80002bc <__adddf3>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	69f9      	ldr	r1, [r7, #28]
 8001f78:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f88:	f7fe f998 	bl	80002bc <__adddf3>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f9e:	f7fe fc6d 	bl	800087c <__aeabi_ddiv>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fb4:	f7fe fc62 	bl	800087c <__aeabi_ddiv>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fca:	f7fe f975 	bl	80002b8 <__aeabi_dsub>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001fdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fe0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe4:	f7fe fb20 	bl	8000628 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4620      	mov	r0, r4
 8001fee:	4629      	mov	r1, r5
 8001ff0:	f7fe f964 	bl	80002bc <__adddf3>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	69f9      	ldr	r1, [r7, #28]
 8001ffa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002004:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002008:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800200c:	f7fe fb0c 	bl	8000628 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4620      	mov	r0, r4
 8002016:	4629      	mov	r1, r5
 8002018:	f7fe f950 	bl	80002bc <__adddf3>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	69f9      	ldr	r1, [r7, #28]
 8002022:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800202c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002036:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002040:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002048:	f7fe faee 	bl	8000628 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f7fe f930 	bl	80002b8 <__aeabi_dsub>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	69f9      	ldr	r1, [r7, #28]
 800205e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002068:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800206c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002070:	f7fe fada 	bl	8000628 <__aeabi_dmul>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4620      	mov	r0, r4
 800207a:	4629      	mov	r1, r5
 800207c:	f7fe f91c 	bl	80002b8 <__aeabi_dsub>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	69f9      	ldr	r1, [r7, #28]
 8002086:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002090:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002098:	f7fe fac6 	bl	8000628 <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4620      	mov	r0, r4
 80020a2:	4629      	mov	r1, r5
 80020a4:	f7fe f908 	bl	80002b8 <__aeabi_dsub>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	69f9      	ldr	r1, [r7, #28]
 80020ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80020b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020c0:	f7fe fab2 	bl	8000628 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4620      	mov	r0, r4
 80020ca:	4629      	mov	r1, r5
 80020cc:	f7fe f8f4 	bl	80002b8 <__aeabi_dsub>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	69f9      	ldr	r1, [r7, #28]
 80020d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020e0:	ec43 2b17 	vmov	d7, r2, r3
};
 80020e4:	eeb0 0a47 	vmov.f32	s0, s14
 80020e8:	eef0 0a67 	vmov.f32	s1, s15
 80020ec:	3758      	adds	r7, #88	; 0x58
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bdb0      	pop	{r4, r5, r7, pc}

080020f2 <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 80020fe:	217f      	movs	r1, #127	; 0x7f
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f006 fe90 	bl	8008e26 <strchr>
 8002106:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8002108:	e029      	b.n	800215e <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b7f      	cmp	r3, #127	; 0x7f
 8002110:	d106      	bne.n	8002120 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3301      	adds	r3, #1
 8002116:	4619      	mov	r1, r3
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f006 fe91 	bl	8008e40 <strcpy>
 800211e:	e019      	b.n	8002154 <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b7f      	cmp	r3, #127	; 0x7f
 8002126:	d109      	bne.n	800213c <manageBackSpace+0x4a>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3301      	adds	r3, #1
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d104      	bne.n	800213c <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3b01      	subs	r3, #1
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e00b      	b.n	8002154 <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b7f      	cmp	r3, #127	; 0x7f
 8002142:	d107      	bne.n	8002154 <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3301      	adds	r3, #1
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f006 fe76 	bl	8008e40 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 8002154:	217f      	movs	r1, #127	; 0x7f
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f006 fe65 	bl	8008e26 <strchr>
 800215c:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1d1      	bne.n	800210a <manageBackSpace+0x18>
		}
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 8002178:	e00c      	b.n	8002194 <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b2f      	cmp	r3, #47	; 0x2f
 8002180:	d903      	bls.n	800218a <isNumber+0x1a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b39      	cmp	r3, #57	; 0x39
 8002188:	d901      	bls.n	800218e <isNumber+0x1e>
			return 0;
 800218a:	2300      	movs	r3, #0
 800218c:	e007      	b.n	800219e <isNumber+0x2e>
		string++;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3301      	adds	r3, #1
 8002192:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ee      	bne.n	800217a <isNumber+0xa>
	}
	return 1;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_DMA_Init+0x3c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <MX_DMA_Init+0x3c>)
 80021bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_DMA_Init+0x3c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2039      	movs	r0, #57	; 0x39
 80021d4:	f001 f97b 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80021d8:	2039      	movs	r0, #57	; 0x39
 80021da:	f001 f994 	bl	8003506 <HAL_NVIC_EnableIRQ>

}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800

080021ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <MX_GPIO_Init+0xb8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <MX_GPIO_Init+0xb8>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <MX_GPIO_Init+0xb8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <MX_GPIO_Init+0xb8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <MX_GPIO_Init+0xb8>)
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <MX_GPIO_Init+0xb8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <MX_GPIO_Init+0xb8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <MX_GPIO_Init+0xb8>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <MX_GPIO_Init+0xb8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <MX_GPIO_Init+0xb8>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <MX_GPIO_Init+0xb8>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_GPIO_Init+0xb8>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002278:	480b      	ldr	r0, [pc, #44]	; (80022a8 <MX_GPIO_Init+0xbc>)
 800227a:	f001 fefd 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800227e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002284:	2301      	movs	r3, #1
 8002286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	4804      	ldr	r0, [pc, #16]	; (80022a8 <MX_GPIO_Init+0xbc>)
 8002298:	f001 fd52 	bl	8003d40 <HAL_GPIO_Init>

}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020800 	.word	0x40020800

080022ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <MX_I2C1_Init+0x50>)
 80022b2:	4a13      	ldr	r2, [pc, #76]	; (8002300 <MX_I2C1_Init+0x54>)
 80022b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_I2C1_Init+0x50>)
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <MX_I2C1_Init+0x58>)
 80022ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <MX_I2C1_Init+0x50>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_I2C1_Init+0x50>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_I2C1_Init+0x50>)
 80022ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <MX_I2C1_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_I2C1_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <MX_I2C1_Init+0x50>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_I2C1_Init+0x50>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_I2C1_Init+0x50>)
 80022ea:	f001 fedf 	bl	80040ac <HAL_I2C_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022f4:	f000 f91a 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000033c 	.word	0x2000033c
 8002300:	40005400 	.word	0x40005400
 8002304:	000186a0 	.word	0x000186a0

08002308 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_I2C_MspInit+0x84>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12b      	bne.n	8002382 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_I2C_MspInit+0x88>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002346:	23c0      	movs	r3, #192	; 0xc0
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234a:	2312      	movs	r3, #18
 800234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002356:	2304      	movs	r3, #4
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <HAL_I2C_MspInit+0x8c>)
 8002362:	f001 fced 	bl	8003d40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_I2C_MspInit+0x88>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40005400 	.word	0x40005400
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400

08002398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800239e:	f000 ff25 	bl	80031ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a2:	f000 f859 	bl	8002458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a6:	f7ff ff21 	bl	80021ec <MX_GPIO_Init>
  MX_RTC_Init();
 80023aa:	f000 f8c5 	bl	8002538 <MX_RTC_Init>
  MX_DMA_Init();
 80023ae:	f7ff fefd 	bl	80021ac <MX_DMA_Init>
  MX_I2C1_Init();
 80023b2:	f7ff ff7b 	bl	80022ac <MX_I2C1_Init>
  MX_TIM1_Init();
 80023b6:	f000 fa4f 	bl	8002858 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80023ba:	f000 fb7b 	bl	8002ab4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t angle = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 80023c2:	230b      	movs	r3, #11
 80023c4:	717b      	strb	r3, [r7, #5]

  ConsoleInit();
 80023c6:	f7fe fed9 	bl	800117c <ConsoleInit>
  ConsoleSendString("Console Initialised\n");
 80023ca:	481f      	ldr	r0, [pc, #124]	; (8002448 <main+0xb0>)
 80023cc:	f7ff f83b 	bl	8001446 <ConsoleSendString>
  if (MPU6050_Init(&hi2c1) == 1)
 80023d0:	481e      	ldr	r0, [pc, #120]	; (800244c <main+0xb4>)
 80023d2:	f7ff fab9 	bl	8001948 <MPU6050_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d103      	bne.n	80023e4 <main+0x4c>
  {
	  ConsoleSendString("** ERROR Initialising MNP6050!\n");
 80023dc:	481c      	ldr	r0, [pc, #112]	; (8002450 <main+0xb8>)
 80023de:	f7ff f832 	bl	8001446 <ConsoleSendString>
 80023e2:	e002      	b.n	80023ea <main+0x52>
  }
  else
  {
	  ConsoleSendString("MPU6050 Initialised\n");
 80023e4:	481b      	ldr	r0, [pc, #108]	; (8002454 <main+0xbc>)
 80023e6:	f7ff f82e 	bl	8001446 <ConsoleSendString>
  }
  ConsolePrintPrompt();
 80023ea:	f7fe fef1 	bl	80011d0 <ConsolePrintPrompt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 80023ee:	f7fe fefd 	bl	80011ec <ConsoleProcess>


	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 80023f2:	2300      	movs	r3, #0
 80023f4:	71bb      	strb	r3, [r7, #6]
 80023f6:	e01b      	b.n	8002430 <main+0x98>
	  	  			// Calculate color
	  	  			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 80023f8:	79ba      	ldrb	r2, [r7, #6]
 80023fa:	797b      	ldrb	r3, [r7, #5]
 80023fc:	fb12 f303 	smulbb	r3, r2, r3
 8002400:	b2da      	uxtb	r2, r3
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	4413      	add	r3, r2
 8002406:	b2db      	uxtb	r3, r3
 8002408:	227f      	movs	r2, #127	; 0x7f
 800240a:	21ff      	movs	r1, #255	; 0xff
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fe27 	bl	8003060 <hsl_to_rgb>
 8002412:	6038      	str	r0, [r7, #0]
	  	  			// Set color
	  	  			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	0c1b      	lsrs	r3, r3, #16
 8002418:	b2d9      	uxtb	r1, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	b2da      	uxtb	r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	79b8      	ldrb	r0, [r7, #6]
 8002426:	f000 fbfd 	bl	8002c24 <led_set_RGB>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 800242a:	79bb      	ldrb	r3, [r7, #6]
 800242c:	3301      	adds	r3, #1
 800242e:	71bb      	strb	r3, [r7, #6]
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	2b0b      	cmp	r3, #11
 8002434:	d9e0      	bls.n	80023f8 <main+0x60>
	  	  		}
	  	  		// Write to LED
	  	    	++angle;
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	3301      	adds	r3, #1
 800243a:	71fb      	strb	r3, [r7, #7]
	  	  		led_render();
 800243c:	f000 fc58 	bl	8002cf0 <led_render>
	  	  		// Some delay
	  	  		HAL_Delay(10);
 8002440:	200a      	movs	r0, #10
 8002442:	f000 ff45 	bl	80032d0 <HAL_Delay>
	  ConsoleProcess();
 8002446:	e7d2      	b.n	80023ee <main+0x56>
 8002448:	0800c4f0 	.word	0x0800c4f0
 800244c:	2000033c 	.word	0x2000033c
 8002450:	0800c508 	.word	0x0800c508
 8002454:	0800c528 	.word	0x0800c528

08002458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b094      	sub	sp, #80	; 0x50
 800245c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800245e:	f107 0320 	add.w	r3, r7, #32
 8002462:	2230      	movs	r2, #48	; 0x30
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f005 ffda 	bl	8008420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <SystemClock_Config+0xcc>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4a27      	ldr	r2, [pc, #156]	; (8002524 <SystemClock_Config+0xcc>)
 8002486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248a:	6413      	str	r3, [r2, #64]	; 0x40
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <SystemClock_Config+0xcc>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <SystemClock_Config+0xd0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <SystemClock_Config+0xd0>)
 80024a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <SystemClock_Config+0xd0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80024b4:	2305      	movs	r3, #5
 80024b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024be:	2301      	movs	r3, #1
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c2:	2302      	movs	r3, #2
 80024c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80024cc:	230c      	movs	r3, #12
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80024d0:	2360      	movs	r3, #96	; 0x60
 80024d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024d4:	2302      	movs	r3, #2
 80024d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024d8:	2304      	movs	r3, #4
 80024da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024dc:	f107 0320 	add.w	r3, r7, #32
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 fda3 	bl	800502c <HAL_RCC_OscConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80024ec:	f000 f81e 	bl	800252c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f0:	230f      	movs	r3, #15
 80024f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f4:	2302      	movs	r3, #2
 80024f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002500:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002506:	f107 030c 	add.w	r3, r7, #12
 800250a:	2103      	movs	r1, #3
 800250c:	4618      	mov	r0, r3
 800250e:	f003 f805 	bl	800551c <HAL_RCC_ClockConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002518:	f000 f808 	bl	800252c <Error_Handler>
  }
}
 800251c:	bf00      	nop
 800251e:	3750      	adds	r7, #80	; 0x50
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000

0800252c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002530:	b672      	cpsid	i
}
 8002532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002534:	e7fe      	b.n	8002534 <Error_Handler+0x8>
	...

08002538 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_RTC_Init+0x44>)
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <MX_RTC_Init+0x48>)
 8002540:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_RTC_Init+0x44>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_RTC_Init+0x44>)
 800254a:	227f      	movs	r2, #127	; 0x7f
 800254c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_RTC_Init+0x44>)
 8002550:	22ff      	movs	r2, #255	; 0xff
 8002552:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_RTC_Init+0x44>)
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_RTC_Init+0x44>)
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_RTC_Init+0x44>)
 8002562:	2200      	movs	r2, #0
 8002564:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_RTC_Init+0x44>)
 8002568:	f003 faa8 	bl	8005abc <HAL_RTC_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002572:	f7ff ffdb 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000390 	.word	0x20000390
 8002580:	40002800 	.word	0x40002800

08002584 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
 800259c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_RTC_MspInit+0x50>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d111      	bne.n	80025cc <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025a8:	2302      	movs	r3, #2
 80025aa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b2:	f107 0308 	add.w	r3, r7, #8
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 f990 	bl	80058dc <HAL_RCCEx_PeriphCLKConfig>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80025c2:	f7ff ffb3 	bl	800252c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <HAL_RTC_MspInit+0x54>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80025cc:	bf00      	nop
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40002800 	.word	0x40002800
 80025d8:	42470e3c 	.word	0x42470e3c

080025dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_MspInit+0x4c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <HAL_MspInit+0x4c>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_MspInit+0x4c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_MspInit+0x4c>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_MspInit+0x4c>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_MspInit+0x4c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <NMI_Handler+0x4>

08002632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <HardFault_Handler+0x4>

08002638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <MemManage_Handler+0x4>

0800263e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002642:	e7fe      	b.n	8002642 <BusFault_Handler+0x4>

08002644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <UsageFault_Handler+0x4>

0800264a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002678:	f000 fe0a 	bl	8003290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}

08002680 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <USART1_IRQHandler+0x10>)
 8002686:	f004 ff35 	bl	80074f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000045c 	.word	0x2000045c

08002694 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <DMA2_Stream1_IRQHandler+0x10>)
 800269a:	f001 f8e7 	bl	800386c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200003fc 	.word	0x200003fc

080026a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
	return 1;
 80026ac:	2301      	movs	r3, #1
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_kill>:

int _kill(int pid, int sig)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026c2:	f005 fe83 	bl	80083cc <__errno>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2216      	movs	r2, #22
 80026ca:	601a      	str	r2, [r3, #0]
	return -1;
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_exit>:

void _exit (int status)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ffe7 	bl	80026b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026ea:	e7fe      	b.n	80026ea <_exit+0x12>

080026ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	e00a      	b.n	8002714 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026fe:	f3af 8000 	nop.w
 8002702:	4601      	mov	r1, r0
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	60ba      	str	r2, [r7, #8]
 800270a:	b2ca      	uxtb	r2, r1
 800270c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3301      	adds	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	dbf0      	blt.n	80026fe <_read+0x12>
	}

return len;
 800271c:	687b      	ldr	r3, [r7, #4]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e009      	b.n	800274c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	60ba      	str	r2, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	dbf1      	blt.n	8002738 <_write+0x12>
	}
	return len;
 8002754:	687b      	ldr	r3, [r7, #4]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_close>:

int _close(int file)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
	return -1;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002786:	605a      	str	r2, [r3, #4]
	return 0;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <_isatty>:

int _isatty(int file)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
	return 1;
 800279e:	2301      	movs	r3, #1
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
	return 0;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <_sbrk+0x5c>)
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <_sbrk+0x60>)
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <_sbrk+0x64>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <_sbrk+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f8:	f005 fde8 	bl	80083cc <__errno>
 80027fc:	4603      	mov	r3, r0
 80027fe:	220c      	movs	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e009      	b.n	800281c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <_sbrk+0x64>)
 8002818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20020000 	.word	0x20020000
 8002828:	00000400 	.word	0x00000400
 800282c:	200003b0 	.word	0x200003b0
 8002830:	20000540 	.word	0x20000540

08002834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <SystemInit+0x20>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	4a05      	ldr	r2, [pc, #20]	; (8002854 <SystemInit+0x20>)
 8002840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b096      	sub	sp, #88	; 0x58
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	615a      	str	r2, [r3, #20]
 8002888:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	2220      	movs	r2, #32
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f005 fdc5 	bl	8008420 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002896:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <MX_TIM1_Init+0x138>)
 8002898:	4a3e      	ldr	r2, [pc, #248]	; (8002994 <MX_TIM1_Init+0x13c>)
 800289a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800289c:	4b3c      	ldr	r3, [pc, #240]	; (8002990 <MX_TIM1_Init+0x138>)
 800289e:	2200      	movs	r2, #0
 80028a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <MX_TIM1_Init+0x138>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 80028a8:	4b39      	ldr	r3, [pc, #228]	; (8002990 <MX_TIM1_Init+0x138>)
 80028aa:	227c      	movs	r2, #124	; 0x7c
 80028ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ae:	4b38      	ldr	r3, [pc, #224]	; (8002990 <MX_TIM1_Init+0x138>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028b4:	4b36      	ldr	r3, [pc, #216]	; (8002990 <MX_TIM1_Init+0x138>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ba:	4b35      	ldr	r3, [pc, #212]	; (8002990 <MX_TIM1_Init+0x138>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028c0:	4833      	ldr	r0, [pc, #204]	; (8002990 <MX_TIM1_Init+0x138>)
 80028c2:	f003 fbf9 	bl	80060b8 <HAL_TIM_Base_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80028cc:	f7ff fe2e 	bl	800252c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028da:	4619      	mov	r1, r3
 80028dc:	482c      	ldr	r0, [pc, #176]	; (8002990 <MX_TIM1_Init+0x138>)
 80028de:	f003 ffcb 	bl	8006878 <HAL_TIM_ConfigClockSource>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80028e8:	f7ff fe20 	bl	800252c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028ec:	4828      	ldr	r0, [pc, #160]	; (8002990 <MX_TIM1_Init+0x138>)
 80028ee:	f003 fc32 	bl	8006156 <HAL_TIM_PWM_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80028f8:	f7ff fe18 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fc:	2300      	movs	r3, #0
 80028fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002904:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002908:	4619      	mov	r1, r3
 800290a:	4821      	ldr	r0, [pc, #132]	; (8002990 <MX_TIM1_Init+0x138>)
 800290c:	f004 fc22 	bl	8007154 <HAL_TIMEx_MasterConfigSynchronization>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002916:	f7ff fe09 	bl	800252c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800291a:	2360      	movs	r3, #96	; 0x60
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002922:	2300      	movs	r3, #0
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002926:	2300      	movs	r3, #0
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293a:	2200      	movs	r2, #0
 800293c:	4619      	mov	r1, r3
 800293e:	4814      	ldr	r0, [pc, #80]	; (8002990 <MX_TIM1_Init+0x138>)
 8002940:	f003 fed8 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800294a:	f7ff fdef 	bl	800252c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002966:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	4619      	mov	r1, r3
 8002970:	4807      	ldr	r0, [pc, #28]	; (8002990 <MX_TIM1_Init+0x138>)
 8002972:	f004 fc5d 	bl	8007230 <HAL_TIMEx_ConfigBreakDeadTime>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800297c:	f7ff fdd6 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002980:	4803      	ldr	r0, [pc, #12]	; (8002990 <MX_TIM1_Init+0x138>)
 8002982:	f000 f85d 	bl	8002a40 <HAL_TIM_MspPostInit>

}
 8002986:	bf00      	nop
 8002988:	3758      	adds	r7, #88	; 0x58
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200003b4 	.word	0x200003b4
 8002994:	40010000 	.word	0x40010000

08002998 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_TIM_Base_MspInit+0x98>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d13e      	bne.n	8002a28 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <HAL_TIM_Base_MspInit+0x9c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <HAL_TIM_Base_MspInit+0x9c>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <HAL_TIM_Base_MspInit+0x9c>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 80029c8:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_TIM_Base_MspInit+0xa4>)
 80029ca:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 80029ce:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80029d2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d4:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 80029e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 80029ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ee:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 80029f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029f6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80029f8:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 80029fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029fe:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002a0c:	480a      	ldr	r0, [pc, #40]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 8002a0e:	f000 fd95 	bl	800353c <HAL_DMA_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002a18:	f7ff fd88 	bl	800252c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
 8002a22:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <HAL_TIM_Base_MspInit+0xa0>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40010000 	.word	0x40010000
 8002a34:	40023800 	.word	0x40023800
 8002a38:	200003fc 	.word	0x200003fc
 8002a3c:	40026428 	.word	0x40026428

08002a40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 030c 	add.w	r3, r7, #12
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <HAL_TIM_MspPostInit+0x68>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d11e      	bne.n	8002aa0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_TIM_MspPostInit+0x6c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <HAL_TIM_MspPostInit+0x6c>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_TIM_MspPostInit+0x6c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 8002a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a90:	2301      	movs	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <HAL_TIM_MspPostInit+0x70>)
 8002a9c:	f001 f950 	bl	8003d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002aa0:	bf00      	nop
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020000 	.word	0x40020000

08002ab4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002aba:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <MX_USART1_UART_Init+0x50>)
 8002abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ada:	220c      	movs	r2, #12
 8002adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002aec:	f004 fbf2 	bl	80072d4 <HAL_UART_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002af6:	f7ff fd19 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000045c 	.word	0x2000045c
 8002b04:	40011000 	.word	0x40011000

08002b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <HAL_UART_MspInit+0x94>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d134      	bne.n	8002b94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b34:	f043 0310 	orr.w	r3, r3, #16
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_UART_MspInit+0x98>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b70:	2303      	movs	r3, #3
 8002b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b74:	2307      	movs	r3, #7
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4809      	ldr	r0, [pc, #36]	; (8002ba4 <HAL_UART_MspInit+0x9c>)
 8002b80:	f001 f8de 	bl	8003d40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	2025      	movs	r0, #37	; 0x25
 8002b8a:	f000 fca0 	bl	80034ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b8e:	2025      	movs	r0, #37	; 0x25
 8002b90:	f000 fcb9 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b94:	bf00      	nop
 8002b96:	3728      	adds	r7, #40	; 0x28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40011000 	.word	0x40011000
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40020000 	.word	0x40020000

08002ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bae:	490e      	ldr	r1, [pc, #56]	; (8002be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb4:	e002      	b.n	8002bbc <LoopCopyDataInit>

08002bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bba:	3304      	adds	r3, #4

08002bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc0:	d3f9      	bcc.n	8002bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bc4:	4c0b      	ldr	r4, [pc, #44]	; (8002bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc8:	e001      	b.n	8002bce <LoopFillZerobss>

08002bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bcc:	3204      	adds	r2, #4

08002bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd0:	d3fb      	bcc.n	8002bca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bd2:	f7ff fe2f 	bl	8002834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bd6:	f005 fbff 	bl	80083d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bda:	f7ff fbdd 	bl	8002398 <main>
  bx  lr    
 8002bde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be8:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002bec:	0800ccb0 	.word	0x0800ccb0
  ldr r2, =_sbss
 8002bf0:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8002bf4:	2000053c 	.word	0x2000053c

08002bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bf8:	e7fe      	b.n	8002bf8 <ADC_IRQHandler>

08002bfa <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	460a      	mov	r2, r1
 8002c04:	71fb      	strb	r3, [r7, #7]
 8002c06:	4613      	mov	r3, r2
 8002c08:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	79ba      	ldrb	r2, [r7, #6]
 8002c0e:	fb02 f303 	mul.w	r3, r2, r3
 8002c12:	121b      	asrs	r3, r3, #8
 8002c14:	b2db      	uxtb	r3, r3
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	4603      	mov	r3, r0
 8002c38:	71bb      	strb	r3, [r7, #6]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	717b      	strb	r3, [r7, #5]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 8002c42:	79bb      	ldrb	r3, [r7, #6]
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c58:	edc7 7a00 	vstr	s15, [r7]
 8002c5c:	783b      	ldrb	r3, [r7, #0]
 8002c5e:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 8002c60:	797b      	ldrb	r3, [r7, #5]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c76:	edc7 7a00 	vstr	s15, [r7]
 8002c7a:	783b      	ldrb	r3, [r7, #0]
 8002c7c:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 8002c7e:	793b      	ldrb	r3, [r7, #4]
 8002c80:	ee07 3a90 	vmov	s15, r3
 8002c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c94:	edc7 7a00 	vstr	s15, [r7]
 8002c98:	783b      	ldrb	r3, [r7, #0]
 8002c9a:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	189c      	adds	r4, r3, r2
 8002ca4:	797b      	ldrb	r3, [r7, #5]
 8002ca6:	21b0      	movs	r1, #176	; 0xb0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ffa6 	bl	8002bfa <scale8>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <led_set_RGB+0xc8>)
 8002cb4:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8002cb6:	79fa      	ldrb	r2, [r7, #7]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	490a      	ldr	r1, [pc, #40]	; (8002cec <led_set_RGB+0xc8>)
 8002cc2:	79ba      	ldrb	r2, [r7, #6]
 8002cc4:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8002cc6:	79fa      	ldrb	r2, [r7, #7]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	1c9c      	adds	r4, r3, #2
 8002cd0:	793b      	ldrb	r3, [r7, #4]
 8002cd2:	21f0      	movs	r1, #240	; 0xf0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff90 	bl	8002bfa <scale8>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b03      	ldr	r3, [pc, #12]	; (8002cec <led_set_RGB+0xc8>)
 8002ce0:	551a      	strb	r2, [r3, r4]

}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd90      	pop	{r4, r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200004a0 	.word	0x200004a0

08002cf0 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 8002cf6:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <led_render+0x148>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <led_render+0x1a>
 8002cfe:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <led_render+0x14c>)
 8002d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d015      	beq.n	8002d36 <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	71fb      	strb	r3, [r7, #7]
 8002d0e:	e007      	b.n	8002d20 <led_render+0x30>
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	4a4b      	ldr	r2, [pc, #300]	; (8002e40 <led_render+0x150>)
 8002d14:	2100      	movs	r1, #0
 8002d16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	71fb      	strb	r3, [r7, #7]
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	2b2f      	cmp	r3, #47	; 0x2f
 8002d24:	d9f4      	bls.n	8002d10 <led_render+0x20>
    wr_buf_p = 0;
 8002d26:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <led_render+0x148>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4845      	ldr	r0, [pc, #276]	; (8002e44 <led_render+0x154>)
 8002d30:	f003 fc1a 	bl	8006568 <HAL_TIM_PWM_Stop_DMA>
    return;
 8002d34:	e07c      	b.n	8002e30 <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8002d36:	2300      	movs	r3, #0
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	e06d      	b.n	8002e18 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8002d3c:	4b42      	ldr	r3, [pc, #264]	; (8002e48 <led_render+0x158>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	dd01      	ble.n	8002d54 <led_render+0x64>
 8002d50:	2150      	movs	r1, #80	; 0x50
 8002d52:	e000      	b.n	8002d56 <led_render+0x66>
 8002d54:	2128      	movs	r1, #40	; 0x28
 8002d56:	4a3a      	ldr	r2, [pc, #232]	; (8002e40 <led_render+0x150>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8002d5e:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <led_render+0x158>)
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	461a      	mov	r2, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	dd01      	ble.n	8002d76 <led_render+0x86>
 8002d72:	2150      	movs	r1, #80	; 0x50
 8002d74:	e000      	b.n	8002d78 <led_render+0x88>
 8002d76:	2128      	movs	r1, #40	; 0x28
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	4a30      	ldr	r2, [pc, #192]	; (8002e40 <led_render+0x150>)
 8002d7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <led_render+0x158>)
 8002d84:	789b      	ldrb	r3, [r3, #2]
 8002d86:	461a      	mov	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	dd01      	ble.n	8002d9a <led_render+0xaa>
 8002d96:	2150      	movs	r1, #80	; 0x50
 8002d98:	e000      	b.n	8002d9c <led_render+0xac>
 8002d9a:	2128      	movs	r1, #40	; 0x28
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	3310      	adds	r3, #16
 8002da0:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <led_render+0x150>)
 8002da2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8002da6:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <led_render+0x158>)
 8002da8:	78db      	ldrb	r3, [r3, #3]
 8002daa:	461a      	mov	r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	dd01      	ble.n	8002dbe <led_render+0xce>
 8002dba:	2150      	movs	r1, #80	; 0x50
 8002dbc:	e000      	b.n	8002dc0 <led_render+0xd0>
 8002dbe:	2128      	movs	r1, #40	; 0x28
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	3318      	adds	r3, #24
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <led_render+0x150>)
 8002dc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8002dca:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <led_render+0x158>)
 8002dcc:	791b      	ldrb	r3, [r3, #4]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	dd01      	ble.n	8002de2 <led_render+0xf2>
 8002dde:	2150      	movs	r1, #80	; 0x50
 8002de0:	e000      	b.n	8002de4 <led_render+0xf4>
 8002de2:	2128      	movs	r1, #40	; 0x28
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	3320      	adds	r3, #32
 8002de8:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <led_render+0x150>)
 8002dea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <led_render+0x158>)
 8002df0:	795b      	ldrb	r3, [r3, #5]
 8002df2:	461a      	mov	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	dd01      	ble.n	8002e06 <led_render+0x116>
 8002e02:	2150      	movs	r1, #80	; 0x50
 8002e04:	e000      	b.n	8002e08 <led_render+0x118>
 8002e06:	2128      	movs	r1, #40	; 0x28
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	3328      	adds	r3, #40	; 0x28
 8002e0c:	4a0c      	ldr	r2, [pc, #48]	; (8002e40 <led_render+0x150>)
 8002e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b07      	cmp	r3, #7
 8002e1c:	d98e      	bls.n	8002d3c <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 8002e1e:	2330      	movs	r3, #48	; 0x30
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <led_render+0x150>)
 8002e22:	2100      	movs	r1, #0
 8002e24:	4807      	ldr	r0, [pc, #28]	; (8002e44 <led_render+0x154>)
 8002e26:	f003 f9ef 	bl	8006208 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8002e2a:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <led_render+0x148>)
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	601a      	str	r2, [r3, #0]
}
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000524 	.word	0x20000524
 8002e3c:	200003fc 	.word	0x200003fc
 8002e40:	200004c4 	.word	0x200004c4
 8002e44:	200003b4 	.word	0x200003b4
 8002e48:	200004a0 	.word	0x200004a0

08002e4c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002e54:	4b3a      	ldr	r3, [pc, #232]	; (8002f40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b0b      	cmp	r3, #11
 8002e5a:	d854      	bhi.n	8002f06 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e048      	b.n	8002ef4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a35      	ldr	r2, [pc, #212]	; (8002f44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	461a      	mov	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dd01      	ble.n	8002e84 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8002e80:	2150      	movs	r1, #80	; 0x50
 8002e82:	e000      	b.n	8002e86 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8002e84:	2128      	movs	r1, #40	; 0x28
 8002e86:	4a30      	ldr	r2, [pc, #192]	; (8002f48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	3301      	adds	r3, #1
 8002e9a:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	dd01      	ble.n	8002eb2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 8002eae:	2150      	movs	r1, #80	; 0x50
 8002eb0:	e000      	b.n	8002eb4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8002eb2:	2128      	movs	r1, #40	; 0x28
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	4a23      	ldr	r2, [pc, #140]	; (8002f48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8002eba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3302      	adds	r3, #2
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002ecc:	5cd3      	ldrb	r3, [r2, r3]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	dd01      	ble.n	8002ee2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8002ede:	2150      	movs	r1, #80	; 0x50
 8002ee0:	e000      	b.n	8002ee4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8002ee2:	2128      	movs	r1, #40	; 0x28
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3310      	adds	r3, #16
 8002ee8:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8002eea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	d9b3      	bls.n	8002e62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002f02:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8002f04:	e016      	b.n	8002f34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b0d      	cmp	r3, #13
 8002f0c:	d812      	bhi.n	8002f34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	72fb      	strb	r3, [r7, #11]
 8002f12:	e007      	b.n	8002f24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 8002f14:	7afb      	ldrb	r3, [r7, #11]
 8002f16:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8002f18:	2100      	movs	r1, #0
 8002f1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
 8002f20:	3301      	adds	r3, #1
 8002f22:	72fb      	strb	r3, [r7, #11]
 8002f24:	7afb      	ldrb	r3, [r7, #11]
 8002f26:	2b17      	cmp	r3, #23
 8002f28:	d9f4      	bls.n	8002f14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	4a03      	ldr	r2, [pc, #12]	; (8002f40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	20000524 	.word	0x20000524
 8002f44:	200004a0 	.word	0x200004a0
 8002f48:	200004c4 	.word	0x200004c4

08002f4c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002f54:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b0b      	cmp	r3, #11
 8002f5a:	d855      	bhi.n	8003008 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e049      	b.n	8002ff6 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8002f62:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4a39      	ldr	r2, [pc, #228]	; (8003054 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8002f6e:	5cd3      	ldrb	r3, [r2, r3]
 8002f70:	461a      	mov	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	dd01      	ble.n	8002f84 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8002f80:	2150      	movs	r1, #80	; 0x50
 8002f82:	e000      	b.n	8002f86 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8002f84:	2128      	movs	r1, #40	; 0x28
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3318      	adds	r3, #24
 8002f8a:	4a33      	ldr	r2, [pc, #204]	; (8003058 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8002f8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8002f90:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	dd01      	ble.n	8002fb4 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8002fb0:	2150      	movs	r1, #80	; 0x50
 8002fb2:	e000      	b.n	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8002fb4:	2128      	movs	r1, #40	; 0x28
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3320      	adds	r3, #32
 8002fba:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8002fbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4413      	add	r3, r2
 8002fca:	3302      	adds	r3, #2
 8002fcc:	4a21      	ldr	r2, [pc, #132]	; (8003054 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	dd01      	ble.n	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8002fe0:	2150      	movs	r1, #80	; 0x50
 8002fe2:	e000      	b.n	8002fe6 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8002fe4:	2128      	movs	r1, #40	; 0x28
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3328      	adds	r3, #40	; 0x28
 8002fea:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8002fec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b07      	cmp	r3, #7
 8002ffa:	d9b2      	bls.n	8002f62 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	4a13      	ldr	r2, [pc, #76]	; (8003050 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8003004:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 8003006:	e01e      	b.n	8003046 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b0d      	cmp	r3, #13
 800300e:	d813      	bhi.n	8003038 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8003010:	2318      	movs	r3, #24
 8003012:	72fb      	strb	r3, [r7, #11]
 8003014:	e007      	b.n	8003026 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 8003016:	7afb      	ldrb	r3, [r7, #11]
 8003018:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800301a:	2100      	movs	r1, #0
 800301c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003020:	7afb      	ldrb	r3, [r7, #11]
 8003022:	3301      	adds	r3, #1
 8003024:	72fb      	strb	r3, [r7, #11]
 8003026:	7afb      	ldrb	r3, [r7, #11]
 8003028:	2b2f      	cmp	r3, #47	; 0x2f
 800302a:	d9f4      	bls.n	8003016 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8003034:	6013      	str	r3, [r2, #0]
}
 8003036:	e006      	b.n	8003046 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800303e:	2100      	movs	r1, #0
 8003040:	4806      	ldr	r0, [pc, #24]	; (800305c <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8003042:	f003 fa91 	bl	8006568 <HAL_TIM_PWM_Stop_DMA>
}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000524 	.word	0x20000524
 8003054:	200004a0 	.word	0x200004a0
 8003058:	200004c4 	.word	0x200004c4
 800305c:	200003b4 	.word	0x200003b4

08003060 <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
 800306a:	460b      	mov	r3, r1
 800306c:	71bb      	strb	r3, [r7, #6]
 800306e:	4613      	mov	r3, r2
 8003070:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8003072:	797b      	ldrb	r3, [r7, #5]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <hsl_to_rgb+0x1c>
 8003078:	2300      	movs	r3, #0
 800307a:	e0b1      	b.n	80031e0 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 800307c:	797b      	ldrb	r3, [r7, #5]
 800307e:	b29b      	uxth	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	b29b      	uxth	r3, r3
 8003084:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8003086:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db09      	blt.n	80030a2 <hsl_to_rgb+0x42>
 800308e:	89bb      	ldrh	r3, [r7, #12]
 8003090:	b29b      	uxth	r3, r3
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	79ba      	ldrb	r2, [r7, #6]
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	121b      	asrs	r3, r3, #8
 800309c:	b2db      	uxtb	r3, r3
 800309e:	74fb      	strb	r3, [r7, #19]
 80030a0:	e00a      	b.n	80030b8 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80030a2:	89bb      	ldrh	r3, [r7, #12]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80030ac:	79ba      	ldrb	r2, [r7, #6]
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	121b      	asrs	r3, r3, #8
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	0052      	lsls	r2, r2, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80030c8:	897b      	ldrh	r3, [r7, #10]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80030d0:	7d3b      	ldrb	r3, [r7, #20]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	b29b      	uxth	r3, r3
 80030da:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80030dc:	897b      	ldrh	r3, [r7, #10]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <hsl_to_rgb+0x9c>
 80030e8:	89fb      	ldrh	r3, [r7, #14]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	7cfa      	ldrb	r2, [r7, #19]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	121b      	asrs	r3, r3, #8
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	74bb      	strb	r3, [r7, #18]
 80030fa:	e00a      	b.n	8003112 <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 80030fc:	89fb      	ldrh	r3, [r7, #14]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003104:	7cfa      	ldrb	r2, [r7, #19]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	fb02 f303 	mul.w	r3, r2, r3
 800310c:	121b      	asrs	r3, r3, #8
 800310e:	b2db      	uxtb	r3, r3
 8003110:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	797a      	ldrb	r2, [r7, #5]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8003122:	897b      	ldrh	r3, [r7, #10]
 8003124:	b29b      	uxth	r3, r3
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b04      	cmp	r3, #4
 800312c:	d839      	bhi.n	80031a2 <hsl_to_rgb+0x142>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <hsl_to_rgb+0xd4>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003149 	.word	0x08003149
 8003138:	0800315b 	.word	0x0800315b
 800313c:	0800316d 	.word	0x0800316d
 8003140:	0800317f 	.word	0x0800317f
 8003144:	08003191 	.word	0x08003191
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8003148:	7cfb      	ldrb	r3, [r7, #19]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	75fb      	strb	r3, [r7, #23]
 800314e:	7cbb      	ldrb	r3, [r7, #18]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	75bb      	strb	r3, [r7, #22]
 8003154:	2300      	movs	r3, #0
 8003156:	757b      	strb	r3, [r7, #21]
 8003158:	e02c      	b.n	80031b4 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 800315a:	7cbb      	ldrb	r3, [r7, #18]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	75fb      	strb	r3, [r7, #23]
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	75bb      	strb	r3, [r7, #22]
 8003166:	2300      	movs	r3, #0
 8003168:	757b      	strb	r3, [r7, #21]
 800316a:	e023      	b.n	80031b4 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 800316c:	2300      	movs	r3, #0
 800316e:	75fb      	strb	r3, [r7, #23]
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	75bb      	strb	r3, [r7, #22]
 8003176:	7cbb      	ldrb	r3, [r7, #18]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	757b      	strb	r3, [r7, #21]
 800317c:	e01a      	b.n	80031b4 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
 8003182:	7cbb      	ldrb	r3, [r7, #18]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	75bb      	strb	r3, [r7, #22]
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	757b      	strb	r3, [r7, #21]
 800318e:	e011      	b.n	80031b4 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8003190:	7cbb      	ldrb	r3, [r7, #18]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	75fb      	strb	r3, [r7, #23]
 8003196:	2300      	movs	r3, #0
 8003198:	75bb      	strb	r3, [r7, #22]
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	757b      	strb	r3, [r7, #21]
 80031a0:	e008      	b.n	80031b4 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	75fb      	strb	r3, [r7, #23]
 80031a8:	2300      	movs	r3, #0
 80031aa:	75bb      	strb	r3, [r7, #22]
 80031ac:	7cbb      	ldrb	r3, [r7, #18]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	757b      	strb	r3, [r7, #21]
 80031b2:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	7c7b      	ldrb	r3, [r7, #17]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4413      	add	r3, r2
 80031c0:	041a      	lsls	r2, r3, #16
 80031c2:	7dbb      	ldrb	r3, [r7, #22]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	4619      	mov	r1, r3
 80031c8:	7c7b      	ldrb	r3, [r7, #17]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	440b      	add	r3, r1
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	431a      	orrs	r2, r3
 80031d2:	7d7b      	ldrb	r3, [r7, #21]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	4619      	mov	r1, r3
 80031d8:	7c7b      	ldrb	r3, [r7, #17]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	440b      	add	r3, r1
 80031de:	4313      	orrs	r3, r2
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_Init+0x40>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <HAL_Init+0x40>)
 80031f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_Init+0x40>)
 8003202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a07      	ldr	r2, [pc, #28]	; (800322c <HAL_Init+0x40>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003214:	2003      	movs	r0, #3
 8003216:	f000 f94f 	bl	80034b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800321a:	200f      	movs	r0, #15
 800321c:	f000 f808 	bl	8003230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003220:	f7ff f9dc 	bl	80025dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023c00 	.word	0x40023c00

08003230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_InitTick+0x54>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_InitTick+0x58>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003246:	fbb3 f3f1 	udiv	r3, r3, r1
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f967 	bl	8003522 <HAL_SYSTICK_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e00e      	b.n	800327c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b0f      	cmp	r3, #15
 8003262:	d80a      	bhi.n	800327a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003264:	2200      	movs	r2, #0
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f000 f92f 	bl	80034ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003270:	4a06      	ldr	r2, [pc, #24]	; (800328c <HAL_InitTick+0x5c>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e000      	b.n	800327c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000090 	.word	0x20000090
 8003288:	20000098 	.word	0x20000098
 800328c:	20000094 	.word	0x20000094

08003290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_IncTick+0x20>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_IncTick+0x24>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <HAL_IncTick+0x24>)
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000098 	.word	0x20000098
 80032b4:	20000528 	.word	0x20000528

080032b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return uwTick;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_GetTick+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000528 	.word	0x20000528

080032d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff ffee 	bl	80032b8 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d005      	beq.n	80032f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <HAL_Delay+0x44>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032f6:	bf00      	nop
 80032f8:	f7ff ffde 	bl	80032b8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	429a      	cmp	r2, r3
 8003306:	d8f7      	bhi.n	80032f8 <HAL_Delay+0x28>
  {
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000098 	.word	0x20000098

08003318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334a:	4a04      	ldr	r2, [pc, #16]	; (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	60d3      	str	r3, [r2, #12]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <__NVIC_GetPriorityGrouping+0x18>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	f003 0307 	and.w	r3, r3, #7
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	2b00      	cmp	r3, #0
 800338c:	db0b      	blt.n	80033a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	f003 021f 	and.w	r2, r3, #31
 8003394:	4907      	ldr	r1, [pc, #28]	; (80033b4 <__NVIC_EnableIRQ+0x38>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2001      	movs	r0, #1
 800339e:	fa00 f202 	lsl.w	r2, r0, r2
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	e000e100 	.word	0xe000e100

080033b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	db0a      	blt.n	80033e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	490c      	ldr	r1, [pc, #48]	; (8003404 <__NVIC_SetPriority+0x4c>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	0112      	lsls	r2, r2, #4
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	440b      	add	r3, r1
 80033dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e0:	e00a      	b.n	80033f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	4908      	ldr	r1, [pc, #32]	; (8003408 <__NVIC_SetPriority+0x50>)
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	3b04      	subs	r3, #4
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	440b      	add	r3, r1
 80033f6:	761a      	strb	r2, [r3, #24]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000e100 	.word	0xe000e100
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f1c3 0307 	rsb	r3, r3, #7
 8003426:	2b04      	cmp	r3, #4
 8003428:	bf28      	it	cs
 800342a:	2304      	movcs	r3, #4
 800342c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3304      	adds	r3, #4
 8003432:	2b06      	cmp	r3, #6
 8003434:	d902      	bls.n	800343c <NVIC_EncodePriority+0x30>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3b03      	subs	r3, #3
 800343a:	e000      	b.n	800343e <NVIC_EncodePriority+0x32>
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	401a      	ands	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003454:	f04f 31ff 	mov.w	r1, #4294967295
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	43d9      	mvns	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	4313      	orrs	r3, r2
         );
}
 8003466:	4618      	mov	r0, r3
 8003468:	3724      	adds	r7, #36	; 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003484:	d301      	bcc.n	800348a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003486:	2301      	movs	r3, #1
 8003488:	e00f      	b.n	80034aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <SysTick_Config+0x40>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003492:	210f      	movs	r1, #15
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	f7ff ff8e 	bl	80033b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <SysTick_Config+0x40>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <SysTick_Config+0x40>)
 80034a4:	2207      	movs	r2, #7
 80034a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	e000e010 	.word	0xe000e010

080034b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ff29 	bl	8003318 <__NVIC_SetPriorityGrouping>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e0:	f7ff ff3e 	bl	8003360 <__NVIC_GetPriorityGrouping>
 80034e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	6978      	ldr	r0, [r7, #20]
 80034ec:	f7ff ff8e 	bl	800340c <NVIC_EncodePriority>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff5d 	bl	80033b8 <__NVIC_SetPriority>
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff31 	bl	800337c <__NVIC_EnableIRQ>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffa2 	bl	8003474 <SysTick_Config>
 8003530:	4603      	mov	r3, r0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7ff feb6 	bl	80032b8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e099      	b.n	800368c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003578:	e00f      	b.n	800359a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800357a:	f7ff fe9d 	bl	80032b8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b05      	cmp	r3, #5
 8003586:	d908      	bls.n	800359a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2203      	movs	r2, #3
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e078      	b.n	800368c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e8      	bne.n	800357a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4b38      	ldr	r3, [pc, #224]	; (8003694 <HAL_DMA_Init+0x158>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d107      	bne.n	8003604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	4313      	orrs	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0307 	bic.w	r3, r3, #7
 800361a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b04      	cmp	r3, #4
 800362c:	d117      	bne.n	800365e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00e      	beq.n	800365e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fb01 	bl	8003c48 <DMA_CheckFifoParam>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800365a:	2301      	movs	r3, #1
 800365c:	e016      	b.n	800368c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fab8 	bl	8003bdc <DMA_CalcBaseAndBitshift>
 800366c:	4603      	mov	r3, r0
 800366e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	223f      	movs	r2, #63	; 0x3f
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	f010803f 	.word	0xf010803f

08003698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_DMA_Start_IT+0x26>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e040      	b.n	8003740 <HAL_DMA_Start_IT+0xa8>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d12f      	bne.n	8003732 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fa4a 	bl	8003b80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	223f      	movs	r2, #63	; 0x3f
 80036f2:	409a      	lsls	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0216 	orr.w	r2, r2, #22
 8003706:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0208 	orr.w	r2, r2, #8
 800371e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e005      	b.n	800373e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800373a:	2302      	movs	r3, #2
 800373c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800373e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003756:	f7ff fdaf 	bl	80032b8 <HAL_GetTick>
 800375a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d008      	beq.n	800377a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2280      	movs	r2, #128	; 0x80
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e052      	b.n	8003820 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0216 	bic.w	r2, r2, #22
 8003788:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003798:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_DMA_Abort+0x62>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0208 	bic.w	r2, r2, #8
 80037b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ca:	e013      	b.n	80037f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037cc:	f7ff fd74 	bl	80032b8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b05      	cmp	r3, #5
 80037d8:	d90c      	bls.n	80037f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2203      	movs	r2, #3
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e015      	b.n	8003820 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e4      	bne.n	80037cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	223f      	movs	r2, #63	; 0x3f
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d004      	beq.n	8003846 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e00c      	b.n	8003860 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2205      	movs	r2, #5
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003878:	4b8e      	ldr	r3, [pc, #568]	; (8003ab4 <HAL_DMA_IRQHandler+0x248>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a8e      	ldr	r2, [pc, #568]	; (8003ab8 <HAL_DMA_IRQHandler+0x24c>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	2208      	movs	r2, #8
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01a      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	2208      	movs	r2, #8
 80038c6:	409a      	lsls	r2, r3
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2201      	movs	r2, #1
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	2201      	movs	r2, #1
 80038fc:	409a      	lsls	r2, r3
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	2204      	movs	r2, #4
 8003914:	409a      	lsls	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2204      	movs	r2, #4
 8003932:	409a      	lsls	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0204 	orr.w	r2, r3, #4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	2210      	movs	r2, #16
 800394a:	409a      	lsls	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d043      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03c      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2210      	movs	r2, #16
 8003968:	409a      	lsls	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d018      	beq.n	80039ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d024      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
 800399a:	e01f      	b.n	80039dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01b      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e016      	b.n	80039dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0208 	bic.w	r2, r2, #8
 80039ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2220      	movs	r2, #32
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 808f 	beq.w	8003b0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8087 	beq.w	8003b0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	2220      	movs	r2, #32
 8003a04:	409a      	lsls	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d136      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0216 	bic.w	r2, r2, #22
 8003a24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x1da>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0208 	bic.w	r2, r2, #8
 8003a54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	223f      	movs	r2, #63	; 0x3f
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d07e      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
        }
        return;
 8003a82:	e079      	b.n	8003b78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01d      	beq.n	8003ace <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d031      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e02c      	b.n	8003b0c <HAL_DMA_IRQHandler+0x2a0>
 8003ab2:	bf00      	nop
 8003ab4:	20000090 	.word	0x20000090
 8003ab8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d023      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
 8003acc:	e01e      	b.n	8003b0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0210 	bic.w	r2, r2, #16
 8003aea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d032      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d022      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2205      	movs	r2, #5
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d307      	bcc.n	8003b54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f2      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x2cc>
 8003b52:	e000      	b.n	8003b56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
 8003b76:	e000      	b.n	8003b7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b78:	bf00      	nop
    }
  }
}
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d108      	bne.n	8003bc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bbe:	e007      	b.n	8003bd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	60da      	str	r2, [r3, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	3b10      	subs	r3, #16
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <DMA_CalcBaseAndBitshift+0x64>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bf6:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <DMA_CalcBaseAndBitshift+0x68>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d909      	bls.n	8003c1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c1c:	e007      	b.n	8003c2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	aaaaaaab 	.word	0xaaaaaaab
 8003c44:	0800c834 	.word	0x0800c834

08003c48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d11f      	bne.n	8003ca2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d856      	bhi.n	8003d16 <DMA_CheckFifoParam+0xce>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <DMA_CheckFifoParam+0x28>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c93 	.word	0x08003c93
 8003c78:	08003c81 	.word	0x08003c81
 8003c7c:	08003d17 	.word	0x08003d17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d046      	beq.n	8003d1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c90:	e043      	b.n	8003d1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c9a:	d140      	bne.n	8003d1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca0:	e03d      	b.n	8003d1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	d121      	bne.n	8003cf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d837      	bhi.n	8003d22 <DMA_CheckFifoParam+0xda>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <DMA_CheckFifoParam+0x70>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003ccf 	.word	0x08003ccf
 8003cc0:	08003cc9 	.word	0x08003cc9
 8003cc4:	08003ce1 	.word	0x08003ce1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e030      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d025      	beq.n	8003d26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cde:	e022      	b.n	8003d26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ce8:	d11f      	bne.n	8003d2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cee:	e01c      	b.n	8003d2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d903      	bls.n	8003cfe <DMA_CheckFifoParam+0xb6>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d003      	beq.n	8003d04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cfc:	e018      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
      break;
 8003d02:	e015      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	e00b      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d16:	bf00      	nop
 8003d18:	e00a      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e008      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e006      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;
 8003d22:	bf00      	nop
 8003d24:	e004      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;
 8003d26:	bf00      	nop
 8003d28:	e002      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
      break;
 8003d2e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop

08003d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	; 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e159      	b.n	8004010 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	f040 8148 	bne.w	800400a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d005      	beq.n	8003d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d130      	bne.n	8003df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 0201 	and.w	r2, r3, #1
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d017      	beq.n	8003e30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d123      	bne.n	8003e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3208      	adds	r2, #8
 8003e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	220f      	movs	r2, #15
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	08da      	lsrs	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3208      	adds	r2, #8
 8003e7e:	69b9      	ldr	r1, [r7, #24]
 8003e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	2203      	movs	r2, #3
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0203 	and.w	r2, r3, #3
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80a2 	beq.w	800400a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	4b57      	ldr	r3, [pc, #348]	; (8004028 <HAL_GPIO_Init+0x2e8>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	4a56      	ldr	r2, [pc, #344]	; (8004028 <HAL_GPIO_Init+0x2e8>)
 8003ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed6:	4b54      	ldr	r3, [pc, #336]	; (8004028 <HAL_GPIO_Init+0x2e8>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ee2:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_GPIO_Init+0x2ec>)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	3302      	adds	r3, #2
 8003eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	220f      	movs	r2, #15
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a49      	ldr	r2, [pc, #292]	; (8004030 <HAL_GPIO_Init+0x2f0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d019      	beq.n	8003f42 <HAL_GPIO_Init+0x202>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a48      	ldr	r2, [pc, #288]	; (8004034 <HAL_GPIO_Init+0x2f4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <HAL_GPIO_Init+0x1fe>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a47      	ldr	r2, [pc, #284]	; (8004038 <HAL_GPIO_Init+0x2f8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00d      	beq.n	8003f3a <HAL_GPIO_Init+0x1fa>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a46      	ldr	r2, [pc, #280]	; (800403c <HAL_GPIO_Init+0x2fc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <HAL_GPIO_Init+0x1f6>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a45      	ldr	r2, [pc, #276]	; (8004040 <HAL_GPIO_Init+0x300>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_GPIO_Init+0x1f2>
 8003f2e:	2304      	movs	r3, #4
 8003f30:	e008      	b.n	8003f44 <HAL_GPIO_Init+0x204>
 8003f32:	2307      	movs	r3, #7
 8003f34:	e006      	b.n	8003f44 <HAL_GPIO_Init+0x204>
 8003f36:	2303      	movs	r3, #3
 8003f38:	e004      	b.n	8003f44 <HAL_GPIO_Init+0x204>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e002      	b.n	8003f44 <HAL_GPIO_Init+0x204>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_GPIO_Init+0x204>
 8003f42:	2300      	movs	r3, #0
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	f002 0203 	and.w	r2, r2, #3
 8003f4a:	0092      	lsls	r2, r2, #2
 8003f4c:	4093      	lsls	r3, r2
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f54:	4935      	ldr	r1, [pc, #212]	; (800402c <HAL_GPIO_Init+0x2ec>)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f86:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f8c:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fb0:	4a24      	ldr	r2, [pc, #144]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fda:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fe0:	4b18      	ldr	r3, [pc, #96]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004004:	4a0f      	ldr	r2, [pc, #60]	; (8004044 <HAL_GPIO_Init+0x304>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b0f      	cmp	r3, #15
 8004014:	f67f aea2 	bls.w	8003d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3724      	adds	r7, #36	; 0x24
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800
 800402c:	40013800 	.word	0x40013800
 8004030:	40020000 	.word	0x40020000
 8004034:	40020400 	.word	0x40020400
 8004038:	40020800 	.word	0x40020800
 800403c:	40020c00 	.word	0x40020c00
 8004040:	40021000 	.word	0x40021000
 8004044:	40013c00 	.word	0x40013c00

08004048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e001      	b.n	800406a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004088:	787b      	ldrb	r3, [r7, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004094:	e003      	b.n	800409e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	041a      	lsls	r2, r3, #16
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	619a      	str	r2, [r3, #24]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e12b      	b.n	8004316 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fe f918 	bl	8002308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2224      	movs	r2, #36	; 0x24
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800410e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004110:	f001 fbbc 	bl	800588c <HAL_RCC_GetPCLK1Freq>
 8004114:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4a81      	ldr	r2, [pc, #516]	; (8004320 <HAL_I2C_Init+0x274>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d807      	bhi.n	8004130 <HAL_I2C_Init+0x84>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a80      	ldr	r2, [pc, #512]	; (8004324 <HAL_I2C_Init+0x278>)
 8004124:	4293      	cmp	r3, r2
 8004126:	bf94      	ite	ls
 8004128:	2301      	movls	r3, #1
 800412a:	2300      	movhi	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e006      	b.n	800413e <HAL_I2C_Init+0x92>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a7d      	ldr	r2, [pc, #500]	; (8004328 <HAL_I2C_Init+0x27c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	bf94      	ite	ls
 8004138:	2301      	movls	r3, #1
 800413a:	2300      	movhi	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e0e7      	b.n	8004316 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4a78      	ldr	r2, [pc, #480]	; (800432c <HAL_I2C_Init+0x280>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	0c9b      	lsrs	r3, r3, #18
 8004150:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a6a      	ldr	r2, [pc, #424]	; (8004320 <HAL_I2C_Init+0x274>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d802      	bhi.n	8004180 <HAL_I2C_Init+0xd4>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	3301      	adds	r3, #1
 800417e:	e009      	b.n	8004194 <HAL_I2C_Init+0xe8>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	4a69      	ldr	r2, [pc, #420]	; (8004330 <HAL_I2C_Init+0x284>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	099b      	lsrs	r3, r3, #6
 8004192:	3301      	adds	r3, #1
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	430b      	orrs	r3, r1
 800419a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	495c      	ldr	r1, [pc, #368]	; (8004320 <HAL_I2C_Init+0x274>)
 80041b0:	428b      	cmp	r3, r1
 80041b2:	d819      	bhi.n	80041e8 <HAL_I2C_Init+0x13c>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1e59      	subs	r1, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fbb1 f3f3 	udiv	r3, r1, r3
 80041c2:	1c59      	adds	r1, r3, #1
 80041c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041c8:	400b      	ands	r3, r1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_I2C_Init+0x138>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1e59      	subs	r1, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e2:	e051      	b.n	8004288 <HAL_I2C_Init+0x1dc>
 80041e4:	2304      	movs	r3, #4
 80041e6:	e04f      	b.n	8004288 <HAL_I2C_Init+0x1dc>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d111      	bne.n	8004214 <HAL_I2C_Init+0x168>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e58      	subs	r0, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	440b      	add	r3, r1
 80041fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004202:	3301      	adds	r3, #1
 8004204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	e012      	b.n	800423a <HAL_I2C_Init+0x18e>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1e58      	subs	r0, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6859      	ldr	r1, [r3, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	0099      	lsls	r1, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	fbb0 f3f3 	udiv	r3, r0, r3
 800422a:	3301      	adds	r3, #1
 800422c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004230:	2b00      	cmp	r3, #0
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_Init+0x196>
 800423e:	2301      	movs	r3, #1
 8004240:	e022      	b.n	8004288 <HAL_I2C_Init+0x1dc>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10e      	bne.n	8004268 <HAL_I2C_Init+0x1bc>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1e58      	subs	r0, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6859      	ldr	r1, [r3, #4]
 8004252:	460b      	mov	r3, r1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	440b      	add	r3, r1
 8004258:	fbb0 f3f3 	udiv	r3, r0, r3
 800425c:	3301      	adds	r3, #1
 800425e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004266:	e00f      	b.n	8004288 <HAL_I2C_Init+0x1dc>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1e58      	subs	r0, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6859      	ldr	r1, [r3, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	0099      	lsls	r1, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	fbb0 f3f3 	udiv	r3, r0, r3
 800427e:	3301      	adds	r3, #1
 8004280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	6809      	ldr	r1, [r1, #0]
 800428c:	4313      	orrs	r3, r2
 800428e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6911      	ldr	r1, [r2, #16]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68d2      	ldr	r2, [r2, #12]
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	000186a0 	.word	0x000186a0
 8004324:	001e847f 	.word	0x001e847f
 8004328:	003d08ff 	.word	0x003d08ff
 800432c:	431bde83 	.word	0x431bde83
 8004330:	10624dd3 	.word	0x10624dd3

08004334 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800434e:	f7fe ffb3 	bl	80032b8 <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b20      	cmp	r3, #32
 800435e:	f040 80d9 	bne.w	8004514 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	2319      	movs	r3, #25
 8004368:	2201      	movs	r2, #1
 800436a:	496d      	ldr	r1, [pc, #436]	; (8004520 <HAL_I2C_Mem_Write+0x1ec>)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fc7f 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
 800437a:	e0cc      	b.n	8004516 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_I2C_Mem_Write+0x56>
 8004386:	2302      	movs	r3, #2
 8004388:	e0c5      	b.n	8004516 <HAL_I2C_Mem_Write+0x1e2>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b01      	cmp	r3, #1
 800439e:	d007      	beq.n	80043b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2221      	movs	r2, #33	; 0x21
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2240      	movs	r2, #64	; 0x40
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a3a      	ldr	r2, [r7, #32]
 80043da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a4d      	ldr	r2, [pc, #308]	; (8004524 <HAL_I2C_Mem_Write+0x1f0>)
 80043f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043f2:	88f8      	ldrh	r0, [r7, #6]
 80043f4:	893a      	ldrh	r2, [r7, #8]
 80043f6:	8979      	ldrh	r1, [r7, #10]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	4603      	mov	r3, r0
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fab6 	bl	8004974 <I2C_RequestMemoryWrite>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d052      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e081      	b.n	8004516 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fd00 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00d      	beq.n	800443e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2b04      	cmp	r3, #4
 8004428:	d107      	bne.n	800443a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004438:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e06b      	b.n	8004516 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b04      	cmp	r3, #4
 800447a:	d11b      	bne.n	80044b4 <HAL_I2C_Mem_Write+0x180>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004480:	2b00      	cmp	r3, #0
 8004482:	d017      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	781a      	ldrb	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1aa      	bne.n	8004412 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fcec 	bl	8004e9e <I2C_WaitOnBTFFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00d      	beq.n	80044e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d107      	bne.n	80044e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e016      	b.n	8004516 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	e000      	b.n	8004516 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004514:	2302      	movs	r3, #2
  }
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	00100002 	.word	0x00100002
 8004524:	ffff0000 	.word	0xffff0000

08004528 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08c      	sub	sp, #48	; 0x30
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	4608      	mov	r0, r1
 8004532:	4611      	mov	r1, r2
 8004534:	461a      	mov	r2, r3
 8004536:	4603      	mov	r3, r0
 8004538:	817b      	strh	r3, [r7, #10]
 800453a:	460b      	mov	r3, r1
 800453c:	813b      	strh	r3, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004542:	f7fe feb9 	bl	80032b8 <HAL_GetTick>
 8004546:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b20      	cmp	r3, #32
 8004552:	f040 8208 	bne.w	8004966 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	2319      	movs	r3, #25
 800455c:	2201      	movs	r2, #1
 800455e:	497b      	ldr	r1, [pc, #492]	; (800474c <HAL_I2C_Mem_Read+0x224>)
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fb85 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800456c:	2302      	movs	r3, #2
 800456e:	e1fb      	b.n	8004968 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_I2C_Mem_Read+0x56>
 800457a:	2302      	movs	r3, #2
 800457c:	e1f4      	b.n	8004968 <HAL_I2C_Mem_Read+0x440>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b01      	cmp	r3, #1
 8004592:	d007      	beq.n	80045a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2222      	movs	r2, #34	; 0x22
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2240      	movs	r2, #64	; 0x40
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80045d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4a5b      	ldr	r2, [pc, #364]	; (8004750 <HAL_I2C_Mem_Read+0x228>)
 80045e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045e6:	88f8      	ldrh	r0, [r7, #6]
 80045e8:	893a      	ldrh	r2, [r7, #8]
 80045ea:	8979      	ldrh	r1, [r7, #10]
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	4603      	mov	r3, r0
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fa52 	bl	8004aa0 <I2C_RequestMemoryRead>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e1b0      	b.n	8004968 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d113      	bne.n	8004636 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460e:	2300      	movs	r3, #0
 8004610:	623b      	str	r3, [r7, #32]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	623b      	str	r3, [r7, #32]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	623b      	str	r3, [r7, #32]
 8004622:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e184      	b.n	8004940 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	2b01      	cmp	r3, #1
 800463c:	d11b      	bne.n	8004676 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	e164      	b.n	8004940 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	2b02      	cmp	r3, #2
 800467c:	d11b      	bne.n	80046b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800469c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	e144      	b.n	8004940 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046cc:	e138      	b.n	8004940 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	f200 80f1 	bhi.w	80048ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d123      	bne.n	8004728 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fc1b 	bl	8004f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e139      	b.n	8004968 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004726:	e10b      	b.n	8004940 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472c:	2b02      	cmp	r3, #2
 800472e:	d14e      	bne.n	80047ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	2200      	movs	r2, #0
 8004738:	4906      	ldr	r1, [pc, #24]	; (8004754 <HAL_I2C_Mem_Read+0x22c>)
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fa98 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e10e      	b.n	8004968 <HAL_I2C_Mem_Read+0x440>
 800474a:	bf00      	nop
 800474c:	00100002 	.word	0x00100002
 8004750:	ffff0000 	.word	0xffff0000
 8004754:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047cc:	e0b8      	b.n	8004940 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d4:	2200      	movs	r2, #0
 80047d6:	4966      	ldr	r1, [pc, #408]	; (8004970 <HAL_I2C_Mem_Read+0x448>)
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fa49 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0bf      	b.n	8004968 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	2200      	movs	r2, #0
 8004832:	494f      	ldr	r1, [pc, #316]	; (8004970 <HAL_I2C_Mem_Read+0x448>)
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fa1b 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e091      	b.n	8004968 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048b8:	e042      	b.n	8004940 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fb2e 	bl	8004f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e04c      	b.n	8004968 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b04      	cmp	r3, #4
 800490c:	d118      	bne.n	8004940 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	f47f aec2 	bne.w	80046ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	e000      	b.n	8004968 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
  }
}
 8004968:	4618      	mov	r0, r3
 800496a:	3728      	adds	r7, #40	; 0x28
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	00010004 	.word	0x00010004

08004974 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	4608      	mov	r0, r1
 800497e:	4611      	mov	r1, r2
 8004980:	461a      	mov	r2, r3
 8004982:	4603      	mov	r3, r0
 8004984:	817b      	strh	r3, [r7, #10]
 8004986:	460b      	mov	r3, r1
 8004988:	813b      	strh	r3, [r7, #8]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800499c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f960 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c4:	d103      	bne.n	80049ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e05f      	b.n	8004a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049d2:	897b      	ldrh	r3, [r7, #10]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	492d      	ldr	r1, [pc, #180]	; (8004a9c <I2C_RequestMemoryWrite+0x128>)
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f998 	bl	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e04c      	b.n	8004a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a10:	6a39      	ldr	r1, [r7, #32]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 fa02 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00d      	beq.n	8004a3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d107      	bne.n	8004a36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e02b      	b.n	8004a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d105      	bne.n	8004a4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a40:	893b      	ldrh	r3, [r7, #8]
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	611a      	str	r2, [r3, #16]
 8004a4a:	e021      	b.n	8004a90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a4c:	893b      	ldrh	r3, [r7, #8]
 8004a4e:	0a1b      	lsrs	r3, r3, #8
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5c:	6a39      	ldr	r1, [r7, #32]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f9dc 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00d      	beq.n	8004a86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d107      	bne.n	8004a82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e005      	b.n	8004a92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a86:	893b      	ldrh	r3, [r7, #8]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	00010002 	.word	0x00010002

08004aa0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	4611      	mov	r1, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	817b      	strh	r3, [r7, #10]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	813b      	strh	r3, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f8c2 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00d      	beq.n	8004b0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b00:	d103      	bne.n	8004b0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e0aa      	b.n	8004c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b0e:	897b      	ldrh	r3, [r7, #10]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	4952      	ldr	r1, [pc, #328]	; (8004c6c <I2C_RequestMemoryRead+0x1cc>)
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f8fa 	bl	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e097      	b.n	8004c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4c:	6a39      	ldr	r1, [r7, #32]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f964 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00d      	beq.n	8004b76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d107      	bne.n	8004b72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e076      	b.n	8004c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b7c:	893b      	ldrh	r3, [r7, #8]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	611a      	str	r2, [r3, #16]
 8004b86:	e021      	b.n	8004bcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b88:	893b      	ldrh	r3, [r7, #8]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b98:	6a39      	ldr	r1, [r7, #32]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f93e 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d107      	bne.n	8004bbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e050      	b.n	8004c64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc2:	893b      	ldrh	r3, [r7, #8]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bce:	6a39      	ldr	r1, [r7, #32]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f923 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00d      	beq.n	8004bf8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d107      	bne.n	8004bf4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e035      	b.n	8004c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f82b 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00d      	beq.n	8004c3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2e:	d103      	bne.n	8004c38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e013      	b.n	8004c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c3c:	897b      	ldrh	r3, [r7, #10]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	6a3a      	ldr	r2, [r7, #32]
 8004c50:	4906      	ldr	r1, [pc, #24]	; (8004c6c <I2C_RequestMemoryRead+0x1cc>)
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f863 	bl	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	00010002 	.word	0x00010002

08004c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c80:	e025      	b.n	8004cce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d021      	beq.n	8004cce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8a:	f7fe fb15 	bl	80032b8 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d116      	bne.n	8004cce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f043 0220 	orr.w	r2, r3, #32
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e023      	b.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d10d      	bne.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	e00c      	b.n	8004d0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bf0c      	ite	eq
 8004d06:	2301      	moveq	r3, #1
 8004d08:	2300      	movne	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d0b6      	beq.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d2c:	e051      	b.n	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3c:	d123      	bne.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f043 0204 	orr.w	r2, r3, #4
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e046      	b.n	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d021      	beq.n	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8e:	f7fe fa93 	bl	80032b8 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d302      	bcc.n	8004da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d116      	bne.n	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f043 0220 	orr.w	r2, r3, #32
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e020      	b.n	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d10c      	bne.n	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	43da      	mvns	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4013      	ands	r3, r2
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e00b      	b.n	8004e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d18d      	bne.n	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e28:	e02d      	b.n	8004e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f8ce 	bl	8004fcc <I2C_IsAcknowledgeFailed>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e02d      	b.n	8004e96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d021      	beq.n	8004e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fe fa39 	bl	80032b8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d116      	bne.n	8004e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e007      	b.n	8004e96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e90:	2b80      	cmp	r3, #128	; 0x80
 8004e92:	d1ca      	bne.n	8004e2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eaa:	e02d      	b.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f88d 	bl	8004fcc <I2C_IsAcknowledgeFailed>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e02d      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d021      	beq.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec4:	f7fe f9f8 	bl	80032b8 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d302      	bcc.n	8004eda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d116      	bne.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e007      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d1ca      	bne.n	8004eac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f2c:	e042      	b.n	8004fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d119      	bne.n	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0210 	mvn.w	r2, #16
 8004f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e029      	b.n	8004fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f70:	f7fe f9a2 	bl	80032b8 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d302      	bcc.n	8004f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d116      	bne.n	8004fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	f043 0220 	orr.w	r2, r3, #32
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e007      	b.n	8004fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d1b5      	bne.n	8004f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe2:	d11b      	bne.n	800501c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	f043 0204 	orr.w	r2, r3, #4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e267      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d075      	beq.n	8005136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800504a:	4b88      	ldr	r3, [pc, #544]	; (800526c <HAL_RCC_OscConfig+0x240>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b04      	cmp	r3, #4
 8005054:	d00c      	beq.n	8005070 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005056:	4b85      	ldr	r3, [pc, #532]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800505e:	2b08      	cmp	r3, #8
 8005060:	d112      	bne.n	8005088 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005062:	4b82      	ldr	r3, [pc, #520]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800506e:	d10b      	bne.n	8005088 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005070:	4b7e      	ldr	r3, [pc, #504]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d05b      	beq.n	8005134 <HAL_RCC_OscConfig+0x108>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d157      	bne.n	8005134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e242      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d106      	bne.n	80050a0 <HAL_RCC_OscConfig+0x74>
 8005092:	4b76      	ldr	r3, [pc, #472]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a75      	ldr	r2, [pc, #468]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e01d      	b.n	80050dc <HAL_RCC_OscConfig+0xb0>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCC_OscConfig+0x98>
 80050aa:	4b70      	ldr	r3, [pc, #448]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a6f      	ldr	r2, [pc, #444]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80050b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4b6d      	ldr	r3, [pc, #436]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a6c      	ldr	r2, [pc, #432]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e00b      	b.n	80050dc <HAL_RCC_OscConfig+0xb0>
 80050c4:	4b69      	ldr	r3, [pc, #420]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a68      	ldr	r2, [pc, #416]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	4b66      	ldr	r3, [pc, #408]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a65      	ldr	r2, [pc, #404]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80050d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7fe f8e8 	bl	80032b8 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ec:	f7fe f8e4 	bl	80032b8 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e207      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	4b5b      	ldr	r3, [pc, #364]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0xc0>
 800510a:	e014      	b.n	8005136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fe f8d4 	bl	80032b8 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005114:	f7fe f8d0 	bl	80032b8 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e1f3      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005126:	4b51      	ldr	r3, [pc, #324]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0xe8>
 8005132:	e000      	b.n	8005136 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d063      	beq.n	800520a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005142:	4b4a      	ldr	r3, [pc, #296]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800514e:	4b47      	ldr	r3, [pc, #284]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005156:	2b08      	cmp	r3, #8
 8005158:	d11c      	bne.n	8005194 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515a:	4b44      	ldr	r3, [pc, #272]	; (800526c <HAL_RCC_OscConfig+0x240>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d116      	bne.n	8005194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005166:	4b41      	ldr	r3, [pc, #260]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <HAL_RCC_OscConfig+0x152>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d001      	beq.n	800517e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e1c7      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517e:	4b3b      	ldr	r3, [pc, #236]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4937      	ldr	r1, [pc, #220]	; (800526c <HAL_RCC_OscConfig+0x240>)
 800518e:	4313      	orrs	r3, r2
 8005190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005192:	e03a      	b.n	800520a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d020      	beq.n	80051de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800519c:	4b34      	ldr	r3, [pc, #208]	; (8005270 <HAL_RCC_OscConfig+0x244>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fe f889 	bl	80032b8 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051aa:	f7fe f885 	bl	80032b8 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e1a8      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051bc:	4b2b      	ldr	r3, [pc, #172]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c8:	4b28      	ldr	r3, [pc, #160]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4925      	ldr	r1, [pc, #148]	; (800526c <HAL_RCC_OscConfig+0x240>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	600b      	str	r3, [r1, #0]
 80051dc:	e015      	b.n	800520a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051de:	4b24      	ldr	r3, [pc, #144]	; (8005270 <HAL_RCC_OscConfig+0x244>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e4:	f7fe f868 	bl	80032b8 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ec:	f7fe f864 	bl	80032b8 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e187      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fe:	4b1b      	ldr	r3, [pc, #108]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d036      	beq.n	8005284 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d016      	beq.n	800524c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800521e:	4b15      	ldr	r3, [pc, #84]	; (8005274 <HAL_RCC_OscConfig+0x248>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005224:	f7fe f848 	bl	80032b8 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800522c:	f7fe f844 	bl	80032b8 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e167      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <HAL_RCC_OscConfig+0x240>)
 8005240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x200>
 800524a:	e01b      	b.n	8005284 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <HAL_RCC_OscConfig+0x248>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005252:	f7fe f831 	bl	80032b8 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005258:	e00e      	b.n	8005278 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800525a:	f7fe f82d 	bl	80032b8 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d907      	bls.n	8005278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e150      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
 800526c:	40023800 	.word	0x40023800
 8005270:	42470000 	.word	0x42470000
 8005274:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005278:	4b88      	ldr	r3, [pc, #544]	; (800549c <HAL_RCC_OscConfig+0x470>)
 800527a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1ea      	bne.n	800525a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 8097 	beq.w	80053c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005292:	2300      	movs	r3, #0
 8005294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005296:	4b81      	ldr	r3, [pc, #516]	; (800549c <HAL_RCC_OscConfig+0x470>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10f      	bne.n	80052c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	4b7d      	ldr	r3, [pc, #500]	; (800549c <HAL_RCC_OscConfig+0x470>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	4a7c      	ldr	r2, [pc, #496]	; (800549c <HAL_RCC_OscConfig+0x470>)
 80052ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b0:	6413      	str	r3, [r2, #64]	; 0x40
 80052b2:	4b7a      	ldr	r3, [pc, #488]	; (800549c <HAL_RCC_OscConfig+0x470>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052be:	2301      	movs	r3, #1
 80052c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c2:	4b77      	ldr	r3, [pc, #476]	; (80054a0 <HAL_RCC_OscConfig+0x474>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d118      	bne.n	8005300 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ce:	4b74      	ldr	r3, [pc, #464]	; (80054a0 <HAL_RCC_OscConfig+0x474>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a73      	ldr	r2, [pc, #460]	; (80054a0 <HAL_RCC_OscConfig+0x474>)
 80052d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052da:	f7fd ffed 	bl	80032b8 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e2:	f7fd ffe9 	bl	80032b8 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e10c      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f4:	4b6a      	ldr	r3, [pc, #424]	; (80054a0 <HAL_RCC_OscConfig+0x474>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d106      	bne.n	8005316 <HAL_RCC_OscConfig+0x2ea>
 8005308:	4b64      	ldr	r3, [pc, #400]	; (800549c <HAL_RCC_OscConfig+0x470>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	4a63      	ldr	r2, [pc, #396]	; (800549c <HAL_RCC_OscConfig+0x470>)
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	6713      	str	r3, [r2, #112]	; 0x70
 8005314:	e01c      	b.n	8005350 <HAL_RCC_OscConfig+0x324>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b05      	cmp	r3, #5
 800531c:	d10c      	bne.n	8005338 <HAL_RCC_OscConfig+0x30c>
 800531e:	4b5f      	ldr	r3, [pc, #380]	; (800549c <HAL_RCC_OscConfig+0x470>)
 8005320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005322:	4a5e      	ldr	r2, [pc, #376]	; (800549c <HAL_RCC_OscConfig+0x470>)
 8005324:	f043 0304 	orr.w	r3, r3, #4
 8005328:	6713      	str	r3, [r2, #112]	; 0x70
 800532a:	4b5c      	ldr	r3, [pc, #368]	; (800549c <HAL_RCC_OscConfig+0x470>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	4a5b      	ldr	r2, [pc, #364]	; (800549c <HAL_RCC_OscConfig+0x470>)
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	6713      	str	r3, [r2, #112]	; 0x70
 8005336:	e00b      	b.n	8005350 <HAL_RCC_OscConfig+0x324>
 8005338:	4b58      	ldr	r3, [pc, #352]	; (800549c <HAL_RCC_OscConfig+0x470>)
 800533a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533c:	4a57      	ldr	r2, [pc, #348]	; (800549c <HAL_RCC_OscConfig+0x470>)
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	6713      	str	r3, [r2, #112]	; 0x70
 8005344:	4b55      	ldr	r3, [pc, #340]	; (800549c <HAL_RCC_OscConfig+0x470>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	4a54      	ldr	r2, [pc, #336]	; (800549c <HAL_RCC_OscConfig+0x470>)
 800534a:	f023 0304 	bic.w	r3, r3, #4
 800534e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d015      	beq.n	8005384 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005358:	f7fd ffae 	bl	80032b8 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535e:	e00a      	b.n	8005376 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005360:	f7fd ffaa 	bl	80032b8 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	; 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0cb      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005376:	4b49      	ldr	r3, [pc, #292]	; (800549c <HAL_RCC_OscConfig+0x470>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0ee      	beq.n	8005360 <HAL_RCC_OscConfig+0x334>
 8005382:	e014      	b.n	80053ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005384:	f7fd ff98 	bl	80032b8 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800538c:	f7fd ff94 	bl	80032b8 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	; 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e0b5      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a2:	4b3e      	ldr	r3, [pc, #248]	; (800549c <HAL_RCC_OscConfig+0x470>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1ee      	bne.n	800538c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b4:	4b39      	ldr	r3, [pc, #228]	; (800549c <HAL_RCC_OscConfig+0x470>)
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	4a38      	ldr	r2, [pc, #224]	; (800549c <HAL_RCC_OscConfig+0x470>)
 80053ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a1 	beq.w	800550c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ca:	4b34      	ldr	r3, [pc, #208]	; (800549c <HAL_RCC_OscConfig+0x470>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d05c      	beq.n	8005490 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d141      	bne.n	8005462 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053de:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <HAL_RCC_OscConfig+0x478>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e4:	f7fd ff68 	bl	80032b8 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ec:	f7fd ff64 	bl	80032b8 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e087      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fe:	4b27      	ldr	r3, [pc, #156]	; (800549c <HAL_RCC_OscConfig+0x470>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f0      	bne.n	80053ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	019b      	lsls	r3, r3, #6
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	085b      	lsrs	r3, r3, #1
 8005422:	3b01      	subs	r3, #1
 8005424:	041b      	lsls	r3, r3, #16
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	061b      	lsls	r3, r3, #24
 800542e:	491b      	ldr	r1, [pc, #108]	; (800549c <HAL_RCC_OscConfig+0x470>)
 8005430:	4313      	orrs	r3, r2
 8005432:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005434:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <HAL_RCC_OscConfig+0x478>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543a:	f7fd ff3d 	bl	80032b8 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005442:	f7fd ff39 	bl	80032b8 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e05c      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005454:	4b11      	ldr	r3, [pc, #68]	; (800549c <HAL_RCC_OscConfig+0x470>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <HAL_RCC_OscConfig+0x416>
 8005460:	e054      	b.n	800550c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <HAL_RCC_OscConfig+0x478>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005468:	f7fd ff26 	bl	80032b8 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005470:	f7fd ff22 	bl	80032b8 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e045      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005482:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_RCC_OscConfig+0x470>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x444>
 800548e:	e03d      	b.n	800550c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d107      	bne.n	80054a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e038      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
 800549c:	40023800 	.word	0x40023800
 80054a0:	40007000 	.word	0x40007000
 80054a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054a8:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <HAL_RCC_OscConfig+0x4ec>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d028      	beq.n	8005508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d121      	bne.n	8005508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d11a      	bne.n	8005508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054d8:	4013      	ands	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d111      	bne.n	8005508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	3b01      	subs	r3, #1
 80054f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d107      	bne.n	8005508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005504:	429a      	cmp	r2, r3
 8005506:	d001      	beq.n	800550c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800

0800551c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0cc      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005530:	4b68      	ldr	r3, [pc, #416]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d90c      	bls.n	8005558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553e:	4b65      	ldr	r3, [pc, #404]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005546:	4b63      	ldr	r3, [pc, #396]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0b8      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d020      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005570:	4b59      	ldr	r3, [pc, #356]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a58      	ldr	r2, [pc, #352]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800557a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005588:	4b53      	ldr	r3, [pc, #332]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4a52      	ldr	r2, [pc, #328]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005594:	4b50      	ldr	r3, [pc, #320]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	494d      	ldr	r1, [pc, #308]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d044      	beq.n	800563c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d107      	bne.n	80055ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ba:	4b47      	ldr	r3, [pc, #284]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d119      	bne.n	80055fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e07f      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d003      	beq.n	80055da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d107      	bne.n	80055ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055da:	4b3f      	ldr	r3, [pc, #252]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e06f      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ea:	4b3b      	ldr	r3, [pc, #236]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e067      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055fa:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 0203 	bic.w	r2, r3, #3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	4934      	ldr	r1, [pc, #208]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	4313      	orrs	r3, r2
 800560a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800560c:	f7fd fe54 	bl	80032b8 <HAL_GetTick>
 8005610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005612:	e00a      	b.n	800562a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005614:	f7fd fe50 	bl	80032b8 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e04f      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 020c 	and.w	r2, r3, #12
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	429a      	cmp	r2, r3
 800563a:	d1eb      	bne.n	8005614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800563c:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d20c      	bcs.n	8005664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b22      	ldr	r3, [pc, #136]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005652:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e032      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005670:	4b19      	ldr	r3, [pc, #100]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4916      	ldr	r1, [pc, #88]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800568e:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	490e      	ldr	r1, [pc, #56]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056a2:	f000 f821 	bl	80056e8 <HAL_RCC_GetSysClockFreq>
 80056a6:	4602      	mov	r2, r0
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	490a      	ldr	r1, [pc, #40]	; (80056dc <HAL_RCC_ClockConfig+0x1c0>)
 80056b4:	5ccb      	ldrb	r3, [r1, r3]
 80056b6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ba:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <HAL_RCC_ClockConfig+0x1c4>)
 80056bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <HAL_RCC_ClockConfig+0x1c8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fd fdb4 	bl	8003230 <HAL_InitTick>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40023c00 	.word	0x40023c00
 80056d8:	40023800 	.word	0x40023800
 80056dc:	0800c81c 	.word	0x0800c81c
 80056e0:	20000090 	.word	0x20000090
 80056e4:	20000094 	.word	0x20000094

080056e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056ec:	b090      	sub	sp, #64	; 0x40
 80056ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	637b      	str	r3, [r7, #52]	; 0x34
 80056f4:	2300      	movs	r3, #0
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f8:	2300      	movs	r3, #0
 80056fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005700:	4b59      	ldr	r3, [pc, #356]	; (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 030c 	and.w	r3, r3, #12
 8005708:	2b08      	cmp	r3, #8
 800570a:	d00d      	beq.n	8005728 <HAL_RCC_GetSysClockFreq+0x40>
 800570c:	2b08      	cmp	r3, #8
 800570e:	f200 80a1 	bhi.w	8005854 <HAL_RCC_GetSysClockFreq+0x16c>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_RCC_GetSysClockFreq+0x34>
 8005716:	2b04      	cmp	r3, #4
 8005718:	d003      	beq.n	8005722 <HAL_RCC_GetSysClockFreq+0x3a>
 800571a:	e09b      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800571c:	4b53      	ldr	r3, [pc, #332]	; (800586c <HAL_RCC_GetSysClockFreq+0x184>)
 800571e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005720:	e09b      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005722:	4b53      	ldr	r3, [pc, #332]	; (8005870 <HAL_RCC_GetSysClockFreq+0x188>)
 8005724:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005726:	e098      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005728:	4b4f      	ldr	r3, [pc, #316]	; (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005732:	4b4d      	ldr	r3, [pc, #308]	; (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d028      	beq.n	8005790 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800573e:	4b4a      	ldr	r3, [pc, #296]	; (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	099b      	lsrs	r3, r3, #6
 8005744:	2200      	movs	r2, #0
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	627a      	str	r2, [r7, #36]	; 0x24
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005750:	2100      	movs	r1, #0
 8005752:	4b47      	ldr	r3, [pc, #284]	; (8005870 <HAL_RCC_GetSysClockFreq+0x188>)
 8005754:	fb03 f201 	mul.w	r2, r3, r1
 8005758:	2300      	movs	r3, #0
 800575a:	fb00 f303 	mul.w	r3, r0, r3
 800575e:	4413      	add	r3, r2
 8005760:	4a43      	ldr	r2, [pc, #268]	; (8005870 <HAL_RCC_GetSysClockFreq+0x188>)
 8005762:	fba0 1202 	umull	r1, r2, r0, r2
 8005766:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005768:	460a      	mov	r2, r1
 800576a:	62ba      	str	r2, [r7, #40]	; 0x28
 800576c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800576e:	4413      	add	r3, r2
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005774:	2200      	movs	r2, #0
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	61fa      	str	r2, [r7, #28]
 800577a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800577e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005782:	f7fb fa29 	bl	8000bd8 <__aeabi_uldivmod>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4613      	mov	r3, r2
 800578c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578e:	e053      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005790:	4b35      	ldr	r3, [pc, #212]	; (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	099b      	lsrs	r3, r3, #6
 8005796:	2200      	movs	r2, #0
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	617a      	str	r2, [r7, #20]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057a2:	f04f 0b00 	mov.w	fp, #0
 80057a6:	4652      	mov	r2, sl
 80057a8:	465b      	mov	r3, fp
 80057aa:	f04f 0000 	mov.w	r0, #0
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	0159      	lsls	r1, r3, #5
 80057b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b8:	0150      	lsls	r0, r2, #5
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	ebb2 080a 	subs.w	r8, r2, sl
 80057c2:	eb63 090b 	sbc.w	r9, r3, fp
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057da:	ebb2 0408 	subs.w	r4, r2, r8
 80057de:	eb63 0509 	sbc.w	r5, r3, r9
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	00eb      	lsls	r3, r5, #3
 80057ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057f0:	00e2      	lsls	r2, r4, #3
 80057f2:	4614      	mov	r4, r2
 80057f4:	461d      	mov	r5, r3
 80057f6:	eb14 030a 	adds.w	r3, r4, sl
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	eb45 030b 	adc.w	r3, r5, fp
 8005800:	607b      	str	r3, [r7, #4]
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800580e:	4629      	mov	r1, r5
 8005810:	028b      	lsls	r3, r1, #10
 8005812:	4621      	mov	r1, r4
 8005814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005818:	4621      	mov	r1, r4
 800581a:	028a      	lsls	r2, r1, #10
 800581c:	4610      	mov	r0, r2
 800581e:	4619      	mov	r1, r3
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	2200      	movs	r2, #0
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800582c:	f7fb f9d4 	bl	8000bd8 <__aeabi_uldivmod>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4613      	mov	r3, r2
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <HAL_RCC_GetSysClockFreq+0x180>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	3301      	adds	r3, #1
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005852:	e002      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <HAL_RCC_GetSysClockFreq+0x184>)
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800585c:	4618      	mov	r0, r3
 800585e:	3740      	adds	r7, #64	; 0x40
 8005860:	46bd      	mov	sp, r7
 8005862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005866:	bf00      	nop
 8005868:	40023800 	.word	0x40023800
 800586c:	00f42400 	.word	0x00f42400
 8005870:	017d7840 	.word	0x017d7840

08005874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005878:	4b03      	ldr	r3, [pc, #12]	; (8005888 <HAL_RCC_GetHCLKFreq+0x14>)
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	20000090 	.word	0x20000090

0800588c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005890:	f7ff fff0 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 8005894:	4602      	mov	r2, r0
 8005896:	4b05      	ldr	r3, [pc, #20]	; (80058ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	0a9b      	lsrs	r3, r3, #10
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	4903      	ldr	r1, [pc, #12]	; (80058b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058a2:	5ccb      	ldrb	r3, [r1, r3]
 80058a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40023800 	.word	0x40023800
 80058b0:	0800c82c 	.word	0x0800c82c

080058b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058b8:	f7ff ffdc 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 80058bc:	4602      	mov	r2, r0
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	0b5b      	lsrs	r3, r3, #13
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	4903      	ldr	r1, [pc, #12]	; (80058d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ca:	5ccb      	ldrb	r3, [r1, r3]
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40023800 	.word	0x40023800
 80058d8:	0800c82c 	.word	0x0800c82c

080058dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d105      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005900:	2b00      	cmp	r3, #0
 8005902:	d038      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005904:	4b68      	ldr	r3, [pc, #416]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800590a:	f7fd fcd5 	bl	80032b8 <HAL_GetTick>
 800590e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005910:	e008      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005912:	f7fd fcd1 	bl	80032b8 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e0bd      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005924:	4b61      	ldr	r3, [pc, #388]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f0      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	019b      	lsls	r3, r3, #6
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	071b      	lsls	r3, r3, #28
 8005942:	495a      	ldr	r1, [pc, #360]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800594a:	4b57      	ldr	r3, [pc, #348]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800594c:	2201      	movs	r2, #1
 800594e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005950:	f7fd fcb2 	bl	80032b8 <HAL_GetTick>
 8005954:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005956:	e008      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005958:	f7fd fcae 	bl	80032b8 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e09a      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800596a:	4b50      	ldr	r3, [pc, #320]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 8083 	beq.w	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	4b48      	ldr	r3, [pc, #288]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	4a47      	ldr	r2, [pc, #284]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005992:	6413      	str	r3, [r2, #64]	; 0x40
 8005994:	4b45      	ldr	r3, [pc, #276]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059a0:	4b43      	ldr	r3, [pc, #268]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a42      	ldr	r2, [pc, #264]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059aa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059ac:	f7fd fc84 	bl	80032b8 <HAL_GetTick>
 80059b0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059b4:	f7fd fc80 	bl	80032b8 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e06c      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059c6:	4b3a      	ldr	r3, [pc, #232]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059d2:	4b36      	ldr	r3, [pc, #216]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059da:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d02f      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d028      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059f0:	4b2e      	ldr	r3, [pc, #184]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059fa:	4b2e      	ldr	r3, [pc, #184]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a00:	4b2c      	ldr	r3, [pc, #176]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a06:	4a29      	ldr	r2, [pc, #164]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a0c:	4b27      	ldr	r3, [pc, #156]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d114      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a18:	f7fd fc4e 	bl	80032b8 <HAL_GetTick>
 8005a1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1e:	e00a      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a20:	f7fd fc4a 	bl	80032b8 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e034      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a36:	4b1d      	ldr	r3, [pc, #116]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0ee      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a4e:	d10d      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005a50:	4b16      	ldr	r3, [pc, #88]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	4911      	ldr	r1, [pc, #68]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	608b      	str	r3, [r1, #8]
 8005a6a:	e005      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4a0e      	ldr	r2, [pc, #56]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a76:	6093      	str	r3, [r2, #8]
 8005a78:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a84:	4909      	ldr	r1, [pc, #36]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	7d1a      	ldrb	r2, [r3, #20]
 8005a9a:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005a9c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	42470068 	.word	0x42470068
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40007000 	.word	0x40007000
 8005ab4:	42470e40 	.word	0x42470e40
 8005ab8:	424711e0 	.word	0x424711e0

08005abc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e066      	b.n	8005ba0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	7f5b      	ldrb	r3, [r3, #29]
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d105      	bne.n	8005ae8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fc fd4e 	bl	8002584 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	22ca      	movs	r2, #202	; 0xca
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2253      	movs	r2, #83	; 0x53
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa45 	bl	8005f8e <RTC_EnterInitMode>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d12c      	bne.n	8005b68 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b20:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6899      	ldr	r1, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	68d2      	ldr	r2, [r2, #12]
 8005b48:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6919      	ldr	r1, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	041a      	lsls	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa4c 	bl	8005ffc <RTC_ExitInitMode>
 8005b64:	4603      	mov	r3, r0
 8005b66:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d113      	bne.n	8005b96 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699a      	ldr	r2, [r3, #24]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	22ff      	movs	r2, #255	; 0xff
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	7f1b      	ldrb	r3, [r3, #28]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RTC_SetTime+0x1c>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e087      	b.n	8005cd4 <HAL_RTC_SetTime+0x12c>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d126      	bne.n	8005c24 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2200      	movs	r2, #0
 8005be8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fa29 	bl	8006046 <RTC_ByteToBcd2>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fa22 	bl	8006046 <RTC_ByteToBcd2>
 8005c02:	4603      	mov	r3, r0
 8005c04:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c06:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	789b      	ldrb	r3, [r3, #2]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fa1a 	bl	8006046 <RTC_ByteToBcd2>
 8005c12:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c14:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	78db      	ldrb	r3, [r3, #3]
 8005c1c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e018      	b.n	8005c56 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d102      	bne.n	8005c38 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2200      	movs	r2, #0
 8005c36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c44:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c4a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	78db      	ldrb	r3, [r3, #3]
 8005c50:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	22ca      	movs	r2, #202	; 0xca
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2253      	movs	r2, #83	; 0x53
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f991 	bl	8005f8e <RTC_EnterInitMode>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d120      	bne.n	8005cb8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c80:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c84:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6899      	ldr	r1, [r3, #8]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f9a4 	bl	8005ffc <RTC_ExitInitMode>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005cb8:	7cfb      	ldrb	r3, [r7, #19]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	22ff      	movs	r2, #255	; 0xff
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	771a      	strb	r2, [r3, #28]

  return status;
 8005cd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd90      	pop	{r4, r7, pc}

08005cdc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d0e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d12:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	0c1b      	lsrs	r3, r3, #16
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	0d9b      	lsrs	r3, r3, #22
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11a      	bne.n	8005d8e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 f98f 	bl	8006080 <RTC_Bcd2ToByte>
 8005d62:	4603      	mov	r3, r0
 8005d64:	461a      	mov	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 f986 	bl	8006080 <RTC_Bcd2ToByte>
 8005d74:	4603      	mov	r3, r0
 8005d76:	461a      	mov	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	789b      	ldrb	r3, [r3, #2]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 f97d 	bl	8006080 <RTC_Bcd2ToByte>
 8005d86:	4603      	mov	r3, r0
 8005d88:	461a      	mov	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	7f1b      	ldrb	r3, [r3, #28]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_RTC_SetDate+0x1c>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e071      	b.n	8005e98 <HAL_RTC_SetDate+0x100>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10e      	bne.n	8005de4 <HAL_RTC_SetDate+0x4c>
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	f023 0310 	bic.w	r3, r3, #16
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	330a      	adds	r3, #10
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d11c      	bne.n	8005e24 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	78db      	ldrb	r3, [r3, #3]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f929 	bl	8006046 <RTC_ByteToBcd2>
 8005df4:	4603      	mov	r3, r0
 8005df6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	785b      	ldrb	r3, [r3, #1]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f922 	bl	8006046 <RTC_ByteToBcd2>
 8005e02:	4603      	mov	r3, r0
 8005e04:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e06:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	789b      	ldrb	r3, [r3, #2]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 f91a 	bl	8006046 <RTC_ByteToBcd2>
 8005e12:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e14:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e00e      	b.n	8005e42 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	78db      	ldrb	r3, [r3, #3]
 8005e28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e30:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	22ca      	movs	r2, #202	; 0xca
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2253      	movs	r2, #83	; 0x53
 8005e50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f89b 	bl	8005f8e <RTC_EnterInitMode>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005e5c:	7cfb      	ldrb	r3, [r7, #19]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10c      	bne.n	8005e7c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e70:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 f8c2 	bl	8005ffc <RTC_ExitInitMode>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e7c:	7cfb      	ldrb	r3, [r7, #19]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	22ff      	movs	r2, #255	; 0xff
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	771a      	strb	r2, [r3, #28]

  return status;
 8005e96:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd90      	pop	{r4, r7, pc}

08005ea0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005eba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	0a1b      	lsrs	r3, r3, #8
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	0b5b      	lsrs	r3, r3, #13
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d11a      	bne.n	8005f34 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	78db      	ldrb	r3, [r3, #3]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f8bc 	bl	8006080 <RTC_Bcd2ToByte>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 f8b3 	bl	8006080 <RTC_Bcd2ToByte>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	789b      	ldrb	r3, [r3, #2]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f8aa 	bl	8006080 <RTC_Bcd2ToByte>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f58:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f5a:	f7fd f9ad 	bl	80032b8 <HAL_GetTick>
 8005f5e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f60:	e009      	b.n	8005f76 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f62:	f7fd f9a9 	bl	80032b8 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f70:	d901      	bls.n	8005f76 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e007      	b.n	8005f86 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0ee      	beq.n	8005f62 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d122      	bne.n	8005ff2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fbc:	f7fd f97c 	bl	80032b8 <HAL_GetTick>
 8005fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005fc2:	e00c      	b.n	8005fde <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fc4:	f7fd f978 	bl	80032b8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fd2:	d904      	bls.n	8005fde <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <RTC_EnterInitMode+0x64>
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d1e8      	bne.n	8005fc4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006016:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff ff89 	bl	8005f3e <HAL_RTC_WaitForSynchro>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d004      	beq.n	800603c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2204      	movs	r2, #4
 8006036:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	4603      	mov	r3, r0
 800604e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006054:	e005      	b.n	8006062 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	3301      	adds	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	3b0a      	subs	r3, #10
 8006060:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	2b09      	cmp	r3, #9
 8006066:	d8f6      	bhi.n	8006056 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	b2da      	uxtb	r2, r3
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	4313      	orrs	r3, r2
 8006072:	b2db      	uxtb	r3, r3
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	091b      	lsrs	r3, r3, #4
 8006092:	b2db      	uxtb	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	0092      	lsls	r2, r2, #2
 8006098:	4413      	add	r3, r2
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	4413      	add	r3, r2
 80060aa:	b2db      	uxtb	r3, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e041      	b.n	800614e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fc fc5a 	bl	8002998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3304      	adds	r3, #4
 80060f4:	4619      	mov	r1, r3
 80060f6:	4610      	mov	r0, r2
 80060f8:	f000 fd60 	bl	8006bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e041      	b.n	80061ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f839 	bl	80061f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3304      	adds	r3, #4
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f000 fd11 	bl	8006bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d109      	bne.n	8006234 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	e022      	b.n	800627a <HAL_TIM_PWM_Start_DMA+0x72>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d109      	bne.n	800624e <HAL_TIM_PWM_Start_DMA+0x46>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	e015      	b.n	800627a <HAL_TIM_PWM_Start_DMA+0x72>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d109      	bne.n	8006268 <HAL_TIM_PWM_Start_DMA+0x60>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	bf0c      	ite	eq
 8006260:	2301      	moveq	r3, #1
 8006262:	2300      	movne	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	e008      	b.n	800627a <HAL_TIM_PWM_Start_DMA+0x72>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	bf0c      	ite	eq
 8006274:	2301      	moveq	r3, #1
 8006276:	2300      	movne	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800627e:	2302      	movs	r3, #2
 8006280:	e15d      	b.n	800653e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d109      	bne.n	800629c <HAL_TIM_PWM_Start_DMA+0x94>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	e022      	b.n	80062e2 <HAL_TIM_PWM_Start_DMA+0xda>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d109      	bne.n	80062b6 <HAL_TIM_PWM_Start_DMA+0xae>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	bf0c      	ite	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	2300      	movne	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	e015      	b.n	80062e2 <HAL_TIM_PWM_Start_DMA+0xda>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d109      	bne.n	80062d0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	bf0c      	ite	eq
 80062c8:	2301      	moveq	r3, #1
 80062ca:	2300      	movne	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	e008      	b.n	80062e2 <HAL_TIM_PWM_Start_DMA+0xda>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	bf0c      	ite	eq
 80062dc:	2301      	moveq	r3, #1
 80062de:	2300      	movne	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d024      	beq.n	8006330 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <HAL_TIM_PWM_Start_DMA+0xee>
 80062ec:	887b      	ldrh	r3, [r7, #2]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e123      	b.n	800653e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <HAL_TIM_PWM_Start_DMA+0xfe>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006304:	e016      	b.n	8006334 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b04      	cmp	r3, #4
 800630a:	d104      	bne.n	8006316 <HAL_TIM_PWM_Start_DMA+0x10e>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006314:	e00e      	b.n	8006334 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d104      	bne.n	8006326 <HAL_TIM_PWM_Start_DMA+0x11e>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006324:	e006      	b.n	8006334 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2202      	movs	r2, #2
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800632e:	e001      	b.n	8006334 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e104      	b.n	800653e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b0c      	cmp	r3, #12
 8006338:	f200 80ae 	bhi.w	8006498 <HAL_TIM_PWM_Start_DMA+0x290>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	08006379 	.word	0x08006379
 8006348:	08006499 	.word	0x08006499
 800634c:	08006499 	.word	0x08006499
 8006350:	08006499 	.word	0x08006499
 8006354:	080063c1 	.word	0x080063c1
 8006358:	08006499 	.word	0x08006499
 800635c:	08006499 	.word	0x08006499
 8006360:	08006499 	.word	0x08006499
 8006364:	08006409 	.word	0x08006409
 8006368:	08006499 	.word	0x08006499
 800636c:	08006499 	.word	0x08006499
 8006370:	08006499 	.word	0x08006499
 8006374:	08006451 	.word	0x08006451
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	4a72      	ldr	r2, [pc, #456]	; (8006548 <HAL_TIM_PWM_Start_DMA+0x340>)
 800637e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	4a71      	ldr	r2, [pc, #452]	; (800654c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	4a70      	ldr	r2, [pc, #448]	; (8006550 <HAL_TIM_PWM_Start_DMA+0x348>)
 800638e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3334      	adds	r3, #52	; 0x34
 800639c:	461a      	mov	r2, r3
 800639e:	887b      	ldrh	r3, [r7, #2]
 80063a0:	f7fd f97a 	bl	8003698 <HAL_DMA_Start_IT>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e0c7      	b.n	800653e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063bc:	60da      	str	r2, [r3, #12]
      break;
 80063be:	e06e      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	4a60      	ldr	r2, [pc, #384]	; (8006548 <HAL_TIM_PWM_Start_DMA+0x340>)
 80063c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	4a5f      	ldr	r2, [pc, #380]	; (800654c <HAL_TIM_PWM_Start_DMA+0x344>)
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	4a5e      	ldr	r2, [pc, #376]	; (8006550 <HAL_TIM_PWM_Start_DMA+0x348>)
 80063d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3338      	adds	r3, #56	; 0x38
 80063e4:	461a      	mov	r2, r3
 80063e6:	887b      	ldrh	r3, [r7, #2]
 80063e8:	f7fd f956 	bl	8003698 <HAL_DMA_Start_IT>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e0a3      	b.n	800653e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006404:	60da      	str	r2, [r3, #12]
      break;
 8006406:	e04a      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	4a4e      	ldr	r2, [pc, #312]	; (8006548 <HAL_TIM_PWM_Start_DMA+0x340>)
 800640e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4a4d      	ldr	r2, [pc, #308]	; (800654c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006416:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	4a4c      	ldr	r2, [pc, #304]	; (8006550 <HAL_TIM_PWM_Start_DMA+0x348>)
 800641e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	333c      	adds	r3, #60	; 0x3c
 800642c:	461a      	mov	r2, r3
 800642e:	887b      	ldrh	r3, [r7, #2]
 8006430:	f7fd f932 	bl	8003698 <HAL_DMA_Start_IT>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e07f      	b.n	800653e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800644c:	60da      	str	r2, [r3, #12]
      break;
 800644e:	e026      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	4a3c      	ldr	r2, [pc, #240]	; (8006548 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006456:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	4a3b      	ldr	r2, [pc, #236]	; (800654c <HAL_TIM_PWM_Start_DMA+0x344>)
 800645e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	4a3a      	ldr	r2, [pc, #232]	; (8006550 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006466:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3340      	adds	r3, #64	; 0x40
 8006474:	461a      	mov	r2, r3
 8006476:	887b      	ldrh	r3, [r7, #2]
 8006478:	f7fd f90e 	bl	8003698 <HAL_DMA_Start_IT>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e05b      	b.n	800653e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006494:	60da      	str	r2, [r3, #12]
      break;
 8006496:	e002      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
      break;
 800649c:	bf00      	nop
  }

  if (status == HAL_OK)
 800649e:	7dfb      	ldrb	r3, [r7, #23]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d14b      	bne.n	800653c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2201      	movs	r2, #1
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fe2b 	bl	8007108 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a27      	ldr	r2, [pc, #156]	; (8006554 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d107      	bne.n	80064cc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a20      	ldr	r2, [pc, #128]	; (8006554 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d018      	beq.n	8006508 <HAL_TIM_PWM_Start_DMA+0x300>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064de:	d013      	beq.n	8006508 <HAL_TIM_PWM_Start_DMA+0x300>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1c      	ldr	r2, [pc, #112]	; (8006558 <HAL_TIM_PWM_Start_DMA+0x350>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00e      	beq.n	8006508 <HAL_TIM_PWM_Start_DMA+0x300>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1b      	ldr	r2, [pc, #108]	; (800655c <HAL_TIM_PWM_Start_DMA+0x354>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d009      	beq.n	8006508 <HAL_TIM_PWM_Start_DMA+0x300>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a19      	ldr	r2, [pc, #100]	; (8006560 <HAL_TIM_PWM_Start_DMA+0x358>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d004      	beq.n	8006508 <HAL_TIM_PWM_Start_DMA+0x300>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a18      	ldr	r2, [pc, #96]	; (8006564 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d111      	bne.n	800652c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	2b06      	cmp	r3, #6
 8006518:	d010      	beq.n	800653c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0201 	orr.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652a:	e007      	b.n	800653c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	08006aad 	.word	0x08006aad
 800654c:	08006b55 	.word	0x08006b55
 8006550:	08006a1b 	.word	0x08006a1b
 8006554:	40010000 	.word	0x40010000
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800
 8006560:	40000c00 	.word	0x40000c00
 8006564:	40014000 	.word	0x40014000

08006568 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b0c      	cmp	r3, #12
 800657a:	d855      	bhi.n	8006628 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800657c:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	080065b9 	.word	0x080065b9
 8006588:	08006629 	.word	0x08006629
 800658c:	08006629 	.word	0x08006629
 8006590:	08006629 	.word	0x08006629
 8006594:	080065d5 	.word	0x080065d5
 8006598:	08006629 	.word	0x08006629
 800659c:	08006629 	.word	0x08006629
 80065a0:	08006629 	.word	0x08006629
 80065a4:	080065f1 	.word	0x080065f1
 80065a8:	08006629 	.word	0x08006629
 80065ac:	08006629 	.word	0x08006629
 80065b0:	08006629 	.word	0x08006629
 80065b4:	0800660d 	.word	0x0800660d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fd f92b 	bl	8003828 <HAL_DMA_Abort_IT>
      break;
 80065d2:	e02c      	b.n	800662e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fd f91d 	bl	8003828 <HAL_DMA_Abort_IT>
      break;
 80065ee:	e01e      	b.n	800662e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4618      	mov	r0, r3
 8006606:	f7fd f90f 	bl	8003828 <HAL_DMA_Abort_IT>
      break;
 800660a:	e010      	b.n	800662e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800661a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	4618      	mov	r0, r3
 8006622:	f7fd f901 	bl	8003828 <HAL_DMA_Abort_IT>
      break;
 8006626:	e002      	b.n	800662e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
      break;
 800662c:	bf00      	nop
  }

  if (status == HAL_OK)
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d157      	bne.n	80066e4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2200      	movs	r2, #0
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fd63 	bl	8007108 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a2a      	ldr	r2, [pc, #168]	; (80066f0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d117      	bne.n	800667c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6a1a      	ldr	r2, [r3, #32]
 8006652:	f241 1311 	movw	r3, #4369	; 0x1111
 8006656:	4013      	ands	r3, r2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10f      	bne.n	800667c <HAL_TIM_PWM_Stop_DMA+0x114>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6a1a      	ldr	r2, [r3, #32]
 8006662:	f240 4344 	movw	r3, #1092	; 0x444
 8006666:	4013      	ands	r3, r2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d107      	bne.n	800667c <HAL_TIM_PWM_Stop_DMA+0x114>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800667a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6a1a      	ldr	r2, [r3, #32]
 8006682:	f241 1311 	movw	r3, #4369	; 0x1111
 8006686:	4013      	ands	r3, r2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10f      	bne.n	80066ac <HAL_TIM_PWM_Stop_DMA+0x144>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6a1a      	ldr	r2, [r3, #32]
 8006692:	f240 4344 	movw	r3, #1092	; 0x444
 8006696:	4013      	ands	r3, r2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d107      	bne.n	80066ac <HAL_TIM_PWM_Stop_DMA+0x144>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0201 	bic.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d104      	bne.n	80066bc <HAL_TIM_PWM_Stop_DMA+0x154>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ba:	e013      	b.n	80066e4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d104      	bne.n	80066cc <HAL_TIM_PWM_Stop_DMA+0x164>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ca:	e00b      	b.n	80066e4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d104      	bne.n	80066dc <HAL_TIM_PWM_Stop_DMA+0x174>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066da:	e003      	b.n	80066e4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000

080066f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800670e:	2302      	movs	r3, #2
 8006710:	e0ae      	b.n	8006870 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b0c      	cmp	r3, #12
 800671e:	f200 809f 	bhi.w	8006860 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800675d 	.word	0x0800675d
 800672c:	08006861 	.word	0x08006861
 8006730:	08006861 	.word	0x08006861
 8006734:	08006861 	.word	0x08006861
 8006738:	0800679d 	.word	0x0800679d
 800673c:	08006861 	.word	0x08006861
 8006740:	08006861 	.word	0x08006861
 8006744:	08006861 	.word	0x08006861
 8006748:	080067df 	.word	0x080067df
 800674c:	08006861 	.word	0x08006861
 8006750:	08006861 	.word	0x08006861
 8006754:	08006861 	.word	0x08006861
 8006758:	0800681f 	.word	0x0800681f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 faaa 	bl	8006cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0208 	orr.w	r2, r2, #8
 8006776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0204 	bic.w	r2, r2, #4
 8006786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6999      	ldr	r1, [r3, #24]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	619a      	str	r2, [r3, #24]
      break;
 800679a:	e064      	b.n	8006866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 faf0 	bl	8006d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699a      	ldr	r2, [r3, #24]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6999      	ldr	r1, [r3, #24]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	619a      	str	r2, [r3, #24]
      break;
 80067dc:	e043      	b.n	8006866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fb3b 	bl	8006e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0208 	orr.w	r2, r2, #8
 80067f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0204 	bic.w	r2, r2, #4
 8006808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69d9      	ldr	r1, [r3, #28]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	61da      	str	r2, [r3, #28]
      break;
 800681c:	e023      	b.n	8006866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fb85 	bl	8006f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69da      	ldr	r2, [r3, #28]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69d9      	ldr	r1, [r3, #28]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	021a      	lsls	r2, r3, #8
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	61da      	str	r2, [r3, #28]
      break;
 800685e:	e002      	b.n	8006866 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	75fb      	strb	r3, [r7, #23]
      break;
 8006864:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_TIM_ConfigClockSource+0x1c>
 8006890:	2302      	movs	r3, #2
 8006892:	e0b4      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x186>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068cc:	d03e      	beq.n	800694c <HAL_TIM_ConfigClockSource+0xd4>
 80068ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d2:	f200 8087 	bhi.w	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068da:	f000 8086 	beq.w	80069ea <HAL_TIM_ConfigClockSource+0x172>
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e2:	d87f      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b70      	cmp	r3, #112	; 0x70
 80068e6:	d01a      	beq.n	800691e <HAL_TIM_ConfigClockSource+0xa6>
 80068e8:	2b70      	cmp	r3, #112	; 0x70
 80068ea:	d87b      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b60      	cmp	r3, #96	; 0x60
 80068ee:	d050      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x11a>
 80068f0:	2b60      	cmp	r3, #96	; 0x60
 80068f2:	d877      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068f4:	2b50      	cmp	r3, #80	; 0x50
 80068f6:	d03c      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0xfa>
 80068f8:	2b50      	cmp	r3, #80	; 0x50
 80068fa:	d873      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d058      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x13a>
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d86f      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006904:	2b30      	cmp	r3, #48	; 0x30
 8006906:	d064      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006908:	2b30      	cmp	r3, #48	; 0x30
 800690a:	d86b      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 800690c:	2b20      	cmp	r3, #32
 800690e:	d060      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006910:	2b20      	cmp	r3, #32
 8006912:	d867      	bhi.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d05c      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006918:	2b10      	cmp	r3, #16
 800691a:	d05a      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x15a>
 800691c:	e062      	b.n	80069e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6899      	ldr	r1, [r3, #8]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f000 fbcb 	bl	80070c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006940:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	609a      	str	r2, [r3, #8]
      break;
 800694a:	e04f      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6899      	ldr	r1, [r3, #8]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f000 fbb4 	bl	80070c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800696e:	609a      	str	r2, [r3, #8]
      break;
 8006970:	e03c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6859      	ldr	r1, [r3, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	461a      	mov	r2, r3
 8006980:	f000 fb28 	bl	8006fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2150      	movs	r1, #80	; 0x50
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fb81 	bl	8007092 <TIM_ITRx_SetConfig>
      break;
 8006990:	e02c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6859      	ldr	r1, [r3, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	461a      	mov	r2, r3
 80069a0:	f000 fb47 	bl	8007032 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2160      	movs	r1, #96	; 0x60
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fb71 	bl	8007092 <TIM_ITRx_SetConfig>
      break;
 80069b0:	e01c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6859      	ldr	r1, [r3, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	461a      	mov	r2, r3
 80069c0:	f000 fb08 	bl	8006fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2140      	movs	r1, #64	; 0x40
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fb61 	bl	8007092 <TIM_ITRx_SetConfig>
      break;
 80069d0:	e00c      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4619      	mov	r1, r3
 80069dc:	4610      	mov	r0, r2
 80069de:	f000 fb58 	bl	8007092 <TIM_ITRx_SetConfig>
      break;
 80069e2:	e003      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	73fb      	strb	r3, [r7, #15]
      break;
 80069e8:	e000      	b.n	80069ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d107      	bne.n	8006a42 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a40:	e02a      	b.n	8006a98 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d107      	bne.n	8006a5c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a5a:	e01d      	b.n	8006a98 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d107      	bne.n	8006a76 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2204      	movs	r2, #4
 8006a6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a74:	e010      	b.n	8006a98 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d107      	bne.n	8006a90 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2208      	movs	r2, #8
 8006a84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a8e:	e003      	b.n	8006a98 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff ffb4 	bl	8006a06 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	771a      	strb	r2, [r3, #28]
}
 8006aa4:	bf00      	nop
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d10b      	bne.n	8006adc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d136      	bne.n	8006b40 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ada:	e031      	b.n	8006b40 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d10b      	bne.n	8006afe <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d125      	bne.n	8006b40 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006afc:	e020      	b.n	8006b40 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d10b      	bne.n	8006b20 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d114      	bne.n	8006b40 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b1e:	e00f      	b.n	8006b40 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d10a      	bne.n	8006b40 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7fc fa03 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]
}
 8006b4c:	bf00      	nop
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d103      	bne.n	8006b74 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	771a      	strb	r2, [r3, #28]
 8006b72:	e019      	b.n	8006ba8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d103      	bne.n	8006b86 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2202      	movs	r2, #2
 8006b82:	771a      	strb	r2, [r3, #28]
 8006b84:	e010      	b.n	8006ba8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d103      	bne.n	8006b98 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2204      	movs	r2, #4
 8006b94:	771a      	strb	r2, [r3, #28]
 8006b96:	e007      	b.n	8006ba8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d102      	bne.n	8006ba8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7fc f94f 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
}
 8006bb4:	bf00      	nop
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a34      	ldr	r2, [pc, #208]	; (8006ca0 <TIM_Base_SetConfig+0xe4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00f      	beq.n	8006bf4 <TIM_Base_SetConfig+0x38>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bda:	d00b      	beq.n	8006bf4 <TIM_Base_SetConfig+0x38>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a31      	ldr	r2, [pc, #196]	; (8006ca4 <TIM_Base_SetConfig+0xe8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d007      	beq.n	8006bf4 <TIM_Base_SetConfig+0x38>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a30      	ldr	r2, [pc, #192]	; (8006ca8 <TIM_Base_SetConfig+0xec>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_Base_SetConfig+0x38>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a2f      	ldr	r2, [pc, #188]	; (8006cac <TIM_Base_SetConfig+0xf0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d108      	bne.n	8006c06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a25      	ldr	r2, [pc, #148]	; (8006ca0 <TIM_Base_SetConfig+0xe4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d01b      	beq.n	8006c46 <TIM_Base_SetConfig+0x8a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c14:	d017      	beq.n	8006c46 <TIM_Base_SetConfig+0x8a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a22      	ldr	r2, [pc, #136]	; (8006ca4 <TIM_Base_SetConfig+0xe8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d013      	beq.n	8006c46 <TIM_Base_SetConfig+0x8a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a21      	ldr	r2, [pc, #132]	; (8006ca8 <TIM_Base_SetConfig+0xec>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00f      	beq.n	8006c46 <TIM_Base_SetConfig+0x8a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a20      	ldr	r2, [pc, #128]	; (8006cac <TIM_Base_SetConfig+0xf0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00b      	beq.n	8006c46 <TIM_Base_SetConfig+0x8a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <TIM_Base_SetConfig+0xf4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d007      	beq.n	8006c46 <TIM_Base_SetConfig+0x8a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a1e      	ldr	r2, [pc, #120]	; (8006cb4 <TIM_Base_SetConfig+0xf8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d003      	beq.n	8006c46 <TIM_Base_SetConfig+0x8a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a1d      	ldr	r2, [pc, #116]	; (8006cb8 <TIM_Base_SetConfig+0xfc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d108      	bne.n	8006c58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a08      	ldr	r2, [pc, #32]	; (8006ca0 <TIM_Base_SetConfig+0xe4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d103      	bne.n	8006c8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	615a      	str	r2, [r3, #20]
}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40000c00 	.word	0x40000c00
 8006cb0:	40014000 	.word	0x40014000
 8006cb4:	40014400 	.word	0x40014400
 8006cb8:	40014800 	.word	0x40014800

08006cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f023 0201 	bic.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 0302 	bic.w	r3, r3, #2
 8006d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a1c      	ldr	r2, [pc, #112]	; (8006d84 <TIM_OC1_SetConfig+0xc8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d10c      	bne.n	8006d32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f023 0308 	bic.w	r3, r3, #8
 8006d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f023 0304 	bic.w	r3, r3, #4
 8006d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <TIM_OC1_SetConfig+0xc8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d111      	bne.n	8006d5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	621a      	str	r2, [r3, #32]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	40010000 	.word	0x40010000

08006d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f023 0210 	bic.w	r2, r3, #16
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 0320 	bic.w	r3, r3, #32
 8006dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a1e      	ldr	r2, [pc, #120]	; (8006e5c <TIM_OC2_SetConfig+0xd4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d10d      	bne.n	8006e04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a15      	ldr	r2, [pc, #84]	; (8006e5c <TIM_OC2_SetConfig+0xd4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d113      	bne.n	8006e34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40010000 	.word	0x40010000

08006e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a1d      	ldr	r2, [pc, #116]	; (8006f30 <TIM_OC3_SetConfig+0xd0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d10d      	bne.n	8006eda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a14      	ldr	r2, [pc, #80]	; (8006f30 <TIM_OC3_SetConfig+0xd0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d113      	bne.n	8006f0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	621a      	str	r2, [r3, #32]
}
 8006f24:	bf00      	nop
 8006f26:	371c      	adds	r7, #28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	40010000 	.word	0x40010000

08006f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	021b      	lsls	r3, r3, #8
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	031b      	lsls	r3, r3, #12
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a10      	ldr	r2, [pc, #64]	; (8006fd0 <TIM_OC4_SetConfig+0x9c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d109      	bne.n	8006fa8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	019b      	lsls	r3, r3, #6
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	40010000 	.word	0x40010000

08006fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f023 0201 	bic.w	r2, r3, #1
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f023 030a 	bic.w	r3, r3, #10
 8007010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	621a      	str	r2, [r3, #32]
}
 8007026:	bf00      	nop
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007032:	b480      	push	{r7}
 8007034:	b087      	sub	sp, #28
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	f023 0210 	bic.w	r2, r3, #16
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800705c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	031b      	lsls	r3, r3, #12
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800706e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	621a      	str	r2, [r3, #32]
}
 8007086:	bf00      	nop
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007092:	b480      	push	{r7}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f043 0307 	orr.w	r3, r3, #7
 80070b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	609a      	str	r2, [r3, #8]
}
 80070bc:	bf00      	nop
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	021a      	lsls	r2, r3, #8
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	431a      	orrs	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	609a      	str	r2, [r3, #8]
}
 80070fc:	bf00      	nop
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	2201      	movs	r2, #1
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a1a      	ldr	r2, [r3, #32]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	43db      	mvns	r3, r3
 800712a:	401a      	ands	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1a      	ldr	r2, [r3, #32]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	fa01 f303 	lsl.w	r3, r1, r3
 8007140:	431a      	orrs	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	621a      	str	r2, [r3, #32]
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
	...

08007154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007168:	2302      	movs	r3, #2
 800716a:	e050      	b.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1c      	ldr	r2, [pc, #112]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d018      	beq.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b8:	d013      	beq.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a18      	ldr	r2, [pc, #96]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00e      	beq.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a16      	ldr	r2, [pc, #88]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d009      	beq.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d004      	beq.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a13      	ldr	r2, [pc, #76]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d10c      	bne.n	80071fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	40010000 	.word	0x40010000
 8007220:	40000400 	.word	0x40000400
 8007224:	40000800 	.word	0x40000800
 8007228:	40000c00 	.word	0x40000c00
 800722c:	40014000 	.word	0x40014000

08007230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007248:	2302      	movs	r3, #2
 800724a:	e03d      	b.n	80072c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e03f      	b.n	8007366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fb fc04 	bl	8002b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2224      	movs	r2, #36	; 0x24
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fddf 	bl	8007edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800732c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695a      	ldr	r2, [r3, #20]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800733c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800734c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b08a      	sub	sp, #40	; 0x28
 8007372:	af02      	add	r7, sp, #8
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	4613      	mov	r3, r2
 800737c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b20      	cmp	r3, #32
 800738c:	d17c      	bne.n	8007488 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_UART_Transmit+0x2c>
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e075      	b.n	800748a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_UART_Transmit+0x3e>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e06e      	b.n	800748a <HAL_UART_Transmit+0x11c>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2221      	movs	r2, #33	; 0x21
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073c2:	f7fb ff79 	bl	80032b8 <HAL_GetTick>
 80073c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073dc:	d108      	bne.n	80073f0 <HAL_UART_Transmit+0x82>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d104      	bne.n	80073f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	e003      	b.n	80073f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007400:	e02a      	b.n	8007458 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fb1f 	bl	8007a50 <UART_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e036      	b.n	800748a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10b      	bne.n	800743a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007430:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	3302      	adds	r3, #2
 8007436:	61bb      	str	r3, [r7, #24]
 8007438:	e007      	b.n	800744a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	781a      	ldrb	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	3301      	adds	r3, #1
 8007448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1cf      	bne.n	8007402 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	2140      	movs	r1, #64	; 0x40
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 faef 	bl	8007a50 <UART_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e006      	b.n	800748a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	e000      	b.n	800748a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007488:	2302      	movs	r3, #2
  }
}
 800748a:	4618      	mov	r0, r3
 800748c:	3720      	adds	r7, #32
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b084      	sub	sp, #16
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	4613      	mov	r3, r2
 800749e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	d11d      	bne.n	80074e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_UART_Receive_IT+0x26>
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e016      	b.n	80074ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <HAL_UART_Receive_IT+0x38>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e00f      	b.n	80074ea <HAL_UART_Receive_IT+0x58>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	461a      	mov	r2, r3
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fb24 	bl	8007b2c <UART_Start_Receive_IT>
 80074e4:	4603      	mov	r3, r0
 80074e6:	e000      	b.n	80074ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80074e8:	2302      	movs	r3, #2
  }
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b0ba      	sub	sp, #232	; 0xe8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800751a:	2300      	movs	r3, #0
 800751c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007520:	2300      	movs	r3, #0
 8007522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10f      	bne.n	800755a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800753a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d009      	beq.n	800755a <HAL_UART_IRQHandler+0x66>
 8007546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fc07 	bl	8007d66 <UART_Receive_IT>
      return;
 8007558:	e256      	b.n	8007a08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800755a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80de 	beq.w	8007720 <HAL_UART_IRQHandler+0x22c>
 8007564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d106      	bne.n	800757e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007574:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80d1 	beq.w	8007720 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800757e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <HAL_UART_IRQHandler+0xae>
 800758a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f043 0201 	orr.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00b      	beq.n	80075c6 <HAL_UART_IRQHandler+0xd2>
 80075ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	f043 0202 	orr.w	r2, r3, #2
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00b      	beq.n	80075ea <HAL_UART_IRQHandler+0xf6>
 80075d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d005      	beq.n	80075ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	f043 0204 	orr.w	r2, r3, #4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d011      	beq.n	800761a <HAL_UART_IRQHandler+0x126>
 80075f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d105      	bne.n	800760e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f043 0208 	orr.w	r2, r3, #8
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 81ed 	beq.w	80079fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <HAL_UART_IRQHandler+0x14e>
 8007630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fb92 	bl	8007d66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b40      	cmp	r3, #64	; 0x40
 800764e:	bf0c      	ite	eq
 8007650:	2301      	moveq	r3, #1
 8007652:	2300      	movne	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d103      	bne.n	800766e <HAL_UART_IRQHandler+0x17a>
 8007666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800766a:	2b00      	cmp	r3, #0
 800766c:	d04f      	beq.n	800770e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa9a 	bl	8007ba8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d141      	bne.n	8007706 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3314      	adds	r3, #20
 8007688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800769c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3314      	adds	r3, #20
 80076aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1d9      	bne.n	8007682 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d013      	beq.n	80076fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	4a7d      	ldr	r2, [pc, #500]	; (80078d0 <HAL_UART_IRQHandler+0x3dc>)
 80076dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fc f8a0 	bl	8003828 <HAL_DMA_Abort_IT>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d016      	beq.n	800771c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076f8:	4610      	mov	r0, r2
 80076fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076fc:	e00e      	b.n	800771c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f990 	bl	8007a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007704:	e00a      	b.n	800771c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f98c 	bl	8007a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770c:	e006      	b.n	800771c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f988 	bl	8007a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800771a:	e170      	b.n	80079fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771c:	bf00      	nop
    return;
 800771e:	e16e      	b.n	80079fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	2b01      	cmp	r3, #1
 8007726:	f040 814a 	bne.w	80079be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800772a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772e:	f003 0310 	and.w	r3, r3, #16
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 8143 	beq.w	80079be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773c:	f003 0310 	and.w	r3, r3, #16
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 813c 	beq.w	80079be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007746:	2300      	movs	r3, #0
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	f040 80b4 	bne.w	80078d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 8140 	beq.w	8007a02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800778a:	429a      	cmp	r2, r3
 800778c:	f080 8139 	bcs.w	8007a02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007796:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a2:	f000 8088 	beq.w	80078b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	330c      	adds	r3, #12
 80077ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1d9      	bne.n	80077a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3314      	adds	r3, #20
 80077f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3314      	adds	r3, #20
 8007812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007816:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800781a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800781e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e1      	bne.n	80077f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3314      	adds	r3, #20
 8007834:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800783e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3314      	adds	r3, #20
 800784e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007852:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007854:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007858:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e3      	bne.n	800782e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	330c      	adds	r3, #12
 8007894:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007898:	65ba      	str	r2, [r7, #88]	; 0x58
 800789a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800789e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e3      	bne.n	8007874 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fb ff49 	bl	8003748 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078be:	b29b      	uxth	r3, r3
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f8b6 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078cc:	e099      	b.n	8007a02 <HAL_UART_IRQHandler+0x50e>
 80078ce:	bf00      	nop
 80078d0:	08007c6f 	.word	0x08007c6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078dc:	b29b      	uxth	r3, r3
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 808b 	beq.w	8007a06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80078f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 8086 	beq.w	8007a06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007910:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	330c      	adds	r3, #12
 800791a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800791e:	647a      	str	r2, [r7, #68]	; 0x44
 8007920:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800792c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e3      	bne.n	80078fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3314      	adds	r3, #20
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	623b      	str	r3, [r7, #32]
   return(result);
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	f023 0301 	bic.w	r3, r3, #1
 8007948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3314      	adds	r3, #20
 8007952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007956:	633a      	str	r2, [r7, #48]	; 0x30
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800795c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e3      	bne.n	8007932 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	330c      	adds	r3, #12
 800797e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	60fb      	str	r3, [r7, #12]
   return(result);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0310 	bic.w	r3, r3, #16
 800798e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	330c      	adds	r3, #12
 8007998:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800799c:	61fa      	str	r2, [r7, #28]
 800799e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	69b9      	ldr	r1, [r7, #24]
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	617b      	str	r3, [r7, #20]
   return(result);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e3      	bne.n	8007978 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f83e 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079bc:	e023      	b.n	8007a06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d009      	beq.n	80079de <HAL_UART_IRQHandler+0x4ea>
 80079ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f95d 	bl	8007c96 <UART_Transmit_IT>
    return;
 80079dc:	e014      	b.n	8007a08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00e      	beq.n	8007a08 <HAL_UART_IRQHandler+0x514>
 80079ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f99d 	bl	8007d36 <UART_EndTransmit_IT>
    return;
 80079fc:	e004      	b.n	8007a08 <HAL_UART_IRQHandler+0x514>
    return;
 80079fe:	bf00      	nop
 8007a00:	e002      	b.n	8007a08 <HAL_UART_IRQHandler+0x514>
      return;
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <HAL_UART_IRQHandler+0x514>
      return;
 8007a06:	bf00      	nop
  }
}
 8007a08:	37e8      	adds	r7, #232	; 0xe8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop

08007a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b090      	sub	sp, #64	; 0x40
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a60:	e050      	b.n	8007b04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d04c      	beq.n	8007b04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a70:	f7fb fc22 	bl	80032b8 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d241      	bcs.n	8007b04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	330c      	adds	r3, #12
 8007a9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007aa0:	637a      	str	r2, [r7, #52]	; 0x34
 8007aa2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e5      	bne.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3314      	adds	r3, #20
 8007aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f023 0301 	bic.w	r3, r3, #1
 8007aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3314      	adds	r3, #20
 8007ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ad4:	623a      	str	r2, [r7, #32]
 8007ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	69f9      	ldr	r1, [r7, #28]
 8007ada:	6a3a      	ldr	r2, [r7, #32]
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e5      	bne.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e00f      	b.n	8007b24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	bf0c      	ite	eq
 8007b14:	2301      	moveq	r3, #1
 8007b16:	2300      	movne	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	79fb      	ldrb	r3, [r7, #7]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d09f      	beq.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3740      	adds	r7, #64	; 0x40
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	88fa      	ldrh	r2, [r7, #6]
 8007b4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2222      	movs	r2, #34	; 0x22
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68da      	ldr	r2, [r3, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	695a      	ldr	r2, [r3, #20]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f042 0201 	orr.w	r2, r2, #1
 8007b88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0220 	orr.w	r2, r2, #32
 8007b98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b095      	sub	sp, #84	; 0x54
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bd0:	643a      	str	r2, [r7, #64]	; 0x40
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e5      	bne.n	8007bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3314      	adds	r3, #20
 8007bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f023 0301 	bic.w	r3, r3, #1
 8007bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3314      	adds	r3, #20
 8007c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e5      	bne.n	8007be4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d119      	bne.n	8007c54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f023 0310 	bic.w	r3, r3, #16
 8007c36:	647b      	str	r3, [r7, #68]	; 0x44
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	330c      	adds	r3, #12
 8007c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c40:	61ba      	str	r2, [r7, #24]
 8007c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6979      	ldr	r1, [r7, #20]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e5      	bne.n	8007c20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c62:	bf00      	nop
 8007c64:	3754      	adds	r7, #84	; 0x54
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7ff fecb 	bl	8007a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b21      	cmp	r3, #33	; 0x21
 8007ca8:	d13e      	bne.n	8007d28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb2:	d114      	bne.n	8007cde <UART_Transmit_IT+0x48>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d110      	bne.n	8007cde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	1c9a      	adds	r2, r3, #2
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	621a      	str	r2, [r3, #32]
 8007cdc:	e008      	b.n	8007cf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	1c59      	adds	r1, r3, #1
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6211      	str	r1, [r2, #32]
 8007ce8:	781a      	ldrb	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10f      	bne.n	8007d24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	e000      	b.n	8007d2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d28:	2302      	movs	r3, #2
  }
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff fe5a 	bl	8007a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b08c      	sub	sp, #48	; 0x30
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b22      	cmp	r3, #34	; 0x22
 8007d78:	f040 80ab 	bne.w	8007ed2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d84:	d117      	bne.n	8007db6 <UART_Receive_IT+0x50>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d113      	bne.n	8007db6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dae:	1c9a      	adds	r2, r3, #2
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	629a      	str	r2, [r3, #40]	; 0x28
 8007db4:	e026      	b.n	8007e04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc8:	d007      	beq.n	8007dda <UART_Receive_IT+0x74>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <UART_Receive_IT+0x82>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	e008      	b.n	8007dfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	4619      	mov	r1, r3
 8007e12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d15a      	bne.n	8007ece <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0220 	bic.w	r2, r2, #32
 8007e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695a      	ldr	r2, [r3, #20]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0201 	bic.w	r2, r2, #1
 8007e46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d135      	bne.n	8007ec4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	330c      	adds	r3, #12
 8007e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f023 0310 	bic.w	r3, r3, #16
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7e:	623a      	str	r2, [r7, #32]
 8007e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	69f9      	ldr	r1, [r7, #28]
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e5      	bne.n	8007e5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0310 	and.w	r3, r3, #16
 8007e9c:	2b10      	cmp	r3, #16
 8007e9e:	d10a      	bne.n	8007eb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff fdbb 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
 8007ec2:	e002      	b.n	8007eca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7f9 fcd3 	bl	8001870 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e002      	b.n	8007ed4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e000      	b.n	8007ed4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007ed2:	2302      	movs	r3, #2
  }
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3730      	adds	r7, #48	; 0x30
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ee0:	b0c0      	sub	sp, #256	; 0x100
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef8:	68d9      	ldr	r1, [r3, #12]
 8007efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	ea40 0301 	orr.w	r3, r0, r1
 8007f04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	431a      	orrs	r2, r3
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f34:	f021 010c 	bic.w	r1, r1, #12
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f42:	430b      	orrs	r3, r1
 8007f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f56:	6999      	ldr	r1, [r3, #24]
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	ea40 0301 	orr.w	r3, r0, r1
 8007f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b8f      	ldr	r3, [pc, #572]	; (80081a8 <UART_SetConfig+0x2cc>)
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d005      	beq.n	8007f7c <UART_SetConfig+0xa0>
 8007f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	4b8d      	ldr	r3, [pc, #564]	; (80081ac <UART_SetConfig+0x2d0>)
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d104      	bne.n	8007f86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f7c:	f7fd fc9a 	bl	80058b4 <HAL_RCC_GetPCLK2Freq>
 8007f80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f84:	e003      	b.n	8007f8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f86:	f7fd fc81 	bl	800588c <HAL_RCC_GetPCLK1Freq>
 8007f8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f98:	f040 810c 	bne.w	80081b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007faa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007fae:	4622      	mov	r2, r4
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	1891      	adds	r1, r2, r2
 8007fb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007fb6:	415b      	adcs	r3, r3
 8007fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	eb12 0801 	adds.w	r8, r2, r1
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	eb43 0901 	adc.w	r9, r3, r1
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fde:	4690      	mov	r8, r2
 8007fe0:	4699      	mov	r9, r3
 8007fe2:	4623      	mov	r3, r4
 8007fe4:	eb18 0303 	adds.w	r3, r8, r3
 8007fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fec:	462b      	mov	r3, r5
 8007fee:	eb49 0303 	adc.w	r3, r9, r3
 8007ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008002:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800800a:	460b      	mov	r3, r1
 800800c:	18db      	adds	r3, r3, r3
 800800e:	653b      	str	r3, [r7, #80]	; 0x50
 8008010:	4613      	mov	r3, r2
 8008012:	eb42 0303 	adc.w	r3, r2, r3
 8008016:	657b      	str	r3, [r7, #84]	; 0x54
 8008018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800801c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008020:	f7f8 fdda 	bl	8000bd8 <__aeabi_uldivmod>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4b61      	ldr	r3, [pc, #388]	; (80081b0 <UART_SetConfig+0x2d4>)
 800802a:	fba3 2302 	umull	r2, r3, r3, r2
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	011c      	lsls	r4, r3, #4
 8008032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008036:	2200      	movs	r2, #0
 8008038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800803c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008040:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008044:	4642      	mov	r2, r8
 8008046:	464b      	mov	r3, r9
 8008048:	1891      	adds	r1, r2, r2
 800804a:	64b9      	str	r1, [r7, #72]	; 0x48
 800804c:	415b      	adcs	r3, r3
 800804e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008054:	4641      	mov	r1, r8
 8008056:	eb12 0a01 	adds.w	sl, r2, r1
 800805a:	4649      	mov	r1, r9
 800805c:	eb43 0b01 	adc.w	fp, r3, r1
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800806c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008074:	4692      	mov	sl, r2
 8008076:	469b      	mov	fp, r3
 8008078:	4643      	mov	r3, r8
 800807a:	eb1a 0303 	adds.w	r3, sl, r3
 800807e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008082:	464b      	mov	r3, r9
 8008084:	eb4b 0303 	adc.w	r3, fp, r3
 8008088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800808c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008098:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800809c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80080a0:	460b      	mov	r3, r1
 80080a2:	18db      	adds	r3, r3, r3
 80080a4:	643b      	str	r3, [r7, #64]	; 0x40
 80080a6:	4613      	mov	r3, r2
 80080a8:	eb42 0303 	adc.w	r3, r2, r3
 80080ac:	647b      	str	r3, [r7, #68]	; 0x44
 80080ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80080b6:	f7f8 fd8f 	bl	8000bd8 <__aeabi_uldivmod>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4611      	mov	r1, r2
 80080c0:	4b3b      	ldr	r3, [pc, #236]	; (80081b0 <UART_SetConfig+0x2d4>)
 80080c2:	fba3 2301 	umull	r2, r3, r3, r1
 80080c6:	095b      	lsrs	r3, r3, #5
 80080c8:	2264      	movs	r2, #100	; 0x64
 80080ca:	fb02 f303 	mul.w	r3, r2, r3
 80080ce:	1acb      	subs	r3, r1, r3
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80080d6:	4b36      	ldr	r3, [pc, #216]	; (80081b0 <UART_SetConfig+0x2d4>)
 80080d8:	fba3 2302 	umull	r2, r3, r3, r2
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080e4:	441c      	add	r4, r3
 80080e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80080f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80080f8:	4642      	mov	r2, r8
 80080fa:	464b      	mov	r3, r9
 80080fc:	1891      	adds	r1, r2, r2
 80080fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008100:	415b      	adcs	r3, r3
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008108:	4641      	mov	r1, r8
 800810a:	1851      	adds	r1, r2, r1
 800810c:	6339      	str	r1, [r7, #48]	; 0x30
 800810e:	4649      	mov	r1, r9
 8008110:	414b      	adcs	r3, r1
 8008112:	637b      	str	r3, [r7, #52]	; 0x34
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008120:	4659      	mov	r1, fp
 8008122:	00cb      	lsls	r3, r1, #3
 8008124:	4651      	mov	r1, sl
 8008126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800812a:	4651      	mov	r1, sl
 800812c:	00ca      	lsls	r2, r1, #3
 800812e:	4610      	mov	r0, r2
 8008130:	4619      	mov	r1, r3
 8008132:	4603      	mov	r3, r0
 8008134:	4642      	mov	r2, r8
 8008136:	189b      	adds	r3, r3, r2
 8008138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800813c:	464b      	mov	r3, r9
 800813e:	460a      	mov	r2, r1
 8008140:	eb42 0303 	adc.w	r3, r2, r3
 8008144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008154:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008158:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800815c:	460b      	mov	r3, r1
 800815e:	18db      	adds	r3, r3, r3
 8008160:	62bb      	str	r3, [r7, #40]	; 0x28
 8008162:	4613      	mov	r3, r2
 8008164:	eb42 0303 	adc.w	r3, r2, r3
 8008168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800816a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800816e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008172:	f7f8 fd31 	bl	8000bd8 <__aeabi_uldivmod>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <UART_SetConfig+0x2d4>)
 800817c:	fba3 1302 	umull	r1, r3, r3, r2
 8008180:	095b      	lsrs	r3, r3, #5
 8008182:	2164      	movs	r1, #100	; 0x64
 8008184:	fb01 f303 	mul.w	r3, r1, r3
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	3332      	adds	r3, #50	; 0x32
 800818e:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <UART_SetConfig+0x2d4>)
 8008190:	fba2 2303 	umull	r2, r3, r2, r3
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	f003 0207 	and.w	r2, r3, #7
 800819a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4422      	add	r2, r4
 80081a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081a4:	e105      	b.n	80083b2 <UART_SetConfig+0x4d6>
 80081a6:	bf00      	nop
 80081a8:	40011000 	.word	0x40011000
 80081ac:	40011400 	.word	0x40011400
 80081b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80081c6:	4642      	mov	r2, r8
 80081c8:	464b      	mov	r3, r9
 80081ca:	1891      	adds	r1, r2, r2
 80081cc:	6239      	str	r1, [r7, #32]
 80081ce:	415b      	adcs	r3, r3
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
 80081d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081d6:	4641      	mov	r1, r8
 80081d8:	1854      	adds	r4, r2, r1
 80081da:	4649      	mov	r1, r9
 80081dc:	eb43 0501 	adc.w	r5, r3, r1
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	00eb      	lsls	r3, r5, #3
 80081ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081ee:	00e2      	lsls	r2, r4, #3
 80081f0:	4614      	mov	r4, r2
 80081f2:	461d      	mov	r5, r3
 80081f4:	4643      	mov	r3, r8
 80081f6:	18e3      	adds	r3, r4, r3
 80081f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081fc:	464b      	mov	r3, r9
 80081fe:	eb45 0303 	adc.w	r3, r5, r3
 8008202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008212:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008216:	f04f 0200 	mov.w	r2, #0
 800821a:	f04f 0300 	mov.w	r3, #0
 800821e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008222:	4629      	mov	r1, r5
 8008224:	008b      	lsls	r3, r1, #2
 8008226:	4621      	mov	r1, r4
 8008228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800822c:	4621      	mov	r1, r4
 800822e:	008a      	lsls	r2, r1, #2
 8008230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008234:	f7f8 fcd0 	bl	8000bd8 <__aeabi_uldivmod>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4b60      	ldr	r3, [pc, #384]	; (80083c0 <UART_SetConfig+0x4e4>)
 800823e:	fba3 2302 	umull	r2, r3, r3, r2
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	011c      	lsls	r4, r3, #4
 8008246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800824a:	2200      	movs	r2, #0
 800824c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008250:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008254:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008258:	4642      	mov	r2, r8
 800825a:	464b      	mov	r3, r9
 800825c:	1891      	adds	r1, r2, r2
 800825e:	61b9      	str	r1, [r7, #24]
 8008260:	415b      	adcs	r3, r3
 8008262:	61fb      	str	r3, [r7, #28]
 8008264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008268:	4641      	mov	r1, r8
 800826a:	1851      	adds	r1, r2, r1
 800826c:	6139      	str	r1, [r7, #16]
 800826e:	4649      	mov	r1, r9
 8008270:	414b      	adcs	r3, r1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008280:	4659      	mov	r1, fp
 8008282:	00cb      	lsls	r3, r1, #3
 8008284:	4651      	mov	r1, sl
 8008286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800828a:	4651      	mov	r1, sl
 800828c:	00ca      	lsls	r2, r1, #3
 800828e:	4610      	mov	r0, r2
 8008290:	4619      	mov	r1, r3
 8008292:	4603      	mov	r3, r0
 8008294:	4642      	mov	r2, r8
 8008296:	189b      	adds	r3, r3, r2
 8008298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800829c:	464b      	mov	r3, r9
 800829e:	460a      	mov	r2, r1
 80082a0:	eb42 0303 	adc.w	r3, r2, r3
 80082a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80082b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80082c0:	4649      	mov	r1, r9
 80082c2:	008b      	lsls	r3, r1, #2
 80082c4:	4641      	mov	r1, r8
 80082c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082ca:	4641      	mov	r1, r8
 80082cc:	008a      	lsls	r2, r1, #2
 80082ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80082d2:	f7f8 fc81 	bl	8000bd8 <__aeabi_uldivmod>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4b39      	ldr	r3, [pc, #228]	; (80083c0 <UART_SetConfig+0x4e4>)
 80082dc:	fba3 1302 	umull	r1, r3, r3, r2
 80082e0:	095b      	lsrs	r3, r3, #5
 80082e2:	2164      	movs	r1, #100	; 0x64
 80082e4:	fb01 f303 	mul.w	r3, r1, r3
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	3332      	adds	r3, #50	; 0x32
 80082ee:	4a34      	ldr	r2, [pc, #208]	; (80083c0 <UART_SetConfig+0x4e4>)
 80082f0:	fba2 2303 	umull	r2, r3, r2, r3
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082fa:	441c      	add	r4, r3
 80082fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008300:	2200      	movs	r2, #0
 8008302:	673b      	str	r3, [r7, #112]	; 0x70
 8008304:	677a      	str	r2, [r7, #116]	; 0x74
 8008306:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800830a:	4642      	mov	r2, r8
 800830c:	464b      	mov	r3, r9
 800830e:	1891      	adds	r1, r2, r2
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	415b      	adcs	r3, r3
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800831a:	4641      	mov	r1, r8
 800831c:	1851      	adds	r1, r2, r1
 800831e:	6039      	str	r1, [r7, #0]
 8008320:	4649      	mov	r1, r9
 8008322:	414b      	adcs	r3, r1
 8008324:	607b      	str	r3, [r7, #4]
 8008326:	f04f 0200 	mov.w	r2, #0
 800832a:	f04f 0300 	mov.w	r3, #0
 800832e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008332:	4659      	mov	r1, fp
 8008334:	00cb      	lsls	r3, r1, #3
 8008336:	4651      	mov	r1, sl
 8008338:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800833c:	4651      	mov	r1, sl
 800833e:	00ca      	lsls	r2, r1, #3
 8008340:	4610      	mov	r0, r2
 8008342:	4619      	mov	r1, r3
 8008344:	4603      	mov	r3, r0
 8008346:	4642      	mov	r2, r8
 8008348:	189b      	adds	r3, r3, r2
 800834a:	66bb      	str	r3, [r7, #104]	; 0x68
 800834c:	464b      	mov	r3, r9
 800834e:	460a      	mov	r2, r1
 8008350:	eb42 0303 	adc.w	r3, r2, r3
 8008354:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	663b      	str	r3, [r7, #96]	; 0x60
 8008360:	667a      	str	r2, [r7, #100]	; 0x64
 8008362:	f04f 0200 	mov.w	r2, #0
 8008366:	f04f 0300 	mov.w	r3, #0
 800836a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800836e:	4649      	mov	r1, r9
 8008370:	008b      	lsls	r3, r1, #2
 8008372:	4641      	mov	r1, r8
 8008374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008378:	4641      	mov	r1, r8
 800837a:	008a      	lsls	r2, r1, #2
 800837c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008380:	f7f8 fc2a 	bl	8000bd8 <__aeabi_uldivmod>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <UART_SetConfig+0x4e4>)
 800838a:	fba3 1302 	umull	r1, r3, r3, r2
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	2164      	movs	r1, #100	; 0x64
 8008392:	fb01 f303 	mul.w	r3, r1, r3
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	3332      	adds	r3, #50	; 0x32
 800839c:	4a08      	ldr	r2, [pc, #32]	; (80083c0 <UART_SetConfig+0x4e4>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	f003 020f 	and.w	r2, r3, #15
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4422      	add	r2, r4
 80083b0:	609a      	str	r2, [r3, #8]
}
 80083b2:	bf00      	nop
 80083b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80083b8:	46bd      	mov	sp, r7
 80083ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083be:	bf00      	nop
 80083c0:	51eb851f 	.word	0x51eb851f

080083c4 <atoi>:
 80083c4:	220a      	movs	r2, #10
 80083c6:	2100      	movs	r1, #0
 80083c8:	f000 bdda 	b.w	8008f80 <strtol>

080083cc <__errno>:
 80083cc:	4b01      	ldr	r3, [pc, #4]	; (80083d4 <__errno+0x8>)
 80083ce:	6818      	ldr	r0, [r3, #0]
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	2000009c 	.word	0x2000009c

080083d8 <__libc_init_array>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	4d0d      	ldr	r5, [pc, #52]	; (8008410 <__libc_init_array+0x38>)
 80083dc:	4c0d      	ldr	r4, [pc, #52]	; (8008414 <__libc_init_array+0x3c>)
 80083de:	1b64      	subs	r4, r4, r5
 80083e0:	10a4      	asrs	r4, r4, #2
 80083e2:	2600      	movs	r6, #0
 80083e4:	42a6      	cmp	r6, r4
 80083e6:	d109      	bne.n	80083fc <__libc_init_array+0x24>
 80083e8:	4d0b      	ldr	r5, [pc, #44]	; (8008418 <__libc_init_array+0x40>)
 80083ea:	4c0c      	ldr	r4, [pc, #48]	; (800841c <__libc_init_array+0x44>)
 80083ec:	f003 ff44 	bl	800c278 <_init>
 80083f0:	1b64      	subs	r4, r4, r5
 80083f2:	10a4      	asrs	r4, r4, #2
 80083f4:	2600      	movs	r6, #0
 80083f6:	42a6      	cmp	r6, r4
 80083f8:	d105      	bne.n	8008406 <__libc_init_array+0x2e>
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
 80083fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008400:	4798      	blx	r3
 8008402:	3601      	adds	r6, #1
 8008404:	e7ee      	b.n	80083e4 <__libc_init_array+0xc>
 8008406:	f855 3b04 	ldr.w	r3, [r5], #4
 800840a:	4798      	blx	r3
 800840c:	3601      	adds	r6, #1
 800840e:	e7f2      	b.n	80083f6 <__libc_init_array+0x1e>
 8008410:	0800cca8 	.word	0x0800cca8
 8008414:	0800cca8 	.word	0x0800cca8
 8008418:	0800cca8 	.word	0x0800cca8
 800841c:	0800ccac 	.word	0x0800ccac

08008420 <memset>:
 8008420:	4402      	add	r2, r0
 8008422:	4603      	mov	r3, r0
 8008424:	4293      	cmp	r3, r2
 8008426:	d100      	bne.n	800842a <memset+0xa>
 8008428:	4770      	bx	lr
 800842a:	f803 1b01 	strb.w	r1, [r3], #1
 800842e:	e7f9      	b.n	8008424 <memset+0x4>

08008430 <__cvt>:
 8008430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008434:	ec55 4b10 	vmov	r4, r5, d0
 8008438:	2d00      	cmp	r5, #0
 800843a:	460e      	mov	r6, r1
 800843c:	4619      	mov	r1, r3
 800843e:	462b      	mov	r3, r5
 8008440:	bfbb      	ittet	lt
 8008442:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008446:	461d      	movlt	r5, r3
 8008448:	2300      	movge	r3, #0
 800844a:	232d      	movlt	r3, #45	; 0x2d
 800844c:	700b      	strb	r3, [r1, #0]
 800844e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008450:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008454:	4691      	mov	r9, r2
 8008456:	f023 0820 	bic.w	r8, r3, #32
 800845a:	bfbc      	itt	lt
 800845c:	4622      	movlt	r2, r4
 800845e:	4614      	movlt	r4, r2
 8008460:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008464:	d005      	beq.n	8008472 <__cvt+0x42>
 8008466:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800846a:	d100      	bne.n	800846e <__cvt+0x3e>
 800846c:	3601      	adds	r6, #1
 800846e:	2102      	movs	r1, #2
 8008470:	e000      	b.n	8008474 <__cvt+0x44>
 8008472:	2103      	movs	r1, #3
 8008474:	ab03      	add	r3, sp, #12
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	ab02      	add	r3, sp, #8
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	ec45 4b10 	vmov	d0, r4, r5
 8008480:	4653      	mov	r3, sl
 8008482:	4632      	mov	r2, r6
 8008484:	f000 fe34 	bl	80090f0 <_dtoa_r>
 8008488:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800848c:	4607      	mov	r7, r0
 800848e:	d102      	bne.n	8008496 <__cvt+0x66>
 8008490:	f019 0f01 	tst.w	r9, #1
 8008494:	d022      	beq.n	80084dc <__cvt+0xac>
 8008496:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800849a:	eb07 0906 	add.w	r9, r7, r6
 800849e:	d110      	bne.n	80084c2 <__cvt+0x92>
 80084a0:	783b      	ldrb	r3, [r7, #0]
 80084a2:	2b30      	cmp	r3, #48	; 0x30
 80084a4:	d10a      	bne.n	80084bc <__cvt+0x8c>
 80084a6:	2200      	movs	r2, #0
 80084a8:	2300      	movs	r3, #0
 80084aa:	4620      	mov	r0, r4
 80084ac:	4629      	mov	r1, r5
 80084ae:	f7f8 fb23 	bl	8000af8 <__aeabi_dcmpeq>
 80084b2:	b918      	cbnz	r0, 80084bc <__cvt+0x8c>
 80084b4:	f1c6 0601 	rsb	r6, r6, #1
 80084b8:	f8ca 6000 	str.w	r6, [sl]
 80084bc:	f8da 3000 	ldr.w	r3, [sl]
 80084c0:	4499      	add	r9, r3
 80084c2:	2200      	movs	r2, #0
 80084c4:	2300      	movs	r3, #0
 80084c6:	4620      	mov	r0, r4
 80084c8:	4629      	mov	r1, r5
 80084ca:	f7f8 fb15 	bl	8000af8 <__aeabi_dcmpeq>
 80084ce:	b108      	cbz	r0, 80084d4 <__cvt+0xa4>
 80084d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80084d4:	2230      	movs	r2, #48	; 0x30
 80084d6:	9b03      	ldr	r3, [sp, #12]
 80084d8:	454b      	cmp	r3, r9
 80084da:	d307      	bcc.n	80084ec <__cvt+0xbc>
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084e0:	1bdb      	subs	r3, r3, r7
 80084e2:	4638      	mov	r0, r7
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	b004      	add	sp, #16
 80084e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ec:	1c59      	adds	r1, r3, #1
 80084ee:	9103      	str	r1, [sp, #12]
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	e7f0      	b.n	80084d6 <__cvt+0xa6>

080084f4 <__exponent>:
 80084f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084f6:	4603      	mov	r3, r0
 80084f8:	2900      	cmp	r1, #0
 80084fa:	bfb8      	it	lt
 80084fc:	4249      	neglt	r1, r1
 80084fe:	f803 2b02 	strb.w	r2, [r3], #2
 8008502:	bfb4      	ite	lt
 8008504:	222d      	movlt	r2, #45	; 0x2d
 8008506:	222b      	movge	r2, #43	; 0x2b
 8008508:	2909      	cmp	r1, #9
 800850a:	7042      	strb	r2, [r0, #1]
 800850c:	dd2a      	ble.n	8008564 <__exponent+0x70>
 800850e:	f10d 0407 	add.w	r4, sp, #7
 8008512:	46a4      	mov	ip, r4
 8008514:	270a      	movs	r7, #10
 8008516:	46a6      	mov	lr, r4
 8008518:	460a      	mov	r2, r1
 800851a:	fb91 f6f7 	sdiv	r6, r1, r7
 800851e:	fb07 1516 	mls	r5, r7, r6, r1
 8008522:	3530      	adds	r5, #48	; 0x30
 8008524:	2a63      	cmp	r2, #99	; 0x63
 8008526:	f104 34ff 	add.w	r4, r4, #4294967295
 800852a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800852e:	4631      	mov	r1, r6
 8008530:	dcf1      	bgt.n	8008516 <__exponent+0x22>
 8008532:	3130      	adds	r1, #48	; 0x30
 8008534:	f1ae 0502 	sub.w	r5, lr, #2
 8008538:	f804 1c01 	strb.w	r1, [r4, #-1]
 800853c:	1c44      	adds	r4, r0, #1
 800853e:	4629      	mov	r1, r5
 8008540:	4561      	cmp	r1, ip
 8008542:	d30a      	bcc.n	800855a <__exponent+0x66>
 8008544:	f10d 0209 	add.w	r2, sp, #9
 8008548:	eba2 020e 	sub.w	r2, r2, lr
 800854c:	4565      	cmp	r5, ip
 800854e:	bf88      	it	hi
 8008550:	2200      	movhi	r2, #0
 8008552:	4413      	add	r3, r2
 8008554:	1a18      	subs	r0, r3, r0
 8008556:	b003      	add	sp, #12
 8008558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800855e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008562:	e7ed      	b.n	8008540 <__exponent+0x4c>
 8008564:	2330      	movs	r3, #48	; 0x30
 8008566:	3130      	adds	r1, #48	; 0x30
 8008568:	7083      	strb	r3, [r0, #2]
 800856a:	70c1      	strb	r1, [r0, #3]
 800856c:	1d03      	adds	r3, r0, #4
 800856e:	e7f1      	b.n	8008554 <__exponent+0x60>

08008570 <_printf_float>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	ed2d 8b02 	vpush	{d8}
 8008578:	b08d      	sub	sp, #52	; 0x34
 800857a:	460c      	mov	r4, r1
 800857c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008580:	4616      	mov	r6, r2
 8008582:	461f      	mov	r7, r3
 8008584:	4605      	mov	r5, r0
 8008586:	f001 fba1 	bl	8009ccc <_localeconv_r>
 800858a:	f8d0 a000 	ldr.w	sl, [r0]
 800858e:	4650      	mov	r0, sl
 8008590:	f7f7 fe30 	bl	80001f4 <strlen>
 8008594:	2300      	movs	r3, #0
 8008596:	930a      	str	r3, [sp, #40]	; 0x28
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	9305      	str	r3, [sp, #20]
 800859c:	f8d8 3000 	ldr.w	r3, [r8]
 80085a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80085a4:	3307      	adds	r3, #7
 80085a6:	f023 0307 	bic.w	r3, r3, #7
 80085aa:	f103 0208 	add.w	r2, r3, #8
 80085ae:	f8c8 2000 	str.w	r2, [r8]
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80085be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085c2:	9307      	str	r3, [sp, #28]
 80085c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80085c8:	ee08 0a10 	vmov	s16, r0
 80085cc:	4b9f      	ldr	r3, [pc, #636]	; (800884c <_printf_float+0x2dc>)
 80085ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085d2:	f04f 32ff 	mov.w	r2, #4294967295
 80085d6:	f7f8 fac1 	bl	8000b5c <__aeabi_dcmpun>
 80085da:	bb88      	cbnz	r0, 8008640 <_printf_float+0xd0>
 80085dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085e0:	4b9a      	ldr	r3, [pc, #616]	; (800884c <_printf_float+0x2dc>)
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295
 80085e6:	f7f8 fa9b 	bl	8000b20 <__aeabi_dcmple>
 80085ea:	bb48      	cbnz	r0, 8008640 <_printf_float+0xd0>
 80085ec:	2200      	movs	r2, #0
 80085ee:	2300      	movs	r3, #0
 80085f0:	4640      	mov	r0, r8
 80085f2:	4649      	mov	r1, r9
 80085f4:	f7f8 fa8a 	bl	8000b0c <__aeabi_dcmplt>
 80085f8:	b110      	cbz	r0, 8008600 <_printf_float+0x90>
 80085fa:	232d      	movs	r3, #45	; 0x2d
 80085fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008600:	4b93      	ldr	r3, [pc, #588]	; (8008850 <_printf_float+0x2e0>)
 8008602:	4894      	ldr	r0, [pc, #592]	; (8008854 <_printf_float+0x2e4>)
 8008604:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008608:	bf94      	ite	ls
 800860a:	4698      	movls	r8, r3
 800860c:	4680      	movhi	r8, r0
 800860e:	2303      	movs	r3, #3
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	9b05      	ldr	r3, [sp, #20]
 8008614:	f023 0204 	bic.w	r2, r3, #4
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	f04f 0900 	mov.w	r9, #0
 800861e:	9700      	str	r7, [sp, #0]
 8008620:	4633      	mov	r3, r6
 8008622:	aa0b      	add	r2, sp, #44	; 0x2c
 8008624:	4621      	mov	r1, r4
 8008626:	4628      	mov	r0, r5
 8008628:	f000 f9d8 	bl	80089dc <_printf_common>
 800862c:	3001      	adds	r0, #1
 800862e:	f040 8090 	bne.w	8008752 <_printf_float+0x1e2>
 8008632:	f04f 30ff 	mov.w	r0, #4294967295
 8008636:	b00d      	add	sp, #52	; 0x34
 8008638:	ecbd 8b02 	vpop	{d8}
 800863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	4642      	mov	r2, r8
 8008642:	464b      	mov	r3, r9
 8008644:	4640      	mov	r0, r8
 8008646:	4649      	mov	r1, r9
 8008648:	f7f8 fa88 	bl	8000b5c <__aeabi_dcmpun>
 800864c:	b140      	cbz	r0, 8008660 <_printf_float+0xf0>
 800864e:	464b      	mov	r3, r9
 8008650:	2b00      	cmp	r3, #0
 8008652:	bfbc      	itt	lt
 8008654:	232d      	movlt	r3, #45	; 0x2d
 8008656:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800865a:	487f      	ldr	r0, [pc, #508]	; (8008858 <_printf_float+0x2e8>)
 800865c:	4b7f      	ldr	r3, [pc, #508]	; (800885c <_printf_float+0x2ec>)
 800865e:	e7d1      	b.n	8008604 <_printf_float+0x94>
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008666:	9206      	str	r2, [sp, #24]
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	d13f      	bne.n	80086ec <_printf_float+0x17c>
 800866c:	2306      	movs	r3, #6
 800866e:	6063      	str	r3, [r4, #4]
 8008670:	9b05      	ldr	r3, [sp, #20]
 8008672:	6861      	ldr	r1, [r4, #4]
 8008674:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008678:	2300      	movs	r3, #0
 800867a:	9303      	str	r3, [sp, #12]
 800867c:	ab0a      	add	r3, sp, #40	; 0x28
 800867e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008682:	ab09      	add	r3, sp, #36	; 0x24
 8008684:	ec49 8b10 	vmov	d0, r8, r9
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	6022      	str	r2, [r4, #0]
 800868c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008690:	4628      	mov	r0, r5
 8008692:	f7ff fecd 	bl	8008430 <__cvt>
 8008696:	9b06      	ldr	r3, [sp, #24]
 8008698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800869a:	2b47      	cmp	r3, #71	; 0x47
 800869c:	4680      	mov	r8, r0
 800869e:	d108      	bne.n	80086b2 <_printf_float+0x142>
 80086a0:	1cc8      	adds	r0, r1, #3
 80086a2:	db02      	blt.n	80086aa <_printf_float+0x13a>
 80086a4:	6863      	ldr	r3, [r4, #4]
 80086a6:	4299      	cmp	r1, r3
 80086a8:	dd41      	ble.n	800872e <_printf_float+0x1be>
 80086aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80086ae:	fa5f fb8b 	uxtb.w	fp, fp
 80086b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086b6:	d820      	bhi.n	80086fa <_printf_float+0x18a>
 80086b8:	3901      	subs	r1, #1
 80086ba:	465a      	mov	r2, fp
 80086bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086c0:	9109      	str	r1, [sp, #36]	; 0x24
 80086c2:	f7ff ff17 	bl	80084f4 <__exponent>
 80086c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086c8:	1813      	adds	r3, r2, r0
 80086ca:	2a01      	cmp	r2, #1
 80086cc:	4681      	mov	r9, r0
 80086ce:	6123      	str	r3, [r4, #16]
 80086d0:	dc02      	bgt.n	80086d8 <_printf_float+0x168>
 80086d2:	6822      	ldr	r2, [r4, #0]
 80086d4:	07d2      	lsls	r2, r2, #31
 80086d6:	d501      	bpl.n	80086dc <_printf_float+0x16c>
 80086d8:	3301      	adds	r3, #1
 80086da:	6123      	str	r3, [r4, #16]
 80086dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d09c      	beq.n	800861e <_printf_float+0xae>
 80086e4:	232d      	movs	r3, #45	; 0x2d
 80086e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ea:	e798      	b.n	800861e <_printf_float+0xae>
 80086ec:	9a06      	ldr	r2, [sp, #24]
 80086ee:	2a47      	cmp	r2, #71	; 0x47
 80086f0:	d1be      	bne.n	8008670 <_printf_float+0x100>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1bc      	bne.n	8008670 <_printf_float+0x100>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e7b9      	b.n	800866e <_printf_float+0xfe>
 80086fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80086fe:	d118      	bne.n	8008732 <_printf_float+0x1c2>
 8008700:	2900      	cmp	r1, #0
 8008702:	6863      	ldr	r3, [r4, #4]
 8008704:	dd0b      	ble.n	800871e <_printf_float+0x1ae>
 8008706:	6121      	str	r1, [r4, #16]
 8008708:	b913      	cbnz	r3, 8008710 <_printf_float+0x1a0>
 800870a:	6822      	ldr	r2, [r4, #0]
 800870c:	07d0      	lsls	r0, r2, #31
 800870e:	d502      	bpl.n	8008716 <_printf_float+0x1a6>
 8008710:	3301      	adds	r3, #1
 8008712:	440b      	add	r3, r1
 8008714:	6123      	str	r3, [r4, #16]
 8008716:	65a1      	str	r1, [r4, #88]	; 0x58
 8008718:	f04f 0900 	mov.w	r9, #0
 800871c:	e7de      	b.n	80086dc <_printf_float+0x16c>
 800871e:	b913      	cbnz	r3, 8008726 <_printf_float+0x1b6>
 8008720:	6822      	ldr	r2, [r4, #0]
 8008722:	07d2      	lsls	r2, r2, #31
 8008724:	d501      	bpl.n	800872a <_printf_float+0x1ba>
 8008726:	3302      	adds	r3, #2
 8008728:	e7f4      	b.n	8008714 <_printf_float+0x1a4>
 800872a:	2301      	movs	r3, #1
 800872c:	e7f2      	b.n	8008714 <_printf_float+0x1a4>
 800872e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008734:	4299      	cmp	r1, r3
 8008736:	db05      	blt.n	8008744 <_printf_float+0x1d4>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	6121      	str	r1, [r4, #16]
 800873c:	07d8      	lsls	r0, r3, #31
 800873e:	d5ea      	bpl.n	8008716 <_printf_float+0x1a6>
 8008740:	1c4b      	adds	r3, r1, #1
 8008742:	e7e7      	b.n	8008714 <_printf_float+0x1a4>
 8008744:	2900      	cmp	r1, #0
 8008746:	bfd4      	ite	le
 8008748:	f1c1 0202 	rsble	r2, r1, #2
 800874c:	2201      	movgt	r2, #1
 800874e:	4413      	add	r3, r2
 8008750:	e7e0      	b.n	8008714 <_printf_float+0x1a4>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	055a      	lsls	r2, r3, #21
 8008756:	d407      	bmi.n	8008768 <_printf_float+0x1f8>
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	4642      	mov	r2, r8
 800875c:	4631      	mov	r1, r6
 800875e:	4628      	mov	r0, r5
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	d12c      	bne.n	80087c0 <_printf_float+0x250>
 8008766:	e764      	b.n	8008632 <_printf_float+0xc2>
 8008768:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800876c:	f240 80e0 	bls.w	8008930 <_printf_float+0x3c0>
 8008770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008774:	2200      	movs	r2, #0
 8008776:	2300      	movs	r3, #0
 8008778:	f7f8 f9be 	bl	8000af8 <__aeabi_dcmpeq>
 800877c:	2800      	cmp	r0, #0
 800877e:	d034      	beq.n	80087ea <_printf_float+0x27a>
 8008780:	4a37      	ldr	r2, [pc, #220]	; (8008860 <_printf_float+0x2f0>)
 8008782:	2301      	movs	r3, #1
 8008784:	4631      	mov	r1, r6
 8008786:	4628      	mov	r0, r5
 8008788:	47b8      	blx	r7
 800878a:	3001      	adds	r0, #1
 800878c:	f43f af51 	beq.w	8008632 <_printf_float+0xc2>
 8008790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008794:	429a      	cmp	r2, r3
 8008796:	db02      	blt.n	800879e <_printf_float+0x22e>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	07d8      	lsls	r0, r3, #31
 800879c:	d510      	bpl.n	80087c0 <_printf_float+0x250>
 800879e:	ee18 3a10 	vmov	r3, s16
 80087a2:	4652      	mov	r2, sl
 80087a4:	4631      	mov	r1, r6
 80087a6:	4628      	mov	r0, r5
 80087a8:	47b8      	blx	r7
 80087aa:	3001      	adds	r0, #1
 80087ac:	f43f af41 	beq.w	8008632 <_printf_float+0xc2>
 80087b0:	f04f 0800 	mov.w	r8, #0
 80087b4:	f104 091a 	add.w	r9, r4, #26
 80087b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ba:	3b01      	subs	r3, #1
 80087bc:	4543      	cmp	r3, r8
 80087be:	dc09      	bgt.n	80087d4 <_printf_float+0x264>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	079b      	lsls	r3, r3, #30
 80087c4:	f100 8105 	bmi.w	80089d2 <_printf_float+0x462>
 80087c8:	68e0      	ldr	r0, [r4, #12]
 80087ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087cc:	4298      	cmp	r0, r3
 80087ce:	bfb8      	it	lt
 80087d0:	4618      	movlt	r0, r3
 80087d2:	e730      	b.n	8008636 <_printf_float+0xc6>
 80087d4:	2301      	movs	r3, #1
 80087d6:	464a      	mov	r2, r9
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	47b8      	blx	r7
 80087de:	3001      	adds	r0, #1
 80087e0:	f43f af27 	beq.w	8008632 <_printf_float+0xc2>
 80087e4:	f108 0801 	add.w	r8, r8, #1
 80087e8:	e7e6      	b.n	80087b8 <_printf_float+0x248>
 80087ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dc39      	bgt.n	8008864 <_printf_float+0x2f4>
 80087f0:	4a1b      	ldr	r2, [pc, #108]	; (8008860 <_printf_float+0x2f0>)
 80087f2:	2301      	movs	r3, #1
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	f43f af19 	beq.w	8008632 <_printf_float+0xc2>
 8008800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008804:	4313      	orrs	r3, r2
 8008806:	d102      	bne.n	800880e <_printf_float+0x29e>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	07d9      	lsls	r1, r3, #31
 800880c:	d5d8      	bpl.n	80087c0 <_printf_float+0x250>
 800880e:	ee18 3a10 	vmov	r3, s16
 8008812:	4652      	mov	r2, sl
 8008814:	4631      	mov	r1, r6
 8008816:	4628      	mov	r0, r5
 8008818:	47b8      	blx	r7
 800881a:	3001      	adds	r0, #1
 800881c:	f43f af09 	beq.w	8008632 <_printf_float+0xc2>
 8008820:	f04f 0900 	mov.w	r9, #0
 8008824:	f104 0a1a 	add.w	sl, r4, #26
 8008828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800882a:	425b      	negs	r3, r3
 800882c:	454b      	cmp	r3, r9
 800882e:	dc01      	bgt.n	8008834 <_printf_float+0x2c4>
 8008830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008832:	e792      	b.n	800875a <_printf_float+0x1ea>
 8008834:	2301      	movs	r3, #1
 8008836:	4652      	mov	r2, sl
 8008838:	4631      	mov	r1, r6
 800883a:	4628      	mov	r0, r5
 800883c:	47b8      	blx	r7
 800883e:	3001      	adds	r0, #1
 8008840:	f43f aef7 	beq.w	8008632 <_printf_float+0xc2>
 8008844:	f109 0901 	add.w	r9, r9, #1
 8008848:	e7ee      	b.n	8008828 <_printf_float+0x2b8>
 800884a:	bf00      	nop
 800884c:	7fefffff 	.word	0x7fefffff
 8008850:	0800c840 	.word	0x0800c840
 8008854:	0800c844 	.word	0x0800c844
 8008858:	0800c84c 	.word	0x0800c84c
 800885c:	0800c848 	.word	0x0800c848
 8008860:	0800cb71 	.word	0x0800cb71
 8008864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008868:	429a      	cmp	r2, r3
 800886a:	bfa8      	it	ge
 800886c:	461a      	movge	r2, r3
 800886e:	2a00      	cmp	r2, #0
 8008870:	4691      	mov	r9, r2
 8008872:	dc37      	bgt.n	80088e4 <_printf_float+0x374>
 8008874:	f04f 0b00 	mov.w	fp, #0
 8008878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800887c:	f104 021a 	add.w	r2, r4, #26
 8008880:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008882:	9305      	str	r3, [sp, #20]
 8008884:	eba3 0309 	sub.w	r3, r3, r9
 8008888:	455b      	cmp	r3, fp
 800888a:	dc33      	bgt.n	80088f4 <_printf_float+0x384>
 800888c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008890:	429a      	cmp	r2, r3
 8008892:	db3b      	blt.n	800890c <_printf_float+0x39c>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	07da      	lsls	r2, r3, #31
 8008898:	d438      	bmi.n	800890c <_printf_float+0x39c>
 800889a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800889c:	9a05      	ldr	r2, [sp, #20]
 800889e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088a0:	1a9a      	subs	r2, r3, r2
 80088a2:	eba3 0901 	sub.w	r9, r3, r1
 80088a6:	4591      	cmp	r9, r2
 80088a8:	bfa8      	it	ge
 80088aa:	4691      	movge	r9, r2
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	dc35      	bgt.n	800891e <_printf_float+0x3ae>
 80088b2:	f04f 0800 	mov.w	r8, #0
 80088b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ba:	f104 0a1a 	add.w	sl, r4, #26
 80088be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	eba3 0309 	sub.w	r3, r3, r9
 80088c8:	4543      	cmp	r3, r8
 80088ca:	f77f af79 	ble.w	80087c0 <_printf_float+0x250>
 80088ce:	2301      	movs	r3, #1
 80088d0:	4652      	mov	r2, sl
 80088d2:	4631      	mov	r1, r6
 80088d4:	4628      	mov	r0, r5
 80088d6:	47b8      	blx	r7
 80088d8:	3001      	adds	r0, #1
 80088da:	f43f aeaa 	beq.w	8008632 <_printf_float+0xc2>
 80088de:	f108 0801 	add.w	r8, r8, #1
 80088e2:	e7ec      	b.n	80088be <_printf_float+0x34e>
 80088e4:	4613      	mov	r3, r2
 80088e6:	4631      	mov	r1, r6
 80088e8:	4642      	mov	r2, r8
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	d1c0      	bne.n	8008874 <_printf_float+0x304>
 80088f2:	e69e      	b.n	8008632 <_printf_float+0xc2>
 80088f4:	2301      	movs	r3, #1
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	9205      	str	r2, [sp, #20]
 80088fc:	47b8      	blx	r7
 80088fe:	3001      	adds	r0, #1
 8008900:	f43f ae97 	beq.w	8008632 <_printf_float+0xc2>
 8008904:	9a05      	ldr	r2, [sp, #20]
 8008906:	f10b 0b01 	add.w	fp, fp, #1
 800890a:	e7b9      	b.n	8008880 <_printf_float+0x310>
 800890c:	ee18 3a10 	vmov	r3, s16
 8008910:	4652      	mov	r2, sl
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	d1be      	bne.n	800889a <_printf_float+0x32a>
 800891c:	e689      	b.n	8008632 <_printf_float+0xc2>
 800891e:	9a05      	ldr	r2, [sp, #20]
 8008920:	464b      	mov	r3, r9
 8008922:	4442      	add	r2, r8
 8008924:	4631      	mov	r1, r6
 8008926:	4628      	mov	r0, r5
 8008928:	47b8      	blx	r7
 800892a:	3001      	adds	r0, #1
 800892c:	d1c1      	bne.n	80088b2 <_printf_float+0x342>
 800892e:	e680      	b.n	8008632 <_printf_float+0xc2>
 8008930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008932:	2a01      	cmp	r2, #1
 8008934:	dc01      	bgt.n	800893a <_printf_float+0x3ca>
 8008936:	07db      	lsls	r3, r3, #31
 8008938:	d538      	bpl.n	80089ac <_printf_float+0x43c>
 800893a:	2301      	movs	r3, #1
 800893c:	4642      	mov	r2, r8
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	f43f ae74 	beq.w	8008632 <_printf_float+0xc2>
 800894a:	ee18 3a10 	vmov	r3, s16
 800894e:	4652      	mov	r2, sl
 8008950:	4631      	mov	r1, r6
 8008952:	4628      	mov	r0, r5
 8008954:	47b8      	blx	r7
 8008956:	3001      	adds	r0, #1
 8008958:	f43f ae6b 	beq.w	8008632 <_printf_float+0xc2>
 800895c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008960:	2200      	movs	r2, #0
 8008962:	2300      	movs	r3, #0
 8008964:	f7f8 f8c8 	bl	8000af8 <__aeabi_dcmpeq>
 8008968:	b9d8      	cbnz	r0, 80089a2 <_printf_float+0x432>
 800896a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896c:	f108 0201 	add.w	r2, r8, #1
 8008970:	3b01      	subs	r3, #1
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	d10e      	bne.n	800899a <_printf_float+0x42a>
 800897c:	e659      	b.n	8008632 <_printf_float+0xc2>
 800897e:	2301      	movs	r3, #1
 8008980:	4652      	mov	r2, sl
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f ae52 	beq.w	8008632 <_printf_float+0xc2>
 800898e:	f108 0801 	add.w	r8, r8, #1
 8008992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008994:	3b01      	subs	r3, #1
 8008996:	4543      	cmp	r3, r8
 8008998:	dcf1      	bgt.n	800897e <_printf_float+0x40e>
 800899a:	464b      	mov	r3, r9
 800899c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089a0:	e6dc      	b.n	800875c <_printf_float+0x1ec>
 80089a2:	f04f 0800 	mov.w	r8, #0
 80089a6:	f104 0a1a 	add.w	sl, r4, #26
 80089aa:	e7f2      	b.n	8008992 <_printf_float+0x422>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4642      	mov	r2, r8
 80089b0:	e7df      	b.n	8008972 <_printf_float+0x402>
 80089b2:	2301      	movs	r3, #1
 80089b4:	464a      	mov	r2, r9
 80089b6:	4631      	mov	r1, r6
 80089b8:	4628      	mov	r0, r5
 80089ba:	47b8      	blx	r7
 80089bc:	3001      	adds	r0, #1
 80089be:	f43f ae38 	beq.w	8008632 <_printf_float+0xc2>
 80089c2:	f108 0801 	add.w	r8, r8, #1
 80089c6:	68e3      	ldr	r3, [r4, #12]
 80089c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089ca:	1a5b      	subs	r3, r3, r1
 80089cc:	4543      	cmp	r3, r8
 80089ce:	dcf0      	bgt.n	80089b2 <_printf_float+0x442>
 80089d0:	e6fa      	b.n	80087c8 <_printf_float+0x258>
 80089d2:	f04f 0800 	mov.w	r8, #0
 80089d6:	f104 0919 	add.w	r9, r4, #25
 80089da:	e7f4      	b.n	80089c6 <_printf_float+0x456>

080089dc <_printf_common>:
 80089dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e0:	4616      	mov	r6, r2
 80089e2:	4699      	mov	r9, r3
 80089e4:	688a      	ldr	r2, [r1, #8]
 80089e6:	690b      	ldr	r3, [r1, #16]
 80089e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089ec:	4293      	cmp	r3, r2
 80089ee:	bfb8      	it	lt
 80089f0:	4613      	movlt	r3, r2
 80089f2:	6033      	str	r3, [r6, #0]
 80089f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089f8:	4607      	mov	r7, r0
 80089fa:	460c      	mov	r4, r1
 80089fc:	b10a      	cbz	r2, 8008a02 <_printf_common+0x26>
 80089fe:	3301      	adds	r3, #1
 8008a00:	6033      	str	r3, [r6, #0]
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	0699      	lsls	r1, r3, #26
 8008a06:	bf42      	ittt	mi
 8008a08:	6833      	ldrmi	r3, [r6, #0]
 8008a0a:	3302      	addmi	r3, #2
 8008a0c:	6033      	strmi	r3, [r6, #0]
 8008a0e:	6825      	ldr	r5, [r4, #0]
 8008a10:	f015 0506 	ands.w	r5, r5, #6
 8008a14:	d106      	bne.n	8008a24 <_printf_common+0x48>
 8008a16:	f104 0a19 	add.w	sl, r4, #25
 8008a1a:	68e3      	ldr	r3, [r4, #12]
 8008a1c:	6832      	ldr	r2, [r6, #0]
 8008a1e:	1a9b      	subs	r3, r3, r2
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	dc26      	bgt.n	8008a72 <_printf_common+0x96>
 8008a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a28:	1e13      	subs	r3, r2, #0
 8008a2a:	6822      	ldr	r2, [r4, #0]
 8008a2c:	bf18      	it	ne
 8008a2e:	2301      	movne	r3, #1
 8008a30:	0692      	lsls	r2, r2, #26
 8008a32:	d42b      	bmi.n	8008a8c <_printf_common+0xb0>
 8008a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a38:	4649      	mov	r1, r9
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	47c0      	blx	r8
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d01e      	beq.n	8008a80 <_printf_common+0xa4>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	68e5      	ldr	r5, [r4, #12]
 8008a46:	6832      	ldr	r2, [r6, #0]
 8008a48:	f003 0306 	and.w	r3, r3, #6
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	bf08      	it	eq
 8008a50:	1aad      	subeq	r5, r5, r2
 8008a52:	68a3      	ldr	r3, [r4, #8]
 8008a54:	6922      	ldr	r2, [r4, #16]
 8008a56:	bf0c      	ite	eq
 8008a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a5c:	2500      	movne	r5, #0
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	bfc4      	itt	gt
 8008a62:	1a9b      	subgt	r3, r3, r2
 8008a64:	18ed      	addgt	r5, r5, r3
 8008a66:	2600      	movs	r6, #0
 8008a68:	341a      	adds	r4, #26
 8008a6a:	42b5      	cmp	r5, r6
 8008a6c:	d11a      	bne.n	8008aa4 <_printf_common+0xc8>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	e008      	b.n	8008a84 <_printf_common+0xa8>
 8008a72:	2301      	movs	r3, #1
 8008a74:	4652      	mov	r2, sl
 8008a76:	4649      	mov	r1, r9
 8008a78:	4638      	mov	r0, r7
 8008a7a:	47c0      	blx	r8
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d103      	bne.n	8008a88 <_printf_common+0xac>
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a88:	3501      	adds	r5, #1
 8008a8a:	e7c6      	b.n	8008a1a <_printf_common+0x3e>
 8008a8c:	18e1      	adds	r1, r4, r3
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	2030      	movs	r0, #48	; 0x30
 8008a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a96:	4422      	add	r2, r4
 8008a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008aa0:	3302      	adds	r3, #2
 8008aa2:	e7c7      	b.n	8008a34 <_printf_common+0x58>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	4638      	mov	r0, r7
 8008aac:	47c0      	blx	r8
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d0e6      	beq.n	8008a80 <_printf_common+0xa4>
 8008ab2:	3601      	adds	r6, #1
 8008ab4:	e7d9      	b.n	8008a6a <_printf_common+0x8e>
	...

08008ab8 <_printf_i>:
 8008ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008abc:	7e0f      	ldrb	r7, [r1, #24]
 8008abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ac0:	2f78      	cmp	r7, #120	; 0x78
 8008ac2:	4691      	mov	r9, r2
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	469a      	mov	sl, r3
 8008aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ace:	d807      	bhi.n	8008ae0 <_printf_i+0x28>
 8008ad0:	2f62      	cmp	r7, #98	; 0x62
 8008ad2:	d80a      	bhi.n	8008aea <_printf_i+0x32>
 8008ad4:	2f00      	cmp	r7, #0
 8008ad6:	f000 80d8 	beq.w	8008c8a <_printf_i+0x1d2>
 8008ada:	2f58      	cmp	r7, #88	; 0x58
 8008adc:	f000 80a3 	beq.w	8008c26 <_printf_i+0x16e>
 8008ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ae8:	e03a      	b.n	8008b60 <_printf_i+0xa8>
 8008aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aee:	2b15      	cmp	r3, #21
 8008af0:	d8f6      	bhi.n	8008ae0 <_printf_i+0x28>
 8008af2:	a101      	add	r1, pc, #4	; (adr r1, 8008af8 <_printf_i+0x40>)
 8008af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008af8:	08008b51 	.word	0x08008b51
 8008afc:	08008b65 	.word	0x08008b65
 8008b00:	08008ae1 	.word	0x08008ae1
 8008b04:	08008ae1 	.word	0x08008ae1
 8008b08:	08008ae1 	.word	0x08008ae1
 8008b0c:	08008ae1 	.word	0x08008ae1
 8008b10:	08008b65 	.word	0x08008b65
 8008b14:	08008ae1 	.word	0x08008ae1
 8008b18:	08008ae1 	.word	0x08008ae1
 8008b1c:	08008ae1 	.word	0x08008ae1
 8008b20:	08008ae1 	.word	0x08008ae1
 8008b24:	08008c71 	.word	0x08008c71
 8008b28:	08008b95 	.word	0x08008b95
 8008b2c:	08008c53 	.word	0x08008c53
 8008b30:	08008ae1 	.word	0x08008ae1
 8008b34:	08008ae1 	.word	0x08008ae1
 8008b38:	08008c93 	.word	0x08008c93
 8008b3c:	08008ae1 	.word	0x08008ae1
 8008b40:	08008b95 	.word	0x08008b95
 8008b44:	08008ae1 	.word	0x08008ae1
 8008b48:	08008ae1 	.word	0x08008ae1
 8008b4c:	08008c5b 	.word	0x08008c5b
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	1d1a      	adds	r2, r3, #4
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	602a      	str	r2, [r5, #0]
 8008b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b60:	2301      	movs	r3, #1
 8008b62:	e0a3      	b.n	8008cac <_printf_i+0x1f4>
 8008b64:	6820      	ldr	r0, [r4, #0]
 8008b66:	6829      	ldr	r1, [r5, #0]
 8008b68:	0606      	lsls	r6, r0, #24
 8008b6a:	f101 0304 	add.w	r3, r1, #4
 8008b6e:	d50a      	bpl.n	8008b86 <_printf_i+0xce>
 8008b70:	680e      	ldr	r6, [r1, #0]
 8008b72:	602b      	str	r3, [r5, #0]
 8008b74:	2e00      	cmp	r6, #0
 8008b76:	da03      	bge.n	8008b80 <_printf_i+0xc8>
 8008b78:	232d      	movs	r3, #45	; 0x2d
 8008b7a:	4276      	negs	r6, r6
 8008b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b80:	485e      	ldr	r0, [pc, #376]	; (8008cfc <_printf_i+0x244>)
 8008b82:	230a      	movs	r3, #10
 8008b84:	e019      	b.n	8008bba <_printf_i+0x102>
 8008b86:	680e      	ldr	r6, [r1, #0]
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b8e:	bf18      	it	ne
 8008b90:	b236      	sxthne	r6, r6
 8008b92:	e7ef      	b.n	8008b74 <_printf_i+0xbc>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	1d19      	adds	r1, r3, #4
 8008b9a:	6029      	str	r1, [r5, #0]
 8008b9c:	0601      	lsls	r1, r0, #24
 8008b9e:	d501      	bpl.n	8008ba4 <_printf_i+0xec>
 8008ba0:	681e      	ldr	r6, [r3, #0]
 8008ba2:	e002      	b.n	8008baa <_printf_i+0xf2>
 8008ba4:	0646      	lsls	r6, r0, #25
 8008ba6:	d5fb      	bpl.n	8008ba0 <_printf_i+0xe8>
 8008ba8:	881e      	ldrh	r6, [r3, #0]
 8008baa:	4854      	ldr	r0, [pc, #336]	; (8008cfc <_printf_i+0x244>)
 8008bac:	2f6f      	cmp	r7, #111	; 0x6f
 8008bae:	bf0c      	ite	eq
 8008bb0:	2308      	moveq	r3, #8
 8008bb2:	230a      	movne	r3, #10
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bba:	6865      	ldr	r5, [r4, #4]
 8008bbc:	60a5      	str	r5, [r4, #8]
 8008bbe:	2d00      	cmp	r5, #0
 8008bc0:	bfa2      	ittt	ge
 8008bc2:	6821      	ldrge	r1, [r4, #0]
 8008bc4:	f021 0104 	bicge.w	r1, r1, #4
 8008bc8:	6021      	strge	r1, [r4, #0]
 8008bca:	b90e      	cbnz	r6, 8008bd0 <_printf_i+0x118>
 8008bcc:	2d00      	cmp	r5, #0
 8008bce:	d04d      	beq.n	8008c6c <_printf_i+0x1b4>
 8008bd0:	4615      	mov	r5, r2
 8008bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8008bda:	5dc7      	ldrb	r7, [r0, r7]
 8008bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008be0:	4637      	mov	r7, r6
 8008be2:	42bb      	cmp	r3, r7
 8008be4:	460e      	mov	r6, r1
 8008be6:	d9f4      	bls.n	8008bd2 <_printf_i+0x11a>
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	d10b      	bne.n	8008c04 <_printf_i+0x14c>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	07de      	lsls	r6, r3, #31
 8008bf0:	d508      	bpl.n	8008c04 <_printf_i+0x14c>
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	6861      	ldr	r1, [r4, #4]
 8008bf6:	4299      	cmp	r1, r3
 8008bf8:	bfde      	ittt	le
 8008bfa:	2330      	movle	r3, #48	; 0x30
 8008bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c04:	1b52      	subs	r2, r2, r5
 8008c06:	6122      	str	r2, [r4, #16]
 8008c08:	f8cd a000 	str.w	sl, [sp]
 8008c0c:	464b      	mov	r3, r9
 8008c0e:	aa03      	add	r2, sp, #12
 8008c10:	4621      	mov	r1, r4
 8008c12:	4640      	mov	r0, r8
 8008c14:	f7ff fee2 	bl	80089dc <_printf_common>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d14c      	bne.n	8008cb6 <_printf_i+0x1fe>
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	b004      	add	sp, #16
 8008c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c26:	4835      	ldr	r0, [pc, #212]	; (8008cfc <_printf_i+0x244>)
 8008c28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c2c:	6829      	ldr	r1, [r5, #0]
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c34:	6029      	str	r1, [r5, #0]
 8008c36:	061d      	lsls	r5, r3, #24
 8008c38:	d514      	bpl.n	8008c64 <_printf_i+0x1ac>
 8008c3a:	07df      	lsls	r7, r3, #31
 8008c3c:	bf44      	itt	mi
 8008c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c42:	6023      	strmi	r3, [r4, #0]
 8008c44:	b91e      	cbnz	r6, 8008c4e <_printf_i+0x196>
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	f023 0320 	bic.w	r3, r3, #32
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	2310      	movs	r3, #16
 8008c50:	e7b0      	b.n	8008bb4 <_printf_i+0xfc>
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	f043 0320 	orr.w	r3, r3, #32
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	2378      	movs	r3, #120	; 0x78
 8008c5c:	4828      	ldr	r0, [pc, #160]	; (8008d00 <_printf_i+0x248>)
 8008c5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c62:	e7e3      	b.n	8008c2c <_printf_i+0x174>
 8008c64:	0659      	lsls	r1, r3, #25
 8008c66:	bf48      	it	mi
 8008c68:	b2b6      	uxthmi	r6, r6
 8008c6a:	e7e6      	b.n	8008c3a <_printf_i+0x182>
 8008c6c:	4615      	mov	r5, r2
 8008c6e:	e7bb      	b.n	8008be8 <_printf_i+0x130>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	6826      	ldr	r6, [r4, #0]
 8008c74:	6961      	ldr	r1, [r4, #20]
 8008c76:	1d18      	adds	r0, r3, #4
 8008c78:	6028      	str	r0, [r5, #0]
 8008c7a:	0635      	lsls	r5, r6, #24
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	d501      	bpl.n	8008c84 <_printf_i+0x1cc>
 8008c80:	6019      	str	r1, [r3, #0]
 8008c82:	e002      	b.n	8008c8a <_printf_i+0x1d2>
 8008c84:	0670      	lsls	r0, r6, #25
 8008c86:	d5fb      	bpl.n	8008c80 <_printf_i+0x1c8>
 8008c88:	8019      	strh	r1, [r3, #0]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	6123      	str	r3, [r4, #16]
 8008c8e:	4615      	mov	r5, r2
 8008c90:	e7ba      	b.n	8008c08 <_printf_i+0x150>
 8008c92:	682b      	ldr	r3, [r5, #0]
 8008c94:	1d1a      	adds	r2, r3, #4
 8008c96:	602a      	str	r2, [r5, #0]
 8008c98:	681d      	ldr	r5, [r3, #0]
 8008c9a:	6862      	ldr	r2, [r4, #4]
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f7f7 fab6 	bl	8000210 <memchr>
 8008ca4:	b108      	cbz	r0, 8008caa <_printf_i+0x1f2>
 8008ca6:	1b40      	subs	r0, r0, r5
 8008ca8:	6060      	str	r0, [r4, #4]
 8008caa:	6863      	ldr	r3, [r4, #4]
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb4:	e7a8      	b.n	8008c08 <_printf_i+0x150>
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	462a      	mov	r2, r5
 8008cba:	4649      	mov	r1, r9
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	47d0      	blx	sl
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d0ab      	beq.n	8008c1c <_printf_i+0x164>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	079b      	lsls	r3, r3, #30
 8008cc8:	d413      	bmi.n	8008cf2 <_printf_i+0x23a>
 8008cca:	68e0      	ldr	r0, [r4, #12]
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	4298      	cmp	r0, r3
 8008cd0:	bfb8      	it	lt
 8008cd2:	4618      	movlt	r0, r3
 8008cd4:	e7a4      	b.n	8008c20 <_printf_i+0x168>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4632      	mov	r2, r6
 8008cda:	4649      	mov	r1, r9
 8008cdc:	4640      	mov	r0, r8
 8008cde:	47d0      	blx	sl
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d09b      	beq.n	8008c1c <_printf_i+0x164>
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	68e3      	ldr	r3, [r4, #12]
 8008ce8:	9903      	ldr	r1, [sp, #12]
 8008cea:	1a5b      	subs	r3, r3, r1
 8008cec:	42ab      	cmp	r3, r5
 8008cee:	dcf2      	bgt.n	8008cd6 <_printf_i+0x21e>
 8008cf0:	e7eb      	b.n	8008cca <_printf_i+0x212>
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	f104 0619 	add.w	r6, r4, #25
 8008cf8:	e7f5      	b.n	8008ce6 <_printf_i+0x22e>
 8008cfa:	bf00      	nop
 8008cfc:	0800c850 	.word	0x0800c850
 8008d00:	0800c861 	.word	0x0800c861

08008d04 <siprintf>:
 8008d04:	b40e      	push	{r1, r2, r3}
 8008d06:	b500      	push	{lr}
 8008d08:	b09c      	sub	sp, #112	; 0x70
 8008d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8008d0c:	9002      	str	r0, [sp, #8]
 8008d0e:	9006      	str	r0, [sp, #24]
 8008d10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d14:	4809      	ldr	r0, [pc, #36]	; (8008d3c <siprintf+0x38>)
 8008d16:	9107      	str	r1, [sp, #28]
 8008d18:	9104      	str	r1, [sp, #16]
 8008d1a:	4909      	ldr	r1, [pc, #36]	; (8008d40 <siprintf+0x3c>)
 8008d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d20:	9105      	str	r1, [sp, #20]
 8008d22:	6800      	ldr	r0, [r0, #0]
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	a902      	add	r1, sp, #8
 8008d28:	f001 fcd2 	bl	800a6d0 <_svfiprintf_r>
 8008d2c:	9b02      	ldr	r3, [sp, #8]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	b01c      	add	sp, #112	; 0x70
 8008d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d38:	b003      	add	sp, #12
 8008d3a:	4770      	bx	lr
 8008d3c:	2000009c 	.word	0x2000009c
 8008d40:	ffff0208 	.word	0xffff0208

08008d44 <siscanf>:
 8008d44:	b40e      	push	{r1, r2, r3}
 8008d46:	b510      	push	{r4, lr}
 8008d48:	b09f      	sub	sp, #124	; 0x7c
 8008d4a:	ac21      	add	r4, sp, #132	; 0x84
 8008d4c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008d50:	f854 2b04 	ldr.w	r2, [r4], #4
 8008d54:	9201      	str	r2, [sp, #4]
 8008d56:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008d5a:	9004      	str	r0, [sp, #16]
 8008d5c:	9008      	str	r0, [sp, #32]
 8008d5e:	f7f7 fa49 	bl	80001f4 <strlen>
 8008d62:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <siscanf+0x50>)
 8008d64:	9005      	str	r0, [sp, #20]
 8008d66:	9009      	str	r0, [sp, #36]	; 0x24
 8008d68:	930d      	str	r3, [sp, #52]	; 0x34
 8008d6a:	480b      	ldr	r0, [pc, #44]	; (8008d98 <siscanf+0x54>)
 8008d6c:	9a01      	ldr	r2, [sp, #4]
 8008d6e:	6800      	ldr	r0, [r0, #0]
 8008d70:	9403      	str	r4, [sp, #12]
 8008d72:	2300      	movs	r3, #0
 8008d74:	9311      	str	r3, [sp, #68]	; 0x44
 8008d76:	9316      	str	r3, [sp, #88]	; 0x58
 8008d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008d80:	a904      	add	r1, sp, #16
 8008d82:	4623      	mov	r3, r4
 8008d84:	f001 fdfe 	bl	800a984 <__ssvfiscanf_r>
 8008d88:	b01f      	add	sp, #124	; 0x7c
 8008d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d8e:	b003      	add	sp, #12
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	08008dbf 	.word	0x08008dbf
 8008d98:	2000009c 	.word	0x2000009c

08008d9c <__sread>:
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	460c      	mov	r4, r1
 8008da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da4:	f002 f8b8 	bl	800af18 <_read_r>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	bfab      	itete	ge
 8008dac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dae:	89a3      	ldrhlt	r3, [r4, #12]
 8008db0:	181b      	addge	r3, r3, r0
 8008db2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008db6:	bfac      	ite	ge
 8008db8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dba:	81a3      	strhlt	r3, [r4, #12]
 8008dbc:	bd10      	pop	{r4, pc}

08008dbe <__seofread>:
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	4770      	bx	lr

08008dc2 <__swrite>:
 8008dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc6:	461f      	mov	r7, r3
 8008dc8:	898b      	ldrh	r3, [r1, #12]
 8008dca:	05db      	lsls	r3, r3, #23
 8008dcc:	4605      	mov	r5, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	d505      	bpl.n	8008de0 <__swrite+0x1e>
 8008dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd8:	2302      	movs	r3, #2
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f000 ff7a 	bl	8009cd4 <_lseek_r>
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dea:	81a3      	strh	r3, [r4, #12]
 8008dec:	4632      	mov	r2, r6
 8008dee:	463b      	mov	r3, r7
 8008df0:	4628      	mov	r0, r5
 8008df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df6:	f000 b8cd 	b.w	8008f94 <_write_r>

08008dfa <__sseek>:
 8008dfa:	b510      	push	{r4, lr}
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e02:	f000 ff67 	bl	8009cd4 <_lseek_r>
 8008e06:	1c43      	adds	r3, r0, #1
 8008e08:	89a3      	ldrh	r3, [r4, #12]
 8008e0a:	bf15      	itete	ne
 8008e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e16:	81a3      	strheq	r3, [r4, #12]
 8008e18:	bf18      	it	ne
 8008e1a:	81a3      	strhne	r3, [r4, #12]
 8008e1c:	bd10      	pop	{r4, pc}

08008e1e <__sclose>:
 8008e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e22:	f000 b8c9 	b.w	8008fb8 <_close_r>

08008e26 <strchr>:
 8008e26:	b2c9      	uxtb	r1, r1
 8008e28:	4603      	mov	r3, r0
 8008e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2e:	b11a      	cbz	r2, 8008e38 <strchr+0x12>
 8008e30:	428a      	cmp	r2, r1
 8008e32:	d1f9      	bne.n	8008e28 <strchr+0x2>
 8008e34:	4618      	mov	r0, r3
 8008e36:	4770      	bx	lr
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	bf18      	it	ne
 8008e3c:	2300      	movne	r3, #0
 8008e3e:	e7f9      	b.n	8008e34 <strchr+0xe>

08008e40 <strcpy>:
 8008e40:	4603      	mov	r3, r0
 8008e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e46:	f803 2b01 	strb.w	r2, [r3], #1
 8008e4a:	2a00      	cmp	r2, #0
 8008e4c:	d1f9      	bne.n	8008e42 <strcpy+0x2>
 8008e4e:	4770      	bx	lr

08008e50 <strncmp>:
 8008e50:	b510      	push	{r4, lr}
 8008e52:	b17a      	cbz	r2, 8008e74 <strncmp+0x24>
 8008e54:	4603      	mov	r3, r0
 8008e56:	3901      	subs	r1, #1
 8008e58:	1884      	adds	r4, r0, r2
 8008e5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e62:	4290      	cmp	r0, r2
 8008e64:	d101      	bne.n	8008e6a <strncmp+0x1a>
 8008e66:	42a3      	cmp	r3, r4
 8008e68:	d101      	bne.n	8008e6e <strncmp+0x1e>
 8008e6a:	1a80      	subs	r0, r0, r2
 8008e6c:	bd10      	pop	{r4, pc}
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d1f3      	bne.n	8008e5a <strncmp+0xa>
 8008e72:	e7fa      	b.n	8008e6a <strncmp+0x1a>
 8008e74:	4610      	mov	r0, r2
 8008e76:	e7f9      	b.n	8008e6c <strncmp+0x1c>

08008e78 <_strtol_l.constprop.0>:
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7e:	d001      	beq.n	8008e84 <_strtol_l.constprop.0+0xc>
 8008e80:	2b24      	cmp	r3, #36	; 0x24
 8008e82:	d906      	bls.n	8008e92 <_strtol_l.constprop.0+0x1a>
 8008e84:	f7ff faa2 	bl	80083cc <__errno>
 8008e88:	2316      	movs	r3, #22
 8008e8a:	6003      	str	r3, [r0, #0]
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008f78 <_strtol_l.constprop.0+0x100>
 8008e96:	460d      	mov	r5, r1
 8008e98:	462e      	mov	r6, r5
 8008e9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008ea2:	f017 0708 	ands.w	r7, r7, #8
 8008ea6:	d1f7      	bne.n	8008e98 <_strtol_l.constprop.0+0x20>
 8008ea8:	2c2d      	cmp	r4, #45	; 0x2d
 8008eaa:	d132      	bne.n	8008f12 <_strtol_l.constprop.0+0x9a>
 8008eac:	782c      	ldrb	r4, [r5, #0]
 8008eae:	2701      	movs	r7, #1
 8008eb0:	1cb5      	adds	r5, r6, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d05b      	beq.n	8008f6e <_strtol_l.constprop.0+0xf6>
 8008eb6:	2b10      	cmp	r3, #16
 8008eb8:	d109      	bne.n	8008ece <_strtol_l.constprop.0+0x56>
 8008eba:	2c30      	cmp	r4, #48	; 0x30
 8008ebc:	d107      	bne.n	8008ece <_strtol_l.constprop.0+0x56>
 8008ebe:	782c      	ldrb	r4, [r5, #0]
 8008ec0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ec4:	2c58      	cmp	r4, #88	; 0x58
 8008ec6:	d14d      	bne.n	8008f64 <_strtol_l.constprop.0+0xec>
 8008ec8:	786c      	ldrb	r4, [r5, #1]
 8008eca:	2310      	movs	r3, #16
 8008ecc:	3502      	adds	r5, #2
 8008ece:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008ed2:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ed6:	f04f 0c00 	mov.w	ip, #0
 8008eda:	fbb8 f9f3 	udiv	r9, r8, r3
 8008ede:	4666      	mov	r6, ip
 8008ee0:	fb03 8a19 	mls	sl, r3, r9, r8
 8008ee4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008ee8:	f1be 0f09 	cmp.w	lr, #9
 8008eec:	d816      	bhi.n	8008f1c <_strtol_l.constprop.0+0xa4>
 8008eee:	4674      	mov	r4, lr
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	dd24      	ble.n	8008f3e <_strtol_l.constprop.0+0xc6>
 8008ef4:	f1bc 0f00 	cmp.w	ip, #0
 8008ef8:	db1e      	blt.n	8008f38 <_strtol_l.constprop.0+0xc0>
 8008efa:	45b1      	cmp	r9, r6
 8008efc:	d31c      	bcc.n	8008f38 <_strtol_l.constprop.0+0xc0>
 8008efe:	d101      	bne.n	8008f04 <_strtol_l.constprop.0+0x8c>
 8008f00:	45a2      	cmp	sl, r4
 8008f02:	db19      	blt.n	8008f38 <_strtol_l.constprop.0+0xc0>
 8008f04:	fb06 4603 	mla	r6, r6, r3, r4
 8008f08:	f04f 0c01 	mov.w	ip, #1
 8008f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f10:	e7e8      	b.n	8008ee4 <_strtol_l.constprop.0+0x6c>
 8008f12:	2c2b      	cmp	r4, #43	; 0x2b
 8008f14:	bf04      	itt	eq
 8008f16:	782c      	ldrbeq	r4, [r5, #0]
 8008f18:	1cb5      	addeq	r5, r6, #2
 8008f1a:	e7ca      	b.n	8008eb2 <_strtol_l.constprop.0+0x3a>
 8008f1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008f20:	f1be 0f19 	cmp.w	lr, #25
 8008f24:	d801      	bhi.n	8008f2a <_strtol_l.constprop.0+0xb2>
 8008f26:	3c37      	subs	r4, #55	; 0x37
 8008f28:	e7e2      	b.n	8008ef0 <_strtol_l.constprop.0+0x78>
 8008f2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008f2e:	f1be 0f19 	cmp.w	lr, #25
 8008f32:	d804      	bhi.n	8008f3e <_strtol_l.constprop.0+0xc6>
 8008f34:	3c57      	subs	r4, #87	; 0x57
 8008f36:	e7db      	b.n	8008ef0 <_strtol_l.constprop.0+0x78>
 8008f38:	f04f 3cff 	mov.w	ip, #4294967295
 8008f3c:	e7e6      	b.n	8008f0c <_strtol_l.constprop.0+0x94>
 8008f3e:	f1bc 0f00 	cmp.w	ip, #0
 8008f42:	da05      	bge.n	8008f50 <_strtol_l.constprop.0+0xd8>
 8008f44:	2322      	movs	r3, #34	; 0x22
 8008f46:	6003      	str	r3, [r0, #0]
 8008f48:	4646      	mov	r6, r8
 8008f4a:	b942      	cbnz	r2, 8008f5e <_strtol_l.constprop.0+0xe6>
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	e79e      	b.n	8008e8e <_strtol_l.constprop.0+0x16>
 8008f50:	b107      	cbz	r7, 8008f54 <_strtol_l.constprop.0+0xdc>
 8008f52:	4276      	negs	r6, r6
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	d0f9      	beq.n	8008f4c <_strtol_l.constprop.0+0xd4>
 8008f58:	f1bc 0f00 	cmp.w	ip, #0
 8008f5c:	d000      	beq.n	8008f60 <_strtol_l.constprop.0+0xe8>
 8008f5e:	1e69      	subs	r1, r5, #1
 8008f60:	6011      	str	r1, [r2, #0]
 8008f62:	e7f3      	b.n	8008f4c <_strtol_l.constprop.0+0xd4>
 8008f64:	2430      	movs	r4, #48	; 0x30
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1b1      	bne.n	8008ece <_strtol_l.constprop.0+0x56>
 8008f6a:	2308      	movs	r3, #8
 8008f6c:	e7af      	b.n	8008ece <_strtol_l.constprop.0+0x56>
 8008f6e:	2c30      	cmp	r4, #48	; 0x30
 8008f70:	d0a5      	beq.n	8008ebe <_strtol_l.constprop.0+0x46>
 8008f72:	230a      	movs	r3, #10
 8008f74:	e7ab      	b.n	8008ece <_strtol_l.constprop.0+0x56>
 8008f76:	bf00      	nop
 8008f78:	0800c873 	.word	0x0800c873

08008f7c <_strtol_r>:
 8008f7c:	f7ff bf7c 	b.w	8008e78 <_strtol_l.constprop.0>

08008f80 <strtol>:
 8008f80:	4613      	mov	r3, r2
 8008f82:	460a      	mov	r2, r1
 8008f84:	4601      	mov	r1, r0
 8008f86:	4802      	ldr	r0, [pc, #8]	; (8008f90 <strtol+0x10>)
 8008f88:	6800      	ldr	r0, [r0, #0]
 8008f8a:	f7ff bf75 	b.w	8008e78 <_strtol_l.constprop.0>
 8008f8e:	bf00      	nop
 8008f90:	2000009c 	.word	0x2000009c

08008f94 <_write_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d07      	ldr	r5, [pc, #28]	; (8008fb4 <_write_r+0x20>)
 8008f98:	4604      	mov	r4, r0
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f7f9 fbbf 	bl	8002726 <_write>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_write_r+0x1e>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_write_r+0x1e>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	20000534 	.word	0x20000534

08008fb8 <_close_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4d06      	ldr	r5, [pc, #24]	; (8008fd4 <_close_r+0x1c>)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	602b      	str	r3, [r5, #0]
 8008fc4:	f7f9 fbcb 	bl	800275e <_close>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d102      	bne.n	8008fd2 <_close_r+0x1a>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	b103      	cbz	r3, 8008fd2 <_close_r+0x1a>
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	20000534 	.word	0x20000534

08008fd8 <quorem>:
 8008fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	6903      	ldr	r3, [r0, #16]
 8008fde:	690c      	ldr	r4, [r1, #16]
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	f2c0 8081 	blt.w	80090ea <quorem+0x112>
 8008fe8:	3c01      	subs	r4, #1
 8008fea:	f101 0814 	add.w	r8, r1, #20
 8008fee:	f100 0514 	add.w	r5, r0, #20
 8008ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009000:	3301      	adds	r3, #1
 8009002:	429a      	cmp	r2, r3
 8009004:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009008:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800900c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009010:	d331      	bcc.n	8009076 <quorem+0x9e>
 8009012:	f04f 0e00 	mov.w	lr, #0
 8009016:	4640      	mov	r0, r8
 8009018:	46ac      	mov	ip, r5
 800901a:	46f2      	mov	sl, lr
 800901c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009020:	b293      	uxth	r3, r2
 8009022:	fb06 e303 	mla	r3, r6, r3, lr
 8009026:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800902a:	b29b      	uxth	r3, r3
 800902c:	ebaa 0303 	sub.w	r3, sl, r3
 8009030:	f8dc a000 	ldr.w	sl, [ip]
 8009034:	0c12      	lsrs	r2, r2, #16
 8009036:	fa13 f38a 	uxtah	r3, r3, sl
 800903a:	fb06 e202 	mla	r2, r6, r2, lr
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	9b00      	ldr	r3, [sp, #0]
 8009042:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009046:	b292      	uxth	r2, r2
 8009048:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800904c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009050:	f8bd 3000 	ldrh.w	r3, [sp]
 8009054:	4581      	cmp	r9, r0
 8009056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800905a:	f84c 3b04 	str.w	r3, [ip], #4
 800905e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009062:	d2db      	bcs.n	800901c <quorem+0x44>
 8009064:	f855 300b 	ldr.w	r3, [r5, fp]
 8009068:	b92b      	cbnz	r3, 8009076 <quorem+0x9e>
 800906a:	9b01      	ldr	r3, [sp, #4]
 800906c:	3b04      	subs	r3, #4
 800906e:	429d      	cmp	r5, r3
 8009070:	461a      	mov	r2, r3
 8009072:	d32e      	bcc.n	80090d2 <quorem+0xfa>
 8009074:	613c      	str	r4, [r7, #16]
 8009076:	4638      	mov	r0, r7
 8009078:	f001 f8d6 	bl	800a228 <__mcmp>
 800907c:	2800      	cmp	r0, #0
 800907e:	db24      	blt.n	80090ca <quorem+0xf2>
 8009080:	3601      	adds	r6, #1
 8009082:	4628      	mov	r0, r5
 8009084:	f04f 0c00 	mov.w	ip, #0
 8009088:	f858 2b04 	ldr.w	r2, [r8], #4
 800908c:	f8d0 e000 	ldr.w	lr, [r0]
 8009090:	b293      	uxth	r3, r2
 8009092:	ebac 0303 	sub.w	r3, ip, r3
 8009096:	0c12      	lsrs	r2, r2, #16
 8009098:	fa13 f38e 	uxtah	r3, r3, lr
 800909c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80090a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090aa:	45c1      	cmp	r9, r8
 80090ac:	f840 3b04 	str.w	r3, [r0], #4
 80090b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80090b4:	d2e8      	bcs.n	8009088 <quorem+0xb0>
 80090b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090be:	b922      	cbnz	r2, 80090ca <quorem+0xf2>
 80090c0:	3b04      	subs	r3, #4
 80090c2:	429d      	cmp	r5, r3
 80090c4:	461a      	mov	r2, r3
 80090c6:	d30a      	bcc.n	80090de <quorem+0x106>
 80090c8:	613c      	str	r4, [r7, #16]
 80090ca:	4630      	mov	r0, r6
 80090cc:	b003      	add	sp, #12
 80090ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	3b04      	subs	r3, #4
 80090d6:	2a00      	cmp	r2, #0
 80090d8:	d1cc      	bne.n	8009074 <quorem+0x9c>
 80090da:	3c01      	subs	r4, #1
 80090dc:	e7c7      	b.n	800906e <quorem+0x96>
 80090de:	6812      	ldr	r2, [r2, #0]
 80090e0:	3b04      	subs	r3, #4
 80090e2:	2a00      	cmp	r2, #0
 80090e4:	d1f0      	bne.n	80090c8 <quorem+0xf0>
 80090e6:	3c01      	subs	r4, #1
 80090e8:	e7eb      	b.n	80090c2 <quorem+0xea>
 80090ea:	2000      	movs	r0, #0
 80090ec:	e7ee      	b.n	80090cc <quorem+0xf4>
	...

080090f0 <_dtoa_r>:
 80090f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	ed2d 8b04 	vpush	{d8-d9}
 80090f8:	ec57 6b10 	vmov	r6, r7, d0
 80090fc:	b093      	sub	sp, #76	; 0x4c
 80090fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009100:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009104:	9106      	str	r1, [sp, #24]
 8009106:	ee10 aa10 	vmov	sl, s0
 800910a:	4604      	mov	r4, r0
 800910c:	9209      	str	r2, [sp, #36]	; 0x24
 800910e:	930c      	str	r3, [sp, #48]	; 0x30
 8009110:	46bb      	mov	fp, r7
 8009112:	b975      	cbnz	r5, 8009132 <_dtoa_r+0x42>
 8009114:	2010      	movs	r0, #16
 8009116:	f000 fdef 	bl	8009cf8 <malloc>
 800911a:	4602      	mov	r2, r0
 800911c:	6260      	str	r0, [r4, #36]	; 0x24
 800911e:	b920      	cbnz	r0, 800912a <_dtoa_r+0x3a>
 8009120:	4ba7      	ldr	r3, [pc, #668]	; (80093c0 <_dtoa_r+0x2d0>)
 8009122:	21ea      	movs	r1, #234	; 0xea
 8009124:	48a7      	ldr	r0, [pc, #668]	; (80093c4 <_dtoa_r+0x2d4>)
 8009126:	f001 ffff 	bl	800b128 <__assert_func>
 800912a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800912e:	6005      	str	r5, [r0, #0]
 8009130:	60c5      	str	r5, [r0, #12]
 8009132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009134:	6819      	ldr	r1, [r3, #0]
 8009136:	b151      	cbz	r1, 800914e <_dtoa_r+0x5e>
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	604a      	str	r2, [r1, #4]
 800913c:	2301      	movs	r3, #1
 800913e:	4093      	lsls	r3, r2
 8009140:	608b      	str	r3, [r1, #8]
 8009142:	4620      	mov	r0, r4
 8009144:	f000 fe2e 	bl	8009da4 <_Bfree>
 8009148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	1e3b      	subs	r3, r7, #0
 8009150:	bfaa      	itet	ge
 8009152:	2300      	movge	r3, #0
 8009154:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009158:	f8c8 3000 	strge.w	r3, [r8]
 800915c:	4b9a      	ldr	r3, [pc, #616]	; (80093c8 <_dtoa_r+0x2d8>)
 800915e:	bfbc      	itt	lt
 8009160:	2201      	movlt	r2, #1
 8009162:	f8c8 2000 	strlt.w	r2, [r8]
 8009166:	ea33 030b 	bics.w	r3, r3, fp
 800916a:	d11b      	bne.n	80091a4 <_dtoa_r+0xb4>
 800916c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800916e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009178:	4333      	orrs	r3, r6
 800917a:	f000 8592 	beq.w	8009ca2 <_dtoa_r+0xbb2>
 800917e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009180:	b963      	cbnz	r3, 800919c <_dtoa_r+0xac>
 8009182:	4b92      	ldr	r3, [pc, #584]	; (80093cc <_dtoa_r+0x2dc>)
 8009184:	e022      	b.n	80091cc <_dtoa_r+0xdc>
 8009186:	4b92      	ldr	r3, [pc, #584]	; (80093d0 <_dtoa_r+0x2e0>)
 8009188:	9301      	str	r3, [sp, #4]
 800918a:	3308      	adds	r3, #8
 800918c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800918e:	6013      	str	r3, [r2, #0]
 8009190:	9801      	ldr	r0, [sp, #4]
 8009192:	b013      	add	sp, #76	; 0x4c
 8009194:	ecbd 8b04 	vpop	{d8-d9}
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	4b8b      	ldr	r3, [pc, #556]	; (80093cc <_dtoa_r+0x2dc>)
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	3303      	adds	r3, #3
 80091a2:	e7f3      	b.n	800918c <_dtoa_r+0x9c>
 80091a4:	2200      	movs	r2, #0
 80091a6:	2300      	movs	r3, #0
 80091a8:	4650      	mov	r0, sl
 80091aa:	4659      	mov	r1, fp
 80091ac:	f7f7 fca4 	bl	8000af8 <__aeabi_dcmpeq>
 80091b0:	ec4b ab19 	vmov	d9, sl, fp
 80091b4:	4680      	mov	r8, r0
 80091b6:	b158      	cbz	r0, 80091d0 <_dtoa_r+0xe0>
 80091b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091ba:	2301      	movs	r3, #1
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 856b 	beq.w	8009c9c <_dtoa_r+0xbac>
 80091c6:	4883      	ldr	r0, [pc, #524]	; (80093d4 <_dtoa_r+0x2e4>)
 80091c8:	6018      	str	r0, [r3, #0]
 80091ca:	1e43      	subs	r3, r0, #1
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	e7df      	b.n	8009190 <_dtoa_r+0xa0>
 80091d0:	ec4b ab10 	vmov	d0, sl, fp
 80091d4:	aa10      	add	r2, sp, #64	; 0x40
 80091d6:	a911      	add	r1, sp, #68	; 0x44
 80091d8:	4620      	mov	r0, r4
 80091da:	f001 f8cb 	bl	800a374 <__d2b>
 80091de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80091e2:	ee08 0a10 	vmov	s16, r0
 80091e6:	2d00      	cmp	r5, #0
 80091e8:	f000 8084 	beq.w	80092f4 <_dtoa_r+0x204>
 80091ec:	ee19 3a90 	vmov	r3, s19
 80091f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80091f8:	4656      	mov	r6, sl
 80091fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80091fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009202:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009206:	4b74      	ldr	r3, [pc, #464]	; (80093d8 <_dtoa_r+0x2e8>)
 8009208:	2200      	movs	r2, #0
 800920a:	4630      	mov	r0, r6
 800920c:	4639      	mov	r1, r7
 800920e:	f7f7 f853 	bl	80002b8 <__aeabi_dsub>
 8009212:	a365      	add	r3, pc, #404	; (adr r3, 80093a8 <_dtoa_r+0x2b8>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7f7 fa06 	bl	8000628 <__aeabi_dmul>
 800921c:	a364      	add	r3, pc, #400	; (adr r3, 80093b0 <_dtoa_r+0x2c0>)
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 f84b 	bl	80002bc <__adddf3>
 8009226:	4606      	mov	r6, r0
 8009228:	4628      	mov	r0, r5
 800922a:	460f      	mov	r7, r1
 800922c:	f7f7 f992 	bl	8000554 <__aeabi_i2d>
 8009230:	a361      	add	r3, pc, #388	; (adr r3, 80093b8 <_dtoa_r+0x2c8>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 f9f7 	bl	8000628 <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	f7f7 f83b 	bl	80002bc <__adddf3>
 8009246:	4606      	mov	r6, r0
 8009248:	460f      	mov	r7, r1
 800924a:	f7f7 fc9d 	bl	8000b88 <__aeabi_d2iz>
 800924e:	2200      	movs	r2, #0
 8009250:	9000      	str	r0, [sp, #0]
 8009252:	2300      	movs	r3, #0
 8009254:	4630      	mov	r0, r6
 8009256:	4639      	mov	r1, r7
 8009258:	f7f7 fc58 	bl	8000b0c <__aeabi_dcmplt>
 800925c:	b150      	cbz	r0, 8009274 <_dtoa_r+0x184>
 800925e:	9800      	ldr	r0, [sp, #0]
 8009260:	f7f7 f978 	bl	8000554 <__aeabi_i2d>
 8009264:	4632      	mov	r2, r6
 8009266:	463b      	mov	r3, r7
 8009268:	f7f7 fc46 	bl	8000af8 <__aeabi_dcmpeq>
 800926c:	b910      	cbnz	r0, 8009274 <_dtoa_r+0x184>
 800926e:	9b00      	ldr	r3, [sp, #0]
 8009270:	3b01      	subs	r3, #1
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	9b00      	ldr	r3, [sp, #0]
 8009276:	2b16      	cmp	r3, #22
 8009278:	d85a      	bhi.n	8009330 <_dtoa_r+0x240>
 800927a:	9a00      	ldr	r2, [sp, #0]
 800927c:	4b57      	ldr	r3, [pc, #348]	; (80093dc <_dtoa_r+0x2ec>)
 800927e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	ec51 0b19 	vmov	r0, r1, d9
 800928a:	f7f7 fc3f 	bl	8000b0c <__aeabi_dcmplt>
 800928e:	2800      	cmp	r0, #0
 8009290:	d050      	beq.n	8009334 <_dtoa_r+0x244>
 8009292:	9b00      	ldr	r3, [sp, #0]
 8009294:	3b01      	subs	r3, #1
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	2300      	movs	r3, #0
 800929a:	930b      	str	r3, [sp, #44]	; 0x2c
 800929c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800929e:	1b5d      	subs	r5, r3, r5
 80092a0:	1e6b      	subs	r3, r5, #1
 80092a2:	9305      	str	r3, [sp, #20]
 80092a4:	bf45      	ittet	mi
 80092a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80092aa:	9304      	strmi	r3, [sp, #16]
 80092ac:	2300      	movpl	r3, #0
 80092ae:	2300      	movmi	r3, #0
 80092b0:	bf4c      	ite	mi
 80092b2:	9305      	strmi	r3, [sp, #20]
 80092b4:	9304      	strpl	r3, [sp, #16]
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	db3d      	blt.n	8009338 <_dtoa_r+0x248>
 80092bc:	9b05      	ldr	r3, [sp, #20]
 80092be:	9a00      	ldr	r2, [sp, #0]
 80092c0:	920a      	str	r2, [sp, #40]	; 0x28
 80092c2:	4413      	add	r3, r2
 80092c4:	9305      	str	r3, [sp, #20]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9307      	str	r3, [sp, #28]
 80092ca:	9b06      	ldr	r3, [sp, #24]
 80092cc:	2b09      	cmp	r3, #9
 80092ce:	f200 8089 	bhi.w	80093e4 <_dtoa_r+0x2f4>
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	bfc4      	itt	gt
 80092d6:	3b04      	subgt	r3, #4
 80092d8:	9306      	strgt	r3, [sp, #24]
 80092da:	9b06      	ldr	r3, [sp, #24]
 80092dc:	f1a3 0302 	sub.w	r3, r3, #2
 80092e0:	bfcc      	ite	gt
 80092e2:	2500      	movgt	r5, #0
 80092e4:	2501      	movle	r5, #1
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	f200 8087 	bhi.w	80093fa <_dtoa_r+0x30a>
 80092ec:	e8df f003 	tbb	[pc, r3]
 80092f0:	59383a2d 	.word	0x59383a2d
 80092f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092f8:	441d      	add	r5, r3
 80092fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092fe:	2b20      	cmp	r3, #32
 8009300:	bfc1      	itttt	gt
 8009302:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009306:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800930a:	fa0b f303 	lslgt.w	r3, fp, r3
 800930e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009312:	bfda      	itte	le
 8009314:	f1c3 0320 	rsble	r3, r3, #32
 8009318:	fa06 f003 	lslle.w	r0, r6, r3
 800931c:	4318      	orrgt	r0, r3
 800931e:	f7f7 f909 	bl	8000534 <__aeabi_ui2d>
 8009322:	2301      	movs	r3, #1
 8009324:	4606      	mov	r6, r0
 8009326:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800932a:	3d01      	subs	r5, #1
 800932c:	930e      	str	r3, [sp, #56]	; 0x38
 800932e:	e76a      	b.n	8009206 <_dtoa_r+0x116>
 8009330:	2301      	movs	r3, #1
 8009332:	e7b2      	b.n	800929a <_dtoa_r+0x1aa>
 8009334:	900b      	str	r0, [sp, #44]	; 0x2c
 8009336:	e7b1      	b.n	800929c <_dtoa_r+0x1ac>
 8009338:	9b04      	ldr	r3, [sp, #16]
 800933a:	9a00      	ldr	r2, [sp, #0]
 800933c:	1a9b      	subs	r3, r3, r2
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	4253      	negs	r3, r2
 8009342:	9307      	str	r3, [sp, #28]
 8009344:	2300      	movs	r3, #0
 8009346:	930a      	str	r3, [sp, #40]	; 0x28
 8009348:	e7bf      	b.n	80092ca <_dtoa_r+0x1da>
 800934a:	2300      	movs	r3, #0
 800934c:	9308      	str	r3, [sp, #32]
 800934e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009350:	2b00      	cmp	r3, #0
 8009352:	dc55      	bgt.n	8009400 <_dtoa_r+0x310>
 8009354:	2301      	movs	r3, #1
 8009356:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800935a:	461a      	mov	r2, r3
 800935c:	9209      	str	r2, [sp, #36]	; 0x24
 800935e:	e00c      	b.n	800937a <_dtoa_r+0x28a>
 8009360:	2301      	movs	r3, #1
 8009362:	e7f3      	b.n	800934c <_dtoa_r+0x25c>
 8009364:	2300      	movs	r3, #0
 8009366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009368:	9308      	str	r3, [sp, #32]
 800936a:	9b00      	ldr	r3, [sp, #0]
 800936c:	4413      	add	r3, r2
 800936e:	9302      	str	r3, [sp, #8]
 8009370:	3301      	adds	r3, #1
 8009372:	2b01      	cmp	r3, #1
 8009374:	9303      	str	r3, [sp, #12]
 8009376:	bfb8      	it	lt
 8009378:	2301      	movlt	r3, #1
 800937a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800937c:	2200      	movs	r2, #0
 800937e:	6042      	str	r2, [r0, #4]
 8009380:	2204      	movs	r2, #4
 8009382:	f102 0614 	add.w	r6, r2, #20
 8009386:	429e      	cmp	r6, r3
 8009388:	6841      	ldr	r1, [r0, #4]
 800938a:	d93d      	bls.n	8009408 <_dtoa_r+0x318>
 800938c:	4620      	mov	r0, r4
 800938e:	f000 fcc9 	bl	8009d24 <_Balloc>
 8009392:	9001      	str	r0, [sp, #4]
 8009394:	2800      	cmp	r0, #0
 8009396:	d13b      	bne.n	8009410 <_dtoa_r+0x320>
 8009398:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <_dtoa_r+0x2f0>)
 800939a:	4602      	mov	r2, r0
 800939c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80093a0:	e6c0      	b.n	8009124 <_dtoa_r+0x34>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e7df      	b.n	8009366 <_dtoa_r+0x276>
 80093a6:	bf00      	nop
 80093a8:	636f4361 	.word	0x636f4361
 80093ac:	3fd287a7 	.word	0x3fd287a7
 80093b0:	8b60c8b3 	.word	0x8b60c8b3
 80093b4:	3fc68a28 	.word	0x3fc68a28
 80093b8:	509f79fb 	.word	0x509f79fb
 80093bc:	3fd34413 	.word	0x3fd34413
 80093c0:	0800c980 	.word	0x0800c980
 80093c4:	0800c997 	.word	0x0800c997
 80093c8:	7ff00000 	.word	0x7ff00000
 80093cc:	0800c97c 	.word	0x0800c97c
 80093d0:	0800c973 	.word	0x0800c973
 80093d4:	0800cb72 	.word	0x0800cb72
 80093d8:	3ff80000 	.word	0x3ff80000
 80093dc:	0800ca88 	.word	0x0800ca88
 80093e0:	0800c9f2 	.word	0x0800c9f2
 80093e4:	2501      	movs	r5, #1
 80093e6:	2300      	movs	r3, #0
 80093e8:	9306      	str	r3, [sp, #24]
 80093ea:	9508      	str	r5, [sp, #32]
 80093ec:	f04f 33ff 	mov.w	r3, #4294967295
 80093f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093f4:	2200      	movs	r2, #0
 80093f6:	2312      	movs	r3, #18
 80093f8:	e7b0      	b.n	800935c <_dtoa_r+0x26c>
 80093fa:	2301      	movs	r3, #1
 80093fc:	9308      	str	r3, [sp, #32]
 80093fe:	e7f5      	b.n	80093ec <_dtoa_r+0x2fc>
 8009400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009402:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009406:	e7b8      	b.n	800937a <_dtoa_r+0x28a>
 8009408:	3101      	adds	r1, #1
 800940a:	6041      	str	r1, [r0, #4]
 800940c:	0052      	lsls	r2, r2, #1
 800940e:	e7b8      	b.n	8009382 <_dtoa_r+0x292>
 8009410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009412:	9a01      	ldr	r2, [sp, #4]
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	2b0e      	cmp	r3, #14
 800941a:	f200 809d 	bhi.w	8009558 <_dtoa_r+0x468>
 800941e:	2d00      	cmp	r5, #0
 8009420:	f000 809a 	beq.w	8009558 <_dtoa_r+0x468>
 8009424:	9b00      	ldr	r3, [sp, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	dd32      	ble.n	8009490 <_dtoa_r+0x3a0>
 800942a:	4ab7      	ldr	r2, [pc, #732]	; (8009708 <_dtoa_r+0x618>)
 800942c:	f003 030f 	and.w	r3, r3, #15
 8009430:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009438:	9b00      	ldr	r3, [sp, #0]
 800943a:	05d8      	lsls	r0, r3, #23
 800943c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009440:	d516      	bpl.n	8009470 <_dtoa_r+0x380>
 8009442:	4bb2      	ldr	r3, [pc, #712]	; (800970c <_dtoa_r+0x61c>)
 8009444:	ec51 0b19 	vmov	r0, r1, d9
 8009448:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800944c:	f7f7 fa16 	bl	800087c <__aeabi_ddiv>
 8009450:	f007 070f 	and.w	r7, r7, #15
 8009454:	4682      	mov	sl, r0
 8009456:	468b      	mov	fp, r1
 8009458:	2503      	movs	r5, #3
 800945a:	4eac      	ldr	r6, [pc, #688]	; (800970c <_dtoa_r+0x61c>)
 800945c:	b957      	cbnz	r7, 8009474 <_dtoa_r+0x384>
 800945e:	4642      	mov	r2, r8
 8009460:	464b      	mov	r3, r9
 8009462:	4650      	mov	r0, sl
 8009464:	4659      	mov	r1, fp
 8009466:	f7f7 fa09 	bl	800087c <__aeabi_ddiv>
 800946a:	4682      	mov	sl, r0
 800946c:	468b      	mov	fp, r1
 800946e:	e028      	b.n	80094c2 <_dtoa_r+0x3d2>
 8009470:	2502      	movs	r5, #2
 8009472:	e7f2      	b.n	800945a <_dtoa_r+0x36a>
 8009474:	07f9      	lsls	r1, r7, #31
 8009476:	d508      	bpl.n	800948a <_dtoa_r+0x39a>
 8009478:	4640      	mov	r0, r8
 800947a:	4649      	mov	r1, r9
 800947c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009480:	f7f7 f8d2 	bl	8000628 <__aeabi_dmul>
 8009484:	3501      	adds	r5, #1
 8009486:	4680      	mov	r8, r0
 8009488:	4689      	mov	r9, r1
 800948a:	107f      	asrs	r7, r7, #1
 800948c:	3608      	adds	r6, #8
 800948e:	e7e5      	b.n	800945c <_dtoa_r+0x36c>
 8009490:	f000 809b 	beq.w	80095ca <_dtoa_r+0x4da>
 8009494:	9b00      	ldr	r3, [sp, #0]
 8009496:	4f9d      	ldr	r7, [pc, #628]	; (800970c <_dtoa_r+0x61c>)
 8009498:	425e      	negs	r6, r3
 800949a:	4b9b      	ldr	r3, [pc, #620]	; (8009708 <_dtoa_r+0x618>)
 800949c:	f006 020f 	and.w	r2, r6, #15
 80094a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	ec51 0b19 	vmov	r0, r1, d9
 80094ac:	f7f7 f8bc 	bl	8000628 <__aeabi_dmul>
 80094b0:	1136      	asrs	r6, r6, #4
 80094b2:	4682      	mov	sl, r0
 80094b4:	468b      	mov	fp, r1
 80094b6:	2300      	movs	r3, #0
 80094b8:	2502      	movs	r5, #2
 80094ba:	2e00      	cmp	r6, #0
 80094bc:	d17a      	bne.n	80095b4 <_dtoa_r+0x4c4>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1d3      	bne.n	800946a <_dtoa_r+0x37a>
 80094c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 8082 	beq.w	80095ce <_dtoa_r+0x4de>
 80094ca:	4b91      	ldr	r3, [pc, #580]	; (8009710 <_dtoa_r+0x620>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	4650      	mov	r0, sl
 80094d0:	4659      	mov	r1, fp
 80094d2:	f7f7 fb1b 	bl	8000b0c <__aeabi_dcmplt>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d079      	beq.n	80095ce <_dtoa_r+0x4de>
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d076      	beq.n	80095ce <_dtoa_r+0x4de>
 80094e0:	9b02      	ldr	r3, [sp, #8]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	dd36      	ble.n	8009554 <_dtoa_r+0x464>
 80094e6:	9b00      	ldr	r3, [sp, #0]
 80094e8:	4650      	mov	r0, sl
 80094ea:	4659      	mov	r1, fp
 80094ec:	1e5f      	subs	r7, r3, #1
 80094ee:	2200      	movs	r2, #0
 80094f0:	4b88      	ldr	r3, [pc, #544]	; (8009714 <_dtoa_r+0x624>)
 80094f2:	f7f7 f899 	bl	8000628 <__aeabi_dmul>
 80094f6:	9e02      	ldr	r6, [sp, #8]
 80094f8:	4682      	mov	sl, r0
 80094fa:	468b      	mov	fp, r1
 80094fc:	3501      	adds	r5, #1
 80094fe:	4628      	mov	r0, r5
 8009500:	f7f7 f828 	bl	8000554 <__aeabi_i2d>
 8009504:	4652      	mov	r2, sl
 8009506:	465b      	mov	r3, fp
 8009508:	f7f7 f88e 	bl	8000628 <__aeabi_dmul>
 800950c:	4b82      	ldr	r3, [pc, #520]	; (8009718 <_dtoa_r+0x628>)
 800950e:	2200      	movs	r2, #0
 8009510:	f7f6 fed4 	bl	80002bc <__adddf3>
 8009514:	46d0      	mov	r8, sl
 8009516:	46d9      	mov	r9, fp
 8009518:	4682      	mov	sl, r0
 800951a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800951e:	2e00      	cmp	r6, #0
 8009520:	d158      	bne.n	80095d4 <_dtoa_r+0x4e4>
 8009522:	4b7e      	ldr	r3, [pc, #504]	; (800971c <_dtoa_r+0x62c>)
 8009524:	2200      	movs	r2, #0
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	f7f6 fec5 	bl	80002b8 <__aeabi_dsub>
 800952e:	4652      	mov	r2, sl
 8009530:	465b      	mov	r3, fp
 8009532:	4680      	mov	r8, r0
 8009534:	4689      	mov	r9, r1
 8009536:	f7f7 fb07 	bl	8000b48 <__aeabi_dcmpgt>
 800953a:	2800      	cmp	r0, #0
 800953c:	f040 8295 	bne.w	8009a6a <_dtoa_r+0x97a>
 8009540:	4652      	mov	r2, sl
 8009542:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009546:	4640      	mov	r0, r8
 8009548:	4649      	mov	r1, r9
 800954a:	f7f7 fadf 	bl	8000b0c <__aeabi_dcmplt>
 800954e:	2800      	cmp	r0, #0
 8009550:	f040 8289 	bne.w	8009a66 <_dtoa_r+0x976>
 8009554:	ec5b ab19 	vmov	sl, fp, d9
 8009558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800955a:	2b00      	cmp	r3, #0
 800955c:	f2c0 8148 	blt.w	80097f0 <_dtoa_r+0x700>
 8009560:	9a00      	ldr	r2, [sp, #0]
 8009562:	2a0e      	cmp	r2, #14
 8009564:	f300 8144 	bgt.w	80097f0 <_dtoa_r+0x700>
 8009568:	4b67      	ldr	r3, [pc, #412]	; (8009708 <_dtoa_r+0x618>)
 800956a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800956e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	f280 80d5 	bge.w	8009724 <_dtoa_r+0x634>
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	f300 80d1 	bgt.w	8009724 <_dtoa_r+0x634>
 8009582:	f040 826f 	bne.w	8009a64 <_dtoa_r+0x974>
 8009586:	4b65      	ldr	r3, [pc, #404]	; (800971c <_dtoa_r+0x62c>)
 8009588:	2200      	movs	r2, #0
 800958a:	4640      	mov	r0, r8
 800958c:	4649      	mov	r1, r9
 800958e:	f7f7 f84b 	bl	8000628 <__aeabi_dmul>
 8009592:	4652      	mov	r2, sl
 8009594:	465b      	mov	r3, fp
 8009596:	f7f7 facd 	bl	8000b34 <__aeabi_dcmpge>
 800959a:	9e03      	ldr	r6, [sp, #12]
 800959c:	4637      	mov	r7, r6
 800959e:	2800      	cmp	r0, #0
 80095a0:	f040 8245 	bne.w	8009a2e <_dtoa_r+0x93e>
 80095a4:	9d01      	ldr	r5, [sp, #4]
 80095a6:	2331      	movs	r3, #49	; 0x31
 80095a8:	f805 3b01 	strb.w	r3, [r5], #1
 80095ac:	9b00      	ldr	r3, [sp, #0]
 80095ae:	3301      	adds	r3, #1
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	e240      	b.n	8009a36 <_dtoa_r+0x946>
 80095b4:	07f2      	lsls	r2, r6, #31
 80095b6:	d505      	bpl.n	80095c4 <_dtoa_r+0x4d4>
 80095b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095bc:	f7f7 f834 	bl	8000628 <__aeabi_dmul>
 80095c0:	3501      	adds	r5, #1
 80095c2:	2301      	movs	r3, #1
 80095c4:	1076      	asrs	r6, r6, #1
 80095c6:	3708      	adds	r7, #8
 80095c8:	e777      	b.n	80094ba <_dtoa_r+0x3ca>
 80095ca:	2502      	movs	r5, #2
 80095cc:	e779      	b.n	80094c2 <_dtoa_r+0x3d2>
 80095ce:	9f00      	ldr	r7, [sp, #0]
 80095d0:	9e03      	ldr	r6, [sp, #12]
 80095d2:	e794      	b.n	80094fe <_dtoa_r+0x40e>
 80095d4:	9901      	ldr	r1, [sp, #4]
 80095d6:	4b4c      	ldr	r3, [pc, #304]	; (8009708 <_dtoa_r+0x618>)
 80095d8:	4431      	add	r1, r6
 80095da:	910d      	str	r1, [sp, #52]	; 0x34
 80095dc:	9908      	ldr	r1, [sp, #32]
 80095de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095e6:	2900      	cmp	r1, #0
 80095e8:	d043      	beq.n	8009672 <_dtoa_r+0x582>
 80095ea:	494d      	ldr	r1, [pc, #308]	; (8009720 <_dtoa_r+0x630>)
 80095ec:	2000      	movs	r0, #0
 80095ee:	f7f7 f945 	bl	800087c <__aeabi_ddiv>
 80095f2:	4652      	mov	r2, sl
 80095f4:	465b      	mov	r3, fp
 80095f6:	f7f6 fe5f 	bl	80002b8 <__aeabi_dsub>
 80095fa:	9d01      	ldr	r5, [sp, #4]
 80095fc:	4682      	mov	sl, r0
 80095fe:	468b      	mov	fp, r1
 8009600:	4649      	mov	r1, r9
 8009602:	4640      	mov	r0, r8
 8009604:	f7f7 fac0 	bl	8000b88 <__aeabi_d2iz>
 8009608:	4606      	mov	r6, r0
 800960a:	f7f6 ffa3 	bl	8000554 <__aeabi_i2d>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	f7f6 fe4f 	bl	80002b8 <__aeabi_dsub>
 800961a:	3630      	adds	r6, #48	; 0x30
 800961c:	f805 6b01 	strb.w	r6, [r5], #1
 8009620:	4652      	mov	r2, sl
 8009622:	465b      	mov	r3, fp
 8009624:	4680      	mov	r8, r0
 8009626:	4689      	mov	r9, r1
 8009628:	f7f7 fa70 	bl	8000b0c <__aeabi_dcmplt>
 800962c:	2800      	cmp	r0, #0
 800962e:	d163      	bne.n	80096f8 <_dtoa_r+0x608>
 8009630:	4642      	mov	r2, r8
 8009632:	464b      	mov	r3, r9
 8009634:	4936      	ldr	r1, [pc, #216]	; (8009710 <_dtoa_r+0x620>)
 8009636:	2000      	movs	r0, #0
 8009638:	f7f6 fe3e 	bl	80002b8 <__aeabi_dsub>
 800963c:	4652      	mov	r2, sl
 800963e:	465b      	mov	r3, fp
 8009640:	f7f7 fa64 	bl	8000b0c <__aeabi_dcmplt>
 8009644:	2800      	cmp	r0, #0
 8009646:	f040 80b5 	bne.w	80097b4 <_dtoa_r+0x6c4>
 800964a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800964c:	429d      	cmp	r5, r3
 800964e:	d081      	beq.n	8009554 <_dtoa_r+0x464>
 8009650:	4b30      	ldr	r3, [pc, #192]	; (8009714 <_dtoa_r+0x624>)
 8009652:	2200      	movs	r2, #0
 8009654:	4650      	mov	r0, sl
 8009656:	4659      	mov	r1, fp
 8009658:	f7f6 ffe6 	bl	8000628 <__aeabi_dmul>
 800965c:	4b2d      	ldr	r3, [pc, #180]	; (8009714 <_dtoa_r+0x624>)
 800965e:	4682      	mov	sl, r0
 8009660:	468b      	mov	fp, r1
 8009662:	4640      	mov	r0, r8
 8009664:	4649      	mov	r1, r9
 8009666:	2200      	movs	r2, #0
 8009668:	f7f6 ffde 	bl	8000628 <__aeabi_dmul>
 800966c:	4680      	mov	r8, r0
 800966e:	4689      	mov	r9, r1
 8009670:	e7c6      	b.n	8009600 <_dtoa_r+0x510>
 8009672:	4650      	mov	r0, sl
 8009674:	4659      	mov	r1, fp
 8009676:	f7f6 ffd7 	bl	8000628 <__aeabi_dmul>
 800967a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800967c:	9d01      	ldr	r5, [sp, #4]
 800967e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009680:	4682      	mov	sl, r0
 8009682:	468b      	mov	fp, r1
 8009684:	4649      	mov	r1, r9
 8009686:	4640      	mov	r0, r8
 8009688:	f7f7 fa7e 	bl	8000b88 <__aeabi_d2iz>
 800968c:	4606      	mov	r6, r0
 800968e:	f7f6 ff61 	bl	8000554 <__aeabi_i2d>
 8009692:	3630      	adds	r6, #48	; 0x30
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	4640      	mov	r0, r8
 800969a:	4649      	mov	r1, r9
 800969c:	f7f6 fe0c 	bl	80002b8 <__aeabi_dsub>
 80096a0:	f805 6b01 	strb.w	r6, [r5], #1
 80096a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096a6:	429d      	cmp	r5, r3
 80096a8:	4680      	mov	r8, r0
 80096aa:	4689      	mov	r9, r1
 80096ac:	f04f 0200 	mov.w	r2, #0
 80096b0:	d124      	bne.n	80096fc <_dtoa_r+0x60c>
 80096b2:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <_dtoa_r+0x630>)
 80096b4:	4650      	mov	r0, sl
 80096b6:	4659      	mov	r1, fp
 80096b8:	f7f6 fe00 	bl	80002bc <__adddf3>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f7 fa40 	bl	8000b48 <__aeabi_dcmpgt>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d173      	bne.n	80097b4 <_dtoa_r+0x6c4>
 80096cc:	4652      	mov	r2, sl
 80096ce:	465b      	mov	r3, fp
 80096d0:	4913      	ldr	r1, [pc, #76]	; (8009720 <_dtoa_r+0x630>)
 80096d2:	2000      	movs	r0, #0
 80096d4:	f7f6 fdf0 	bl	80002b8 <__aeabi_dsub>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4640      	mov	r0, r8
 80096de:	4649      	mov	r1, r9
 80096e0:	f7f7 fa14 	bl	8000b0c <__aeabi_dcmplt>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	f43f af35 	beq.w	8009554 <_dtoa_r+0x464>
 80096ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096ec:	1e6b      	subs	r3, r5, #1
 80096ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80096f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096f4:	2b30      	cmp	r3, #48	; 0x30
 80096f6:	d0f8      	beq.n	80096ea <_dtoa_r+0x5fa>
 80096f8:	9700      	str	r7, [sp, #0]
 80096fa:	e049      	b.n	8009790 <_dtoa_r+0x6a0>
 80096fc:	4b05      	ldr	r3, [pc, #20]	; (8009714 <_dtoa_r+0x624>)
 80096fe:	f7f6 ff93 	bl	8000628 <__aeabi_dmul>
 8009702:	4680      	mov	r8, r0
 8009704:	4689      	mov	r9, r1
 8009706:	e7bd      	b.n	8009684 <_dtoa_r+0x594>
 8009708:	0800ca88 	.word	0x0800ca88
 800970c:	0800ca60 	.word	0x0800ca60
 8009710:	3ff00000 	.word	0x3ff00000
 8009714:	40240000 	.word	0x40240000
 8009718:	401c0000 	.word	0x401c0000
 800971c:	40140000 	.word	0x40140000
 8009720:	3fe00000 	.word	0x3fe00000
 8009724:	9d01      	ldr	r5, [sp, #4]
 8009726:	4656      	mov	r6, sl
 8009728:	465f      	mov	r7, fp
 800972a:	4642      	mov	r2, r8
 800972c:	464b      	mov	r3, r9
 800972e:	4630      	mov	r0, r6
 8009730:	4639      	mov	r1, r7
 8009732:	f7f7 f8a3 	bl	800087c <__aeabi_ddiv>
 8009736:	f7f7 fa27 	bl	8000b88 <__aeabi_d2iz>
 800973a:	4682      	mov	sl, r0
 800973c:	f7f6 ff0a 	bl	8000554 <__aeabi_i2d>
 8009740:	4642      	mov	r2, r8
 8009742:	464b      	mov	r3, r9
 8009744:	f7f6 ff70 	bl	8000628 <__aeabi_dmul>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4630      	mov	r0, r6
 800974e:	4639      	mov	r1, r7
 8009750:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009754:	f7f6 fdb0 	bl	80002b8 <__aeabi_dsub>
 8009758:	f805 6b01 	strb.w	r6, [r5], #1
 800975c:	9e01      	ldr	r6, [sp, #4]
 800975e:	9f03      	ldr	r7, [sp, #12]
 8009760:	1bae      	subs	r6, r5, r6
 8009762:	42b7      	cmp	r7, r6
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	d135      	bne.n	80097d6 <_dtoa_r+0x6e6>
 800976a:	f7f6 fda7 	bl	80002bc <__adddf3>
 800976e:	4642      	mov	r2, r8
 8009770:	464b      	mov	r3, r9
 8009772:	4606      	mov	r6, r0
 8009774:	460f      	mov	r7, r1
 8009776:	f7f7 f9e7 	bl	8000b48 <__aeabi_dcmpgt>
 800977a:	b9d0      	cbnz	r0, 80097b2 <_dtoa_r+0x6c2>
 800977c:	4642      	mov	r2, r8
 800977e:	464b      	mov	r3, r9
 8009780:	4630      	mov	r0, r6
 8009782:	4639      	mov	r1, r7
 8009784:	f7f7 f9b8 	bl	8000af8 <__aeabi_dcmpeq>
 8009788:	b110      	cbz	r0, 8009790 <_dtoa_r+0x6a0>
 800978a:	f01a 0f01 	tst.w	sl, #1
 800978e:	d110      	bne.n	80097b2 <_dtoa_r+0x6c2>
 8009790:	4620      	mov	r0, r4
 8009792:	ee18 1a10 	vmov	r1, s16
 8009796:	f000 fb05 	bl	8009da4 <_Bfree>
 800979a:	2300      	movs	r3, #0
 800979c:	9800      	ldr	r0, [sp, #0]
 800979e:	702b      	strb	r3, [r5, #0]
 80097a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097a2:	3001      	adds	r0, #1
 80097a4:	6018      	str	r0, [r3, #0]
 80097a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f43f acf1 	beq.w	8009190 <_dtoa_r+0xa0>
 80097ae:	601d      	str	r5, [r3, #0]
 80097b0:	e4ee      	b.n	8009190 <_dtoa_r+0xa0>
 80097b2:	9f00      	ldr	r7, [sp, #0]
 80097b4:	462b      	mov	r3, r5
 80097b6:	461d      	mov	r5, r3
 80097b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097bc:	2a39      	cmp	r2, #57	; 0x39
 80097be:	d106      	bne.n	80097ce <_dtoa_r+0x6de>
 80097c0:	9a01      	ldr	r2, [sp, #4]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d1f7      	bne.n	80097b6 <_dtoa_r+0x6c6>
 80097c6:	9901      	ldr	r1, [sp, #4]
 80097c8:	2230      	movs	r2, #48	; 0x30
 80097ca:	3701      	adds	r7, #1
 80097cc:	700a      	strb	r2, [r1, #0]
 80097ce:	781a      	ldrb	r2, [r3, #0]
 80097d0:	3201      	adds	r2, #1
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	e790      	b.n	80096f8 <_dtoa_r+0x608>
 80097d6:	4ba6      	ldr	r3, [pc, #664]	; (8009a70 <_dtoa_r+0x980>)
 80097d8:	2200      	movs	r2, #0
 80097da:	f7f6 ff25 	bl	8000628 <__aeabi_dmul>
 80097de:	2200      	movs	r2, #0
 80097e0:	2300      	movs	r3, #0
 80097e2:	4606      	mov	r6, r0
 80097e4:	460f      	mov	r7, r1
 80097e6:	f7f7 f987 	bl	8000af8 <__aeabi_dcmpeq>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d09d      	beq.n	800972a <_dtoa_r+0x63a>
 80097ee:	e7cf      	b.n	8009790 <_dtoa_r+0x6a0>
 80097f0:	9a08      	ldr	r2, [sp, #32]
 80097f2:	2a00      	cmp	r2, #0
 80097f4:	f000 80d7 	beq.w	80099a6 <_dtoa_r+0x8b6>
 80097f8:	9a06      	ldr	r2, [sp, #24]
 80097fa:	2a01      	cmp	r2, #1
 80097fc:	f300 80ba 	bgt.w	8009974 <_dtoa_r+0x884>
 8009800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009802:	2a00      	cmp	r2, #0
 8009804:	f000 80b2 	beq.w	800996c <_dtoa_r+0x87c>
 8009808:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800980c:	9e07      	ldr	r6, [sp, #28]
 800980e:	9d04      	ldr	r5, [sp, #16]
 8009810:	9a04      	ldr	r2, [sp, #16]
 8009812:	441a      	add	r2, r3
 8009814:	9204      	str	r2, [sp, #16]
 8009816:	9a05      	ldr	r2, [sp, #20]
 8009818:	2101      	movs	r1, #1
 800981a:	441a      	add	r2, r3
 800981c:	4620      	mov	r0, r4
 800981e:	9205      	str	r2, [sp, #20]
 8009820:	f000 fb78 	bl	8009f14 <__i2b>
 8009824:	4607      	mov	r7, r0
 8009826:	2d00      	cmp	r5, #0
 8009828:	dd0c      	ble.n	8009844 <_dtoa_r+0x754>
 800982a:	9b05      	ldr	r3, [sp, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	dd09      	ble.n	8009844 <_dtoa_r+0x754>
 8009830:	42ab      	cmp	r3, r5
 8009832:	9a04      	ldr	r2, [sp, #16]
 8009834:	bfa8      	it	ge
 8009836:	462b      	movge	r3, r5
 8009838:	1ad2      	subs	r2, r2, r3
 800983a:	9204      	str	r2, [sp, #16]
 800983c:	9a05      	ldr	r2, [sp, #20]
 800983e:	1aed      	subs	r5, r5, r3
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	9305      	str	r3, [sp, #20]
 8009844:	9b07      	ldr	r3, [sp, #28]
 8009846:	b31b      	cbz	r3, 8009890 <_dtoa_r+0x7a0>
 8009848:	9b08      	ldr	r3, [sp, #32]
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 80af 	beq.w	80099ae <_dtoa_r+0x8be>
 8009850:	2e00      	cmp	r6, #0
 8009852:	dd13      	ble.n	800987c <_dtoa_r+0x78c>
 8009854:	4639      	mov	r1, r7
 8009856:	4632      	mov	r2, r6
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fc1b 	bl	800a094 <__pow5mult>
 800985e:	ee18 2a10 	vmov	r2, s16
 8009862:	4601      	mov	r1, r0
 8009864:	4607      	mov	r7, r0
 8009866:	4620      	mov	r0, r4
 8009868:	f000 fb6a 	bl	8009f40 <__multiply>
 800986c:	ee18 1a10 	vmov	r1, s16
 8009870:	4680      	mov	r8, r0
 8009872:	4620      	mov	r0, r4
 8009874:	f000 fa96 	bl	8009da4 <_Bfree>
 8009878:	ee08 8a10 	vmov	s16, r8
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	1b9a      	subs	r2, r3, r6
 8009880:	d006      	beq.n	8009890 <_dtoa_r+0x7a0>
 8009882:	ee18 1a10 	vmov	r1, s16
 8009886:	4620      	mov	r0, r4
 8009888:	f000 fc04 	bl	800a094 <__pow5mult>
 800988c:	ee08 0a10 	vmov	s16, r0
 8009890:	2101      	movs	r1, #1
 8009892:	4620      	mov	r0, r4
 8009894:	f000 fb3e 	bl	8009f14 <__i2b>
 8009898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800989a:	2b00      	cmp	r3, #0
 800989c:	4606      	mov	r6, r0
 800989e:	f340 8088 	ble.w	80099b2 <_dtoa_r+0x8c2>
 80098a2:	461a      	mov	r2, r3
 80098a4:	4601      	mov	r1, r0
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 fbf4 	bl	800a094 <__pow5mult>
 80098ac:	9b06      	ldr	r3, [sp, #24]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	4606      	mov	r6, r0
 80098b2:	f340 8081 	ble.w	80099b8 <_dtoa_r+0x8c8>
 80098b6:	f04f 0800 	mov.w	r8, #0
 80098ba:	6933      	ldr	r3, [r6, #16]
 80098bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098c0:	6918      	ldr	r0, [r3, #16]
 80098c2:	f000 fad7 	bl	8009e74 <__hi0bits>
 80098c6:	f1c0 0020 	rsb	r0, r0, #32
 80098ca:	9b05      	ldr	r3, [sp, #20]
 80098cc:	4418      	add	r0, r3
 80098ce:	f010 001f 	ands.w	r0, r0, #31
 80098d2:	f000 8092 	beq.w	80099fa <_dtoa_r+0x90a>
 80098d6:	f1c0 0320 	rsb	r3, r0, #32
 80098da:	2b04      	cmp	r3, #4
 80098dc:	f340 808a 	ble.w	80099f4 <_dtoa_r+0x904>
 80098e0:	f1c0 001c 	rsb	r0, r0, #28
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	4403      	add	r3, r0
 80098e8:	9304      	str	r3, [sp, #16]
 80098ea:	9b05      	ldr	r3, [sp, #20]
 80098ec:	4403      	add	r3, r0
 80098ee:	4405      	add	r5, r0
 80098f0:	9305      	str	r3, [sp, #20]
 80098f2:	9b04      	ldr	r3, [sp, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dd07      	ble.n	8009908 <_dtoa_r+0x818>
 80098f8:	ee18 1a10 	vmov	r1, s16
 80098fc:	461a      	mov	r2, r3
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 fc22 	bl	800a148 <__lshift>
 8009904:	ee08 0a10 	vmov	s16, r0
 8009908:	9b05      	ldr	r3, [sp, #20]
 800990a:	2b00      	cmp	r3, #0
 800990c:	dd05      	ble.n	800991a <_dtoa_r+0x82a>
 800990e:	4631      	mov	r1, r6
 8009910:	461a      	mov	r2, r3
 8009912:	4620      	mov	r0, r4
 8009914:	f000 fc18 	bl	800a148 <__lshift>
 8009918:	4606      	mov	r6, r0
 800991a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d06e      	beq.n	80099fe <_dtoa_r+0x90e>
 8009920:	ee18 0a10 	vmov	r0, s16
 8009924:	4631      	mov	r1, r6
 8009926:	f000 fc7f 	bl	800a228 <__mcmp>
 800992a:	2800      	cmp	r0, #0
 800992c:	da67      	bge.n	80099fe <_dtoa_r+0x90e>
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	3b01      	subs	r3, #1
 8009932:	ee18 1a10 	vmov	r1, s16
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	220a      	movs	r2, #10
 800993a:	2300      	movs	r3, #0
 800993c:	4620      	mov	r0, r4
 800993e:	f000 fa53 	bl	8009de8 <__multadd>
 8009942:	9b08      	ldr	r3, [sp, #32]
 8009944:	ee08 0a10 	vmov	s16, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 81b1 	beq.w	8009cb0 <_dtoa_r+0xbc0>
 800994e:	2300      	movs	r3, #0
 8009950:	4639      	mov	r1, r7
 8009952:	220a      	movs	r2, #10
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fa47 	bl	8009de8 <__multadd>
 800995a:	9b02      	ldr	r3, [sp, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	4607      	mov	r7, r0
 8009960:	f300 808e 	bgt.w	8009a80 <_dtoa_r+0x990>
 8009964:	9b06      	ldr	r3, [sp, #24]
 8009966:	2b02      	cmp	r3, #2
 8009968:	dc51      	bgt.n	8009a0e <_dtoa_r+0x91e>
 800996a:	e089      	b.n	8009a80 <_dtoa_r+0x990>
 800996c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800996e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009972:	e74b      	b.n	800980c <_dtoa_r+0x71c>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	1e5e      	subs	r6, r3, #1
 8009978:	9b07      	ldr	r3, [sp, #28]
 800997a:	42b3      	cmp	r3, r6
 800997c:	bfbf      	itttt	lt
 800997e:	9b07      	ldrlt	r3, [sp, #28]
 8009980:	9607      	strlt	r6, [sp, #28]
 8009982:	1af2      	sublt	r2, r6, r3
 8009984:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009986:	bfb6      	itet	lt
 8009988:	189b      	addlt	r3, r3, r2
 800998a:	1b9e      	subge	r6, r3, r6
 800998c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	bfb8      	it	lt
 8009992:	2600      	movlt	r6, #0
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfb7      	itett	lt
 8009998:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800999c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80099a0:	1a9d      	sublt	r5, r3, r2
 80099a2:	2300      	movlt	r3, #0
 80099a4:	e734      	b.n	8009810 <_dtoa_r+0x720>
 80099a6:	9e07      	ldr	r6, [sp, #28]
 80099a8:	9d04      	ldr	r5, [sp, #16]
 80099aa:	9f08      	ldr	r7, [sp, #32]
 80099ac:	e73b      	b.n	8009826 <_dtoa_r+0x736>
 80099ae:	9a07      	ldr	r2, [sp, #28]
 80099b0:	e767      	b.n	8009882 <_dtoa_r+0x792>
 80099b2:	9b06      	ldr	r3, [sp, #24]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	dc18      	bgt.n	80099ea <_dtoa_r+0x8fa>
 80099b8:	f1ba 0f00 	cmp.w	sl, #0
 80099bc:	d115      	bne.n	80099ea <_dtoa_r+0x8fa>
 80099be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099c2:	b993      	cbnz	r3, 80099ea <_dtoa_r+0x8fa>
 80099c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099c8:	0d1b      	lsrs	r3, r3, #20
 80099ca:	051b      	lsls	r3, r3, #20
 80099cc:	b183      	cbz	r3, 80099f0 <_dtoa_r+0x900>
 80099ce:	9b04      	ldr	r3, [sp, #16]
 80099d0:	3301      	adds	r3, #1
 80099d2:	9304      	str	r3, [sp, #16]
 80099d4:	9b05      	ldr	r3, [sp, #20]
 80099d6:	3301      	adds	r3, #1
 80099d8:	9305      	str	r3, [sp, #20]
 80099da:	f04f 0801 	mov.w	r8, #1
 80099de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f47f af6a 	bne.w	80098ba <_dtoa_r+0x7ca>
 80099e6:	2001      	movs	r0, #1
 80099e8:	e76f      	b.n	80098ca <_dtoa_r+0x7da>
 80099ea:	f04f 0800 	mov.w	r8, #0
 80099ee:	e7f6      	b.n	80099de <_dtoa_r+0x8ee>
 80099f0:	4698      	mov	r8, r3
 80099f2:	e7f4      	b.n	80099de <_dtoa_r+0x8ee>
 80099f4:	f43f af7d 	beq.w	80098f2 <_dtoa_r+0x802>
 80099f8:	4618      	mov	r0, r3
 80099fa:	301c      	adds	r0, #28
 80099fc:	e772      	b.n	80098e4 <_dtoa_r+0x7f4>
 80099fe:	9b03      	ldr	r3, [sp, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	dc37      	bgt.n	8009a74 <_dtoa_r+0x984>
 8009a04:	9b06      	ldr	r3, [sp, #24]
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	dd34      	ble.n	8009a74 <_dtoa_r+0x984>
 8009a0a:	9b03      	ldr	r3, [sp, #12]
 8009a0c:	9302      	str	r3, [sp, #8]
 8009a0e:	9b02      	ldr	r3, [sp, #8]
 8009a10:	b96b      	cbnz	r3, 8009a2e <_dtoa_r+0x93e>
 8009a12:	4631      	mov	r1, r6
 8009a14:	2205      	movs	r2, #5
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 f9e6 	bl	8009de8 <__multadd>
 8009a1c:	4601      	mov	r1, r0
 8009a1e:	4606      	mov	r6, r0
 8009a20:	ee18 0a10 	vmov	r0, s16
 8009a24:	f000 fc00 	bl	800a228 <__mcmp>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f73f adbb 	bgt.w	80095a4 <_dtoa_r+0x4b4>
 8009a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a30:	9d01      	ldr	r5, [sp, #4]
 8009a32:	43db      	mvns	r3, r3
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	f04f 0800 	mov.w	r8, #0
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 f9b1 	bl	8009da4 <_Bfree>
 8009a42:	2f00      	cmp	r7, #0
 8009a44:	f43f aea4 	beq.w	8009790 <_dtoa_r+0x6a0>
 8009a48:	f1b8 0f00 	cmp.w	r8, #0
 8009a4c:	d005      	beq.n	8009a5a <_dtoa_r+0x96a>
 8009a4e:	45b8      	cmp	r8, r7
 8009a50:	d003      	beq.n	8009a5a <_dtoa_r+0x96a>
 8009a52:	4641      	mov	r1, r8
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 f9a5 	bl	8009da4 <_Bfree>
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 f9a1 	bl	8009da4 <_Bfree>
 8009a62:	e695      	b.n	8009790 <_dtoa_r+0x6a0>
 8009a64:	2600      	movs	r6, #0
 8009a66:	4637      	mov	r7, r6
 8009a68:	e7e1      	b.n	8009a2e <_dtoa_r+0x93e>
 8009a6a:	9700      	str	r7, [sp, #0]
 8009a6c:	4637      	mov	r7, r6
 8009a6e:	e599      	b.n	80095a4 <_dtoa_r+0x4b4>
 8009a70:	40240000 	.word	0x40240000
 8009a74:	9b08      	ldr	r3, [sp, #32]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 80ca 	beq.w	8009c10 <_dtoa_r+0xb20>
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	9302      	str	r3, [sp, #8]
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	dd05      	ble.n	8009a90 <_dtoa_r+0x9a0>
 8009a84:	4639      	mov	r1, r7
 8009a86:	462a      	mov	r2, r5
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fb5d 	bl	800a148 <__lshift>
 8009a8e:	4607      	mov	r7, r0
 8009a90:	f1b8 0f00 	cmp.w	r8, #0
 8009a94:	d05b      	beq.n	8009b4e <_dtoa_r+0xa5e>
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 f943 	bl	8009d24 <_Balloc>
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	b928      	cbnz	r0, 8009aae <_dtoa_r+0x9be>
 8009aa2:	4b87      	ldr	r3, [pc, #540]	; (8009cc0 <_dtoa_r+0xbd0>)
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009aaa:	f7ff bb3b 	b.w	8009124 <_dtoa_r+0x34>
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	3202      	adds	r2, #2
 8009ab2:	0092      	lsls	r2, r2, #2
 8009ab4:	f107 010c 	add.w	r1, r7, #12
 8009ab8:	300c      	adds	r0, #12
 8009aba:	f000 f925 	bl	8009d08 <memcpy>
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 fb40 	bl	800a148 <__lshift>
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	f103 0901 	add.w	r9, r3, #1
 8009ace:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	9305      	str	r3, [sp, #20]
 8009ad6:	f00a 0301 	and.w	r3, sl, #1
 8009ada:	46b8      	mov	r8, r7
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	4607      	mov	r7, r0
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	ee18 0a10 	vmov	r0, s16
 8009ae6:	f7ff fa77 	bl	8008fd8 <quorem>
 8009aea:	4641      	mov	r1, r8
 8009aec:	9002      	str	r0, [sp, #8]
 8009aee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009af2:	ee18 0a10 	vmov	r0, s16
 8009af6:	f000 fb97 	bl	800a228 <__mcmp>
 8009afa:	463a      	mov	r2, r7
 8009afc:	9003      	str	r0, [sp, #12]
 8009afe:	4631      	mov	r1, r6
 8009b00:	4620      	mov	r0, r4
 8009b02:	f000 fbad 	bl	800a260 <__mdiff>
 8009b06:	68c2      	ldr	r2, [r0, #12]
 8009b08:	f109 3bff 	add.w	fp, r9, #4294967295
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	bb02      	cbnz	r2, 8009b52 <_dtoa_r+0xa62>
 8009b10:	4601      	mov	r1, r0
 8009b12:	ee18 0a10 	vmov	r0, s16
 8009b16:	f000 fb87 	bl	800a228 <__mcmp>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4620      	mov	r0, r4
 8009b20:	9207      	str	r2, [sp, #28]
 8009b22:	f000 f93f 	bl	8009da4 <_Bfree>
 8009b26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009b2a:	ea43 0102 	orr.w	r1, r3, r2
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	430b      	orrs	r3, r1
 8009b32:	464d      	mov	r5, r9
 8009b34:	d10f      	bne.n	8009b56 <_dtoa_r+0xa66>
 8009b36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b3a:	d02a      	beq.n	8009b92 <_dtoa_r+0xaa2>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	dd02      	ble.n	8009b48 <_dtoa_r+0xa58>
 8009b42:	9b02      	ldr	r3, [sp, #8]
 8009b44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009b48:	f88b a000 	strb.w	sl, [fp]
 8009b4c:	e775      	b.n	8009a3a <_dtoa_r+0x94a>
 8009b4e:	4638      	mov	r0, r7
 8009b50:	e7ba      	b.n	8009ac8 <_dtoa_r+0x9d8>
 8009b52:	2201      	movs	r2, #1
 8009b54:	e7e2      	b.n	8009b1c <_dtoa_r+0xa2c>
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	db04      	blt.n	8009b66 <_dtoa_r+0xa76>
 8009b5c:	9906      	ldr	r1, [sp, #24]
 8009b5e:	430b      	orrs	r3, r1
 8009b60:	9904      	ldr	r1, [sp, #16]
 8009b62:	430b      	orrs	r3, r1
 8009b64:	d122      	bne.n	8009bac <_dtoa_r+0xabc>
 8009b66:	2a00      	cmp	r2, #0
 8009b68:	ddee      	ble.n	8009b48 <_dtoa_r+0xa58>
 8009b6a:	ee18 1a10 	vmov	r1, s16
 8009b6e:	2201      	movs	r2, #1
 8009b70:	4620      	mov	r0, r4
 8009b72:	f000 fae9 	bl	800a148 <__lshift>
 8009b76:	4631      	mov	r1, r6
 8009b78:	ee08 0a10 	vmov	s16, r0
 8009b7c:	f000 fb54 	bl	800a228 <__mcmp>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	dc03      	bgt.n	8009b8c <_dtoa_r+0xa9c>
 8009b84:	d1e0      	bne.n	8009b48 <_dtoa_r+0xa58>
 8009b86:	f01a 0f01 	tst.w	sl, #1
 8009b8a:	d0dd      	beq.n	8009b48 <_dtoa_r+0xa58>
 8009b8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b90:	d1d7      	bne.n	8009b42 <_dtoa_r+0xa52>
 8009b92:	2339      	movs	r3, #57	; 0x39
 8009b94:	f88b 3000 	strb.w	r3, [fp]
 8009b98:	462b      	mov	r3, r5
 8009b9a:	461d      	mov	r5, r3
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ba2:	2a39      	cmp	r2, #57	; 0x39
 8009ba4:	d071      	beq.n	8009c8a <_dtoa_r+0xb9a>
 8009ba6:	3201      	adds	r2, #1
 8009ba8:	701a      	strb	r2, [r3, #0]
 8009baa:	e746      	b.n	8009a3a <_dtoa_r+0x94a>
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	dd07      	ble.n	8009bc0 <_dtoa_r+0xad0>
 8009bb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bb4:	d0ed      	beq.n	8009b92 <_dtoa_r+0xaa2>
 8009bb6:	f10a 0301 	add.w	r3, sl, #1
 8009bba:	f88b 3000 	strb.w	r3, [fp]
 8009bbe:	e73c      	b.n	8009a3a <_dtoa_r+0x94a>
 8009bc0:	9b05      	ldr	r3, [sp, #20]
 8009bc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009bc6:	4599      	cmp	r9, r3
 8009bc8:	d047      	beq.n	8009c5a <_dtoa_r+0xb6a>
 8009bca:	ee18 1a10 	vmov	r1, s16
 8009bce:	2300      	movs	r3, #0
 8009bd0:	220a      	movs	r2, #10
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 f908 	bl	8009de8 <__multadd>
 8009bd8:	45b8      	cmp	r8, r7
 8009bda:	ee08 0a10 	vmov	s16, r0
 8009bde:	f04f 0300 	mov.w	r3, #0
 8009be2:	f04f 020a 	mov.w	r2, #10
 8009be6:	4641      	mov	r1, r8
 8009be8:	4620      	mov	r0, r4
 8009bea:	d106      	bne.n	8009bfa <_dtoa_r+0xb0a>
 8009bec:	f000 f8fc 	bl	8009de8 <__multadd>
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	4607      	mov	r7, r0
 8009bf4:	f109 0901 	add.w	r9, r9, #1
 8009bf8:	e772      	b.n	8009ae0 <_dtoa_r+0x9f0>
 8009bfa:	f000 f8f5 	bl	8009de8 <__multadd>
 8009bfe:	4639      	mov	r1, r7
 8009c00:	4680      	mov	r8, r0
 8009c02:	2300      	movs	r3, #0
 8009c04:	220a      	movs	r2, #10
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 f8ee 	bl	8009de8 <__multadd>
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	e7f1      	b.n	8009bf4 <_dtoa_r+0xb04>
 8009c10:	9b03      	ldr	r3, [sp, #12]
 8009c12:	9302      	str	r3, [sp, #8]
 8009c14:	9d01      	ldr	r5, [sp, #4]
 8009c16:	ee18 0a10 	vmov	r0, s16
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	f7ff f9dc 	bl	8008fd8 <quorem>
 8009c20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c24:	9b01      	ldr	r3, [sp, #4]
 8009c26:	f805 ab01 	strb.w	sl, [r5], #1
 8009c2a:	1aea      	subs	r2, r5, r3
 8009c2c:	9b02      	ldr	r3, [sp, #8]
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	dd09      	ble.n	8009c46 <_dtoa_r+0xb56>
 8009c32:	ee18 1a10 	vmov	r1, s16
 8009c36:	2300      	movs	r3, #0
 8009c38:	220a      	movs	r2, #10
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f000 f8d4 	bl	8009de8 <__multadd>
 8009c40:	ee08 0a10 	vmov	s16, r0
 8009c44:	e7e7      	b.n	8009c16 <_dtoa_r+0xb26>
 8009c46:	9b02      	ldr	r3, [sp, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	bfc8      	it	gt
 8009c4c:	461d      	movgt	r5, r3
 8009c4e:	9b01      	ldr	r3, [sp, #4]
 8009c50:	bfd8      	it	le
 8009c52:	2501      	movle	r5, #1
 8009c54:	441d      	add	r5, r3
 8009c56:	f04f 0800 	mov.w	r8, #0
 8009c5a:	ee18 1a10 	vmov	r1, s16
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 fa71 	bl	800a148 <__lshift>
 8009c66:	4631      	mov	r1, r6
 8009c68:	ee08 0a10 	vmov	s16, r0
 8009c6c:	f000 fadc 	bl	800a228 <__mcmp>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	dc91      	bgt.n	8009b98 <_dtoa_r+0xaa8>
 8009c74:	d102      	bne.n	8009c7c <_dtoa_r+0xb8c>
 8009c76:	f01a 0f01 	tst.w	sl, #1
 8009c7a:	d18d      	bne.n	8009b98 <_dtoa_r+0xaa8>
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	461d      	mov	r5, r3
 8009c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c84:	2a30      	cmp	r2, #48	; 0x30
 8009c86:	d0fa      	beq.n	8009c7e <_dtoa_r+0xb8e>
 8009c88:	e6d7      	b.n	8009a3a <_dtoa_r+0x94a>
 8009c8a:	9a01      	ldr	r2, [sp, #4]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d184      	bne.n	8009b9a <_dtoa_r+0xaaa>
 8009c90:	9b00      	ldr	r3, [sp, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	2331      	movs	r3, #49	; 0x31
 8009c98:	7013      	strb	r3, [r2, #0]
 8009c9a:	e6ce      	b.n	8009a3a <_dtoa_r+0x94a>
 8009c9c:	4b09      	ldr	r3, [pc, #36]	; (8009cc4 <_dtoa_r+0xbd4>)
 8009c9e:	f7ff ba95 	b.w	80091cc <_dtoa_r+0xdc>
 8009ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f47f aa6e 	bne.w	8009186 <_dtoa_r+0x96>
 8009caa:	4b07      	ldr	r3, [pc, #28]	; (8009cc8 <_dtoa_r+0xbd8>)
 8009cac:	f7ff ba8e 	b.w	80091cc <_dtoa_r+0xdc>
 8009cb0:	9b02      	ldr	r3, [sp, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	dcae      	bgt.n	8009c14 <_dtoa_r+0xb24>
 8009cb6:	9b06      	ldr	r3, [sp, #24]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	f73f aea8 	bgt.w	8009a0e <_dtoa_r+0x91e>
 8009cbe:	e7a9      	b.n	8009c14 <_dtoa_r+0xb24>
 8009cc0:	0800c9f2 	.word	0x0800c9f2
 8009cc4:	0800cb71 	.word	0x0800cb71
 8009cc8:	0800c973 	.word	0x0800c973

08009ccc <_localeconv_r>:
 8009ccc:	4800      	ldr	r0, [pc, #0]	; (8009cd0 <_localeconv_r+0x4>)
 8009cce:	4770      	bx	lr
 8009cd0:	200001f0 	.word	0x200001f0

08009cd4 <_lseek_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4d07      	ldr	r5, [pc, #28]	; (8009cf4 <_lseek_r+0x20>)
 8009cd8:	4604      	mov	r4, r0
 8009cda:	4608      	mov	r0, r1
 8009cdc:	4611      	mov	r1, r2
 8009cde:	2200      	movs	r2, #0
 8009ce0:	602a      	str	r2, [r5, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	f7f8 fd62 	bl	80027ac <_lseek>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d102      	bne.n	8009cf2 <_lseek_r+0x1e>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	b103      	cbz	r3, 8009cf2 <_lseek_r+0x1e>
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	20000534 	.word	0x20000534

08009cf8 <malloc>:
 8009cf8:	4b02      	ldr	r3, [pc, #8]	; (8009d04 <malloc+0xc>)
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	f000 bc17 	b.w	800a530 <_malloc_r>
 8009d02:	bf00      	nop
 8009d04:	2000009c 	.word	0x2000009c

08009d08 <memcpy>:
 8009d08:	440a      	add	r2, r1
 8009d0a:	4291      	cmp	r1, r2
 8009d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d10:	d100      	bne.n	8009d14 <memcpy+0xc>
 8009d12:	4770      	bx	lr
 8009d14:	b510      	push	{r4, lr}
 8009d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d1e:	4291      	cmp	r1, r2
 8009d20:	d1f9      	bne.n	8009d16 <memcpy+0xe>
 8009d22:	bd10      	pop	{r4, pc}

08009d24 <_Balloc>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d28:	4604      	mov	r4, r0
 8009d2a:	460d      	mov	r5, r1
 8009d2c:	b976      	cbnz	r6, 8009d4c <_Balloc+0x28>
 8009d2e:	2010      	movs	r0, #16
 8009d30:	f7ff ffe2 	bl	8009cf8 <malloc>
 8009d34:	4602      	mov	r2, r0
 8009d36:	6260      	str	r0, [r4, #36]	; 0x24
 8009d38:	b920      	cbnz	r0, 8009d44 <_Balloc+0x20>
 8009d3a:	4b18      	ldr	r3, [pc, #96]	; (8009d9c <_Balloc+0x78>)
 8009d3c:	4818      	ldr	r0, [pc, #96]	; (8009da0 <_Balloc+0x7c>)
 8009d3e:	2166      	movs	r1, #102	; 0x66
 8009d40:	f001 f9f2 	bl	800b128 <__assert_func>
 8009d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d48:	6006      	str	r6, [r0, #0]
 8009d4a:	60c6      	str	r6, [r0, #12]
 8009d4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d4e:	68f3      	ldr	r3, [r6, #12]
 8009d50:	b183      	cbz	r3, 8009d74 <_Balloc+0x50>
 8009d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d5a:	b9b8      	cbnz	r0, 8009d8c <_Balloc+0x68>
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	fa01 f605 	lsl.w	r6, r1, r5
 8009d62:	1d72      	adds	r2, r6, #5
 8009d64:	0092      	lsls	r2, r2, #2
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 fb60 	bl	800a42c <_calloc_r>
 8009d6c:	b160      	cbz	r0, 8009d88 <_Balloc+0x64>
 8009d6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d72:	e00e      	b.n	8009d92 <_Balloc+0x6e>
 8009d74:	2221      	movs	r2, #33	; 0x21
 8009d76:	2104      	movs	r1, #4
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f000 fb57 	bl	800a42c <_calloc_r>
 8009d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d80:	60f0      	str	r0, [r6, #12]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e4      	bne.n	8009d52 <_Balloc+0x2e>
 8009d88:	2000      	movs	r0, #0
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	6802      	ldr	r2, [r0, #0]
 8009d8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d92:	2300      	movs	r3, #0
 8009d94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d98:	e7f7      	b.n	8009d8a <_Balloc+0x66>
 8009d9a:	bf00      	nop
 8009d9c:	0800c980 	.word	0x0800c980
 8009da0:	0800ca03 	.word	0x0800ca03

08009da4 <_Bfree>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009da8:	4605      	mov	r5, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	b976      	cbnz	r6, 8009dcc <_Bfree+0x28>
 8009dae:	2010      	movs	r0, #16
 8009db0:	f7ff ffa2 	bl	8009cf8 <malloc>
 8009db4:	4602      	mov	r2, r0
 8009db6:	6268      	str	r0, [r5, #36]	; 0x24
 8009db8:	b920      	cbnz	r0, 8009dc4 <_Bfree+0x20>
 8009dba:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <_Bfree+0x3c>)
 8009dbc:	4809      	ldr	r0, [pc, #36]	; (8009de4 <_Bfree+0x40>)
 8009dbe:	218a      	movs	r1, #138	; 0x8a
 8009dc0:	f001 f9b2 	bl	800b128 <__assert_func>
 8009dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dc8:	6006      	str	r6, [r0, #0]
 8009dca:	60c6      	str	r6, [r0, #12]
 8009dcc:	b13c      	cbz	r4, 8009dde <_Bfree+0x3a>
 8009dce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009dd0:	6862      	ldr	r2, [r4, #4]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dd8:	6021      	str	r1, [r4, #0]
 8009dda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dde:	bd70      	pop	{r4, r5, r6, pc}
 8009de0:	0800c980 	.word	0x0800c980
 8009de4:	0800ca03 	.word	0x0800ca03

08009de8 <__multadd>:
 8009de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dec:	690d      	ldr	r5, [r1, #16]
 8009dee:	4607      	mov	r7, r0
 8009df0:	460c      	mov	r4, r1
 8009df2:	461e      	mov	r6, r3
 8009df4:	f101 0c14 	add.w	ip, r1, #20
 8009df8:	2000      	movs	r0, #0
 8009dfa:	f8dc 3000 	ldr.w	r3, [ip]
 8009dfe:	b299      	uxth	r1, r3
 8009e00:	fb02 6101 	mla	r1, r2, r1, r6
 8009e04:	0c1e      	lsrs	r6, r3, #16
 8009e06:	0c0b      	lsrs	r3, r1, #16
 8009e08:	fb02 3306 	mla	r3, r2, r6, r3
 8009e0c:	b289      	uxth	r1, r1
 8009e0e:	3001      	adds	r0, #1
 8009e10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e14:	4285      	cmp	r5, r0
 8009e16:	f84c 1b04 	str.w	r1, [ip], #4
 8009e1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e1e:	dcec      	bgt.n	8009dfa <__multadd+0x12>
 8009e20:	b30e      	cbz	r6, 8009e66 <__multadd+0x7e>
 8009e22:	68a3      	ldr	r3, [r4, #8]
 8009e24:	42ab      	cmp	r3, r5
 8009e26:	dc19      	bgt.n	8009e5c <__multadd+0x74>
 8009e28:	6861      	ldr	r1, [r4, #4]
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	3101      	adds	r1, #1
 8009e2e:	f7ff ff79 	bl	8009d24 <_Balloc>
 8009e32:	4680      	mov	r8, r0
 8009e34:	b928      	cbnz	r0, 8009e42 <__multadd+0x5a>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <__multadd+0x84>)
 8009e3a:	480d      	ldr	r0, [pc, #52]	; (8009e70 <__multadd+0x88>)
 8009e3c:	21b5      	movs	r1, #181	; 0xb5
 8009e3e:	f001 f973 	bl	800b128 <__assert_func>
 8009e42:	6922      	ldr	r2, [r4, #16]
 8009e44:	3202      	adds	r2, #2
 8009e46:	f104 010c 	add.w	r1, r4, #12
 8009e4a:	0092      	lsls	r2, r2, #2
 8009e4c:	300c      	adds	r0, #12
 8009e4e:	f7ff ff5b 	bl	8009d08 <memcpy>
 8009e52:	4621      	mov	r1, r4
 8009e54:	4638      	mov	r0, r7
 8009e56:	f7ff ffa5 	bl	8009da4 <_Bfree>
 8009e5a:	4644      	mov	r4, r8
 8009e5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e60:	3501      	adds	r5, #1
 8009e62:	615e      	str	r6, [r3, #20]
 8009e64:	6125      	str	r5, [r4, #16]
 8009e66:	4620      	mov	r0, r4
 8009e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e6c:	0800c9f2 	.word	0x0800c9f2
 8009e70:	0800ca03 	.word	0x0800ca03

08009e74 <__hi0bits>:
 8009e74:	0c03      	lsrs	r3, r0, #16
 8009e76:	041b      	lsls	r3, r3, #16
 8009e78:	b9d3      	cbnz	r3, 8009eb0 <__hi0bits+0x3c>
 8009e7a:	0400      	lsls	r0, r0, #16
 8009e7c:	2310      	movs	r3, #16
 8009e7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e82:	bf04      	itt	eq
 8009e84:	0200      	lsleq	r0, r0, #8
 8009e86:	3308      	addeq	r3, #8
 8009e88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e8c:	bf04      	itt	eq
 8009e8e:	0100      	lsleq	r0, r0, #4
 8009e90:	3304      	addeq	r3, #4
 8009e92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e96:	bf04      	itt	eq
 8009e98:	0080      	lsleq	r0, r0, #2
 8009e9a:	3302      	addeq	r3, #2
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	db05      	blt.n	8009eac <__hi0bits+0x38>
 8009ea0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ea4:	f103 0301 	add.w	r3, r3, #1
 8009ea8:	bf08      	it	eq
 8009eaa:	2320      	moveq	r3, #32
 8009eac:	4618      	mov	r0, r3
 8009eae:	4770      	bx	lr
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	e7e4      	b.n	8009e7e <__hi0bits+0xa>

08009eb4 <__lo0bits>:
 8009eb4:	6803      	ldr	r3, [r0, #0]
 8009eb6:	f013 0207 	ands.w	r2, r3, #7
 8009eba:	4601      	mov	r1, r0
 8009ebc:	d00b      	beq.n	8009ed6 <__lo0bits+0x22>
 8009ebe:	07da      	lsls	r2, r3, #31
 8009ec0:	d423      	bmi.n	8009f0a <__lo0bits+0x56>
 8009ec2:	0798      	lsls	r0, r3, #30
 8009ec4:	bf49      	itett	mi
 8009ec6:	085b      	lsrmi	r3, r3, #1
 8009ec8:	089b      	lsrpl	r3, r3, #2
 8009eca:	2001      	movmi	r0, #1
 8009ecc:	600b      	strmi	r3, [r1, #0]
 8009ece:	bf5c      	itt	pl
 8009ed0:	600b      	strpl	r3, [r1, #0]
 8009ed2:	2002      	movpl	r0, #2
 8009ed4:	4770      	bx	lr
 8009ed6:	b298      	uxth	r0, r3
 8009ed8:	b9a8      	cbnz	r0, 8009f06 <__lo0bits+0x52>
 8009eda:	0c1b      	lsrs	r3, r3, #16
 8009edc:	2010      	movs	r0, #16
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	b90a      	cbnz	r2, 8009ee6 <__lo0bits+0x32>
 8009ee2:	3008      	adds	r0, #8
 8009ee4:	0a1b      	lsrs	r3, r3, #8
 8009ee6:	071a      	lsls	r2, r3, #28
 8009ee8:	bf04      	itt	eq
 8009eea:	091b      	lsreq	r3, r3, #4
 8009eec:	3004      	addeq	r0, #4
 8009eee:	079a      	lsls	r2, r3, #30
 8009ef0:	bf04      	itt	eq
 8009ef2:	089b      	lsreq	r3, r3, #2
 8009ef4:	3002      	addeq	r0, #2
 8009ef6:	07da      	lsls	r2, r3, #31
 8009ef8:	d403      	bmi.n	8009f02 <__lo0bits+0x4e>
 8009efa:	085b      	lsrs	r3, r3, #1
 8009efc:	f100 0001 	add.w	r0, r0, #1
 8009f00:	d005      	beq.n	8009f0e <__lo0bits+0x5a>
 8009f02:	600b      	str	r3, [r1, #0]
 8009f04:	4770      	bx	lr
 8009f06:	4610      	mov	r0, r2
 8009f08:	e7e9      	b.n	8009ede <__lo0bits+0x2a>
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	4770      	bx	lr
 8009f0e:	2020      	movs	r0, #32
 8009f10:	4770      	bx	lr
	...

08009f14 <__i2b>:
 8009f14:	b510      	push	{r4, lr}
 8009f16:	460c      	mov	r4, r1
 8009f18:	2101      	movs	r1, #1
 8009f1a:	f7ff ff03 	bl	8009d24 <_Balloc>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	b928      	cbnz	r0, 8009f2e <__i2b+0x1a>
 8009f22:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <__i2b+0x24>)
 8009f24:	4805      	ldr	r0, [pc, #20]	; (8009f3c <__i2b+0x28>)
 8009f26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f2a:	f001 f8fd 	bl	800b128 <__assert_func>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	6144      	str	r4, [r0, #20]
 8009f32:	6103      	str	r3, [r0, #16]
 8009f34:	bd10      	pop	{r4, pc}
 8009f36:	bf00      	nop
 8009f38:	0800c9f2 	.word	0x0800c9f2
 8009f3c:	0800ca03 	.word	0x0800ca03

08009f40 <__multiply>:
 8009f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	4691      	mov	r9, r2
 8009f46:	690a      	ldr	r2, [r1, #16]
 8009f48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	bfb8      	it	lt
 8009f50:	460b      	movlt	r3, r1
 8009f52:	460c      	mov	r4, r1
 8009f54:	bfbc      	itt	lt
 8009f56:	464c      	movlt	r4, r9
 8009f58:	4699      	movlt	r9, r3
 8009f5a:	6927      	ldr	r7, [r4, #16]
 8009f5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f60:	68a3      	ldr	r3, [r4, #8]
 8009f62:	6861      	ldr	r1, [r4, #4]
 8009f64:	eb07 060a 	add.w	r6, r7, sl
 8009f68:	42b3      	cmp	r3, r6
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	bfb8      	it	lt
 8009f6e:	3101      	addlt	r1, #1
 8009f70:	f7ff fed8 	bl	8009d24 <_Balloc>
 8009f74:	b930      	cbnz	r0, 8009f84 <__multiply+0x44>
 8009f76:	4602      	mov	r2, r0
 8009f78:	4b44      	ldr	r3, [pc, #272]	; (800a08c <__multiply+0x14c>)
 8009f7a:	4845      	ldr	r0, [pc, #276]	; (800a090 <__multiply+0x150>)
 8009f7c:	f240 115d 	movw	r1, #349	; 0x15d
 8009f80:	f001 f8d2 	bl	800b128 <__assert_func>
 8009f84:	f100 0514 	add.w	r5, r0, #20
 8009f88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f8c:	462b      	mov	r3, r5
 8009f8e:	2200      	movs	r2, #0
 8009f90:	4543      	cmp	r3, r8
 8009f92:	d321      	bcc.n	8009fd8 <__multiply+0x98>
 8009f94:	f104 0314 	add.w	r3, r4, #20
 8009f98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f9c:	f109 0314 	add.w	r3, r9, #20
 8009fa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009fa4:	9202      	str	r2, [sp, #8]
 8009fa6:	1b3a      	subs	r2, r7, r4
 8009fa8:	3a15      	subs	r2, #21
 8009faa:	f022 0203 	bic.w	r2, r2, #3
 8009fae:	3204      	adds	r2, #4
 8009fb0:	f104 0115 	add.w	r1, r4, #21
 8009fb4:	428f      	cmp	r7, r1
 8009fb6:	bf38      	it	cc
 8009fb8:	2204      	movcc	r2, #4
 8009fba:	9201      	str	r2, [sp, #4]
 8009fbc:	9a02      	ldr	r2, [sp, #8]
 8009fbe:	9303      	str	r3, [sp, #12]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d80c      	bhi.n	8009fde <__multiply+0x9e>
 8009fc4:	2e00      	cmp	r6, #0
 8009fc6:	dd03      	ble.n	8009fd0 <__multiply+0x90>
 8009fc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d05a      	beq.n	800a086 <__multiply+0x146>
 8009fd0:	6106      	str	r6, [r0, #16]
 8009fd2:	b005      	add	sp, #20
 8009fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd8:	f843 2b04 	str.w	r2, [r3], #4
 8009fdc:	e7d8      	b.n	8009f90 <__multiply+0x50>
 8009fde:	f8b3 a000 	ldrh.w	sl, [r3]
 8009fe2:	f1ba 0f00 	cmp.w	sl, #0
 8009fe6:	d024      	beq.n	800a032 <__multiply+0xf2>
 8009fe8:	f104 0e14 	add.w	lr, r4, #20
 8009fec:	46a9      	mov	r9, r5
 8009fee:	f04f 0c00 	mov.w	ip, #0
 8009ff2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ff6:	f8d9 1000 	ldr.w	r1, [r9]
 8009ffa:	fa1f fb82 	uxth.w	fp, r2
 8009ffe:	b289      	uxth	r1, r1
 800a000:	fb0a 110b 	mla	r1, sl, fp, r1
 800a004:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a008:	f8d9 2000 	ldr.w	r2, [r9]
 800a00c:	4461      	add	r1, ip
 800a00e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a012:	fb0a c20b 	mla	r2, sl, fp, ip
 800a016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a01a:	b289      	uxth	r1, r1
 800a01c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a020:	4577      	cmp	r7, lr
 800a022:	f849 1b04 	str.w	r1, [r9], #4
 800a026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a02a:	d8e2      	bhi.n	8009ff2 <__multiply+0xb2>
 800a02c:	9a01      	ldr	r2, [sp, #4]
 800a02e:	f845 c002 	str.w	ip, [r5, r2]
 800a032:	9a03      	ldr	r2, [sp, #12]
 800a034:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a038:	3304      	adds	r3, #4
 800a03a:	f1b9 0f00 	cmp.w	r9, #0
 800a03e:	d020      	beq.n	800a082 <__multiply+0x142>
 800a040:	6829      	ldr	r1, [r5, #0]
 800a042:	f104 0c14 	add.w	ip, r4, #20
 800a046:	46ae      	mov	lr, r5
 800a048:	f04f 0a00 	mov.w	sl, #0
 800a04c:	f8bc b000 	ldrh.w	fp, [ip]
 800a050:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a054:	fb09 220b 	mla	r2, r9, fp, r2
 800a058:	4492      	add	sl, r2
 800a05a:	b289      	uxth	r1, r1
 800a05c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a060:	f84e 1b04 	str.w	r1, [lr], #4
 800a064:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a068:	f8be 1000 	ldrh.w	r1, [lr]
 800a06c:	0c12      	lsrs	r2, r2, #16
 800a06e:	fb09 1102 	mla	r1, r9, r2, r1
 800a072:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a076:	4567      	cmp	r7, ip
 800a078:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a07c:	d8e6      	bhi.n	800a04c <__multiply+0x10c>
 800a07e:	9a01      	ldr	r2, [sp, #4]
 800a080:	50a9      	str	r1, [r5, r2]
 800a082:	3504      	adds	r5, #4
 800a084:	e79a      	b.n	8009fbc <__multiply+0x7c>
 800a086:	3e01      	subs	r6, #1
 800a088:	e79c      	b.n	8009fc4 <__multiply+0x84>
 800a08a:	bf00      	nop
 800a08c:	0800c9f2 	.word	0x0800c9f2
 800a090:	0800ca03 	.word	0x0800ca03

0800a094 <__pow5mult>:
 800a094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a098:	4615      	mov	r5, r2
 800a09a:	f012 0203 	ands.w	r2, r2, #3
 800a09e:	4606      	mov	r6, r0
 800a0a0:	460f      	mov	r7, r1
 800a0a2:	d007      	beq.n	800a0b4 <__pow5mult+0x20>
 800a0a4:	4c25      	ldr	r4, [pc, #148]	; (800a13c <__pow5mult+0xa8>)
 800a0a6:	3a01      	subs	r2, #1
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0ae:	f7ff fe9b 	bl	8009de8 <__multadd>
 800a0b2:	4607      	mov	r7, r0
 800a0b4:	10ad      	asrs	r5, r5, #2
 800a0b6:	d03d      	beq.n	800a134 <__pow5mult+0xa0>
 800a0b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a0ba:	b97c      	cbnz	r4, 800a0dc <__pow5mult+0x48>
 800a0bc:	2010      	movs	r0, #16
 800a0be:	f7ff fe1b 	bl	8009cf8 <malloc>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	6270      	str	r0, [r6, #36]	; 0x24
 800a0c6:	b928      	cbnz	r0, 800a0d4 <__pow5mult+0x40>
 800a0c8:	4b1d      	ldr	r3, [pc, #116]	; (800a140 <__pow5mult+0xac>)
 800a0ca:	481e      	ldr	r0, [pc, #120]	; (800a144 <__pow5mult+0xb0>)
 800a0cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a0d0:	f001 f82a 	bl	800b128 <__assert_func>
 800a0d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0d8:	6004      	str	r4, [r0, #0]
 800a0da:	60c4      	str	r4, [r0, #12]
 800a0dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a0e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0e4:	b94c      	cbnz	r4, 800a0fa <__pow5mult+0x66>
 800a0e6:	f240 2171 	movw	r1, #625	; 0x271
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7ff ff12 	bl	8009f14 <__i2b>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	6003      	str	r3, [r0, #0]
 800a0fa:	f04f 0900 	mov.w	r9, #0
 800a0fe:	07eb      	lsls	r3, r5, #31
 800a100:	d50a      	bpl.n	800a118 <__pow5mult+0x84>
 800a102:	4639      	mov	r1, r7
 800a104:	4622      	mov	r2, r4
 800a106:	4630      	mov	r0, r6
 800a108:	f7ff ff1a 	bl	8009f40 <__multiply>
 800a10c:	4639      	mov	r1, r7
 800a10e:	4680      	mov	r8, r0
 800a110:	4630      	mov	r0, r6
 800a112:	f7ff fe47 	bl	8009da4 <_Bfree>
 800a116:	4647      	mov	r7, r8
 800a118:	106d      	asrs	r5, r5, #1
 800a11a:	d00b      	beq.n	800a134 <__pow5mult+0xa0>
 800a11c:	6820      	ldr	r0, [r4, #0]
 800a11e:	b938      	cbnz	r0, 800a130 <__pow5mult+0x9c>
 800a120:	4622      	mov	r2, r4
 800a122:	4621      	mov	r1, r4
 800a124:	4630      	mov	r0, r6
 800a126:	f7ff ff0b 	bl	8009f40 <__multiply>
 800a12a:	6020      	str	r0, [r4, #0]
 800a12c:	f8c0 9000 	str.w	r9, [r0]
 800a130:	4604      	mov	r4, r0
 800a132:	e7e4      	b.n	800a0fe <__pow5mult+0x6a>
 800a134:	4638      	mov	r0, r7
 800a136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a13a:	bf00      	nop
 800a13c:	0800cb50 	.word	0x0800cb50
 800a140:	0800c980 	.word	0x0800c980
 800a144:	0800ca03 	.word	0x0800ca03

0800a148 <__lshift>:
 800a148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a14c:	460c      	mov	r4, r1
 800a14e:	6849      	ldr	r1, [r1, #4]
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a156:	68a3      	ldr	r3, [r4, #8]
 800a158:	4607      	mov	r7, r0
 800a15a:	4691      	mov	r9, r2
 800a15c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a160:	f108 0601 	add.w	r6, r8, #1
 800a164:	42b3      	cmp	r3, r6
 800a166:	db0b      	blt.n	800a180 <__lshift+0x38>
 800a168:	4638      	mov	r0, r7
 800a16a:	f7ff fddb 	bl	8009d24 <_Balloc>
 800a16e:	4605      	mov	r5, r0
 800a170:	b948      	cbnz	r0, 800a186 <__lshift+0x3e>
 800a172:	4602      	mov	r2, r0
 800a174:	4b2a      	ldr	r3, [pc, #168]	; (800a220 <__lshift+0xd8>)
 800a176:	482b      	ldr	r0, [pc, #172]	; (800a224 <__lshift+0xdc>)
 800a178:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a17c:	f000 ffd4 	bl	800b128 <__assert_func>
 800a180:	3101      	adds	r1, #1
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	e7ee      	b.n	800a164 <__lshift+0x1c>
 800a186:	2300      	movs	r3, #0
 800a188:	f100 0114 	add.w	r1, r0, #20
 800a18c:	f100 0210 	add.w	r2, r0, #16
 800a190:	4618      	mov	r0, r3
 800a192:	4553      	cmp	r3, sl
 800a194:	db37      	blt.n	800a206 <__lshift+0xbe>
 800a196:	6920      	ldr	r0, [r4, #16]
 800a198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a19c:	f104 0314 	add.w	r3, r4, #20
 800a1a0:	f019 091f 	ands.w	r9, r9, #31
 800a1a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1ac:	d02f      	beq.n	800a20e <__lshift+0xc6>
 800a1ae:	f1c9 0e20 	rsb	lr, r9, #32
 800a1b2:	468a      	mov	sl, r1
 800a1b4:	f04f 0c00 	mov.w	ip, #0
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	fa02 f209 	lsl.w	r2, r2, r9
 800a1be:	ea42 020c 	orr.w	r2, r2, ip
 800a1c2:	f84a 2b04 	str.w	r2, [sl], #4
 800a1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ca:	4298      	cmp	r0, r3
 800a1cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a1d0:	d8f2      	bhi.n	800a1b8 <__lshift+0x70>
 800a1d2:	1b03      	subs	r3, r0, r4
 800a1d4:	3b15      	subs	r3, #21
 800a1d6:	f023 0303 	bic.w	r3, r3, #3
 800a1da:	3304      	adds	r3, #4
 800a1dc:	f104 0215 	add.w	r2, r4, #21
 800a1e0:	4290      	cmp	r0, r2
 800a1e2:	bf38      	it	cc
 800a1e4:	2304      	movcc	r3, #4
 800a1e6:	f841 c003 	str.w	ip, [r1, r3]
 800a1ea:	f1bc 0f00 	cmp.w	ip, #0
 800a1ee:	d001      	beq.n	800a1f4 <__lshift+0xac>
 800a1f0:	f108 0602 	add.w	r6, r8, #2
 800a1f4:	3e01      	subs	r6, #1
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	612e      	str	r6, [r5, #16]
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	f7ff fdd2 	bl	8009da4 <_Bfree>
 800a200:	4628      	mov	r0, r5
 800a202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a206:	f842 0f04 	str.w	r0, [r2, #4]!
 800a20a:	3301      	adds	r3, #1
 800a20c:	e7c1      	b.n	800a192 <__lshift+0x4a>
 800a20e:	3904      	subs	r1, #4
 800a210:	f853 2b04 	ldr.w	r2, [r3], #4
 800a214:	f841 2f04 	str.w	r2, [r1, #4]!
 800a218:	4298      	cmp	r0, r3
 800a21a:	d8f9      	bhi.n	800a210 <__lshift+0xc8>
 800a21c:	e7ea      	b.n	800a1f4 <__lshift+0xac>
 800a21e:	bf00      	nop
 800a220:	0800c9f2 	.word	0x0800c9f2
 800a224:	0800ca03 	.word	0x0800ca03

0800a228 <__mcmp>:
 800a228:	b530      	push	{r4, r5, lr}
 800a22a:	6902      	ldr	r2, [r0, #16]
 800a22c:	690c      	ldr	r4, [r1, #16]
 800a22e:	1b12      	subs	r2, r2, r4
 800a230:	d10e      	bne.n	800a250 <__mcmp+0x28>
 800a232:	f100 0314 	add.w	r3, r0, #20
 800a236:	3114      	adds	r1, #20
 800a238:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a23c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a240:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a244:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a248:	42a5      	cmp	r5, r4
 800a24a:	d003      	beq.n	800a254 <__mcmp+0x2c>
 800a24c:	d305      	bcc.n	800a25a <__mcmp+0x32>
 800a24e:	2201      	movs	r2, #1
 800a250:	4610      	mov	r0, r2
 800a252:	bd30      	pop	{r4, r5, pc}
 800a254:	4283      	cmp	r3, r0
 800a256:	d3f3      	bcc.n	800a240 <__mcmp+0x18>
 800a258:	e7fa      	b.n	800a250 <__mcmp+0x28>
 800a25a:	f04f 32ff 	mov.w	r2, #4294967295
 800a25e:	e7f7      	b.n	800a250 <__mcmp+0x28>

0800a260 <__mdiff>:
 800a260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	460c      	mov	r4, r1
 800a266:	4606      	mov	r6, r0
 800a268:	4611      	mov	r1, r2
 800a26a:	4620      	mov	r0, r4
 800a26c:	4690      	mov	r8, r2
 800a26e:	f7ff ffdb 	bl	800a228 <__mcmp>
 800a272:	1e05      	subs	r5, r0, #0
 800a274:	d110      	bne.n	800a298 <__mdiff+0x38>
 800a276:	4629      	mov	r1, r5
 800a278:	4630      	mov	r0, r6
 800a27a:	f7ff fd53 	bl	8009d24 <_Balloc>
 800a27e:	b930      	cbnz	r0, 800a28e <__mdiff+0x2e>
 800a280:	4b3a      	ldr	r3, [pc, #232]	; (800a36c <__mdiff+0x10c>)
 800a282:	4602      	mov	r2, r0
 800a284:	f240 2132 	movw	r1, #562	; 0x232
 800a288:	4839      	ldr	r0, [pc, #228]	; (800a370 <__mdiff+0x110>)
 800a28a:	f000 ff4d 	bl	800b128 <__assert_func>
 800a28e:	2301      	movs	r3, #1
 800a290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a298:	bfa4      	itt	ge
 800a29a:	4643      	movge	r3, r8
 800a29c:	46a0      	movge	r8, r4
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2a4:	bfa6      	itte	ge
 800a2a6:	461c      	movge	r4, r3
 800a2a8:	2500      	movge	r5, #0
 800a2aa:	2501      	movlt	r5, #1
 800a2ac:	f7ff fd3a 	bl	8009d24 <_Balloc>
 800a2b0:	b920      	cbnz	r0, 800a2bc <__mdiff+0x5c>
 800a2b2:	4b2e      	ldr	r3, [pc, #184]	; (800a36c <__mdiff+0x10c>)
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a2ba:	e7e5      	b.n	800a288 <__mdiff+0x28>
 800a2bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a2c0:	6926      	ldr	r6, [r4, #16]
 800a2c2:	60c5      	str	r5, [r0, #12]
 800a2c4:	f104 0914 	add.w	r9, r4, #20
 800a2c8:	f108 0514 	add.w	r5, r8, #20
 800a2cc:	f100 0e14 	add.w	lr, r0, #20
 800a2d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a2d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2d8:	f108 0210 	add.w	r2, r8, #16
 800a2dc:	46f2      	mov	sl, lr
 800a2de:	2100      	movs	r1, #0
 800a2e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a2e8:	fa1f f883 	uxth.w	r8, r3
 800a2ec:	fa11 f18b 	uxtah	r1, r1, fp
 800a2f0:	0c1b      	lsrs	r3, r3, #16
 800a2f2:	eba1 0808 	sub.w	r8, r1, r8
 800a2f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a2fe:	fa1f f888 	uxth.w	r8, r8
 800a302:	1419      	asrs	r1, r3, #16
 800a304:	454e      	cmp	r6, r9
 800a306:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a30a:	f84a 3b04 	str.w	r3, [sl], #4
 800a30e:	d8e7      	bhi.n	800a2e0 <__mdiff+0x80>
 800a310:	1b33      	subs	r3, r6, r4
 800a312:	3b15      	subs	r3, #21
 800a314:	f023 0303 	bic.w	r3, r3, #3
 800a318:	3304      	adds	r3, #4
 800a31a:	3415      	adds	r4, #21
 800a31c:	42a6      	cmp	r6, r4
 800a31e:	bf38      	it	cc
 800a320:	2304      	movcc	r3, #4
 800a322:	441d      	add	r5, r3
 800a324:	4473      	add	r3, lr
 800a326:	469e      	mov	lr, r3
 800a328:	462e      	mov	r6, r5
 800a32a:	4566      	cmp	r6, ip
 800a32c:	d30e      	bcc.n	800a34c <__mdiff+0xec>
 800a32e:	f10c 0203 	add.w	r2, ip, #3
 800a332:	1b52      	subs	r2, r2, r5
 800a334:	f022 0203 	bic.w	r2, r2, #3
 800a338:	3d03      	subs	r5, #3
 800a33a:	45ac      	cmp	ip, r5
 800a33c:	bf38      	it	cc
 800a33e:	2200      	movcc	r2, #0
 800a340:	441a      	add	r2, r3
 800a342:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a346:	b17b      	cbz	r3, 800a368 <__mdiff+0x108>
 800a348:	6107      	str	r7, [r0, #16]
 800a34a:	e7a3      	b.n	800a294 <__mdiff+0x34>
 800a34c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a350:	fa11 f288 	uxtah	r2, r1, r8
 800a354:	1414      	asrs	r4, r2, #16
 800a356:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a35a:	b292      	uxth	r2, r2
 800a35c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a360:	f84e 2b04 	str.w	r2, [lr], #4
 800a364:	1421      	asrs	r1, r4, #16
 800a366:	e7e0      	b.n	800a32a <__mdiff+0xca>
 800a368:	3f01      	subs	r7, #1
 800a36a:	e7ea      	b.n	800a342 <__mdiff+0xe2>
 800a36c:	0800c9f2 	.word	0x0800c9f2
 800a370:	0800ca03 	.word	0x0800ca03

0800a374 <__d2b>:
 800a374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a378:	4689      	mov	r9, r1
 800a37a:	2101      	movs	r1, #1
 800a37c:	ec57 6b10 	vmov	r6, r7, d0
 800a380:	4690      	mov	r8, r2
 800a382:	f7ff fccf 	bl	8009d24 <_Balloc>
 800a386:	4604      	mov	r4, r0
 800a388:	b930      	cbnz	r0, 800a398 <__d2b+0x24>
 800a38a:	4602      	mov	r2, r0
 800a38c:	4b25      	ldr	r3, [pc, #148]	; (800a424 <__d2b+0xb0>)
 800a38e:	4826      	ldr	r0, [pc, #152]	; (800a428 <__d2b+0xb4>)
 800a390:	f240 310a 	movw	r1, #778	; 0x30a
 800a394:	f000 fec8 	bl	800b128 <__assert_func>
 800a398:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a39c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3a0:	bb35      	cbnz	r5, 800a3f0 <__d2b+0x7c>
 800a3a2:	2e00      	cmp	r6, #0
 800a3a4:	9301      	str	r3, [sp, #4]
 800a3a6:	d028      	beq.n	800a3fa <__d2b+0x86>
 800a3a8:	4668      	mov	r0, sp
 800a3aa:	9600      	str	r6, [sp, #0]
 800a3ac:	f7ff fd82 	bl	8009eb4 <__lo0bits>
 800a3b0:	9900      	ldr	r1, [sp, #0]
 800a3b2:	b300      	cbz	r0, 800a3f6 <__d2b+0x82>
 800a3b4:	9a01      	ldr	r2, [sp, #4]
 800a3b6:	f1c0 0320 	rsb	r3, r0, #32
 800a3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a3be:	430b      	orrs	r3, r1
 800a3c0:	40c2      	lsrs	r2, r0
 800a3c2:	6163      	str	r3, [r4, #20]
 800a3c4:	9201      	str	r2, [sp, #4]
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	61a3      	str	r3, [r4, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bf14      	ite	ne
 800a3ce:	2202      	movne	r2, #2
 800a3d0:	2201      	moveq	r2, #1
 800a3d2:	6122      	str	r2, [r4, #16]
 800a3d4:	b1d5      	cbz	r5, 800a40c <__d2b+0x98>
 800a3d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3da:	4405      	add	r5, r0
 800a3dc:	f8c9 5000 	str.w	r5, [r9]
 800a3e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3e4:	f8c8 0000 	str.w	r0, [r8]
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	b003      	add	sp, #12
 800a3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3f4:	e7d5      	b.n	800a3a2 <__d2b+0x2e>
 800a3f6:	6161      	str	r1, [r4, #20]
 800a3f8:	e7e5      	b.n	800a3c6 <__d2b+0x52>
 800a3fa:	a801      	add	r0, sp, #4
 800a3fc:	f7ff fd5a 	bl	8009eb4 <__lo0bits>
 800a400:	9b01      	ldr	r3, [sp, #4]
 800a402:	6163      	str	r3, [r4, #20]
 800a404:	2201      	movs	r2, #1
 800a406:	6122      	str	r2, [r4, #16]
 800a408:	3020      	adds	r0, #32
 800a40a:	e7e3      	b.n	800a3d4 <__d2b+0x60>
 800a40c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a410:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a414:	f8c9 0000 	str.w	r0, [r9]
 800a418:	6918      	ldr	r0, [r3, #16]
 800a41a:	f7ff fd2b 	bl	8009e74 <__hi0bits>
 800a41e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a422:	e7df      	b.n	800a3e4 <__d2b+0x70>
 800a424:	0800c9f2 	.word	0x0800c9f2
 800a428:	0800ca03 	.word	0x0800ca03

0800a42c <_calloc_r>:
 800a42c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a42e:	fba1 2402 	umull	r2, r4, r1, r2
 800a432:	b94c      	cbnz	r4, 800a448 <_calloc_r+0x1c>
 800a434:	4611      	mov	r1, r2
 800a436:	9201      	str	r2, [sp, #4]
 800a438:	f000 f87a 	bl	800a530 <_malloc_r>
 800a43c:	9a01      	ldr	r2, [sp, #4]
 800a43e:	4605      	mov	r5, r0
 800a440:	b930      	cbnz	r0, 800a450 <_calloc_r+0x24>
 800a442:	4628      	mov	r0, r5
 800a444:	b003      	add	sp, #12
 800a446:	bd30      	pop	{r4, r5, pc}
 800a448:	220c      	movs	r2, #12
 800a44a:	6002      	str	r2, [r0, #0]
 800a44c:	2500      	movs	r5, #0
 800a44e:	e7f8      	b.n	800a442 <_calloc_r+0x16>
 800a450:	4621      	mov	r1, r4
 800a452:	f7fd ffe5 	bl	8008420 <memset>
 800a456:	e7f4      	b.n	800a442 <_calloc_r+0x16>

0800a458 <_free_r>:
 800a458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a45a:	2900      	cmp	r1, #0
 800a45c:	d044      	beq.n	800a4e8 <_free_r+0x90>
 800a45e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a462:	9001      	str	r0, [sp, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f1a1 0404 	sub.w	r4, r1, #4
 800a46a:	bfb8      	it	lt
 800a46c:	18e4      	addlt	r4, r4, r3
 800a46e:	f001 f871 	bl	800b554 <__malloc_lock>
 800a472:	4a1e      	ldr	r2, [pc, #120]	; (800a4ec <_free_r+0x94>)
 800a474:	9801      	ldr	r0, [sp, #4]
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	b933      	cbnz	r3, 800a488 <_free_r+0x30>
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	6014      	str	r4, [r2, #0]
 800a47e:	b003      	add	sp, #12
 800a480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a484:	f001 b86c 	b.w	800b560 <__malloc_unlock>
 800a488:	42a3      	cmp	r3, r4
 800a48a:	d908      	bls.n	800a49e <_free_r+0x46>
 800a48c:	6825      	ldr	r5, [r4, #0]
 800a48e:	1961      	adds	r1, r4, r5
 800a490:	428b      	cmp	r3, r1
 800a492:	bf01      	itttt	eq
 800a494:	6819      	ldreq	r1, [r3, #0]
 800a496:	685b      	ldreq	r3, [r3, #4]
 800a498:	1949      	addeq	r1, r1, r5
 800a49a:	6021      	streq	r1, [r4, #0]
 800a49c:	e7ed      	b.n	800a47a <_free_r+0x22>
 800a49e:	461a      	mov	r2, r3
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	b10b      	cbz	r3, 800a4a8 <_free_r+0x50>
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	d9fa      	bls.n	800a49e <_free_r+0x46>
 800a4a8:	6811      	ldr	r1, [r2, #0]
 800a4aa:	1855      	adds	r5, r2, r1
 800a4ac:	42a5      	cmp	r5, r4
 800a4ae:	d10b      	bne.n	800a4c8 <_free_r+0x70>
 800a4b0:	6824      	ldr	r4, [r4, #0]
 800a4b2:	4421      	add	r1, r4
 800a4b4:	1854      	adds	r4, r2, r1
 800a4b6:	42a3      	cmp	r3, r4
 800a4b8:	6011      	str	r1, [r2, #0]
 800a4ba:	d1e0      	bne.n	800a47e <_free_r+0x26>
 800a4bc:	681c      	ldr	r4, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	6053      	str	r3, [r2, #4]
 800a4c2:	4421      	add	r1, r4
 800a4c4:	6011      	str	r1, [r2, #0]
 800a4c6:	e7da      	b.n	800a47e <_free_r+0x26>
 800a4c8:	d902      	bls.n	800a4d0 <_free_r+0x78>
 800a4ca:	230c      	movs	r3, #12
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	e7d6      	b.n	800a47e <_free_r+0x26>
 800a4d0:	6825      	ldr	r5, [r4, #0]
 800a4d2:	1961      	adds	r1, r4, r5
 800a4d4:	428b      	cmp	r3, r1
 800a4d6:	bf04      	itt	eq
 800a4d8:	6819      	ldreq	r1, [r3, #0]
 800a4da:	685b      	ldreq	r3, [r3, #4]
 800a4dc:	6063      	str	r3, [r4, #4]
 800a4de:	bf04      	itt	eq
 800a4e0:	1949      	addeq	r1, r1, r5
 800a4e2:	6021      	streq	r1, [r4, #0]
 800a4e4:	6054      	str	r4, [r2, #4]
 800a4e6:	e7ca      	b.n	800a47e <_free_r+0x26>
 800a4e8:	b003      	add	sp, #12
 800a4ea:	bd30      	pop	{r4, r5, pc}
 800a4ec:	2000052c 	.word	0x2000052c

0800a4f0 <sbrk_aligned>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	4e0e      	ldr	r6, [pc, #56]	; (800a52c <sbrk_aligned+0x3c>)
 800a4f4:	460c      	mov	r4, r1
 800a4f6:	6831      	ldr	r1, [r6, #0]
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	b911      	cbnz	r1, 800a502 <sbrk_aligned+0x12>
 800a4fc:	f000 fd1e 	bl	800af3c <_sbrk_r>
 800a500:	6030      	str	r0, [r6, #0]
 800a502:	4621      	mov	r1, r4
 800a504:	4628      	mov	r0, r5
 800a506:	f000 fd19 	bl	800af3c <_sbrk_r>
 800a50a:	1c43      	adds	r3, r0, #1
 800a50c:	d00a      	beq.n	800a524 <sbrk_aligned+0x34>
 800a50e:	1cc4      	adds	r4, r0, #3
 800a510:	f024 0403 	bic.w	r4, r4, #3
 800a514:	42a0      	cmp	r0, r4
 800a516:	d007      	beq.n	800a528 <sbrk_aligned+0x38>
 800a518:	1a21      	subs	r1, r4, r0
 800a51a:	4628      	mov	r0, r5
 800a51c:	f000 fd0e 	bl	800af3c <_sbrk_r>
 800a520:	3001      	adds	r0, #1
 800a522:	d101      	bne.n	800a528 <sbrk_aligned+0x38>
 800a524:	f04f 34ff 	mov.w	r4, #4294967295
 800a528:	4620      	mov	r0, r4
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	20000530 	.word	0x20000530

0800a530 <_malloc_r>:
 800a530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a534:	1ccd      	adds	r5, r1, #3
 800a536:	f025 0503 	bic.w	r5, r5, #3
 800a53a:	3508      	adds	r5, #8
 800a53c:	2d0c      	cmp	r5, #12
 800a53e:	bf38      	it	cc
 800a540:	250c      	movcc	r5, #12
 800a542:	2d00      	cmp	r5, #0
 800a544:	4607      	mov	r7, r0
 800a546:	db01      	blt.n	800a54c <_malloc_r+0x1c>
 800a548:	42a9      	cmp	r1, r5
 800a54a:	d905      	bls.n	800a558 <_malloc_r+0x28>
 800a54c:	230c      	movs	r3, #12
 800a54e:	603b      	str	r3, [r7, #0]
 800a550:	2600      	movs	r6, #0
 800a552:	4630      	mov	r0, r6
 800a554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a558:	4e2e      	ldr	r6, [pc, #184]	; (800a614 <_malloc_r+0xe4>)
 800a55a:	f000 fffb 	bl	800b554 <__malloc_lock>
 800a55e:	6833      	ldr	r3, [r6, #0]
 800a560:	461c      	mov	r4, r3
 800a562:	bb34      	cbnz	r4, 800a5b2 <_malloc_r+0x82>
 800a564:	4629      	mov	r1, r5
 800a566:	4638      	mov	r0, r7
 800a568:	f7ff ffc2 	bl	800a4f0 <sbrk_aligned>
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	4604      	mov	r4, r0
 800a570:	d14d      	bne.n	800a60e <_malloc_r+0xde>
 800a572:	6834      	ldr	r4, [r6, #0]
 800a574:	4626      	mov	r6, r4
 800a576:	2e00      	cmp	r6, #0
 800a578:	d140      	bne.n	800a5fc <_malloc_r+0xcc>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	4631      	mov	r1, r6
 800a57e:	4638      	mov	r0, r7
 800a580:	eb04 0803 	add.w	r8, r4, r3
 800a584:	f000 fcda 	bl	800af3c <_sbrk_r>
 800a588:	4580      	cmp	r8, r0
 800a58a:	d13a      	bne.n	800a602 <_malloc_r+0xd2>
 800a58c:	6821      	ldr	r1, [r4, #0]
 800a58e:	3503      	adds	r5, #3
 800a590:	1a6d      	subs	r5, r5, r1
 800a592:	f025 0503 	bic.w	r5, r5, #3
 800a596:	3508      	adds	r5, #8
 800a598:	2d0c      	cmp	r5, #12
 800a59a:	bf38      	it	cc
 800a59c:	250c      	movcc	r5, #12
 800a59e:	4629      	mov	r1, r5
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f7ff ffa5 	bl	800a4f0 <sbrk_aligned>
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	d02b      	beq.n	800a602 <_malloc_r+0xd2>
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	442b      	add	r3, r5
 800a5ae:	6023      	str	r3, [r4, #0]
 800a5b0:	e00e      	b.n	800a5d0 <_malloc_r+0xa0>
 800a5b2:	6822      	ldr	r2, [r4, #0]
 800a5b4:	1b52      	subs	r2, r2, r5
 800a5b6:	d41e      	bmi.n	800a5f6 <_malloc_r+0xc6>
 800a5b8:	2a0b      	cmp	r2, #11
 800a5ba:	d916      	bls.n	800a5ea <_malloc_r+0xba>
 800a5bc:	1961      	adds	r1, r4, r5
 800a5be:	42a3      	cmp	r3, r4
 800a5c0:	6025      	str	r5, [r4, #0]
 800a5c2:	bf18      	it	ne
 800a5c4:	6059      	strne	r1, [r3, #4]
 800a5c6:	6863      	ldr	r3, [r4, #4]
 800a5c8:	bf08      	it	eq
 800a5ca:	6031      	streq	r1, [r6, #0]
 800a5cc:	5162      	str	r2, [r4, r5]
 800a5ce:	604b      	str	r3, [r1, #4]
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	f104 060b 	add.w	r6, r4, #11
 800a5d6:	f000 ffc3 	bl	800b560 <__malloc_unlock>
 800a5da:	f026 0607 	bic.w	r6, r6, #7
 800a5de:	1d23      	adds	r3, r4, #4
 800a5e0:	1af2      	subs	r2, r6, r3
 800a5e2:	d0b6      	beq.n	800a552 <_malloc_r+0x22>
 800a5e4:	1b9b      	subs	r3, r3, r6
 800a5e6:	50a3      	str	r3, [r4, r2]
 800a5e8:	e7b3      	b.n	800a552 <_malloc_r+0x22>
 800a5ea:	6862      	ldr	r2, [r4, #4]
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	bf0c      	ite	eq
 800a5f0:	6032      	streq	r2, [r6, #0]
 800a5f2:	605a      	strne	r2, [r3, #4]
 800a5f4:	e7ec      	b.n	800a5d0 <_malloc_r+0xa0>
 800a5f6:	4623      	mov	r3, r4
 800a5f8:	6864      	ldr	r4, [r4, #4]
 800a5fa:	e7b2      	b.n	800a562 <_malloc_r+0x32>
 800a5fc:	4634      	mov	r4, r6
 800a5fe:	6876      	ldr	r6, [r6, #4]
 800a600:	e7b9      	b.n	800a576 <_malloc_r+0x46>
 800a602:	230c      	movs	r3, #12
 800a604:	603b      	str	r3, [r7, #0]
 800a606:	4638      	mov	r0, r7
 800a608:	f000 ffaa 	bl	800b560 <__malloc_unlock>
 800a60c:	e7a1      	b.n	800a552 <_malloc_r+0x22>
 800a60e:	6025      	str	r5, [r4, #0]
 800a610:	e7de      	b.n	800a5d0 <_malloc_r+0xa0>
 800a612:	bf00      	nop
 800a614:	2000052c 	.word	0x2000052c

0800a618 <__ssputs_r>:
 800a618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a61c:	688e      	ldr	r6, [r1, #8]
 800a61e:	429e      	cmp	r6, r3
 800a620:	4682      	mov	sl, r0
 800a622:	460c      	mov	r4, r1
 800a624:	4690      	mov	r8, r2
 800a626:	461f      	mov	r7, r3
 800a628:	d838      	bhi.n	800a69c <__ssputs_r+0x84>
 800a62a:	898a      	ldrh	r2, [r1, #12]
 800a62c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a630:	d032      	beq.n	800a698 <__ssputs_r+0x80>
 800a632:	6825      	ldr	r5, [r4, #0]
 800a634:	6909      	ldr	r1, [r1, #16]
 800a636:	eba5 0901 	sub.w	r9, r5, r1
 800a63a:	6965      	ldr	r5, [r4, #20]
 800a63c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a644:	3301      	adds	r3, #1
 800a646:	444b      	add	r3, r9
 800a648:	106d      	asrs	r5, r5, #1
 800a64a:	429d      	cmp	r5, r3
 800a64c:	bf38      	it	cc
 800a64e:	461d      	movcc	r5, r3
 800a650:	0553      	lsls	r3, r2, #21
 800a652:	d531      	bpl.n	800a6b8 <__ssputs_r+0xa0>
 800a654:	4629      	mov	r1, r5
 800a656:	f7ff ff6b 	bl	800a530 <_malloc_r>
 800a65a:	4606      	mov	r6, r0
 800a65c:	b950      	cbnz	r0, 800a674 <__ssputs_r+0x5c>
 800a65e:	230c      	movs	r3, #12
 800a660:	f8ca 3000 	str.w	r3, [sl]
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295
 800a670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a674:	6921      	ldr	r1, [r4, #16]
 800a676:	464a      	mov	r2, r9
 800a678:	f7ff fb46 	bl	8009d08 <memcpy>
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a686:	81a3      	strh	r3, [r4, #12]
 800a688:	6126      	str	r6, [r4, #16]
 800a68a:	6165      	str	r5, [r4, #20]
 800a68c:	444e      	add	r6, r9
 800a68e:	eba5 0509 	sub.w	r5, r5, r9
 800a692:	6026      	str	r6, [r4, #0]
 800a694:	60a5      	str	r5, [r4, #8]
 800a696:	463e      	mov	r6, r7
 800a698:	42be      	cmp	r6, r7
 800a69a:	d900      	bls.n	800a69e <__ssputs_r+0x86>
 800a69c:	463e      	mov	r6, r7
 800a69e:	6820      	ldr	r0, [r4, #0]
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	4641      	mov	r1, r8
 800a6a4:	f000 ff3c 	bl	800b520 <memmove>
 800a6a8:	68a3      	ldr	r3, [r4, #8]
 800a6aa:	1b9b      	subs	r3, r3, r6
 800a6ac:	60a3      	str	r3, [r4, #8]
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	4433      	add	r3, r6
 800a6b2:	6023      	str	r3, [r4, #0]
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e7db      	b.n	800a670 <__ssputs_r+0x58>
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	f000 ff57 	bl	800b56c <_realloc_r>
 800a6be:	4606      	mov	r6, r0
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d1e1      	bne.n	800a688 <__ssputs_r+0x70>
 800a6c4:	6921      	ldr	r1, [r4, #16]
 800a6c6:	4650      	mov	r0, sl
 800a6c8:	f7ff fec6 	bl	800a458 <_free_r>
 800a6cc:	e7c7      	b.n	800a65e <__ssputs_r+0x46>
	...

0800a6d0 <_svfiprintf_r>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	4698      	mov	r8, r3
 800a6d6:	898b      	ldrh	r3, [r1, #12]
 800a6d8:	061b      	lsls	r3, r3, #24
 800a6da:	b09d      	sub	sp, #116	; 0x74
 800a6dc:	4607      	mov	r7, r0
 800a6de:	460d      	mov	r5, r1
 800a6e0:	4614      	mov	r4, r2
 800a6e2:	d50e      	bpl.n	800a702 <_svfiprintf_r+0x32>
 800a6e4:	690b      	ldr	r3, [r1, #16]
 800a6e6:	b963      	cbnz	r3, 800a702 <_svfiprintf_r+0x32>
 800a6e8:	2140      	movs	r1, #64	; 0x40
 800a6ea:	f7ff ff21 	bl	800a530 <_malloc_r>
 800a6ee:	6028      	str	r0, [r5, #0]
 800a6f0:	6128      	str	r0, [r5, #16]
 800a6f2:	b920      	cbnz	r0, 800a6fe <_svfiprintf_r+0x2e>
 800a6f4:	230c      	movs	r3, #12
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fc:	e0d1      	b.n	800a8a2 <_svfiprintf_r+0x1d2>
 800a6fe:	2340      	movs	r3, #64	; 0x40
 800a700:	616b      	str	r3, [r5, #20]
 800a702:	2300      	movs	r3, #0
 800a704:	9309      	str	r3, [sp, #36]	; 0x24
 800a706:	2320      	movs	r3, #32
 800a708:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a70c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a710:	2330      	movs	r3, #48	; 0x30
 800a712:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8bc <_svfiprintf_r+0x1ec>
 800a716:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a71a:	f04f 0901 	mov.w	r9, #1
 800a71e:	4623      	mov	r3, r4
 800a720:	469a      	mov	sl, r3
 800a722:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a726:	b10a      	cbz	r2, 800a72c <_svfiprintf_r+0x5c>
 800a728:	2a25      	cmp	r2, #37	; 0x25
 800a72a:	d1f9      	bne.n	800a720 <_svfiprintf_r+0x50>
 800a72c:	ebba 0b04 	subs.w	fp, sl, r4
 800a730:	d00b      	beq.n	800a74a <_svfiprintf_r+0x7a>
 800a732:	465b      	mov	r3, fp
 800a734:	4622      	mov	r2, r4
 800a736:	4629      	mov	r1, r5
 800a738:	4638      	mov	r0, r7
 800a73a:	f7ff ff6d 	bl	800a618 <__ssputs_r>
 800a73e:	3001      	adds	r0, #1
 800a740:	f000 80aa 	beq.w	800a898 <_svfiprintf_r+0x1c8>
 800a744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a746:	445a      	add	r2, fp
 800a748:	9209      	str	r2, [sp, #36]	; 0x24
 800a74a:	f89a 3000 	ldrb.w	r3, [sl]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 80a2 	beq.w	800a898 <_svfiprintf_r+0x1c8>
 800a754:	2300      	movs	r3, #0
 800a756:	f04f 32ff 	mov.w	r2, #4294967295
 800a75a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a75e:	f10a 0a01 	add.w	sl, sl, #1
 800a762:	9304      	str	r3, [sp, #16]
 800a764:	9307      	str	r3, [sp, #28]
 800a766:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a76a:	931a      	str	r3, [sp, #104]	; 0x68
 800a76c:	4654      	mov	r4, sl
 800a76e:	2205      	movs	r2, #5
 800a770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a774:	4851      	ldr	r0, [pc, #324]	; (800a8bc <_svfiprintf_r+0x1ec>)
 800a776:	f7f5 fd4b 	bl	8000210 <memchr>
 800a77a:	9a04      	ldr	r2, [sp, #16]
 800a77c:	b9d8      	cbnz	r0, 800a7b6 <_svfiprintf_r+0xe6>
 800a77e:	06d0      	lsls	r0, r2, #27
 800a780:	bf44      	itt	mi
 800a782:	2320      	movmi	r3, #32
 800a784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a788:	0711      	lsls	r1, r2, #28
 800a78a:	bf44      	itt	mi
 800a78c:	232b      	movmi	r3, #43	; 0x2b
 800a78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a792:	f89a 3000 	ldrb.w	r3, [sl]
 800a796:	2b2a      	cmp	r3, #42	; 0x2a
 800a798:	d015      	beq.n	800a7c6 <_svfiprintf_r+0xf6>
 800a79a:	9a07      	ldr	r2, [sp, #28]
 800a79c:	4654      	mov	r4, sl
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f04f 0c0a 	mov.w	ip, #10
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7aa:	3b30      	subs	r3, #48	; 0x30
 800a7ac:	2b09      	cmp	r3, #9
 800a7ae:	d94e      	bls.n	800a84e <_svfiprintf_r+0x17e>
 800a7b0:	b1b0      	cbz	r0, 800a7e0 <_svfiprintf_r+0x110>
 800a7b2:	9207      	str	r2, [sp, #28]
 800a7b4:	e014      	b.n	800a7e0 <_svfiprintf_r+0x110>
 800a7b6:	eba0 0308 	sub.w	r3, r0, r8
 800a7ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	46a2      	mov	sl, r4
 800a7c4:	e7d2      	b.n	800a76c <_svfiprintf_r+0x9c>
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	1d19      	adds	r1, r3, #4
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	9103      	str	r1, [sp, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bfbb      	ittet	lt
 800a7d2:	425b      	neglt	r3, r3
 800a7d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d8:	9307      	strge	r3, [sp, #28]
 800a7da:	9307      	strlt	r3, [sp, #28]
 800a7dc:	bfb8      	it	lt
 800a7de:	9204      	strlt	r2, [sp, #16]
 800a7e0:	7823      	ldrb	r3, [r4, #0]
 800a7e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a7e4:	d10c      	bne.n	800a800 <_svfiprintf_r+0x130>
 800a7e6:	7863      	ldrb	r3, [r4, #1]
 800a7e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ea:	d135      	bne.n	800a858 <_svfiprintf_r+0x188>
 800a7ec:	9b03      	ldr	r3, [sp, #12]
 800a7ee:	1d1a      	adds	r2, r3, #4
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	9203      	str	r2, [sp, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bfb8      	it	lt
 800a7f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7fc:	3402      	adds	r4, #2
 800a7fe:	9305      	str	r3, [sp, #20]
 800a800:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a8cc <_svfiprintf_r+0x1fc>
 800a804:	7821      	ldrb	r1, [r4, #0]
 800a806:	2203      	movs	r2, #3
 800a808:	4650      	mov	r0, sl
 800a80a:	f7f5 fd01 	bl	8000210 <memchr>
 800a80e:	b140      	cbz	r0, 800a822 <_svfiprintf_r+0x152>
 800a810:	2340      	movs	r3, #64	; 0x40
 800a812:	eba0 000a 	sub.w	r0, r0, sl
 800a816:	fa03 f000 	lsl.w	r0, r3, r0
 800a81a:	9b04      	ldr	r3, [sp, #16]
 800a81c:	4303      	orrs	r3, r0
 800a81e:	3401      	adds	r4, #1
 800a820:	9304      	str	r3, [sp, #16]
 800a822:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a826:	4826      	ldr	r0, [pc, #152]	; (800a8c0 <_svfiprintf_r+0x1f0>)
 800a828:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a82c:	2206      	movs	r2, #6
 800a82e:	f7f5 fcef 	bl	8000210 <memchr>
 800a832:	2800      	cmp	r0, #0
 800a834:	d038      	beq.n	800a8a8 <_svfiprintf_r+0x1d8>
 800a836:	4b23      	ldr	r3, [pc, #140]	; (800a8c4 <_svfiprintf_r+0x1f4>)
 800a838:	bb1b      	cbnz	r3, 800a882 <_svfiprintf_r+0x1b2>
 800a83a:	9b03      	ldr	r3, [sp, #12]
 800a83c:	3307      	adds	r3, #7
 800a83e:	f023 0307 	bic.w	r3, r3, #7
 800a842:	3308      	adds	r3, #8
 800a844:	9303      	str	r3, [sp, #12]
 800a846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a848:	4433      	add	r3, r6
 800a84a:	9309      	str	r3, [sp, #36]	; 0x24
 800a84c:	e767      	b.n	800a71e <_svfiprintf_r+0x4e>
 800a84e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a852:	460c      	mov	r4, r1
 800a854:	2001      	movs	r0, #1
 800a856:	e7a5      	b.n	800a7a4 <_svfiprintf_r+0xd4>
 800a858:	2300      	movs	r3, #0
 800a85a:	3401      	adds	r4, #1
 800a85c:	9305      	str	r3, [sp, #20]
 800a85e:	4619      	mov	r1, r3
 800a860:	f04f 0c0a 	mov.w	ip, #10
 800a864:	4620      	mov	r0, r4
 800a866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a86a:	3a30      	subs	r2, #48	; 0x30
 800a86c:	2a09      	cmp	r2, #9
 800a86e:	d903      	bls.n	800a878 <_svfiprintf_r+0x1a8>
 800a870:	2b00      	cmp	r3, #0
 800a872:	d0c5      	beq.n	800a800 <_svfiprintf_r+0x130>
 800a874:	9105      	str	r1, [sp, #20]
 800a876:	e7c3      	b.n	800a800 <_svfiprintf_r+0x130>
 800a878:	fb0c 2101 	mla	r1, ip, r1, r2
 800a87c:	4604      	mov	r4, r0
 800a87e:	2301      	movs	r3, #1
 800a880:	e7f0      	b.n	800a864 <_svfiprintf_r+0x194>
 800a882:	ab03      	add	r3, sp, #12
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	462a      	mov	r2, r5
 800a888:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <_svfiprintf_r+0x1f8>)
 800a88a:	a904      	add	r1, sp, #16
 800a88c:	4638      	mov	r0, r7
 800a88e:	f7fd fe6f 	bl	8008570 <_printf_float>
 800a892:	1c42      	adds	r2, r0, #1
 800a894:	4606      	mov	r6, r0
 800a896:	d1d6      	bne.n	800a846 <_svfiprintf_r+0x176>
 800a898:	89ab      	ldrh	r3, [r5, #12]
 800a89a:	065b      	lsls	r3, r3, #25
 800a89c:	f53f af2c 	bmi.w	800a6f8 <_svfiprintf_r+0x28>
 800a8a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a2:	b01d      	add	sp, #116	; 0x74
 800a8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a8:	ab03      	add	r3, sp, #12
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	462a      	mov	r2, r5
 800a8ae:	4b06      	ldr	r3, [pc, #24]	; (800a8c8 <_svfiprintf_r+0x1f8>)
 800a8b0:	a904      	add	r1, sp, #16
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	f7fe f900 	bl	8008ab8 <_printf_i>
 800a8b8:	e7eb      	b.n	800a892 <_svfiprintf_r+0x1c2>
 800a8ba:	bf00      	nop
 800a8bc:	0800cb5c 	.word	0x0800cb5c
 800a8c0:	0800cb66 	.word	0x0800cb66
 800a8c4:	08008571 	.word	0x08008571
 800a8c8:	0800a619 	.word	0x0800a619
 800a8cc:	0800cb62 	.word	0x0800cb62

0800a8d0 <_sungetc_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	1c4b      	adds	r3, r1, #1
 800a8d4:	4614      	mov	r4, r2
 800a8d6:	d103      	bne.n	800a8e0 <_sungetc_r+0x10>
 800a8d8:	f04f 35ff 	mov.w	r5, #4294967295
 800a8dc:	4628      	mov	r0, r5
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	8993      	ldrh	r3, [r2, #12]
 800a8e2:	f023 0320 	bic.w	r3, r3, #32
 800a8e6:	8193      	strh	r3, [r2, #12]
 800a8e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8ea:	6852      	ldr	r2, [r2, #4]
 800a8ec:	b2cd      	uxtb	r5, r1
 800a8ee:	b18b      	cbz	r3, 800a914 <_sungetc_r+0x44>
 800a8f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	dd08      	ble.n	800a908 <_sungetc_r+0x38>
 800a8f6:	6823      	ldr	r3, [r4, #0]
 800a8f8:	1e5a      	subs	r2, r3, #1
 800a8fa:	6022      	str	r2, [r4, #0]
 800a8fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a900:	6863      	ldr	r3, [r4, #4]
 800a902:	3301      	adds	r3, #1
 800a904:	6063      	str	r3, [r4, #4]
 800a906:	e7e9      	b.n	800a8dc <_sungetc_r+0xc>
 800a908:	4621      	mov	r1, r4
 800a90a:	f000 fbd3 	bl	800b0b4 <__submore>
 800a90e:	2800      	cmp	r0, #0
 800a910:	d0f1      	beq.n	800a8f6 <_sungetc_r+0x26>
 800a912:	e7e1      	b.n	800a8d8 <_sungetc_r+0x8>
 800a914:	6921      	ldr	r1, [r4, #16]
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	b151      	cbz	r1, 800a930 <_sungetc_r+0x60>
 800a91a:	4299      	cmp	r1, r3
 800a91c:	d208      	bcs.n	800a930 <_sungetc_r+0x60>
 800a91e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a922:	42a9      	cmp	r1, r5
 800a924:	d104      	bne.n	800a930 <_sungetc_r+0x60>
 800a926:	3b01      	subs	r3, #1
 800a928:	3201      	adds	r2, #1
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	6062      	str	r2, [r4, #4]
 800a92e:	e7d5      	b.n	800a8dc <_sungetc_r+0xc>
 800a930:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a938:	6363      	str	r3, [r4, #52]	; 0x34
 800a93a:	2303      	movs	r3, #3
 800a93c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a93e:	4623      	mov	r3, r4
 800a940:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	2301      	movs	r3, #1
 800a948:	e7dc      	b.n	800a904 <_sungetc_r+0x34>

0800a94a <__ssrefill_r>:
 800a94a:	b510      	push	{r4, lr}
 800a94c:	460c      	mov	r4, r1
 800a94e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a950:	b169      	cbz	r1, 800a96e <__ssrefill_r+0x24>
 800a952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a956:	4299      	cmp	r1, r3
 800a958:	d001      	beq.n	800a95e <__ssrefill_r+0x14>
 800a95a:	f7ff fd7d 	bl	800a458 <_free_r>
 800a95e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a960:	6063      	str	r3, [r4, #4]
 800a962:	2000      	movs	r0, #0
 800a964:	6360      	str	r0, [r4, #52]	; 0x34
 800a966:	b113      	cbz	r3, 800a96e <__ssrefill_r+0x24>
 800a968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a96a:	6023      	str	r3, [r4, #0]
 800a96c:	bd10      	pop	{r4, pc}
 800a96e:	6923      	ldr	r3, [r4, #16]
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	2300      	movs	r3, #0
 800a974:	6063      	str	r3, [r4, #4]
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	f043 0320 	orr.w	r3, r3, #32
 800a97c:	81a3      	strh	r3, [r4, #12]
 800a97e:	f04f 30ff 	mov.w	r0, #4294967295
 800a982:	e7f3      	b.n	800a96c <__ssrefill_r+0x22>

0800a984 <__ssvfiscanf_r>:
 800a984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a988:	460c      	mov	r4, r1
 800a98a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a98e:	2100      	movs	r1, #0
 800a990:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a994:	49a6      	ldr	r1, [pc, #664]	; (800ac30 <__ssvfiscanf_r+0x2ac>)
 800a996:	91a0      	str	r1, [sp, #640]	; 0x280
 800a998:	f10d 0804 	add.w	r8, sp, #4
 800a99c:	49a5      	ldr	r1, [pc, #660]	; (800ac34 <__ssvfiscanf_r+0x2b0>)
 800a99e:	4fa6      	ldr	r7, [pc, #664]	; (800ac38 <__ssvfiscanf_r+0x2b4>)
 800a9a0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ac3c <__ssvfiscanf_r+0x2b8>
 800a9a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a9a8:	4606      	mov	r6, r0
 800a9aa:	91a1      	str	r1, [sp, #644]	; 0x284
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	7813      	ldrb	r3, [r2, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 815a 	beq.w	800ac6a <__ssvfiscanf_r+0x2e6>
 800a9b6:	5dd9      	ldrb	r1, [r3, r7]
 800a9b8:	f011 0108 	ands.w	r1, r1, #8
 800a9bc:	f102 0501 	add.w	r5, r2, #1
 800a9c0:	d019      	beq.n	800a9f6 <__ssvfiscanf_r+0x72>
 800a9c2:	6863      	ldr	r3, [r4, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	dd0f      	ble.n	800a9e8 <__ssvfiscanf_r+0x64>
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	781a      	ldrb	r2, [r3, #0]
 800a9cc:	5cba      	ldrb	r2, [r7, r2]
 800a9ce:	0712      	lsls	r2, r2, #28
 800a9d0:	d401      	bmi.n	800a9d6 <__ssvfiscanf_r+0x52>
 800a9d2:	462a      	mov	r2, r5
 800a9d4:	e7eb      	b.n	800a9ae <__ssvfiscanf_r+0x2a>
 800a9d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a9d8:	3201      	adds	r2, #1
 800a9da:	9245      	str	r2, [sp, #276]	; 0x114
 800a9dc:	6862      	ldr	r2, [r4, #4]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	3a01      	subs	r2, #1
 800a9e2:	6062      	str	r2, [r4, #4]
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	e7ec      	b.n	800a9c2 <__ssvfiscanf_r+0x3e>
 800a9e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a9ea:	4621      	mov	r1, r4
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	4798      	blx	r3
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d0e9      	beq.n	800a9c8 <__ssvfiscanf_r+0x44>
 800a9f4:	e7ed      	b.n	800a9d2 <__ssvfiscanf_r+0x4e>
 800a9f6:	2b25      	cmp	r3, #37	; 0x25
 800a9f8:	d012      	beq.n	800aa20 <__ssvfiscanf_r+0x9c>
 800a9fa:	469a      	mov	sl, r3
 800a9fc:	6863      	ldr	r3, [r4, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f340 8091 	ble.w	800ab26 <__ssvfiscanf_r+0x1a2>
 800aa04:	6822      	ldr	r2, [r4, #0]
 800aa06:	7813      	ldrb	r3, [r2, #0]
 800aa08:	4553      	cmp	r3, sl
 800aa0a:	f040 812e 	bne.w	800ac6a <__ssvfiscanf_r+0x2e6>
 800aa0e:	6863      	ldr	r3, [r4, #4]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	6063      	str	r3, [r4, #4]
 800aa14:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800aa16:	3201      	adds	r2, #1
 800aa18:	3301      	adds	r3, #1
 800aa1a:	6022      	str	r2, [r4, #0]
 800aa1c:	9345      	str	r3, [sp, #276]	; 0x114
 800aa1e:	e7d8      	b.n	800a9d2 <__ssvfiscanf_r+0x4e>
 800aa20:	9141      	str	r1, [sp, #260]	; 0x104
 800aa22:	9143      	str	r1, [sp, #268]	; 0x10c
 800aa24:	7853      	ldrb	r3, [r2, #1]
 800aa26:	2b2a      	cmp	r3, #42	; 0x2a
 800aa28:	bf02      	ittt	eq
 800aa2a:	2310      	moveq	r3, #16
 800aa2c:	1c95      	addeq	r5, r2, #2
 800aa2e:	9341      	streq	r3, [sp, #260]	; 0x104
 800aa30:	220a      	movs	r2, #10
 800aa32:	46aa      	mov	sl, r5
 800aa34:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800aa38:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800aa3c:	2b09      	cmp	r3, #9
 800aa3e:	d91d      	bls.n	800aa7c <__ssvfiscanf_r+0xf8>
 800aa40:	487e      	ldr	r0, [pc, #504]	; (800ac3c <__ssvfiscanf_r+0x2b8>)
 800aa42:	2203      	movs	r2, #3
 800aa44:	f7f5 fbe4 	bl	8000210 <memchr>
 800aa48:	b140      	cbz	r0, 800aa5c <__ssvfiscanf_r+0xd8>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	eba0 0009 	sub.w	r0, r0, r9
 800aa50:	fa03 f000 	lsl.w	r0, r3, r0
 800aa54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa56:	4318      	orrs	r0, r3
 800aa58:	9041      	str	r0, [sp, #260]	; 0x104
 800aa5a:	4655      	mov	r5, sl
 800aa5c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa60:	2b78      	cmp	r3, #120	; 0x78
 800aa62:	d806      	bhi.n	800aa72 <__ssvfiscanf_r+0xee>
 800aa64:	2b57      	cmp	r3, #87	; 0x57
 800aa66:	d810      	bhi.n	800aa8a <__ssvfiscanf_r+0x106>
 800aa68:	2b25      	cmp	r3, #37	; 0x25
 800aa6a:	d0c6      	beq.n	800a9fa <__ssvfiscanf_r+0x76>
 800aa6c:	d856      	bhi.n	800ab1c <__ssvfiscanf_r+0x198>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d064      	beq.n	800ab3c <__ssvfiscanf_r+0x1b8>
 800aa72:	2303      	movs	r3, #3
 800aa74:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa76:	230a      	movs	r3, #10
 800aa78:	9342      	str	r3, [sp, #264]	; 0x108
 800aa7a:	e071      	b.n	800ab60 <__ssvfiscanf_r+0x1dc>
 800aa7c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa7e:	fb02 1103 	mla	r1, r2, r3, r1
 800aa82:	3930      	subs	r1, #48	; 0x30
 800aa84:	9143      	str	r1, [sp, #268]	; 0x10c
 800aa86:	4655      	mov	r5, sl
 800aa88:	e7d3      	b.n	800aa32 <__ssvfiscanf_r+0xae>
 800aa8a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800aa8e:	2a20      	cmp	r2, #32
 800aa90:	d8ef      	bhi.n	800aa72 <__ssvfiscanf_r+0xee>
 800aa92:	a101      	add	r1, pc, #4	; (adr r1, 800aa98 <__ssvfiscanf_r+0x114>)
 800aa94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa98:	0800ab4b 	.word	0x0800ab4b
 800aa9c:	0800aa73 	.word	0x0800aa73
 800aaa0:	0800aa73 	.word	0x0800aa73
 800aaa4:	0800aba9 	.word	0x0800aba9
 800aaa8:	0800aa73 	.word	0x0800aa73
 800aaac:	0800aa73 	.word	0x0800aa73
 800aab0:	0800aa73 	.word	0x0800aa73
 800aab4:	0800aa73 	.word	0x0800aa73
 800aab8:	0800aa73 	.word	0x0800aa73
 800aabc:	0800aa73 	.word	0x0800aa73
 800aac0:	0800aa73 	.word	0x0800aa73
 800aac4:	0800abbf 	.word	0x0800abbf
 800aac8:	0800ab95 	.word	0x0800ab95
 800aacc:	0800ab23 	.word	0x0800ab23
 800aad0:	0800ab23 	.word	0x0800ab23
 800aad4:	0800ab23 	.word	0x0800ab23
 800aad8:	0800aa73 	.word	0x0800aa73
 800aadc:	0800ab99 	.word	0x0800ab99
 800aae0:	0800aa73 	.word	0x0800aa73
 800aae4:	0800aa73 	.word	0x0800aa73
 800aae8:	0800aa73 	.word	0x0800aa73
 800aaec:	0800aa73 	.word	0x0800aa73
 800aaf0:	0800abcf 	.word	0x0800abcf
 800aaf4:	0800aba1 	.word	0x0800aba1
 800aaf8:	0800ab43 	.word	0x0800ab43
 800aafc:	0800aa73 	.word	0x0800aa73
 800ab00:	0800aa73 	.word	0x0800aa73
 800ab04:	0800abcb 	.word	0x0800abcb
 800ab08:	0800aa73 	.word	0x0800aa73
 800ab0c:	0800ab95 	.word	0x0800ab95
 800ab10:	0800aa73 	.word	0x0800aa73
 800ab14:	0800aa73 	.word	0x0800aa73
 800ab18:	0800ab4b 	.word	0x0800ab4b
 800ab1c:	3b45      	subs	r3, #69	; 0x45
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d8a7      	bhi.n	800aa72 <__ssvfiscanf_r+0xee>
 800ab22:	2305      	movs	r3, #5
 800ab24:	e01b      	b.n	800ab5e <__ssvfiscanf_r+0x1da>
 800ab26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab28:	4621      	mov	r1, r4
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	4798      	blx	r3
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	f43f af68 	beq.w	800aa04 <__ssvfiscanf_r+0x80>
 800ab34:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f040 808d 	bne.w	800ac56 <__ssvfiscanf_r+0x2d2>
 800ab3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab40:	e08f      	b.n	800ac62 <__ssvfiscanf_r+0x2de>
 800ab42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ab44:	f042 0220 	orr.w	r2, r2, #32
 800ab48:	9241      	str	r2, [sp, #260]	; 0x104
 800ab4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ab4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab50:	9241      	str	r2, [sp, #260]	; 0x104
 800ab52:	2210      	movs	r2, #16
 800ab54:	2b6f      	cmp	r3, #111	; 0x6f
 800ab56:	9242      	str	r2, [sp, #264]	; 0x108
 800ab58:	bf34      	ite	cc
 800ab5a:	2303      	movcc	r3, #3
 800ab5c:	2304      	movcs	r3, #4
 800ab5e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ab60:	6863      	ldr	r3, [r4, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	dd42      	ble.n	800abec <__ssvfiscanf_r+0x268>
 800ab66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ab68:	0659      	lsls	r1, r3, #25
 800ab6a:	d404      	bmi.n	800ab76 <__ssvfiscanf_r+0x1f2>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	781a      	ldrb	r2, [r3, #0]
 800ab70:	5cba      	ldrb	r2, [r7, r2]
 800ab72:	0712      	lsls	r2, r2, #28
 800ab74:	d441      	bmi.n	800abfa <__ssvfiscanf_r+0x276>
 800ab76:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	dc50      	bgt.n	800ac1e <__ssvfiscanf_r+0x29a>
 800ab7c:	466b      	mov	r3, sp
 800ab7e:	4622      	mov	r2, r4
 800ab80:	a941      	add	r1, sp, #260	; 0x104
 800ab82:	4630      	mov	r0, r6
 800ab84:	f000 f876 	bl	800ac74 <_scanf_chars>
 800ab88:	2801      	cmp	r0, #1
 800ab8a:	d06e      	beq.n	800ac6a <__ssvfiscanf_r+0x2e6>
 800ab8c:	2802      	cmp	r0, #2
 800ab8e:	f47f af20 	bne.w	800a9d2 <__ssvfiscanf_r+0x4e>
 800ab92:	e7cf      	b.n	800ab34 <__ssvfiscanf_r+0x1b0>
 800ab94:	220a      	movs	r2, #10
 800ab96:	e7dd      	b.n	800ab54 <__ssvfiscanf_r+0x1d0>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	9342      	str	r3, [sp, #264]	; 0x108
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e7de      	b.n	800ab5e <__ssvfiscanf_r+0x1da>
 800aba0:	2308      	movs	r3, #8
 800aba2:	9342      	str	r3, [sp, #264]	; 0x108
 800aba4:	2304      	movs	r3, #4
 800aba6:	e7da      	b.n	800ab5e <__ssvfiscanf_r+0x1da>
 800aba8:	4629      	mov	r1, r5
 800abaa:	4640      	mov	r0, r8
 800abac:	f000 f9d6 	bl	800af5c <__sccl>
 800abb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800abb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abb6:	9341      	str	r3, [sp, #260]	; 0x104
 800abb8:	4605      	mov	r5, r0
 800abba:	2301      	movs	r3, #1
 800abbc:	e7cf      	b.n	800ab5e <__ssvfiscanf_r+0x1da>
 800abbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800abc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abc4:	9341      	str	r3, [sp, #260]	; 0x104
 800abc6:	2300      	movs	r3, #0
 800abc8:	e7c9      	b.n	800ab5e <__ssvfiscanf_r+0x1da>
 800abca:	2302      	movs	r3, #2
 800abcc:	e7c7      	b.n	800ab5e <__ssvfiscanf_r+0x1da>
 800abce:	9841      	ldr	r0, [sp, #260]	; 0x104
 800abd0:	06c3      	lsls	r3, r0, #27
 800abd2:	f53f aefe 	bmi.w	800a9d2 <__ssvfiscanf_r+0x4e>
 800abd6:	9b00      	ldr	r3, [sp, #0]
 800abd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800abda:	1d19      	adds	r1, r3, #4
 800abdc:	9100      	str	r1, [sp, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f010 0f01 	tst.w	r0, #1
 800abe4:	bf14      	ite	ne
 800abe6:	801a      	strhne	r2, [r3, #0]
 800abe8:	601a      	streq	r2, [r3, #0]
 800abea:	e6f2      	b.n	800a9d2 <__ssvfiscanf_r+0x4e>
 800abec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800abee:	4621      	mov	r1, r4
 800abf0:	4630      	mov	r0, r6
 800abf2:	4798      	blx	r3
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d0b6      	beq.n	800ab66 <__ssvfiscanf_r+0x1e2>
 800abf8:	e79c      	b.n	800ab34 <__ssvfiscanf_r+0x1b0>
 800abfa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800abfc:	3201      	adds	r2, #1
 800abfe:	9245      	str	r2, [sp, #276]	; 0x114
 800ac00:	6862      	ldr	r2, [r4, #4]
 800ac02:	3a01      	subs	r2, #1
 800ac04:	2a00      	cmp	r2, #0
 800ac06:	6062      	str	r2, [r4, #4]
 800ac08:	dd02      	ble.n	800ac10 <__ssvfiscanf_r+0x28c>
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	e7ad      	b.n	800ab6c <__ssvfiscanf_r+0x1e8>
 800ac10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac12:	4621      	mov	r1, r4
 800ac14:	4630      	mov	r0, r6
 800ac16:	4798      	blx	r3
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d0a7      	beq.n	800ab6c <__ssvfiscanf_r+0x1e8>
 800ac1c:	e78a      	b.n	800ab34 <__ssvfiscanf_r+0x1b0>
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	dc0e      	bgt.n	800ac40 <__ssvfiscanf_r+0x2bc>
 800ac22:	466b      	mov	r3, sp
 800ac24:	4622      	mov	r2, r4
 800ac26:	a941      	add	r1, sp, #260	; 0x104
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f000 f87d 	bl	800ad28 <_scanf_i>
 800ac2e:	e7ab      	b.n	800ab88 <__ssvfiscanf_r+0x204>
 800ac30:	0800a8d1 	.word	0x0800a8d1
 800ac34:	0800a94b 	.word	0x0800a94b
 800ac38:	0800c873 	.word	0x0800c873
 800ac3c:	0800cb62 	.word	0x0800cb62
 800ac40:	4b0b      	ldr	r3, [pc, #44]	; (800ac70 <__ssvfiscanf_r+0x2ec>)
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f43f aec5 	beq.w	800a9d2 <__ssvfiscanf_r+0x4e>
 800ac48:	466b      	mov	r3, sp
 800ac4a:	4622      	mov	r2, r4
 800ac4c:	a941      	add	r1, sp, #260	; 0x104
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f3af 8000 	nop.w
 800ac54:	e798      	b.n	800ab88 <__ssvfiscanf_r+0x204>
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ac5c:	bf18      	it	ne
 800ac5e:	f04f 30ff 	movne.w	r0, #4294967295
 800ac62:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ac6c:	e7f9      	b.n	800ac62 <__ssvfiscanf_r+0x2de>
 800ac6e:	bf00      	nop
 800ac70:	00000000 	.word	0x00000000

0800ac74 <_scanf_chars>:
 800ac74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac78:	4615      	mov	r5, r2
 800ac7a:	688a      	ldr	r2, [r1, #8]
 800ac7c:	4680      	mov	r8, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	b932      	cbnz	r2, 800ac90 <_scanf_chars+0x1c>
 800ac82:	698a      	ldr	r2, [r1, #24]
 800ac84:	2a00      	cmp	r2, #0
 800ac86:	bf0c      	ite	eq
 800ac88:	2201      	moveq	r2, #1
 800ac8a:	f04f 32ff 	movne.w	r2, #4294967295
 800ac8e:	608a      	str	r2, [r1, #8]
 800ac90:	6822      	ldr	r2, [r4, #0]
 800ac92:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ad24 <_scanf_chars+0xb0>
 800ac96:	06d1      	lsls	r1, r2, #27
 800ac98:	bf5f      	itttt	pl
 800ac9a:	681a      	ldrpl	r2, [r3, #0]
 800ac9c:	1d11      	addpl	r1, r2, #4
 800ac9e:	6019      	strpl	r1, [r3, #0]
 800aca0:	6816      	ldrpl	r6, [r2, #0]
 800aca2:	2700      	movs	r7, #0
 800aca4:	69a0      	ldr	r0, [r4, #24]
 800aca6:	b188      	cbz	r0, 800accc <_scanf_chars+0x58>
 800aca8:	2801      	cmp	r0, #1
 800acaa:	d107      	bne.n	800acbc <_scanf_chars+0x48>
 800acac:	682a      	ldr	r2, [r5, #0]
 800acae:	7811      	ldrb	r1, [r2, #0]
 800acb0:	6962      	ldr	r2, [r4, #20]
 800acb2:	5c52      	ldrb	r2, [r2, r1]
 800acb4:	b952      	cbnz	r2, 800accc <_scanf_chars+0x58>
 800acb6:	2f00      	cmp	r7, #0
 800acb8:	d031      	beq.n	800ad1e <_scanf_chars+0xaa>
 800acba:	e022      	b.n	800ad02 <_scanf_chars+0x8e>
 800acbc:	2802      	cmp	r0, #2
 800acbe:	d120      	bne.n	800ad02 <_scanf_chars+0x8e>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800acc8:	071b      	lsls	r3, r3, #28
 800acca:	d41a      	bmi.n	800ad02 <_scanf_chars+0x8e>
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	06da      	lsls	r2, r3, #27
 800acd0:	bf5e      	ittt	pl
 800acd2:	682b      	ldrpl	r3, [r5, #0]
 800acd4:	781b      	ldrbpl	r3, [r3, #0]
 800acd6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800acda:	682a      	ldr	r2, [r5, #0]
 800acdc:	686b      	ldr	r3, [r5, #4]
 800acde:	3201      	adds	r2, #1
 800ace0:	602a      	str	r2, [r5, #0]
 800ace2:	68a2      	ldr	r2, [r4, #8]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	3a01      	subs	r2, #1
 800ace8:	606b      	str	r3, [r5, #4]
 800acea:	3701      	adds	r7, #1
 800acec:	60a2      	str	r2, [r4, #8]
 800acee:	b142      	cbz	r2, 800ad02 <_scanf_chars+0x8e>
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	dcd7      	bgt.n	800aca4 <_scanf_chars+0x30>
 800acf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800acf8:	4629      	mov	r1, r5
 800acfa:	4640      	mov	r0, r8
 800acfc:	4798      	blx	r3
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d0d0      	beq.n	800aca4 <_scanf_chars+0x30>
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	f013 0310 	ands.w	r3, r3, #16
 800ad08:	d105      	bne.n	800ad16 <_scanf_chars+0xa2>
 800ad0a:	68e2      	ldr	r2, [r4, #12]
 800ad0c:	3201      	adds	r2, #1
 800ad0e:	60e2      	str	r2, [r4, #12]
 800ad10:	69a2      	ldr	r2, [r4, #24]
 800ad12:	b102      	cbz	r2, 800ad16 <_scanf_chars+0xa2>
 800ad14:	7033      	strb	r3, [r6, #0]
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	443b      	add	r3, r7
 800ad1a:	6123      	str	r3, [r4, #16]
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad22:	bf00      	nop
 800ad24:	0800c873 	.word	0x0800c873

0800ad28 <_scanf_i>:
 800ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	4698      	mov	r8, r3
 800ad2e:	4b76      	ldr	r3, [pc, #472]	; (800af08 <_scanf_i+0x1e0>)
 800ad30:	460c      	mov	r4, r1
 800ad32:	4682      	mov	sl, r0
 800ad34:	4616      	mov	r6, r2
 800ad36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	ab03      	add	r3, sp, #12
 800ad3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ad42:	4b72      	ldr	r3, [pc, #456]	; (800af0c <_scanf_i+0x1e4>)
 800ad44:	69a1      	ldr	r1, [r4, #24]
 800ad46:	4a72      	ldr	r2, [pc, #456]	; (800af10 <_scanf_i+0x1e8>)
 800ad48:	2903      	cmp	r1, #3
 800ad4a:	bf18      	it	ne
 800ad4c:	461a      	movne	r2, r3
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	9201      	str	r2, [sp, #4]
 800ad52:	1e5a      	subs	r2, r3, #1
 800ad54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ad58:	bf88      	it	hi
 800ad5a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ad5e:	4627      	mov	r7, r4
 800ad60:	bf82      	ittt	hi
 800ad62:	eb03 0905 	addhi.w	r9, r3, r5
 800ad66:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ad6a:	60a3      	strhi	r3, [r4, #8]
 800ad6c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ad70:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ad74:	bf98      	it	ls
 800ad76:	f04f 0900 	movls.w	r9, #0
 800ad7a:	6023      	str	r3, [r4, #0]
 800ad7c:	463d      	mov	r5, r7
 800ad7e:	f04f 0b00 	mov.w	fp, #0
 800ad82:	6831      	ldr	r1, [r6, #0]
 800ad84:	ab03      	add	r3, sp, #12
 800ad86:	7809      	ldrb	r1, [r1, #0]
 800ad88:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	f7f5 fa3f 	bl	8000210 <memchr>
 800ad92:	b328      	cbz	r0, 800ade0 <_scanf_i+0xb8>
 800ad94:	f1bb 0f01 	cmp.w	fp, #1
 800ad98:	d159      	bne.n	800ae4e <_scanf_i+0x126>
 800ad9a:	6862      	ldr	r2, [r4, #4]
 800ad9c:	b92a      	cbnz	r2, 800adaa <_scanf_i+0x82>
 800ad9e:	6822      	ldr	r2, [r4, #0]
 800ada0:	2308      	movs	r3, #8
 800ada2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ada6:	6063      	str	r3, [r4, #4]
 800ada8:	6022      	str	r2, [r4, #0]
 800adaa:	6822      	ldr	r2, [r4, #0]
 800adac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800adb0:	6022      	str	r2, [r4, #0]
 800adb2:	68a2      	ldr	r2, [r4, #8]
 800adb4:	1e51      	subs	r1, r2, #1
 800adb6:	60a1      	str	r1, [r4, #8]
 800adb8:	b192      	cbz	r2, 800ade0 <_scanf_i+0xb8>
 800adba:	6832      	ldr	r2, [r6, #0]
 800adbc:	1c51      	adds	r1, r2, #1
 800adbe:	6031      	str	r1, [r6, #0]
 800adc0:	7812      	ldrb	r2, [r2, #0]
 800adc2:	f805 2b01 	strb.w	r2, [r5], #1
 800adc6:	6872      	ldr	r2, [r6, #4]
 800adc8:	3a01      	subs	r2, #1
 800adca:	2a00      	cmp	r2, #0
 800adcc:	6072      	str	r2, [r6, #4]
 800adce:	dc07      	bgt.n	800ade0 <_scanf_i+0xb8>
 800add0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800add4:	4631      	mov	r1, r6
 800add6:	4650      	mov	r0, sl
 800add8:	4790      	blx	r2
 800adda:	2800      	cmp	r0, #0
 800addc:	f040 8085 	bne.w	800aeea <_scanf_i+0x1c2>
 800ade0:	f10b 0b01 	add.w	fp, fp, #1
 800ade4:	f1bb 0f03 	cmp.w	fp, #3
 800ade8:	d1cb      	bne.n	800ad82 <_scanf_i+0x5a>
 800adea:	6863      	ldr	r3, [r4, #4]
 800adec:	b90b      	cbnz	r3, 800adf2 <_scanf_i+0xca>
 800adee:	230a      	movs	r3, #10
 800adf0:	6063      	str	r3, [r4, #4]
 800adf2:	6863      	ldr	r3, [r4, #4]
 800adf4:	4947      	ldr	r1, [pc, #284]	; (800af14 <_scanf_i+0x1ec>)
 800adf6:	6960      	ldr	r0, [r4, #20]
 800adf8:	1ac9      	subs	r1, r1, r3
 800adfa:	f000 f8af 	bl	800af5c <__sccl>
 800adfe:	f04f 0b00 	mov.w	fp, #0
 800ae02:	68a3      	ldr	r3, [r4, #8]
 800ae04:	6822      	ldr	r2, [r4, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d03d      	beq.n	800ae86 <_scanf_i+0x15e>
 800ae0a:	6831      	ldr	r1, [r6, #0]
 800ae0c:	6960      	ldr	r0, [r4, #20]
 800ae0e:	f891 c000 	ldrb.w	ip, [r1]
 800ae12:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d035      	beq.n	800ae86 <_scanf_i+0x15e>
 800ae1a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ae1e:	d124      	bne.n	800ae6a <_scanf_i+0x142>
 800ae20:	0510      	lsls	r0, r2, #20
 800ae22:	d522      	bpl.n	800ae6a <_scanf_i+0x142>
 800ae24:	f10b 0b01 	add.w	fp, fp, #1
 800ae28:	f1b9 0f00 	cmp.w	r9, #0
 800ae2c:	d003      	beq.n	800ae36 <_scanf_i+0x10e>
 800ae2e:	3301      	adds	r3, #1
 800ae30:	f109 39ff 	add.w	r9, r9, #4294967295
 800ae34:	60a3      	str	r3, [r4, #8]
 800ae36:	6873      	ldr	r3, [r6, #4]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	6073      	str	r3, [r6, #4]
 800ae3e:	dd1b      	ble.n	800ae78 <_scanf_i+0x150>
 800ae40:	6833      	ldr	r3, [r6, #0]
 800ae42:	3301      	adds	r3, #1
 800ae44:	6033      	str	r3, [r6, #0]
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	60a3      	str	r3, [r4, #8]
 800ae4c:	e7d9      	b.n	800ae02 <_scanf_i+0xda>
 800ae4e:	f1bb 0f02 	cmp.w	fp, #2
 800ae52:	d1ae      	bne.n	800adb2 <_scanf_i+0x8a>
 800ae54:	6822      	ldr	r2, [r4, #0]
 800ae56:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ae5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ae5e:	d1bf      	bne.n	800ade0 <_scanf_i+0xb8>
 800ae60:	2310      	movs	r3, #16
 800ae62:	6063      	str	r3, [r4, #4]
 800ae64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae68:	e7a2      	b.n	800adb0 <_scanf_i+0x88>
 800ae6a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ae6e:	6022      	str	r2, [r4, #0]
 800ae70:	780b      	ldrb	r3, [r1, #0]
 800ae72:	f805 3b01 	strb.w	r3, [r5], #1
 800ae76:	e7de      	b.n	800ae36 <_scanf_i+0x10e>
 800ae78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4650      	mov	r0, sl
 800ae80:	4798      	blx	r3
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d0df      	beq.n	800ae46 <_scanf_i+0x11e>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	05db      	lsls	r3, r3, #23
 800ae8a:	d50d      	bpl.n	800aea8 <_scanf_i+0x180>
 800ae8c:	42bd      	cmp	r5, r7
 800ae8e:	d909      	bls.n	800aea4 <_scanf_i+0x17c>
 800ae90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ae94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae98:	4632      	mov	r2, r6
 800ae9a:	4650      	mov	r0, sl
 800ae9c:	4798      	blx	r3
 800ae9e:	f105 39ff 	add.w	r9, r5, #4294967295
 800aea2:	464d      	mov	r5, r9
 800aea4:	42bd      	cmp	r5, r7
 800aea6:	d02d      	beq.n	800af04 <_scanf_i+0x1dc>
 800aea8:	6822      	ldr	r2, [r4, #0]
 800aeaa:	f012 0210 	ands.w	r2, r2, #16
 800aeae:	d113      	bne.n	800aed8 <_scanf_i+0x1b0>
 800aeb0:	702a      	strb	r2, [r5, #0]
 800aeb2:	6863      	ldr	r3, [r4, #4]
 800aeb4:	9e01      	ldr	r6, [sp, #4]
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	4650      	mov	r0, sl
 800aeba:	47b0      	blx	r6
 800aebc:	6821      	ldr	r1, [r4, #0]
 800aebe:	f8d8 3000 	ldr.w	r3, [r8]
 800aec2:	f011 0f20 	tst.w	r1, #32
 800aec6:	d013      	beq.n	800aef0 <_scanf_i+0x1c8>
 800aec8:	1d1a      	adds	r2, r3, #4
 800aeca:	f8c8 2000 	str.w	r2, [r8]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6018      	str	r0, [r3, #0]
 800aed2:	68e3      	ldr	r3, [r4, #12]
 800aed4:	3301      	adds	r3, #1
 800aed6:	60e3      	str	r3, [r4, #12]
 800aed8:	1bed      	subs	r5, r5, r7
 800aeda:	44ab      	add	fp, r5
 800aedc:	6925      	ldr	r5, [r4, #16]
 800aede:	445d      	add	r5, fp
 800aee0:	6125      	str	r5, [r4, #16]
 800aee2:	2000      	movs	r0, #0
 800aee4:	b007      	add	sp, #28
 800aee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeea:	f04f 0b00 	mov.w	fp, #0
 800aeee:	e7ca      	b.n	800ae86 <_scanf_i+0x15e>
 800aef0:	1d1a      	adds	r2, r3, #4
 800aef2:	f8c8 2000 	str.w	r2, [r8]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f011 0f01 	tst.w	r1, #1
 800aefc:	bf14      	ite	ne
 800aefe:	8018      	strhne	r0, [r3, #0]
 800af00:	6018      	streq	r0, [r3, #0]
 800af02:	e7e6      	b.n	800aed2 <_scanf_i+0x1aa>
 800af04:	2001      	movs	r0, #1
 800af06:	e7ed      	b.n	800aee4 <_scanf_i+0x1bc>
 800af08:	0800c540 	.word	0x0800c540
 800af0c:	0800b0b1 	.word	0x0800b0b1
 800af10:	08008f7d 	.word	0x08008f7d
 800af14:	0800cb86 	.word	0x0800cb86

0800af18 <_read_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d07      	ldr	r5, [pc, #28]	; (800af38 <_read_r+0x20>)
 800af1c:	4604      	mov	r4, r0
 800af1e:	4608      	mov	r0, r1
 800af20:	4611      	mov	r1, r2
 800af22:	2200      	movs	r2, #0
 800af24:	602a      	str	r2, [r5, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	f7f7 fbe0 	bl	80026ec <_read>
 800af2c:	1c43      	adds	r3, r0, #1
 800af2e:	d102      	bne.n	800af36 <_read_r+0x1e>
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	b103      	cbz	r3, 800af36 <_read_r+0x1e>
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	20000534 	.word	0x20000534

0800af3c <_sbrk_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d06      	ldr	r5, [pc, #24]	; (800af58 <_sbrk_r+0x1c>)
 800af40:	2300      	movs	r3, #0
 800af42:	4604      	mov	r4, r0
 800af44:	4608      	mov	r0, r1
 800af46:	602b      	str	r3, [r5, #0]
 800af48:	f7f7 fc3e 	bl	80027c8 <_sbrk>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_sbrk_r+0x1a>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_sbrk_r+0x1a>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	20000534 	.word	0x20000534

0800af5c <__sccl>:
 800af5c:	b570      	push	{r4, r5, r6, lr}
 800af5e:	780b      	ldrb	r3, [r1, #0]
 800af60:	4604      	mov	r4, r0
 800af62:	2b5e      	cmp	r3, #94	; 0x5e
 800af64:	bf0b      	itete	eq
 800af66:	784b      	ldrbeq	r3, [r1, #1]
 800af68:	1c48      	addne	r0, r1, #1
 800af6a:	1c88      	addeq	r0, r1, #2
 800af6c:	2200      	movne	r2, #0
 800af6e:	bf08      	it	eq
 800af70:	2201      	moveq	r2, #1
 800af72:	1e61      	subs	r1, r4, #1
 800af74:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800af78:	f801 2f01 	strb.w	r2, [r1, #1]!
 800af7c:	42a9      	cmp	r1, r5
 800af7e:	d1fb      	bne.n	800af78 <__sccl+0x1c>
 800af80:	b90b      	cbnz	r3, 800af86 <__sccl+0x2a>
 800af82:	3801      	subs	r0, #1
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	f082 0201 	eor.w	r2, r2, #1
 800af8a:	54e2      	strb	r2, [r4, r3]
 800af8c:	4605      	mov	r5, r0
 800af8e:	4628      	mov	r0, r5
 800af90:	f810 1b01 	ldrb.w	r1, [r0], #1
 800af94:	292d      	cmp	r1, #45	; 0x2d
 800af96:	d006      	beq.n	800afa6 <__sccl+0x4a>
 800af98:	295d      	cmp	r1, #93	; 0x5d
 800af9a:	d0f3      	beq.n	800af84 <__sccl+0x28>
 800af9c:	b909      	cbnz	r1, 800afa2 <__sccl+0x46>
 800af9e:	4628      	mov	r0, r5
 800afa0:	e7f0      	b.n	800af84 <__sccl+0x28>
 800afa2:	460b      	mov	r3, r1
 800afa4:	e7f1      	b.n	800af8a <__sccl+0x2e>
 800afa6:	786e      	ldrb	r6, [r5, #1]
 800afa8:	2e5d      	cmp	r6, #93	; 0x5d
 800afaa:	d0fa      	beq.n	800afa2 <__sccl+0x46>
 800afac:	42b3      	cmp	r3, r6
 800afae:	dcf8      	bgt.n	800afa2 <__sccl+0x46>
 800afb0:	3502      	adds	r5, #2
 800afb2:	4619      	mov	r1, r3
 800afb4:	3101      	adds	r1, #1
 800afb6:	428e      	cmp	r6, r1
 800afb8:	5462      	strb	r2, [r4, r1]
 800afba:	dcfb      	bgt.n	800afb4 <__sccl+0x58>
 800afbc:	1af1      	subs	r1, r6, r3
 800afbe:	3901      	subs	r1, #1
 800afc0:	1c58      	adds	r0, r3, #1
 800afc2:	42b3      	cmp	r3, r6
 800afc4:	bfa8      	it	ge
 800afc6:	2100      	movge	r1, #0
 800afc8:	1843      	adds	r3, r0, r1
 800afca:	e7e0      	b.n	800af8e <__sccl+0x32>

0800afcc <_strtoul_l.constprop.0>:
 800afcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afd0:	4f36      	ldr	r7, [pc, #216]	; (800b0ac <_strtoul_l.constprop.0+0xe0>)
 800afd2:	4686      	mov	lr, r0
 800afd4:	460d      	mov	r5, r1
 800afd6:	4628      	mov	r0, r5
 800afd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afdc:	5de6      	ldrb	r6, [r4, r7]
 800afde:	f016 0608 	ands.w	r6, r6, #8
 800afe2:	d1f8      	bne.n	800afd6 <_strtoul_l.constprop.0+0xa>
 800afe4:	2c2d      	cmp	r4, #45	; 0x2d
 800afe6:	d12f      	bne.n	800b048 <_strtoul_l.constprop.0+0x7c>
 800afe8:	782c      	ldrb	r4, [r5, #0]
 800afea:	2601      	movs	r6, #1
 800afec:	1c85      	adds	r5, r0, #2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d057      	beq.n	800b0a2 <_strtoul_l.constprop.0+0xd6>
 800aff2:	2b10      	cmp	r3, #16
 800aff4:	d109      	bne.n	800b00a <_strtoul_l.constprop.0+0x3e>
 800aff6:	2c30      	cmp	r4, #48	; 0x30
 800aff8:	d107      	bne.n	800b00a <_strtoul_l.constprop.0+0x3e>
 800affa:	7828      	ldrb	r0, [r5, #0]
 800affc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b000:	2858      	cmp	r0, #88	; 0x58
 800b002:	d149      	bne.n	800b098 <_strtoul_l.constprop.0+0xcc>
 800b004:	786c      	ldrb	r4, [r5, #1]
 800b006:	2310      	movs	r3, #16
 800b008:	3502      	adds	r5, #2
 800b00a:	f04f 38ff 	mov.w	r8, #4294967295
 800b00e:	2700      	movs	r7, #0
 800b010:	fbb8 f8f3 	udiv	r8, r8, r3
 800b014:	fb03 f908 	mul.w	r9, r3, r8
 800b018:	ea6f 0909 	mvn.w	r9, r9
 800b01c:	4638      	mov	r0, r7
 800b01e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b022:	f1bc 0f09 	cmp.w	ip, #9
 800b026:	d814      	bhi.n	800b052 <_strtoul_l.constprop.0+0x86>
 800b028:	4664      	mov	r4, ip
 800b02a:	42a3      	cmp	r3, r4
 800b02c:	dd22      	ble.n	800b074 <_strtoul_l.constprop.0+0xa8>
 800b02e:	2f00      	cmp	r7, #0
 800b030:	db1d      	blt.n	800b06e <_strtoul_l.constprop.0+0xa2>
 800b032:	4580      	cmp	r8, r0
 800b034:	d31b      	bcc.n	800b06e <_strtoul_l.constprop.0+0xa2>
 800b036:	d101      	bne.n	800b03c <_strtoul_l.constprop.0+0x70>
 800b038:	45a1      	cmp	r9, r4
 800b03a:	db18      	blt.n	800b06e <_strtoul_l.constprop.0+0xa2>
 800b03c:	fb00 4003 	mla	r0, r0, r3, r4
 800b040:	2701      	movs	r7, #1
 800b042:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b046:	e7ea      	b.n	800b01e <_strtoul_l.constprop.0+0x52>
 800b048:	2c2b      	cmp	r4, #43	; 0x2b
 800b04a:	bf04      	itt	eq
 800b04c:	782c      	ldrbeq	r4, [r5, #0]
 800b04e:	1c85      	addeq	r5, r0, #2
 800b050:	e7cd      	b.n	800afee <_strtoul_l.constprop.0+0x22>
 800b052:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b056:	f1bc 0f19 	cmp.w	ip, #25
 800b05a:	d801      	bhi.n	800b060 <_strtoul_l.constprop.0+0x94>
 800b05c:	3c37      	subs	r4, #55	; 0x37
 800b05e:	e7e4      	b.n	800b02a <_strtoul_l.constprop.0+0x5e>
 800b060:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b064:	f1bc 0f19 	cmp.w	ip, #25
 800b068:	d804      	bhi.n	800b074 <_strtoul_l.constprop.0+0xa8>
 800b06a:	3c57      	subs	r4, #87	; 0x57
 800b06c:	e7dd      	b.n	800b02a <_strtoul_l.constprop.0+0x5e>
 800b06e:	f04f 37ff 	mov.w	r7, #4294967295
 800b072:	e7e6      	b.n	800b042 <_strtoul_l.constprop.0+0x76>
 800b074:	2f00      	cmp	r7, #0
 800b076:	da07      	bge.n	800b088 <_strtoul_l.constprop.0+0xbc>
 800b078:	2322      	movs	r3, #34	; 0x22
 800b07a:	f8ce 3000 	str.w	r3, [lr]
 800b07e:	f04f 30ff 	mov.w	r0, #4294967295
 800b082:	b932      	cbnz	r2, 800b092 <_strtoul_l.constprop.0+0xc6>
 800b084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b088:	b106      	cbz	r6, 800b08c <_strtoul_l.constprop.0+0xc0>
 800b08a:	4240      	negs	r0, r0
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	d0f9      	beq.n	800b084 <_strtoul_l.constprop.0+0xb8>
 800b090:	b107      	cbz	r7, 800b094 <_strtoul_l.constprop.0+0xc8>
 800b092:	1e69      	subs	r1, r5, #1
 800b094:	6011      	str	r1, [r2, #0]
 800b096:	e7f5      	b.n	800b084 <_strtoul_l.constprop.0+0xb8>
 800b098:	2430      	movs	r4, #48	; 0x30
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1b5      	bne.n	800b00a <_strtoul_l.constprop.0+0x3e>
 800b09e:	2308      	movs	r3, #8
 800b0a0:	e7b3      	b.n	800b00a <_strtoul_l.constprop.0+0x3e>
 800b0a2:	2c30      	cmp	r4, #48	; 0x30
 800b0a4:	d0a9      	beq.n	800affa <_strtoul_l.constprop.0+0x2e>
 800b0a6:	230a      	movs	r3, #10
 800b0a8:	e7af      	b.n	800b00a <_strtoul_l.constprop.0+0x3e>
 800b0aa:	bf00      	nop
 800b0ac:	0800c873 	.word	0x0800c873

0800b0b0 <_strtoul_r>:
 800b0b0:	f7ff bf8c 	b.w	800afcc <_strtoul_l.constprop.0>

0800b0b4 <__submore>:
 800b0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b8:	460c      	mov	r4, r1
 800b0ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b0bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c0:	4299      	cmp	r1, r3
 800b0c2:	d11d      	bne.n	800b100 <__submore+0x4c>
 800b0c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b0c8:	f7ff fa32 	bl	800a530 <_malloc_r>
 800b0cc:	b918      	cbnz	r0, 800b0d6 <__submore+0x22>
 800b0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0da:	63a3      	str	r3, [r4, #56]	; 0x38
 800b0dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b0e0:	6360      	str	r0, [r4, #52]	; 0x34
 800b0e2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b0e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b0ea:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b0ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b0f2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b0f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b0fa:	6020      	str	r0, [r4, #0]
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e7e8      	b.n	800b0d2 <__submore+0x1e>
 800b100:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b102:	0077      	lsls	r7, r6, #1
 800b104:	463a      	mov	r2, r7
 800b106:	f000 fa31 	bl	800b56c <_realloc_r>
 800b10a:	4605      	mov	r5, r0
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d0de      	beq.n	800b0ce <__submore+0x1a>
 800b110:	eb00 0806 	add.w	r8, r0, r6
 800b114:	4601      	mov	r1, r0
 800b116:	4632      	mov	r2, r6
 800b118:	4640      	mov	r0, r8
 800b11a:	f7fe fdf5 	bl	8009d08 <memcpy>
 800b11e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b122:	f8c4 8000 	str.w	r8, [r4]
 800b126:	e7e9      	b.n	800b0fc <__submore+0x48>

0800b128 <__assert_func>:
 800b128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b12a:	4614      	mov	r4, r2
 800b12c:	461a      	mov	r2, r3
 800b12e:	4b09      	ldr	r3, [pc, #36]	; (800b154 <__assert_func+0x2c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4605      	mov	r5, r0
 800b134:	68d8      	ldr	r0, [r3, #12]
 800b136:	b14c      	cbz	r4, 800b14c <__assert_func+0x24>
 800b138:	4b07      	ldr	r3, [pc, #28]	; (800b158 <__assert_func+0x30>)
 800b13a:	9100      	str	r1, [sp, #0]
 800b13c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b140:	4906      	ldr	r1, [pc, #24]	; (800b15c <__assert_func+0x34>)
 800b142:	462b      	mov	r3, r5
 800b144:	f000 f9a6 	bl	800b494 <fiprintf>
 800b148:	f000 fc66 	bl	800ba18 <abort>
 800b14c:	4b04      	ldr	r3, [pc, #16]	; (800b160 <__assert_func+0x38>)
 800b14e:	461c      	mov	r4, r3
 800b150:	e7f3      	b.n	800b13a <__assert_func+0x12>
 800b152:	bf00      	nop
 800b154:	2000009c 	.word	0x2000009c
 800b158:	0800cb88 	.word	0x0800cb88
 800b15c:	0800cb95 	.word	0x0800cb95
 800b160:	0800cbc3 	.word	0x0800cbc3

0800b164 <__sflush_r>:
 800b164:	898a      	ldrh	r2, [r1, #12]
 800b166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16a:	4605      	mov	r5, r0
 800b16c:	0710      	lsls	r0, r2, #28
 800b16e:	460c      	mov	r4, r1
 800b170:	d458      	bmi.n	800b224 <__sflush_r+0xc0>
 800b172:	684b      	ldr	r3, [r1, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	dc05      	bgt.n	800b184 <__sflush_r+0x20>
 800b178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	dc02      	bgt.n	800b184 <__sflush_r+0x20>
 800b17e:	2000      	movs	r0, #0
 800b180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b186:	2e00      	cmp	r6, #0
 800b188:	d0f9      	beq.n	800b17e <__sflush_r+0x1a>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b190:	682f      	ldr	r7, [r5, #0]
 800b192:	602b      	str	r3, [r5, #0]
 800b194:	d032      	beq.n	800b1fc <__sflush_r+0x98>
 800b196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	075a      	lsls	r2, r3, #29
 800b19c:	d505      	bpl.n	800b1aa <__sflush_r+0x46>
 800b19e:	6863      	ldr	r3, [r4, #4]
 800b1a0:	1ac0      	subs	r0, r0, r3
 800b1a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1a4:	b10b      	cbz	r3, 800b1aa <__sflush_r+0x46>
 800b1a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1a8:	1ac0      	subs	r0, r0, r3
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1b0:	6a21      	ldr	r1, [r4, #32]
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	47b0      	blx	r6
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	d106      	bne.n	800b1ca <__sflush_r+0x66>
 800b1bc:	6829      	ldr	r1, [r5, #0]
 800b1be:	291d      	cmp	r1, #29
 800b1c0:	d82c      	bhi.n	800b21c <__sflush_r+0xb8>
 800b1c2:	4a2a      	ldr	r2, [pc, #168]	; (800b26c <__sflush_r+0x108>)
 800b1c4:	40ca      	lsrs	r2, r1
 800b1c6:	07d6      	lsls	r6, r2, #31
 800b1c8:	d528      	bpl.n	800b21c <__sflush_r+0xb8>
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	6062      	str	r2, [r4, #4]
 800b1ce:	04d9      	lsls	r1, r3, #19
 800b1d0:	6922      	ldr	r2, [r4, #16]
 800b1d2:	6022      	str	r2, [r4, #0]
 800b1d4:	d504      	bpl.n	800b1e0 <__sflush_r+0x7c>
 800b1d6:	1c42      	adds	r2, r0, #1
 800b1d8:	d101      	bne.n	800b1de <__sflush_r+0x7a>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	b903      	cbnz	r3, 800b1e0 <__sflush_r+0x7c>
 800b1de:	6560      	str	r0, [r4, #84]	; 0x54
 800b1e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1e2:	602f      	str	r7, [r5, #0]
 800b1e4:	2900      	cmp	r1, #0
 800b1e6:	d0ca      	beq.n	800b17e <__sflush_r+0x1a>
 800b1e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1ec:	4299      	cmp	r1, r3
 800b1ee:	d002      	beq.n	800b1f6 <__sflush_r+0x92>
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f7ff f931 	bl	800a458 <_free_r>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	6360      	str	r0, [r4, #52]	; 0x34
 800b1fa:	e7c1      	b.n	800b180 <__sflush_r+0x1c>
 800b1fc:	6a21      	ldr	r1, [r4, #32]
 800b1fe:	2301      	movs	r3, #1
 800b200:	4628      	mov	r0, r5
 800b202:	47b0      	blx	r6
 800b204:	1c41      	adds	r1, r0, #1
 800b206:	d1c7      	bne.n	800b198 <__sflush_r+0x34>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0c4      	beq.n	800b198 <__sflush_r+0x34>
 800b20e:	2b1d      	cmp	r3, #29
 800b210:	d001      	beq.n	800b216 <__sflush_r+0xb2>
 800b212:	2b16      	cmp	r3, #22
 800b214:	d101      	bne.n	800b21a <__sflush_r+0xb6>
 800b216:	602f      	str	r7, [r5, #0]
 800b218:	e7b1      	b.n	800b17e <__sflush_r+0x1a>
 800b21a:	89a3      	ldrh	r3, [r4, #12]
 800b21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b220:	81a3      	strh	r3, [r4, #12]
 800b222:	e7ad      	b.n	800b180 <__sflush_r+0x1c>
 800b224:	690f      	ldr	r7, [r1, #16]
 800b226:	2f00      	cmp	r7, #0
 800b228:	d0a9      	beq.n	800b17e <__sflush_r+0x1a>
 800b22a:	0793      	lsls	r3, r2, #30
 800b22c:	680e      	ldr	r6, [r1, #0]
 800b22e:	bf08      	it	eq
 800b230:	694b      	ldreq	r3, [r1, #20]
 800b232:	600f      	str	r7, [r1, #0]
 800b234:	bf18      	it	ne
 800b236:	2300      	movne	r3, #0
 800b238:	eba6 0807 	sub.w	r8, r6, r7
 800b23c:	608b      	str	r3, [r1, #8]
 800b23e:	f1b8 0f00 	cmp.w	r8, #0
 800b242:	dd9c      	ble.n	800b17e <__sflush_r+0x1a>
 800b244:	6a21      	ldr	r1, [r4, #32]
 800b246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b248:	4643      	mov	r3, r8
 800b24a:	463a      	mov	r2, r7
 800b24c:	4628      	mov	r0, r5
 800b24e:	47b0      	blx	r6
 800b250:	2800      	cmp	r0, #0
 800b252:	dc06      	bgt.n	800b262 <__sflush_r+0xfe>
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	e78e      	b.n	800b180 <__sflush_r+0x1c>
 800b262:	4407      	add	r7, r0
 800b264:	eba8 0800 	sub.w	r8, r8, r0
 800b268:	e7e9      	b.n	800b23e <__sflush_r+0xda>
 800b26a:	bf00      	nop
 800b26c:	20400001 	.word	0x20400001

0800b270 <_fflush_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	690b      	ldr	r3, [r1, #16]
 800b274:	4605      	mov	r5, r0
 800b276:	460c      	mov	r4, r1
 800b278:	b913      	cbnz	r3, 800b280 <_fflush_r+0x10>
 800b27a:	2500      	movs	r5, #0
 800b27c:	4628      	mov	r0, r5
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	b118      	cbz	r0, 800b28a <_fflush_r+0x1a>
 800b282:	6983      	ldr	r3, [r0, #24]
 800b284:	b90b      	cbnz	r3, 800b28a <_fflush_r+0x1a>
 800b286:	f000 f887 	bl	800b398 <__sinit>
 800b28a:	4b14      	ldr	r3, [pc, #80]	; (800b2dc <_fflush_r+0x6c>)
 800b28c:	429c      	cmp	r4, r3
 800b28e:	d11b      	bne.n	800b2c8 <_fflush_r+0x58>
 800b290:	686c      	ldr	r4, [r5, #4]
 800b292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d0ef      	beq.n	800b27a <_fflush_r+0xa>
 800b29a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b29c:	07d0      	lsls	r0, r2, #31
 800b29e:	d404      	bmi.n	800b2aa <_fflush_r+0x3a>
 800b2a0:	0599      	lsls	r1, r3, #22
 800b2a2:	d402      	bmi.n	800b2aa <_fflush_r+0x3a>
 800b2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2a6:	f000 f927 	bl	800b4f8 <__retarget_lock_acquire_recursive>
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f7ff ff59 	bl	800b164 <__sflush_r>
 800b2b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2b4:	07da      	lsls	r2, r3, #31
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	d4e0      	bmi.n	800b27c <_fflush_r+0xc>
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	059b      	lsls	r3, r3, #22
 800b2be:	d4dd      	bmi.n	800b27c <_fflush_r+0xc>
 800b2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2c2:	f000 f91a 	bl	800b4fa <__retarget_lock_release_recursive>
 800b2c6:	e7d9      	b.n	800b27c <_fflush_r+0xc>
 800b2c8:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <_fflush_r+0x70>)
 800b2ca:	429c      	cmp	r4, r3
 800b2cc:	d101      	bne.n	800b2d2 <_fflush_r+0x62>
 800b2ce:	68ac      	ldr	r4, [r5, #8]
 800b2d0:	e7df      	b.n	800b292 <_fflush_r+0x22>
 800b2d2:	4b04      	ldr	r3, [pc, #16]	; (800b2e4 <_fflush_r+0x74>)
 800b2d4:	429c      	cmp	r4, r3
 800b2d6:	bf08      	it	eq
 800b2d8:	68ec      	ldreq	r4, [r5, #12]
 800b2da:	e7da      	b.n	800b292 <_fflush_r+0x22>
 800b2dc:	0800cbe4 	.word	0x0800cbe4
 800b2e0:	0800cc04 	.word	0x0800cc04
 800b2e4:	0800cbc4 	.word	0x0800cbc4

0800b2e8 <std>:
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	b510      	push	{r4, lr}
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b2f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2f6:	6083      	str	r3, [r0, #8]
 800b2f8:	8181      	strh	r1, [r0, #12]
 800b2fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b2fc:	81c2      	strh	r2, [r0, #14]
 800b2fe:	6183      	str	r3, [r0, #24]
 800b300:	4619      	mov	r1, r3
 800b302:	2208      	movs	r2, #8
 800b304:	305c      	adds	r0, #92	; 0x5c
 800b306:	f7fd f88b 	bl	8008420 <memset>
 800b30a:	4b05      	ldr	r3, [pc, #20]	; (800b320 <std+0x38>)
 800b30c:	6263      	str	r3, [r4, #36]	; 0x24
 800b30e:	4b05      	ldr	r3, [pc, #20]	; (800b324 <std+0x3c>)
 800b310:	62a3      	str	r3, [r4, #40]	; 0x28
 800b312:	4b05      	ldr	r3, [pc, #20]	; (800b328 <std+0x40>)
 800b314:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b316:	4b05      	ldr	r3, [pc, #20]	; (800b32c <std+0x44>)
 800b318:	6224      	str	r4, [r4, #32]
 800b31a:	6323      	str	r3, [r4, #48]	; 0x30
 800b31c:	bd10      	pop	{r4, pc}
 800b31e:	bf00      	nop
 800b320:	08008d9d 	.word	0x08008d9d
 800b324:	08008dc3 	.word	0x08008dc3
 800b328:	08008dfb 	.word	0x08008dfb
 800b32c:	08008e1f 	.word	0x08008e1f

0800b330 <_cleanup_r>:
 800b330:	4901      	ldr	r1, [pc, #4]	; (800b338 <_cleanup_r+0x8>)
 800b332:	f000 b8c1 	b.w	800b4b8 <_fwalk_reent>
 800b336:	bf00      	nop
 800b338:	0800b271 	.word	0x0800b271

0800b33c <__sfmoreglue>:
 800b33c:	b570      	push	{r4, r5, r6, lr}
 800b33e:	2268      	movs	r2, #104	; 0x68
 800b340:	1e4d      	subs	r5, r1, #1
 800b342:	4355      	muls	r5, r2
 800b344:	460e      	mov	r6, r1
 800b346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b34a:	f7ff f8f1 	bl	800a530 <_malloc_r>
 800b34e:	4604      	mov	r4, r0
 800b350:	b140      	cbz	r0, 800b364 <__sfmoreglue+0x28>
 800b352:	2100      	movs	r1, #0
 800b354:	e9c0 1600 	strd	r1, r6, [r0]
 800b358:	300c      	adds	r0, #12
 800b35a:	60a0      	str	r0, [r4, #8]
 800b35c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b360:	f7fd f85e 	bl	8008420 <memset>
 800b364:	4620      	mov	r0, r4
 800b366:	bd70      	pop	{r4, r5, r6, pc}

0800b368 <__sfp_lock_acquire>:
 800b368:	4801      	ldr	r0, [pc, #4]	; (800b370 <__sfp_lock_acquire+0x8>)
 800b36a:	f000 b8c5 	b.w	800b4f8 <__retarget_lock_acquire_recursive>
 800b36e:	bf00      	nop
 800b370:	20000539 	.word	0x20000539

0800b374 <__sfp_lock_release>:
 800b374:	4801      	ldr	r0, [pc, #4]	; (800b37c <__sfp_lock_release+0x8>)
 800b376:	f000 b8c0 	b.w	800b4fa <__retarget_lock_release_recursive>
 800b37a:	bf00      	nop
 800b37c:	20000539 	.word	0x20000539

0800b380 <__sinit_lock_acquire>:
 800b380:	4801      	ldr	r0, [pc, #4]	; (800b388 <__sinit_lock_acquire+0x8>)
 800b382:	f000 b8b9 	b.w	800b4f8 <__retarget_lock_acquire_recursive>
 800b386:	bf00      	nop
 800b388:	2000053a 	.word	0x2000053a

0800b38c <__sinit_lock_release>:
 800b38c:	4801      	ldr	r0, [pc, #4]	; (800b394 <__sinit_lock_release+0x8>)
 800b38e:	f000 b8b4 	b.w	800b4fa <__retarget_lock_release_recursive>
 800b392:	bf00      	nop
 800b394:	2000053a 	.word	0x2000053a

0800b398 <__sinit>:
 800b398:	b510      	push	{r4, lr}
 800b39a:	4604      	mov	r4, r0
 800b39c:	f7ff fff0 	bl	800b380 <__sinit_lock_acquire>
 800b3a0:	69a3      	ldr	r3, [r4, #24]
 800b3a2:	b11b      	cbz	r3, 800b3ac <__sinit+0x14>
 800b3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a8:	f7ff bff0 	b.w	800b38c <__sinit_lock_release>
 800b3ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3b0:	6523      	str	r3, [r4, #80]	; 0x50
 800b3b2:	4b13      	ldr	r3, [pc, #76]	; (800b400 <__sinit+0x68>)
 800b3b4:	4a13      	ldr	r2, [pc, #76]	; (800b404 <__sinit+0x6c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3ba:	42a3      	cmp	r3, r4
 800b3bc:	bf04      	itt	eq
 800b3be:	2301      	moveq	r3, #1
 800b3c0:	61a3      	streq	r3, [r4, #24]
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 f820 	bl	800b408 <__sfp>
 800b3c8:	6060      	str	r0, [r4, #4]
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 f81c 	bl	800b408 <__sfp>
 800b3d0:	60a0      	str	r0, [r4, #8]
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 f818 	bl	800b408 <__sfp>
 800b3d8:	2200      	movs	r2, #0
 800b3da:	60e0      	str	r0, [r4, #12]
 800b3dc:	2104      	movs	r1, #4
 800b3de:	6860      	ldr	r0, [r4, #4]
 800b3e0:	f7ff ff82 	bl	800b2e8 <std>
 800b3e4:	68a0      	ldr	r0, [r4, #8]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	2109      	movs	r1, #9
 800b3ea:	f7ff ff7d 	bl	800b2e8 <std>
 800b3ee:	68e0      	ldr	r0, [r4, #12]
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	2112      	movs	r1, #18
 800b3f4:	f7ff ff78 	bl	800b2e8 <std>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	61a3      	str	r3, [r4, #24]
 800b3fc:	e7d2      	b.n	800b3a4 <__sinit+0xc>
 800b3fe:	bf00      	nop
 800b400:	0800c83c 	.word	0x0800c83c
 800b404:	0800b331 	.word	0x0800b331

0800b408 <__sfp>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	4607      	mov	r7, r0
 800b40c:	f7ff ffac 	bl	800b368 <__sfp_lock_acquire>
 800b410:	4b1e      	ldr	r3, [pc, #120]	; (800b48c <__sfp+0x84>)
 800b412:	681e      	ldr	r6, [r3, #0]
 800b414:	69b3      	ldr	r3, [r6, #24]
 800b416:	b913      	cbnz	r3, 800b41e <__sfp+0x16>
 800b418:	4630      	mov	r0, r6
 800b41a:	f7ff ffbd 	bl	800b398 <__sinit>
 800b41e:	3648      	adds	r6, #72	; 0x48
 800b420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b424:	3b01      	subs	r3, #1
 800b426:	d503      	bpl.n	800b430 <__sfp+0x28>
 800b428:	6833      	ldr	r3, [r6, #0]
 800b42a:	b30b      	cbz	r3, 800b470 <__sfp+0x68>
 800b42c:	6836      	ldr	r6, [r6, #0]
 800b42e:	e7f7      	b.n	800b420 <__sfp+0x18>
 800b430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b434:	b9d5      	cbnz	r5, 800b46c <__sfp+0x64>
 800b436:	4b16      	ldr	r3, [pc, #88]	; (800b490 <__sfp+0x88>)
 800b438:	60e3      	str	r3, [r4, #12]
 800b43a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b43e:	6665      	str	r5, [r4, #100]	; 0x64
 800b440:	f000 f859 	bl	800b4f6 <__retarget_lock_init_recursive>
 800b444:	f7ff ff96 	bl	800b374 <__sfp_lock_release>
 800b448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b44c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b450:	6025      	str	r5, [r4, #0]
 800b452:	61a5      	str	r5, [r4, #24]
 800b454:	2208      	movs	r2, #8
 800b456:	4629      	mov	r1, r5
 800b458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b45c:	f7fc ffe0 	bl	8008420 <memset>
 800b460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b468:	4620      	mov	r0, r4
 800b46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b46c:	3468      	adds	r4, #104	; 0x68
 800b46e:	e7d9      	b.n	800b424 <__sfp+0x1c>
 800b470:	2104      	movs	r1, #4
 800b472:	4638      	mov	r0, r7
 800b474:	f7ff ff62 	bl	800b33c <__sfmoreglue>
 800b478:	4604      	mov	r4, r0
 800b47a:	6030      	str	r0, [r6, #0]
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d1d5      	bne.n	800b42c <__sfp+0x24>
 800b480:	f7ff ff78 	bl	800b374 <__sfp_lock_release>
 800b484:	230c      	movs	r3, #12
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	e7ee      	b.n	800b468 <__sfp+0x60>
 800b48a:	bf00      	nop
 800b48c:	0800c83c 	.word	0x0800c83c
 800b490:	ffff0001 	.word	0xffff0001

0800b494 <fiprintf>:
 800b494:	b40e      	push	{r1, r2, r3}
 800b496:	b503      	push	{r0, r1, lr}
 800b498:	4601      	mov	r1, r0
 800b49a:	ab03      	add	r3, sp, #12
 800b49c:	4805      	ldr	r0, [pc, #20]	; (800b4b4 <fiprintf+0x20>)
 800b49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a2:	6800      	ldr	r0, [r0, #0]
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	f000 f8b9 	bl	800b61c <_vfiprintf_r>
 800b4aa:	b002      	add	sp, #8
 800b4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4b0:	b003      	add	sp, #12
 800b4b2:	4770      	bx	lr
 800b4b4:	2000009c 	.word	0x2000009c

0800b4b8 <_fwalk_reent>:
 800b4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4bc:	4606      	mov	r6, r0
 800b4be:	4688      	mov	r8, r1
 800b4c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4c4:	2700      	movs	r7, #0
 800b4c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4ca:	f1b9 0901 	subs.w	r9, r9, #1
 800b4ce:	d505      	bpl.n	800b4dc <_fwalk_reent+0x24>
 800b4d0:	6824      	ldr	r4, [r4, #0]
 800b4d2:	2c00      	cmp	r4, #0
 800b4d4:	d1f7      	bne.n	800b4c6 <_fwalk_reent+0xe>
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4dc:	89ab      	ldrh	r3, [r5, #12]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d907      	bls.n	800b4f2 <_fwalk_reent+0x3a>
 800b4e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	d003      	beq.n	800b4f2 <_fwalk_reent+0x3a>
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	47c0      	blx	r8
 800b4f0:	4307      	orrs	r7, r0
 800b4f2:	3568      	adds	r5, #104	; 0x68
 800b4f4:	e7e9      	b.n	800b4ca <_fwalk_reent+0x12>

0800b4f6 <__retarget_lock_init_recursive>:
 800b4f6:	4770      	bx	lr

0800b4f8 <__retarget_lock_acquire_recursive>:
 800b4f8:	4770      	bx	lr

0800b4fa <__retarget_lock_release_recursive>:
 800b4fa:	4770      	bx	lr

0800b4fc <__ascii_mbtowc>:
 800b4fc:	b082      	sub	sp, #8
 800b4fe:	b901      	cbnz	r1, 800b502 <__ascii_mbtowc+0x6>
 800b500:	a901      	add	r1, sp, #4
 800b502:	b142      	cbz	r2, 800b516 <__ascii_mbtowc+0x1a>
 800b504:	b14b      	cbz	r3, 800b51a <__ascii_mbtowc+0x1e>
 800b506:	7813      	ldrb	r3, [r2, #0]
 800b508:	600b      	str	r3, [r1, #0]
 800b50a:	7812      	ldrb	r2, [r2, #0]
 800b50c:	1e10      	subs	r0, r2, #0
 800b50e:	bf18      	it	ne
 800b510:	2001      	movne	r0, #1
 800b512:	b002      	add	sp, #8
 800b514:	4770      	bx	lr
 800b516:	4610      	mov	r0, r2
 800b518:	e7fb      	b.n	800b512 <__ascii_mbtowc+0x16>
 800b51a:	f06f 0001 	mvn.w	r0, #1
 800b51e:	e7f8      	b.n	800b512 <__ascii_mbtowc+0x16>

0800b520 <memmove>:
 800b520:	4288      	cmp	r0, r1
 800b522:	b510      	push	{r4, lr}
 800b524:	eb01 0402 	add.w	r4, r1, r2
 800b528:	d902      	bls.n	800b530 <memmove+0x10>
 800b52a:	4284      	cmp	r4, r0
 800b52c:	4623      	mov	r3, r4
 800b52e:	d807      	bhi.n	800b540 <memmove+0x20>
 800b530:	1e43      	subs	r3, r0, #1
 800b532:	42a1      	cmp	r1, r4
 800b534:	d008      	beq.n	800b548 <memmove+0x28>
 800b536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b53a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b53e:	e7f8      	b.n	800b532 <memmove+0x12>
 800b540:	4402      	add	r2, r0
 800b542:	4601      	mov	r1, r0
 800b544:	428a      	cmp	r2, r1
 800b546:	d100      	bne.n	800b54a <memmove+0x2a>
 800b548:	bd10      	pop	{r4, pc}
 800b54a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b54e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b552:	e7f7      	b.n	800b544 <memmove+0x24>

0800b554 <__malloc_lock>:
 800b554:	4801      	ldr	r0, [pc, #4]	; (800b55c <__malloc_lock+0x8>)
 800b556:	f7ff bfcf 	b.w	800b4f8 <__retarget_lock_acquire_recursive>
 800b55a:	bf00      	nop
 800b55c:	20000538 	.word	0x20000538

0800b560 <__malloc_unlock>:
 800b560:	4801      	ldr	r0, [pc, #4]	; (800b568 <__malloc_unlock+0x8>)
 800b562:	f7ff bfca 	b.w	800b4fa <__retarget_lock_release_recursive>
 800b566:	bf00      	nop
 800b568:	20000538 	.word	0x20000538

0800b56c <_realloc_r>:
 800b56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b570:	4680      	mov	r8, r0
 800b572:	4614      	mov	r4, r2
 800b574:	460e      	mov	r6, r1
 800b576:	b921      	cbnz	r1, 800b582 <_realloc_r+0x16>
 800b578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b57c:	4611      	mov	r1, r2
 800b57e:	f7fe bfd7 	b.w	800a530 <_malloc_r>
 800b582:	b92a      	cbnz	r2, 800b590 <_realloc_r+0x24>
 800b584:	f7fe ff68 	bl	800a458 <_free_r>
 800b588:	4625      	mov	r5, r4
 800b58a:	4628      	mov	r0, r5
 800b58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b590:	f000 faae 	bl	800baf0 <_malloc_usable_size_r>
 800b594:	4284      	cmp	r4, r0
 800b596:	4607      	mov	r7, r0
 800b598:	d802      	bhi.n	800b5a0 <_realloc_r+0x34>
 800b59a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b59e:	d812      	bhi.n	800b5c6 <_realloc_r+0x5a>
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	f7fe ffc4 	bl	800a530 <_malloc_r>
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d0ed      	beq.n	800b58a <_realloc_r+0x1e>
 800b5ae:	42bc      	cmp	r4, r7
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	4631      	mov	r1, r6
 800b5b4:	bf28      	it	cs
 800b5b6:	463a      	movcs	r2, r7
 800b5b8:	f7fe fba6 	bl	8009d08 <memcpy>
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4640      	mov	r0, r8
 800b5c0:	f7fe ff4a 	bl	800a458 <_free_r>
 800b5c4:	e7e1      	b.n	800b58a <_realloc_r+0x1e>
 800b5c6:	4635      	mov	r5, r6
 800b5c8:	e7df      	b.n	800b58a <_realloc_r+0x1e>

0800b5ca <__sfputc_r>:
 800b5ca:	6893      	ldr	r3, [r2, #8]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	b410      	push	{r4}
 800b5d2:	6093      	str	r3, [r2, #8]
 800b5d4:	da08      	bge.n	800b5e8 <__sfputc_r+0x1e>
 800b5d6:	6994      	ldr	r4, [r2, #24]
 800b5d8:	42a3      	cmp	r3, r4
 800b5da:	db01      	blt.n	800b5e0 <__sfputc_r+0x16>
 800b5dc:	290a      	cmp	r1, #10
 800b5de:	d103      	bne.n	800b5e8 <__sfputc_r+0x1e>
 800b5e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5e4:	f000 b94a 	b.w	800b87c <__swbuf_r>
 800b5e8:	6813      	ldr	r3, [r2, #0]
 800b5ea:	1c58      	adds	r0, r3, #1
 800b5ec:	6010      	str	r0, [r2, #0]
 800b5ee:	7019      	strb	r1, [r3, #0]
 800b5f0:	4608      	mov	r0, r1
 800b5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <__sfputs_r>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	4614      	mov	r4, r2
 800b600:	18d5      	adds	r5, r2, r3
 800b602:	42ac      	cmp	r4, r5
 800b604:	d101      	bne.n	800b60a <__sfputs_r+0x12>
 800b606:	2000      	movs	r0, #0
 800b608:	e007      	b.n	800b61a <__sfputs_r+0x22>
 800b60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b60e:	463a      	mov	r2, r7
 800b610:	4630      	mov	r0, r6
 800b612:	f7ff ffda 	bl	800b5ca <__sfputc_r>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	d1f3      	bne.n	800b602 <__sfputs_r+0xa>
 800b61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b61c <_vfiprintf_r>:
 800b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	460d      	mov	r5, r1
 800b622:	b09d      	sub	sp, #116	; 0x74
 800b624:	4614      	mov	r4, r2
 800b626:	4698      	mov	r8, r3
 800b628:	4606      	mov	r6, r0
 800b62a:	b118      	cbz	r0, 800b634 <_vfiprintf_r+0x18>
 800b62c:	6983      	ldr	r3, [r0, #24]
 800b62e:	b90b      	cbnz	r3, 800b634 <_vfiprintf_r+0x18>
 800b630:	f7ff feb2 	bl	800b398 <__sinit>
 800b634:	4b89      	ldr	r3, [pc, #548]	; (800b85c <_vfiprintf_r+0x240>)
 800b636:	429d      	cmp	r5, r3
 800b638:	d11b      	bne.n	800b672 <_vfiprintf_r+0x56>
 800b63a:	6875      	ldr	r5, [r6, #4]
 800b63c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b63e:	07d9      	lsls	r1, r3, #31
 800b640:	d405      	bmi.n	800b64e <_vfiprintf_r+0x32>
 800b642:	89ab      	ldrh	r3, [r5, #12]
 800b644:	059a      	lsls	r2, r3, #22
 800b646:	d402      	bmi.n	800b64e <_vfiprintf_r+0x32>
 800b648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b64a:	f7ff ff55 	bl	800b4f8 <__retarget_lock_acquire_recursive>
 800b64e:	89ab      	ldrh	r3, [r5, #12]
 800b650:	071b      	lsls	r3, r3, #28
 800b652:	d501      	bpl.n	800b658 <_vfiprintf_r+0x3c>
 800b654:	692b      	ldr	r3, [r5, #16]
 800b656:	b9eb      	cbnz	r3, 800b694 <_vfiprintf_r+0x78>
 800b658:	4629      	mov	r1, r5
 800b65a:	4630      	mov	r0, r6
 800b65c:	f000 f96e 	bl	800b93c <__swsetup_r>
 800b660:	b1c0      	cbz	r0, 800b694 <_vfiprintf_r+0x78>
 800b662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b664:	07dc      	lsls	r4, r3, #31
 800b666:	d50e      	bpl.n	800b686 <_vfiprintf_r+0x6a>
 800b668:	f04f 30ff 	mov.w	r0, #4294967295
 800b66c:	b01d      	add	sp, #116	; 0x74
 800b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b672:	4b7b      	ldr	r3, [pc, #492]	; (800b860 <_vfiprintf_r+0x244>)
 800b674:	429d      	cmp	r5, r3
 800b676:	d101      	bne.n	800b67c <_vfiprintf_r+0x60>
 800b678:	68b5      	ldr	r5, [r6, #8]
 800b67a:	e7df      	b.n	800b63c <_vfiprintf_r+0x20>
 800b67c:	4b79      	ldr	r3, [pc, #484]	; (800b864 <_vfiprintf_r+0x248>)
 800b67e:	429d      	cmp	r5, r3
 800b680:	bf08      	it	eq
 800b682:	68f5      	ldreq	r5, [r6, #12]
 800b684:	e7da      	b.n	800b63c <_vfiprintf_r+0x20>
 800b686:	89ab      	ldrh	r3, [r5, #12]
 800b688:	0598      	lsls	r0, r3, #22
 800b68a:	d4ed      	bmi.n	800b668 <_vfiprintf_r+0x4c>
 800b68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b68e:	f7ff ff34 	bl	800b4fa <__retarget_lock_release_recursive>
 800b692:	e7e9      	b.n	800b668 <_vfiprintf_r+0x4c>
 800b694:	2300      	movs	r3, #0
 800b696:	9309      	str	r3, [sp, #36]	; 0x24
 800b698:	2320      	movs	r3, #32
 800b69a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b69e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6a2:	2330      	movs	r3, #48	; 0x30
 800b6a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b868 <_vfiprintf_r+0x24c>
 800b6a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6ac:	f04f 0901 	mov.w	r9, #1
 800b6b0:	4623      	mov	r3, r4
 800b6b2:	469a      	mov	sl, r3
 800b6b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6b8:	b10a      	cbz	r2, 800b6be <_vfiprintf_r+0xa2>
 800b6ba:	2a25      	cmp	r2, #37	; 0x25
 800b6bc:	d1f9      	bne.n	800b6b2 <_vfiprintf_r+0x96>
 800b6be:	ebba 0b04 	subs.w	fp, sl, r4
 800b6c2:	d00b      	beq.n	800b6dc <_vfiprintf_r+0xc0>
 800b6c4:	465b      	mov	r3, fp
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	f7ff ff94 	bl	800b5f8 <__sfputs_r>
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	f000 80aa 	beq.w	800b82a <_vfiprintf_r+0x20e>
 800b6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6d8:	445a      	add	r2, fp
 800b6da:	9209      	str	r2, [sp, #36]	; 0x24
 800b6dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 80a2 	beq.w	800b82a <_vfiprintf_r+0x20e>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6f0:	f10a 0a01 	add.w	sl, sl, #1
 800b6f4:	9304      	str	r3, [sp, #16]
 800b6f6:	9307      	str	r3, [sp, #28]
 800b6f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6fc:	931a      	str	r3, [sp, #104]	; 0x68
 800b6fe:	4654      	mov	r4, sl
 800b700:	2205      	movs	r2, #5
 800b702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b706:	4858      	ldr	r0, [pc, #352]	; (800b868 <_vfiprintf_r+0x24c>)
 800b708:	f7f4 fd82 	bl	8000210 <memchr>
 800b70c:	9a04      	ldr	r2, [sp, #16]
 800b70e:	b9d8      	cbnz	r0, 800b748 <_vfiprintf_r+0x12c>
 800b710:	06d1      	lsls	r1, r2, #27
 800b712:	bf44      	itt	mi
 800b714:	2320      	movmi	r3, #32
 800b716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b71a:	0713      	lsls	r3, r2, #28
 800b71c:	bf44      	itt	mi
 800b71e:	232b      	movmi	r3, #43	; 0x2b
 800b720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b724:	f89a 3000 	ldrb.w	r3, [sl]
 800b728:	2b2a      	cmp	r3, #42	; 0x2a
 800b72a:	d015      	beq.n	800b758 <_vfiprintf_r+0x13c>
 800b72c:	9a07      	ldr	r2, [sp, #28]
 800b72e:	4654      	mov	r4, sl
 800b730:	2000      	movs	r0, #0
 800b732:	f04f 0c0a 	mov.w	ip, #10
 800b736:	4621      	mov	r1, r4
 800b738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b73c:	3b30      	subs	r3, #48	; 0x30
 800b73e:	2b09      	cmp	r3, #9
 800b740:	d94e      	bls.n	800b7e0 <_vfiprintf_r+0x1c4>
 800b742:	b1b0      	cbz	r0, 800b772 <_vfiprintf_r+0x156>
 800b744:	9207      	str	r2, [sp, #28]
 800b746:	e014      	b.n	800b772 <_vfiprintf_r+0x156>
 800b748:	eba0 0308 	sub.w	r3, r0, r8
 800b74c:	fa09 f303 	lsl.w	r3, r9, r3
 800b750:	4313      	orrs	r3, r2
 800b752:	9304      	str	r3, [sp, #16]
 800b754:	46a2      	mov	sl, r4
 800b756:	e7d2      	b.n	800b6fe <_vfiprintf_r+0xe2>
 800b758:	9b03      	ldr	r3, [sp, #12]
 800b75a:	1d19      	adds	r1, r3, #4
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	9103      	str	r1, [sp, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	bfbb      	ittet	lt
 800b764:	425b      	neglt	r3, r3
 800b766:	f042 0202 	orrlt.w	r2, r2, #2
 800b76a:	9307      	strge	r3, [sp, #28]
 800b76c:	9307      	strlt	r3, [sp, #28]
 800b76e:	bfb8      	it	lt
 800b770:	9204      	strlt	r2, [sp, #16]
 800b772:	7823      	ldrb	r3, [r4, #0]
 800b774:	2b2e      	cmp	r3, #46	; 0x2e
 800b776:	d10c      	bne.n	800b792 <_vfiprintf_r+0x176>
 800b778:	7863      	ldrb	r3, [r4, #1]
 800b77a:	2b2a      	cmp	r3, #42	; 0x2a
 800b77c:	d135      	bne.n	800b7ea <_vfiprintf_r+0x1ce>
 800b77e:	9b03      	ldr	r3, [sp, #12]
 800b780:	1d1a      	adds	r2, r3, #4
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	9203      	str	r2, [sp, #12]
 800b786:	2b00      	cmp	r3, #0
 800b788:	bfb8      	it	lt
 800b78a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b78e:	3402      	adds	r4, #2
 800b790:	9305      	str	r3, [sp, #20]
 800b792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b878 <_vfiprintf_r+0x25c>
 800b796:	7821      	ldrb	r1, [r4, #0]
 800b798:	2203      	movs	r2, #3
 800b79a:	4650      	mov	r0, sl
 800b79c:	f7f4 fd38 	bl	8000210 <memchr>
 800b7a0:	b140      	cbz	r0, 800b7b4 <_vfiprintf_r+0x198>
 800b7a2:	2340      	movs	r3, #64	; 0x40
 800b7a4:	eba0 000a 	sub.w	r0, r0, sl
 800b7a8:	fa03 f000 	lsl.w	r0, r3, r0
 800b7ac:	9b04      	ldr	r3, [sp, #16]
 800b7ae:	4303      	orrs	r3, r0
 800b7b0:	3401      	adds	r4, #1
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7b8:	482c      	ldr	r0, [pc, #176]	; (800b86c <_vfiprintf_r+0x250>)
 800b7ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7be:	2206      	movs	r2, #6
 800b7c0:	f7f4 fd26 	bl	8000210 <memchr>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d03f      	beq.n	800b848 <_vfiprintf_r+0x22c>
 800b7c8:	4b29      	ldr	r3, [pc, #164]	; (800b870 <_vfiprintf_r+0x254>)
 800b7ca:	bb1b      	cbnz	r3, 800b814 <_vfiprintf_r+0x1f8>
 800b7cc:	9b03      	ldr	r3, [sp, #12]
 800b7ce:	3307      	adds	r3, #7
 800b7d0:	f023 0307 	bic.w	r3, r3, #7
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	9303      	str	r3, [sp, #12]
 800b7d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7da:	443b      	add	r3, r7
 800b7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b7de:	e767      	b.n	800b6b0 <_vfiprintf_r+0x94>
 800b7e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	e7a5      	b.n	800b736 <_vfiprintf_r+0x11a>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	3401      	adds	r4, #1
 800b7ee:	9305      	str	r3, [sp, #20]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	f04f 0c0a 	mov.w	ip, #10
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7fc:	3a30      	subs	r2, #48	; 0x30
 800b7fe:	2a09      	cmp	r2, #9
 800b800:	d903      	bls.n	800b80a <_vfiprintf_r+0x1ee>
 800b802:	2b00      	cmp	r3, #0
 800b804:	d0c5      	beq.n	800b792 <_vfiprintf_r+0x176>
 800b806:	9105      	str	r1, [sp, #20]
 800b808:	e7c3      	b.n	800b792 <_vfiprintf_r+0x176>
 800b80a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b80e:	4604      	mov	r4, r0
 800b810:	2301      	movs	r3, #1
 800b812:	e7f0      	b.n	800b7f6 <_vfiprintf_r+0x1da>
 800b814:	ab03      	add	r3, sp, #12
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	462a      	mov	r2, r5
 800b81a:	4b16      	ldr	r3, [pc, #88]	; (800b874 <_vfiprintf_r+0x258>)
 800b81c:	a904      	add	r1, sp, #16
 800b81e:	4630      	mov	r0, r6
 800b820:	f7fc fea6 	bl	8008570 <_printf_float>
 800b824:	4607      	mov	r7, r0
 800b826:	1c78      	adds	r0, r7, #1
 800b828:	d1d6      	bne.n	800b7d8 <_vfiprintf_r+0x1bc>
 800b82a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b82c:	07d9      	lsls	r1, r3, #31
 800b82e:	d405      	bmi.n	800b83c <_vfiprintf_r+0x220>
 800b830:	89ab      	ldrh	r3, [r5, #12]
 800b832:	059a      	lsls	r2, r3, #22
 800b834:	d402      	bmi.n	800b83c <_vfiprintf_r+0x220>
 800b836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b838:	f7ff fe5f 	bl	800b4fa <__retarget_lock_release_recursive>
 800b83c:	89ab      	ldrh	r3, [r5, #12]
 800b83e:	065b      	lsls	r3, r3, #25
 800b840:	f53f af12 	bmi.w	800b668 <_vfiprintf_r+0x4c>
 800b844:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b846:	e711      	b.n	800b66c <_vfiprintf_r+0x50>
 800b848:	ab03      	add	r3, sp, #12
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	462a      	mov	r2, r5
 800b84e:	4b09      	ldr	r3, [pc, #36]	; (800b874 <_vfiprintf_r+0x258>)
 800b850:	a904      	add	r1, sp, #16
 800b852:	4630      	mov	r0, r6
 800b854:	f7fd f930 	bl	8008ab8 <_printf_i>
 800b858:	e7e4      	b.n	800b824 <_vfiprintf_r+0x208>
 800b85a:	bf00      	nop
 800b85c:	0800cbe4 	.word	0x0800cbe4
 800b860:	0800cc04 	.word	0x0800cc04
 800b864:	0800cbc4 	.word	0x0800cbc4
 800b868:	0800cb5c 	.word	0x0800cb5c
 800b86c:	0800cb66 	.word	0x0800cb66
 800b870:	08008571 	.word	0x08008571
 800b874:	0800b5f9 	.word	0x0800b5f9
 800b878:	0800cb62 	.word	0x0800cb62

0800b87c <__swbuf_r>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	460e      	mov	r6, r1
 800b880:	4614      	mov	r4, r2
 800b882:	4605      	mov	r5, r0
 800b884:	b118      	cbz	r0, 800b88e <__swbuf_r+0x12>
 800b886:	6983      	ldr	r3, [r0, #24]
 800b888:	b90b      	cbnz	r3, 800b88e <__swbuf_r+0x12>
 800b88a:	f7ff fd85 	bl	800b398 <__sinit>
 800b88e:	4b21      	ldr	r3, [pc, #132]	; (800b914 <__swbuf_r+0x98>)
 800b890:	429c      	cmp	r4, r3
 800b892:	d12b      	bne.n	800b8ec <__swbuf_r+0x70>
 800b894:	686c      	ldr	r4, [r5, #4]
 800b896:	69a3      	ldr	r3, [r4, #24]
 800b898:	60a3      	str	r3, [r4, #8]
 800b89a:	89a3      	ldrh	r3, [r4, #12]
 800b89c:	071a      	lsls	r2, r3, #28
 800b89e:	d52f      	bpl.n	800b900 <__swbuf_r+0x84>
 800b8a0:	6923      	ldr	r3, [r4, #16]
 800b8a2:	b36b      	cbz	r3, 800b900 <__swbuf_r+0x84>
 800b8a4:	6923      	ldr	r3, [r4, #16]
 800b8a6:	6820      	ldr	r0, [r4, #0]
 800b8a8:	1ac0      	subs	r0, r0, r3
 800b8aa:	6963      	ldr	r3, [r4, #20]
 800b8ac:	b2f6      	uxtb	r6, r6
 800b8ae:	4283      	cmp	r3, r0
 800b8b0:	4637      	mov	r7, r6
 800b8b2:	dc04      	bgt.n	800b8be <__swbuf_r+0x42>
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f7ff fcda 	bl	800b270 <_fflush_r>
 800b8bc:	bb30      	cbnz	r0, 800b90c <__swbuf_r+0x90>
 800b8be:	68a3      	ldr	r3, [r4, #8]
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	60a3      	str	r3, [r4, #8]
 800b8c4:	6823      	ldr	r3, [r4, #0]
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	6022      	str	r2, [r4, #0]
 800b8ca:	701e      	strb	r6, [r3, #0]
 800b8cc:	6963      	ldr	r3, [r4, #20]
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	4283      	cmp	r3, r0
 800b8d2:	d004      	beq.n	800b8de <__swbuf_r+0x62>
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	07db      	lsls	r3, r3, #31
 800b8d8:	d506      	bpl.n	800b8e8 <__swbuf_r+0x6c>
 800b8da:	2e0a      	cmp	r6, #10
 800b8dc:	d104      	bne.n	800b8e8 <__swbuf_r+0x6c>
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f7ff fcc5 	bl	800b270 <_fflush_r>
 800b8e6:	b988      	cbnz	r0, 800b90c <__swbuf_r+0x90>
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ec:	4b0a      	ldr	r3, [pc, #40]	; (800b918 <__swbuf_r+0x9c>)
 800b8ee:	429c      	cmp	r4, r3
 800b8f0:	d101      	bne.n	800b8f6 <__swbuf_r+0x7a>
 800b8f2:	68ac      	ldr	r4, [r5, #8]
 800b8f4:	e7cf      	b.n	800b896 <__swbuf_r+0x1a>
 800b8f6:	4b09      	ldr	r3, [pc, #36]	; (800b91c <__swbuf_r+0xa0>)
 800b8f8:	429c      	cmp	r4, r3
 800b8fa:	bf08      	it	eq
 800b8fc:	68ec      	ldreq	r4, [r5, #12]
 800b8fe:	e7ca      	b.n	800b896 <__swbuf_r+0x1a>
 800b900:	4621      	mov	r1, r4
 800b902:	4628      	mov	r0, r5
 800b904:	f000 f81a 	bl	800b93c <__swsetup_r>
 800b908:	2800      	cmp	r0, #0
 800b90a:	d0cb      	beq.n	800b8a4 <__swbuf_r+0x28>
 800b90c:	f04f 37ff 	mov.w	r7, #4294967295
 800b910:	e7ea      	b.n	800b8e8 <__swbuf_r+0x6c>
 800b912:	bf00      	nop
 800b914:	0800cbe4 	.word	0x0800cbe4
 800b918:	0800cc04 	.word	0x0800cc04
 800b91c:	0800cbc4 	.word	0x0800cbc4

0800b920 <__ascii_wctomb>:
 800b920:	b149      	cbz	r1, 800b936 <__ascii_wctomb+0x16>
 800b922:	2aff      	cmp	r2, #255	; 0xff
 800b924:	bf85      	ittet	hi
 800b926:	238a      	movhi	r3, #138	; 0x8a
 800b928:	6003      	strhi	r3, [r0, #0]
 800b92a:	700a      	strbls	r2, [r1, #0]
 800b92c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b930:	bf98      	it	ls
 800b932:	2001      	movls	r0, #1
 800b934:	4770      	bx	lr
 800b936:	4608      	mov	r0, r1
 800b938:	4770      	bx	lr
	...

0800b93c <__swsetup_r>:
 800b93c:	4b32      	ldr	r3, [pc, #200]	; (800ba08 <__swsetup_r+0xcc>)
 800b93e:	b570      	push	{r4, r5, r6, lr}
 800b940:	681d      	ldr	r5, [r3, #0]
 800b942:	4606      	mov	r6, r0
 800b944:	460c      	mov	r4, r1
 800b946:	b125      	cbz	r5, 800b952 <__swsetup_r+0x16>
 800b948:	69ab      	ldr	r3, [r5, #24]
 800b94a:	b913      	cbnz	r3, 800b952 <__swsetup_r+0x16>
 800b94c:	4628      	mov	r0, r5
 800b94e:	f7ff fd23 	bl	800b398 <__sinit>
 800b952:	4b2e      	ldr	r3, [pc, #184]	; (800ba0c <__swsetup_r+0xd0>)
 800b954:	429c      	cmp	r4, r3
 800b956:	d10f      	bne.n	800b978 <__swsetup_r+0x3c>
 800b958:	686c      	ldr	r4, [r5, #4]
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b960:	0719      	lsls	r1, r3, #28
 800b962:	d42c      	bmi.n	800b9be <__swsetup_r+0x82>
 800b964:	06dd      	lsls	r5, r3, #27
 800b966:	d411      	bmi.n	800b98c <__swsetup_r+0x50>
 800b968:	2309      	movs	r3, #9
 800b96a:	6033      	str	r3, [r6, #0]
 800b96c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b970:	81a3      	strh	r3, [r4, #12]
 800b972:	f04f 30ff 	mov.w	r0, #4294967295
 800b976:	e03e      	b.n	800b9f6 <__swsetup_r+0xba>
 800b978:	4b25      	ldr	r3, [pc, #148]	; (800ba10 <__swsetup_r+0xd4>)
 800b97a:	429c      	cmp	r4, r3
 800b97c:	d101      	bne.n	800b982 <__swsetup_r+0x46>
 800b97e:	68ac      	ldr	r4, [r5, #8]
 800b980:	e7eb      	b.n	800b95a <__swsetup_r+0x1e>
 800b982:	4b24      	ldr	r3, [pc, #144]	; (800ba14 <__swsetup_r+0xd8>)
 800b984:	429c      	cmp	r4, r3
 800b986:	bf08      	it	eq
 800b988:	68ec      	ldreq	r4, [r5, #12]
 800b98a:	e7e6      	b.n	800b95a <__swsetup_r+0x1e>
 800b98c:	0758      	lsls	r0, r3, #29
 800b98e:	d512      	bpl.n	800b9b6 <__swsetup_r+0x7a>
 800b990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b992:	b141      	cbz	r1, 800b9a6 <__swsetup_r+0x6a>
 800b994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b998:	4299      	cmp	r1, r3
 800b99a:	d002      	beq.n	800b9a2 <__swsetup_r+0x66>
 800b99c:	4630      	mov	r0, r6
 800b99e:	f7fe fd5b 	bl	800a458 <_free_r>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	6363      	str	r3, [r4, #52]	; 0x34
 800b9a6:	89a3      	ldrh	r3, [r4, #12]
 800b9a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9ac:	81a3      	strh	r3, [r4, #12]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	6063      	str	r3, [r4, #4]
 800b9b2:	6923      	ldr	r3, [r4, #16]
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	f043 0308 	orr.w	r3, r3, #8
 800b9bc:	81a3      	strh	r3, [r4, #12]
 800b9be:	6923      	ldr	r3, [r4, #16]
 800b9c0:	b94b      	cbnz	r3, 800b9d6 <__swsetup_r+0x9a>
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9cc:	d003      	beq.n	800b9d6 <__swsetup_r+0x9a>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f000 f84d 	bl	800ba70 <__smakebuf_r>
 800b9d6:	89a0      	ldrh	r0, [r4, #12]
 800b9d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9dc:	f010 0301 	ands.w	r3, r0, #1
 800b9e0:	d00a      	beq.n	800b9f8 <__swsetup_r+0xbc>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60a3      	str	r3, [r4, #8]
 800b9e6:	6963      	ldr	r3, [r4, #20]
 800b9e8:	425b      	negs	r3, r3
 800b9ea:	61a3      	str	r3, [r4, #24]
 800b9ec:	6923      	ldr	r3, [r4, #16]
 800b9ee:	b943      	cbnz	r3, 800ba02 <__swsetup_r+0xc6>
 800b9f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9f4:	d1ba      	bne.n	800b96c <__swsetup_r+0x30>
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
 800b9f8:	0781      	lsls	r1, r0, #30
 800b9fa:	bf58      	it	pl
 800b9fc:	6963      	ldrpl	r3, [r4, #20]
 800b9fe:	60a3      	str	r3, [r4, #8]
 800ba00:	e7f4      	b.n	800b9ec <__swsetup_r+0xb0>
 800ba02:	2000      	movs	r0, #0
 800ba04:	e7f7      	b.n	800b9f6 <__swsetup_r+0xba>
 800ba06:	bf00      	nop
 800ba08:	2000009c 	.word	0x2000009c
 800ba0c:	0800cbe4 	.word	0x0800cbe4
 800ba10:	0800cc04 	.word	0x0800cc04
 800ba14:	0800cbc4 	.word	0x0800cbc4

0800ba18 <abort>:
 800ba18:	b508      	push	{r3, lr}
 800ba1a:	2006      	movs	r0, #6
 800ba1c:	f000 f898 	bl	800bb50 <raise>
 800ba20:	2001      	movs	r0, #1
 800ba22:	f7f6 fe59 	bl	80026d8 <_exit>

0800ba26 <__swhatbuf_r>:
 800ba26:	b570      	push	{r4, r5, r6, lr}
 800ba28:	460e      	mov	r6, r1
 800ba2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2e:	2900      	cmp	r1, #0
 800ba30:	b096      	sub	sp, #88	; 0x58
 800ba32:	4614      	mov	r4, r2
 800ba34:	461d      	mov	r5, r3
 800ba36:	da08      	bge.n	800ba4a <__swhatbuf_r+0x24>
 800ba38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	602a      	str	r2, [r5, #0]
 800ba40:	061a      	lsls	r2, r3, #24
 800ba42:	d410      	bmi.n	800ba66 <__swhatbuf_r+0x40>
 800ba44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba48:	e00e      	b.n	800ba68 <__swhatbuf_r+0x42>
 800ba4a:	466a      	mov	r2, sp
 800ba4c:	f000 f89c 	bl	800bb88 <_fstat_r>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	dbf1      	blt.n	800ba38 <__swhatbuf_r+0x12>
 800ba54:	9a01      	ldr	r2, [sp, #4]
 800ba56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba5e:	425a      	negs	r2, r3
 800ba60:	415a      	adcs	r2, r3
 800ba62:	602a      	str	r2, [r5, #0]
 800ba64:	e7ee      	b.n	800ba44 <__swhatbuf_r+0x1e>
 800ba66:	2340      	movs	r3, #64	; 0x40
 800ba68:	2000      	movs	r0, #0
 800ba6a:	6023      	str	r3, [r4, #0]
 800ba6c:	b016      	add	sp, #88	; 0x58
 800ba6e:	bd70      	pop	{r4, r5, r6, pc}

0800ba70 <__smakebuf_r>:
 800ba70:	898b      	ldrh	r3, [r1, #12]
 800ba72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba74:	079d      	lsls	r5, r3, #30
 800ba76:	4606      	mov	r6, r0
 800ba78:	460c      	mov	r4, r1
 800ba7a:	d507      	bpl.n	800ba8c <__smakebuf_r+0x1c>
 800ba7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	6123      	str	r3, [r4, #16]
 800ba84:	2301      	movs	r3, #1
 800ba86:	6163      	str	r3, [r4, #20]
 800ba88:	b002      	add	sp, #8
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}
 800ba8c:	ab01      	add	r3, sp, #4
 800ba8e:	466a      	mov	r2, sp
 800ba90:	f7ff ffc9 	bl	800ba26 <__swhatbuf_r>
 800ba94:	9900      	ldr	r1, [sp, #0]
 800ba96:	4605      	mov	r5, r0
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f7fe fd49 	bl	800a530 <_malloc_r>
 800ba9e:	b948      	cbnz	r0, 800bab4 <__smakebuf_r+0x44>
 800baa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baa4:	059a      	lsls	r2, r3, #22
 800baa6:	d4ef      	bmi.n	800ba88 <__smakebuf_r+0x18>
 800baa8:	f023 0303 	bic.w	r3, r3, #3
 800baac:	f043 0302 	orr.w	r3, r3, #2
 800bab0:	81a3      	strh	r3, [r4, #12]
 800bab2:	e7e3      	b.n	800ba7c <__smakebuf_r+0xc>
 800bab4:	4b0d      	ldr	r3, [pc, #52]	; (800baec <__smakebuf_r+0x7c>)
 800bab6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bab8:	89a3      	ldrh	r3, [r4, #12]
 800baba:	6020      	str	r0, [r4, #0]
 800babc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac0:	81a3      	strh	r3, [r4, #12]
 800bac2:	9b00      	ldr	r3, [sp, #0]
 800bac4:	6163      	str	r3, [r4, #20]
 800bac6:	9b01      	ldr	r3, [sp, #4]
 800bac8:	6120      	str	r0, [r4, #16]
 800baca:	b15b      	cbz	r3, 800bae4 <__smakebuf_r+0x74>
 800bacc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bad0:	4630      	mov	r0, r6
 800bad2:	f000 f86b 	bl	800bbac <_isatty_r>
 800bad6:	b128      	cbz	r0, 800bae4 <__smakebuf_r+0x74>
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	f023 0303 	bic.w	r3, r3, #3
 800bade:	f043 0301 	orr.w	r3, r3, #1
 800bae2:	81a3      	strh	r3, [r4, #12]
 800bae4:	89a0      	ldrh	r0, [r4, #12]
 800bae6:	4305      	orrs	r5, r0
 800bae8:	81a5      	strh	r5, [r4, #12]
 800baea:	e7cd      	b.n	800ba88 <__smakebuf_r+0x18>
 800baec:	0800b331 	.word	0x0800b331

0800baf0 <_malloc_usable_size_r>:
 800baf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baf4:	1f18      	subs	r0, r3, #4
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	bfbc      	itt	lt
 800bafa:	580b      	ldrlt	r3, [r1, r0]
 800bafc:	18c0      	addlt	r0, r0, r3
 800bafe:	4770      	bx	lr

0800bb00 <_raise_r>:
 800bb00:	291f      	cmp	r1, #31
 800bb02:	b538      	push	{r3, r4, r5, lr}
 800bb04:	4604      	mov	r4, r0
 800bb06:	460d      	mov	r5, r1
 800bb08:	d904      	bls.n	800bb14 <_raise_r+0x14>
 800bb0a:	2316      	movs	r3, #22
 800bb0c:	6003      	str	r3, [r0, #0]
 800bb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb16:	b112      	cbz	r2, 800bb1e <_raise_r+0x1e>
 800bb18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb1c:	b94b      	cbnz	r3, 800bb32 <_raise_r+0x32>
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f000 f830 	bl	800bb84 <_getpid_r>
 800bb24:	462a      	mov	r2, r5
 800bb26:	4601      	mov	r1, r0
 800bb28:	4620      	mov	r0, r4
 800bb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb2e:	f000 b817 	b.w	800bb60 <_kill_r>
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d00a      	beq.n	800bb4c <_raise_r+0x4c>
 800bb36:	1c59      	adds	r1, r3, #1
 800bb38:	d103      	bne.n	800bb42 <_raise_r+0x42>
 800bb3a:	2316      	movs	r3, #22
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	2001      	movs	r0, #1
 800bb40:	e7e7      	b.n	800bb12 <_raise_r+0x12>
 800bb42:	2400      	movs	r4, #0
 800bb44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb48:	4628      	mov	r0, r5
 800bb4a:	4798      	blx	r3
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	e7e0      	b.n	800bb12 <_raise_r+0x12>

0800bb50 <raise>:
 800bb50:	4b02      	ldr	r3, [pc, #8]	; (800bb5c <raise+0xc>)
 800bb52:	4601      	mov	r1, r0
 800bb54:	6818      	ldr	r0, [r3, #0]
 800bb56:	f7ff bfd3 	b.w	800bb00 <_raise_r>
 800bb5a:	bf00      	nop
 800bb5c:	2000009c 	.word	0x2000009c

0800bb60 <_kill_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d07      	ldr	r5, [pc, #28]	; (800bb80 <_kill_r+0x20>)
 800bb64:	2300      	movs	r3, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	602b      	str	r3, [r5, #0]
 800bb6e:	f7f6 fda3 	bl	80026b8 <_kill>
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	d102      	bne.n	800bb7c <_kill_r+0x1c>
 800bb76:	682b      	ldr	r3, [r5, #0]
 800bb78:	b103      	cbz	r3, 800bb7c <_kill_r+0x1c>
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	bd38      	pop	{r3, r4, r5, pc}
 800bb7e:	bf00      	nop
 800bb80:	20000534 	.word	0x20000534

0800bb84 <_getpid_r>:
 800bb84:	f7f6 bd90 	b.w	80026a8 <_getpid>

0800bb88 <_fstat_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4d07      	ldr	r5, [pc, #28]	; (800bba8 <_fstat_r+0x20>)
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	4604      	mov	r4, r0
 800bb90:	4608      	mov	r0, r1
 800bb92:	4611      	mov	r1, r2
 800bb94:	602b      	str	r3, [r5, #0]
 800bb96:	f7f6 fdee 	bl	8002776 <_fstat>
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	d102      	bne.n	800bba4 <_fstat_r+0x1c>
 800bb9e:	682b      	ldr	r3, [r5, #0]
 800bba0:	b103      	cbz	r3, 800bba4 <_fstat_r+0x1c>
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	bd38      	pop	{r3, r4, r5, pc}
 800bba6:	bf00      	nop
 800bba8:	20000534 	.word	0x20000534

0800bbac <_isatty_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d06      	ldr	r5, [pc, #24]	; (800bbc8 <_isatty_r+0x1c>)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	602b      	str	r3, [r5, #0]
 800bbb8:	f7f6 fded 	bl	8002796 <_isatty>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_isatty_r+0x1a>
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_isatty_r+0x1a>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	20000534 	.word	0x20000534
 800bbcc:	00000000 	.word	0x00000000

0800bbd0 <atan>:
 800bbd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	ec55 4b10 	vmov	r4, r5, d0
 800bbd8:	4bc3      	ldr	r3, [pc, #780]	; (800bee8 <atan+0x318>)
 800bbda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bbde:	429e      	cmp	r6, r3
 800bbe0:	46ab      	mov	fp, r5
 800bbe2:	dd18      	ble.n	800bc16 <atan+0x46>
 800bbe4:	4bc1      	ldr	r3, [pc, #772]	; (800beec <atan+0x31c>)
 800bbe6:	429e      	cmp	r6, r3
 800bbe8:	dc01      	bgt.n	800bbee <atan+0x1e>
 800bbea:	d109      	bne.n	800bc00 <atan+0x30>
 800bbec:	b144      	cbz	r4, 800bc00 <atan+0x30>
 800bbee:	4622      	mov	r2, r4
 800bbf0:	462b      	mov	r3, r5
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	f7f4 fb61 	bl	80002bc <__adddf3>
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	e006      	b.n	800bc0e <atan+0x3e>
 800bc00:	f1bb 0f00 	cmp.w	fp, #0
 800bc04:	f300 8131 	bgt.w	800be6a <atan+0x29a>
 800bc08:	a59b      	add	r5, pc, #620	; (adr r5, 800be78 <atan+0x2a8>)
 800bc0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc0e:	ec45 4b10 	vmov	d0, r4, r5
 800bc12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc16:	4bb6      	ldr	r3, [pc, #728]	; (800bef0 <atan+0x320>)
 800bc18:	429e      	cmp	r6, r3
 800bc1a:	dc14      	bgt.n	800bc46 <atan+0x76>
 800bc1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bc20:	429e      	cmp	r6, r3
 800bc22:	dc0d      	bgt.n	800bc40 <atan+0x70>
 800bc24:	a396      	add	r3, pc, #600	; (adr r3, 800be80 <atan+0x2b0>)
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	ee10 0a10 	vmov	r0, s0
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f7f4 fb44 	bl	80002bc <__adddf3>
 800bc34:	4baf      	ldr	r3, [pc, #700]	; (800bef4 <atan+0x324>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	f7f4 ff86 	bl	8000b48 <__aeabi_dcmpgt>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d1e6      	bne.n	800bc0e <atan+0x3e>
 800bc40:	f04f 3aff 	mov.w	sl, #4294967295
 800bc44:	e02b      	b.n	800bc9e <atan+0xce>
 800bc46:	f000 f963 	bl	800bf10 <fabs>
 800bc4a:	4bab      	ldr	r3, [pc, #684]	; (800bef8 <atan+0x328>)
 800bc4c:	429e      	cmp	r6, r3
 800bc4e:	ec55 4b10 	vmov	r4, r5, d0
 800bc52:	f300 80bf 	bgt.w	800bdd4 <atan+0x204>
 800bc56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bc5a:	429e      	cmp	r6, r3
 800bc5c:	f300 80a0 	bgt.w	800bda0 <atan+0x1d0>
 800bc60:	ee10 2a10 	vmov	r2, s0
 800bc64:	ee10 0a10 	vmov	r0, s0
 800bc68:	462b      	mov	r3, r5
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	f7f4 fb26 	bl	80002bc <__adddf3>
 800bc70:	4ba0      	ldr	r3, [pc, #640]	; (800bef4 <atan+0x324>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	f7f4 fb20 	bl	80002b8 <__aeabi_dsub>
 800bc78:	2200      	movs	r2, #0
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	460f      	mov	r7, r1
 800bc7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc82:	4620      	mov	r0, r4
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7f4 fb19 	bl	80002bc <__adddf3>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	4630      	mov	r0, r6
 800bc90:	4639      	mov	r1, r7
 800bc92:	f7f4 fdf3 	bl	800087c <__aeabi_ddiv>
 800bc96:	f04f 0a00 	mov.w	sl, #0
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	460d      	mov	r5, r1
 800bc9e:	4622      	mov	r2, r4
 800bca0:	462b      	mov	r3, r5
 800bca2:	4620      	mov	r0, r4
 800bca4:	4629      	mov	r1, r5
 800bca6:	f7f4 fcbf 	bl	8000628 <__aeabi_dmul>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	460b      	mov	r3, r1
 800bcae:	4680      	mov	r8, r0
 800bcb0:	4689      	mov	r9, r1
 800bcb2:	f7f4 fcb9 	bl	8000628 <__aeabi_dmul>
 800bcb6:	a374      	add	r3, pc, #464	; (adr r3, 800be88 <atan+0x2b8>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	460f      	mov	r7, r1
 800bcc0:	f7f4 fcb2 	bl	8000628 <__aeabi_dmul>
 800bcc4:	a372      	add	r3, pc, #456	; (adr r3, 800be90 <atan+0x2c0>)
 800bcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcca:	f7f4 faf7 	bl	80002bc <__adddf3>
 800bcce:	4632      	mov	r2, r6
 800bcd0:	463b      	mov	r3, r7
 800bcd2:	f7f4 fca9 	bl	8000628 <__aeabi_dmul>
 800bcd6:	a370      	add	r3, pc, #448	; (adr r3, 800be98 <atan+0x2c8>)
 800bcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcdc:	f7f4 faee 	bl	80002bc <__adddf3>
 800bce0:	4632      	mov	r2, r6
 800bce2:	463b      	mov	r3, r7
 800bce4:	f7f4 fca0 	bl	8000628 <__aeabi_dmul>
 800bce8:	a36d      	add	r3, pc, #436	; (adr r3, 800bea0 <atan+0x2d0>)
 800bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcee:	f7f4 fae5 	bl	80002bc <__adddf3>
 800bcf2:	4632      	mov	r2, r6
 800bcf4:	463b      	mov	r3, r7
 800bcf6:	f7f4 fc97 	bl	8000628 <__aeabi_dmul>
 800bcfa:	a36b      	add	r3, pc, #428	; (adr r3, 800bea8 <atan+0x2d8>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	f7f4 fadc 	bl	80002bc <__adddf3>
 800bd04:	4632      	mov	r2, r6
 800bd06:	463b      	mov	r3, r7
 800bd08:	f7f4 fc8e 	bl	8000628 <__aeabi_dmul>
 800bd0c:	a368      	add	r3, pc, #416	; (adr r3, 800beb0 <atan+0x2e0>)
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	f7f4 fad3 	bl	80002bc <__adddf3>
 800bd16:	4642      	mov	r2, r8
 800bd18:	464b      	mov	r3, r9
 800bd1a:	f7f4 fc85 	bl	8000628 <__aeabi_dmul>
 800bd1e:	a366      	add	r3, pc, #408	; (adr r3, 800beb8 <atan+0x2e8>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	4680      	mov	r8, r0
 800bd26:	4689      	mov	r9, r1
 800bd28:	4630      	mov	r0, r6
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 fc7c 	bl	8000628 <__aeabi_dmul>
 800bd30:	a363      	add	r3, pc, #396	; (adr r3, 800bec0 <atan+0x2f0>)
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	f7f4 fabf 	bl	80002b8 <__aeabi_dsub>
 800bd3a:	4632      	mov	r2, r6
 800bd3c:	463b      	mov	r3, r7
 800bd3e:	f7f4 fc73 	bl	8000628 <__aeabi_dmul>
 800bd42:	a361      	add	r3, pc, #388	; (adr r3, 800bec8 <atan+0x2f8>)
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f7f4 fab6 	bl	80002b8 <__aeabi_dsub>
 800bd4c:	4632      	mov	r2, r6
 800bd4e:	463b      	mov	r3, r7
 800bd50:	f7f4 fc6a 	bl	8000628 <__aeabi_dmul>
 800bd54:	a35e      	add	r3, pc, #376	; (adr r3, 800bed0 <atan+0x300>)
 800bd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5a:	f7f4 faad 	bl	80002b8 <__aeabi_dsub>
 800bd5e:	4632      	mov	r2, r6
 800bd60:	463b      	mov	r3, r7
 800bd62:	f7f4 fc61 	bl	8000628 <__aeabi_dmul>
 800bd66:	a35c      	add	r3, pc, #368	; (adr r3, 800bed8 <atan+0x308>)
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	f7f4 faa4 	bl	80002b8 <__aeabi_dsub>
 800bd70:	4632      	mov	r2, r6
 800bd72:	463b      	mov	r3, r7
 800bd74:	f7f4 fc58 	bl	8000628 <__aeabi_dmul>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4640      	mov	r0, r8
 800bd7e:	4649      	mov	r1, r9
 800bd80:	f7f4 fa9c 	bl	80002bc <__adddf3>
 800bd84:	4622      	mov	r2, r4
 800bd86:	462b      	mov	r3, r5
 800bd88:	f7f4 fc4e 	bl	8000628 <__aeabi_dmul>
 800bd8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	d14b      	bne.n	800be2e <atan+0x25e>
 800bd96:	4620      	mov	r0, r4
 800bd98:	4629      	mov	r1, r5
 800bd9a:	f7f4 fa8d 	bl	80002b8 <__aeabi_dsub>
 800bd9e:	e72c      	b.n	800bbfa <atan+0x2a>
 800bda0:	ee10 0a10 	vmov	r0, s0
 800bda4:	4b53      	ldr	r3, [pc, #332]	; (800bef4 <atan+0x324>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	4629      	mov	r1, r5
 800bdaa:	f7f4 fa85 	bl	80002b8 <__aeabi_dsub>
 800bdae:	4b51      	ldr	r3, [pc, #324]	; (800bef4 <atan+0x324>)
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	460f      	mov	r7, r1
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	4629      	mov	r1, r5
 800bdba:	f7f4 fa7f 	bl	80002bc <__adddf3>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	f7f4 fd59 	bl	800087c <__aeabi_ddiv>
 800bdca:	f04f 0a01 	mov.w	sl, #1
 800bdce:	4604      	mov	r4, r0
 800bdd0:	460d      	mov	r5, r1
 800bdd2:	e764      	b.n	800bc9e <atan+0xce>
 800bdd4:	4b49      	ldr	r3, [pc, #292]	; (800befc <atan+0x32c>)
 800bdd6:	429e      	cmp	r6, r3
 800bdd8:	da1d      	bge.n	800be16 <atan+0x246>
 800bdda:	ee10 0a10 	vmov	r0, s0
 800bdde:	4b48      	ldr	r3, [pc, #288]	; (800bf00 <atan+0x330>)
 800bde0:	2200      	movs	r2, #0
 800bde2:	4629      	mov	r1, r5
 800bde4:	f7f4 fa68 	bl	80002b8 <__aeabi_dsub>
 800bde8:	4b45      	ldr	r3, [pc, #276]	; (800bf00 <atan+0x330>)
 800bdea:	4606      	mov	r6, r0
 800bdec:	460f      	mov	r7, r1
 800bdee:	2200      	movs	r2, #0
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	f7f4 fc18 	bl	8000628 <__aeabi_dmul>
 800bdf8:	4b3e      	ldr	r3, [pc, #248]	; (800bef4 <atan+0x324>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f7f4 fa5e 	bl	80002bc <__adddf3>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
 800be08:	f7f4 fd38 	bl	800087c <__aeabi_ddiv>
 800be0c:	f04f 0a02 	mov.w	sl, #2
 800be10:	4604      	mov	r4, r0
 800be12:	460d      	mov	r5, r1
 800be14:	e743      	b.n	800bc9e <atan+0xce>
 800be16:	462b      	mov	r3, r5
 800be18:	ee10 2a10 	vmov	r2, s0
 800be1c:	4939      	ldr	r1, [pc, #228]	; (800bf04 <atan+0x334>)
 800be1e:	2000      	movs	r0, #0
 800be20:	f7f4 fd2c 	bl	800087c <__aeabi_ddiv>
 800be24:	f04f 0a03 	mov.w	sl, #3
 800be28:	4604      	mov	r4, r0
 800be2a:	460d      	mov	r5, r1
 800be2c:	e737      	b.n	800bc9e <atan+0xce>
 800be2e:	4b36      	ldr	r3, [pc, #216]	; (800bf08 <atan+0x338>)
 800be30:	4e36      	ldr	r6, [pc, #216]	; (800bf0c <atan+0x33c>)
 800be32:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800be36:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800be3a:	e9da 2300 	ldrd	r2, r3, [sl]
 800be3e:	f7f4 fa3b 	bl	80002b8 <__aeabi_dsub>
 800be42:	4622      	mov	r2, r4
 800be44:	462b      	mov	r3, r5
 800be46:	f7f4 fa37 	bl	80002b8 <__aeabi_dsub>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800be52:	f7f4 fa31 	bl	80002b8 <__aeabi_dsub>
 800be56:	f1bb 0f00 	cmp.w	fp, #0
 800be5a:	4604      	mov	r4, r0
 800be5c:	460d      	mov	r5, r1
 800be5e:	f6bf aed6 	bge.w	800bc0e <atan+0x3e>
 800be62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be66:	461d      	mov	r5, r3
 800be68:	e6d1      	b.n	800bc0e <atan+0x3e>
 800be6a:	a51d      	add	r5, pc, #116	; (adr r5, 800bee0 <atan+0x310>)
 800be6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be70:	e6cd      	b.n	800bc0e <atan+0x3e>
 800be72:	bf00      	nop
 800be74:	f3af 8000 	nop.w
 800be78:	54442d18 	.word	0x54442d18
 800be7c:	bff921fb 	.word	0xbff921fb
 800be80:	8800759c 	.word	0x8800759c
 800be84:	7e37e43c 	.word	0x7e37e43c
 800be88:	e322da11 	.word	0xe322da11
 800be8c:	3f90ad3a 	.word	0x3f90ad3a
 800be90:	24760deb 	.word	0x24760deb
 800be94:	3fa97b4b 	.word	0x3fa97b4b
 800be98:	a0d03d51 	.word	0xa0d03d51
 800be9c:	3fb10d66 	.word	0x3fb10d66
 800bea0:	c54c206e 	.word	0xc54c206e
 800bea4:	3fb745cd 	.word	0x3fb745cd
 800bea8:	920083ff 	.word	0x920083ff
 800beac:	3fc24924 	.word	0x3fc24924
 800beb0:	5555550d 	.word	0x5555550d
 800beb4:	3fd55555 	.word	0x3fd55555
 800beb8:	2c6a6c2f 	.word	0x2c6a6c2f
 800bebc:	bfa2b444 	.word	0xbfa2b444
 800bec0:	52defd9a 	.word	0x52defd9a
 800bec4:	3fadde2d 	.word	0x3fadde2d
 800bec8:	af749a6d 	.word	0xaf749a6d
 800becc:	3fb3b0f2 	.word	0x3fb3b0f2
 800bed0:	fe231671 	.word	0xfe231671
 800bed4:	3fbc71c6 	.word	0x3fbc71c6
 800bed8:	9998ebc4 	.word	0x9998ebc4
 800bedc:	3fc99999 	.word	0x3fc99999
 800bee0:	54442d18 	.word	0x54442d18
 800bee4:	3ff921fb 	.word	0x3ff921fb
 800bee8:	440fffff 	.word	0x440fffff
 800beec:	7ff00000 	.word	0x7ff00000
 800bef0:	3fdbffff 	.word	0x3fdbffff
 800bef4:	3ff00000 	.word	0x3ff00000
 800bef8:	3ff2ffff 	.word	0x3ff2ffff
 800befc:	40038000 	.word	0x40038000
 800bf00:	3ff80000 	.word	0x3ff80000
 800bf04:	bff00000 	.word	0xbff00000
 800bf08:	0800cc50 	.word	0x0800cc50
 800bf0c:	0800cc30 	.word	0x0800cc30

0800bf10 <fabs>:
 800bf10:	ec51 0b10 	vmov	r0, r1, d0
 800bf14:	ee10 2a10 	vmov	r2, s0
 800bf18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf1c:	ec43 2b10 	vmov	d0, r2, r3
 800bf20:	4770      	bx	lr

0800bf22 <atan2>:
 800bf22:	f000 b82d 	b.w	800bf80 <__ieee754_atan2>

0800bf26 <sqrt>:
 800bf26:	b538      	push	{r3, r4, r5, lr}
 800bf28:	ed2d 8b02 	vpush	{d8}
 800bf2c:	ec55 4b10 	vmov	r4, r5, d0
 800bf30:	f000 f8f0 	bl	800c114 <__ieee754_sqrt>
 800bf34:	4622      	mov	r2, r4
 800bf36:	462b      	mov	r3, r5
 800bf38:	4620      	mov	r0, r4
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	eeb0 8a40 	vmov.f32	s16, s0
 800bf40:	eef0 8a60 	vmov.f32	s17, s1
 800bf44:	f7f4 fe0a 	bl	8000b5c <__aeabi_dcmpun>
 800bf48:	b990      	cbnz	r0, 800bf70 <sqrt+0x4a>
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	4620      	mov	r0, r4
 800bf50:	4629      	mov	r1, r5
 800bf52:	f7f4 fddb 	bl	8000b0c <__aeabi_dcmplt>
 800bf56:	b158      	cbz	r0, 800bf70 <sqrt+0x4a>
 800bf58:	f7fc fa38 	bl	80083cc <__errno>
 800bf5c:	2321      	movs	r3, #33	; 0x21
 800bf5e:	6003      	str	r3, [r0, #0]
 800bf60:	2200      	movs	r2, #0
 800bf62:	2300      	movs	r3, #0
 800bf64:	4610      	mov	r0, r2
 800bf66:	4619      	mov	r1, r3
 800bf68:	f7f4 fc88 	bl	800087c <__aeabi_ddiv>
 800bf6c:	ec41 0b18 	vmov	d8, r0, r1
 800bf70:	eeb0 0a48 	vmov.f32	s0, s16
 800bf74:	eef0 0a68 	vmov.f32	s1, s17
 800bf78:	ecbd 8b02 	vpop	{d8}
 800bf7c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bf80 <__ieee754_atan2>:
 800bf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf84:	ec57 6b11 	vmov	r6, r7, d1
 800bf88:	4273      	negs	r3, r6
 800bf8a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c110 <__ieee754_atan2+0x190>
 800bf8e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bf92:	4333      	orrs	r3, r6
 800bf94:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bf98:	4573      	cmp	r3, lr
 800bf9a:	ec51 0b10 	vmov	r0, r1, d0
 800bf9e:	ee11 8a10 	vmov	r8, s2
 800bfa2:	d80a      	bhi.n	800bfba <__ieee754_atan2+0x3a>
 800bfa4:	4244      	negs	r4, r0
 800bfa6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfaa:	4304      	orrs	r4, r0
 800bfac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bfb0:	4574      	cmp	r4, lr
 800bfb2:	ee10 9a10 	vmov	r9, s0
 800bfb6:	468c      	mov	ip, r1
 800bfb8:	d907      	bls.n	800bfca <__ieee754_atan2+0x4a>
 800bfba:	4632      	mov	r2, r6
 800bfbc:	463b      	mov	r3, r7
 800bfbe:	f7f4 f97d 	bl	80002bc <__adddf3>
 800bfc2:	ec41 0b10 	vmov	d0, r0, r1
 800bfc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bfce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bfd2:	4334      	orrs	r4, r6
 800bfd4:	d103      	bne.n	800bfde <__ieee754_atan2+0x5e>
 800bfd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfda:	f7ff bdf9 	b.w	800bbd0 <atan>
 800bfde:	17bc      	asrs	r4, r7, #30
 800bfe0:	f004 0402 	and.w	r4, r4, #2
 800bfe4:	ea53 0909 	orrs.w	r9, r3, r9
 800bfe8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bfec:	d107      	bne.n	800bffe <__ieee754_atan2+0x7e>
 800bfee:	2c02      	cmp	r4, #2
 800bff0:	d060      	beq.n	800c0b4 <__ieee754_atan2+0x134>
 800bff2:	2c03      	cmp	r4, #3
 800bff4:	d1e5      	bne.n	800bfc2 <__ieee754_atan2+0x42>
 800bff6:	a142      	add	r1, pc, #264	; (adr r1, 800c100 <__ieee754_atan2+0x180>)
 800bff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bffc:	e7e1      	b.n	800bfc2 <__ieee754_atan2+0x42>
 800bffe:	ea52 0808 	orrs.w	r8, r2, r8
 800c002:	d106      	bne.n	800c012 <__ieee754_atan2+0x92>
 800c004:	f1bc 0f00 	cmp.w	ip, #0
 800c008:	da5f      	bge.n	800c0ca <__ieee754_atan2+0x14a>
 800c00a:	a13f      	add	r1, pc, #252	; (adr r1, 800c108 <__ieee754_atan2+0x188>)
 800c00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c010:	e7d7      	b.n	800bfc2 <__ieee754_atan2+0x42>
 800c012:	4572      	cmp	r2, lr
 800c014:	d10f      	bne.n	800c036 <__ieee754_atan2+0xb6>
 800c016:	4293      	cmp	r3, r2
 800c018:	f104 34ff 	add.w	r4, r4, #4294967295
 800c01c:	d107      	bne.n	800c02e <__ieee754_atan2+0xae>
 800c01e:	2c02      	cmp	r4, #2
 800c020:	d84c      	bhi.n	800c0bc <__ieee754_atan2+0x13c>
 800c022:	4b35      	ldr	r3, [pc, #212]	; (800c0f8 <__ieee754_atan2+0x178>)
 800c024:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c028:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c02c:	e7c9      	b.n	800bfc2 <__ieee754_atan2+0x42>
 800c02e:	2c02      	cmp	r4, #2
 800c030:	d848      	bhi.n	800c0c4 <__ieee754_atan2+0x144>
 800c032:	4b32      	ldr	r3, [pc, #200]	; (800c0fc <__ieee754_atan2+0x17c>)
 800c034:	e7f6      	b.n	800c024 <__ieee754_atan2+0xa4>
 800c036:	4573      	cmp	r3, lr
 800c038:	d0e4      	beq.n	800c004 <__ieee754_atan2+0x84>
 800c03a:	1a9b      	subs	r3, r3, r2
 800c03c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c040:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c044:	da1e      	bge.n	800c084 <__ieee754_atan2+0x104>
 800c046:	2f00      	cmp	r7, #0
 800c048:	da01      	bge.n	800c04e <__ieee754_atan2+0xce>
 800c04a:	323c      	adds	r2, #60	; 0x3c
 800c04c:	db1e      	blt.n	800c08c <__ieee754_atan2+0x10c>
 800c04e:	4632      	mov	r2, r6
 800c050:	463b      	mov	r3, r7
 800c052:	f7f4 fc13 	bl	800087c <__aeabi_ddiv>
 800c056:	ec41 0b10 	vmov	d0, r0, r1
 800c05a:	f7ff ff59 	bl	800bf10 <fabs>
 800c05e:	f7ff fdb7 	bl	800bbd0 <atan>
 800c062:	ec51 0b10 	vmov	r0, r1, d0
 800c066:	2c01      	cmp	r4, #1
 800c068:	d013      	beq.n	800c092 <__ieee754_atan2+0x112>
 800c06a:	2c02      	cmp	r4, #2
 800c06c:	d015      	beq.n	800c09a <__ieee754_atan2+0x11a>
 800c06e:	2c00      	cmp	r4, #0
 800c070:	d0a7      	beq.n	800bfc2 <__ieee754_atan2+0x42>
 800c072:	a319      	add	r3, pc, #100	; (adr r3, 800c0d8 <__ieee754_atan2+0x158>)
 800c074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c078:	f7f4 f91e 	bl	80002b8 <__aeabi_dsub>
 800c07c:	a318      	add	r3, pc, #96	; (adr r3, 800c0e0 <__ieee754_atan2+0x160>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	e014      	b.n	800c0ae <__ieee754_atan2+0x12e>
 800c084:	a118      	add	r1, pc, #96	; (adr r1, 800c0e8 <__ieee754_atan2+0x168>)
 800c086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c08a:	e7ec      	b.n	800c066 <__ieee754_atan2+0xe6>
 800c08c:	2000      	movs	r0, #0
 800c08e:	2100      	movs	r1, #0
 800c090:	e7e9      	b.n	800c066 <__ieee754_atan2+0xe6>
 800c092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c096:	4619      	mov	r1, r3
 800c098:	e793      	b.n	800bfc2 <__ieee754_atan2+0x42>
 800c09a:	a30f      	add	r3, pc, #60	; (adr r3, 800c0d8 <__ieee754_atan2+0x158>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	f7f4 f90a 	bl	80002b8 <__aeabi_dsub>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	a10d      	add	r1, pc, #52	; (adr r1, 800c0e0 <__ieee754_atan2+0x160>)
 800c0aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0ae:	f7f4 f903 	bl	80002b8 <__aeabi_dsub>
 800c0b2:	e786      	b.n	800bfc2 <__ieee754_atan2+0x42>
 800c0b4:	a10a      	add	r1, pc, #40	; (adr r1, 800c0e0 <__ieee754_atan2+0x160>)
 800c0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0ba:	e782      	b.n	800bfc2 <__ieee754_atan2+0x42>
 800c0bc:	a10c      	add	r1, pc, #48	; (adr r1, 800c0f0 <__ieee754_atan2+0x170>)
 800c0be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0c2:	e77e      	b.n	800bfc2 <__ieee754_atan2+0x42>
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	e77b      	b.n	800bfc2 <__ieee754_atan2+0x42>
 800c0ca:	a107      	add	r1, pc, #28	; (adr r1, 800c0e8 <__ieee754_atan2+0x168>)
 800c0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0d0:	e777      	b.n	800bfc2 <__ieee754_atan2+0x42>
 800c0d2:	bf00      	nop
 800c0d4:	f3af 8000 	nop.w
 800c0d8:	33145c07 	.word	0x33145c07
 800c0dc:	3ca1a626 	.word	0x3ca1a626
 800c0e0:	54442d18 	.word	0x54442d18
 800c0e4:	400921fb 	.word	0x400921fb
 800c0e8:	54442d18 	.word	0x54442d18
 800c0ec:	3ff921fb 	.word	0x3ff921fb
 800c0f0:	54442d18 	.word	0x54442d18
 800c0f4:	3fe921fb 	.word	0x3fe921fb
 800c0f8:	0800cc70 	.word	0x0800cc70
 800c0fc:	0800cc88 	.word	0x0800cc88
 800c100:	54442d18 	.word	0x54442d18
 800c104:	c00921fb 	.word	0xc00921fb
 800c108:	54442d18 	.word	0x54442d18
 800c10c:	bff921fb 	.word	0xbff921fb
 800c110:	7ff00000 	.word	0x7ff00000

0800c114 <__ieee754_sqrt>:
 800c114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c118:	ec55 4b10 	vmov	r4, r5, d0
 800c11c:	4e55      	ldr	r6, [pc, #340]	; (800c274 <__ieee754_sqrt+0x160>)
 800c11e:	43ae      	bics	r6, r5
 800c120:	ee10 0a10 	vmov	r0, s0
 800c124:	ee10 3a10 	vmov	r3, s0
 800c128:	462a      	mov	r2, r5
 800c12a:	4629      	mov	r1, r5
 800c12c:	d110      	bne.n	800c150 <__ieee754_sqrt+0x3c>
 800c12e:	ee10 2a10 	vmov	r2, s0
 800c132:	462b      	mov	r3, r5
 800c134:	f7f4 fa78 	bl	8000628 <__aeabi_dmul>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	4620      	mov	r0, r4
 800c13e:	4629      	mov	r1, r5
 800c140:	f7f4 f8bc 	bl	80002bc <__adddf3>
 800c144:	4604      	mov	r4, r0
 800c146:	460d      	mov	r5, r1
 800c148:	ec45 4b10 	vmov	d0, r4, r5
 800c14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c150:	2d00      	cmp	r5, #0
 800c152:	dc10      	bgt.n	800c176 <__ieee754_sqrt+0x62>
 800c154:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c158:	4330      	orrs	r0, r6
 800c15a:	d0f5      	beq.n	800c148 <__ieee754_sqrt+0x34>
 800c15c:	b15d      	cbz	r5, 800c176 <__ieee754_sqrt+0x62>
 800c15e:	ee10 2a10 	vmov	r2, s0
 800c162:	462b      	mov	r3, r5
 800c164:	ee10 0a10 	vmov	r0, s0
 800c168:	f7f4 f8a6 	bl	80002b8 <__aeabi_dsub>
 800c16c:	4602      	mov	r2, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	f7f4 fb84 	bl	800087c <__aeabi_ddiv>
 800c174:	e7e6      	b.n	800c144 <__ieee754_sqrt+0x30>
 800c176:	1512      	asrs	r2, r2, #20
 800c178:	d074      	beq.n	800c264 <__ieee754_sqrt+0x150>
 800c17a:	07d4      	lsls	r4, r2, #31
 800c17c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c180:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c188:	bf5e      	ittt	pl
 800c18a:	0fda      	lsrpl	r2, r3, #31
 800c18c:	005b      	lslpl	r3, r3, #1
 800c18e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c192:	2400      	movs	r4, #0
 800c194:	0fda      	lsrs	r2, r3, #31
 800c196:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c19a:	107f      	asrs	r7, r7, #1
 800c19c:	005b      	lsls	r3, r3, #1
 800c19e:	2516      	movs	r5, #22
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c1a6:	1886      	adds	r6, r0, r2
 800c1a8:	428e      	cmp	r6, r1
 800c1aa:	bfde      	ittt	le
 800c1ac:	1b89      	suble	r1, r1, r6
 800c1ae:	18b0      	addle	r0, r6, r2
 800c1b0:	18a4      	addle	r4, r4, r2
 800c1b2:	0049      	lsls	r1, r1, #1
 800c1b4:	3d01      	subs	r5, #1
 800c1b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c1ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c1be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c1c2:	d1f0      	bne.n	800c1a6 <__ieee754_sqrt+0x92>
 800c1c4:	462a      	mov	r2, r5
 800c1c6:	f04f 0e20 	mov.w	lr, #32
 800c1ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c1ce:	4281      	cmp	r1, r0
 800c1d0:	eb06 0c05 	add.w	ip, r6, r5
 800c1d4:	dc02      	bgt.n	800c1dc <__ieee754_sqrt+0xc8>
 800c1d6:	d113      	bne.n	800c200 <__ieee754_sqrt+0xec>
 800c1d8:	459c      	cmp	ip, r3
 800c1da:	d811      	bhi.n	800c200 <__ieee754_sqrt+0xec>
 800c1dc:	f1bc 0f00 	cmp.w	ip, #0
 800c1e0:	eb0c 0506 	add.w	r5, ip, r6
 800c1e4:	da43      	bge.n	800c26e <__ieee754_sqrt+0x15a>
 800c1e6:	2d00      	cmp	r5, #0
 800c1e8:	db41      	blt.n	800c26e <__ieee754_sqrt+0x15a>
 800c1ea:	f100 0801 	add.w	r8, r0, #1
 800c1ee:	1a09      	subs	r1, r1, r0
 800c1f0:	459c      	cmp	ip, r3
 800c1f2:	bf88      	it	hi
 800c1f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c1f8:	eba3 030c 	sub.w	r3, r3, ip
 800c1fc:	4432      	add	r2, r6
 800c1fe:	4640      	mov	r0, r8
 800c200:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c204:	f1be 0e01 	subs.w	lr, lr, #1
 800c208:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c20c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c210:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c214:	d1db      	bne.n	800c1ce <__ieee754_sqrt+0xba>
 800c216:	430b      	orrs	r3, r1
 800c218:	d006      	beq.n	800c228 <__ieee754_sqrt+0x114>
 800c21a:	1c50      	adds	r0, r2, #1
 800c21c:	bf13      	iteet	ne
 800c21e:	3201      	addne	r2, #1
 800c220:	3401      	addeq	r4, #1
 800c222:	4672      	moveq	r2, lr
 800c224:	f022 0201 	bicne.w	r2, r2, #1
 800c228:	1063      	asrs	r3, r4, #1
 800c22a:	0852      	lsrs	r2, r2, #1
 800c22c:	07e1      	lsls	r1, r4, #31
 800c22e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c232:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c236:	bf48      	it	mi
 800c238:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c23c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c240:	4614      	mov	r4, r2
 800c242:	e781      	b.n	800c148 <__ieee754_sqrt+0x34>
 800c244:	0ad9      	lsrs	r1, r3, #11
 800c246:	3815      	subs	r0, #21
 800c248:	055b      	lsls	r3, r3, #21
 800c24a:	2900      	cmp	r1, #0
 800c24c:	d0fa      	beq.n	800c244 <__ieee754_sqrt+0x130>
 800c24e:	02cd      	lsls	r5, r1, #11
 800c250:	d50a      	bpl.n	800c268 <__ieee754_sqrt+0x154>
 800c252:	f1c2 0420 	rsb	r4, r2, #32
 800c256:	fa23 f404 	lsr.w	r4, r3, r4
 800c25a:	1e55      	subs	r5, r2, #1
 800c25c:	4093      	lsls	r3, r2
 800c25e:	4321      	orrs	r1, r4
 800c260:	1b42      	subs	r2, r0, r5
 800c262:	e78a      	b.n	800c17a <__ieee754_sqrt+0x66>
 800c264:	4610      	mov	r0, r2
 800c266:	e7f0      	b.n	800c24a <__ieee754_sqrt+0x136>
 800c268:	0049      	lsls	r1, r1, #1
 800c26a:	3201      	adds	r2, #1
 800c26c:	e7ef      	b.n	800c24e <__ieee754_sqrt+0x13a>
 800c26e:	4680      	mov	r8, r0
 800c270:	e7bd      	b.n	800c1ee <__ieee754_sqrt+0xda>
 800c272:	bf00      	nop
 800c274:	7ff00000 	.word	0x7ff00000

0800c278 <_init>:
 800c278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27a:	bf00      	nop
 800c27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27e:	bc08      	pop	{r3}
 800c280:	469e      	mov	lr, r3
 800c282:	4770      	bx	lr

0800c284 <_fini>:
 800c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c286:	bf00      	nop
 800c288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c28a:	bc08      	pop	{r3}
 800c28c:	469e      	mov	lr, r3
 800c28e:	4770      	bx	lr
