
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .systemConfig 00000004  0807e800  0807e800  0002e800  2**0
                  ALLOC, READONLY
  2 .text         0000da08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000e48  0800dba8  0800dba8  0001dba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800e9f0  0800e9f0  000202e8  2**0
                  CONTENTS
  5 .ARM          00000008  0800e9f0  0800e9f0  0001e9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800e9f8  0800e9f8  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800e9f8  0800e9f8  0001e9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800e9fc  0800e9fc  0001e9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000002e8  20000000  0800ea00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000884  200002e8  0800ece8  000202e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b6c  0800ece8  00020b6c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cb87  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fcb  00000000  00000000  0003ce9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001978  00000000  00000000  00041e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001718  00000000  00000000  000437e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1c2  00000000  00000000  00044f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025669  00000000  00000000  000620c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c350  00000000  00000000  0008772b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00123a7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d18  00000000  00000000  00123acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800db90 	.word	0x0800db90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	0800db90 	.word	0x0800db90

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f008 ff1b 	bl	8009d48 <memset>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	cbuffer->buffer[cbuffer->write] = data;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	7992      	ldrb	r2, [r2, #6]
 8000f2e:	4413      	add	r3, r2
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b25a      	sxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	757b      	strb	r3, [r7, #21]
	uint8_t length;
	uint8_t read = cbuffer->read;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	795b      	ldrb	r3, [r3, #5]
 8000f7c:	74bb      	strb	r3, [r7, #18]
	uint8_t ch;
	length = cBuffer_Length(cbuffer);
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f89a 	bl	80010b8 <cBuffer_Length>
 8000f84:	4603      	mov	r3, r0
 8000f86:	753b      	strb	r3, [r7, #20]

	for (i=0; i < length;i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
 8000f8c:	e012      	b.n	8000fb4 <cBuffer_GetString+0x54>
	{
		err = cBuffer_Peek(cbuffer, &ch, &read);
 8000f8e:	f107 0212 	add.w	r2, r7, #18
 8000f92:	f107 0311 	add.w	r3, r7, #17
 8000f96:	4619      	mov	r1, r3
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f863 	bl	8001064 <cBuffer_Peek>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	757b      	strb	r3, [r7, #21]

		if (ch == '\r') // A string is found - copy it to the outgoing buffer
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	2b0d      	cmp	r3, #13
 8000fa6:	d102      	bne.n	8000fae <cBuffer_GetString+0x4e>
		{
			found = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75bb      	strb	r3, [r7, #22]
			break;
 8000fac:	e006      	b.n	8000fbc <cBuffer_GetString+0x5c>
	for (i=0; i < length;i++)
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	7d3b      	ldrb	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3e8      	bcc.n	8000f8e <cBuffer_GetString+0x2e>
		}
	}
	if (found)
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d020      	beq.n	8001004 <cBuffer_GetString+0xa4>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, read);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	7cba      	ldrb	r2, [r7, #18]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f88d 	bl	80010ea <cBuffer_LengthCustom>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000fd8:	f107 0313 	add.w	r3, r7, #19
 8000fdc:	4619      	mov	r1, r3
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f817 	bl	8001012 <cBuffer_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	757b      	strb	r3, [r7, #21]
			*string = chr;
 8000fe8:	7cfa      	ldrb	r2, [r7, #19]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	701a      	strb	r2, [r3, #0]
			string++;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
		} while (chr != sTerminator || err != CBUFFER_OK);
 8000ff4:	7cfb      	ldrb	r3, [r7, #19]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d1ed      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8000ffc:	7d7b      	ldrb	r3, [r7, #21]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1ea      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8001002:	e001      	b.n	8001008 <cBuffer_GetString+0xa8>
	}
	else
		err = CBUFFER_NO_STRING;
 8001004:	2303      	movs	r3, #3
 8001006:	757b      	strb	r3, [r7, #21]


	return err;
 8001008:	7d7b      	ldrb	r3, [r7, #21]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f84b 	bl	80010b8 <cBuffer_Length>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8001028:	2302      	movs	r3, #2
 800102a:	e017      	b.n	800105c <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	7952      	ldrb	r2, [r2, #5]
 8001034:	4413      	add	r3, r2
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	3301      	adds	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b25a      	sxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4013      	ands	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <cBuffer_Peek>:

CBUFFER_ERR cBuffer_Peek(cBuffer_t* cbuffer,uint8_t* data, uint8_t*read)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (cBuffer_Length(cbuffer) == 0)
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f821 	bl	80010b8 <cBuffer_Length>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <cBuffer_Peek+0x1c>
	{
		return CBUFFER_EMPTY;
 800107c:	2302      	movs	r3, #2
 800107e:	e017      	b.n	80010b0 <cBuffer_Peek+0x4c>
	}
	*data = cbuffer->buffer[*read];
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	701a      	strb	r2, [r3, #0]
	*read = ((*read)+1) & (cbuffer->size-1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25a      	sxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
	return CBUFFER_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	799a      	ldrb	r2, [r3, #6]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3

}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
 80010f6:	4613      	mov	r3, r2
 80010f8:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b25a      	sxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 800112a:	2120      	movs	r1, #32
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f009 fbfe 	bl	800a92e <strchr>
 8001132:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0 || cmdEnd-buffer != strlen(name))
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d009      	beq.n	800114e <ConsoleCommandMatch+0x2e>
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	461c      	mov	r4, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff f856 	bl	80001f4 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	429c      	cmp	r4, r3
 800114c:	d00b      	beq.n	8001166 <ConsoleCommandMatch+0x46>
	{
			r =  strcmp(name,buffer) == 0;
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f845 	bl	80001e0 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e00f      	b.n	8001186 <ConsoleCommandMatch+0x66>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff f844 	bl	80001f4 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f009 fbf0 	bl	800a958 <strncmp>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	60fb      	str	r3, [r7, #12]

	}

	return r;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}

08001190 <ConsoleInit>:


// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001196:	f000 fee3 	bl	8001f60 <ConsoleIoInit>
	ConsoleIoSendString("Dodeca Timer - A Thousand Projects");
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <ConsoleInit+0x44>)
 800119c:	f000 ff18 	bl	8001fd0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <ConsoleInit+0x48>)
 80011a2:	f000 ff15 	bl	8001fd0 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <ConsoleInit+0x4c>)
 80011a8:	f000 ff12 	bl	8001fd0 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	e007      	b.n	80011c2 <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <ConsoleInit+0x50>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3301      	adds	r3, #1
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b63      	cmp	r3, #99	; 0x63
 80011c6:	d9f4      	bls.n	80011b2 <ConsoleInit+0x22>
	}

}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800dba8 	.word	0x0800dba8
 80011d8:	0800dbcc 	.word	0x0800dbcc
 80011dc:	0800dbd0 	.word	0x0800dbd0
 80011e0:	20000304 	.word	0x20000304

080011e4 <ConsolePrintPrompt>:

void ConsolePrintPrompt()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	ConsoleIoSendString(STR_ENDLINE);
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ConsolePrintPrompt+0x14>)
 80011ea:	f000 fef1 	bl	8001fd0 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <ConsolePrintPrompt+0x18>)
 80011f0:	f000 feee 	bl	8001fd0 <ConsoleIoSendString>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800dbcc 	.word	0x0800dbcc
 80011fc:	0800dbd0 	.word	0x0800dbd0

08001200 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;
	eConsoleError consoleResult;

	consoleResult = ConsoleIoReceive(mReceiveBuffer);
 8001206:	4843      	ldr	r0, [pc, #268]	; (8001314 <ConsoleProcess+0x114>)
 8001208:	f000 fec2 	bl	8001f90 <ConsoleIoReceive>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]

	switch (consoleResult)
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d07a      	beq.n	800130c <ConsoleProcess+0x10c>
 8001216:	2b03      	cmp	r3, #3
 8001218:	dc79      	bgt.n	800130e <ConsoleProcess+0x10e>
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <ConsoleProcess+0x28>
 800121e:	2b00      	cmp	r3, #0
 8001220:	db75      	blt.n	800130e <ConsoleProcess+0x10e>
 8001222:	3b01      	subs	r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	e072      	b.n	800130e <ConsoleProcess+0x10e>
	{
		case CONSOLE_ERROR:
		case CONSOLE_NO_STRING:
			break;
		case CONSOLE_SUCCESS:
			if ('\0' == mReceiveBuffer[0] )
 8001228:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <ConsoleProcess+0x114>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <ConsoleProcess+0x3e>
			{
				ConsoleIoSendString(STR_ENDLINE);
 8001230:	4839      	ldr	r0, [pc, #228]	; (8001318 <ConsoleProcess+0x118>)
 8001232:	f000 fecd 	bl	8001fd0 <ConsoleIoSendString>
				ConsoleIoSendString(CONSOLE_PROMPT);
 8001236:	4839      	ldr	r0, [pc, #228]	; (800131c <ConsoleProcess+0x11c>)
 8001238:	f000 feca 	bl	8001fd0 <ConsoleIoSendString>
				return;
 800123c:	e067      	b.n	800130e <ConsoleProcess+0x10e>
			}
			commandTable = ConsoleCommandsGetTable();
 800123e:	f000 fe67 	bl	8001f10 <ConsoleCommandsGetTable>
 8001242:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	613b      	str	r3, [r7, #16]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800124e:	e03d      	b.n	80012cc <ConsoleProcess+0xcc>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	461a      	mov	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4413      	add	r3, r2
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	492c      	ldr	r1, [pc, #176]	; (8001314 <ConsoleProcess+0x114>)
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5b 	bl	8001120 <ConsoleCommandMatch>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02a      	beq.n	80012c6 <ConsoleProcess+0xc6>
				{
					result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	461a      	mov	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4413      	add	r3, r2
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4824      	ldr	r0, [pc, #144]	; (8001314 <ConsoleProcess+0x114>)
 8001284:	4798      	blx	r3
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d017      	beq.n	80012c0 <ConsoleProcess+0xc0>
					{
						ConsoleIoSendString("Error: ");
 8001290:	4823      	ldr	r0, [pc, #140]	; (8001320 <ConsoleProcess+0x120>)
 8001292:	f000 fe9d 	bl	8001fd0 <ConsoleIoSendString>
						ConsoleIoSendString((char*)mReceiveBuffer);
 8001296:	481f      	ldr	r0, [pc, #124]	; (8001314 <ConsoleProcess+0x114>)
 8001298:	f000 fe9a 	bl	8001fd0 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800129c:	4821      	ldr	r0, [pc, #132]	; (8001324 <ConsoleProcess+0x124>)
 800129e:	f000 fe97 	bl	8001fd0 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	461a      	mov	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	4413      	add	r3, r2
 80012b2:	3308      	adds	r3, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fe8b 	bl	8001fd0 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80012ba:	4817      	ldr	r0, [pc, #92]	; (8001318 <ConsoleProcess+0x118>)
 80012bc:	f000 fe88 	bl	8001fd0 <ConsoleIoSendString>
					}
					found = cmdIndex;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	e002      	b.n	80012cc <ConsoleProcess+0xcc>
				}
				else
				{
					cmdIndex++;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	4613      	mov	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	461a      	mov	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4413      	add	r3, r2
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <ConsoleProcess+0xea>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d0b2      	beq.n	8001250 <ConsoleProcess+0x50>
				}
			}
			if (found == NOT_FOUND)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d105      	bne.n	80012fe <ConsoleProcess+0xfe>
			{
				ConsoleIoSendString("Command not found: ");
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <ConsoleProcess+0x128>)
 80012f4:	f000 fe6c 	bl	8001fd0 <ConsoleIoSendString>
				ConsoleIoSendString((char*)mReceiveBuffer);
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <ConsoleProcess+0x114>)
 80012fa:	f000 fe69 	bl	8001fd0 <ConsoleIoSendString>

			}
			ConsoleIoSendString(STR_ENDLINE);
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <ConsoleProcess+0x118>)
 8001300:	f000 fe66 	bl	8001fd0 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <ConsoleProcess+0x11c>)
 8001306:	f000 fe63 	bl	8001fd0 <ConsoleIoSendString>

			break;
 800130a:	e000      	b.n	800130e <ConsoleProcess+0x10e>
		case CONSOLE_BUFFER_FULL:

		break;
 800130c:	bf00      	nop
	}

}
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000304 	.word	0x20000304
 8001318:	0800dbcc 	.word	0x0800dbcc
 800131c:	0800dbd0 	.word	0x0800dbd0
 8001320:	0800dbd4 	.word	0x0800dbd4
 8001324:	0800dbdc 	.word	0x0800dbdc
 8001328:	0800dbe4 	.word	0x0800dbe4

0800132c <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	460b      	mov	r3, r1
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001346:	e00b      	b.n	8001360 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	4413      	add	r3, r2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b20      	cmp	r3, #32
 8001352:	d102      	bne.n	800135a <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	3301      	adds	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001360:	7afb      	ldrb	r3, [r7, #11]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	429a      	cmp	r2, r3
 8001366:	d002      	beq.n	800136e <ConsoleParamFindN+0x42>
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b63      	cmp	r3, #99	; 0x63
 800136c:	d9ec      	bls.n	8001348 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	2b64      	cmp	r3, #100	; 0x64
 8001372:	d102      	bne.n	800137a <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001374:	2310      	movs	r3, #16
 8001376:	75fb      	strb	r3, [r7, #23]
 8001378:	e002      	b.n	8001380 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	601a      	str	r2, [r3, #0]
	}
	return result;
 8001380:	7dfb      	ldrb	r3, [r7, #23]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b08a      	sub	sp, #40	; 0x28
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	460b      	mov	r3, r1
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80013a0:	f107 021c 	add.w	r2, r7, #28
 80013a4:	7afb      	ldrb	r3, [r7, #11]
 80013a6:	4619      	mov	r1, r3
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff ffbf 	bl	800132c <ConsoleParamFindN>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	4413      	add	r3, r2
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 80013c8:	e011      	b.n	80013ee <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 80013ca:	f107 0214 	add.w	r2, r7, #20
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	4413      	add	r3, r2
 80013d2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80013d6:	701a      	strb	r2, [r3, #0]
		i++;
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	3301      	adds	r3, #1
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	4413      	add	r3, r2
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 80013ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 80013f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013fa:	2b20      	cmp	r3, #32
 80013fc:	d002      	beq.n	8001404 <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	2b07      	cmp	r3, #7
 8001402:	d9e2      	bls.n	80013ca <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	2b08      	cmp	r3, #8
 8001408:	d102      	bne.n	8001410 <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 800140a:	2310      	movs	r3, #16
 800140c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8001410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001414:	2b00      	cmp	r3, #0
 8001416:	d11a      	bne.n	800144e <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8001418:	f107 0214 	add.w	r2, r7, #20
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fbb9 	bl	8002ba0 <isNumber>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d009      	beq.n	8001448 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4618      	mov	r0, r3
 800143a:	f008 fc47 	bl	8009ccc <atoi>
 800143e:	4603      	mov	r3, r0
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	801a      	strh	r2, [r3, #0]
 8001446:	e002      	b.n	800144e <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 8001448:	2310      	movs	r3, #16
 800144a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	return result;
 800144e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001452:	4618      	mov	r0, r3
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fdb4 	bl	8001fd0 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fda7 	bl	8001fd0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <ConsoleSendLine+0x20>)
 8001484:	f000 fda4 	bl	8001fd0 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	0800dbcc 	.word	0x0800dbcc

08001498 <displayTask>:
	CONSOLE_COMMAND_TABLE_END // must be LAST
};


static void displayTask(uint8_t id)
{
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b0a6      	sub	sp, #152	; 0x98
 800149c:	af04      	add	r7, sp, #16
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	char msg[120];
	taskItem_t *task;
	task = taskGet(id);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fc5b 	bl	8003d60 <taskGet>
 80014aa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	sprintf(msg,"Task: %d - %s\n\tColour: %#08x\n\tDefault Min Time: %i\n\tDefault Max Time: %i\n",id,task->name,(unsigned int)task->colour,task->defaultMinTime,task->defaultMaxTime);
 80014ae:	79f9      	ldrb	r1, [r7, #7]
 80014b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014b4:	1c5c      	adds	r4, r3, #1
 80014b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80014c0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80014c2:	4615      	mov	r5, r2
 80014c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80014c8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80014ca:	f107 000c 	add.w	r0, r7, #12
 80014ce:	9202      	str	r2, [sp, #8]
 80014d0:	9501      	str	r5, [sp, #4]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4623      	mov	r3, r4
 80014d6:	460a      	mov	r2, r1
 80014d8:	4905      	ldr	r1, [pc, #20]	; (80014f0 <displayTask+0x58>)
 80014da:	f009 f997 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ffc6 	bl	8001474 <ConsoleSendLine>
}
 80014e8:	bf00      	nop
 80014ea:	3788      	adds	r7, #136	; 0x88
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bdb0      	pop	{r4, r5, r7, pc}
 80014f0:	0800dc60 	.word	0x0800dc60

080014f4 <ConsoleCommandTaskSet>:

static eCommandResult_T ConsoleCommandTaskSet(const char buffer[])
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

	// get the task Id to set
	int16_t taskId;
	if (COMMAND_SUCCESS != ConsoleReceiveParamInt16(buffer, 1, &taskId))
 80014fc:	f107 030e 	add.w	r3, r7, #14
 8001500:	461a      	mov	r2, r3
 8001502:	2101      	movs	r1, #1
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff42 	bl	800138e <ConsoleReceiveParamInt16>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <ConsoleCommandTaskSet+0x20>
	{
		return COMMAND_PARAMETER_ERROR;
 8001510:	2310      	movs	r3, #16
 8001512:	e009      	b.n	8001528 <ConsoleCommandTaskSet+0x34>
	}
	// Show the current face info
	displayTask(taskId);
 8001514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ffbc 	bl	8001498 <displayTask>
	ConsoleSendLine("Edit:\n\t1. Set Name\n\t2. Set Colour\n\t3. Set Task");
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <ConsoleCommandTaskSet+0x3c>)
 8001522:	f7ff ffa7 	bl	8001474 <ConsoleSendLine>




	return COMMAND_SUCCESS;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	0800dcac 	.word	0x0800dcac

08001534 <ConsoleCommandTaskQuery>:
static eCommandResult_T ConsoleCommandTaskQuery(const char buffer[])
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	uint32_t param1;

	if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &param1))
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	461a      	mov	r2, r3
 8001542:	2101      	movs	r1, #1
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fef1 	bl	800132c <ConsoleParamFindN>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00d      	beq.n	800156c <ConsoleCommandTaskQuery+0x38>
	{
		// List all tasks
		for (uint8_t f=0;f<TASK_COUNT_MAX;f++)
 8001550:	2300      	movs	r3, #0
 8001552:	75fb      	strb	r3, [r7, #23]
 8001554:	e006      	b.n	8001564 <ConsoleCommandTaskQuery+0x30>
		{
			displayTask(f);
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff9d 	bl	8001498 <displayTask>
		for (uint8_t f=0;f<TASK_COUNT_MAX;f++)
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	3301      	adds	r3, #1
 8001562:	75fb      	strb	r3, [r7, #23]
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b13      	cmp	r3, #19
 8001568:	d9f5      	bls.n	8001556 <ConsoleCommandTaskQuery+0x22>
 800156a:	e019      	b.n	80015a0 <ConsoleCommandTaskQuery+0x6c>
		}
	}
	else
	{
		int16_t taskId;
		ConsoleReceiveParamInt16(buffer, 1, &taskId );
 800156c:	f107 030e 	add.w	r3, r7, #14
 8001570:	461a      	mov	r2, r3
 8001572:	2101      	movs	r1, #1
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff0a 	bl	800138e <ConsoleReceiveParamInt16>

		if (taskId < 0 || taskId > FACE_COUNT-1)
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db03      	blt.n	800158a <ConsoleCommandTaskQuery+0x56>
 8001582:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001586:	2b0b      	cmp	r3, #11
 8001588:	dd04      	ble.n	8001594 <ConsoleCommandTaskQuery+0x60>
		{
			ConsoleSendLine("Invalid Task number");
 800158a:	4808      	ldr	r0, [pc, #32]	; (80015ac <ConsoleCommandTaskQuery+0x78>)
 800158c:	f7ff ff72 	bl	8001474 <ConsoleSendLine>
			return COMMAND_PARAMETER_ERROR;
 8001590:	2310      	movs	r3, #16
 8001592:	e006      	b.n	80015a2 <ConsoleCommandTaskQuery+0x6e>
		}

		displayTask(taskId);
 8001594:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff7c 	bl	8001498 <displayTask>

	}
	return COMMAND_SUCCESS;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	0800dcdc 	.word	0x0800dcdc

080015b0 <ConsoleCommandFaceUpQuery>:


static eCommandResult_T ConsoleCommandFaceUpQuery(const char buffer[])
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b0a5      	sub	sp, #148	; 0x94
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	6078      	str	r0, [r7, #4]
	IGNORE_UNUSED_VARIABLE(buffer);
	MPU6050_t data;
	uint8_t face;
	char msg[30];
	for (uint8_t cnt=0;cnt<20;cnt++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80015be:	e00a      	b.n	80015d6 <ConsoleCommandFaceUpQuery+0x26>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 80015c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4831      	ldr	r0, [pc, #196]	; (800168c <ConsoleCommandFaceUpQuery+0xdc>)
 80015c8:	f000 ff0e 	bl	80023e8 <MPU6050_Read_All>
	for (uint8_t cnt=0;cnt<20;cnt++)
 80015cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015d0:	3301      	adds	r3, #1
 80015d2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80015d6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015da:	2b13      	cmp	r3, #19
 80015dc:	d9f0      	bls.n	80015c0 <ConsoleCommandFaceUpQuery+0x10>
	}


	sprintf(msg,"Angle X: %f Y: %f",data.KalmanAngleX, data.KalmanAngleY);
 80015de:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80015e2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015e6:	f107 0408 	add.w	r4, r7, #8
 80015ea:	e9cd 2300 	strd	r2, r3, [sp]
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4927      	ldr	r1, [pc, #156]	; (8001690 <ConsoleCommandFaceUpQuery+0xe0>)
 80015f4:	4620      	mov	r0, r4
 80015f6:	f009 f909 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff38 	bl	8001474 <ConsoleSendLine>

	face = detectFace(data.KalmanAngleX, data.KalmanAngleY);
 8001604:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001608:	ed97 6b1e 	vldr	d6, [r7, #120]	; 0x78
 800160c:	eeb0 1a46 	vmov.f32	s2, s12
 8001610:	eef0 1a66 	vmov.f32	s3, s13
 8001614:	eeb0 0a47 	vmov.f32	s0, s14
 8001618:	eef0 0a67 	vmov.f32	s1, s15
 800161c:	f001 fbbe 	bl	8002d9c <detectFace>
 8001620:	4603      	mov	r3, r0
 8001622:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	uint32_t rgb_color = hsl_to_rgb((face*30), 255, 127);
 8001626:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800162a:	461a      	mov	r2, r3
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	227f      	movs	r2, #127	; 0x7f
 8001636:	21ff      	movs	r1, #255	; 0xff
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fde1 	bl	8004200 <hsl_to_rgb>
 800163e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	ledAllOff();
 8001642:	f001 fb13 	bl	8002c6c <ledAllOff>
	ledSetFaceColour(face, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800164a:	0c1b      	lsrs	r3, r3, #16
 800164c:	b2d9      	uxtb	r1, r3
 800164e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b2da      	uxtb	r2, r3
 8001656:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f897 0086 	ldrb.w	r0, [r7, #134]	; 0x86
 8001660:	f001 fb21 	bl	8002ca6 <ledSetFaceColour>
	ledRender();
 8001664:	f001 fb19 	bl	8002c9a <ledRender>

	sprintf(msg,"Detected face %i is up",face);
 8001668:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4908      	ldr	r1, [pc, #32]	; (8001694 <ConsoleCommandFaceUpQuery+0xe4>)
 8001672:	4618      	mov	r0, r3
 8001674:	f009 f8ca 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fef9 	bl	8001474 <ConsoleSendLine>

	return COMMAND_SUCCESS;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	378c      	adds	r7, #140	; 0x8c
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	200003d8 	.word	0x200003d8
 8001690:	0800dcf0 	.word	0x0800dcf0
 8001694:	0800dd04 	.word	0x0800dd04

08001698 <ConsoleCommandLEDSet>:

static eCommandResult_T ConsoleCommandLEDSet(const char buffer[])
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	uint32_t startIndex;
	eCommandResult_T result;
	int16_t faceNumber;
	result = ConsoleParamFindN(buffer,1,&startIndex);
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	461a      	mov	r2, r3
 80016a6:	2101      	movs	r1, #1
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff fe3f 	bl	800132c <ConsoleParamFindN>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <ConsoleCommandLEDSet+0x24>
		return result;
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	e066      	b.n	800178a <ConsoleCommandLEDSet+0xf2>

	uint8_t command = buffer[startIndex];
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	75bb      	strb	r3, [r7, #22]
	switch (command)
 80016c6:	7dbb      	ldrb	r3, [r7, #22]
 80016c8:	2b6f      	cmp	r3, #111	; 0x6f
 80016ca:	d053      	beq.n	8001774 <ConsoleCommandLEDSet+0xdc>
 80016cc:	2b6f      	cmp	r3, #111	; 0x6f
 80016ce:	dc59      	bgt.n	8001784 <ConsoleCommandLEDSet+0xec>
 80016d0:	2b64      	cmp	r3, #100	; 0x64
 80016d2:	d054      	beq.n	800177e <ConsoleCommandLEDSet+0xe6>
 80016d4:	2b66      	cmp	r3, #102	; 0x66
 80016d6:	d155      	bne.n	8001784 <ConsoleCommandLEDSet+0xec>
	{
		case 'f':

			result = ConsoleReceiveParamInt16(buffer, 2, &faceNumber);
 80016d8:	f107 030e 	add.w	r3, r7, #14
 80016dc:	461a      	mov	r2, r3
 80016de:	2102      	movs	r1, #2
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fe54 	bl	800138e <ConsoleReceiveParamInt16>
 80016e6:	4603      	mov	r3, r0
 80016e8:	75fb      	strb	r3, [r7, #23]
			if (result != COMMAND_SUCCESS)
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <ConsoleCommandLEDSet+0x62>
			{
				ConsoleSendLine("Invalid Face ID");
 80016f0:	4828      	ldr	r0, [pc, #160]	; (8001794 <ConsoleCommandLEDSet+0xfc>)
 80016f2:	f7ff febf 	bl	8001474 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 80016f6:	2310      	movs	r3, #16
 80016f8:	e047      	b.n	800178a <ConsoleCommandLEDSet+0xf2>
			}

			if (faceNumber >= PIXEL_RINGS)
 80016fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016fe:	2b0b      	cmp	r3, #11
 8001700:	dd04      	ble.n	800170c <ConsoleCommandLEDSet+0x74>
			{
				ConsoleSendLine("Invalid Face ID - Must be Zero Index");
 8001702:	4825      	ldr	r0, [pc, #148]	; (8001798 <ConsoleCommandLEDSet+0x100>)
 8001704:	f7ff feb6 	bl	8001474 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001708:	2310      	movs	r3, #16
 800170a:	e03e      	b.n	800178a <ConsoleCommandLEDSet+0xf2>
			}


			result = ConsoleParamFindN(buffer,3,&startIndex);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	461a      	mov	r2, r3
 8001712:	2103      	movs	r1, #3
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fe09 	bl	800132c <ConsoleParamFindN>
 800171a:	4603      	mov	r3, r0
 800171c:	75fb      	strb	r3, [r7, #23]
			uint8_t colour = buffer[startIndex];
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	757b      	strb	r3, [r7, #21]
			if ('r' == colour)
 8001728:	7d7b      	ldrb	r3, [r7, #21]
 800172a:	2b72      	cmp	r3, #114	; 0x72
 800172c:	d108      	bne.n	8001740 <ConsoleCommandLEDSet+0xa8>
				ledSetFaceColour(faceNumber,0xAA,00,0);
 800172e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001732:	b2d8      	uxtb	r0, r3
 8001734:	2300      	movs	r3, #0
 8001736:	2200      	movs	r2, #0
 8001738:	21aa      	movs	r1, #170	; 0xaa
 800173a:	f001 fab4 	bl	8002ca6 <ledSetFaceColour>
 800173e:	e016      	b.n	800176e <ConsoleCommandLEDSet+0xd6>
			else if ('g' == colour)
 8001740:	7d7b      	ldrb	r3, [r7, #21]
 8001742:	2b67      	cmp	r3, #103	; 0x67
 8001744:	d108      	bne.n	8001758 <ConsoleCommandLEDSet+0xc0>
				ledSetFaceColour(faceNumber,0x0,0xAA,0);
 8001746:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800174a:	b2d8      	uxtb	r0, r3
 800174c:	2300      	movs	r3, #0
 800174e:	22aa      	movs	r2, #170	; 0xaa
 8001750:	2100      	movs	r1, #0
 8001752:	f001 faa8 	bl	8002ca6 <ledSetFaceColour>
 8001756:	e00a      	b.n	800176e <ConsoleCommandLEDSet+0xd6>
			else if ('b' == colour)
 8001758:	7d7b      	ldrb	r3, [r7, #21]
 800175a:	2b62      	cmp	r3, #98	; 0x62
 800175c:	d107      	bne.n	800176e <ConsoleCommandLEDSet+0xd6>
				ledSetFaceColour(faceNumber,0x0,0x0,0xAA);
 800175e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001762:	b2d8      	uxtb	r0, r3
 8001764:	23aa      	movs	r3, #170	; 0xaa
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	f001 fa9c 	bl	8002ca6 <ledSetFaceColour>

			ledRender();
 800176e:	f001 fa94 	bl	8002c9a <ledRender>

			break;
 8001772:	e009      	b.n	8001788 <ConsoleCommandLEDSet+0xf0>
		case 'o':
			ledAllOff();
 8001774:	f001 fa7a 	bl	8002c6c <ledAllOff>
			ledRender();
 8001778:	f001 fa8f 	bl	8002c9a <ledRender>
			break;
 800177c:	e004      	b.n	8001788 <ConsoleCommandLEDSet+0xf0>
		case'd':
				ledDance();
 800177e:	f001 fabe 	bl	8002cfe <ledDance>
			break;
 8001782:	e001      	b.n	8001788 <ConsoleCommandLEDSet+0xf0>
		default :
			return CONSOLE_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <ConsoleCommandLEDSet+0xf2>
			break;
	}


	return CONSOLE_SUCCESS;
 8001788:	2300      	movs	r3, #0

}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	0800dd1c 	.word	0x0800dd1c
 8001798:	0800dd2c 	.word	0x0800dd2c

0800179c <ConsoleCommandMemTest>:

static eCommandResult_T ConsoleCommandMemTest(const char buffer[])
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
//
//	HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, 1);
//	Temp = (temp0 << 16) | (temp1 << 8) | temp2;
//	sprintf(msg,"Flash Mem Id \t%#02x %#02x %#02x %#02x %#02x %#02x %#02x %#02x ",id[0],id[1],id[2],id[3],id[4],id[5],id[6],id[7]);
//	ConsoleSendLine(msg);
	ConsoleSendLine("Commented out");
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <ConsoleCommandMemTest+0x18>)
 80017a6:	f7ff fe65 	bl	8001474 <ConsoleSendLine>
	return CONSOLE_SUCCESS;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	0800dd54 	.word	0x0800dd54

080017b8 <ConsoleCommandCPUQuery>:

static eCommandResult_T ConsoleCommandCPUQuery(const char buffer[])
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

	char msg[30];
	register int SP __asm("r13");


	sprintf(msg,"-- CPU Details --");
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	492b      	ldr	r1, [pc, #172]	; (8001874 <ConsoleCommandCPUQuery+0xbc>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f009 f820 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fe4f 	bl	8001474 <ConsoleSendLine>

	sprintf(msg,"Stack Pointer \t\t%#08x",SP);
 80017d6:	466a      	mov	r2, sp
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4926      	ldr	r1, [pc, #152]	; (8001878 <ConsoleCommandCPUQuery+0xc0>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f009 f814 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fe43 	bl	8001474 <ConsoleSendLine>

	unsigned int* HP = malloc(1);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f008 fa9a 	bl	8009d28 <malloc>
 80017f4:	4603      	mov	r3, r0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	*HP=0xAB;
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	22ab      	movs	r2, #171	; 0xab
 80017fc:	601a      	str	r2, [r3, #0]

	sprintf(msg,"Heap Pointer \t\t%#08x",(unsigned int)HP-1);
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	491d      	ldr	r1, [pc, #116]	; (800187c <ConsoleCommandCPUQuery+0xc4>)
 8001808:	4618      	mov	r0, r3
 800180a:	f008 ffff 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fe2e 	bl	8001474 <ConsoleSendLine>
	free(HP);
 8001818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800181a:	f008 fa8d 	bl	8009d38 <free>
//	ConsoleSendLine(msg);

//	sprintf(msg,"Un-initialised global variable \t\t%#08x",(unsigned int)&uninitGlobalVar);
//	ConsoleSendLine(msg);

	sprintf(msg,"Const variable \t\t%#08x",(unsigned int)&constVar);
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <ConsoleCommandCPUQuery+0xc8>)
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4917      	ldr	r1, [pc, #92]	; (8001884 <ConsoleCommandCPUQuery+0xcc>)
 8001826:	4618      	mov	r0, r3
 8001828:	f008 fff0 	bl	800a80c <siprintf>
		ConsoleSendLine(msg);
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fe1f 	bl	8001474 <ConsoleSendLine>

	sprintf(msg,"Static variable \t\t%#08x",(unsigned int)&staticVar);
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <ConsoleCommandCPUQuery+0xd0>)
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4913      	ldr	r1, [pc, #76]	; (800188c <ConsoleCommandCPUQuery+0xd4>)
 800183e:	4618      	mov	r0, r3
 8001840:	f008 ffe4 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe13 	bl	8001474 <ConsoleSendLine>

	sprintf(msg,"Function variable \t\t%#08x",(unsigned int)&funcVar);
 800184e:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	490e      	ldr	r1, [pc, #56]	; (8001890 <ConsoleCommandCPUQuery+0xd8>)
 8001858:	4618      	mov	r0, r3
 800185a:	f008 ffd7 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fe06 	bl	8001474 <ConsoleSendLine>

	return CONSOLE_SUCCESS;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3730      	adds	r7, #48	; 0x30
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	0800dd64 	.word	0x0800dd64
 8001878:	0800dd78 	.word	0x0800dd78
 800187c:	0800dd90 	.word	0x0800dd90
 8001880:	0800e128 	.word	0x0800e128
 8001884:	0800dda8 	.word	0x0800dda8
 8001888:	20000368 	.word	0x20000368
 800188c:	0800ddc0 	.word	0x0800ddc0
 8001890:	0800ddd8 	.word	0x0800ddd8

08001894 <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af02      	add	r7, sp, #8
 800189a:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	461a      	mov	r2, r3
 80018a2:	2101      	movs	r1, #1
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fd41 	bl	800132c <ConsoleParamFindN>
 80018aa:	4603      	mov	r3, r0
 80018ac:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 80018ae:	7ffb      	ldrb	r3, [r7, #31]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 80018b4:	2310      	movs	r3, #16
 80018b6:	e049      	b.n	800194c <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	18d0      	adds	r0, r2, r3
 80018be:	f107 0114 	add.w	r1, r7, #20
 80018c2:	f107 0218 	add.w	r2, r7, #24
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	460b      	mov	r3, r1
 80018ce:	4921      	ldr	r1, [pc, #132]	; (8001954 <ConsoleCommandDateSet+0xc0>)
 80018d0:	f008 ffbc 	bl	800a84c <siscanf>

	if (!IS_RTC_DATE(day) )
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <ConsoleCommandDateSet+0x4c>
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	2b1f      	cmp	r3, #31
 80018de:	d904      	bls.n	80018ea <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 80018e0:	481d      	ldr	r0, [pc, #116]	; (8001958 <ConsoleCommandDateSet+0xc4>)
 80018e2:	f7ff fdc7 	bl	8001474 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80018e6:	2310      	movs	r3, #16
 80018e8:	e030      	b.n	800194c <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <ConsoleCommandDateSet+0x62>
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d904      	bls.n	8001900 <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 80018f6:	4819      	ldr	r0, [pc, #100]	; (800195c <ConsoleCommandDateSet+0xc8>)
 80018f8:	f7ff fdbc 	bl	8001474 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80018fc:	2310      	movs	r3, #16
 80018fe:	e025      	b.n	800194c <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b63      	cmp	r3, #99	; 0x63
 8001904:	d904      	bls.n	8001910 <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8001906:	4816      	ldr	r0, [pc, #88]	; (8001960 <ConsoleCommandDateSet+0xcc>)
 8001908:	f7ff fdb4 	bl	8001474 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 800190c:	2310      	movs	r3, #16
 800190e:	e01d      	b.n	800194c <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 8001922:	2307      	movs	r3, #7
 8001924:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	2200      	movs	r2, #0
 800192c:	4619      	mov	r1, r3
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <ConsoleCommandDateSet+0xd0>)
 8001930:	f005 fe2c 	bl	800758c <HAL_RTC_SetDate>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d004      	beq.n	8001944 <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 800193a:	480b      	ldr	r0, [pc, #44]	; (8001968 <ConsoleCommandDateSet+0xd4>)
 800193c:	f7ff fd9a 	bl	8001474 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001940:	2310      	movs	r3, #16
 8001942:	e003      	b.n	800194c <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8001944:	4809      	ldr	r0, [pc, #36]	; (800196c <ConsoleCommandDateSet+0xd8>)
 8001946:	f7ff fd95 	bl	8001474 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 800194a:	2300      	movs	r3, #0
	}
}
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	0800ddf4 	.word	0x0800ddf4
 8001958:	0800de00 	.word	0x0800de00
 800195c:	0800de24 	.word	0x0800de24
 8001960:	0800de48 	.word	0x0800de48
 8001964:	2000042c 	.word	0x2000042c
 8001968:	0800de6c 	.word	0x0800de6c
 800196c:	0800de90 	.word	0x0800de90

08001970 <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af02      	add	r7, sp, #8
 8001976:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	461a      	mov	r2, r3
 800197e:	2101      	movs	r1, #1
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fcd3 	bl	800132c <ConsoleParamFindN>
 8001986:	4603      	mov	r3, r0
 8001988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 800198c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 8001994:	2310      	movs	r3, #16
 8001996:	e041      	b.n	8001a1c <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	18d0      	adds	r0, r2, r3
 800199e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	460b      	mov	r3, r1
 80019ae:	491d      	ldr	r1, [pc, #116]	; (8001a24 <ConsoleCommandTimeSet+0xb4>)
 80019b0:	f008 ff4c 	bl	800a84c <siscanf>

	if (!IS_RTC_MINUTES(min) )
 80019b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b6:	2b3b      	cmp	r3, #59	; 0x3b
 80019b8:	d904      	bls.n	80019c4 <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 80019ba:	481b      	ldr	r0, [pc, #108]	; (8001a28 <ConsoleCommandTimeSet+0xb8>)
 80019bc:	f7ff fd5a 	bl	8001474 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80019c0:	2310      	movs	r3, #16
 80019c2:	e02b      	b.n	8001a1c <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	2b3b      	cmp	r3, #59	; 0x3b
 80019c8:	d904      	bls.n	80019d4 <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 80019ca:	4818      	ldr	r0, [pc, #96]	; (8001a2c <ConsoleCommandTimeSet+0xbc>)
 80019cc:	f7ff fd52 	bl	8001474 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80019d0:	2310      	movs	r3, #16
 80019d2:	e023      	b.n	8001a1c <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	2b17      	cmp	r3, #23
 80019d8:	d904      	bls.n	80019e4 <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 80019da:	4815      	ldr	r0, [pc, #84]	; (8001a30 <ConsoleCommandTimeSet+0xc0>)
 80019dc:	f7ff fd4a 	bl	8001474 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80019e0:	2310      	movs	r3, #16
 80019e2:	e01b      	b.n	8001a1c <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <ConsoleCommandTimeSet+0xc4>)
 8001a00:	f005 fccc 	bl	800739c <HAL_RTC_SetTime>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 8001a0a:	480b      	ldr	r0, [pc, #44]	; (8001a38 <ConsoleCommandTimeSet+0xc8>)
 8001a0c:	f7ff fd32 	bl	8001474 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001a10:	2310      	movs	r3, #16
 8001a12:	e003      	b.n	8001a1c <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Time Set");
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <ConsoleCommandTimeSet+0xcc>)
 8001a16:	f7ff fd2d 	bl	8001474 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001a1a:	2300      	movs	r3, #0
	}
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3730      	adds	r7, #48	; 0x30
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	0800de9c 	.word	0x0800de9c
 8001a28:	0800dea8 	.word	0x0800dea8
 8001a2c:	0800decc 	.word	0x0800decc
 8001a30:	0800def4 	.word	0x0800def4
 8001a34:	2000042c 	.word	0x2000042c
 8001a38:	0800df18 	.word	0x0800df18
 8001a3c:	0800df3c 	.word	0x0800df3c

08001a40 <ConsoleCommandLipoQuery>:


static eCommandResult_T ConsoleCommandLipoQuery(const char buffer[])
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b090      	sub	sp, #64	; 0x40
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	uint16_t voltage;
	uint16_t temp;
	uint16_t version;
	char msg[50];
	lc709203_getCellVoltage(&voltage);
 8001a48:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 f8c4 	bl	8002bda <lc709203_getCellVoltage>
	lc709203_getCellTemp(&temp);
 8001a52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 f8cc 	bl	8002bf4 <lc709203_getCellTemp>
	lc709203_getId(&version);
 8001a5c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 f8d4 	bl	8002c0e <lc709203_getId>

	sprintf(msg,"-- Lipo Cell Details --");
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	4922      	ldr	r1, [pc, #136]	; (8001af4 <ConsoleCommandLipoQuery+0xb4>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f008 fecd 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fcfc 	bl	8001474 <ConsoleSendLine>

	sprintf(msg,"Monitor Version: %d",version);
 8001a7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	491c      	ldr	r1, [pc, #112]	; (8001af8 <ConsoleCommandLipoQuery+0xb8>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f008 fec0 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 8001a8c:	f107 0308 	add.w	r3, r7, #8
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fcef 	bl	8001474 <ConsoleSendLine>

	sprintf(msg,"Cell Voltage: %1.4f v",((double)voltage/1000));
 8001a96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd4b 	bl	8000534 <__aeabi_ui2d>
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <ConsoleCommandLipoQuery+0xbc>)
 8001aa4:	f7fe feea 	bl	800087c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	f107 0008 	add.w	r0, r7, #8
 8001ab0:	4913      	ldr	r1, [pc, #76]	; (8001b00 <ConsoleCommandLipoQuery+0xc0>)
 8001ab2:	f008 feab 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fcda 	bl	8001474 <ConsoleSendLine>

	sprintf(msg,"Cell Temp: %1.2f v",((double)temp/100));
 8001ac0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd36 	bl	8000534 <__aeabi_ui2d>
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <ConsoleCommandLipoQuery+0xc4>)
 8001ace:	f7fe fed5 	bl	800087c <__aeabi_ddiv>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	f107 0008 	add.w	r0, r7, #8
 8001ada:	490b      	ldr	r1, [pc, #44]	; (8001b08 <ConsoleCommandLipoQuery+0xc8>)
 8001adc:	f008 fe96 	bl	800a80c <siprintf>
	ConsoleSendLine(msg);
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fcc5 	bl	8001474 <ConsoleSendLine>



	return COMMAND_SUCCESS;
 8001aea:	2300      	movs	r3, #0

}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3740      	adds	r7, #64	; 0x40
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	0800df48 	.word	0x0800df48
 8001af8:	0800df60 	.word	0x0800df60
 8001afc:	408f4000 	.word	0x408f4000
 8001b00:	0800df74 	.word	0x0800df74
 8001b04:	40590000 	.word	0x40590000
 8001b08:	0800df8c 	.word	0x0800df8c

08001b0c <ConsoleCommandAccelQuery>:
 * @param: Buffer
 * @return: eCommandResult_T
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandAccelQuery(const char buffer[])
{
 8001b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b10:	b0c1      	sub	sp, #260	; 0x104
 8001b12:	af08      	add	r7, sp, #32
 8001b14:	6078      	str	r0, [r7, #4]
	int16_t n;
	MPU6050_t data;
	char msg[100];
	uint32_t paramIndex;
	float rawAveX = 0;
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float rawAveY = 0;
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	float rawAveZ = 0;
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	ConsoleParamFindN(buffer, 1 , &paramIndex);
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	461a      	mov	r2, r3
 8001b34:	2101      	movs	r1, #1
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fbf8 	bl	800132c <ConsoleParamFindN>

	if (0 == paramIndex)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d11a      	bne.n	8001b78 <ConsoleCommandAccelQuery+0x6c>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 8001b42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b46:	4619      	mov	r1, r3
 8001b48:	4899      	ldr	r0, [pc, #612]	; (8001db0 <ConsoleCommandAccelQuery+0x2a4>)
 8001b4a:	f000 fc4d 	bl	80023e8 <MPU6050_Read_All>
		sprintf(msg,"X Angle\t: %f \t\t Y Angle\t: %f\n",data.KalmanAngleX, data.KalmanAngleY);
 8001b4e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001b52:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001b56:	f107 040c 	add.w	r4, r7, #12
 8001b5a:	e9cd 2300 	strd	r2, r3, [sp]
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4994      	ldr	r1, [pc, #592]	; (8001db4 <ConsoleCommandAccelQuery+0x2a8>)
 8001b64:	4620      	mov	r0, r4
 8001b66:	f008 fe51 	bl	800a80c <siprintf>
		ConsoleSendLine(msg);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fc80 	bl	8001474 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e115      	b.n	8001da4 <ConsoleCommandAccelQuery+0x298>
	}


	// Read Raw n Times (Param r n where n = number of reads
	switch (buffer[paramIndex])
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b72      	cmp	r3, #114	; 0x72
 8001b82:	d009      	beq.n	8001b98 <ConsoleCommandAccelQuery+0x8c>
 8001b84:	2b72      	cmp	r3, #114	; 0x72
 8001b86:	dc05      	bgt.n	8001b94 <ConsoleCommandAccelQuery+0x88>
 8001b88:	2b61      	cmp	r3, #97	; 0x61
 8001b8a:	f000 80b0 	beq.w	8001cee <ConsoleCommandAccelQuery+0x1e2>
 8001b8e:	2b6b      	cmp	r3, #107	; 0x6b
 8001b90:	f000 80dd 	beq.w	8001d4e <ConsoleCommandAccelQuery+0x242>
	{
		default:
				return COMMAND_PARAMETER_ERROR;
 8001b94:	2310      	movs	r3, #16
 8001b96:	e105      	b.n	8001da4 <ConsoleCommandAccelQuery+0x298>
		case 'r':
				ConsoleReceiveParamInt16(buffer, 2, &n);
 8001b98:	f107 03ce 	add.w	r3, r7, #206	; 0xce
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fbf4 	bl	800138e <ConsoleReceiveParamInt16>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8001bac:	e052      	b.n	8001c54 <ConsoleCommandAccelQuery+0x148>
				{
					MPU6050_Read_Accel(&I2C_MPU6050, &data);
 8001bae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	487e      	ldr	r0, [pc, #504]	; (8001db0 <ConsoleCommandAccelQuery+0x2a4>)
 8001bb6:	f000 fb73 	bl	80022a0 <MPU6050_Read_Accel>
					rawAveX += data.Accel_X_RAW;
 8001bba:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
					rawAveY += data.Accel_Y_RAW;
 8001bd2:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bde:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be6:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
					rawAveZ += data.Accel_Z_RAW;
 8001bea:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf6:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8001bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfe:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
					sprintf(msg,"RAW:[X:%5i Y:%5i Z:5%i] G:[X:%2f Y:%2f Z:%2f]",data.Accel_X_RAW, data.Accel_Y_RAW,data.Accel_Z_RAW, data.Ax,data.Ay,data.Az);
 8001c02:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8001c06:	469c      	mov	ip, r3
 8001c08:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001c0c:	469e      	mov	lr, r3
 8001c0e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001c18:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001c1c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001c20:	f107 060c 	add.w	r6, r7, #12
 8001c24:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001c2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	4673      	mov	r3, lr
 8001c36:	4662      	mov	r2, ip
 8001c38:	495f      	ldr	r1, [pc, #380]	; (8001db8 <ConsoleCommandAccelQuery+0x2ac>)
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	f008 fde6 	bl	800a80c <siprintf>
					ConsoleSendLine(msg);
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fc15 	bl	8001474 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8001c4a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8001c54:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001c58:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	; 0xce
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	dba6      	blt.n	8001bae <ConsoleCommandAccelQuery+0xa2>
				}
				rawAveX = rawAveX/n;
 8001c60:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c6c:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 8001c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c74:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
				rawAveY = rawAveY/n;
 8001c78:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c84:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 8001c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c8c:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
				rawAveZ = rawAveZ/n;
 8001c90:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8001c94:	ee07 3a90 	vmov	s15, r3
 8001c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c9c:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 8001ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca4:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
				sprintf(msg,"\nRAW Average :[X:%5f Y:%5f Z:5%f]\n",rawAveX,rawAveY,rawAveZ);
 8001ca8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001cac:	f7fe fc64 	bl	8000578 <__aeabi_f2d>
 8001cb0:	4680      	mov	r8, r0
 8001cb2:	4689      	mov	r9, r1
 8001cb4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001cb8:	f7fe fc5e 	bl	8000578 <__aeabi_f2d>
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	460d      	mov	r5, r1
 8001cc0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001cc4:	f7fe fc58 	bl	8000578 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	f107 000c 	add.w	r0, r7, #12
 8001cd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cd4:	e9cd 4500 	strd	r4, r5, [sp]
 8001cd8:	4642      	mov	r2, r8
 8001cda:	464b      	mov	r3, r9
 8001cdc:	4937      	ldr	r1, [pc, #220]	; (8001dbc <ConsoleCommandAccelQuery+0x2b0>)
 8001cde:	f008 fd95 	bl	800a80c <siprintf>
				ConsoleSendLine(msg);
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fbc4 	bl	8001474 <ConsoleSendLine>
				break;
 8001cec:	e059      	b.n	8001da2 <ConsoleCommandAccelQuery+0x296>
		case 'a':
				ConsoleReceiveParamInt16(buffer, 2, &n);
 8001cee:	f107 03ce 	add.w	r3, r7, #206	; 0xce
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fb49 	bl	800138e <ConsoleReceiveParamInt16>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8001d02:	e01d      	b.n	8001d40 <ConsoleCommandAccelQuery+0x234>
				{
					MPU6050_Read_All(&I2C_MPU6050, &data);
 8001d04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4829      	ldr	r0, [pc, #164]	; (8001db0 <ConsoleCommandAccelQuery+0x2a4>)
 8001d0c:	f000 fb6c 	bl	80023e8 <MPU6050_Read_All>
					sprintf(msg,"A:[X:%2f Y:%2f]",data.KalmanAngleX, data.KalmanAngleY);
 8001d10:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001d14:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001d18:	f107 040c 	add.w	r4, r7, #12
 8001d1c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4926      	ldr	r1, [pc, #152]	; (8001dc0 <ConsoleCommandAccelQuery+0x2b4>)
 8001d26:	4620      	mov	r0, r4
 8001d28:	f008 fd70 	bl	800a80c <siprintf>
					ConsoleSendLine(msg);
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fb9f 	bl	8001474 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8001d36:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8001d40:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8001d44:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	; 0xce
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	dbdb      	blt.n	8001d04 <ConsoleCommandAccelQuery+0x1f8>

				}
				break;
 8001d4c:	e029      	b.n	8001da2 <ConsoleCommandAccelQuery+0x296>
		case 'k':
				ConsoleSendLine("--* Kalman Angle *--");
 8001d4e:	481d      	ldr	r0, [pc, #116]	; (8001dc4 <ConsoleCommandAccelQuery+0x2b8>)
 8001d50:	f7ff fb90 	bl	8001474 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8001d5a:	e00a      	b.n	8001d72 <ConsoleCommandAccelQuery+0x266>
				{
					MPU6050_Read_All(&I2C_MPU6050, &data);
 8001d5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d60:	4619      	mov	r1, r3
 8001d62:	4813      	ldr	r0, [pc, #76]	; (8001db0 <ConsoleCommandAccelQuery+0x2a4>)
 8001d64:	f000 fb40 	bl	80023e8 <MPU6050_Read_All>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 8001d68:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8001d72:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8001d76:	2b31      	cmp	r3, #49	; 0x31
 8001d78:	d9f0      	bls.n	8001d5c <ConsoleCommandAccelQuery+0x250>
				}
				sprintf(msg,"[X:%2f Y:%2f]\n",data.KalmanAngleX, data.KalmanAngleY);
 8001d7a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001d7e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001d82:	f107 040c 	add.w	r4, r7, #12
 8001d86:	e9cd 2300 	strd	r2, r3, [sp]
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <ConsoleCommandAccelQuery+0x2bc>)
 8001d90:	4620      	mov	r0, r4
 8001d92:	f008 fd3b 	bl	800a80c <siprintf>
				ConsoleSendLine(msg);
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fb6a 	bl	8001474 <ConsoleSendLine>

			break;
 8001da0:	bf00      	nop
	}

	return COMMAND_SUCCESS;
 8001da2:	2300      	movs	r3, #0



}
 8001da4:	4618      	mov	r0, r3
 8001da6:	37e4      	adds	r7, #228	; 0xe4
 8001da8:	46bd      	mov	sp, r7
 8001daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dae:	bf00      	nop
 8001db0:	200003d8 	.word	0x200003d8
 8001db4:	0800dfa0 	.word	0x0800dfa0
 8001db8:	0800dfc0 	.word	0x0800dfc0
 8001dbc:	0800dff0 	.word	0x0800dff0
 8001dc0:	0800e014 	.word	0x0800e014
 8001dc4:	0800e024 	.word	0x0800e024
 8001dc8:	0800e03c 	.word	0x0800e03c

08001dcc <ConsoleCommandTimeQuery>:


static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b092      	sub	sp, #72	; 0x48
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480f      	ldr	r0, [pc, #60]	; (8001e1c <ConsoleCommandTimeQuery+0x50>)
 8001dde:	f005 fb77 	bl	80074d0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	2200      	movs	r2, #0
 8001de8:	4619      	mov	r1, r3
 8001dea:	480c      	ldr	r0, [pc, #48]	; (8001e1c <ConsoleCommandTimeQuery+0x50>)
 8001dec:	f005 fc52 	bl	8007694 <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001df0:	7b3b      	ldrb	r3, [r7, #12]
 8001df2:	461a      	mov	r2, r3
 8001df4:	7b7b      	ldrb	r3, [r7, #13]
 8001df6:	4619      	mov	r1, r3
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	f107 0020 	add.w	r0, r7, #32
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	460b      	mov	r3, r1
 8001e02:	4907      	ldr	r1, [pc, #28]	; (8001e20 <ConsoleCommandTimeQuery+0x54>)
 8001e04:	f008 fd02 	bl	800a80c <siprintf>
	ConsoleSendString(time);
 8001e08:	f107 0320 	add.w	r3, r7, #32
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fb24 	bl	800145a <ConsoleSendString>
	return COMMAND_SUCCESS;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3740      	adds	r7, #64	; 0x40
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	2000042c 	.word	0x2000042c
 8001e20:	0800e04c 	.word	0x0800e04c

08001e24 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08e      	sub	sp, #56	; 0x38
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2200      	movs	r2, #0
 8001e32:	4619      	mov	r1, r3
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <ConsoleCommandDateQuery+0x44>)
 8001e36:	f005 fc2d 	bl	8007694 <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8001e3a:	7bbb      	ldrb	r3, [r7, #14]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	7b7b      	ldrb	r3, [r7, #13]
 8001e40:	4619      	mov	r1, r3
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	f107 0010 	add.w	r0, r7, #16
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4907      	ldr	r1, [pc, #28]	; (8001e6c <ConsoleCommandDateQuery+0x48>)
 8001e4e:	f008 fcdd 	bl	800a80c <siprintf>
	ConsoleSendString(date);
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff faff 	bl	800145a <ConsoleSendString>
	return COMMAND_SUCCESS;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3730      	adds	r7, #48	; 0x30
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000042c 	.word	0x2000042c
 8001e6c:	0800e064 	.word	0x0800e064

08001e70 <ConsoleCommandHelp>:




static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e01e      	b.n	8001ec4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8001e86:	4914      	ldr	r1, [pc, #80]	; (8001ed8 <ConsoleCommandHelp+0x68>)
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f89a 	bl	8001fd0 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8001e9c:	480f      	ldr	r0, [pc, #60]	; (8001edc <ConsoleCommandHelp+0x6c>)
 8001e9e:	f000 f897 	bl	8001fd0 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	3308      	adds	r3, #8
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <ConsoleCommandHelp+0x68>)
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f88c 	bl	8001fd0 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8001eb8:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <ConsoleCommandHelp+0x70>)
 8001eba:	f000 f889 	bl	8001fd0 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d3db      	bcc.n	8001e86 <ConsoleCommandHelp+0x16>
	}
	return result;
 8001ece:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	0800e12c 	.word	0x0800e12c
 8001edc:	0800e07c 	.word	0x0800e07c
 8001ee0:	0800e080 	.word	0x0800e080

08001ee4 <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8001ef0:	4805      	ldr	r0, [pc, #20]	; (8001f08 <ConsoleCommandVer+0x24>)
 8001ef2:	f000 f86d 	bl	8001fd0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <ConsoleCommandVer+0x28>)
 8001ef8:	f000 f86a 	bl	8001fd0 <ConsoleIoSendString>
	return result;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	0800e084 	.word	0x0800e084
 8001f0c:	0800e080 	.word	0x0800e080

08001f10 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001f14:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <ConsoleCommandsGetTable+0x10>)
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	0800e12c 	.word	0x0800e12c

08001f24 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4909      	ldr	r1, [pc, #36]	; (8001f54 <HAL_UART_RxCpltCallback+0x30>)
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <HAL_UART_RxCpltCallback+0x34>)
 8001f32:	f006 ff32 	bl	8008d9a <HAL_UART_Receive_IT>
    }



    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <HAL_UART_RxCpltCallback+0x30>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b0a      	cmp	r3, #10
 8001f3c:	d005      	beq.n	8001f4a <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_UART_RxCpltCallback+0x30>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <HAL_UART_RxCpltCallback+0x38>)
 8001f46:	f7fe ffe8 	bl	8000f1a <cBuffer_Write>

    }
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200003b4 	.word	0x200003b4
 8001f58:	20000550 	.word	0x20000550
 8001f5c:	200003ac 	.word	0x200003ac

08001f60 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	4906      	ldr	r1, [pc, #24]	; (8001f80 <ConsoleIoInit+0x20>)
 8001f68:	4806      	ldr	r0, [pc, #24]	; (8001f84 <ConsoleIoInit+0x24>)
 8001f6a:	f7fe ffb7 	bl	8000edc <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4905      	ldr	r1, [pc, #20]	; (8001f88 <ConsoleIoInit+0x28>)
 8001f72:	4806      	ldr	r0, [pc, #24]	; (8001f8c <ConsoleIoInit+0x2c>)
 8001f74:	f006 ff11 	bl	8008d9a <HAL_UART_Receive_IT>

	return CONSOLE_SUCCESS;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000036c 	.word	0x2000036c
 8001f84:	200003ac 	.word	0x200003ac
 8001f88:	200003b4 	.word	0x200003b4
 8001f8c:	20000550 	.word	0x20000550

08001f90 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	uint8_t len;




	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 8001f98:	f107 030f 	add.w	r3, r7, #15
 8001f9c:	220d      	movs	r2, #13
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	480a      	ldr	r0, [pc, #40]	; (8001fcc <ConsoleIoReceive+0x3c>)
 8001fa2:	f7fe ffdd 	bl	8000f60 <cBuffer_GetString>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10a      	bne.n	8001fc2 <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len-1]  = 0x0; //Terminate String in C Style
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fdb2 	bl	8002b22 <manageBackSpace>
		return CONSOLE_SUCCESS;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <ConsoleIoReceive+0x34>
	}
	return CONSOLE_NO_STRING;
 8001fc2:	2302      	movs	r3, #2

}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200003ac 	.word	0x200003ac

08001fd0 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7fe f90b 	bl	80001f4 <strlen>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	2364      	movs	r3, #100	; 0x64
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <ConsoleIoSendString+0x28>)
 8001fe8:	f006 fe45 	bl	8008c76 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000550 	.word	0x20000550

08001ffc <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a2e      	ldr	r2, [pc, #184]	; (80020c4 <GetSector+0xc8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d806      	bhi.n	800201e <GetSector+0x22>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002016:	d302      	bcc.n	800201e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e04b      	b.n	80020b6 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <GetSector+0xcc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d806      	bhi.n	8002034 <GetSector+0x38>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a28      	ldr	r2, [pc, #160]	; (80020cc <GetSector+0xd0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d302      	bcc.n	8002034 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800202e:	2301      	movs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e040      	b.n	80020b6 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <GetSector+0xd4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d806      	bhi.n	800204a <GetSector+0x4e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <GetSector+0xd8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d302      	bcc.n	800204a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8002044:	2302      	movs	r3, #2
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e035      	b.n	80020b6 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <GetSector+0xdc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d206      	bcs.n	8002060 <GetSector+0x64>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a21      	ldr	r2, [pc, #132]	; (80020dc <GetSector+0xe0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d302      	bcc.n	8002060 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800205a:	2303      	movs	r3, #3
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e02a      	b.n	80020b6 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <GetSector+0xe4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d206      	bcs.n	8002076 <GetSector+0x7a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <GetSector+0xdc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d902      	bls.n	8002076 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8002070:	2304      	movs	r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e01f      	b.n	80020b6 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <GetSector+0xe8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d206      	bcs.n	800208c <GetSector+0x90>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <GetSector+0xe4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d902      	bls.n	800208c <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8002086:	2305      	movs	r3, #5
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e014      	b.n	80020b6 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <GetSector+0xec>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d206      	bcs.n	80020a2 <GetSector+0xa6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <GetSector+0xe8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d902      	bls.n	80020a2 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 800209c:	2306      	movs	r3, #6
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e009      	b.n	80020b6 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <GetSector+0xf0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d205      	bcs.n	80020b6 <GetSector+0xba>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <GetSector+0xec>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80020b2:	2307      	movs	r3, #7
 80020b4:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	08003ffe 	.word	0x08003ffe
 80020c8:	08007ffe 	.word	0x08007ffe
 80020cc:	08004000 	.word	0x08004000
 80020d0:	0800bffe 	.word	0x0800bffe
 80020d4:	08008000 	.word	0x08008000
 80020d8:	0800ffff 	.word	0x0800ffff
 80020dc:	0800c000 	.word	0x0800c000
 80020e0:	0801ffff 	.word	0x0801ffff
 80020e4:	0803ffff 	.word	0x0803ffff
 80020e8:	0805ffff 	.word	0x0805ffff
 80020ec:	0807ffff 	.word	0x0807ffff

080020f0 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, const uint16_t numberofwords)
{
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8002102:	f002 ff8f 	bl	8005024 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff ff78 	bl	8001ffc <GetSector>
 800210c:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 800211a:	69f8      	ldr	r0, [r7, #28]
 800211c:	f7ff ff6e 	bl	8001ffc <GetSector>
 8002120:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <Flash_Write_Data+0xb8>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <Flash_Write_Data+0xb8>)
 800212a:	2202      	movs	r2, #2
 800212c:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800212e:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <Flash_Write_Data+0xb8>)
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	3301      	adds	r3, #1
 800213c:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <Flash_Write_Data+0xb8>)
 800213e:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4818      	ldr	r0, [pc, #96]	; (80021a8 <Flash_Write_Data+0xb8>)
 8002148:	f003 f8ea 	bl	8005320 <HAL_FLASHEx_Erase>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01f      	beq.n	8002192 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8002152:	f002 ff99 	bl	8005088 <HAL_FLASH_GetError>
 8002156:	4603      	mov	r3, r0
 8002158:	e022      	b.n	80021a0 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	4413      	add	r3, r2
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	461c      	mov	r4, r3
 8002168:	4615      	mov	r5, r2
 800216a:	4622      	mov	r2, r4
 800216c:	462b      	mov	r3, r5
 800216e:	68f9      	ldr	r1, [r7, #12]
 8002170:	2002      	movs	r0, #2
 8002172:	f002 ff03 	bl	8004f7c <HAL_FLASH_Program>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3304      	adds	r3, #4
 8002180:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	3301      	adds	r3, #1
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
 8002188:	e003      	b.n	8002192 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800218a:	f002 ff7d 	bl	8005088 <HAL_FLASH_GetError>
 800218e:	4603      	mov	r3, r0
 8002190:	e006      	b.n	80021a0 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002196:	429a      	cmp	r2, r3
 8002198:	dbdf      	blt.n	800215a <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800219a:	f002 ff65 	bl	8005068 <HAL_FLASH_Lock>

	   return 0;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3728      	adds	r7, #40	; 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bdb0      	pop	{r4, r5, r7, pc}
 80021a8:	200003b8 	.word	0x200003b8

080021ac <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, const uint16_t numberofwords)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
	uint32_t sofar = numberofwords;
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	617b      	str	r3, [r7, #20]
	while (sofar)
 80021be:	e00c      	b.n	80021da <Flash_Read_Data+0x2e>
	{
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3304      	adds	r3, #4
 80021cc:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3304      	adds	r3, #4
 80021d2:	60bb      	str	r3, [r7, #8]
		sofar--;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
	while (sofar)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ef      	bne.n	80021c0 <Flash_Read_Data+0x14>
	}
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b088      	sub	sp, #32
 80021f2:	af04      	add	r7, sp, #16
 80021f4:	6078      	str	r0, [r7, #4]

    // check device ID WHO_AM_I



    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80021f6:	2364      	movs	r3, #100	; 0x64
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	2301      	movs	r3, #1
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	f107 030f 	add.w	r3, r7, #15
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2301      	movs	r3, #1
 8002206:	2275      	movs	r2, #117	; 0x75
 8002208:	21d0      	movs	r1, #208	; 0xd0
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f003 fd86 	bl	8005d1c <HAL_I2C_Mem_Read>

    if (check == 114)  // 0x68 will be returned by the sensor if everything goes well
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	2b72      	cmp	r3, #114	; 0x72
 8002214:	d13d      	bne.n	8002292 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800221a:	2364      	movs	r3, #100	; 0x64
 800221c:	9302      	str	r3, [sp, #8]
 800221e:	2301      	movs	r3, #1
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	f107 030e 	add.w	r3, r7, #14
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	226b      	movs	r2, #107	; 0x6b
 800222c:	21d0      	movs	r1, #208	; 0xd0
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f003 fc7a 	bl	8005b28 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002234:	2307      	movs	r3, #7
 8002236:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002238:	2364      	movs	r3, #100	; 0x64
 800223a:	9302      	str	r3, [sp, #8]
 800223c:	2301      	movs	r3, #1
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	f107 030e 	add.w	r3, r7, #14
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2301      	movs	r3, #1
 8002248:	2219      	movs	r2, #25
 800224a:	21d0      	movs	r1, #208	; 0xd0
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f003 fc6b 	bl	8005b28 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002252:	2300      	movs	r3, #0
 8002254:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002256:	2364      	movs	r3, #100	; 0x64
 8002258:	9302      	str	r3, [sp, #8]
 800225a:	2301      	movs	r3, #1
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	f107 030e 	add.w	r3, r7, #14
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2301      	movs	r3, #1
 8002266:	221c      	movs	r2, #28
 8002268:	21d0      	movs	r1, #208	; 0xd0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f003 fc5c 	bl	8005b28 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002270:	2300      	movs	r3, #0
 8002272:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002274:	2364      	movs	r3, #100	; 0x64
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	2301      	movs	r3, #1
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	f107 030e 	add.w	r3, r7, #14
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2301      	movs	r3, #1
 8002284:	221b      	movs	r2, #27
 8002286:	21d0      	movs	r1, #208	; 0xd0
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f003 fc4d 	bl	8005b28 <HAL_I2C_Mem_Write>
        return 0;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <MPU6050_Init+0xa6>
    }
    return 1;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	0000      	movs	r0, r0
	...

080022a0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af04      	add	r7, sp, #16
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80022aa:	2364      	movs	r3, #100	; 0x64
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	2306      	movs	r3, #6
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	f107 0308 	add.w	r3, r7, #8
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2301      	movs	r3, #1
 80022ba:	223b      	movs	r2, #59	; 0x3b
 80022bc:	21d0      	movs	r1, #208	; 0xd0
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f003 fd2c 	bl	8005d1c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80022c4:	7a3b      	ldrb	r3, [r7, #8]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	7a7b      	ldrb	r3, [r7, #9]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80022d6:	7abb      	ldrb	r3, [r7, #10]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b21a      	sxth	r2, r3
 80022dc:	7afb      	ldrb	r3, [r7, #11]
 80022de:	b21b      	sxth	r3, r3
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b21a      	sxth	r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80022e8:	7b3b      	ldrb	r3, [r7, #12]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	7b7b      	ldrb	r3, [r7, #13]
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b21a      	sxth	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	809a      	strh	r2, [r3, #4]
   // DataStruct->Accel_X_RAW += CAL_X;
   // DataStruct->Accel_Y_RAW += CAL_Y;
  //  DataStruct->Accel_Z_RAW += CAL_Y;


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f927 	bl	8000554 <__aeabi_i2d>
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <MPU6050_Read_Accel+0x140>)
 800230c:	f7fe fab6 	bl	800087c <__aeabi_ddiv>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	6839      	ldr	r1, [r7, #0]
 8002316:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f917 	bl	8000554 <__aeabi_i2d>
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <MPU6050_Read_Accel+0x140>)
 800232c:	f7fe faa6 	bl	800087c <__aeabi_ddiv>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	6839      	ldr	r1, [r7, #0]
 8002336:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f907 	bl	8000554 <__aeabi_i2d>
 8002346:	a322      	add	r3, pc, #136	; (adr r3, 80023d0 <MPU6050_Read_Accel+0x130>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe fa96 	bl	800087c <__aeabi_ddiv>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	e9c1 2306 	strd	r2, r3, [r1, #24]


    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002360:	a31d      	add	r3, pc, #116	; (adr r3, 80023d8 <MPU6050_Read_Accel+0x138>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fe fbd1 	bl	8000b0c <__aeabi_dcmplt>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <MPU6050_Read_Accel+0xde>
 8002370:	6839      	ldr	r1, [r7, #0]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002384:	a314      	add	r3, pc, #80	; (adr r3, 80023d8 <MPU6050_Read_Accel+0x138>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe fbbf 	bl	8000b0c <__aeabi_dcmplt>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <MPU6050_Read_Accel+0x102>
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80023a8:	a30b      	add	r3, pc, #44	; (adr r3, 80023d8 <MPU6050_Read_Accel+0x138>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	f7fe fbad 	bl	8000b0c <__aeabi_dcmplt>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d100      	bne.n	80023ba <MPU6050_Read_Accel+0x11a>


}
 80023b8:	e006      	b.n	80023c8 <MPU6050_Read_Accel+0x128>
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 80023ba:	6839      	ldr	r1, [r7, #0]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	00000000 	.word	0x00000000
 80023d4:	40cc2900 	.word	0x40cc2900
 80023d8:	70a3d70a 	.word	0x70a3d70a
 80023dc:	3fb70a3d 	.word	0x3fb70a3d
 80023e0:	40d00000 	.word	0x40d00000
 80023e4:	00000000 	.word	0x00000000

080023e8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80023e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ec:	b094      	sub	sp, #80	; 0x50
 80023ee:	af04      	add	r7, sp, #16
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80023f4:	2364      	movs	r3, #100	; 0x64
 80023f6:	9302      	str	r3, [sp, #8]
 80023f8:	230e      	movs	r3, #14
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	223b      	movs	r2, #59	; 0x3b
 8002406:	21d0      	movs	r1, #208	; 0xd0
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f003 fc87 	bl	8005d1c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800240e:	7a3b      	ldrb	r3, [r7, #8]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	b21a      	sxth	r2, r3
 8002414:	7a7b      	ldrb	r3, [r7, #9]
 8002416:	b21b      	sxth	r3, r3
 8002418:	4313      	orrs	r3, r2
 800241a:	b21a      	sxth	r2, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002420:	7abb      	ldrb	r3, [r7, #10]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	b21a      	sxth	r2, r3
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	b21b      	sxth	r3, r3
 800242a:	4313      	orrs	r3, r2
 800242c:	b21a      	sxth	r2, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002432:	7b3b      	ldrb	r3, [r7, #12]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	b21a      	sxth	r2, r3
 8002438:	7b7b      	ldrb	r3, [r7, #13]
 800243a:	b21b      	sxth	r3, r3
 800243c:	4313      	orrs	r3, r2
 800243e:	b21a      	sxth	r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002444:	7bbb      	ldrb	r3, [r7, #14]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	b21a      	sxth	r2, r3
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	b21b      	sxth	r3, r3
 800244e:	4313      	orrs	r3, r2
 8002450:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002452:	7c3b      	ldrb	r3, [r7, #16]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b21a      	sxth	r2, r3
 8002458:	7c7b      	ldrb	r3, [r7, #17]
 800245a:	b21b      	sxth	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b21a      	sxth	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002464:	7cbb      	ldrb	r3, [r7, #18]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	b21a      	sxth	r2, r3
 800246a:	7cfb      	ldrb	r3, [r7, #19]
 800246c:	b21b      	sxth	r3, r3
 800246e:	4313      	orrs	r3, r2
 8002470:	b21a      	sxth	r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002476:	7d3b      	ldrb	r3, [r7, #20]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	b21a      	sxth	r2, r3
 800247c:	7d7b      	ldrb	r3, [r7, #21]
 800247e:	b21b      	sxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b21a      	sxth	r2, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	849a      	strh	r2, [r3, #36]	; 0x24

    // Callibrate
	DataStruct->Accel_X_RAW += CAL_X;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248e:	b29b      	uxth	r3, r3
 8002490:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002494:	b29b      	uxth	r3, r3
 8002496:	b21a      	sxth	r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW += CAL_Y;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW += CAL_Y;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 80024bc:	b29b      	uxth	r3, r3
 80024be:	b21a      	sxth	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	809a      	strh	r2, [r3, #4]


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f842 	bl	8000554 <__aeabi_i2d>
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	4bb6      	ldr	r3, [pc, #728]	; (80027b0 <MPU6050_Read_All+0x3c8>)
 80024d6:	f7fe f9d1 	bl	800087c <__aeabi_ddiv>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f832 	bl	8000554 <__aeabi_i2d>
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	4bae      	ldr	r3, [pc, #696]	; (80027b0 <MPU6050_Read_All+0x3c8>)
 80024f6:	f7fe f9c1 	bl	800087c <__aeabi_ddiv>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	6839      	ldr	r1, [r7, #0]
 8002500:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f822 	bl	8000554 <__aeabi_i2d>
 8002510:	a39f      	add	r3, pc, #636	; (adr r3, 8002790 <MPU6050_Read_All+0x3a8>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	f7fe f9b1 	bl	800087c <__aeabi_ddiv>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	6839      	ldr	r1, [r7, #0]
 8002520:	e9c1 2306 	strd	r2, r3, [r1, #24]





    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800252a:	a39b      	add	r3, pc, #620	; (adr r3, 8002798 <MPU6050_Read_All+0x3b0>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fe faec 	bl	8000b0c <__aeabi_dcmplt>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d006      	beq.n	8002548 <MPU6050_Read_All+0x160>
 800253a:	6839      	ldr	r1, [r7, #0]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800254e:	a392      	add	r3, pc, #584	; (adr r3, 8002798 <MPU6050_Read_All+0x3b0>)
 8002550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002554:	f7fe fada 	bl	8000b0c <__aeabi_dcmplt>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d006      	beq.n	800256c <MPU6050_Read_All+0x184>
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002572:	a389      	add	r3, pc, #548	; (adr r3, 8002798 <MPU6050_Read_All+0x3b0>)
 8002574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002578:	f7fe fac8 	bl	8000b0c <__aeabi_dcmplt>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <MPU6050_Read_All+0x1a8>
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9c1 2306 	strd	r2, r3, [r1, #24]


    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002590:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800259c:	eddf 6a85 	vldr	s13, [pc, #532]	; 80027b4 <MPU6050_Read_All+0x3cc>
 80025a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025a4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80027b8 <MPU6050_Read_All+0x3d0>
 80025a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ffcb 	bl	8000554 <__aeabi_i2d>
 80025be:	a378      	add	r3, pc, #480	; (adr r3, 80027a0 <MPU6050_Read_All+0x3b8>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe f95a 	bl	800087c <__aeabi_ddiv>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	6839      	ldr	r1, [r7, #0]
 80025ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ffbb 	bl	8000554 <__aeabi_i2d>
 80025de:	a370      	add	r3, pc, #448	; (adr r3, 80027a0 <MPU6050_Read_All+0x3b8>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fe f94a 	bl	800087c <__aeabi_ddiv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ffab 	bl	8000554 <__aeabi_i2d>
 80025fe:	a368      	add	r3, pc, #416	; (adr r3, 80027a0 <MPU6050_Read_All+0x3b8>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe f93a 	bl	800087c <__aeabi_ddiv>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	6839      	ldr	r1, [r7, #0]
 800260e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002612:	f001 ff21 	bl	8004458 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	4b68      	ldr	r3, [pc, #416]	; (80027bc <MPU6050_Read_All+0x3d4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ff88 	bl	8000534 <__aeabi_ui2d>
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <MPU6050_Read_All+0x3d8>)
 800262a:	f7fe f927 	bl	800087c <__aeabi_ddiv>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002636:	f001 ff0f 	bl	8004458 <HAL_GetTick>
 800263a:	4603      	mov	r3, r0
 800263c:	4a5f      	ldr	r2, [pc, #380]	; (80027bc <MPU6050_Read_All+0x3d4>)
 800263e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002646:	461a      	mov	r2, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800264e:	fb03 f202 	mul.w	r2, r3, r2
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002658:	4619      	mov	r1, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff74 	bl	8000554 <__aeabi_i2d>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	ec43 2b10 	vmov	d0, r2, r3
 8002674:	f00b f8e3 	bl	800d83e <sqrt>
 8002678:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002688:	f7fe fa36 	bl	8000af8 <__aeabi_dcmpeq>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11f      	bne.n	80026d2 <MPU6050_Read_All+0x2ea>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff5b 	bl	8000554 <__aeabi_i2d>
 800269e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026a2:	f7fe f8eb 	bl	800087c <__aeabi_ddiv>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	ec43 2b17 	vmov	d7, r2, r3
 80026ae:	eeb0 0a47 	vmov.f32	s0, s14
 80026b2:	eef0 0a67 	vmov.f32	s1, s15
 80026b6:	f00a ff17 	bl	800d4e8 <atan>
 80026ba:	ec51 0b10 	vmov	r0, r1, d0
 80026be:	a33a      	add	r3, pc, #232	; (adr r3, 80027a8 <MPU6050_Read_All+0x3c0>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd ffb0 	bl	8000628 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80026d0:	e005      	b.n	80026de <MPU6050_Read_All+0x2f6>
    } else {
        roll = 0.0;
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e4:	425b      	negs	r3, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd ff34 	bl	8000554 <__aeabi_i2d>
 80026ec:	4682      	mov	sl, r0
 80026ee:	468b      	mov	fp, r1
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd ff2c 	bl	8000554 <__aeabi_i2d>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	ec43 2b11 	vmov	d1, r2, r3
 8002704:	ec4b ab10 	vmov	d0, sl, fp
 8002708:	f00b f897 	bl	800d83a <atan2>
 800270c:	ec51 0b10 	vmov	r0, r1, d0
 8002710:	a325      	add	r3, pc, #148	; (adr r3, 80027a8 <MPU6050_Read_All+0x3c0>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fd ff87 	bl	8000628 <__aeabi_dmul>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <MPU6050_Read_All+0x3dc>)
 8002728:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800272c:	f7fe f9ee 	bl	8000b0c <__aeabi_dcmplt>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <MPU6050_Read_All+0x364>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <MPU6050_Read_All+0x3e0>)
 8002742:	f7fe fa01 	bl	8000b48 <__aeabi_dcmpgt>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d114      	bne.n	8002776 <MPU6050_Read_All+0x38e>
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <MPU6050_Read_All+0x3e0>)
 8002752:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002756:	f7fe f9f7 	bl	8000b48 <__aeabi_dcmpgt>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d037      	beq.n	80027d0 <MPU6050_Read_All+0x3e8>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <MPU6050_Read_All+0x3dc>)
 800276c:	f7fe f9ce 	bl	8000b0c <__aeabi_dcmplt>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d02c      	beq.n	80027d0 <MPU6050_Read_All+0x3e8>
        KalmanY.angle = pitch;
 8002776:	4915      	ldr	r1, [pc, #84]	; (80027cc <MPU6050_Read_All+0x3e4>)
 8002778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800277c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002786:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800278a:	e036      	b.n	80027fa <MPU6050_Read_All+0x412>
 800278c:	f3af 8000 	nop.w
 8002790:	00000000 	.word	0x00000000
 8002794:	40cc2900 	.word	0x40cc2900
 8002798:	70a3d70a 	.word	0x70a3d70a
 800279c:	3fb70a3d 	.word	0x3fb70a3d
 80027a0:	00000000 	.word	0x00000000
 80027a4:	40606000 	.word	0x40606000
 80027a8:	1a63c1f8 	.word	0x1a63c1f8
 80027ac:	404ca5dc 	.word	0x404ca5dc
 80027b0:	40d00000 	.word	0x40d00000
 80027b4:	43aa0000 	.word	0x43aa0000
 80027b8:	42121eb8 	.word	0x42121eb8
 80027bc:	200003cc 	.word	0x200003cc
 80027c0:	408f4000 	.word	0x408f4000
 80027c4:	c0568000 	.word	0xc0568000
 80027c8:	40568000 	.word	0x40568000
 80027cc:	20000048 	.word	0x20000048
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80027d6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80027da:	eeb0 1a47 	vmov.f32	s2, s14
 80027de:	eef0 1a67 	vmov.f32	s3, s15
 80027e2:	ed97 0b06 	vldr	d0, [r7, #24]
 80027e6:	481e      	ldr	r0, [pc, #120]	; (8002860 <MPU6050_Read_All+0x478>)
 80027e8:	f000 f840 	bl	800286c <Kalman_getAngle>
 80027ec:	eeb0 7a40 	vmov.f32	s14, s0
 80027f0:	eef0 7a60 	vmov.f32	s15, s1
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002800:	4690      	mov	r8, r2
 8002802:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <MPU6050_Read_All+0x47c>)
 800280c:	4640      	mov	r0, r8
 800280e:	4649      	mov	r1, r9
 8002810:	f7fe f99a 	bl	8000b48 <__aeabi_dcmpgt>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <MPU6050_Read_All+0x444>
        DataStruct->Gx = -DataStruct->Gx;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002820:	4614      	mov	r4, r2
 8002822:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002832:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002836:	eeb0 1a47 	vmov.f32	s2, s14
 800283a:	eef0 1a67 	vmov.f32	s3, s15
 800283e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002842:	4809      	ldr	r0, [pc, #36]	; (8002868 <MPU6050_Read_All+0x480>)
 8002844:	f000 f812 	bl	800286c <Kalman_getAngle>
 8002848:	eeb0 7a40 	vmov.f32	s14, s0
 800284c:	eef0 7a60 	vmov.f32	s15, s1
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8002856:	bf00      	nop
 8002858:	3740      	adds	r7, #64	; 0x40
 800285a:	46bd      	mov	sp, r7
 800285c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002860:	20000048 	.word	0x20000048
 8002864:	40568000 	.word	0x40568000
 8002868:	20000000 	.word	0x20000000

0800286c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800286c:	b5b0      	push	{r4, r5, r7, lr}
 800286e:	b096      	sub	sp, #88	; 0x58
 8002870:	af00      	add	r7, sp, #0
 8002872:	61f8      	str	r0, [r7, #28]
 8002874:	ed87 0b04 	vstr	d0, [r7, #16]
 8002878:	ed87 1b02 	vstr	d1, [r7, #8]
 800287c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002886:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800288a:	f7fd fd15 	bl	80002b8 <__aeabi_dsub>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800289c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028a4:	f7fd fec0 	bl	8000628 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4620      	mov	r0, r4
 80028ae:	4629      	mov	r1, r5
 80028b0:	f7fd fd04 	bl	80002bc <__adddf3>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	69f9      	ldr	r1, [r7, #28]
 80028ba:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80028ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028ce:	f7fd feab 	bl	8000628 <__aeabi_dmul>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80028e0:	f7fd fcea 	bl	80002b8 <__aeabi_dsub>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80028f2:	f7fd fce1 	bl	80002b8 <__aeabi_dsub>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f7fd fcda 	bl	80002bc <__adddf3>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002914:	f7fd fe88 	bl	8000628 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4620      	mov	r0, r4
 800291e:	4629      	mov	r1, r5
 8002920:	f7fd fccc 	bl	80002bc <__adddf3>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	69f9      	ldr	r1, [r7, #28]
 800292a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800293a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800293e:	f7fd fe73 	bl	8000628 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4620      	mov	r0, r4
 8002948:	4629      	mov	r1, r5
 800294a:	f7fd fcb5 	bl	80002b8 <__aeabi_dsub>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	69f9      	ldr	r1, [r7, #28]
 8002954:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002968:	f7fd fe5e 	bl	8000628 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4620      	mov	r0, r4
 8002972:	4629      	mov	r1, r5
 8002974:	f7fd fca0 	bl	80002b8 <__aeabi_dsub>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	69f9      	ldr	r1, [r7, #28]
 800297e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800298e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002992:	f7fd fe49 	bl	8000628 <__aeabi_dmul>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4620      	mov	r0, r4
 800299c:	4629      	mov	r1, r5
 800299e:	f7fd fc8d 	bl	80002bc <__adddf3>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	69f9      	ldr	r1, [r7, #28]
 80029a8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029b8:	f7fd fc80 	bl	80002bc <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80029ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029ce:	f7fd ff55 	bl	800087c <__aeabi_ddiv>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80029e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029e4:	f7fd ff4a 	bl	800087c <__aeabi_ddiv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80029f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029fa:	f7fd fc5d 	bl	80002b8 <__aeabi_dsub>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002a0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a14:	f7fd fe08 	bl	8000628 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fc4c 	bl	80002bc <__adddf3>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	69f9      	ldr	r1, [r7, #28]
 8002a2a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002a34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a3c:	f7fd fdf4 	bl	8000628 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4620      	mov	r0, r4
 8002a46:	4629      	mov	r1, r5
 8002a48:	f7fd fc38 	bl	80002bc <__adddf3>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	69f9      	ldr	r1, [r7, #28]
 8002a52:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a5c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002a66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002a70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a78:	f7fd fdd6 	bl	8000628 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4620      	mov	r0, r4
 8002a82:	4629      	mov	r1, r5
 8002a84:	f7fd fc18 	bl	80002b8 <__aeabi_dsub>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	69f9      	ldr	r1, [r7, #28]
 8002a8e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002a98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002aa0:	f7fd fdc2 	bl	8000628 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	4629      	mov	r1, r5
 8002aac:	f7fd fc04 	bl	80002b8 <__aeabi_dsub>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	69f9      	ldr	r1, [r7, #28]
 8002ab6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002ac0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ac4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ac8:	f7fd fdae 	bl	8000628 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd fbf0 	bl	80002b8 <__aeabi_dsub>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	69f9      	ldr	r1, [r7, #28]
 8002ade:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002ae8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002aec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002af0:	f7fd fd9a 	bl	8000628 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fbdc 	bl	80002b8 <__aeabi_dsub>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	69f9      	ldr	r1, [r7, #28]
 8002b06:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b10:	ec43 2b17 	vmov	d7, r2, r3
};
 8002b14:	eeb0 0a47 	vmov.f32	s0, s14
 8002b18:	eef0 0a67 	vmov.f32	s1, s15
 8002b1c:	3758      	adds	r7, #88	; 0x58
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bdb0      	pop	{r4, r5, r7, pc}

08002b22 <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 8002b2e:	217f      	movs	r1, #127	; 0x7f
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f007 fefc 	bl	800a92e <strchr>
 8002b36:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8002b38:	e029      	b.n	8002b8e <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b40:	d106      	bne.n	8002b50 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3301      	adds	r3, #1
 8002b46:	4619      	mov	r1, r3
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f007 fefd 	bl	800a948 <strcpy>
 8002b4e:	e019      	b.n	8002b84 <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b7f      	cmp	r3, #127	; 0x7f
 8002b56:	d109      	bne.n	8002b6c <manageBackSpace+0x4a>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d104      	bne.n	8002b6c <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e00b      	b.n	8002b84 <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b7f      	cmp	r3, #127	; 0x7f
 8002b72:	d107      	bne.n	8002b84 <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1e5a      	subs	r2, r3, #1
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4610      	mov	r0, r2
 8002b80:	f007 fee2 	bl	800a948 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 8002b84:	217f      	movs	r1, #127	; 0x7f
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f007 fed1 	bl	800a92e <strchr>
 8002b8c:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1d1      	bne.n	8002b3a <manageBackSpace+0x18>
		}
}
 8002b96:	bf00      	nop
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 8002ba8:	e00c      	b.n	8002bc4 <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b2f      	cmp	r3, #47	; 0x2f
 8002bb0:	d903      	bls.n	8002bba <isNumber+0x1a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b39      	cmp	r3, #57	; 0x39
 8002bb8:	d901      	bls.n	8002bbe <isNumber+0x1e>
			return 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e007      	b.n	8002bce <isNumber+0x2e>
		string++;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ee      	bne.n	8002baa <isNumber+0xa>
	}
	return 1;
 8002bcc:	2301      	movs	r3, #1
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <lc709203_getCellVoltage>:
 * @param: 16bit pointer to value
 * @return: Error Code
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getCellVoltage(uint16_t *voltage)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_VOLTAGE,voltage);
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	2009      	movs	r0, #9
 8002be6:	f000 f81f 	bl	8002c28 <lc709203_getRegisterValue>
 8002bea:	4603      	mov	r3, r0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <lc709203_getCellTemp>:

eLC709203_Error_t lc709203_getCellTemp(uint16_t *voltage)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_TEMP,voltage);
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	2008      	movs	r0, #8
 8002c00:	f000 f812 	bl	8002c28 <lc709203_getRegisterValue>
 8002c04:	4603      	mov	r3, r0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <lc709203_getId>:

eLC709203_Error_t lc709203_getId(uint16_t *version)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_IC_VERSION,version);
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	2011      	movs	r0, #17
 8002c1a:	f000 f805 	bl	8002c28 <lc709203_getRegisterValue>
 8002c1e:	4603      	mov	r3, r0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <lc709203_getRegisterValue>:
 * @param: value - a 16 bit pointer to the value to be used
 * @return: Error code foe the function
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getRegisterValue (uint8_t reg,uint16_t *value)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af04      	add	r7, sp, #16
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c1, LC709302_ADRESS, reg, 1, (uint8_t*)value, 2, 100);
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	2364      	movs	r3, #100	; 0x64
 8002c3a:	9302      	str	r3, [sp, #8]
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2301      	movs	r3, #1
 8002c46:	2116      	movs	r1, #22
 8002c48:	4807      	ldr	r0, [pc, #28]	; (8002c68 <lc709203_getRegisterValue+0x40>)
 8002c4a:	f003 f867 	bl	8005d1c <HAL_I2C_Mem_Read>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	73fb      	strb	r3, [r7, #15]

	if (result != HAL_OK)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <lc709203_getRegisterValue+0x34>
	{
		return LC798_COMM_ERROR;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e000      	b.n	8002c5e <lc709203_getRegisterValue+0x36>
	}
	else
		return LC798_OK;
 8002c5c:	2301      	movs	r3, #1

}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200003d8 	.word	0x200003d8

08002c6c <ledAllOff>:

#include "ledController.h"
#include "ws2812.h"

void ledAllOff()
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	71fb      	strb	r3, [r7, #7]
 8002c76:	e008      	b.n	8002c8a <ledAllOff+0x1e>
	{
		led_set_RGB(i,0x0,0,0);
 8002c78:	79f8      	ldrb	r0, [r7, #7]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f001 f89e 	bl	8003dc0 <led_set_RGB>
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	3301      	adds	r3, #1
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	2b8f      	cmp	r3, #143	; 0x8f
 8002c8e:	d9f3      	bls.n	8002c78 <ledAllOff+0xc>
	}

}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <ledRender>:

void ledRender()
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	af00      	add	r7, sp, #0
	led_render();
 8002c9e:	f001 f8f7 	bl	8003e90 <led_render>
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <ledSetFaceColour>:

void ledSetFaceColour(uint8_t face, uint8_t red, uint8_t green, uint8_t blue)
{
 8002ca6:	b590      	push	{r4, r7, lr}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4604      	mov	r4, r0
 8002cae:	4608      	mov	r0, r1
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	71bb      	strb	r3, [r7, #6]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	717b      	strb	r3, [r7, #5]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	713b      	strb	r3, [r7, #4]
	uint8_t offset = face * 12;
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	0052      	lsls	r2, r2, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 8002cd0:	7bbb      	ldrb	r3, [r7, #14]
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e008      	b.n	8002ce8 <ledSetFaceColour+0x42>
	{
		led_set_RGB(i,red,green,blue);
 8002cd6:	793b      	ldrb	r3, [r7, #4]
 8002cd8:	797a      	ldrb	r2, [r7, #5]
 8002cda:	79b9      	ldrb	r1, [r7, #6]
 8002cdc:	7bf8      	ldrb	r0, [r7, #15]
 8002cde:	f001 f86f 	bl	8003dc0 <led_set_RGB>
	for (uint8_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]
 8002cea:	f103 020b 	add.w	r2, r3, #11
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	daf0      	bge.n	8002cd6 <ledSetFaceColour+0x30>
	}

}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd90      	pop	{r4, r7, pc}

08002cfe <ledDance>:


void ledDance()
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
	int i=0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
	while (i<10){
 8002d08:	e040      	b.n	8002d8c <ledDance+0x8e>
	 uint8_t angle = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	72fb      	strb	r3, [r7, #11]
	 const uint8_t angle_difference = 11;
 8002d0e:	230b      	movs	r3, #11
 8002d10:	727b      	strb	r3, [r7, #9]
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8002d12:	2300      	movs	r3, #0
 8002d14:	72bb      	strb	r3, [r7, #10]
 8002d16:	e02e      	b.n	8002d76 <ledDance+0x78>
		  // Calculate color
			 HAL_Delay(100);
 8002d18:	2064      	movs	r0, #100	; 0x64
 8002d1a:	f001 fba9 	bl	8004470 <HAL_Delay>
			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8002d1e:	7aba      	ldrb	r2, [r7, #10]
 8002d20:	7a7b      	ldrb	r3, [r7, #9]
 8002d22:	fb12 f303 	smulbb	r3, r2, r3
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	7afb      	ldrb	r3, [r7, #11]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	227f      	movs	r2, #127	; 0x7f
 8002d30:	21ff      	movs	r1, #255	; 0xff
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 fa64 	bl	8004200 <hsl_to_rgb>
 8002d38:	6078      	str	r0, [r7, #4]
			// Set color
			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	b2d9      	uxtb	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	7ab8      	ldrb	r0, [r7, #10]
 8002d4c:	f001 f838 	bl	8003dc0 <led_set_RGB>
			if (i>1)
 8002d50:	7abb      	ldrb	r3, [r7, #10]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d907      	bls.n	8002d66 <ledDance+0x68>
				led_set_RGB(i-1, 0,0,0);
 8002d56:	7abb      	ldrb	r3, [r7, #10]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b2d8      	uxtb	r0, r3
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	f001 f82d 	bl	8003dc0 <led_set_RGB>
			++angle;
 8002d66:	7afb      	ldrb	r3, [r7, #11]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	72fb      	strb	r3, [r7, #11]
			led_render();
 8002d6c:	f001 f890 	bl	8003e90 <led_render>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8002d70:	7abb      	ldrb	r3, [r7, #10]
 8002d72:	3301      	adds	r3, #1
 8002d74:	72bb      	strb	r3, [r7, #10]
 8002d76:	7abb      	ldrb	r3, [r7, #10]
 8002d78:	2b8f      	cmp	r3, #143	; 0x8f
 8002d7a:	d9cd      	bls.n	8002d18 <ledDance+0x1a>

		}
	  HAL_Delay(10);
 8002d7c:	200a      	movs	r0, #10
 8002d7e:	f001 fb77 	bl	8004470 <HAL_Delay>
		// Write to LED
	  ledAllOff();
 8002d82:	f7ff ff73 	bl	8002c6c <ledAllOff>
	  i++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
	while (i<10){
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b09      	cmp	r3, #9
 8002d90:	ddbb      	ble.n	8002d0a <ledDance+0xc>
	}
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <detectFace>:

};


uint8_t detectFace(double x, double y)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	ed87 0b02 	vstr	d0, [r7, #8]
 8002da6:	ed87 1b00 	vstr	d1, [r7]
	uint8_t face;
	for (face=0; face<FACE_COUNT; face++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]
 8002dae:	e05c      	b.n	8002e6a <detectFace+0xce>
	{
		if ( x > faceTable[face].xRTop && x < faceTable[face].xRBottom && y > faceTable[face].yRTop && y < faceTable[face].yRBottom )
 8002db0:	7dfa      	ldrb	r2, [r7, #23]
 8002db2:	4932      	ldr	r1, [pc, #200]	; (8002e7c <detectFace+0xe0>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fbc5 	bl	8000554 <__aeabi_i2d>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dd2:	f7fd feb9 	bl	8000b48 <__aeabi_dcmpgt>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d043      	beq.n	8002e64 <detectFace+0xc8>
 8002ddc:	7dfa      	ldrb	r2, [r7, #23]
 8002dde:	4927      	ldr	r1, [pc, #156]	; (8002e7c <detectFace+0xe0>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	440b      	add	r3, r1
 8002dea:	3304      	adds	r3, #4
 8002dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fbaf 	bl	8000554 <__aeabi_i2d>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dfe:	f7fd fe85 	bl	8000b0c <__aeabi_dcmplt>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02d      	beq.n	8002e64 <detectFace+0xc8>
 8002e08:	7dfa      	ldrb	r2, [r7, #23]
 8002e0a:	491c      	ldr	r1, [pc, #112]	; (8002e7c <detectFace+0xe0>)
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	3306      	adds	r3, #6
 8002e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb99 	bl	8000554 <__aeabi_i2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e2a:	f7fd fe8d 	bl	8000b48 <__aeabi_dcmpgt>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <detectFace+0xc8>
 8002e34:	7dfa      	ldrb	r2, [r7, #23]
 8002e36:	4911      	ldr	r1, [pc, #68]	; (8002e7c <detectFace+0xe0>)
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	440b      	add	r3, r1
 8002e42:	3308      	adds	r3, #8
 8002e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fb83 	bl	8000554 <__aeabi_i2d>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e56:	f7fd fe59 	bl	8000b0c <__aeabi_dcmplt>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <detectFace+0xc8>
			return face;
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	e006      	b.n	8002e72 <detectFace+0xd6>
	for (face=0; face<FACE_COUNT; face++)
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	3301      	adds	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	2b0b      	cmp	r3, #11
 8002e6e:	d99f      	bls.n	8002db0 <detectFace+0x14>
	}
	return -1;
 8002e70:	23ff      	movs	r3, #255	; 0xff
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000090 	.word	0x20000090

08002e80 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <MX_CRC_Init+0x20>)
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <MX_CRC_Init+0x24>)
 8002e88:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002e8a:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <MX_CRC_Init+0x20>)
 8002e8c:	f001 fc25 	bl	80046da <HAL_CRC_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002e96:	f000 fa8b 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200003d0 	.word	0x200003d0
 8002ea4:	40023000 	.word	0x40023000

08002ea8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <HAL_CRC_MspInit+0x3c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10d      	bne.n	8002ed6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_CRC_MspInit+0x40>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_CRC_MspInit+0x40>)
 8002ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <HAL_CRC_MspInit+0x40>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023000 	.word	0x40023000
 8002ee8:	40023800 	.word	0x40023800

08002eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <MX_DMA_Init+0x3c>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <MX_DMA_Init+0x3c>)
 8002efc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <MX_DMA_Init+0x3c>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	2039      	movs	r0, #57	; 0x39
 8002f14:	f001 fbab 	bl	800466e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002f18:	2039      	movs	r0, #57	; 0x39
 8002f1a:	f001 fbc4 	bl	80046a6 <HAL_NVIC_EnableIRQ>

}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800

08002f2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	4b38      	ldr	r3, [pc, #224]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a37      	ldr	r2, [pc, #220]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b35      	ldr	r3, [pc, #212]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a30      	ldr	r2, [pc, #192]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a29      	ldr	r2, [pc, #164]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b27      	ldr	r3, [pc, #156]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a22      	ldr	r2, [pc, #136]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b20      	ldr	r3, [pc, #128]	; (8003028 <MX_GPIO_Init+0xfc>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fb8:	481c      	ldr	r0, [pc, #112]	; (800302c <MX_GPIO_Init+0x100>)
 8002fba:	f002 fc57 	bl	800586c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, GPIO_PIN_RESET);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2110      	movs	r1, #16
 8002fc2:	481b      	ldr	r0, [pc, #108]	; (8003030 <MX_GPIO_Init+0x104>)
 8002fc4:	f002 fc52 	bl	800586c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4812      	ldr	r0, [pc, #72]	; (800302c <MX_GPIO_Init+0x100>)
 8002fe2:	f002 fabf 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_MEM_CS_Pin;
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fea:	2301      	movs	r3, #1
 8002fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8002ff6:	f107 0314 	add.w	r3, r7, #20
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	480c      	ldr	r0, [pc, #48]	; (8003030 <MX_GPIO_Init+0x104>)
 8002ffe:	f002 fab1 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8003002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003008:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800300c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	4806      	ldr	r0, [pc, #24]	; (8003034 <MX_GPIO_Init+0x108>)
 800301a:	f002 faa3 	bl	8005564 <HAL_GPIO_Init>

}
 800301e:	bf00      	nop
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40020800 	.word	0x40020800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020400 	.word	0x40020400

08003038 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <MX_I2C1_Init+0x50>)
 800303e:	4a13      	ldr	r2, [pc, #76]	; (800308c <MX_I2C1_Init+0x54>)
 8003040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <MX_I2C1_Init+0x50>)
 8003044:	4a12      	ldr	r2, [pc, #72]	; (8003090 <MX_I2C1_Init+0x58>)
 8003046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <MX_I2C1_Init+0x50>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <MX_I2C1_Init+0x50>)
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <MX_I2C1_Init+0x50>)
 8003056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800305a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <MX_I2C1_Init+0x50>)
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <MX_I2C1_Init+0x50>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <MX_I2C1_Init+0x50>)
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <MX_I2C1_Init+0x50>)
 8003070:	2200      	movs	r2, #0
 8003072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003074:	4804      	ldr	r0, [pc, #16]	; (8003088 <MX_I2C1_Init+0x50>)
 8003076:	f002 fc13 	bl	80058a0 <HAL_I2C_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003080:	f000 f996 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200003d8 	.word	0x200003d8
 800308c:	40005400 	.word	0x40005400
 8003090:	000186a0 	.word	0x000186a0

08003094 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 0314 	add.w	r3, r7, #20
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a19      	ldr	r2, [pc, #100]	; (8003118 <HAL_I2C_MspInit+0x84>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d12b      	bne.n	800310e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_I2C_MspInit+0x88>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a17      	ldr	r2, [pc, #92]	; (800311c <HAL_I2C_MspInit+0x88>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_I2C_MspInit+0x88>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030d2:	23c0      	movs	r3, #192	; 0xc0
 80030d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030d6:	2312      	movs	r3, #18
 80030d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030de:	2303      	movs	r3, #3
 80030e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030e2:	2304      	movs	r3, #4
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	4619      	mov	r1, r3
 80030ec:	480c      	ldr	r0, [pc, #48]	; (8003120 <HAL_I2C_MspInit+0x8c>)
 80030ee:	f002 fa39 	bl	8005564 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_I2C_MspInit+0x88>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <HAL_I2C_MspInit+0x88>)
 80030fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_I2C_MspInit+0x88>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800310e:	bf00      	nop
 8003110:	3728      	adds	r7, #40	; 0x28
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40005400 	.word	0x40005400
 800311c:	40023800 	.word	0x40023800
 8003120:	40020400 	.word	0x40020400

08003124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b0a7      	sub	sp, #156	; 0x9c
 8003128:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800312a:	f001 f92f 	bl	800438c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800312e:	f000 f8d5 	bl	80032dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003132:	f7ff fefb 	bl	8002f2c <MX_GPIO_Init>
  MX_RTC_Init();
 8003136:	f000 f941 	bl	80033bc <MX_RTC_Init>
  MX_DMA_Init();
 800313a:	f7ff fed7 	bl	8002eec <MX_DMA_Init>
  MX_I2C1_Init();
 800313e:	f7ff ff7b 	bl	8003038 <MX_I2C1_Init>
  MX_TIM1_Init();
 8003142:	f000 fb49 	bl	80037d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003146:	f000 fc75 	bl	8003a34 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800314a:	f000 f989 	bl	8003460 <MX_SPI1_Init>
  MX_CRC_Init();
 800314e:	f7ff fe97 	bl	8002e80 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  ledAllOff();
 8003152:	f7ff fd8b 	bl	8002c6c <ledAllOff>
  sysConfigInit();
 8003156:	f000 fd11 	bl	8003b7c <sysConfigInit>
  systemConfig_t * config = systemConfigGet();
 800315a:	f000 fd2b 	bl	8003bb4 <systemConfigGet>
 800315e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  taskItems_t * taskItems = &config->configItems.tasksConfig;
 8003162:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003166:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  taskInit(taskItems);
 800316a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800316e:	f000 fd91 	bl	8003c94 <taskInit>

  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003172:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <main+0x19c>)
 8003174:	2201      	movs	r2, #1
 8003176:	60da      	str	r2, [r3, #12]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003178:	4b51      	ldr	r3, [pc, #324]	; (80032c0 <main+0x19c>)
 800317a:	2202      	movs	r2, #2
 800317c:	60da      	str	r2, [r3, #12]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800317e:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <main+0x19c>)
 8003180:	2210      	movs	r2, #16
 8003182:	60da      	str	r2, [r3, #12]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003184:	4b4e      	ldr	r3, [pc, #312]	; (80032c0 <main+0x19c>)
 8003186:	2220      	movs	r2, #32
 8003188:	60da      	str	r2, [r3, #12]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800318a:	4b4d      	ldr	r3, [pc, #308]	; (80032c0 <main+0x19c>)
 800318c:	2240      	movs	r2, #64	; 0x40
 800318e:	60da      	str	r2, [r3, #12]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003190:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <main+0x19c>)
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	60da      	str	r2, [r3, #12]

  //if (SYS_CONFIG_BAD_DATA == sysConfigRead())
	  sysConfigRead();
 8003196:	f000 fd45 	bl	8003c24 <sysConfigRead>
  {
	  taskSetDefaultAll();
 800319a:	f000 fd9c 	bl	8003cd6 <taskSetDefaultAll>
	  sysConfigSave();
 800319e:	f000 fd5b 	bl	8003c58 <sysConfigSave>





  ConsoleInit();
 80031a2:	f7fd fff5 	bl	8001190 <ConsoleInit>
  ConsoleSendString("Console Initialised\n");
 80031a6:	4847      	ldr	r0, [pc, #284]	; (80032c4 <main+0x1a0>)
 80031a8:	f7fe f957 	bl	800145a <ConsoleSendString>
  if (MPU6050_Init(&hi2c1) == 1)
 80031ac:	4846      	ldr	r0, [pc, #280]	; (80032c8 <main+0x1a4>)
 80031ae:	f7ff f81e 	bl	80021ee <MPU6050_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d103      	bne.n	80031c0 <main+0x9c>
  {
	  ConsoleSendString("** ERROR Initialising MNP6050!\n");
 80031b8:	4844      	ldr	r0, [pc, #272]	; (80032cc <main+0x1a8>)
 80031ba:	f7fe f94e 	bl	800145a <ConsoleSendString>
 80031be:	e002      	b.n	80031c6 <main+0xa2>
  }
  else
  {
	  ConsoleSendString("MPU6050 Initialised\n");
 80031c0:	4843      	ldr	r0, [pc, #268]	; (80032d0 <main+0x1ac>)
 80031c2:	f7fe f94a 	bl	800145a <ConsoleSendString>
  }
  ConsolePrintPrompt();
 80031c6:	f7fe f80d 	bl	80011e4 <ConsolePrintPrompt>
  uint8_t lastFace = 255;
 80031ca:	23ff      	movs	r3, #255	; 0xff
 80031cc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 80031d0:	f7fe f816 	bl	8001200 <ConsoleProcess>

	  MPU6050_t data;
	uint8_t face;
	char msg[30];
	for (uint8_t cnt=0;cnt<20;cnt++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80031da:	e009      	b.n	80031f0 <main+0xcc>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 80031dc:	463b      	mov	r3, r7
 80031de:	4619      	mov	r1, r3
 80031e0:	4839      	ldr	r0, [pc, #228]	; (80032c8 <main+0x1a4>)
 80031e2:	f7ff f901 	bl	80023e8 <MPU6050_Read_All>
	for (uint8_t cnt=0;cnt<20;cnt++)
 80031e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80031ea:	3301      	adds	r3, #1
 80031ec:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80031f0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80031f4:	2b13      	cmp	r3, #19
 80031f6:	d9f1      	bls.n	80031dc <main+0xb8>
	}

	face = detectFace(data.KalmanAngleX, data.KalmanAngleY);
 80031f8:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80031fc:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8003200:	eeb0 1a46 	vmov.f32	s2, s12
 8003204:	eef0 1a66 	vmov.f32	s3, s13
 8003208:	eeb0 0a47 	vmov.f32	s0, s14
 800320c:	eef0 0a67 	vmov.f32	s1, s15
 8003210:	f7ff fdc4 	bl	8002d9c <detectFace>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	if (255 == face)
 800321a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800321e:	2bff      	cmp	r3, #255	; 0xff
 8003220:	d102      	bne.n	8003228 <main+0x104>
	{
		ledAllOff();
 8003222:	f7ff fd23 	bl	8002c6c <ledAllOff>
 8003226:	e046      	b.n	80032b6 <main+0x192>
	}

	else if (face != lastFace)
 8003228:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800322c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003230:	429a      	cmp	r2, r3
 8003232:	d040      	beq.n	80032b6 <main+0x192>
	{
		lastFace = face;
 8003234:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8003238:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		sprintf(msg,"Angle X: %f Y: %f",data.KalmanAngleX, data.KalmanAngleY);
 800323c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003244:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8003248:	e9cd 2300 	strd	r2, r3, [sp]
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4920      	ldr	r1, [pc, #128]	; (80032d4 <main+0x1b0>)
 8003252:	4620      	mov	r0, r4
 8003254:	f007 fada 	bl	800a80c <siprintf>
		ConsoleSendLine(msg);
 8003258:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe f909 	bl	8001474 <ConsoleSendLine>

		uint32_t rgb_color = hsl_to_rgb((face*30), 255, 127);
 8003262:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8003266:	461a      	mov	r2, r3
 8003268:	0112      	lsls	r2, r2, #4
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	227f      	movs	r2, #127	; 0x7f
 8003272:	21ff      	movs	r1, #255	; 0xff
 8003274:	4618      	mov	r0, r3
 8003276:	f000 ffc3 	bl	8004200 <hsl_to_rgb>
 800327a:	67f8      	str	r0, [r7, #124]	; 0x7c

		ledAllOff();
 800327c:	f7ff fcf6 	bl	8002c6c <ledAllOff>
		ledSetFaceColour(face, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8003280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	b2d9      	uxtb	r1, r3
 8003286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	b2da      	uxtb	r2, r3
 800328c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f897 0083 	ldrb.w	r0, [r7, #131]	; 0x83
 8003294:	f7ff fd07 	bl	8002ca6 <ledSetFaceColour>
		ledRender();
 8003298:	f7ff fcff 	bl	8002c9a <ledRender>

		sprintf(msg,"Detected face %i is up",face);
 800329c:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80032a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032a4:	490c      	ldr	r1, [pc, #48]	; (80032d8 <main+0x1b4>)
 80032a6:	4618      	mov	r0, r3
 80032a8:	f007 fab0 	bl	800a80c <siprintf>
		ConsoleSendLine(msg);
 80032ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe f8df 	bl	8001474 <ConsoleSendLine>
	}
	 HAL_Delay(200);
 80032b6:	20c8      	movs	r0, #200	; 0xc8
 80032b8:	f001 f8da 	bl	8004470 <HAL_Delay>
  {
 80032bc:	e788      	b.n	80031d0 <main+0xac>
 80032be:	bf00      	nop
 80032c0:	40023c00 	.word	0x40023c00
 80032c4:	0800e090 	.word	0x0800e090
 80032c8:	200003d8 	.word	0x200003d8
 80032cc:	0800e0a8 	.word	0x0800e0a8
 80032d0:	0800e0c8 	.word	0x0800e0c8
 80032d4:	0800e0e0 	.word	0x0800e0e0
 80032d8:	0800e0f4 	.word	0x0800e0f4

080032dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b094      	sub	sp, #80	; 0x50
 80032e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032e2:	f107 0320 	add.w	r3, r7, #32
 80032e6:	2230      	movs	r2, #48	; 0x30
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f006 fd2c 	bl	8009d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <SystemClock_Config+0xcc>)
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <SystemClock_Config+0xcc>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	6413      	str	r3, [r2, #64]	; 0x40
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <SystemClock_Config+0xcc>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800331c:	2300      	movs	r3, #0
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	4b22      	ldr	r3, [pc, #136]	; (80033ac <SystemClock_Config+0xd0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <SystemClock_Config+0xd0>)
 8003326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <SystemClock_Config+0xd0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003338:	2305      	movs	r3, #5
 800333a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800333c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003342:	2301      	movs	r3, #1
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003346:	2302      	movs	r3, #2
 8003348:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800334a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800334e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003350:	230c      	movs	r3, #12
 8003352:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003354:	2360      	movs	r3, #96	; 0x60
 8003356:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003358:	2302      	movs	r3, #2
 800335a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800335c:	2304      	movs	r3, #4
 800335e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003360:	f107 0320 	add.w	r3, r7, #32
 8003364:	4618      	mov	r0, r3
 8003366:	f003 fa5b 	bl	8006820 <HAL_RCC_OscConfig>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003370:	f000 f81e 	bl	80033b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003374:	230f      	movs	r3, #15
 8003376:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003378:	2302      	movs	r3, #2
 800337a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003384:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	2103      	movs	r1, #3
 8003390:	4618      	mov	r0, r3
 8003392:	f003 fcbd 	bl	8006d10 <HAL_RCC_ClockConfig>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800339c:	f000 f808 	bl	80033b0 <Error_Handler>
  }
}
 80033a0:	bf00      	nop
 80033a2:	3750      	adds	r7, #80	; 0x50
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40007000 	.word	0x40007000

080033b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033b4:	b672      	cpsid	i
}
 80033b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033b8:	e7fe      	b.n	80033b8 <Error_Handler+0x8>
	...

080033bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <MX_RTC_Init+0x44>)
 80033c2:	4a10      	ldr	r2, [pc, #64]	; (8003404 <MX_RTC_Init+0x48>)
 80033c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <MX_RTC_Init+0x44>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <MX_RTC_Init+0x44>)
 80033ce:	227f      	movs	r2, #127	; 0x7f
 80033d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <MX_RTC_Init+0x44>)
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80033d8:	4b09      	ldr	r3, [pc, #36]	; (8003400 <MX_RTC_Init+0x44>)
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <MX_RTC_Init+0x44>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <MX_RTC_Init+0x44>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80033ea:	4805      	ldr	r0, [pc, #20]	; (8003400 <MX_RTC_Init+0x44>)
 80033ec:	f003 ff60 	bl	80072b0 <HAL_RTC_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80033f6:	f7ff ffdb 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2000042c 	.word	0x2000042c
 8003404:	40002800 	.word	0x40002800

08003408 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003410:	f107 0308 	add.w	r3, r7, #8
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
 8003420:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <HAL_RTC_MspInit+0x50>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d111      	bne.n	8003450 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800342c:	2302      	movs	r3, #2
 800342e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003434:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	4618      	mov	r0, r3
 800343c:	f003 fe48 	bl	80070d0 <HAL_RCCEx_PeriphCLKConfig>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003446:	f7ff ffb3 	bl	80033b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <HAL_RTC_MspInit+0x54>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003450:	bf00      	nop
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40002800 	.word	0x40002800
 800345c:	42470e3c 	.word	0x42470e3c

08003460 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003464:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <MX_SPI1_Init+0x64>)
 8003466:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <MX_SPI1_Init+0x68>)
 8003468:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <MX_SPI1_Init+0x64>)
 800346c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003470:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003472:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <MX_SPI1_Init+0x64>)
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <MX_SPI1_Init+0x64>)
 800347a:	2200      	movs	r2, #0
 800347c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <MX_SPI1_Init+0x64>)
 8003480:	2200      	movs	r2, #0
 8003482:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <MX_SPI1_Init+0x64>)
 8003486:	2200      	movs	r2, #0
 8003488:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <MX_SPI1_Init+0x64>)
 800348c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003490:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <MX_SPI1_Init+0x64>)
 8003494:	2200      	movs	r2, #0
 8003496:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <MX_SPI1_Init+0x64>)
 800349a:	2200      	movs	r2, #0
 800349c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <MX_SPI1_Init+0x64>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <MX_SPI1_Init+0x64>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <MX_SPI1_Init+0x64>)
 80034ac:	220a      	movs	r2, #10
 80034ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034b0:	4804      	ldr	r0, [pc, #16]	; (80034c4 <MX_SPI1_Init+0x64>)
 80034b2:	f004 f9fb 	bl	80078ac <HAL_SPI_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80034bc:	f7ff ff78 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	2000044c 	.word	0x2000044c
 80034c8:	40013000 	.word	0x40013000

080034cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a19      	ldr	r2, [pc, #100]	; (8003550 <HAL_SPI_MspInit+0x84>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d12b      	bne.n	8003546 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_SPI_MspInit+0x88>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4a17      	ldr	r2, [pc, #92]	; (8003554 <HAL_SPI_MspInit+0x88>)
 80034f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034fc:	6453      	str	r3, [r2, #68]	; 0x44
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_SPI_MspInit+0x88>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_SPI_MspInit+0x88>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <HAL_SPI_MspInit+0x88>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <HAL_SPI_MspInit+0x88>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_MEM_SCK_Pin|SPI_MEM_MISO_Pin|SPI_MEM_MOSI_Pin;
 8003526:	23e0      	movs	r3, #224	; 0xe0
 8003528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003532:	2303      	movs	r3, #3
 8003534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003536:	2305      	movs	r3, #5
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	4619      	mov	r1, r3
 8003540:	4805      	ldr	r0, [pc, #20]	; (8003558 <HAL_SPI_MspInit+0x8c>)
 8003542:	f002 f80f 	bl	8005564 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003546:	bf00      	nop
 8003548:	3728      	adds	r7, #40	; 0x28
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40013000 	.word	0x40013000
 8003554:	40023800 	.word	0x40023800
 8003558:	40020000 	.word	0x40020000

0800355c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_MspInit+0x4c>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	4a0f      	ldr	r2, [pc, #60]	; (80035a8 <HAL_MspInit+0x4c>)
 800356c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003570:	6453      	str	r3, [r2, #68]	; 0x44
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <HAL_MspInit+0x4c>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_MspInit+0x4c>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a08      	ldr	r2, [pc, #32]	; (80035a8 <HAL_MspInit+0x4c>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_MspInit+0x4c>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800

080035ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035b0:	e7fe      	b.n	80035b0 <NMI_Handler+0x4>

080035b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035b6:	e7fe      	b.n	80035b6 <HardFault_Handler+0x4>

080035b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <MemManage_Handler+0x4>

080035be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035c2:	e7fe      	b.n	80035c2 <BusFault_Handler+0x4>

080035c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035c8:	e7fe      	b.n	80035c8 <UsageFault_Handler+0x4>

080035ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f8:	f000 ff1a 	bl	8004430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}

08003600 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART1_IRQHandler+0x10>)
 8003606:	f005 fbf9 	bl	8008dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000550 	.word	0x20000550

08003614 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <DMA2_Stream1_IRQHandler+0x10>)
 800361a:	f001 fa45 	bl	8004aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	200004f0 	.word	0x200004f0

08003628 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	return 1;
 800362c:	2301      	movs	r3, #1
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <_kill>:

int _kill(int pid, int sig)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003642:	f006 fb47 	bl	8009cd4 <__errno>
 8003646:	4603      	mov	r3, r0
 8003648:	2216      	movs	r2, #22
 800364a:	601a      	str	r2, [r3, #0]
	return -1;
 800364c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <_exit>:

void _exit (int status)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003660:	f04f 31ff 	mov.w	r1, #4294967295
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ffe7 	bl	8003638 <_kill>
	while (1) {}		/* Make sure we hang here */
 800366a:	e7fe      	b.n	800366a <_exit+0x12>

0800366c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e00a      	b.n	8003694 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800367e:	f3af 8000 	nop.w
 8003682:	4601      	mov	r1, r0
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	60ba      	str	r2, [r7, #8]
 800368a:	b2ca      	uxtb	r2, r1
 800368c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	3301      	adds	r3, #1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	dbf0      	blt.n	800367e <_read+0x12>
	}

return len;
 800369c:	687b      	ldr	r3, [r7, #4]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e009      	b.n	80036cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	60ba      	str	r2, [r7, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3301      	adds	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	dbf1      	blt.n	80036b8 <_write+0x12>
	}
	return len;
 80036d4:	687b      	ldr	r3, [r7, #4]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_close>:

int _close(int file)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
	return -1;
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003706:	605a      	str	r2, [r3, #4]
	return 0;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <_isatty>:

int _isatty(int file)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
	return 1;
 800371e:	2301      	movs	r3, #1
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
	return 0;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <_sbrk+0x5c>)
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <_sbrk+0x60>)
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <_sbrk+0x64>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <_sbrk+0x64>)
 8003766:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <_sbrk+0x68>)
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <_sbrk+0x64>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	429a      	cmp	r2, r3
 8003776:	d207      	bcs.n	8003788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003778:	f006 faac 	bl	8009cd4 <__errno>
 800377c:	4603      	mov	r3, r0
 800377e:	220c      	movs	r2, #12
 8003780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
 8003786:	e009      	b.n	800379c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <_sbrk+0x64>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <_sbrk+0x64>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	4a05      	ldr	r2, [pc, #20]	; (80037ac <_sbrk+0x64>)
 8003798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800379a:	68fb      	ldr	r3, [r7, #12]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20020000 	.word	0x20020000
 80037a8:	00000400 	.word	0x00000400
 80037ac:	200004a4 	.word	0x200004a4
 80037b0:	20000b70 	.word	0x20000b70

080037b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <SystemInit+0x20>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <SystemInit+0x20>)
 80037c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b096      	sub	sp, #88	; 0x58
 80037dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	60da      	str	r2, [r3, #12]
 8003804:	611a      	str	r2, [r3, #16]
 8003806:	615a      	str	r2, [r3, #20]
 8003808:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	2220      	movs	r2, #32
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f006 fa99 	bl	8009d48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003816:	4b3e      	ldr	r3, [pc, #248]	; (8003910 <MX_TIM1_Init+0x138>)
 8003818:	4a3e      	ldr	r2, [pc, #248]	; (8003914 <MX_TIM1_Init+0x13c>)
 800381a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800381c:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <MX_TIM1_Init+0x138>)
 800381e:	2200      	movs	r2, #0
 8003820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003822:	4b3b      	ldr	r3, [pc, #236]	; (8003910 <MX_TIM1_Init+0x138>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 8003828:	4b39      	ldr	r3, [pc, #228]	; (8003910 <MX_TIM1_Init+0x138>)
 800382a:	227c      	movs	r2, #124	; 0x7c
 800382c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800382e:	4b38      	ldr	r3, [pc, #224]	; (8003910 <MX_TIM1_Init+0x138>)
 8003830:	2200      	movs	r2, #0
 8003832:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <MX_TIM1_Init+0x138>)
 8003836:	2200      	movs	r2, #0
 8003838:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800383a:	4b35      	ldr	r3, [pc, #212]	; (8003910 <MX_TIM1_Init+0x138>)
 800383c:	2200      	movs	r2, #0
 800383e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003840:	4833      	ldr	r0, [pc, #204]	; (8003910 <MX_TIM1_Init+0x138>)
 8003842:	f004 f8bc 	bl	80079be <HAL_TIM_Base_Init>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800384c:	f7ff fdb0 	bl	80033b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003854:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003856:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800385a:	4619      	mov	r1, r3
 800385c:	482c      	ldr	r0, [pc, #176]	; (8003910 <MX_TIM1_Init+0x138>)
 800385e:	f004 fc8f 	bl	8008180 <HAL_TIM_ConfigClockSource>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003868:	f7ff fda2 	bl	80033b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800386c:	4828      	ldr	r0, [pc, #160]	; (8003910 <MX_TIM1_Init+0x138>)
 800386e:	f004 f8f5 	bl	8007a5c <HAL_TIM_PWM_Init>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003878:	f7ff fd9a 	bl	80033b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800387c:	2300      	movs	r3, #0
 800387e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003880:	2300      	movs	r3, #0
 8003882:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003888:	4619      	mov	r1, r3
 800388a:	4821      	ldr	r0, [pc, #132]	; (8003910 <MX_TIM1_Init+0x138>)
 800388c:	f005 f8e6 	bl	8008a5c <HAL_TIMEx_MasterConfigSynchronization>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003896:	f7ff fd8b 	bl	80033b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800389a:	2360      	movs	r3, #96	; 0x60
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038a2:	2300      	movs	r3, #0
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038a6:	2300      	movs	r3, #0
 80038a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ba:	2200      	movs	r2, #0
 80038bc:	4619      	mov	r1, r3
 80038be:	4814      	ldr	r0, [pc, #80]	; (8003910 <MX_TIM1_Init+0x138>)
 80038c0:	f004 fb9c 	bl	8007ffc <HAL_TIM_PWM_ConfigChannel>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80038ca:	f7ff fd71 	bl	80033b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	4807      	ldr	r0, [pc, #28]	; (8003910 <MX_TIM1_Init+0x138>)
 80038f2:	f005 f921 	bl	8008b38 <HAL_TIMEx_ConfigBreakDeadTime>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80038fc:	f7ff fd58 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003900:	4803      	ldr	r0, [pc, #12]	; (8003910 <MX_TIM1_Init+0x138>)
 8003902:	f000 f85d 	bl	80039c0 <HAL_TIM_MspPostInit>

}
 8003906:	bf00      	nop
 8003908:	3758      	adds	r7, #88	; 0x58
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200004a8 	.word	0x200004a8
 8003914:	40010000 	.word	0x40010000

08003918 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <HAL_TIM_Base_MspInit+0x98>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d13e      	bne.n	80039a8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <HAL_TIM_Base_MspInit+0x9c>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	4a20      	ldr	r2, [pc, #128]	; (80039b4 <HAL_TIM_Base_MspInit+0x9c>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6453      	str	r3, [r2, #68]	; 0x44
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <HAL_TIM_Base_MspInit+0x9c>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003948:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <HAL_TIM_Base_MspInit+0xa4>)
 800394a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800394c:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 800394e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003952:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003954:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003956:	2240      	movs	r2, #64	; 0x40
 8003958:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800395a:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 800395c:	2200      	movs	r2, #0
 800395e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003960:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003966:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003968:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 800396a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800396e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003976:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 800397a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800397e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003980:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003982:	2200      	movs	r2, #0
 8003984:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 8003988:	2200      	movs	r2, #0
 800398a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800398c:	480a      	ldr	r0, [pc, #40]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 800398e:	f000 fef3 	bl	8004778 <HAL_DMA_Init>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003998:	f7ff fd0a 	bl	80033b0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a06      	ldr	r2, [pc, #24]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24
 80039a2:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <HAL_TIM_Base_MspInit+0xa0>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40023800 	.word	0x40023800
 80039b8:	200004f0 	.word	0x200004f0
 80039bc:	40026428 	.word	0x40026428

080039c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	f107 030c 	add.w	r3, r7, #12
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <HAL_TIM_MspPostInit+0x68>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d11e      	bne.n	8003a20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <HAL_TIM_MspPostInit+0x6c>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <HAL_TIM_MspPostInit+0x6c>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6313      	str	r3, [r2, #48]	; 0x30
 80039f2:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <HAL_TIM_MspPostInit+0x6c>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 80039fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a04:	2302      	movs	r3, #2
 8003a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a10:	2301      	movs	r3, #1
 8003a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4805      	ldr	r0, [pc, #20]	; (8003a30 <HAL_TIM_MspPostInit+0x70>)
 8003a1c:	f001 fda2 	bl	8005564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a20:	bf00      	nop
 8003a22:	3720      	adds	r7, #32
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40020000 	.word	0x40020000

08003a34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <MX_USART1_UART_Init+0x50>)
 8003a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a46:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a6c:	f005 f8b6 	bl	8008bdc <HAL_UART_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a76:	f7ff fc9b 	bl	80033b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000550 	.word	0x20000550
 8003a84:	40011000 	.word	0x40011000

08003a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <HAL_UART_MspInit+0x94>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d134      	bne.n	8003b14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003ab4:	f043 0310 	orr.w	r3, r3, #16
 8003ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ae2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af0:	2303      	movs	r3, #3
 8003af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003af4:	2307      	movs	r3, #7
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	4619      	mov	r1, r3
 8003afe:	4809      	ldr	r0, [pc, #36]	; (8003b24 <HAL_UART_MspInit+0x9c>)
 8003b00:	f001 fd30 	bl	8005564 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b04:	2200      	movs	r2, #0
 8003b06:	2100      	movs	r1, #0
 8003b08:	2025      	movs	r0, #37	; 0x25
 8003b0a:	f000 fdb0 	bl	800466e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b0e:	2025      	movs	r0, #37	; 0x25
 8003b10:	f000 fdc9 	bl	80046a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b14:	bf00      	nop
 8003b16:	3728      	adds	r7, #40	; 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40011000 	.word	0x40011000
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40020000 	.word	0x40020000

08003b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b2c:	480d      	ldr	r0, [pc, #52]	; (8003b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b2e:	490e      	ldr	r1, [pc, #56]	; (8003b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b30:	4a0e      	ldr	r2, [pc, #56]	; (8003b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b34:	e002      	b.n	8003b3c <LoopCopyDataInit>

08003b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b3a:	3304      	adds	r3, #4

08003b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b40:	d3f9      	bcc.n	8003b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b42:	4a0b      	ldr	r2, [pc, #44]	; (8003b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b44:	4c0b      	ldr	r4, [pc, #44]	; (8003b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b48:	e001      	b.n	8003b4e <LoopFillZerobss>

08003b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b4c:	3204      	adds	r2, #4

08003b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b50:	d3fb      	bcc.n	8003b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b52:	f7ff fe2f 	bl	80037b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b56:	f006 f8c3 	bl	8009ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b5a:	f7ff fae3 	bl	8003124 <main>
  bx  lr    
 8003b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b68:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8003b6c:	0800ea00 	.word	0x0800ea00
  ldr r2, =_sbss
 8003b70:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8003b74:	20000b6c 	.word	0x20000b6c

08003b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b78:	e7fe      	b.n	8003b78 <ADC_IRQHandler>
	...

08003b7c <sysConfigInit>:
static uint16_t SYS_CONFIG_SIZE_DODEC;



void sysConfigInit()
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
	SYS_CONFIG_SIZE = sizeof(systemConfig.configItems)/4;
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <sysConfigInit+0x28>)
 8003b82:	22e0      	movs	r2, #224	; 0xe0
 8003b84:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_ALL_SIZE = sizeof(systemConfig)/4;
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <sysConfigInit+0x2c>)
 8003b88:	22e1      	movs	r2, #225	; 0xe1
 8003b8a:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_SIZE_TASK = sizeof(systemConfig.configItems.tasksConfig);
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <sysConfigInit+0x30>)
 8003b8e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003b92:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_SIZE_DODEC = sizeof(systemConfig.configItems.dodecaConfig);
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <sysConfigInit+0x34>)
 8003b96:	2260      	movs	r2, #96	; 0x60
 8003b98:	801a      	strh	r2, [r3, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	20000918 	.word	0x20000918
 8003ba8:	2000091a 	.word	0x2000091a
 8003bac:	2000091c 	.word	0x2000091c
 8003bb0:	2000091e 	.word	0x2000091e

08003bb4 <systemConfigGet>:

systemConfig_t *systemConfigGet()
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
	return &systemConfig;
 8003bb8:	4b02      	ldr	r3, [pc, #8]	; (8003bc4 <systemConfigGet+0x10>)
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	20000594 	.word	0x20000594

08003bc8 <sysConfigValidateConfig>:

static eSYSConfig_t sysConfigValidateConfig()
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 8003bce:	f000 f813 	bl	8003bf8 <sysConfigCalcChecksum>
 8003bd2:	6078      	str	r0, [r7, #4]
	uint32_t crcRO = systemConfigRO->checksum;
 8003bd4:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <sysConfigValidateConfig+0x2c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8003bdc:	603b      	str	r3, [r7, #0]
	if (crc == crcRO)
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d101      	bne.n	8003bea <sysConfigValidateConfig+0x22>
		return SYS_CONFIG_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <sysConfigValidateConfig+0x24>
	else
		return SYS_CONFIG_BAD_CHECKSUM;
 8003bea:	2301      	movs	r3, #1
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	2000010c 	.word	0x2000010c

08003bf8 <sysConfigCalcChecksum>:

uint32_t sysConfigCalcChecksum()
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
	uint32_t crc;
	crc =  HAL_CRC_Calculate(&hcrc,  (uint32_t*)&systemConfig.configItems, SYS_CONFIG_SIZE);
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <sysConfigCalcChecksum+0x20>)
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	4905      	ldr	r1, [pc, #20]	; (8003c1c <sysConfigCalcChecksum+0x24>)
 8003c06:	4806      	ldr	r0, [pc, #24]	; (8003c20 <sysConfigCalcChecksum+0x28>)
 8003c08:	f000 fd83 	bl	8004712 <HAL_CRC_Calculate>
 8003c0c:	6078      	str	r0, [r7, #4]
	return crc;
 8003c0e:	687b      	ldr	r3, [r7, #4]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20000918 	.word	0x20000918
 8003c1c:	20000594 	.word	0x20000594
 8003c20:	200003d0 	.word	0x200003d0

08003c24 <sysConfigRead>:




eSYSConfig_t sysConfigRead()
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
	Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,SYS_CONFIG_ALL_SIZE );
 8003c28:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <sysConfigRead+0x28>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <sysConfigRead+0x2c>)
 8003c2e:	8812      	ldrh	r2, [r2, #0]
 8003c30:	4908      	ldr	r1, [pc, #32]	; (8003c54 <sysConfigRead+0x30>)
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe faba 	bl	80021ac <Flash_Read_Data>
	//Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,5 );
	if (SYS_CONFIG_BAD_CHECKSUM == sysConfigValidateConfig())
 8003c38:	f7ff ffc6 	bl	8003bc8 <sysConfigValidateConfig>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <sysConfigRead+0x22>
		return SYS_CONFIG_BAD_DATA;
 8003c42:	2302      	movs	r3, #2
 8003c44:	e000      	b.n	8003c48 <sysConfigRead+0x24>
	else
		return TASK_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	0800e57c 	.word	0x0800e57c
 8003c50:	2000091a 	.word	0x2000091a
 8003c54:	20000594 	.word	0x20000594

08003c58 <sysConfigSave>:

void sysConfigSave()
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 8003c5e:	f7ff ffcb 	bl	8003bf8 <sysConfigCalcChecksum>
 8003c62:	6078      	str	r0, [r7, #4]
	systemConfig.checksum = crc;
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <sysConfigSave+0x30>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8c2 3380 	str.w	r3, [r2, #896]	; 0x380
	uint32_t result;
	result = Flash_Write_Data(SYSTEM_CONFIG_ADDRESS, (uint32_t *)&systemConfig, SYS_CONFIG_ALL_SIZE);
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <sysConfigSave+0x34>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <sysConfigSave+0x38>)
 8003c72:	8812      	ldrh	r2, [r2, #0]
 8003c74:	4904      	ldr	r1, [pc, #16]	; (8003c88 <sysConfigSave+0x30>)
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fa3a 	bl	80020f0 <Flash_Write_Data>
 8003c7c:	6038      	str	r0, [r7, #0]
	//TODO: Handle a Confug Save Error - Hard Fault!
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000594 	.word	0x20000594
 8003c8c:	0800e57c 	.word	0x0800e57c
 8003c90:	2000091a 	.word	0x2000091a

08003c94 <taskInit>:
#include <string.h>

static taskItems_t * taskItemsPtr = 0x0;

eTaskError_t taskInit(taskItems_t *taskItems)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	taskItemsPtr = taskItems;
 8003c9c:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <taskInit+0x1c>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6013      	str	r3, [r2, #0]
	return TASK_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	20000920 	.word	0x20000920

08003cb4 <taskValidateTaskId>:


eTaskError_t taskValidateTaskId(uint8_t id)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	71fb      	strb	r3, [r7, #7]
	if (id > TASK_COUNT_MAX)
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	2b14      	cmp	r3, #20
 8003cc2:	d901      	bls.n	8003cc8 <taskValidateTaskId+0x14>
		return TASK_INVALID_ID;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <taskValidateTaskId+0x16>
	else
		return TASK_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <taskSetDefaultAll>:

eTaskError_t taskSetDefaultAll()
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
	for (uint8_t t=0;t<TASK_COUNT_MAX;t++)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	71fb      	strb	r3, [r7, #7]
 8003ce0:	e006      	b.n	8003cf0 <taskSetDefaultAll+0x1a>
	{
		taskSetDefault(t);
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 f80b 	bl	8003d00 <taskSetDefault>
	for (uint8_t t=0;t<TASK_COUNT_MAX;t++)
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	3301      	adds	r3, #1
 8003cee:	71fb      	strb	r3, [r7, #7]
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	2b13      	cmp	r3, #19
 8003cf4:	d9f5      	bls.n	8003ce2 <taskSetDefaultAll+0xc>
	}
	return TASK_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <taskSetDefault>:

eTaskError_t taskSetDefault(uint8_t id)
{
 8003d00:	b5b0      	push	{r4, r5, r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	71fb      	strb	r3, [r7, #7]
	if (TASK_INVALID_ID == taskValidateTaskId(id))
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ffd1 	bl	8003cb4 <taskValidateTaskId>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <taskSetDefault+0x1c>
		return TASK_INVALID_ID;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e01b      	b.n	8003d54 <taskSetDefault+0x54>

	taskItem_t *item = taskGet(id);
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f81e 	bl	8003d60 <taskGet>
 8003d24:	60f8      	str	r0, [r7, #12]

	item->id = id;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	79fa      	ldrb	r2, [r7, #7]
 8003d2a:	701a      	strb	r2, [r3, #0]
	item->colour = 0;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	621a      	str	r2, [r3, #32]
	item->defaultMinTime = TASK_DEFAULT_MIN_TIME;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	22aa      	movs	r2, #170	; 0xaa
 8003d36:	849a      	strh	r2, [r3, #36]	; 0x24
	item->defaultMaxTime = TASK_DEFAULT_MAX_TIME;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	22bb      	movs	r2, #187	; 0xbb
 8003d3c:	84da      	strh	r2, [r3, #38]	; 0x26
	strcpy(item->name,TASK_DEFAULT_NAME);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3301      	adds	r3, #1
 8003d42:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <taskSetDefault+0x5c>)
 8003d44:	461c      	mov	r4, r3
 8003d46:	4615      	mov	r5, r2
 8003d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d4a:	6020      	str	r0, [r4, #0]
 8003d4c:	6061      	str	r1, [r4, #4]
 8003d4e:	60a2      	str	r2, [r4, #8]
 8003d50:	60e3      	str	r3, [r4, #12]

	return TASK_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d5c:	0800e10c 	.word	0x0800e10c

08003d60 <taskGet>:
	strcpy(item->name,name);
	return TASK_OK;
}

taskItem_t * taskGet(uint8_t id )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
	if (TASK_INVALID_ID == taskValidateTaskId(id))
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ffa1 	bl	8003cb4 <taskValidateTaskId>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <taskGet+0x1c>
		return 0x0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e007      	b.n	8003d8c <taskGet+0x2c>

	return &taskItemsPtr->items[id];
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <taskGet+0x34>)
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	79fa      	ldrb	r2, [r7, #7]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	440b      	add	r3, r1

}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20000920 	.word	0x20000920

08003d98 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	460a      	mov	r2, r1
 8003da2:	71fb      	strb	r3, [r7, #7]
 8003da4:	4613      	mov	r3, r2
 8003da6:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	79ba      	ldrb	r2, [r7, #6]
 8003dac:	fb02 f303 	mul.w	r3, r2, r3
 8003db0:	121b      	asrs	r3, r3, #8
 8003db2:	b2db      	uxtb	r3, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	4611      	mov	r1, r2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4623      	mov	r3, r4
 8003dd0:	71fb      	strb	r3, [r7, #7]
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71bb      	strb	r3, [r7, #6]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	717b      	strb	r3, [r7, #5]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 8003dde:	79bb      	ldrb	r3, [r7, #6]
 8003de0:	ee07 3a90 	vmov	s15, r3
 8003de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003de8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003e88 <led_set_RGB+0xc8>
 8003dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df4:	edc7 7a00 	vstr	s15, [r7]
 8003df8:	783b      	ldrb	r3, [r7, #0]
 8003dfa:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 8003dfc:	797b      	ldrb	r3, [r7, #5]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e06:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003e88 <led_set_RGB+0xc8>
 8003e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e12:	edc7 7a00 	vstr	s15, [r7]
 8003e16:	783b      	ldrb	r3, [r7, #0]
 8003e18:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 8003e1a:	793b      	ldrb	r3, [r7, #4]
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e24:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003e88 <led_set_RGB+0xc8>
 8003e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e30:	edc7 7a00 	vstr	s15, [r7]
 8003e34:	783b      	ldrb	r3, [r7, #0]
 8003e36:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8003e38:	79fa      	ldrb	r2, [r7, #7]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	189c      	adds	r4, r3, r2
 8003e40:	797b      	ldrb	r3, [r7, #5]
 8003e42:	21b0      	movs	r1, #176	; 0xb0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ffa7 	bl	8003d98 <scale8>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <led_set_RGB+0xcc>)
 8003e50:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8003e52:	79fa      	ldrb	r2, [r7, #7]
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	490b      	ldr	r1, [pc, #44]	; (8003e8c <led_set_RGB+0xcc>)
 8003e5e:	79ba      	ldrb	r2, [r7, #6]
 8003e60:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8003e62:	79fa      	ldrb	r2, [r7, #7]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	1c9c      	adds	r4, r3, #2
 8003e6c:	793b      	ldrb	r3, [r7, #4]
 8003e6e:	21f0      	movs	r1, #240	; 0xf0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff91 	bl	8003d98 <scale8>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <led_set_RGB+0xcc>)
 8003e7c:	551a      	strb	r2, [r3, r4]

}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd90      	pop	{r4, r7, pc}
 8003e86:	bf00      	nop
 8003e88:	3e99999a 	.word	0x3e99999a
 8003e8c:	20000924 	.word	0x20000924

08003e90 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 8003e96:	4b50      	ldr	r3, [pc, #320]	; (8003fd8 <led_render+0x148>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <led_render+0x1a>
 8003e9e:	4b4f      	ldr	r3, [pc, #316]	; (8003fdc <led_render+0x14c>)
 8003ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d015      	beq.n	8003ed6 <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	71fb      	strb	r3, [r7, #7]
 8003eae:	e007      	b.n	8003ec0 <led_render+0x30>
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	4a4b      	ldr	r2, [pc, #300]	; (8003fe0 <led_render+0x150>)
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	71fb      	strb	r3, [r7, #7]
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	2b2f      	cmp	r3, #47	; 0x2f
 8003ec4:	d9f4      	bls.n	8003eb0 <led_render+0x20>
    wr_buf_p = 0;
 8003ec6:	4b44      	ldr	r3, [pc, #272]	; (8003fd8 <led_render+0x148>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4845      	ldr	r0, [pc, #276]	; (8003fe4 <led_render+0x154>)
 8003ed0:	f003 ffce 	bl	8007e70 <HAL_TIM_PWM_Stop_DMA>
    return;
 8003ed4:	e07c      	b.n	8003fd0 <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	e06d      	b.n	8003fb8 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8003edc:	4b42      	ldr	r3, [pc, #264]	; (8003fe8 <led_render+0x158>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	dd01      	ble.n	8003ef4 <led_render+0x64>
 8003ef0:	2150      	movs	r1, #80	; 0x50
 8003ef2:	e000      	b.n	8003ef6 <led_render+0x66>
 8003ef4:	2128      	movs	r1, #40	; 0x28
 8003ef6:	4a3a      	ldr	r2, [pc, #232]	; (8003fe0 <led_render+0x150>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8003efe:	4b3a      	ldr	r3, [pc, #232]	; (8003fe8 <led_render+0x158>)
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	461a      	mov	r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	dd01      	ble.n	8003f16 <led_render+0x86>
 8003f12:	2150      	movs	r1, #80	; 0x50
 8003f14:	e000      	b.n	8003f18 <led_render+0x88>
 8003f16:	2128      	movs	r1, #40	; 0x28
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	4a30      	ldr	r2, [pc, #192]	; (8003fe0 <led_render+0x150>)
 8003f1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8003f22:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <led_render+0x158>)
 8003f24:	789b      	ldrb	r3, [r3, #2]
 8003f26:	461a      	mov	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	dd01      	ble.n	8003f3a <led_render+0xaa>
 8003f36:	2150      	movs	r1, #80	; 0x50
 8003f38:	e000      	b.n	8003f3c <led_render+0xac>
 8003f3a:	2128      	movs	r1, #40	; 0x28
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	3310      	adds	r3, #16
 8003f40:	4a27      	ldr	r2, [pc, #156]	; (8003fe0 <led_render+0x150>)
 8003f42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8003f46:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <led_render+0x158>)
 8003f48:	78db      	ldrb	r3, [r3, #3]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	dd01      	ble.n	8003f5e <led_render+0xce>
 8003f5a:	2150      	movs	r1, #80	; 0x50
 8003f5c:	e000      	b.n	8003f60 <led_render+0xd0>
 8003f5e:	2128      	movs	r1, #40	; 0x28
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	3318      	adds	r3, #24
 8003f64:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <led_render+0x150>)
 8003f66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <led_render+0x158>)
 8003f6c:	791b      	ldrb	r3, [r3, #4]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	dd01      	ble.n	8003f82 <led_render+0xf2>
 8003f7e:	2150      	movs	r1, #80	; 0x50
 8003f80:	e000      	b.n	8003f84 <led_render+0xf4>
 8003f82:	2128      	movs	r1, #40	; 0x28
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	3320      	adds	r3, #32
 8003f88:	4a15      	ldr	r2, [pc, #84]	; (8003fe0 <led_render+0x150>)
 8003f8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8003f8e:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <led_render+0x158>)
 8003f90:	795b      	ldrb	r3, [r3, #5]
 8003f92:	461a      	mov	r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	dd01      	ble.n	8003fa6 <led_render+0x116>
 8003fa2:	2150      	movs	r1, #80	; 0x50
 8003fa4:	e000      	b.n	8003fa8 <led_render+0x118>
 8003fa6:	2128      	movs	r1, #40	; 0x28
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	3328      	adds	r3, #40	; 0x28
 8003fac:	4a0c      	ldr	r2, [pc, #48]	; (8003fe0 <led_render+0x150>)
 8003fae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b07      	cmp	r3, #7
 8003fbc:	d98e      	bls.n	8003edc <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 8003fbe:	2330      	movs	r3, #48	; 0x30
 8003fc0:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <led_render+0x150>)
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4807      	ldr	r0, [pc, #28]	; (8003fe4 <led_render+0x154>)
 8003fc6:	f003 fda3 	bl	8007b10 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8003fca:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <led_render+0x148>)
 8003fcc:	2202      	movs	r2, #2
 8003fce:	601a      	str	r2, [r3, #0]
}
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000b34 	.word	0x20000b34
 8003fdc:	200004f0 	.word	0x200004f0
 8003fe0:	20000ad4 	.word	0x20000ad4
 8003fe4:	200004a8 	.word	0x200004a8
 8003fe8:	20000924 	.word	0x20000924

08003fec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8003ff4:	4b3a      	ldr	r3, [pc, #232]	; (80040e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b8f      	cmp	r3, #143	; 0x8f
 8003ffa:	d854      	bhi.n	80040a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	e048      	b.n	8004094 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8004002:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	4413      	add	r3, r2
 800400c:	4a35      	ldr	r2, [pc, #212]	; (80040e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800400e:	5cd3      	ldrb	r3, [r2, r3]
 8004010:	461a      	mov	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	dd01      	ble.n	8004024 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8004020:	2150      	movs	r1, #80	; 0x50
 8004022:	e000      	b.n	8004026 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8004024:	2128      	movs	r1, #40	; 0x28
 8004026:	4a30      	ldr	r2, [pc, #192]	; (80040e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800402e:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	4413      	add	r3, r2
 8004038:	3301      	adds	r3, #1
 800403a:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	461a      	mov	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	2b00      	cmp	r3, #0
 800404c:	dd01      	ble.n	8004052 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 800404e:	2150      	movs	r1, #80	; 0x50
 8004050:	e000      	b.n	8004054 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8004052:	2128      	movs	r1, #40	; 0x28
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3308      	adds	r3, #8
 8004058:	4a23      	ldr	r2, [pc, #140]	; (80040e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 800405a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800405e:	4b20      	ldr	r3, [pc, #128]	; (80040e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	3302      	adds	r3, #2
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800406c:	5cd3      	ldrb	r3, [r2, r3]
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	dd01      	ble.n	8004082 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 800407e:	2150      	movs	r1, #80	; 0x50
 8004080:	e000      	b.n	8004084 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8004082:	2128      	movs	r1, #40	; 0x28
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3310      	adds	r3, #16
 8004088:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 800408a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b07      	cmp	r3, #7
 8004098:	d9b3      	bls.n	8004002 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	4a0f      	ldr	r2, [pc, #60]	; (80040e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80040a2:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80040a4:	e016      	b.n	80040d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b91      	cmp	r3, #145	; 0x91
 80040ac:	d812      	bhi.n	80040d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	72fb      	strb	r3, [r7, #11]
 80040b2:	e007      	b.n	80040c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 80040b4:	7afb      	ldrb	r3, [r7, #11]
 80040b6:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80040b8:	2100      	movs	r1, #0
 80040ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80040be:	7afb      	ldrb	r3, [r7, #11]
 80040c0:	3301      	adds	r3, #1
 80040c2:	72fb      	strb	r3, [r7, #11]
 80040c4:	7afb      	ldrb	r3, [r7, #11]
 80040c6:	2b17      	cmp	r3, #23
 80040c8:	d9f4      	bls.n	80040b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80040d2:	6013      	str	r3, [r2, #0]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	20000b34 	.word	0x20000b34
 80040e4:	20000924 	.word	0x20000924
 80040e8:	20000ad4 	.word	0x20000ad4

080040ec <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80040f4:	4b3e      	ldr	r3, [pc, #248]	; (80041f0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b8f      	cmp	r3, #143	; 0x8f
 80040fa:	d855      	bhi.n	80041a8 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e049      	b.n	8004196 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8004102:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	4a39      	ldr	r2, [pc, #228]	; (80041f4 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800410e:	5cd3      	ldrb	r3, [r2, r3]
 8004110:	461a      	mov	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	dd01      	ble.n	8004124 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8004120:	2150      	movs	r1, #80	; 0x50
 8004122:	e000      	b.n	8004126 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8004124:	2128      	movs	r1, #40	; 0x28
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3318      	adds	r3, #24
 800412a:	4a33      	ldr	r2, [pc, #204]	; (80041f8 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800412c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8004130:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	3301      	adds	r3, #1
 800413c:	4a2d      	ldr	r2, [pc, #180]	; (80041f4 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800413e:	5cd3      	ldrb	r3, [r2, r3]
 8004140:	461a      	mov	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414c:	2b00      	cmp	r3, #0
 800414e:	dd01      	ble.n	8004154 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8004150:	2150      	movs	r1, #80	; 0x50
 8004152:	e000      	b.n	8004156 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8004154:	2128      	movs	r1, #40	; 0x28
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3320      	adds	r3, #32
 800415a:	4a27      	ldr	r2, [pc, #156]	; (80041f8 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800415c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8004160:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	4413      	add	r3, r2
 800416a:	3302      	adds	r3, #2
 800416c:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800416e:	5cd3      	ldrb	r3, [r2, r3]
 8004170:	461a      	mov	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b00      	cmp	r3, #0
 800417e:	dd01      	ble.n	8004184 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8004180:	2150      	movs	r1, #80	; 0x50
 8004182:	e000      	b.n	8004186 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8004184:	2128      	movs	r1, #40	; 0x28
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3328      	adds	r3, #40	; 0x28
 800418a:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800418c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b07      	cmp	r3, #7
 800419a:	d9b2      	bls.n	8004102 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80041a4:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 80041a6:	e01e      	b.n	80041e6 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80041a8:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b91      	cmp	r3, #145	; 0x91
 80041ae:	d813      	bhi.n	80041d8 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80041b0:	2318      	movs	r3, #24
 80041b2:	72fb      	strb	r3, [r7, #11]
 80041b4:	e007      	b.n	80041c6 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 80041b6:	7afb      	ldrb	r3, [r7, #11]
 80041b8:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80041ba:	2100      	movs	r1, #0
 80041bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80041c0:	7afb      	ldrb	r3, [r7, #11]
 80041c2:	3301      	adds	r3, #1
 80041c4:	72fb      	strb	r3, [r7, #11]
 80041c6:	7afb      	ldrb	r3, [r7, #11]
 80041c8:	2b2f      	cmp	r3, #47	; 0x2f
 80041ca:	d9f4      	bls.n	80041b6 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3301      	adds	r3, #1
 80041d2:	4a07      	ldr	r2, [pc, #28]	; (80041f0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80041d4:	6013      	str	r3, [r2, #0]
}
 80041d6:	e006      	b.n	80041e6 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80041de:	2100      	movs	r1, #0
 80041e0:	4806      	ldr	r0, [pc, #24]	; (80041fc <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80041e2:	f003 fe45 	bl	8007e70 <HAL_TIM_PWM_Stop_DMA>
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000b34 	.word	0x20000b34
 80041f4:	20000924 	.word	0x20000924
 80041f8:	20000ad4 	.word	0x20000ad4
 80041fc:	200004a8 	.word	0x200004a8

08004200 <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	71fb      	strb	r3, [r7, #7]
 800420a:	460b      	mov	r3, r1
 800420c:	71bb      	strb	r3, [r7, #6]
 800420e:	4613      	mov	r3, r2
 8004210:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8004212:	797b      	ldrb	r3, [r7, #5]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <hsl_to_rgb+0x1c>
 8004218:	2300      	movs	r3, #0
 800421a:	e0b1      	b.n	8004380 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 800421c:	797b      	ldrb	r3, [r7, #5]
 800421e:	b29b      	uxth	r3, r3
 8004220:	3301      	adds	r3, #1
 8004222:	b29b      	uxth	r3, r3
 8004224:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8004226:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800422a:	2b00      	cmp	r3, #0
 800422c:	db09      	blt.n	8004242 <hsl_to_rgb+0x42>
 800422e:	89bb      	ldrh	r3, [r7, #12]
 8004230:	b29b      	uxth	r3, r3
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	79ba      	ldrb	r2, [r7, #6]
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	121b      	asrs	r3, r3, #8
 800423c:	b2db      	uxtb	r3, r3
 800423e:	74fb      	strb	r3, [r7, #19]
 8004240:	e00a      	b.n	8004258 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8004242:	89bb      	ldrh	r3, [r7, #12]
 8004244:	b29b      	uxth	r3, r3
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800424c:	79ba      	ldrb	r2, [r7, #6]
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	121b      	asrs	r3, r3, #8
 8004254:	b2db      	uxtb	r3, r3
 8004256:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	b29b      	uxth	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	0052      	lsls	r2, r2, #1
 8004260:	4413      	add	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8004268:	897b      	ldrh	r3, [r7, #10]
 800426a:	b29b      	uxth	r3, r3
 800426c:	b2db      	uxtb	r3, r3
 800426e:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8004270:	7d3b      	ldrb	r3, [r7, #20]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	b29b      	uxth	r3, r3
 8004276:	3301      	adds	r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 800427c:	897b      	ldrh	r3, [r7, #10]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <hsl_to_rgb+0x9c>
 8004288:	89fb      	ldrh	r3, [r7, #14]
 800428a:	b29b      	uxth	r3, r3
 800428c:	7cfa      	ldrb	r2, [r7, #19]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	fb02 f303 	mul.w	r3, r2, r3
 8004294:	121b      	asrs	r3, r3, #8
 8004296:	b2db      	uxtb	r3, r3
 8004298:	74bb      	strb	r3, [r7, #18]
 800429a:	e00a      	b.n	80042b2 <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 800429c:	89fb      	ldrh	r3, [r7, #14]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80042a4:	7cfa      	ldrb	r2, [r7, #19]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	fb02 f303 	mul.w	r3, r2, r3
 80042ac:	121b      	asrs	r3, r3, #8
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	797a      	ldrb	r2, [r7, #5]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 80042c2:	897b      	ldrh	r3, [r7, #10]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d839      	bhi.n	8004342 <hsl_to_rgb+0x142>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <hsl_to_rgb+0xd4>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	080042e9 	.word	0x080042e9
 80042d8:	080042fb 	.word	0x080042fb
 80042dc:	0800430d 	.word	0x0800430d
 80042e0:	0800431f 	.word	0x0800431f
 80042e4:	08004331 	.word	0x08004331
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	75fb      	strb	r3, [r7, #23]
 80042ee:	7cbb      	ldrb	r3, [r7, #18]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	75bb      	strb	r3, [r7, #22]
 80042f4:	2300      	movs	r3, #0
 80042f6:	757b      	strb	r3, [r7, #21]
 80042f8:	e02c      	b.n	8004354 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 80042fa:	7cbb      	ldrb	r3, [r7, #18]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	75fb      	strb	r3, [r7, #23]
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	75bb      	strb	r3, [r7, #22]
 8004306:	2300      	movs	r3, #0
 8004308:	757b      	strb	r3, [r7, #21]
 800430a:	e023      	b.n	8004354 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	75bb      	strb	r3, [r7, #22]
 8004316:	7cbb      	ldrb	r3, [r7, #18]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	757b      	strb	r3, [r7, #21]
 800431c:	e01a      	b.n	8004354 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]
 8004322:	7cbb      	ldrb	r3, [r7, #18]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	75bb      	strb	r3, [r7, #22]
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	757b      	strb	r3, [r7, #21]
 800432e:	e011      	b.n	8004354 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8004330:	7cbb      	ldrb	r3, [r7, #18]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	75fb      	strb	r3, [r7, #23]
 8004336:	2300      	movs	r3, #0
 8004338:	75bb      	strb	r3, [r7, #22]
 800433a:	7cfb      	ldrb	r3, [r7, #19]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	757b      	strb	r3, [r7, #21]
 8004340:	e008      	b.n	8004354 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	75fb      	strb	r3, [r7, #23]
 8004348:	2300      	movs	r3, #0
 800434a:	75bb      	strb	r3, [r7, #22]
 800434c:	7cbb      	ldrb	r3, [r7, #18]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	757b      	strb	r3, [r7, #21]
 8004352:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	7c7b      	ldrb	r3, [r7, #17]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	4413      	add	r3, r2
 8004360:	041a      	lsls	r2, r3, #16
 8004362:	7dbb      	ldrb	r3, [r7, #22]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	4619      	mov	r1, r3
 8004368:	7c7b      	ldrb	r3, [r7, #17]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	440b      	add	r3, r1
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	431a      	orrs	r2, r3
 8004372:	7d7b      	ldrb	r3, [r7, #21]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4619      	mov	r1, r3
 8004378:	7c7b      	ldrb	r3, [r7, #17]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	440b      	add	r3, r1
 800437e:	4313      	orrs	r3, r2
}
 8004380:	4618      	mov	r0, r3
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004390:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <HAL_Init+0x40>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0d      	ldr	r2, [pc, #52]	; (80043cc <HAL_Init+0x40>)
 8004396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800439a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_Init+0x40>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <HAL_Init+0x40>)
 80043a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043a8:	4b08      	ldr	r3, [pc, #32]	; (80043cc <HAL_Init+0x40>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a07      	ldr	r2, [pc, #28]	; (80043cc <HAL_Init+0x40>)
 80043ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b4:	2003      	movs	r0, #3
 80043b6:	f000 f94f 	bl	8004658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ba:	200f      	movs	r0, #15
 80043bc:	f000 f808 	bl	80043d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043c0:	f7ff f8cc 	bl	800355c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023c00 	.word	0x40023c00

080043d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043d8:	4b12      	ldr	r3, [pc, #72]	; (8004424 <HAL_InitTick+0x54>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_InitTick+0x58>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	4619      	mov	r1, r3
 80043e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f967 	bl	80046c2 <HAL_SYSTICK_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e00e      	b.n	800441c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b0f      	cmp	r3, #15
 8004402:	d80a      	bhi.n	800441a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004404:	2200      	movs	r2, #0
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	f000 f92f 	bl	800466e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004410:	4a06      	ldr	r2, [pc, #24]	; (800442c <HAL_InitTick+0x5c>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e000      	b.n	800441c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000108 	.word	0x20000108
 8004428:	20000114 	.word	0x20000114
 800442c:	20000110 	.word	0x20000110

08004430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004434:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_IncTick+0x20>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_IncTick+0x24>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4413      	add	r3, r2
 8004440:	4a04      	ldr	r2, [pc, #16]	; (8004454 <HAL_IncTick+0x24>)
 8004442:	6013      	str	r3, [r2, #0]
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000114 	.word	0x20000114
 8004454:	20000b38 	.word	0x20000b38

08004458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return uwTick;
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <HAL_GetTick+0x14>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000b38 	.word	0x20000b38

08004470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004478:	f7ff ffee 	bl	8004458 <HAL_GetTick>
 800447c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d005      	beq.n	8004496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800448a:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <HAL_Delay+0x44>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004496:	bf00      	nop
 8004498:	f7ff ffde 	bl	8004458 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d8f7      	bhi.n	8004498 <HAL_Delay+0x28>
  {
  }
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000114 	.word	0x20000114

080044b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <__NVIC_SetPriorityGrouping+0x44>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d4:	4013      	ands	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ea:	4a04      	ldr	r2, [pc, #16]	; (80044fc <__NVIC_SetPriorityGrouping+0x44>)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	60d3      	str	r3, [r2, #12]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <__NVIC_GetPriorityGrouping+0x18>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	0a1b      	lsrs	r3, r3, #8
 800450a:	f003 0307 	and.w	r3, r3, #7
}
 800450e:	4618      	mov	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	2b00      	cmp	r3, #0
 800452c:	db0b      	blt.n	8004546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	f003 021f 	and.w	r2, r3, #31
 8004534:	4907      	ldr	r1, [pc, #28]	; (8004554 <__NVIC_EnableIRQ+0x38>)
 8004536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	2001      	movs	r0, #1
 800453e:	fa00 f202 	lsl.w	r2, r0, r2
 8004542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	e000e100 	.word	0xe000e100

08004558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	6039      	str	r1, [r7, #0]
 8004562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004568:	2b00      	cmp	r3, #0
 800456a:	db0a      	blt.n	8004582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	490c      	ldr	r1, [pc, #48]	; (80045a4 <__NVIC_SetPriority+0x4c>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	440b      	add	r3, r1
 800457c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004580:	e00a      	b.n	8004598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	4908      	ldr	r1, [pc, #32]	; (80045a8 <__NVIC_SetPriority+0x50>)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3b04      	subs	r3, #4
 8004590:	0112      	lsls	r2, r2, #4
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	440b      	add	r3, r1
 8004596:	761a      	strb	r2, [r3, #24]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000e100 	.word	0xe000e100
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	; 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f1c3 0307 	rsb	r3, r3, #7
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	bf28      	it	cs
 80045ca:	2304      	movcs	r3, #4
 80045cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d902      	bls.n	80045dc <NVIC_EncodePriority+0x30>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3b03      	subs	r3, #3
 80045da:	e000      	b.n	80045de <NVIC_EncodePriority+0x32>
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43da      	mvns	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	401a      	ands	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f4:	f04f 31ff 	mov.w	r1, #4294967295
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	43d9      	mvns	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004604:	4313      	orrs	r3, r2
         );
}
 8004606:	4618      	mov	r0, r3
 8004608:	3724      	adds	r7, #36	; 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004624:	d301      	bcc.n	800462a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004626:	2301      	movs	r3, #1
 8004628:	e00f      	b.n	800464a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <SysTick_Config+0x40>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3b01      	subs	r3, #1
 8004630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004632:	210f      	movs	r1, #15
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	f7ff ff8e 	bl	8004558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <SysTick_Config+0x40>)
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004642:	4b04      	ldr	r3, [pc, #16]	; (8004654 <SysTick_Config+0x40>)
 8004644:	2207      	movs	r2, #7
 8004646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	e000e010 	.word	0xe000e010

08004658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ff29 	bl	80044b8 <__NVIC_SetPriorityGrouping>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800466e:	b580      	push	{r7, lr}
 8004670:	b086      	sub	sp, #24
 8004672:	af00      	add	r7, sp, #0
 8004674:	4603      	mov	r3, r0
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004680:	f7ff ff3e 	bl	8004500 <__NVIC_GetPriorityGrouping>
 8004684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	6978      	ldr	r0, [r7, #20]
 800468c:	f7ff ff8e 	bl	80045ac <NVIC_EncodePriority>
 8004690:	4602      	mov	r2, r0
 8004692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff5d 	bl	8004558 <__NVIC_SetPriority>
}
 800469e:	bf00      	nop
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ff31 	bl	800451c <__NVIC_EnableIRQ>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff ffa2 	bl	8004614 <SysTick_Config>
 80046d0:	4603      	mov	r3, r0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e00e      	b.n	800470a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	795b      	ldrb	r3, [r3, #5]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d105      	bne.n	8004702 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7fe fbd3 	bl	8002ea8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004712:	b480      	push	{r7}
 8004714:	b087      	sub	sp, #28
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2202      	movs	r2, #2
 8004726:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e00a      	b.n	8004754 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	441a      	add	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	3301      	adds	r3, #1
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d3f0      	bcc.n	800473e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800476a:	693b      	ldr	r3, [r7, #16]
}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004784:	f7ff fe68 	bl	8004458 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e099      	b.n	80048c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047b4:	e00f      	b.n	80047d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047b6:	f7ff fe4f 	bl	8004458 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b05      	cmp	r3, #5
 80047c2:	d908      	bls.n	80047d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2203      	movs	r2, #3
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e078      	b.n	80048c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e8      	bne.n	80047b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4b38      	ldr	r3, [pc, #224]	; (80048d0 <HAL_DMA_Init+0x158>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800480e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	2b04      	cmp	r3, #4
 800482e:	d107      	bne.n	8004840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	4313      	orrs	r3, r2
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0307 	bic.w	r3, r3, #7
 8004856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b04      	cmp	r3, #4
 8004868:	d117      	bne.n	800489a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fb01 	bl	8004e84 <DMA_CheckFifoParam>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2240      	movs	r2, #64	; 0x40
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004896:	2301      	movs	r3, #1
 8004898:	e016      	b.n	80048c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fab8 	bl	8004e18 <DMA_CalcBaseAndBitshift>
 80048a8:	4603      	mov	r3, r0
 80048aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b0:	223f      	movs	r2, #63	; 0x3f
 80048b2:	409a      	lsls	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	f010803f 	.word	0xf010803f

080048d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_DMA_Start_IT+0x26>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e040      	b.n	800497c <HAL_DMA_Start_IT+0xa8>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d12f      	bne.n	800496e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2202      	movs	r2, #2
 8004912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fa4a 	bl	8004dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	223f      	movs	r2, #63	; 0x3f
 800492e:	409a      	lsls	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0216 	orr.w	r2, r2, #22
 8004942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0208 	orr.w	r2, r2, #8
 800495a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e005      	b.n	800497a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004976:	2302      	movs	r3, #2
 8004978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800497a:	7dfb      	ldrb	r3, [r7, #23]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004992:	f7ff fd61 	bl	8004458 <HAL_GetTick>
 8004996:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d008      	beq.n	80049b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2280      	movs	r2, #128	; 0x80
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e052      	b.n	8004a5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0216 	bic.w	r2, r2, #22
 80049c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <HAL_DMA_Abort+0x62>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0208 	bic.w	r2, r2, #8
 80049f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a06:	e013      	b.n	8004a30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a08:	f7ff fd26 	bl	8004458 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b05      	cmp	r3, #5
 8004a14:	d90c      	bls.n	8004a30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2203      	movs	r2, #3
 8004a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e015      	b.n	8004a5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e4      	bne.n	8004a08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a42:	223f      	movs	r2, #63	; 0x3f
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d004      	beq.n	8004a82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2280      	movs	r2, #128	; 0x80
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e00c      	b.n	8004a9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2205      	movs	r2, #5
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ab4:	4b8e      	ldr	r3, [pc, #568]	; (8004cf0 <HAL_DMA_IRQHandler+0x248>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a8e      	ldr	r2, [pc, #568]	; (8004cf4 <HAL_DMA_IRQHandler+0x24c>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0a9b      	lsrs	r3, r3, #10
 8004ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01a      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d013      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0204 	bic.w	r2, r2, #4
 8004afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b00:	2208      	movs	r2, #8
 8004b02:	409a      	lsls	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0c:	f043 0201 	orr.w	r2, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b18:	2201      	movs	r2, #1
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d012      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b36:	2201      	movs	r2, #1
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b42:	f043 0202 	orr.w	r2, r3, #2
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4e:	2204      	movs	r2, #4
 8004b50:	409a      	lsls	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d012      	beq.n	8004b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	409a      	lsls	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b78:	f043 0204 	orr.w	r2, r3, #4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b84:	2210      	movs	r2, #16
 8004b86:	409a      	lsls	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d043      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d03c      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d018      	beq.n	8004bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d108      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d024      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
 8004bd6:	e01f      	b.n	8004c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	4798      	blx	r3
 8004be8:	e016      	b.n	8004c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d107      	bne.n	8004c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0208 	bic.w	r2, r2, #8
 8004c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 808f 	beq.w	8004d48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8087 	beq.w	8004d48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	2220      	movs	r2, #32
 8004c40:	409a      	lsls	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d136      	bne.n	8004cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0216 	bic.w	r2, r2, #22
 8004c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695a      	ldr	r2, [r3, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <HAL_DMA_IRQHandler+0x1da>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0208 	bic.w	r2, r2, #8
 8004c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	223f      	movs	r2, #63	; 0x3f
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d07e      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
        }
        return;
 8004cbe:	e079      	b.n	8004db4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01d      	beq.n	8004d0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10d      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d031      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
 8004cec:	e02c      	b.n	8004d48 <HAL_DMA_IRQHandler+0x2a0>
 8004cee:	bf00      	nop
 8004cf0:	20000108 	.word	0x20000108
 8004cf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d023      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
 8004d08:	e01e      	b.n	8004d48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10f      	bne.n	8004d38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0210 	bic.w	r2, r2, #16
 8004d26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d032      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d022      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2205      	movs	r2, #5
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d307      	bcc.n	8004d90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f2      	bne.n	8004d74 <HAL_DMA_IRQHandler+0x2cc>
 8004d8e:	e000      	b.n	8004d92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
 8004db2:	e000      	b.n	8004db6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004db4:	bf00      	nop
    }
  }
}
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d108      	bne.n	8004dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dfa:	e007      	b.n	8004e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	60da      	str	r2, [r3, #12]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	3b10      	subs	r3, #16
 8004e28:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <DMA_CalcBaseAndBitshift+0x64>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	091b      	lsrs	r3, r3, #4
 8004e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e32:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <DMA_CalcBaseAndBitshift+0x68>)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d909      	bls.n	8004e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	1d1a      	adds	r2, r3, #4
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	659a      	str	r2, [r3, #88]	; 0x58
 8004e58:	e007      	b.n	8004e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	aaaaaaab 	.word	0xaaaaaaab
 8004e80:	0800e580 	.word	0x0800e580

08004e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d11f      	bne.n	8004ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d856      	bhi.n	8004f52 <DMA_CheckFifoParam+0xce>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <DMA_CheckFifoParam+0x28>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ebd 	.word	0x08004ebd
 8004eb0:	08004ecf 	.word	0x08004ecf
 8004eb4:	08004ebd 	.word	0x08004ebd
 8004eb8:	08004f53 	.word	0x08004f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d046      	beq.n	8004f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ecc:	e043      	b.n	8004f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ed6:	d140      	bne.n	8004f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004edc:	e03d      	b.n	8004f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee6:	d121      	bne.n	8004f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d837      	bhi.n	8004f5e <DMA_CheckFifoParam+0xda>
 8004eee:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <DMA_CheckFifoParam+0x70>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f0b 	.word	0x08004f0b
 8004efc:	08004f05 	.word	0x08004f05
 8004f00:	08004f1d 	.word	0x08004f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e030      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d025      	beq.n	8004f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1a:	e022      	b.n	8004f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f24:	d11f      	bne.n	8004f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f2a:	e01c      	b.n	8004f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d903      	bls.n	8004f3a <DMA_CheckFifoParam+0xb6>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d003      	beq.n	8004f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f38:	e018      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3e:	e015      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f50:	e00b      	b.n	8004f6a <DMA_CheckFifoParam+0xe6>
      break;
 8004f52:	bf00      	nop
 8004f54:	e00a      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;
 8004f56:	bf00      	nop
 8004f58:	e008      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e006      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e004      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;
 8004f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f8e:	4b23      	ldr	r3, [pc, #140]	; (800501c <HAL_FLASH_Program+0xa0>)
 8004f90:	7e1b      	ldrb	r3, [r3, #24]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_FLASH_Program+0x1e>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e03b      	b.n	8005012 <HAL_FLASH_Program+0x96>
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_FLASH_Program+0xa0>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fa4:	f000 f87c 	bl	80050a0 <FLASH_WaitForLastOperation>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d12b      	bne.n	800500a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004fb8:	783b      	ldrb	r3, [r7, #0]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	68b8      	ldr	r0, [r7, #8]
 8004fbe:	f000 f927 	bl	8005210 <FLASH_Program_Byte>
 8004fc2:	e016      	b.n	8004ff2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d105      	bne.n	8004fd6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004fca:	883b      	ldrh	r3, [r7, #0]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	68b8      	ldr	r0, [r7, #8]
 8004fd0:	f000 f8fa 	bl	80051c8 <FLASH_Program_HalfWord>
 8004fd4:	e00d      	b.n	8004ff2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d105      	bne.n	8004fe8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	68b8      	ldr	r0, [r7, #8]
 8004fe2:	f000 f8cf 	bl	8005184 <FLASH_Program_Word>
 8004fe6:	e004      	b.n	8004ff2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fec:	68b8      	ldr	r0, [r7, #8]
 8004fee:	f000 f897 	bl	8005120 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ff2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ff6:	f000 f853 	bl	80050a0 <FLASH_WaitForLastOperation>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <HAL_FLASH_Program+0xa4>)
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	4a07      	ldr	r2, [pc, #28]	; (8005020 <HAL_FLASH_Program+0xa4>)
 8005004:	f023 0301 	bic.w	r3, r3, #1
 8005008:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800500a:	4b04      	ldr	r3, [pc, #16]	; (800501c <HAL_FLASH_Program+0xa0>)
 800500c:	2200      	movs	r2, #0
 800500e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005010:	7dfb      	ldrb	r3, [r7, #23]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000b3c 	.word	0x20000b3c
 8005020:	40023c00 	.word	0x40023c00

08005024 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800502e:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_FLASH_Unlock+0x38>)
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	da0b      	bge.n	800504e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005036:	4b09      	ldr	r3, [pc, #36]	; (800505c <HAL_FLASH_Unlock+0x38>)
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <HAL_FLASH_Unlock+0x3c>)
 800503a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <HAL_FLASH_Unlock+0x38>)
 800503e:	4a09      	ldr	r2, [pc, #36]	; (8005064 <HAL_FLASH_Unlock+0x40>)
 8005040:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_FLASH_Unlock+0x38>)
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	da01      	bge.n	800504e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800504e:	79fb      	ldrb	r3, [r7, #7]
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40023c00 	.word	0x40023c00
 8005060:	45670123 	.word	0x45670123
 8005064:	cdef89ab 	.word	0xcdef89ab

08005068 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_FLASH_Lock+0x1c>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	4a04      	ldr	r2, [pc, #16]	; (8005084 <HAL_FLASH_Lock+0x1c>)
 8005072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005076:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40023c00 	.word	0x40023c00

08005088 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <HAL_FLASH_GetError+0x14>)
 800508e:	69db      	ldr	r3, [r3, #28]
}  
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20000b3c 	.word	0x20000b3c

080050a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80050ac:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <FLASH_WaitForLastOperation+0x78>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80050b2:	f7ff f9d1 	bl	8004458 <HAL_GetTick>
 80050b6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80050b8:	e010      	b.n	80050dc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d00c      	beq.n	80050dc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <FLASH_WaitForLastOperation+0x38>
 80050c8:	f7ff f9c6 	bl	8004458 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d201      	bcs.n	80050dc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e019      	b.n	8005110 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80050dc:	4b0f      	ldr	r3, [pc, #60]	; (800511c <FLASH_WaitForLastOperation+0x7c>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e8      	bne.n	80050ba <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <FLASH_WaitForLastOperation+0x7c>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80050f4:	4b09      	ldr	r3, [pc, #36]	; (800511c <FLASH_WaitForLastOperation+0x7c>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80050fa:	4b08      	ldr	r3, [pc, #32]	; (800511c <FLASH_WaitForLastOperation+0x7c>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005106:	f000 f8a5 	bl	8005254 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
  
}  
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000b3c 	.word	0x20000b3c
 800511c:	40023c00 	.word	0x40023c00

08005120 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <FLASH_Program_DoubleWord+0x60>)
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	4a13      	ldr	r2, [pc, #76]	; (8005180 <FLASH_Program_DoubleWord+0x60>)
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <FLASH_Program_DoubleWord+0x60>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	4a10      	ldr	r2, [pc, #64]	; (8005180 <FLASH_Program_DoubleWord+0x60>)
 800513e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005142:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <FLASH_Program_DoubleWord+0x60>)
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	4a0d      	ldr	r2, [pc, #52]	; (8005180 <FLASH_Program_DoubleWord+0x60>)
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005156:	f3bf 8f6f 	isb	sy
}
 800515a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800515c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	000a      	movs	r2, r1
 800516a:	2300      	movs	r3, #0
 800516c:	68f9      	ldr	r1, [r7, #12]
 800516e:	3104      	adds	r1, #4
 8005170:	4613      	mov	r3, r2
 8005172:	600b      	str	r3, [r1, #0]
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40023c00 	.word	0x40023c00

08005184 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <FLASH_Program_Word+0x40>)
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	4a0c      	ldr	r2, [pc, #48]	; (80051c4 <FLASH_Program_Word+0x40>)
 8005194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005198:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <FLASH_Program_Word+0x40>)
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <FLASH_Program_Word+0x40>)
 80051a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80051a6:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <FLASH_Program_Word+0x40>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	4a06      	ldr	r2, [pc, #24]	; (80051c4 <FLASH_Program_Word+0x40>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	601a      	str	r2, [r3, #0]
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40023c00 	.word	0x40023c00

080051c8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051d4:	4b0d      	ldr	r3, [pc, #52]	; (800520c <FLASH_Program_HalfWord+0x44>)
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	4a0c      	ldr	r2, [pc, #48]	; (800520c <FLASH_Program_HalfWord+0x44>)
 80051da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <FLASH_Program_HalfWord+0x44>)
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	4a09      	ldr	r2, [pc, #36]	; (800520c <FLASH_Program_HalfWord+0x44>)
 80051e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80051ec:	4b07      	ldr	r3, [pc, #28]	; (800520c <FLASH_Program_HalfWord+0x44>)
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	4a06      	ldr	r2, [pc, #24]	; (800520c <FLASH_Program_HalfWord+0x44>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	887a      	ldrh	r2, [r7, #2]
 80051fc:	801a      	strh	r2, [r3, #0]
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40023c00 	.word	0x40023c00

08005210 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <FLASH_Program_Byte+0x40>)
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	4a0b      	ldr	r2, [pc, #44]	; (8005250 <FLASH_Program_Byte+0x40>)
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005228:	4b09      	ldr	r3, [pc, #36]	; (8005250 <FLASH_Program_Byte+0x40>)
 800522a:	4a09      	ldr	r2, [pc, #36]	; (8005250 <FLASH_Program_Byte+0x40>)
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <FLASH_Program_Byte+0x40>)
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	4a06      	ldr	r2, [pc, #24]	; (8005250 <FLASH_Program_Byte+0x40>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	78fa      	ldrb	r2, [r7, #3]
 8005240:	701a      	strb	r2, [r3, #0]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40023c00 	.word	0x40023c00

08005254 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005258:	4b2f      	ldr	r3, [pc, #188]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005264:	4b2d      	ldr	r3, [pc, #180]	; (800531c <FLASH_SetErrorCode+0xc8>)
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f043 0310 	orr.w	r3, r3, #16
 800526c:	4a2b      	ldr	r2, [pc, #172]	; (800531c <FLASH_SetErrorCode+0xc8>)
 800526e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005270:	4b29      	ldr	r3, [pc, #164]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 8005272:	2210      	movs	r2, #16
 8005274:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005276:	4b28      	ldr	r3, [pc, #160]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d008      	beq.n	8005294 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005282:	4b26      	ldr	r3, [pc, #152]	; (800531c <FLASH_SetErrorCode+0xc8>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f043 0308 	orr.w	r3, r3, #8
 800528a:	4a24      	ldr	r2, [pc, #144]	; (800531c <FLASH_SetErrorCode+0xc8>)
 800528c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800528e:	4b22      	ldr	r3, [pc, #136]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 8005290:	2220      	movs	r2, #32
 8005292:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005294:	4b20      	ldr	r3, [pc, #128]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80052a0:	4b1e      	ldr	r3, [pc, #120]	; (800531c <FLASH_SetErrorCode+0xc8>)
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f043 0304 	orr.w	r3, r3, #4
 80052a8:	4a1c      	ldr	r2, [pc, #112]	; (800531c <FLASH_SetErrorCode+0xc8>)
 80052aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 80052ae:	2240      	movs	r2, #64	; 0x40
 80052b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80052b2:	4b19      	ldr	r3, [pc, #100]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80052be:	4b17      	ldr	r3, [pc, #92]	; (800531c <FLASH_SetErrorCode+0xc8>)
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f043 0302 	orr.w	r3, r3, #2
 80052c6:	4a15      	ldr	r2, [pc, #84]	; (800531c <FLASH_SetErrorCode+0xc8>)
 80052c8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80052ca:	4b13      	ldr	r3, [pc, #76]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 80052cc:	2280      	movs	r2, #128	; 0x80
 80052ce:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80052d0:	4b11      	ldr	r3, [pc, #68]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d009      	beq.n	80052f0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <FLASH_SetErrorCode+0xc8>)
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	4a0d      	ldr	r2, [pc, #52]	; (800531c <FLASH_SetErrorCode+0xc8>)
 80052e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 80052ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052ee:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80052fc:	4b07      	ldr	r3, [pc, #28]	; (800531c <FLASH_SetErrorCode+0xc8>)
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f043 0320 	orr.w	r3, r3, #32
 8005304:	4a05      	ldr	r2, [pc, #20]	; (800531c <FLASH_SetErrorCode+0xc8>)
 8005306:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005308:	4b03      	ldr	r3, [pc, #12]	; (8005318 <FLASH_SetErrorCode+0xc4>)
 800530a:	2202      	movs	r2, #2
 800530c:	60da      	str	r2, [r3, #12]
  }
}
 800530e:	bf00      	nop
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40023c00 	.word	0x40023c00
 800531c:	20000b3c 	.word	0x20000b3c

08005320 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005332:	4b31      	ldr	r3, [pc, #196]	; (80053f8 <HAL_FLASHEx_Erase+0xd8>)
 8005334:	7e1b      	ldrb	r3, [r3, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_FLASHEx_Erase+0x1e>
 800533a:	2302      	movs	r3, #2
 800533c:	e058      	b.n	80053f0 <HAL_FLASHEx_Erase+0xd0>
 800533e:	4b2e      	ldr	r3, [pc, #184]	; (80053f8 <HAL_FLASHEx_Erase+0xd8>)
 8005340:	2201      	movs	r2, #1
 8005342:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005344:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005348:	f7ff feaa 	bl	80050a0 <FLASH_WaitForLastOperation>
 800534c:	4603      	mov	r3, r0
 800534e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d148      	bne.n	80053e8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f04f 32ff 	mov.w	r2, #4294967295
 800535c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d115      	bne.n	8005392 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f000 f844 	bl	8005400 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005378:	f24c 3050 	movw	r0, #50000	; 0xc350
 800537c:	f7ff fe90 	bl	80050a0 <FLASH_WaitForLastOperation>
 8005380:	4603      	mov	r3, r0
 8005382:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005384:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <HAL_FLASHEx_Erase+0xdc>)
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	4a1c      	ldr	r2, [pc, #112]	; (80053fc <HAL_FLASHEx_Erase+0xdc>)
 800538a:	f023 0304 	bic.w	r3, r3, #4
 800538e:	6113      	str	r3, [r2, #16]
 8005390:	e028      	b.n	80053e4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	e01c      	b.n	80053d4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	4619      	mov	r1, r3
 80053a2:	68b8      	ldr	r0, [r7, #8]
 80053a4:	f000 f850 	bl	8005448 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053ac:	f7ff fe78 	bl	80050a0 <FLASH_WaitForLastOperation>
 80053b0:	4603      	mov	r3, r0
 80053b2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80053b4:	4b11      	ldr	r3, [pc, #68]	; (80053fc <HAL_FLASHEx_Erase+0xdc>)
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	4a10      	ldr	r2, [pc, #64]	; (80053fc <HAL_FLASHEx_Erase+0xdc>)
 80053ba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80053be:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	601a      	str	r2, [r3, #0]
          break;
 80053cc:	e00a      	b.n	80053e4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	3301      	adds	r3, #1
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4413      	add	r3, r2
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d3da      	bcc.n	800539a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80053e4:	f000 f878 	bl	80054d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <HAL_FLASHEx_Erase+0xd8>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	761a      	strb	r2, [r3, #24]

  return status;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20000b3c 	.word	0x20000b3c
 80053fc:	40023c00 	.word	0x40023c00

08005400 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	6039      	str	r1, [r7, #0]
 800540a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <FLASH_MassErase+0x44>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	4a0c      	ldr	r2, [pc, #48]	; (8005444 <FLASH_MassErase+0x44>)
 8005412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005416:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <FLASH_MassErase+0x44>)
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	4a09      	ldr	r2, [pc, #36]	; (8005444 <FLASH_MassErase+0x44>)
 800541e:	f043 0304 	orr.w	r3, r3, #4
 8005422:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005424:	4b07      	ldr	r3, [pc, #28]	; (8005444 <FLASH_MassErase+0x44>)
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	4313      	orrs	r3, r2
 800542e:	4a05      	ldr	r2, [pc, #20]	; (8005444 <FLASH_MassErase+0x44>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	6113      	str	r3, [r2, #16]
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40023c00 	.word	0x40023c00

08005448 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e010      	b.n	8005486 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d103      	bne.n	8005472 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800546a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e009      	b.n	8005486 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d103      	bne.n	8005480 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e002      	b.n	8005486 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005480:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005484:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005486:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <FLASH_Erase_Sector+0x8c>)
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	4a12      	ldr	r2, [pc, #72]	; (80054d4 <FLASH_Erase_Sector+0x8c>)
 800548c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005490:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005492:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <FLASH_Erase_Sector+0x8c>)
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	490f      	ldr	r1, [pc, #60]	; (80054d4 <FLASH_Erase_Sector+0x8c>)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800549e:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <FLASH_Erase_Sector+0x8c>)
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	4a0c      	ldr	r2, [pc, #48]	; (80054d4 <FLASH_Erase_Sector+0x8c>)
 80054a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80054a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <FLASH_Erase_Sector+0x8c>)
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	4313      	orrs	r3, r2
 80054b4:	4a07      	ldr	r2, [pc, #28]	; (80054d4 <FLASH_Erase_Sector+0x8c>)
 80054b6:	f043 0302 	orr.w	r3, r3, #2
 80054ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <FLASH_Erase_Sector+0x8c>)
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <FLASH_Erase_Sector+0x8c>)
 80054c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c6:	6113      	str	r3, [r2, #16]
}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40023c00 	.word	0x40023c00

080054d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80054dc:	4b20      	ldr	r3, [pc, #128]	; (8005560 <FLASH_FlushCaches+0x88>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d017      	beq.n	8005518 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80054e8:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <FLASH_FlushCaches+0x88>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1c      	ldr	r2, [pc, #112]	; (8005560 <FLASH_FlushCaches+0x88>)
 80054ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80054f4:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <FLASH_FlushCaches+0x88>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a19      	ldr	r2, [pc, #100]	; (8005560 <FLASH_FlushCaches+0x88>)
 80054fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <FLASH_FlushCaches+0x88>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a16      	ldr	r2, [pc, #88]	; (8005560 <FLASH_FlushCaches+0x88>)
 8005506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800550a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800550c:	4b14      	ldr	r3, [pc, #80]	; (8005560 <FLASH_FlushCaches+0x88>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a13      	ldr	r2, [pc, #76]	; (8005560 <FLASH_FlushCaches+0x88>)
 8005512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005516:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005518:	4b11      	ldr	r3, [pc, #68]	; (8005560 <FLASH_FlushCaches+0x88>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005520:	2b00      	cmp	r3, #0
 8005522:	d017      	beq.n	8005554 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005524:	4b0e      	ldr	r3, [pc, #56]	; (8005560 <FLASH_FlushCaches+0x88>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a0d      	ldr	r2, [pc, #52]	; (8005560 <FLASH_FlushCaches+0x88>)
 800552a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <FLASH_FlushCaches+0x88>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <FLASH_FlushCaches+0x88>)
 8005536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	4b08      	ldr	r3, [pc, #32]	; (8005560 <FLASH_FlushCaches+0x88>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a07      	ldr	r2, [pc, #28]	; (8005560 <FLASH_FlushCaches+0x88>)
 8005542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005546:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005548:	4b05      	ldr	r3, [pc, #20]	; (8005560 <FLASH_FlushCaches+0x88>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <FLASH_FlushCaches+0x88>)
 800554e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005552:	6013      	str	r3, [r2, #0]
  }
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40023c00 	.word	0x40023c00

08005564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005564:	b480      	push	{r7}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005572:	2300      	movs	r3, #0
 8005574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005576:	2300      	movs	r3, #0
 8005578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	e159      	b.n	8005834 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005580:	2201      	movs	r2, #1
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4013      	ands	r3, r2
 8005592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	429a      	cmp	r2, r3
 800559a:	f040 8148 	bne.w	800582e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d005      	beq.n	80055b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d130      	bne.n	8005618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	2203      	movs	r2, #3
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43db      	mvns	r3, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4013      	ands	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	4313      	orrs	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055ec:	2201      	movs	r2, #1
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	43db      	mvns	r3, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4013      	ands	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 0201 	and.w	r2, r3, #1
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	2b03      	cmp	r3, #3
 8005622:	d017      	beq.n	8005654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	2203      	movs	r2, #3
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4013      	ands	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	4313      	orrs	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d123      	bne.n	80056a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	08da      	lsrs	r2, r3, #3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3208      	adds	r2, #8
 8005668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	220f      	movs	r2, #15
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	43db      	mvns	r3, r3
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4013      	ands	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	4313      	orrs	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	08da      	lsrs	r2, r3, #3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3208      	adds	r2, #8
 80056a2:	69b9      	ldr	r1, [r7, #24]
 80056a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	2203      	movs	r2, #3
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	43db      	mvns	r3, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4013      	ands	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f003 0203 	and.w	r2, r3, #3
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80a2 	beq.w	800582e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	4b57      	ldr	r3, [pc, #348]	; (800584c <HAL_GPIO_Init+0x2e8>)
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	4a56      	ldr	r2, [pc, #344]	; (800584c <HAL_GPIO_Init+0x2e8>)
 80056f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056f8:	6453      	str	r3, [r2, #68]	; 0x44
 80056fa:	4b54      	ldr	r3, [pc, #336]	; (800584c <HAL_GPIO_Init+0x2e8>)
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005706:	4a52      	ldr	r2, [pc, #328]	; (8005850 <HAL_GPIO_Init+0x2ec>)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	089b      	lsrs	r3, r3, #2
 800570c:	3302      	adds	r3, #2
 800570e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	220f      	movs	r2, #15
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43db      	mvns	r3, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4013      	ands	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a49      	ldr	r2, [pc, #292]	; (8005854 <HAL_GPIO_Init+0x2f0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d019      	beq.n	8005766 <HAL_GPIO_Init+0x202>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a48      	ldr	r2, [pc, #288]	; (8005858 <HAL_GPIO_Init+0x2f4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_GPIO_Init+0x1fe>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a47      	ldr	r2, [pc, #284]	; (800585c <HAL_GPIO_Init+0x2f8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00d      	beq.n	800575e <HAL_GPIO_Init+0x1fa>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a46      	ldr	r2, [pc, #280]	; (8005860 <HAL_GPIO_Init+0x2fc>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d007      	beq.n	800575a <HAL_GPIO_Init+0x1f6>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a45      	ldr	r2, [pc, #276]	; (8005864 <HAL_GPIO_Init+0x300>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d101      	bne.n	8005756 <HAL_GPIO_Init+0x1f2>
 8005752:	2304      	movs	r3, #4
 8005754:	e008      	b.n	8005768 <HAL_GPIO_Init+0x204>
 8005756:	2307      	movs	r3, #7
 8005758:	e006      	b.n	8005768 <HAL_GPIO_Init+0x204>
 800575a:	2303      	movs	r3, #3
 800575c:	e004      	b.n	8005768 <HAL_GPIO_Init+0x204>
 800575e:	2302      	movs	r3, #2
 8005760:	e002      	b.n	8005768 <HAL_GPIO_Init+0x204>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <HAL_GPIO_Init+0x204>
 8005766:	2300      	movs	r3, #0
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	f002 0203 	and.w	r2, r2, #3
 800576e:	0092      	lsls	r2, r2, #2
 8005770:	4093      	lsls	r3, r2
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005778:	4935      	ldr	r1, [pc, #212]	; (8005850 <HAL_GPIO_Init+0x2ec>)
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	089b      	lsrs	r3, r3, #2
 800577e:	3302      	adds	r3, #2
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005786:	4b38      	ldr	r3, [pc, #224]	; (8005868 <HAL_GPIO_Init+0x304>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057aa:	4a2f      	ldr	r2, [pc, #188]	; (8005868 <HAL_GPIO_Init+0x304>)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057b0:	4b2d      	ldr	r3, [pc, #180]	; (8005868 <HAL_GPIO_Init+0x304>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057d4:	4a24      	ldr	r2, [pc, #144]	; (8005868 <HAL_GPIO_Init+0x304>)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057da:	4b23      	ldr	r3, [pc, #140]	; (8005868 <HAL_GPIO_Init+0x304>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	43db      	mvns	r3, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057fe:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <HAL_GPIO_Init+0x304>)
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005804:	4b18      	ldr	r3, [pc, #96]	; (8005868 <HAL_GPIO_Init+0x304>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005828:	4a0f      	ldr	r2, [pc, #60]	; (8005868 <HAL_GPIO_Init+0x304>)
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	3301      	adds	r3, #1
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	f67f aea2 	bls.w	8005580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	3724      	adds	r7, #36	; 0x24
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40023800 	.word	0x40023800
 8005850:	40013800 	.word	0x40013800
 8005854:	40020000 	.word	0x40020000
 8005858:	40020400 	.word	0x40020400
 800585c:	40020800 	.word	0x40020800
 8005860:	40020c00 	.word	0x40020c00
 8005864:	40021000 	.word	0x40021000
 8005868:	40013c00 	.word	0x40013c00

0800586c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	807b      	strh	r3, [r7, #2]
 8005878:	4613      	mov	r3, r2
 800587a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800587c:	787b      	ldrb	r3, [r7, #1]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005882:	887a      	ldrh	r2, [r7, #2]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005888:	e003      	b.n	8005892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800588a:	887b      	ldrh	r3, [r7, #2]
 800588c:	041a      	lsls	r2, r3, #16
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	619a      	str	r2, [r3, #24]
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e12b      	b.n	8005b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fd fbe4 	bl	8003094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2224      	movs	r2, #36	; 0x24
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005904:	f001 fbbc 	bl	8007080 <HAL_RCC_GetPCLK1Freq>
 8005908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	4a81      	ldr	r2, [pc, #516]	; (8005b14 <HAL_I2C_Init+0x274>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d807      	bhi.n	8005924 <HAL_I2C_Init+0x84>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a80      	ldr	r2, [pc, #512]	; (8005b18 <HAL_I2C_Init+0x278>)
 8005918:	4293      	cmp	r3, r2
 800591a:	bf94      	ite	ls
 800591c:	2301      	movls	r3, #1
 800591e:	2300      	movhi	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	e006      	b.n	8005932 <HAL_I2C_Init+0x92>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4a7d      	ldr	r2, [pc, #500]	; (8005b1c <HAL_I2C_Init+0x27c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	bf94      	ite	ls
 800592c:	2301      	movls	r3, #1
 800592e:	2300      	movhi	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e0e7      	b.n	8005b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a78      	ldr	r2, [pc, #480]	; (8005b20 <HAL_I2C_Init+0x280>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	0c9b      	lsrs	r3, r3, #18
 8005944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a6a      	ldr	r2, [pc, #424]	; (8005b14 <HAL_I2C_Init+0x274>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d802      	bhi.n	8005974 <HAL_I2C_Init+0xd4>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	3301      	adds	r3, #1
 8005972:	e009      	b.n	8005988 <HAL_I2C_Init+0xe8>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	4a69      	ldr	r2, [pc, #420]	; (8005b24 <HAL_I2C_Init+0x284>)
 8005980:	fba2 2303 	umull	r2, r3, r2, r3
 8005984:	099b      	lsrs	r3, r3, #6
 8005986:	3301      	adds	r3, #1
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	430b      	orrs	r3, r1
 800598e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800599a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	495c      	ldr	r1, [pc, #368]	; (8005b14 <HAL_I2C_Init+0x274>)
 80059a4:	428b      	cmp	r3, r1
 80059a6:	d819      	bhi.n	80059dc <HAL_I2C_Init+0x13c>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1e59      	subs	r1, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80059b6:	1c59      	adds	r1, r3, #1
 80059b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059bc:	400b      	ands	r3, r1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_I2C_Init+0x138>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1e59      	subs	r1, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80059d0:	3301      	adds	r3, #1
 80059d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d6:	e051      	b.n	8005a7c <HAL_I2C_Init+0x1dc>
 80059d8:	2304      	movs	r3, #4
 80059da:	e04f      	b.n	8005a7c <HAL_I2C_Init+0x1dc>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d111      	bne.n	8005a08 <HAL_I2C_Init+0x168>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	1e58      	subs	r0, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6859      	ldr	r1, [r3, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	440b      	add	r3, r1
 80059f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f6:	3301      	adds	r3, #1
 80059f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e012      	b.n	8005a2e <HAL_I2C_Init+0x18e>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1e58      	subs	r0, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	0099      	lsls	r1, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_I2C_Init+0x196>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e022      	b.n	8005a7c <HAL_I2C_Init+0x1dc>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10e      	bne.n	8005a5c <HAL_I2C_Init+0x1bc>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1e58      	subs	r0, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6859      	ldr	r1, [r3, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	440b      	add	r3, r1
 8005a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a50:	3301      	adds	r3, #1
 8005a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5a:	e00f      	b.n	8005a7c <HAL_I2C_Init+0x1dc>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1e58      	subs	r0, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6859      	ldr	r1, [r3, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	0099      	lsls	r1, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a72:	3301      	adds	r3, #1
 8005a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	6809      	ldr	r1, [r1, #0]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69da      	ldr	r2, [r3, #28]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6911      	ldr	r1, [r2, #16]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	68d2      	ldr	r2, [r2, #12]
 8005ab6:	4311      	orrs	r1, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6812      	ldr	r2, [r2, #0]
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	000186a0 	.word	0x000186a0
 8005b18:	001e847f 	.word	0x001e847f
 8005b1c:	003d08ff 	.word	0x003d08ff
 8005b20:	431bde83 	.word	0x431bde83
 8005b24:	10624dd3 	.word	0x10624dd3

08005b28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	461a      	mov	r2, r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	817b      	strh	r3, [r7, #10]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	813b      	strh	r3, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b42:	f7fe fc89 	bl	8004458 <HAL_GetTick>
 8005b46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	f040 80d9 	bne.w	8005d08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	2319      	movs	r3, #25
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	496d      	ldr	r1, [pc, #436]	; (8005d14 <HAL_I2C_Mem_Write+0x1ec>)
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fc7f 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e0cc      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_I2C_Mem_Write+0x56>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e0c5      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d007      	beq.n	8005ba4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2221      	movs	r2, #33	; 0x21
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2240      	movs	r2, #64	; 0x40
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a3a      	ldr	r2, [r7, #32]
 8005bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4a4d      	ldr	r2, [pc, #308]	; (8005d18 <HAL_I2C_Mem_Write+0x1f0>)
 8005be4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005be6:	88f8      	ldrh	r0, [r7, #6]
 8005be8:	893a      	ldrh	r2, [r7, #8]
 8005bea:	8979      	ldrh	r1, [r7, #10]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fab6 	bl	8006168 <I2C_RequestMemoryWrite>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d052      	beq.n	8005ca8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e081      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fd00 	bl	8006610 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d107      	bne.n	8005c2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e06b      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_I2C_Mem_Write+0x180>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d017      	beq.n	8005ca8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1aa      	bne.n	8005c06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fcec 	bl	8006692 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00d      	beq.n	8005cdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d107      	bne.n	8005cd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e016      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	00100002 	.word	0x00100002
 8005d18:	ffff0000 	.word	0xffff0000

08005d1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08c      	sub	sp, #48	; 0x30
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	817b      	strh	r3, [r7, #10]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	813b      	strh	r3, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d36:	f7fe fb8f 	bl	8004458 <HAL_GetTick>
 8005d3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	f040 8208 	bne.w	800615a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	2319      	movs	r3, #25
 8005d50:	2201      	movs	r2, #1
 8005d52:	497b      	ldr	r1, [pc, #492]	; (8005f40 <HAL_I2C_Mem_Read+0x224>)
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 fb85 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
 8005d62:	e1fb      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_I2C_Mem_Read+0x56>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e1f4      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d007      	beq.n	8005d98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2222      	movs	r2, #34	; 0x22
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2240      	movs	r2, #64	; 0x40
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4a5b      	ldr	r2, [pc, #364]	; (8005f44 <HAL_I2C_Mem_Read+0x228>)
 8005dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dda:	88f8      	ldrh	r0, [r7, #6]
 8005ddc:	893a      	ldrh	r2, [r7, #8]
 8005dde:	8979      	ldrh	r1, [r7, #10]
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	4603      	mov	r3, r0
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fa52 	bl	8006294 <I2C_RequestMemoryRead>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e1b0      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d113      	bne.n	8005e2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e02:	2300      	movs	r3, #0
 8005e04:	623b      	str	r3, [r7, #32]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e184      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d11b      	bne.n	8005e6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e164      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d11b      	bne.n	8005eaa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	e144      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ec0:	e138      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	f200 80f1 	bhi.w	80060ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d123      	bne.n	8005f1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fc1b 	bl	8006714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e139      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f1a:	e10b      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d14e      	bne.n	8005fc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4906      	ldr	r1, [pc, #24]	; (8005f48 <HAL_I2C_Mem_Read+0x22c>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 fa98 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e10e      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
 8005f3e:	bf00      	nop
 8005f40:	00100002 	.word	0x00100002
 8005f44:	ffff0000 	.word	0xffff0000
 8005f48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fc0:	e0b8      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4966      	ldr	r1, [pc, #408]	; (8006164 <HAL_I2C_Mem_Read+0x448>)
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fa49 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0bf      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	2200      	movs	r2, #0
 8006026:	494f      	ldr	r1, [pc, #316]	; (8006164 <HAL_I2C_Mem_Read+0x448>)
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 fa1b 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e091      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060ac:	e042      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fb2e 	bl	8006714 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e04c      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d118      	bne.n	8006134 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006138:	2b00      	cmp	r3, #0
 800613a:	f47f aec2 	bne.w	8005ec2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e000      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3728      	adds	r7, #40	; 0x28
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	00010004 	.word	0x00010004

08006168 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	4608      	mov	r0, r1
 8006172:	4611      	mov	r1, r2
 8006174:	461a      	mov	r2, r3
 8006176:	4603      	mov	r3, r0
 8006178:	817b      	strh	r3, [r7, #10]
 800617a:	460b      	mov	r3, r1
 800617c:	813b      	strh	r3, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	2200      	movs	r2, #0
 800619a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f960 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00d      	beq.n	80061c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b8:	d103      	bne.n	80061c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e05f      	b.n	8006286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061c6:	897b      	ldrh	r3, [r7, #10]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	492d      	ldr	r1, [pc, #180]	; (8006290 <I2C_RequestMemoryWrite+0x128>)
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f998 	bl	8006512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e04c      	b.n	8006286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006204:	6a39      	ldr	r1, [r7, #32]
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 fa02 	bl	8006610 <I2C_WaitOnTXEFlagUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00d      	beq.n	800622e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	2b04      	cmp	r3, #4
 8006218:	d107      	bne.n	800622a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e02b      	b.n	8006286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d105      	bne.n	8006240 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006234:	893b      	ldrh	r3, [r7, #8]
 8006236:	b2da      	uxtb	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	611a      	str	r2, [r3, #16]
 800623e:	e021      	b.n	8006284 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006240:	893b      	ldrh	r3, [r7, #8]
 8006242:	0a1b      	lsrs	r3, r3, #8
 8006244:	b29b      	uxth	r3, r3
 8006246:	b2da      	uxtb	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800624e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006250:	6a39      	ldr	r1, [r7, #32]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f9dc 	bl	8006610 <I2C_WaitOnTXEFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00d      	beq.n	800627a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b04      	cmp	r3, #4
 8006264:	d107      	bne.n	8006276 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e005      	b.n	8006286 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800627a:	893b      	ldrh	r3, [r7, #8]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	00010002 	.word	0x00010002

08006294 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	4608      	mov	r0, r1
 800629e:	4611      	mov	r1, r2
 80062a0:	461a      	mov	r2, r3
 80062a2:	4603      	mov	r3, r0
 80062a4:	817b      	strh	r3, [r7, #10]
 80062a6:	460b      	mov	r3, r1
 80062a8:	813b      	strh	r3, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 f8c2 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00d      	beq.n	8006302 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f4:	d103      	bne.n	80062fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e0aa      	b.n	8006458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006302:	897b      	ldrh	r3, [r7, #10]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006310:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	6a3a      	ldr	r2, [r7, #32]
 8006316:	4952      	ldr	r1, [pc, #328]	; (8006460 <I2C_RequestMemoryRead+0x1cc>)
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f8fa 	bl	8006512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e097      	b.n	8006458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800633e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006340:	6a39      	ldr	r1, [r7, #32]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f964 	bl	8006610 <I2C_WaitOnTXEFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00d      	beq.n	800636a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	2b04      	cmp	r3, #4
 8006354:	d107      	bne.n	8006366 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006364:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e076      	b.n	8006458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d105      	bne.n	800637c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006370:	893b      	ldrh	r3, [r7, #8]
 8006372:	b2da      	uxtb	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	611a      	str	r2, [r3, #16]
 800637a:	e021      	b.n	80063c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800637c:	893b      	ldrh	r3, [r7, #8]
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	b29b      	uxth	r3, r3
 8006382:	b2da      	uxtb	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800638a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638c:	6a39      	ldr	r1, [r7, #32]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 f93e 	bl	8006610 <I2C_WaitOnTXEFlagUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00d      	beq.n	80063b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d107      	bne.n	80063b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e050      	b.n	8006458 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063b6:	893b      	ldrh	r3, [r7, #8]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c2:	6a39      	ldr	r1, [r7, #32]
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 f923 	bl	8006610 <I2C_WaitOnTXEFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00d      	beq.n	80063ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d107      	bne.n	80063e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e035      	b.n	8006458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	2200      	movs	r2, #0
 8006404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f82b 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00d      	beq.n	8006430 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006422:	d103      	bne.n	800642c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800642a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e013      	b.n	8006458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006430:	897b      	ldrh	r3, [r7, #10]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f043 0301 	orr.w	r3, r3, #1
 8006438:	b2da      	uxtb	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	6a3a      	ldr	r2, [r7, #32]
 8006444:	4906      	ldr	r1, [pc, #24]	; (8006460 <I2C_RequestMemoryRead+0x1cc>)
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f863 	bl	8006512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	00010002 	.word	0x00010002

08006464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	4613      	mov	r3, r2
 8006472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006474:	e025      	b.n	80064c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647c:	d021      	beq.n	80064c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647e:	f7fd ffeb 	bl	8004458 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d116      	bne.n	80064c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f043 0220 	orr.w	r2, r3, #32
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e023      	b.n	800650a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	0c1b      	lsrs	r3, r3, #16
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d10d      	bne.n	80064e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	43da      	mvns	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4013      	ands	r3, r2
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf0c      	ite	eq
 80064de:	2301      	moveq	r3, #1
 80064e0:	2300      	movne	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	e00c      	b.n	8006502 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	43da      	mvns	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4013      	ands	r3, r2
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bf0c      	ite	eq
 80064fa:	2301      	moveq	r3, #1
 80064fc:	2300      	movne	r3, #0
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	461a      	mov	r2, r3
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	429a      	cmp	r2, r3
 8006506:	d0b6      	beq.n	8006476 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	607a      	str	r2, [r7, #4]
 800651e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006520:	e051      	b.n	80065c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800652c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006530:	d123      	bne.n	800657a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006540:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800654a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f043 0204 	orr.w	r2, r3, #4
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e046      	b.n	8006608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d021      	beq.n	80065c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006582:	f7fd ff69 	bl	8004458 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	429a      	cmp	r2, r3
 8006590:	d302      	bcc.n	8006598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d116      	bne.n	80065c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f043 0220 	orr.w	r2, r3, #32
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e020      	b.n	8006608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	0c1b      	lsrs	r3, r3, #16
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d10c      	bne.n	80065ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	43da      	mvns	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bf14      	ite	ne
 80065e2:	2301      	movne	r3, #1
 80065e4:	2300      	moveq	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	e00b      	b.n	8006602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	43da      	mvns	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	4013      	ands	r3, r2
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf14      	ite	ne
 80065fc:	2301      	movne	r3, #1
 80065fe:	2300      	moveq	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d18d      	bne.n	8006522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800661c:	e02d      	b.n	800667a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 f8ce 	bl	80067c0 <I2C_IsAcknowledgeFailed>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e02d      	b.n	800668a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d021      	beq.n	800667a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006636:	f7fd ff0f 	bl	8004458 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	429a      	cmp	r2, r3
 8006644:	d302      	bcc.n	800664c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d116      	bne.n	800667a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e007      	b.n	800668a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006684:	2b80      	cmp	r3, #128	; 0x80
 8006686:	d1ca      	bne.n	800661e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800669e:	e02d      	b.n	80066fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f88d 	bl	80067c0 <I2C_IsAcknowledgeFailed>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e02d      	b.n	800670c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d021      	beq.n	80066fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b8:	f7fd fece 	bl	8004458 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d302      	bcc.n	80066ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d116      	bne.n	80066fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e007      	b.n	800670c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b04      	cmp	r3, #4
 8006708:	d1ca      	bne.n	80066a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006720:	e042      	b.n	80067a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f003 0310 	and.w	r3, r3, #16
 800672c:	2b10      	cmp	r3, #16
 800672e:	d119      	bne.n	8006764 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f06f 0210 	mvn.w	r2, #16
 8006738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e029      	b.n	80067b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006764:	f7fd fe78 	bl	8004458 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	429a      	cmp	r2, r3
 8006772:	d302      	bcc.n	800677a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d116      	bne.n	80067a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	f043 0220 	orr.w	r2, r3, #32
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e007      	b.n	80067b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d1b5      	bne.n	8006722 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d6:	d11b      	bne.n	8006810 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	f043 0204 	orr.w	r2, r3, #4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
	...

08006820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e267      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d075      	beq.n	800692a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800683e:	4b88      	ldr	r3, [pc, #544]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 030c 	and.w	r3, r3, #12
 8006846:	2b04      	cmp	r3, #4
 8006848:	d00c      	beq.n	8006864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800684a:	4b85      	ldr	r3, [pc, #532]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006852:	2b08      	cmp	r3, #8
 8006854:	d112      	bne.n	800687c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006856:	4b82      	ldr	r3, [pc, #520]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006862:	d10b      	bne.n	800687c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006864:	4b7e      	ldr	r3, [pc, #504]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d05b      	beq.n	8006928 <HAL_RCC_OscConfig+0x108>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d157      	bne.n	8006928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e242      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006884:	d106      	bne.n	8006894 <HAL_RCC_OscConfig+0x74>
 8006886:	4b76      	ldr	r3, [pc, #472]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a75      	ldr	r2, [pc, #468]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 800688c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	e01d      	b.n	80068d0 <HAL_RCC_OscConfig+0xb0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800689c:	d10c      	bne.n	80068b8 <HAL_RCC_OscConfig+0x98>
 800689e:	4b70      	ldr	r3, [pc, #448]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a6f      	ldr	r2, [pc, #444]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80068a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	4b6d      	ldr	r3, [pc, #436]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a6c      	ldr	r2, [pc, #432]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80068b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	e00b      	b.n	80068d0 <HAL_RCC_OscConfig+0xb0>
 80068b8:	4b69      	ldr	r3, [pc, #420]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a68      	ldr	r2, [pc, #416]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80068be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	4b66      	ldr	r3, [pc, #408]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a65      	ldr	r2, [pc, #404]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80068ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d013      	beq.n	8006900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d8:	f7fd fdbe 	bl	8004458 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068e0:	f7fd fdba 	bl	8004458 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b64      	cmp	r3, #100	; 0x64
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e207      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f2:	4b5b      	ldr	r3, [pc, #364]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0f0      	beq.n	80068e0 <HAL_RCC_OscConfig+0xc0>
 80068fe:	e014      	b.n	800692a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006900:	f7fd fdaa 	bl	8004458 <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006908:	f7fd fda6 	bl	8004458 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b64      	cmp	r3, #100	; 0x64
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e1f3      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800691a:	4b51      	ldr	r3, [pc, #324]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f0      	bne.n	8006908 <HAL_RCC_OscConfig+0xe8>
 8006926:	e000      	b.n	800692a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d063      	beq.n	80069fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006936:	4b4a      	ldr	r3, [pc, #296]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 030c 	and.w	r3, r3, #12
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006942:	4b47      	ldr	r3, [pc, #284]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800694a:	2b08      	cmp	r3, #8
 800694c:	d11c      	bne.n	8006988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800694e:	4b44      	ldr	r3, [pc, #272]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d116      	bne.n	8006988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800695a:	4b41      	ldr	r3, [pc, #260]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <HAL_RCC_OscConfig+0x152>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d001      	beq.n	8006972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e1c7      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006972:	4b3b      	ldr	r3, [pc, #236]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	4937      	ldr	r1, [pc, #220]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 8006982:	4313      	orrs	r3, r2
 8006984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006986:	e03a      	b.n	80069fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d020      	beq.n	80069d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006990:	4b34      	ldr	r3, [pc, #208]	; (8006a64 <HAL_RCC_OscConfig+0x244>)
 8006992:	2201      	movs	r2, #1
 8006994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006996:	f7fd fd5f 	bl	8004458 <HAL_GetTick>
 800699a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800699c:	e008      	b.n	80069b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800699e:	f7fd fd5b 	bl	8004458 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e1a8      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b0:	4b2b      	ldr	r3, [pc, #172]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d0f0      	beq.n	800699e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069bc:	4b28      	ldr	r3, [pc, #160]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	4925      	ldr	r1, [pc, #148]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	600b      	str	r3, [r1, #0]
 80069d0:	e015      	b.n	80069fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <HAL_RCC_OscConfig+0x244>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d8:	f7fd fd3e 	bl	8004458 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069e0:	f7fd fd3a 	bl	8004458 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e187      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069f2:	4b1b      	ldr	r3, [pc, #108]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f0      	bne.n	80069e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0308 	and.w	r3, r3, #8
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d036      	beq.n	8006a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d016      	beq.n	8006a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <HAL_RCC_OscConfig+0x248>)
 8006a14:	2201      	movs	r2, #1
 8006a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a18:	f7fd fd1e 	bl	8004458 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a20:	f7fd fd1a 	bl	8004458 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e167      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <HAL_RCC_OscConfig+0x240>)
 8006a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0f0      	beq.n	8006a20 <HAL_RCC_OscConfig+0x200>
 8006a3e:	e01b      	b.n	8006a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <HAL_RCC_OscConfig+0x248>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a46:	f7fd fd07 	bl	8004458 <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a4c:	e00e      	b.n	8006a6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a4e:	f7fd fd03 	bl	8004458 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d907      	bls.n	8006a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e150      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
 8006a60:	40023800 	.word	0x40023800
 8006a64:	42470000 	.word	0x42470000
 8006a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a6c:	4b88      	ldr	r3, [pc, #544]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1ea      	bne.n	8006a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8097 	beq.w	8006bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a86:	2300      	movs	r3, #0
 8006a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a8a:	4b81      	ldr	r3, [pc, #516]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10f      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a96:	2300      	movs	r3, #0
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	4b7d      	ldr	r3, [pc, #500]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	4a7c      	ldr	r2, [pc, #496]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa6:	4b7a      	ldr	r3, [pc, #488]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aae:	60bb      	str	r3, [r7, #8]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab6:	4b77      	ldr	r3, [pc, #476]	; (8006c94 <HAL_RCC_OscConfig+0x474>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d118      	bne.n	8006af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ac2:	4b74      	ldr	r3, [pc, #464]	; (8006c94 <HAL_RCC_OscConfig+0x474>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a73      	ldr	r2, [pc, #460]	; (8006c94 <HAL_RCC_OscConfig+0x474>)
 8006ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ace:	f7fd fcc3 	bl	8004458 <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ad6:	f7fd fcbf 	bl	8004458 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e10c      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae8:	4b6a      	ldr	r3, [pc, #424]	; (8006c94 <HAL_RCC_OscConfig+0x474>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0f0      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d106      	bne.n	8006b0a <HAL_RCC_OscConfig+0x2ea>
 8006afc:	4b64      	ldr	r3, [pc, #400]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	4a63      	ldr	r2, [pc, #396]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	6713      	str	r3, [r2, #112]	; 0x70
 8006b08:	e01c      	b.n	8006b44 <HAL_RCC_OscConfig+0x324>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCC_OscConfig+0x30c>
 8006b12:	4b5f      	ldr	r3, [pc, #380]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	4a5e      	ldr	r2, [pc, #376]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b18:	f043 0304 	orr.w	r3, r3, #4
 8006b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b1e:	4b5c      	ldr	r3, [pc, #368]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b22:	4a5b      	ldr	r2, [pc, #364]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b24:	f043 0301 	orr.w	r3, r3, #1
 8006b28:	6713      	str	r3, [r2, #112]	; 0x70
 8006b2a:	e00b      	b.n	8006b44 <HAL_RCC_OscConfig+0x324>
 8006b2c:	4b58      	ldr	r3, [pc, #352]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b30:	4a57      	ldr	r2, [pc, #348]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b32:	f023 0301 	bic.w	r3, r3, #1
 8006b36:	6713      	str	r3, [r2, #112]	; 0x70
 8006b38:	4b55      	ldr	r3, [pc, #340]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3c:	4a54      	ldr	r2, [pc, #336]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b3e:	f023 0304 	bic.w	r3, r3, #4
 8006b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d015      	beq.n	8006b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4c:	f7fd fc84 	bl	8004458 <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b52:	e00a      	b.n	8006b6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b54:	f7fd fc80 	bl	8004458 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e0cb      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b6a:	4b49      	ldr	r3, [pc, #292]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0ee      	beq.n	8006b54 <HAL_RCC_OscConfig+0x334>
 8006b76:	e014      	b.n	8006ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b78:	f7fd fc6e 	bl	8004458 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b7e:	e00a      	b.n	8006b96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b80:	f7fd fc6a 	bl	8004458 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e0b5      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b96:	4b3e      	ldr	r3, [pc, #248]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1ee      	bne.n	8006b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d105      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ba8:	4b39      	ldr	r3, [pc, #228]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	4a38      	ldr	r2, [pc, #224]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 80a1 	beq.w	8006d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bbe:	4b34      	ldr	r3, [pc, #208]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d05c      	beq.n	8006c84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d141      	bne.n	8006c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd2:	4b31      	ldr	r3, [pc, #196]	; (8006c98 <HAL_RCC_OscConfig+0x478>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd8:	f7fd fc3e 	bl	8004458 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006be0:	f7fd fc3a 	bl	8004458 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e087      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf2:	4b27      	ldr	r3, [pc, #156]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f0      	bne.n	8006be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69da      	ldr	r2, [r3, #28]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	019b      	lsls	r3, r3, #6
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	3b01      	subs	r3, #1
 8006c18:	041b      	lsls	r3, r3, #16
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	061b      	lsls	r3, r3, #24
 8006c22:	491b      	ldr	r1, [pc, #108]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c28:	4b1b      	ldr	r3, [pc, #108]	; (8006c98 <HAL_RCC_OscConfig+0x478>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2e:	f7fd fc13 	bl	8004458 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c36:	f7fd fc0f 	bl	8004458 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e05c      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c48:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0f0      	beq.n	8006c36 <HAL_RCC_OscConfig+0x416>
 8006c54:	e054      	b.n	8006d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c56:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <HAL_RCC_OscConfig+0x478>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5c:	f7fd fbfc 	bl	8004458 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c64:	f7fd fbf8 	bl	8004458 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e045      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c76:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <HAL_RCC_OscConfig+0x470>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <HAL_RCC_OscConfig+0x444>
 8006c82:	e03d      	b.n	8006d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d107      	bne.n	8006c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e038      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
 8006c90:	40023800 	.word	0x40023800
 8006c94:	40007000 	.word	0x40007000
 8006c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c9c:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <HAL_RCC_OscConfig+0x4ec>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d028      	beq.n	8006cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d121      	bne.n	8006cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d11a      	bne.n	8006cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ccc:	4013      	ands	r3, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d111      	bne.n	8006cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d107      	bne.n	8006cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d001      	beq.n	8006d00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e000      	b.n	8006d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40023800 	.word	0x40023800

08006d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e0cc      	b.n	8006ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d24:	4b68      	ldr	r3, [pc, #416]	; (8006ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d90c      	bls.n	8006d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d32:	4b65      	ldr	r3, [pc, #404]	; (8006ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d3a:	4b63      	ldr	r3, [pc, #396]	; (8006ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d001      	beq.n	8006d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e0b8      	b.n	8006ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d020      	beq.n	8006d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d64:	4b59      	ldr	r3, [pc, #356]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	4a58      	ldr	r2, [pc, #352]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d7c:	4b53      	ldr	r3, [pc, #332]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	4a52      	ldr	r2, [pc, #328]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d88:	4b50      	ldr	r3, [pc, #320]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	494d      	ldr	r1, [pc, #308]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d044      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d107      	bne.n	8006dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dae:	4b47      	ldr	r3, [pc, #284]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d119      	bne.n	8006dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e07f      	b.n	8006ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d003      	beq.n	8006dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d107      	bne.n	8006dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dce:	4b3f      	ldr	r3, [pc, #252]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e06f      	b.n	8006ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dde:	4b3b      	ldr	r3, [pc, #236]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e067      	b.n	8006ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dee:	4b37      	ldr	r3, [pc, #220]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f023 0203 	bic.w	r2, r3, #3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	4934      	ldr	r1, [pc, #208]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e00:	f7fd fb2a 	bl	8004458 <HAL_GetTick>
 8006e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e06:	e00a      	b.n	8006e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e08:	f7fd fb26 	bl	8004458 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e04f      	b.n	8006ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e1e:	4b2b      	ldr	r3, [pc, #172]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 020c 	and.w	r2, r3, #12
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d1eb      	bne.n	8006e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e30:	4b25      	ldr	r3, [pc, #148]	; (8006ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d20c      	bcs.n	8006e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3e:	4b22      	ldr	r3, [pc, #136]	; (8006ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e46:	4b20      	ldr	r3, [pc, #128]	; (8006ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d001      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e032      	b.n	8006ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d008      	beq.n	8006e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e64:	4b19      	ldr	r3, [pc, #100]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	4916      	ldr	r1, [pc, #88]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0308 	and.w	r3, r3, #8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e82:	4b12      	ldr	r3, [pc, #72]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	490e      	ldr	r1, [pc, #56]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e96:	f000 f821 	bl	8006edc <HAL_RCC_GetSysClockFreq>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	091b      	lsrs	r3, r3, #4
 8006ea2:	f003 030f 	and.w	r3, r3, #15
 8006ea6:	490a      	ldr	r1, [pc, #40]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea8:	5ccb      	ldrb	r3, [r1, r3]
 8006eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8006eae:	4a09      	ldr	r2, [pc, #36]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006eb2:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fd fa8a 	bl	80043d0 <HAL_InitTick>

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40023c00 	.word	0x40023c00
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	0800e564 	.word	0x0800e564
 8006ed4:	20000108 	.word	0x20000108
 8006ed8:	20000110 	.word	0x20000110

08006edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ee0:	b090      	sub	sp, #64	; 0x40
 8006ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee8:	2300      	movs	r3, #0
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eec:	2300      	movs	r3, #0
 8006eee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ef4:	4b59      	ldr	r3, [pc, #356]	; (800705c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 030c 	and.w	r3, r3, #12
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d00d      	beq.n	8006f1c <HAL_RCC_GetSysClockFreq+0x40>
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	f200 80a1 	bhi.w	8007048 <HAL_RCC_GetSysClockFreq+0x16c>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_RCC_GetSysClockFreq+0x34>
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d003      	beq.n	8006f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f0e:	e09b      	b.n	8007048 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f10:	4b53      	ldr	r3, [pc, #332]	; (8007060 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006f14:	e09b      	b.n	800704e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f16:	4b53      	ldr	r3, [pc, #332]	; (8007064 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f1a:	e098      	b.n	800704e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f1c:	4b4f      	ldr	r3, [pc, #316]	; (800705c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f26:	4b4d      	ldr	r3, [pc, #308]	; (800705c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d028      	beq.n	8006f84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f32:	4b4a      	ldr	r3, [pc, #296]	; (800705c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	099b      	lsrs	r3, r3, #6
 8006f38:	2200      	movs	r2, #0
 8006f3a:	623b      	str	r3, [r7, #32]
 8006f3c:	627a      	str	r2, [r7, #36]	; 0x24
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f44:	2100      	movs	r1, #0
 8006f46:	4b47      	ldr	r3, [pc, #284]	; (8007064 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f48:	fb03 f201 	mul.w	r2, r3, r1
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	fb00 f303 	mul.w	r3, r0, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	4a43      	ldr	r2, [pc, #268]	; (8007064 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f56:	fba0 1202 	umull	r1, r2, r0, r2
 8006f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f5c:	460a      	mov	r2, r1
 8006f5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f62:	4413      	add	r3, r2
 8006f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f68:	2200      	movs	r2, #0
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	61fa      	str	r2, [r7, #28]
 8006f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f76:	f7f9 fe2f 	bl	8000bd8 <__aeabi_uldivmod>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4613      	mov	r3, r2
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f82:	e053      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f84:	4b35      	ldr	r3, [pc, #212]	; (800705c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	099b      	lsrs	r3, r3, #6
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	617a      	str	r2, [r7, #20]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006f96:	f04f 0b00 	mov.w	fp, #0
 8006f9a:	4652      	mov	r2, sl
 8006f9c:	465b      	mov	r3, fp
 8006f9e:	f04f 0000 	mov.w	r0, #0
 8006fa2:	f04f 0100 	mov.w	r1, #0
 8006fa6:	0159      	lsls	r1, r3, #5
 8006fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fac:	0150      	lsls	r0, r2, #5
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	ebb2 080a 	subs.w	r8, r2, sl
 8006fb6:	eb63 090b 	sbc.w	r9, r3, fp
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006fc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006fca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006fce:	ebb2 0408 	subs.w	r4, r2, r8
 8006fd2:	eb63 0509 	sbc.w	r5, r3, r9
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	00eb      	lsls	r3, r5, #3
 8006fe0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fe4:	00e2      	lsls	r2, r4, #3
 8006fe6:	4614      	mov	r4, r2
 8006fe8:	461d      	mov	r5, r3
 8006fea:	eb14 030a 	adds.w	r3, r4, sl
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	eb45 030b 	adc.w	r3, r5, fp
 8006ff4:	607b      	str	r3, [r7, #4]
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007002:	4629      	mov	r1, r5
 8007004:	028b      	lsls	r3, r1, #10
 8007006:	4621      	mov	r1, r4
 8007008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800700c:	4621      	mov	r1, r4
 800700e:	028a      	lsls	r2, r1, #10
 8007010:	4610      	mov	r0, r2
 8007012:	4619      	mov	r1, r3
 8007014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007016:	2200      	movs	r2, #0
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	60fa      	str	r2, [r7, #12]
 800701c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007020:	f7f9 fdda 	bl	8000bd8 <__aeabi_uldivmod>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4613      	mov	r3, r2
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800702c:	4b0b      	ldr	r3, [pc, #44]	; (800705c <HAL_RCC_GetSysClockFreq+0x180>)
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	0c1b      	lsrs	r3, r3, #16
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	3301      	adds	r3, #1
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800703c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	fbb2 f3f3 	udiv	r3, r2, r3
 8007044:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007046:	e002      	b.n	800704e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <HAL_RCC_GetSysClockFreq+0x184>)
 800704a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800704c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007050:	4618      	mov	r0, r3
 8007052:	3740      	adds	r7, #64	; 0x40
 8007054:	46bd      	mov	sp, r7
 8007056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800705a:	bf00      	nop
 800705c:	40023800 	.word	0x40023800
 8007060:	00f42400 	.word	0x00f42400
 8007064:	017d7840 	.word	0x017d7840

08007068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800706c:	4b03      	ldr	r3, [pc, #12]	; (800707c <HAL_RCC_GetHCLKFreq+0x14>)
 800706e:	681b      	ldr	r3, [r3, #0]
}
 8007070:	4618      	mov	r0, r3
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000108 	.word	0x20000108

08007080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007084:	f7ff fff0 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 8007088:	4602      	mov	r2, r0
 800708a:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	0a9b      	lsrs	r3, r3, #10
 8007090:	f003 0307 	and.w	r3, r3, #7
 8007094:	4903      	ldr	r1, [pc, #12]	; (80070a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007096:	5ccb      	ldrb	r3, [r1, r3]
 8007098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800709c:	4618      	mov	r0, r3
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40023800 	.word	0x40023800
 80070a4:	0800e574 	.word	0x0800e574

080070a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070ac:	f7ff ffdc 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80070b0:	4602      	mov	r2, r0
 80070b2:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	0b5b      	lsrs	r3, r3, #13
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	4903      	ldr	r1, [pc, #12]	; (80070cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80070be:	5ccb      	ldrb	r3, [r1, r3]
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40023800 	.word	0x40023800
 80070cc:	0800e574 	.word	0x0800e574

080070d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d105      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d038      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070f8:	4b68      	ldr	r3, [pc, #416]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070fe:	f7fd f9ab 	bl	8004458 <HAL_GetTick>
 8007102:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007104:	e008      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007106:	f7fd f9a7 	bl	8004458 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d901      	bls.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e0bd      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007118:	4b61      	ldr	r3, [pc, #388]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1f0      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	019b      	lsls	r3, r3, #6
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	071b      	lsls	r3, r3, #28
 8007136:	495a      	ldr	r1, [pc, #360]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800713e:	4b57      	ldr	r3, [pc, #348]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007140:	2201      	movs	r2, #1
 8007142:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007144:	f7fd f988 	bl	8004458 <HAL_GetTick>
 8007148:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800714a:	e008      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800714c:	f7fd f984 	bl	8004458 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e09a      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800715e:	4b50      	ldr	r3, [pc, #320]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 8083 	beq.w	800727e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	4b48      	ldr	r3, [pc, #288]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	4a47      	ldr	r2, [pc, #284]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007186:	6413      	str	r3, [r2, #64]	; 0x40
 8007188:	4b45      	ldr	r3, [pc, #276]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007194:	4b43      	ldr	r3, [pc, #268]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a42      	ldr	r2, [pc, #264]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800719a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800719e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071a0:	f7fd f95a 	bl	8004458 <HAL_GetTick>
 80071a4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071a8:	f7fd f956 	bl	8004458 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e06c      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071ba:	4b3a      	ldr	r3, [pc, #232]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f0      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071c6:	4b36      	ldr	r3, [pc, #216]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ce:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d02f      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d028      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071e4:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071ee:	4b2e      	ldr	r3, [pc, #184]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071f0:	2201      	movs	r2, #1
 80071f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071f4:	4b2c      	ldr	r3, [pc, #176]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80071fa:	4a29      	ldr	r2, [pc, #164]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007200:	4b27      	ldr	r3, [pc, #156]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b01      	cmp	r3, #1
 800720a:	d114      	bne.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800720c:	f7fd f924 	bl	8004458 <HAL_GetTick>
 8007210:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007212:	e00a      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007214:	f7fd f920 	bl	8004458 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007222:	4293      	cmp	r3, r2
 8007224:	d901      	bls.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e034      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800722a:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0ee      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800723e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007242:	d10d      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007244:	4b16      	ldr	r3, [pc, #88]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007258:	4911      	ldr	r1, [pc, #68]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800725a:	4313      	orrs	r3, r2
 800725c:	608b      	str	r3, [r1, #8]
 800725e:	e005      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007260:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	4a0e      	ldr	r2, [pc, #56]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007266:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800726a:	6093      	str	r3, [r2, #8]
 800726c:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800726e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007278:	4909      	ldr	r1, [pc, #36]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727a:	4313      	orrs	r3, r2
 800727c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	7d1a      	ldrb	r2, [r3, #20]
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007290:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	42470068 	.word	0x42470068
 80072a0:	40023800 	.word	0x40023800
 80072a4:	40007000 	.word	0x40007000
 80072a8:	42470e40 	.word	0x42470e40
 80072ac:	424711e0 	.word	0x424711e0

080072b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e066      	b.n	8007394 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	7f5b      	ldrb	r3, [r3, #29]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7fc f896 	bl	8003408 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	22ca      	movs	r2, #202	; 0xca
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2253      	movs	r2, #83	; 0x53
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa45 	bl	8007782 <RTC_EnterInitMode>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d12c      	bne.n	800735c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6812      	ldr	r2, [r2, #0]
 800730c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007314:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6899      	ldr	r1, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68d2      	ldr	r2, [r2, #12]
 800733c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6919      	ldr	r1, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	041a      	lsls	r2, r3, #16
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa4c 	bl	80077f0 <RTC_ExitInitMode>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d113      	bne.n	800738a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007370:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699a      	ldr	r2, [r3, #24]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	22ff      	movs	r2, #255	; 0xff
 8007390:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800739c:	b590      	push	{r4, r7, lr}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	7f1b      	ldrb	r3, [r3, #28]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d101      	bne.n	80073b8 <HAL_RTC_SetTime+0x1c>
 80073b4:	2302      	movs	r3, #2
 80073b6:	e087      	b.n	80074c8 <HAL_RTC_SetTime+0x12c>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2202      	movs	r2, #2
 80073c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d126      	bne.n	8007418 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d102      	bne.n	80073de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2200      	movs	r2, #0
 80073dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fa29 	bl	800783a <RTC_ByteToBcd2>
 80073e8:	4603      	mov	r3, r0
 80073ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fa22 	bl	800783a <RTC_ByteToBcd2>
 80073f6:	4603      	mov	r3, r0
 80073f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80073fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	789b      	ldrb	r3, [r3, #2]
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fa1a 	bl	800783a <RTC_ByteToBcd2>
 8007406:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007408:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	78db      	ldrb	r3, [r3, #3]
 8007410:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	e018      	b.n	800744a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d102      	bne.n	800742c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007438:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800743e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	78db      	ldrb	r3, [r3, #3]
 8007444:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	22ca      	movs	r2, #202	; 0xca
 8007450:	625a      	str	r2, [r3, #36]	; 0x24
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2253      	movs	r2, #83	; 0x53
 8007458:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 f991 	bl	8007782 <RTC_EnterInitMode>
 8007460:	4603      	mov	r3, r0
 8007462:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007464:	7cfb      	ldrb	r3, [r7, #19]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d120      	bne.n	80074ac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007474:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007478:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007488:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6899      	ldr	r1, [r3, #8]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	431a      	orrs	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 f9a4 	bl	80077f0 <RTC_ExitInitMode>
 80074a8:	4603      	mov	r3, r0
 80074aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80074ac:	7cfb      	ldrb	r3, [r7, #19]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d102      	bne.n	80074b8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	22ff      	movs	r2, #255	; 0xff
 80074be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	771a      	strb	r2, [r3, #28]

  return status;
 80074c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd90      	pop	{r4, r7, pc}

080074d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007502:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007506:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	0c1b      	lsrs	r3, r3, #16
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007512:	b2da      	uxtb	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	0a1b      	lsrs	r3, r3, #8
 800751c:	b2db      	uxtb	r3, r3
 800751e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007522:	b2da      	uxtb	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007530:	b2da      	uxtb	r2, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	0d9b      	lsrs	r3, r3, #22
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	b2da      	uxtb	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d11a      	bne.n	8007582 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f98f 	bl	8007874 <RTC_Bcd2ToByte>
 8007556:	4603      	mov	r3, r0
 8007558:	461a      	mov	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	785b      	ldrb	r3, [r3, #1]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f986 	bl	8007874 <RTC_Bcd2ToByte>
 8007568:	4603      	mov	r3, r0
 800756a:	461a      	mov	r2, r3
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	789b      	ldrb	r3, [r3, #2]
 8007574:	4618      	mov	r0, r3
 8007576:	f000 f97d 	bl	8007874 <RTC_Bcd2ToByte>
 800757a:	4603      	mov	r3, r0
 800757c:	461a      	mov	r2, r3
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800758c:	b590      	push	{r4, r7, lr}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	7f1b      	ldrb	r3, [r3, #28]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_RTC_SetDate+0x1c>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e071      	b.n	800768c <HAL_RTC_SetDate+0x100>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2202      	movs	r2, #2
 80075b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10e      	bne.n	80075d8 <HAL_RTC_SetDate+0x4c>
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	f023 0310 	bic.w	r3, r3, #16
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	330a      	adds	r3, #10
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d11c      	bne.n	8007618 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	78db      	ldrb	r3, [r3, #3]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 f929 	bl	800783a <RTC_ByteToBcd2>
 80075e8:	4603      	mov	r3, r0
 80075ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 f922 	bl	800783a <RTC_ByteToBcd2>
 80075f6:	4603      	mov	r3, r0
 80075f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80075fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	789b      	ldrb	r3, [r3, #2]
 8007600:	4618      	mov	r0, r3
 8007602:	f000 f91a 	bl	800783a <RTC_ByteToBcd2>
 8007606:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007608:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007612:	4313      	orrs	r3, r2
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	e00e      	b.n	8007636 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	78db      	ldrb	r3, [r3, #3]
 800761c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007624:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800762a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007632:	4313      	orrs	r3, r2
 8007634:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	22ca      	movs	r2, #202	; 0xca
 800763c:	625a      	str	r2, [r3, #36]	; 0x24
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2253      	movs	r2, #83	; 0x53
 8007644:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 f89b 	bl	8007782 <RTC_EnterInitMode>
 800764c:	4603      	mov	r3, r0
 800764e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007650:	7cfb      	ldrb	r3, [r7, #19]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10c      	bne.n	8007670 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007660:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007664:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 f8c2 	bl	80077f0 <RTC_ExitInitMode>
 800766c:	4603      	mov	r3, r0
 800766e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007670:	7cfb      	ldrb	r3, [r7, #19]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d102      	bne.n	800767c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2201      	movs	r2, #1
 800767a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	22ff      	movs	r2, #255	; 0xff
 8007682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	771a      	strb	r2, [r3, #28]

  return status;
 800768a:	7cfb      	ldrb	r3, [r7, #19]
}
 800768c:	4618      	mov	r0, r3
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	bd90      	pop	{r4, r7, pc}

08007694 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80076b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	0c1b      	lsrs	r3, r3, #16
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	0a1b      	lsrs	r3, r3, #8
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	0b5b      	lsrs	r3, r3, #13
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d11a      	bne.n	8007728 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	78db      	ldrb	r3, [r3, #3]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f8bc 	bl	8007874 <RTC_Bcd2ToByte>
 80076fc:	4603      	mov	r3, r0
 80076fe:	461a      	mov	r2, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	4618      	mov	r0, r3
 800770a:	f000 f8b3 	bl	8007874 <RTC_Bcd2ToByte>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	789b      	ldrb	r3, [r3, #2]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 f8aa 	bl	8007874 <RTC_Bcd2ToByte>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800774c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800774e:	f7fc fe83 	bl	8004458 <HAL_GetTick>
 8007752:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007754:	e009      	b.n	800776a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007756:	f7fc fe7f 	bl	8004458 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007764:	d901      	bls.n	800776a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e007      	b.n	800777a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0320 	and.w	r3, r3, #32
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0ee      	beq.n	8007756 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d122      	bne.n	80077e6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077b0:	f7fc fe52 	bl	8004458 <HAL_GetTick>
 80077b4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80077b6:	e00c      	b.n	80077d2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077b8:	f7fc fe4e 	bl	8004458 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077c6:	d904      	bls.n	80077d2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2204      	movs	r2, #4
 80077cc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <RTC_EnterInitMode+0x64>
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d1e8      	bne.n	80077b8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800780a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff ff89 	bl	8007732 <HAL_RTC_WaitForSynchro>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d004      	beq.n	8007830 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2204      	movs	r2, #4
 800782a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	4603      	mov	r3, r0
 8007842:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007848:	e005      	b.n	8007856 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	3301      	adds	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	3b0a      	subs	r3, #10
 8007854:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	2b09      	cmp	r3, #9
 800785a:	d8f6      	bhi.n	800784a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	b2da      	uxtb	r2, r3
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	4313      	orrs	r3, r2
 8007866:	b2db      	uxtb	r3, r3
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	091b      	lsrs	r3, r3, #4
 8007886:	b2db      	uxtb	r3, r3
 8007888:	461a      	mov	r2, r3
 800788a:	0092      	lsls	r2, r2, #2
 800788c:	4413      	add	r3, r2
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	b2da      	uxtb	r2, r3
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	4413      	add	r3, r2
 800789e:	b2db      	uxtb	r3, r3
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e07b      	b.n	80079b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d108      	bne.n	80078d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ce:	d009      	beq.n	80078e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	61da      	str	r2, [r3, #28]
 80078d6:	e005      	b.n	80078e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fb fde4 	bl	80034cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800791a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007954:	431a      	orrs	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007968:	ea42 0103 	orr.w	r1, r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007970:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	0c1b      	lsrs	r3, r3, #16
 8007982:	f003 0104 	and.w	r1, r3, #4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	f003 0210 	and.w	r2, r3, #16
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e041      	b.n	8007a54 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d106      	bne.n	80079ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7fb ff97 	bl	8003918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2202      	movs	r2, #2
 80079ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f000 fd61 	bl	80084c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e041      	b.n	8007af2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d106      	bne.n	8007a88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f839 	bl	8007afa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3304      	adds	r3, #4
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	f000 fd12 	bl	80084c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
	...

08007b10 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d109      	bne.n	8007b3c <HAL_TIM_PWM_Start_DMA+0x2c>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	bf0c      	ite	eq
 8007b34:	2301      	moveq	r3, #1
 8007b36:	2300      	movne	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	e022      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x72>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d109      	bne.n	8007b56 <HAL_TIM_PWM_Start_DMA+0x46>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	bf0c      	ite	eq
 8007b4e:	2301      	moveq	r3, #1
 8007b50:	2300      	movne	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	e015      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x72>
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d109      	bne.n	8007b70 <HAL_TIM_PWM_Start_DMA+0x60>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	bf0c      	ite	eq
 8007b68:	2301      	moveq	r3, #1
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	e008      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x72>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	bf0c      	ite	eq
 8007b7c:	2301      	moveq	r3, #1
 8007b7e:	2300      	movne	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007b86:	2302      	movs	r3, #2
 8007b88:	e15d      	b.n	8007e46 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d109      	bne.n	8007ba4 <HAL_TIM_PWM_Start_DMA+0x94>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2301      	moveq	r3, #1
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	e022      	b.n	8007bea <HAL_TIM_PWM_Start_DMA+0xda>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d109      	bne.n	8007bbe <HAL_TIM_PWM_Start_DMA+0xae>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	bf0c      	ite	eq
 8007bb6:	2301      	moveq	r3, #1
 8007bb8:	2300      	movne	r3, #0
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	e015      	b.n	8007bea <HAL_TIM_PWM_Start_DMA+0xda>
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d109      	bne.n	8007bd8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	bf0c      	ite	eq
 8007bd0:	2301      	moveq	r3, #1
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	e008      	b.n	8007bea <HAL_TIM_PWM_Start_DMA+0xda>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	bf0c      	ite	eq
 8007be4:	2301      	moveq	r3, #1
 8007be6:	2300      	movne	r3, #0
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d024      	beq.n	8007c38 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d104      	bne.n	8007bfe <HAL_TIM_PWM_Start_DMA+0xee>
 8007bf4:	887b      	ldrh	r3, [r7, #2]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e123      	b.n	8007e46 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <HAL_TIM_PWM_Start_DMA+0xfe>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c0c:	e016      	b.n	8007c3c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d104      	bne.n	8007c1e <HAL_TIM_PWM_Start_DMA+0x10e>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c1c:	e00e      	b.n	8007c3c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d104      	bne.n	8007c2e <HAL_TIM_PWM_Start_DMA+0x11e>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c2c:	e006      	b.n	8007c3c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2202      	movs	r2, #2
 8007c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c36:	e001      	b.n	8007c3c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e104      	b.n	8007e46 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b0c      	cmp	r3, #12
 8007c40:	f200 80ae 	bhi.w	8007da0 <HAL_TIM_PWM_Start_DMA+0x290>
 8007c44:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007c81 	.word	0x08007c81
 8007c50:	08007da1 	.word	0x08007da1
 8007c54:	08007da1 	.word	0x08007da1
 8007c58:	08007da1 	.word	0x08007da1
 8007c5c:	08007cc9 	.word	0x08007cc9
 8007c60:	08007da1 	.word	0x08007da1
 8007c64:	08007da1 	.word	0x08007da1
 8007c68:	08007da1 	.word	0x08007da1
 8007c6c:	08007d11 	.word	0x08007d11
 8007c70:	08007da1 	.word	0x08007da1
 8007c74:	08007da1 	.word	0x08007da1
 8007c78:	08007da1 	.word	0x08007da1
 8007c7c:	08007d59 	.word	0x08007d59
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	4a72      	ldr	r2, [pc, #456]	; (8007e50 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007c86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	4a71      	ldr	r2, [pc, #452]	; (8007e54 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	4a70      	ldr	r2, [pc, #448]	; (8007e58 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007c96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3334      	adds	r3, #52	; 0x34
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	887b      	ldrh	r3, [r7, #2]
 8007ca8:	f7fc fe14 	bl	80048d4 <HAL_DMA_Start_IT>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e0c7      	b.n	8007e46 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cc4:	60da      	str	r2, [r3, #12]
      break;
 8007cc6:	e06e      	b.n	8007da6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	4a60      	ldr	r2, [pc, #384]	; (8007e50 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007cce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	4a5f      	ldr	r2, [pc, #380]	; (8007e54 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	4a5e      	ldr	r2, [pc, #376]	; (8007e58 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007cde:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3338      	adds	r3, #56	; 0x38
 8007cec:	461a      	mov	r2, r3
 8007cee:	887b      	ldrh	r3, [r7, #2]
 8007cf0:	f7fc fdf0 	bl	80048d4 <HAL_DMA_Start_IT>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e0a3      	b.n	8007e46 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d0c:	60da      	str	r2, [r3, #12]
      break;
 8007d0e:	e04a      	b.n	8007da6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	4a4e      	ldr	r2, [pc, #312]	; (8007e50 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007d16:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	4a4d      	ldr	r2, [pc, #308]	; (8007e54 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007d1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	4a4c      	ldr	r2, [pc, #304]	; (8007e58 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007d26:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	333c      	adds	r3, #60	; 0x3c
 8007d34:	461a      	mov	r2, r3
 8007d36:	887b      	ldrh	r3, [r7, #2]
 8007d38:	f7fc fdcc 	bl	80048d4 <HAL_DMA_Start_IT>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e07f      	b.n	8007e46 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d54:	60da      	str	r2, [r3, #12]
      break;
 8007d56:	e026      	b.n	8007da6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5c:	4a3c      	ldr	r2, [pc, #240]	; (8007e50 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007d5e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	4a3b      	ldr	r2, [pc, #236]	; (8007e54 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007d66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6c:	4a3a      	ldr	r2, [pc, #232]	; (8007e58 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007d6e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3340      	adds	r3, #64	; 0x40
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	887b      	ldrh	r3, [r7, #2]
 8007d80:	f7fc fda8 	bl	80048d4 <HAL_DMA_Start_IT>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e05b      	b.n	8007e46 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d9c:	60da      	str	r2, [r3, #12]
      break;
 8007d9e:	e002      	b.n	8007da6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	75fb      	strb	r3, [r7, #23]
      break;
 8007da4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d14b      	bne.n	8007e44 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2201      	movs	r2, #1
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fe2b 	bl	8008a10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a27      	ldr	r2, [pc, #156]	; (8007e5c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d107      	bne.n	8007dd4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dd2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a20      	ldr	r2, [pc, #128]	; (8007e5c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d018      	beq.n	8007e10 <HAL_TIM_PWM_Start_DMA+0x300>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de6:	d013      	beq.n	8007e10 <HAL_TIM_PWM_Start_DMA+0x300>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a1c      	ldr	r2, [pc, #112]	; (8007e60 <HAL_TIM_PWM_Start_DMA+0x350>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d00e      	beq.n	8007e10 <HAL_TIM_PWM_Start_DMA+0x300>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a1b      	ldr	r2, [pc, #108]	; (8007e64 <HAL_TIM_PWM_Start_DMA+0x354>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d009      	beq.n	8007e10 <HAL_TIM_PWM_Start_DMA+0x300>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a19      	ldr	r2, [pc, #100]	; (8007e68 <HAL_TIM_PWM_Start_DMA+0x358>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d004      	beq.n	8007e10 <HAL_TIM_PWM_Start_DMA+0x300>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a18      	ldr	r2, [pc, #96]	; (8007e6c <HAL_TIM_PWM_Start_DMA+0x35c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d111      	bne.n	8007e34 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	2b06      	cmp	r3, #6
 8007e20:	d010      	beq.n	8007e44 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f042 0201 	orr.w	r2, r2, #1
 8007e30:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e32:	e007      	b.n	8007e44 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	080083b5 	.word	0x080083b5
 8007e54:	0800845d 	.word	0x0800845d
 8007e58:	08008323 	.word	0x08008323
 8007e5c:	40010000 	.word	0x40010000
 8007e60:	40000400 	.word	0x40000400
 8007e64:	40000800 	.word	0x40000800
 8007e68:	40000c00 	.word	0x40000c00
 8007e6c:	40014000 	.word	0x40014000

08007e70 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b0c      	cmp	r3, #12
 8007e82:	d855      	bhi.n	8007f30 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007e84:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007ec1 	.word	0x08007ec1
 8007e90:	08007f31 	.word	0x08007f31
 8007e94:	08007f31 	.word	0x08007f31
 8007e98:	08007f31 	.word	0x08007f31
 8007e9c:	08007edd 	.word	0x08007edd
 8007ea0:	08007f31 	.word	0x08007f31
 8007ea4:	08007f31 	.word	0x08007f31
 8007ea8:	08007f31 	.word	0x08007f31
 8007eac:	08007ef9 	.word	0x08007ef9
 8007eb0:	08007f31 	.word	0x08007f31
 8007eb4:	08007f31 	.word	0x08007f31
 8007eb8:	08007f31 	.word	0x08007f31
 8007ebc:	08007f15 	.word	0x08007f15
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ece:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fc fdc5 	bl	8004a64 <HAL_DMA_Abort_IT>
      break;
 8007eda:	e02c      	b.n	8007f36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fc fdb7 	bl	8004a64 <HAL_DMA_Abort_IT>
      break;
 8007ef6:	e01e      	b.n	8007f36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fc fda9 	bl	8004a64 <HAL_DMA_Abort_IT>
      break;
 8007f12:	e010      	b.n	8007f36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fc fd9b 	bl	8004a64 <HAL_DMA_Abort_IT>
      break;
 8007f2e:	e002      	b.n	8007f36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	73fb      	strb	r3, [r7, #15]
      break;
 8007f34:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d157      	bne.n	8007fec <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2200      	movs	r2, #0
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fd63 	bl	8008a10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a2a      	ldr	r2, [pc, #168]	; (8007ff8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d117      	bne.n	8007f84 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6a1a      	ldr	r2, [r3, #32]
 8007f5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f5e:	4013      	ands	r3, r2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10f      	bne.n	8007f84 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6a1a      	ldr	r2, [r3, #32]
 8007f6a:	f240 4344 	movw	r3, #1092	; 0x444
 8007f6e:	4013      	ands	r3, r2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d107      	bne.n	8007f84 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f82:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6a1a      	ldr	r2, [r3, #32]
 8007f8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f8e:	4013      	ands	r3, r2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10f      	bne.n	8007fb4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6a1a      	ldr	r2, [r3, #32]
 8007f9a:	f240 4344 	movw	r3, #1092	; 0x444
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d107      	bne.n	8007fb4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0201 	bic.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d104      	bne.n	8007fc4 <HAL_TIM_PWM_Stop_DMA+0x154>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc2:	e013      	b.n	8007fec <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d104      	bne.n	8007fd4 <HAL_TIM_PWM_Stop_DMA+0x164>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd2:	e00b      	b.n	8007fec <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d104      	bne.n	8007fe4 <HAL_TIM_PWM_Stop_DMA+0x174>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe2:	e003      	b.n	8007fec <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	40010000 	.word	0x40010000

08007ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008012:	2b01      	cmp	r3, #1
 8008014:	d101      	bne.n	800801a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008016:	2302      	movs	r3, #2
 8008018:	e0ae      	b.n	8008178 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b0c      	cmp	r3, #12
 8008026:	f200 809f 	bhi.w	8008168 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800802a:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	08008065 	.word	0x08008065
 8008034:	08008169 	.word	0x08008169
 8008038:	08008169 	.word	0x08008169
 800803c:	08008169 	.word	0x08008169
 8008040:	080080a5 	.word	0x080080a5
 8008044:	08008169 	.word	0x08008169
 8008048:	08008169 	.word	0x08008169
 800804c:	08008169 	.word	0x08008169
 8008050:	080080e7 	.word	0x080080e7
 8008054:	08008169 	.word	0x08008169
 8008058:	08008169 	.word	0x08008169
 800805c:	08008169 	.word	0x08008169
 8008060:	08008127 	.word	0x08008127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	4618      	mov	r0, r3
 800806c:	f000 faaa 	bl	80085c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f042 0208 	orr.w	r2, r2, #8
 800807e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	699a      	ldr	r2, [r3, #24]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0204 	bic.w	r2, r2, #4
 800808e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6999      	ldr	r1, [r3, #24]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	691a      	ldr	r2, [r3, #16]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	619a      	str	r2, [r3, #24]
      break;
 80080a2:	e064      	b.n	800816e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 faf0 	bl	8008690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	699a      	ldr	r2, [r3, #24]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6999      	ldr	r1, [r3, #24]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	021a      	lsls	r2, r3, #8
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	619a      	str	r2, [r3, #24]
      break;
 80080e4:	e043      	b.n	800816e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fb3b 	bl	8008768 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69da      	ldr	r2, [r3, #28]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f042 0208 	orr.w	r2, r2, #8
 8008100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	69da      	ldr	r2, [r3, #28]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 0204 	bic.w	r2, r2, #4
 8008110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69d9      	ldr	r1, [r3, #28]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	61da      	str	r2, [r3, #28]
      break;
 8008124:	e023      	b.n	800816e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	4618      	mov	r0, r3
 800812e:	f000 fb85 	bl	800883c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69da      	ldr	r2, [r3, #28]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69d9      	ldr	r1, [r3, #28]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	021a      	lsls	r2, r3, #8
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	61da      	str	r2, [r3, #28]
      break;
 8008166:	e002      	b.n	800816e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
      break;
 800816c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008176:	7dfb      	ldrb	r3, [r7, #23]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_TIM_ConfigClockSource+0x1c>
 8008198:	2302      	movs	r3, #2
 800819a:	e0b4      	b.n	8008306 <HAL_TIM_ConfigClockSource+0x186>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d4:	d03e      	beq.n	8008254 <HAL_TIM_ConfigClockSource+0xd4>
 80081d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081da:	f200 8087 	bhi.w	80082ec <HAL_TIM_ConfigClockSource+0x16c>
 80081de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e2:	f000 8086 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x172>
 80081e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ea:	d87f      	bhi.n	80082ec <HAL_TIM_ConfigClockSource+0x16c>
 80081ec:	2b70      	cmp	r3, #112	; 0x70
 80081ee:	d01a      	beq.n	8008226 <HAL_TIM_ConfigClockSource+0xa6>
 80081f0:	2b70      	cmp	r3, #112	; 0x70
 80081f2:	d87b      	bhi.n	80082ec <HAL_TIM_ConfigClockSource+0x16c>
 80081f4:	2b60      	cmp	r3, #96	; 0x60
 80081f6:	d050      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x11a>
 80081f8:	2b60      	cmp	r3, #96	; 0x60
 80081fa:	d877      	bhi.n	80082ec <HAL_TIM_ConfigClockSource+0x16c>
 80081fc:	2b50      	cmp	r3, #80	; 0x50
 80081fe:	d03c      	beq.n	800827a <HAL_TIM_ConfigClockSource+0xfa>
 8008200:	2b50      	cmp	r3, #80	; 0x50
 8008202:	d873      	bhi.n	80082ec <HAL_TIM_ConfigClockSource+0x16c>
 8008204:	2b40      	cmp	r3, #64	; 0x40
 8008206:	d058      	beq.n	80082ba <HAL_TIM_ConfigClockSource+0x13a>
 8008208:	2b40      	cmp	r3, #64	; 0x40
 800820a:	d86f      	bhi.n	80082ec <HAL_TIM_ConfigClockSource+0x16c>
 800820c:	2b30      	cmp	r3, #48	; 0x30
 800820e:	d064      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x15a>
 8008210:	2b30      	cmp	r3, #48	; 0x30
 8008212:	d86b      	bhi.n	80082ec <HAL_TIM_ConfigClockSource+0x16c>
 8008214:	2b20      	cmp	r3, #32
 8008216:	d060      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x15a>
 8008218:	2b20      	cmp	r3, #32
 800821a:	d867      	bhi.n	80082ec <HAL_TIM_ConfigClockSource+0x16c>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d05c      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x15a>
 8008220:	2b10      	cmp	r3, #16
 8008222:	d05a      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x15a>
 8008224:	e062      	b.n	80082ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6899      	ldr	r1, [r3, #8]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f000 fbcb 	bl	80089d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008248:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	609a      	str	r2, [r3, #8]
      break;
 8008252:	e04f      	b.n	80082f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	6899      	ldr	r1, [r3, #8]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f000 fbb4 	bl	80089d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008276:	609a      	str	r2, [r3, #8]
      break;
 8008278:	e03c      	b.n	80082f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	6859      	ldr	r1, [r3, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	461a      	mov	r2, r3
 8008288:	f000 fb28 	bl	80088dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2150      	movs	r1, #80	; 0x50
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fb81 	bl	800899a <TIM_ITRx_SetConfig>
      break;
 8008298:	e02c      	b.n	80082f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6859      	ldr	r1, [r3, #4]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f000 fb47 	bl	800893a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2160      	movs	r1, #96	; 0x60
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fb71 	bl	800899a <TIM_ITRx_SetConfig>
      break;
 80082b8:	e01c      	b.n	80082f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	6859      	ldr	r1, [r3, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	461a      	mov	r2, r3
 80082c8:	f000 fb08 	bl	80088dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2140      	movs	r1, #64	; 0x40
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fb61 	bl	800899a <TIM_ITRx_SetConfig>
      break;
 80082d8:	e00c      	b.n	80082f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4619      	mov	r1, r3
 80082e4:	4610      	mov	r0, r2
 80082e6:	f000 fb58 	bl	800899a <TIM_ITRx_SetConfig>
      break;
 80082ea:	e003      	b.n	80082f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	73fb      	strb	r3, [r7, #15]
      break;
 80082f0:	e000      	b.n	80082f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d107      	bne.n	800834a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008348:	e02a      	b.n	80083a0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d107      	bne.n	8008364 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2202      	movs	r2, #2
 8008358:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008362:	e01d      	b.n	80083a0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	d107      	bne.n	800837e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2204      	movs	r2, #4
 8008372:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800837c:	e010      	b.n	80083a0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	429a      	cmp	r2, r3
 8008386:	d107      	bne.n	8008398 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2208      	movs	r2, #8
 800838c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008396:	e003      	b.n	80083a0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7ff ffb4 	bl	800830e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	771a      	strb	r2, [r3, #28]
}
 80083ac:	bf00      	nop
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d10b      	bne.n	80083e4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2201      	movs	r2, #1
 80083d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d136      	bne.n	8008448 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083e2:	e031      	b.n	8008448 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d10b      	bne.n	8008406 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2202      	movs	r2, #2
 80083f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d125      	bne.n	8008448 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008404:	e020      	b.n	8008448 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	429a      	cmp	r2, r3
 800840e:	d10b      	bne.n	8008428 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2204      	movs	r2, #4
 8008414:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d114      	bne.n	8008448 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008426:	e00f      	b.n	8008448 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d10a      	bne.n	8008448 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2208      	movs	r2, #8
 8008436:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f7fb fe4f 	bl	80040ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	771a      	strb	r2, [r3, #28]
}
 8008454:	bf00      	nop
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008468:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d103      	bne.n	800847c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	771a      	strb	r2, [r3, #28]
 800847a:	e019      	b.n	80084b0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	429a      	cmp	r2, r3
 8008484:	d103      	bne.n	800848e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2202      	movs	r2, #2
 800848a:	771a      	strb	r2, [r3, #28]
 800848c:	e010      	b.n	80084b0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	429a      	cmp	r2, r3
 8008496:	d103      	bne.n	80084a0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2204      	movs	r2, #4
 800849c:	771a      	strb	r2, [r3, #28]
 800849e:	e007      	b.n	80084b0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d102      	bne.n	80084b0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2208      	movs	r2, #8
 80084ae:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f7fb fd9b 	bl	8003fec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	771a      	strb	r2, [r3, #28]
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a34      	ldr	r2, [pc, #208]	; (80085a8 <TIM_Base_SetConfig+0xe4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00f      	beq.n	80084fc <TIM_Base_SetConfig+0x38>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e2:	d00b      	beq.n	80084fc <TIM_Base_SetConfig+0x38>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a31      	ldr	r2, [pc, #196]	; (80085ac <TIM_Base_SetConfig+0xe8>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d007      	beq.n	80084fc <TIM_Base_SetConfig+0x38>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a30      	ldr	r2, [pc, #192]	; (80085b0 <TIM_Base_SetConfig+0xec>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d003      	beq.n	80084fc <TIM_Base_SetConfig+0x38>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a2f      	ldr	r2, [pc, #188]	; (80085b4 <TIM_Base_SetConfig+0xf0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d108      	bne.n	800850e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a25      	ldr	r2, [pc, #148]	; (80085a8 <TIM_Base_SetConfig+0xe4>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d01b      	beq.n	800854e <TIM_Base_SetConfig+0x8a>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800851c:	d017      	beq.n	800854e <TIM_Base_SetConfig+0x8a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a22      	ldr	r2, [pc, #136]	; (80085ac <TIM_Base_SetConfig+0xe8>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d013      	beq.n	800854e <TIM_Base_SetConfig+0x8a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a21      	ldr	r2, [pc, #132]	; (80085b0 <TIM_Base_SetConfig+0xec>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00f      	beq.n	800854e <TIM_Base_SetConfig+0x8a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a20      	ldr	r2, [pc, #128]	; (80085b4 <TIM_Base_SetConfig+0xf0>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00b      	beq.n	800854e <TIM_Base_SetConfig+0x8a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a1f      	ldr	r2, [pc, #124]	; (80085b8 <TIM_Base_SetConfig+0xf4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d007      	beq.n	800854e <TIM_Base_SetConfig+0x8a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a1e      	ldr	r2, [pc, #120]	; (80085bc <TIM_Base_SetConfig+0xf8>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d003      	beq.n	800854e <TIM_Base_SetConfig+0x8a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a1d      	ldr	r2, [pc, #116]	; (80085c0 <TIM_Base_SetConfig+0xfc>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d108      	bne.n	8008560 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a08      	ldr	r2, [pc, #32]	; (80085a8 <TIM_Base_SetConfig+0xe4>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d103      	bne.n	8008594 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	691a      	ldr	r2, [r3, #16]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	615a      	str	r2, [r3, #20]
}
 800859a:	bf00      	nop
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40010000 	.word	0x40010000
 80085ac:	40000400 	.word	0x40000400
 80085b0:	40000800 	.word	0x40000800
 80085b4:	40000c00 	.word	0x40000c00
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40014400 	.word	0x40014400
 80085c0:	40014800 	.word	0x40014800

080085c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	f023 0201 	bic.w	r2, r3, #1
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0303 	bic.w	r3, r3, #3
 80085fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f023 0302 	bic.w	r3, r3, #2
 800860c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	4313      	orrs	r3, r2
 8008616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a1c      	ldr	r2, [pc, #112]	; (800868c <TIM_OC1_SetConfig+0xc8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d10c      	bne.n	800863a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f023 0308 	bic.w	r3, r3, #8
 8008626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f023 0304 	bic.w	r3, r3, #4
 8008638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a13      	ldr	r2, [pc, #76]	; (800868c <TIM_OC1_SetConfig+0xc8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d111      	bne.n	8008666 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	4313      	orrs	r3, r2
 800865a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	4313      	orrs	r3, r2
 8008664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	621a      	str	r2, [r3, #32]
}
 8008680:	bf00      	nop
 8008682:	371c      	adds	r7, #28
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	40010000 	.word	0x40010000

08008690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f023 0210 	bic.w	r2, r3, #16
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	021b      	lsls	r3, r3, #8
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f023 0320 	bic.w	r3, r3, #32
 80086da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a1e      	ldr	r2, [pc, #120]	; (8008764 <TIM_OC2_SetConfig+0xd4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d10d      	bne.n	800870c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	011b      	lsls	r3, r3, #4
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	4313      	orrs	r3, r2
 8008702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800870a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a15      	ldr	r2, [pc, #84]	; (8008764 <TIM_OC2_SetConfig+0xd4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d113      	bne.n	800873c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800871a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	4313      	orrs	r3, r2
 800872e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	621a      	str	r2, [r3, #32]
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	40010000 	.word	0x40010000

08008768 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f023 0303 	bic.w	r3, r3, #3
 800879e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	021b      	lsls	r3, r3, #8
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a1d      	ldr	r2, [pc, #116]	; (8008838 <TIM_OC3_SetConfig+0xd0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d10d      	bne.n	80087e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	021b      	lsls	r3, r3, #8
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a14      	ldr	r2, [pc, #80]	; (8008838 <TIM_OC3_SetConfig+0xd0>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d113      	bne.n	8008812 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	4313      	orrs	r3, r2
 8008810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	621a      	str	r2, [r3, #32]
}
 800882c:	bf00      	nop
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	40010000 	.word	0x40010000

0800883c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800886a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	4313      	orrs	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	031b      	lsls	r3, r3, #12
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	4313      	orrs	r3, r2
 8008892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a10      	ldr	r2, [pc, #64]	; (80088d8 <TIM_OC4_SetConfig+0x9c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d109      	bne.n	80088b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	019b      	lsls	r3, r3, #6
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	621a      	str	r2, [r3, #32]
}
 80088ca:	bf00      	nop
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	40010000 	.word	0x40010000

080088dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f023 0201 	bic.w	r2, r3, #1
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f023 030a 	bic.w	r3, r3, #10
 8008918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	621a      	str	r2, [r3, #32]
}
 800892e:	bf00      	nop
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800893a:	b480      	push	{r7}
 800893c:	b087      	sub	sp, #28
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	f023 0210 	bic.w	r2, r3, #16
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	031b      	lsls	r3, r3, #12
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008976:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	4313      	orrs	r3, r2
 8008980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	621a      	str	r2, [r3, #32]
}
 800898e:	bf00      	nop
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800899a:	b480      	push	{r7}
 800899c:	b085      	sub	sp, #20
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	f043 0307 	orr.w	r3, r3, #7
 80089bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	609a      	str	r2, [r3, #8]
}
 80089c4:	bf00      	nop
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	021a      	lsls	r2, r3, #8
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	609a      	str	r2, [r3, #8]
}
 8008a04:	bf00      	nop
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f003 031f 	and.w	r3, r3, #31
 8008a22:	2201      	movs	r2, #1
 8008a24:	fa02 f303 	lsl.w	r3, r2, r3
 8008a28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6a1a      	ldr	r2, [r3, #32]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	43db      	mvns	r3, r3
 8008a32:	401a      	ands	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a1a      	ldr	r2, [r3, #32]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f003 031f 	and.w	r3, r3, #31
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	fa01 f303 	lsl.w	r3, r1, r3
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	621a      	str	r2, [r3, #32]
}
 8008a4e:	bf00      	nop
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e050      	b.n	8008b16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a1c      	ldr	r2, [pc, #112]	; (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d018      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac0:	d013      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a18      	ldr	r2, [pc, #96]	; (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d00e      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a16      	ldr	r2, [pc, #88]	; (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d009      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a15      	ldr	r2, [pc, #84]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d004      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a13      	ldr	r2, [pc, #76]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d10c      	bne.n	8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40010000 	.word	0x40010000
 8008b28:	40000400 	.word	0x40000400
 8008b2c:	40000800 	.word	0x40000800
 8008b30:	40000c00 	.word	0x40000c00
 8008b34:	40014000 	.word	0x40014000

08008b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e03d      	b.n	8008bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e03f      	b.n	8008c6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d106      	bne.n	8008c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7fa ff40 	bl	8003a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2224      	movs	r2, #36	; 0x24
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fddf 	bl	80097e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	691a      	ldr	r2, [r3, #16]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	695a      	ldr	r2, [r3, #20]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2220      	movs	r2, #32
 8008c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b08a      	sub	sp, #40	; 0x28
 8008c7a:	af02      	add	r7, sp, #8
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	603b      	str	r3, [r7, #0]
 8008c82:	4613      	mov	r3, r2
 8008c84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d17c      	bne.n	8008d90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <HAL_UART_Transmit+0x2c>
 8008c9c:	88fb      	ldrh	r3, [r7, #6]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e075      	b.n	8008d92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_UART_Transmit+0x3e>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e06e      	b.n	8008d92 <HAL_UART_Transmit+0x11c>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2221      	movs	r2, #33	; 0x21
 8008cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cca:	f7fb fbc5 	bl	8004458 <HAL_GetTick>
 8008cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	88fa      	ldrh	r2, [r7, #6]
 8008cd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	88fa      	ldrh	r2, [r7, #6]
 8008cda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce4:	d108      	bne.n	8008cf8 <HAL_UART_Transmit+0x82>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d104      	bne.n	8008cf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	61bb      	str	r3, [r7, #24]
 8008cf6:	e003      	b.n	8008d00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008d08:	e02a      	b.n	8008d60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2200      	movs	r2, #0
 8008d12:	2180      	movs	r1, #128	; 0x80
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 fb1f 	bl	8009358 <UART_WaitOnFlagUntilTimeout>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e036      	b.n	8008d92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10b      	bne.n	8008d42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	3302      	adds	r3, #2
 8008d3e:	61bb      	str	r3, [r7, #24]
 8008d40:	e007      	b.n	8008d52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	781a      	ldrb	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1cf      	bne.n	8008d0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2200      	movs	r2, #0
 8008d72:	2140      	movs	r1, #64	; 0x40
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 faef 	bl	8009358 <UART_WaitOnFlagUntilTimeout>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e006      	b.n	8008d92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2220      	movs	r2, #32
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e000      	b.n	8008d92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d90:	2302      	movs	r3, #2
  }
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3720      	adds	r7, #32
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	4613      	mov	r3, r2
 8008da6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b20      	cmp	r3, #32
 8008db2:	d11d      	bne.n	8008df0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <HAL_UART_Receive_IT+0x26>
 8008dba:	88fb      	ldrh	r3, [r7, #6]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e016      	b.n	8008df2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d101      	bne.n	8008dd2 <HAL_UART_Receive_IT+0x38>
 8008dce:	2302      	movs	r3, #2
 8008dd0:	e00f      	b.n	8008df2 <HAL_UART_Receive_IT+0x58>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008de0:	88fb      	ldrh	r3, [r7, #6]
 8008de2:	461a      	mov	r2, r3
 8008de4:	68b9      	ldr	r1, [r7, #8]
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 fb24 	bl	8009434 <UART_Start_Receive_IT>
 8008dec:	4603      	mov	r3, r0
 8008dee:	e000      	b.n	8008df2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008df0:	2302      	movs	r3, #2
  }
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b0ba      	sub	sp, #232	; 0xe8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10f      	bne.n	8008e62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <HAL_UART_IRQHandler+0x66>
 8008e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e52:	f003 0320 	and.w	r3, r3, #32
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fc07 	bl	800966e <UART_Receive_IT>
      return;
 8008e60:	e256      	b.n	8009310 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 80de 	beq.w	8009028 <HAL_UART_IRQHandler+0x22c>
 8008e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d106      	bne.n	8008e86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 80d1 	beq.w	8009028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <HAL_UART_IRQHandler+0xae>
 8008e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d005      	beq.n	8008eaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	f043 0201 	orr.w	r2, r3, #1
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eae:	f003 0304 	and.w	r3, r3, #4
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00b      	beq.n	8008ece <HAL_UART_IRQHandler+0xd2>
 8008eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d005      	beq.n	8008ece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec6:	f043 0202 	orr.w	r2, r3, #2
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed2:	f003 0302 	and.w	r3, r3, #2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00b      	beq.n	8008ef2 <HAL_UART_IRQHandler+0xf6>
 8008eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	f043 0204 	orr.w	r2, r3, #4
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef6:	f003 0308 	and.w	r3, r3, #8
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d011      	beq.n	8008f22 <HAL_UART_IRQHandler+0x126>
 8008efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d105      	bne.n	8008f16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1a:	f043 0208 	orr.w	r2, r3, #8
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 81ed 	beq.w	8009306 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d008      	beq.n	8008f4a <HAL_UART_IRQHandler+0x14e>
 8008f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f3c:	f003 0320 	and.w	r3, r3, #32
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d002      	beq.n	8008f4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fb92 	bl	800966e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f54:	2b40      	cmp	r3, #64	; 0x40
 8008f56:	bf0c      	ite	eq
 8008f58:	2301      	moveq	r3, #1
 8008f5a:	2300      	movne	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f66:	f003 0308 	and.w	r3, r3, #8
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <HAL_UART_IRQHandler+0x17a>
 8008f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d04f      	beq.n	8009016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa9a 	bl	80094b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f86:	2b40      	cmp	r3, #64	; 0x40
 8008f88:	d141      	bne.n	800900e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3314      	adds	r3, #20
 8008f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3314      	adds	r3, #20
 8008fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008fc6:	e841 2300 	strex	r3, r2, [r1]
 8008fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1d9      	bne.n	8008f8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d013      	beq.n	8009006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe2:	4a7d      	ldr	r2, [pc, #500]	; (80091d8 <HAL_UART_IRQHandler+0x3dc>)
 8008fe4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fb fd3a 	bl	8004a64 <HAL_DMA_Abort_IT>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d016      	beq.n	8009024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009004:	e00e      	b.n	8009024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f990 	bl	800932c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900c:	e00a      	b.n	8009024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f98c 	bl	800932c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009014:	e006      	b.n	8009024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f988 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009022:	e170      	b.n	8009306 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009024:	bf00      	nop
    return;
 8009026:	e16e      	b.n	8009306 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902c:	2b01      	cmp	r3, #1
 800902e:	f040 814a 	bne.w	80092c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009036:	f003 0310 	and.w	r3, r3, #16
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 8143 	beq.w	80092c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 813c 	beq.w	80092c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800904e:	2300      	movs	r3, #0
 8009050:	60bb      	str	r3, [r7, #8]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	60bb      	str	r3, [r7, #8]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906e:	2b40      	cmp	r3, #64	; 0x40
 8009070:	f040 80b4 	bne.w	80091dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 8140 	beq.w	800930a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800908e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009092:	429a      	cmp	r2, r3
 8009094:	f080 8139 	bcs.w	800930a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800909e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090aa:	f000 8088 	beq.w	80091be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	330c      	adds	r3, #12
 80090b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	330c      	adds	r3, #12
 80090d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80090da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1d9      	bne.n	80090ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3314      	adds	r3, #20
 8009100:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800910a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800910c:	f023 0301 	bic.w	r3, r3, #1
 8009110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3314      	adds	r3, #20
 800911a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800911e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009122:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009126:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e1      	bne.n	80090fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3314      	adds	r3, #20
 800913c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800914c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3314      	adds	r3, #20
 8009156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800915a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800915c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009160:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e3      	bne.n	8009136 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	330c      	adds	r3, #12
 8009182:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800918c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800918e:	f023 0310 	bic.w	r3, r3, #16
 8009192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	330c      	adds	r3, #12
 800919c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80091a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80091a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091a8:	e841 2300 	strex	r3, r2, [r1]
 80091ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e3      	bne.n	800917c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fb fbe3 	bl	8004984 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f8b6 	bl	8009340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091d4:	e099      	b.n	800930a <HAL_UART_IRQHandler+0x50e>
 80091d6:	bf00      	nop
 80091d8:	08009577 	.word	0x08009577
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 808b 	beq.w	800930e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80091f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8086 	beq.w	800930e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	330c      	adds	r3, #12
 8009208:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009218:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	330c      	adds	r3, #12
 8009222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009226:	647a      	str	r2, [r7, #68]	; 0x44
 8009228:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800922c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e3      	bne.n	8009202 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3314      	adds	r3, #20
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	623b      	str	r3, [r7, #32]
   return(result);
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3314      	adds	r3, #20
 800925a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800925e:	633a      	str	r2, [r7, #48]	; 0x30
 8009260:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e3      	bne.n	800923a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2220      	movs	r2, #32
 8009276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	330c      	adds	r3, #12
 8009286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f023 0310 	bic.w	r3, r3, #16
 8009296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	330c      	adds	r3, #12
 80092a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80092a4:	61fa      	str	r2, [r7, #28]
 80092a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	69b9      	ldr	r1, [r7, #24]
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	617b      	str	r3, [r7, #20]
   return(result);
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e3      	bne.n	8009280 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f83e 	bl	8009340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092c4:	e023      	b.n	800930e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d009      	beq.n	80092e6 <HAL_UART_IRQHandler+0x4ea>
 80092d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f95d 	bl	800959e <UART_Transmit_IT>
    return;
 80092e4:	e014      	b.n	8009310 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00e      	beq.n	8009310 <HAL_UART_IRQHandler+0x514>
 80092f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d008      	beq.n	8009310 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f99d 	bl	800963e <UART_EndTransmit_IT>
    return;
 8009304:	e004      	b.n	8009310 <HAL_UART_IRQHandler+0x514>
    return;
 8009306:	bf00      	nop
 8009308:	e002      	b.n	8009310 <HAL_UART_IRQHandler+0x514>
      return;
 800930a:	bf00      	nop
 800930c:	e000      	b.n	8009310 <HAL_UART_IRQHandler+0x514>
      return;
 800930e:	bf00      	nop
  }
}
 8009310:	37e8      	adds	r7, #232	; 0xe8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop

08009318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b090      	sub	sp, #64	; 0x40
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	603b      	str	r3, [r7, #0]
 8009364:	4613      	mov	r3, r2
 8009366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009368:	e050      	b.n	800940c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800936a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800936c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009370:	d04c      	beq.n	800940c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009374:	2b00      	cmp	r3, #0
 8009376:	d007      	beq.n	8009388 <UART_WaitOnFlagUntilTimeout+0x30>
 8009378:	f7fb f86e 	bl	8004458 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009384:	429a      	cmp	r2, r3
 8009386:	d241      	bcs.n	800940c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	330c      	adds	r3, #12
 800938e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800939e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	330c      	adds	r3, #12
 80093a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093a8:	637a      	str	r2, [r7, #52]	; 0x34
 80093aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e5      	bne.n	8009388 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3314      	adds	r3, #20
 80093c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	613b      	str	r3, [r7, #16]
   return(result);
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f023 0301 	bic.w	r3, r3, #1
 80093d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3314      	adds	r3, #20
 80093da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093dc:	623a      	str	r2, [r7, #32]
 80093de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	69f9      	ldr	r1, [r7, #28]
 80093e2:	6a3a      	ldr	r2, [r7, #32]
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e5      	bne.n	80093bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e00f      	b.n	800942c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	4013      	ands	r3, r2
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	429a      	cmp	r2, r3
 800941a:	bf0c      	ite	eq
 800941c:	2301      	moveq	r3, #1
 800941e:	2300      	movne	r3, #0
 8009420:	b2db      	uxtb	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	429a      	cmp	r2, r3
 8009428:	d09f      	beq.n	800936a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3740      	adds	r7, #64	; 0x40
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	4613      	mov	r3, r2
 8009440:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	88fa      	ldrh	r2, [r7, #6]
 800944c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	88fa      	ldrh	r2, [r7, #6]
 8009452:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2222      	movs	r2, #34	; 0x22
 800945e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68da      	ldr	r2, [r3, #12]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009480:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	695a      	ldr	r2, [r3, #20]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f042 0201 	orr.w	r2, r2, #1
 8009490:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68da      	ldr	r2, [r3, #12]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f042 0220 	orr.w	r2, r2, #32
 80094a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b095      	sub	sp, #84	; 0x54
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	330c      	adds	r3, #12
 80094be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c2:	e853 3f00 	ldrex	r3, [r3]
 80094c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	330c      	adds	r3, #12
 80094d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094d8:	643a      	str	r2, [r7, #64]	; 0x40
 80094da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094e0:	e841 2300 	strex	r3, r2, [r1]
 80094e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e5      	bne.n	80094b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3314      	adds	r3, #20
 80094f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	f023 0301 	bic.w	r3, r3, #1
 8009502:	64bb      	str	r3, [r7, #72]	; 0x48
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3314      	adds	r3, #20
 800950a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800950c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800950e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e5      	bne.n	80094ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009524:	2b01      	cmp	r3, #1
 8009526:	d119      	bne.n	800955c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	330c      	adds	r3, #12
 800952e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	60bb      	str	r3, [r7, #8]
   return(result);
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f023 0310 	bic.w	r3, r3, #16
 800953e:	647b      	str	r3, [r7, #68]	; 0x44
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	330c      	adds	r3, #12
 8009546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009548:	61ba      	str	r2, [r7, #24]
 800954a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954c:	6979      	ldr	r1, [r7, #20]
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	e841 2300 	strex	r3, r2, [r1]
 8009554:	613b      	str	r3, [r7, #16]
   return(result);
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1e5      	bne.n	8009528 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2220      	movs	r2, #32
 8009560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	631a      	str	r2, [r3, #48]	; 0x30
}
 800956a:	bf00      	nop
 800956c:	3754      	adds	r7, #84	; 0x54
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009582:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f7ff fecb 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009596:	bf00      	nop
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800959e:	b480      	push	{r7}
 80095a0:	b085      	sub	sp, #20
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b21      	cmp	r3, #33	; 0x21
 80095b0:	d13e      	bne.n	8009630 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ba:	d114      	bne.n	80095e6 <UART_Transmit_IT+0x48>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d110      	bne.n	80095e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	1c9a      	adds	r2, r3, #2
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	621a      	str	r2, [r3, #32]
 80095e4:	e008      	b.n	80095f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	1c59      	adds	r1, r3, #1
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6211      	str	r1, [r2, #32]
 80095f0:	781a      	ldrb	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	3b01      	subs	r3, #1
 8009600:	b29b      	uxth	r3, r3
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	4619      	mov	r1, r3
 8009606:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10f      	bne.n	800962c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800961a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68da      	ldr	r2, [r3, #12]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800962a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	e000      	b.n	8009632 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009630:	2302      	movs	r3, #2
  }
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009654:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7ff fe5a 	bl	8009318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b08c      	sub	sp, #48	; 0x30
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b22      	cmp	r3, #34	; 0x22
 8009680:	f040 80ab 	bne.w	80097da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800968c:	d117      	bne.n	80096be <UART_Receive_IT+0x50>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d113      	bne.n	80096be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b6:	1c9a      	adds	r2, r3, #2
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	629a      	str	r2, [r3, #40]	; 0x28
 80096bc:	e026      	b.n	800970c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d0:	d007      	beq.n	80096e2 <UART_Receive_IT+0x74>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10a      	bne.n	80096f0 <UART_Receive_IT+0x82>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	701a      	strb	r2, [r3, #0]
 80096ee:	e008      	b.n	8009702 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009700:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009710:	b29b      	uxth	r3, r3
 8009712:	3b01      	subs	r3, #1
 8009714:	b29b      	uxth	r3, r3
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	4619      	mov	r1, r3
 800971a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800971c:	2b00      	cmp	r3, #0
 800971e:	d15a      	bne.n	80097d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 0220 	bic.w	r2, r2, #32
 800972e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800973e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	695a      	ldr	r2, [r3, #20]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f022 0201 	bic.w	r2, r2, #1
 800974e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2220      	movs	r2, #32
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975c:	2b01      	cmp	r3, #1
 800975e:	d135      	bne.n	80097cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	330c      	adds	r3, #12
 800976c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	e853 3f00 	ldrex	r3, [r3]
 8009774:	613b      	str	r3, [r7, #16]
   return(result);
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f023 0310 	bic.w	r3, r3, #16
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	330c      	adds	r3, #12
 8009784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009786:	623a      	str	r2, [r7, #32]
 8009788:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978a:	69f9      	ldr	r1, [r7, #28]
 800978c:	6a3a      	ldr	r2, [r7, #32]
 800978e:	e841 2300 	strex	r3, r2, [r1]
 8009792:	61bb      	str	r3, [r7, #24]
   return(result);
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1e5      	bne.n	8009766 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0310 	and.w	r3, r3, #16
 80097a4:	2b10      	cmp	r3, #16
 80097a6:	d10a      	bne.n	80097be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097a8:	2300      	movs	r3, #0
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff fdbb 	bl	8009340 <HAL_UARTEx_RxEventCallback>
 80097ca:	e002      	b.n	80097d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7f8 fba9 	bl	8001f24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e002      	b.n	80097dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e000      	b.n	80097dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80097da:	2302      	movs	r3, #2
  }
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3730      	adds	r7, #48	; 0x30
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097e8:	b0c0      	sub	sp, #256	; 0x100
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80097fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009800:	68d9      	ldr	r1, [r3, #12]
 8009802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	ea40 0301 	orr.w	r3, r0, r1
 800980c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800980e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009812:	689a      	ldr	r2, [r3, #8]
 8009814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	431a      	orrs	r2, r3
 800981c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	431a      	orrs	r2, r3
 8009824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	4313      	orrs	r3, r2
 800982c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800983c:	f021 010c 	bic.w	r1, r1, #12
 8009840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800984a:	430b      	orrs	r3, r1
 800984c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800984e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800985a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800985e:	6999      	ldr	r1, [r3, #24]
 8009860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	ea40 0301 	orr.w	r3, r0, r1
 800986a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800986c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	4b8f      	ldr	r3, [pc, #572]	; (8009ab0 <UART_SetConfig+0x2cc>)
 8009874:	429a      	cmp	r2, r3
 8009876:	d005      	beq.n	8009884 <UART_SetConfig+0xa0>
 8009878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	4b8d      	ldr	r3, [pc, #564]	; (8009ab4 <UART_SetConfig+0x2d0>)
 8009880:	429a      	cmp	r2, r3
 8009882:	d104      	bne.n	800988e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009884:	f7fd fc10 	bl	80070a8 <HAL_RCC_GetPCLK2Freq>
 8009888:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800988c:	e003      	b.n	8009896 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800988e:	f7fd fbf7 	bl	8007080 <HAL_RCC_GetPCLK1Freq>
 8009892:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a0:	f040 810c 	bne.w	8009abc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098a8:	2200      	movs	r2, #0
 80098aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80098ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80098b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80098b6:	4622      	mov	r2, r4
 80098b8:	462b      	mov	r3, r5
 80098ba:	1891      	adds	r1, r2, r2
 80098bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80098be:	415b      	adcs	r3, r3
 80098c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80098c6:	4621      	mov	r1, r4
 80098c8:	eb12 0801 	adds.w	r8, r2, r1
 80098cc:	4629      	mov	r1, r5
 80098ce:	eb43 0901 	adc.w	r9, r3, r1
 80098d2:	f04f 0200 	mov.w	r2, #0
 80098d6:	f04f 0300 	mov.w	r3, #0
 80098da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80098e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098e6:	4690      	mov	r8, r2
 80098e8:	4699      	mov	r9, r3
 80098ea:	4623      	mov	r3, r4
 80098ec:	eb18 0303 	adds.w	r3, r8, r3
 80098f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098f4:	462b      	mov	r3, r5
 80098f6:	eb49 0303 	adc.w	r3, r9, r3
 80098fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800990a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800990e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009912:	460b      	mov	r3, r1
 8009914:	18db      	adds	r3, r3, r3
 8009916:	653b      	str	r3, [r7, #80]	; 0x50
 8009918:	4613      	mov	r3, r2
 800991a:	eb42 0303 	adc.w	r3, r2, r3
 800991e:	657b      	str	r3, [r7, #84]	; 0x54
 8009920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009924:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009928:	f7f7 f956 	bl	8000bd8 <__aeabi_uldivmod>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4b61      	ldr	r3, [pc, #388]	; (8009ab8 <UART_SetConfig+0x2d4>)
 8009932:	fba3 2302 	umull	r2, r3, r3, r2
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	011c      	lsls	r4, r3, #4
 800993a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800993e:	2200      	movs	r2, #0
 8009940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009944:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009948:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800994c:	4642      	mov	r2, r8
 800994e:	464b      	mov	r3, r9
 8009950:	1891      	adds	r1, r2, r2
 8009952:	64b9      	str	r1, [r7, #72]	; 0x48
 8009954:	415b      	adcs	r3, r3
 8009956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009958:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800995c:	4641      	mov	r1, r8
 800995e:	eb12 0a01 	adds.w	sl, r2, r1
 8009962:	4649      	mov	r1, r9
 8009964:	eb43 0b01 	adc.w	fp, r3, r1
 8009968:	f04f 0200 	mov.w	r2, #0
 800996c:	f04f 0300 	mov.w	r3, #0
 8009970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800997c:	4692      	mov	sl, r2
 800997e:	469b      	mov	fp, r3
 8009980:	4643      	mov	r3, r8
 8009982:	eb1a 0303 	adds.w	r3, sl, r3
 8009986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800998a:	464b      	mov	r3, r9
 800998c:	eb4b 0303 	adc.w	r3, fp, r3
 8009990:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80099a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80099a8:	460b      	mov	r3, r1
 80099aa:	18db      	adds	r3, r3, r3
 80099ac:	643b      	str	r3, [r7, #64]	; 0x40
 80099ae:	4613      	mov	r3, r2
 80099b0:	eb42 0303 	adc.w	r3, r2, r3
 80099b4:	647b      	str	r3, [r7, #68]	; 0x44
 80099b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80099ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80099be:	f7f7 f90b 	bl	8000bd8 <__aeabi_uldivmod>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4611      	mov	r1, r2
 80099c8:	4b3b      	ldr	r3, [pc, #236]	; (8009ab8 <UART_SetConfig+0x2d4>)
 80099ca:	fba3 2301 	umull	r2, r3, r3, r1
 80099ce:	095b      	lsrs	r3, r3, #5
 80099d0:	2264      	movs	r2, #100	; 0x64
 80099d2:	fb02 f303 	mul.w	r3, r2, r3
 80099d6:	1acb      	subs	r3, r1, r3
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80099de:	4b36      	ldr	r3, [pc, #216]	; (8009ab8 <UART_SetConfig+0x2d4>)
 80099e0:	fba3 2302 	umull	r2, r3, r3, r2
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80099ec:	441c      	add	r4, r3
 80099ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099f2:	2200      	movs	r2, #0
 80099f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80099fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009a00:	4642      	mov	r2, r8
 8009a02:	464b      	mov	r3, r9
 8009a04:	1891      	adds	r1, r2, r2
 8009a06:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a08:	415b      	adcs	r3, r3
 8009a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a10:	4641      	mov	r1, r8
 8009a12:	1851      	adds	r1, r2, r1
 8009a14:	6339      	str	r1, [r7, #48]	; 0x30
 8009a16:	4649      	mov	r1, r9
 8009a18:	414b      	adcs	r3, r1
 8009a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a1c:	f04f 0200 	mov.w	r2, #0
 8009a20:	f04f 0300 	mov.w	r3, #0
 8009a24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009a28:	4659      	mov	r1, fp
 8009a2a:	00cb      	lsls	r3, r1, #3
 8009a2c:	4651      	mov	r1, sl
 8009a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a32:	4651      	mov	r1, sl
 8009a34:	00ca      	lsls	r2, r1, #3
 8009a36:	4610      	mov	r0, r2
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	189b      	adds	r3, r3, r2
 8009a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a44:	464b      	mov	r3, r9
 8009a46:	460a      	mov	r2, r1
 8009a48:	eb42 0303 	adc.w	r3, r2, r3
 8009a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009a60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009a64:	460b      	mov	r3, r1
 8009a66:	18db      	adds	r3, r3, r3
 8009a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	eb42 0303 	adc.w	r3, r2, r3
 8009a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009a7a:	f7f7 f8ad 	bl	8000bd8 <__aeabi_uldivmod>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4b0d      	ldr	r3, [pc, #52]	; (8009ab8 <UART_SetConfig+0x2d4>)
 8009a84:	fba3 1302 	umull	r1, r3, r3, r2
 8009a88:	095b      	lsrs	r3, r3, #5
 8009a8a:	2164      	movs	r1, #100	; 0x64
 8009a8c:	fb01 f303 	mul.w	r3, r1, r3
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	3332      	adds	r3, #50	; 0x32
 8009a96:	4a08      	ldr	r2, [pc, #32]	; (8009ab8 <UART_SetConfig+0x2d4>)
 8009a98:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9c:	095b      	lsrs	r3, r3, #5
 8009a9e:	f003 0207 	and.w	r2, r3, #7
 8009aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4422      	add	r2, r4
 8009aaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009aac:	e105      	b.n	8009cba <UART_SetConfig+0x4d6>
 8009aae:	bf00      	nop
 8009ab0:	40011000 	.word	0x40011000
 8009ab4:	40011400 	.word	0x40011400
 8009ab8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009aca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009ace:	4642      	mov	r2, r8
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	1891      	adds	r1, r2, r2
 8009ad4:	6239      	str	r1, [r7, #32]
 8009ad6:	415b      	adcs	r3, r3
 8009ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8009ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ade:	4641      	mov	r1, r8
 8009ae0:	1854      	adds	r4, r2, r1
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	eb43 0501 	adc.w	r5, r3, r1
 8009ae8:	f04f 0200 	mov.w	r2, #0
 8009aec:	f04f 0300 	mov.w	r3, #0
 8009af0:	00eb      	lsls	r3, r5, #3
 8009af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009af6:	00e2      	lsls	r2, r4, #3
 8009af8:	4614      	mov	r4, r2
 8009afa:	461d      	mov	r5, r3
 8009afc:	4643      	mov	r3, r8
 8009afe:	18e3      	adds	r3, r4, r3
 8009b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b04:	464b      	mov	r3, r9
 8009b06:	eb45 0303 	adc.w	r3, r5, r3
 8009b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b1e:	f04f 0200 	mov.w	r2, #0
 8009b22:	f04f 0300 	mov.w	r3, #0
 8009b26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	008b      	lsls	r3, r1, #2
 8009b2e:	4621      	mov	r1, r4
 8009b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b34:	4621      	mov	r1, r4
 8009b36:	008a      	lsls	r2, r1, #2
 8009b38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b3c:	f7f7 f84c 	bl	8000bd8 <__aeabi_uldivmod>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	4b60      	ldr	r3, [pc, #384]	; (8009cc8 <UART_SetConfig+0x4e4>)
 8009b46:	fba3 2302 	umull	r2, r3, r3, r2
 8009b4a:	095b      	lsrs	r3, r3, #5
 8009b4c:	011c      	lsls	r4, r3, #4
 8009b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b52:	2200      	movs	r2, #0
 8009b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009b60:	4642      	mov	r2, r8
 8009b62:	464b      	mov	r3, r9
 8009b64:	1891      	adds	r1, r2, r2
 8009b66:	61b9      	str	r1, [r7, #24]
 8009b68:	415b      	adcs	r3, r3
 8009b6a:	61fb      	str	r3, [r7, #28]
 8009b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b70:	4641      	mov	r1, r8
 8009b72:	1851      	adds	r1, r2, r1
 8009b74:	6139      	str	r1, [r7, #16]
 8009b76:	4649      	mov	r1, r9
 8009b78:	414b      	adcs	r3, r1
 8009b7a:	617b      	str	r3, [r7, #20]
 8009b7c:	f04f 0200 	mov.w	r2, #0
 8009b80:	f04f 0300 	mov.w	r3, #0
 8009b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b88:	4659      	mov	r1, fp
 8009b8a:	00cb      	lsls	r3, r1, #3
 8009b8c:	4651      	mov	r1, sl
 8009b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b92:	4651      	mov	r1, sl
 8009b94:	00ca      	lsls	r2, r1, #3
 8009b96:	4610      	mov	r0, r2
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	189b      	adds	r3, r3, r2
 8009ba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ba4:	464b      	mov	r3, r9
 8009ba6:	460a      	mov	r2, r1
 8009ba8:	eb42 0303 	adc.w	r3, r2, r3
 8009bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009bbc:	f04f 0200 	mov.w	r2, #0
 8009bc0:	f04f 0300 	mov.w	r3, #0
 8009bc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009bc8:	4649      	mov	r1, r9
 8009bca:	008b      	lsls	r3, r1, #2
 8009bcc:	4641      	mov	r1, r8
 8009bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bd2:	4641      	mov	r1, r8
 8009bd4:	008a      	lsls	r2, r1, #2
 8009bd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009bda:	f7f6 fffd 	bl	8000bd8 <__aeabi_uldivmod>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4b39      	ldr	r3, [pc, #228]	; (8009cc8 <UART_SetConfig+0x4e4>)
 8009be4:	fba3 1302 	umull	r1, r3, r3, r2
 8009be8:	095b      	lsrs	r3, r3, #5
 8009bea:	2164      	movs	r1, #100	; 0x64
 8009bec:	fb01 f303 	mul.w	r3, r1, r3
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	011b      	lsls	r3, r3, #4
 8009bf4:	3332      	adds	r3, #50	; 0x32
 8009bf6:	4a34      	ldr	r2, [pc, #208]	; (8009cc8 <UART_SetConfig+0x4e4>)
 8009bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfc:	095b      	lsrs	r3, r3, #5
 8009bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c02:	441c      	add	r4, r3
 8009c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c08:	2200      	movs	r2, #0
 8009c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8009c0c:	677a      	str	r2, [r7, #116]	; 0x74
 8009c0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009c12:	4642      	mov	r2, r8
 8009c14:	464b      	mov	r3, r9
 8009c16:	1891      	adds	r1, r2, r2
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	415b      	adcs	r3, r3
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c22:	4641      	mov	r1, r8
 8009c24:	1851      	adds	r1, r2, r1
 8009c26:	6039      	str	r1, [r7, #0]
 8009c28:	4649      	mov	r1, r9
 8009c2a:	414b      	adcs	r3, r1
 8009c2c:	607b      	str	r3, [r7, #4]
 8009c2e:	f04f 0200 	mov.w	r2, #0
 8009c32:	f04f 0300 	mov.w	r3, #0
 8009c36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c3a:	4659      	mov	r1, fp
 8009c3c:	00cb      	lsls	r3, r1, #3
 8009c3e:	4651      	mov	r1, sl
 8009c40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c44:	4651      	mov	r1, sl
 8009c46:	00ca      	lsls	r2, r1, #3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	4642      	mov	r2, r8
 8009c50:	189b      	adds	r3, r3, r2
 8009c52:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c54:	464b      	mov	r3, r9
 8009c56:	460a      	mov	r2, r1
 8009c58:	eb42 0303 	adc.w	r3, r2, r3
 8009c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	663b      	str	r3, [r7, #96]	; 0x60
 8009c68:	667a      	str	r2, [r7, #100]	; 0x64
 8009c6a:	f04f 0200 	mov.w	r2, #0
 8009c6e:	f04f 0300 	mov.w	r3, #0
 8009c72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009c76:	4649      	mov	r1, r9
 8009c78:	008b      	lsls	r3, r1, #2
 8009c7a:	4641      	mov	r1, r8
 8009c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c80:	4641      	mov	r1, r8
 8009c82:	008a      	lsls	r2, r1, #2
 8009c84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009c88:	f7f6 ffa6 	bl	8000bd8 <__aeabi_uldivmod>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <UART_SetConfig+0x4e4>)
 8009c92:	fba3 1302 	umull	r1, r3, r3, r2
 8009c96:	095b      	lsrs	r3, r3, #5
 8009c98:	2164      	movs	r1, #100	; 0x64
 8009c9a:	fb01 f303 	mul.w	r3, r1, r3
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	3332      	adds	r3, #50	; 0x32
 8009ca4:	4a08      	ldr	r2, [pc, #32]	; (8009cc8 <UART_SetConfig+0x4e4>)
 8009ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8009caa:	095b      	lsrs	r3, r3, #5
 8009cac:	f003 020f 	and.w	r2, r3, #15
 8009cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4422      	add	r2, r4
 8009cb8:	609a      	str	r2, [r3, #8]
}
 8009cba:	bf00      	nop
 8009cbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cc6:	bf00      	nop
 8009cc8:	51eb851f 	.word	0x51eb851f

08009ccc <atoi>:
 8009ccc:	220a      	movs	r2, #10
 8009cce:	2100      	movs	r1, #0
 8009cd0:	f000 beda 	b.w	800aa88 <strtol>

08009cd4 <__errno>:
 8009cd4:	4b01      	ldr	r3, [pc, #4]	; (8009cdc <__errno+0x8>)
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20000118 	.word	0x20000118

08009ce0 <__libc_init_array>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	4d0d      	ldr	r5, [pc, #52]	; (8009d18 <__libc_init_array+0x38>)
 8009ce4:	4c0d      	ldr	r4, [pc, #52]	; (8009d1c <__libc_init_array+0x3c>)
 8009ce6:	1b64      	subs	r4, r4, r5
 8009ce8:	10a4      	asrs	r4, r4, #2
 8009cea:	2600      	movs	r6, #0
 8009cec:	42a6      	cmp	r6, r4
 8009cee:	d109      	bne.n	8009d04 <__libc_init_array+0x24>
 8009cf0:	4d0b      	ldr	r5, [pc, #44]	; (8009d20 <__libc_init_array+0x40>)
 8009cf2:	4c0c      	ldr	r4, [pc, #48]	; (8009d24 <__libc_init_array+0x44>)
 8009cf4:	f003 ff4c 	bl	800db90 <_init>
 8009cf8:	1b64      	subs	r4, r4, r5
 8009cfa:	10a4      	asrs	r4, r4, #2
 8009cfc:	2600      	movs	r6, #0
 8009cfe:	42a6      	cmp	r6, r4
 8009d00:	d105      	bne.n	8009d0e <__libc_init_array+0x2e>
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d08:	4798      	blx	r3
 8009d0a:	3601      	adds	r6, #1
 8009d0c:	e7ee      	b.n	8009cec <__libc_init_array+0xc>
 8009d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d12:	4798      	blx	r3
 8009d14:	3601      	adds	r6, #1
 8009d16:	e7f2      	b.n	8009cfe <__libc_init_array+0x1e>
 8009d18:	0800e9f8 	.word	0x0800e9f8
 8009d1c:	0800e9f8 	.word	0x0800e9f8
 8009d20:	0800e9f8 	.word	0x0800e9f8
 8009d24:	0800e9fc 	.word	0x0800e9fc

08009d28 <malloc>:
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <malloc+0xc>)
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	f000 b87f 	b.w	8009e30 <_malloc_r>
 8009d32:	bf00      	nop
 8009d34:	20000118 	.word	0x20000118

08009d38 <free>:
 8009d38:	4b02      	ldr	r3, [pc, #8]	; (8009d44 <free+0xc>)
 8009d3a:	4601      	mov	r1, r0
 8009d3c:	6818      	ldr	r0, [r3, #0]
 8009d3e:	f000 b80b 	b.w	8009d58 <_free_r>
 8009d42:	bf00      	nop
 8009d44:	20000118 	.word	0x20000118

08009d48 <memset>:
 8009d48:	4402      	add	r2, r0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d100      	bne.n	8009d52 <memset+0xa>
 8009d50:	4770      	bx	lr
 8009d52:	f803 1b01 	strb.w	r1, [r3], #1
 8009d56:	e7f9      	b.n	8009d4c <memset+0x4>

08009d58 <_free_r>:
 8009d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d5a:	2900      	cmp	r1, #0
 8009d5c:	d044      	beq.n	8009de8 <_free_r+0x90>
 8009d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d62:	9001      	str	r0, [sp, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f1a1 0404 	sub.w	r4, r1, #4
 8009d6a:	bfb8      	it	lt
 8009d6c:	18e4      	addlt	r4, r4, r3
 8009d6e:	f001 fd55 	bl	800b81c <__malloc_lock>
 8009d72:	4a1e      	ldr	r2, [pc, #120]	; (8009dec <_free_r+0x94>)
 8009d74:	9801      	ldr	r0, [sp, #4]
 8009d76:	6813      	ldr	r3, [r2, #0]
 8009d78:	b933      	cbnz	r3, 8009d88 <_free_r+0x30>
 8009d7a:	6063      	str	r3, [r4, #4]
 8009d7c:	6014      	str	r4, [r2, #0]
 8009d7e:	b003      	add	sp, #12
 8009d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d84:	f001 bd50 	b.w	800b828 <__malloc_unlock>
 8009d88:	42a3      	cmp	r3, r4
 8009d8a:	d908      	bls.n	8009d9e <_free_r+0x46>
 8009d8c:	6825      	ldr	r5, [r4, #0]
 8009d8e:	1961      	adds	r1, r4, r5
 8009d90:	428b      	cmp	r3, r1
 8009d92:	bf01      	itttt	eq
 8009d94:	6819      	ldreq	r1, [r3, #0]
 8009d96:	685b      	ldreq	r3, [r3, #4]
 8009d98:	1949      	addeq	r1, r1, r5
 8009d9a:	6021      	streq	r1, [r4, #0]
 8009d9c:	e7ed      	b.n	8009d7a <_free_r+0x22>
 8009d9e:	461a      	mov	r2, r3
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	b10b      	cbz	r3, 8009da8 <_free_r+0x50>
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	d9fa      	bls.n	8009d9e <_free_r+0x46>
 8009da8:	6811      	ldr	r1, [r2, #0]
 8009daa:	1855      	adds	r5, r2, r1
 8009dac:	42a5      	cmp	r5, r4
 8009dae:	d10b      	bne.n	8009dc8 <_free_r+0x70>
 8009db0:	6824      	ldr	r4, [r4, #0]
 8009db2:	4421      	add	r1, r4
 8009db4:	1854      	adds	r4, r2, r1
 8009db6:	42a3      	cmp	r3, r4
 8009db8:	6011      	str	r1, [r2, #0]
 8009dba:	d1e0      	bne.n	8009d7e <_free_r+0x26>
 8009dbc:	681c      	ldr	r4, [r3, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	6053      	str	r3, [r2, #4]
 8009dc2:	4421      	add	r1, r4
 8009dc4:	6011      	str	r1, [r2, #0]
 8009dc6:	e7da      	b.n	8009d7e <_free_r+0x26>
 8009dc8:	d902      	bls.n	8009dd0 <_free_r+0x78>
 8009dca:	230c      	movs	r3, #12
 8009dcc:	6003      	str	r3, [r0, #0]
 8009dce:	e7d6      	b.n	8009d7e <_free_r+0x26>
 8009dd0:	6825      	ldr	r5, [r4, #0]
 8009dd2:	1961      	adds	r1, r4, r5
 8009dd4:	428b      	cmp	r3, r1
 8009dd6:	bf04      	itt	eq
 8009dd8:	6819      	ldreq	r1, [r3, #0]
 8009dda:	685b      	ldreq	r3, [r3, #4]
 8009ddc:	6063      	str	r3, [r4, #4]
 8009dde:	bf04      	itt	eq
 8009de0:	1949      	addeq	r1, r1, r5
 8009de2:	6021      	streq	r1, [r4, #0]
 8009de4:	6054      	str	r4, [r2, #4]
 8009de6:	e7ca      	b.n	8009d7e <_free_r+0x26>
 8009de8:	b003      	add	sp, #12
 8009dea:	bd30      	pop	{r4, r5, pc}
 8009dec:	20000b5c 	.word	0x20000b5c

08009df0 <sbrk_aligned>:
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	4e0e      	ldr	r6, [pc, #56]	; (8009e2c <sbrk_aligned+0x3c>)
 8009df4:	460c      	mov	r4, r1
 8009df6:	6831      	ldr	r1, [r6, #0]
 8009df8:	4605      	mov	r5, r0
 8009dfa:	b911      	cbnz	r1, 8009e02 <sbrk_aligned+0x12>
 8009dfc:	f000 fcf6 	bl	800a7ec <_sbrk_r>
 8009e00:	6030      	str	r0, [r6, #0]
 8009e02:	4621      	mov	r1, r4
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 fcf1 	bl	800a7ec <_sbrk_r>
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	d00a      	beq.n	8009e24 <sbrk_aligned+0x34>
 8009e0e:	1cc4      	adds	r4, r0, #3
 8009e10:	f024 0403 	bic.w	r4, r4, #3
 8009e14:	42a0      	cmp	r0, r4
 8009e16:	d007      	beq.n	8009e28 <sbrk_aligned+0x38>
 8009e18:	1a21      	subs	r1, r4, r0
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f000 fce6 	bl	800a7ec <_sbrk_r>
 8009e20:	3001      	adds	r0, #1
 8009e22:	d101      	bne.n	8009e28 <sbrk_aligned+0x38>
 8009e24:	f04f 34ff 	mov.w	r4, #4294967295
 8009e28:	4620      	mov	r0, r4
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	20000b60 	.word	0x20000b60

08009e30 <_malloc_r>:
 8009e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e34:	1ccd      	adds	r5, r1, #3
 8009e36:	f025 0503 	bic.w	r5, r5, #3
 8009e3a:	3508      	adds	r5, #8
 8009e3c:	2d0c      	cmp	r5, #12
 8009e3e:	bf38      	it	cc
 8009e40:	250c      	movcc	r5, #12
 8009e42:	2d00      	cmp	r5, #0
 8009e44:	4607      	mov	r7, r0
 8009e46:	db01      	blt.n	8009e4c <_malloc_r+0x1c>
 8009e48:	42a9      	cmp	r1, r5
 8009e4a:	d905      	bls.n	8009e58 <_malloc_r+0x28>
 8009e4c:	230c      	movs	r3, #12
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	2600      	movs	r6, #0
 8009e52:	4630      	mov	r0, r6
 8009e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e58:	4e2e      	ldr	r6, [pc, #184]	; (8009f14 <_malloc_r+0xe4>)
 8009e5a:	f001 fcdf 	bl	800b81c <__malloc_lock>
 8009e5e:	6833      	ldr	r3, [r6, #0]
 8009e60:	461c      	mov	r4, r3
 8009e62:	bb34      	cbnz	r4, 8009eb2 <_malloc_r+0x82>
 8009e64:	4629      	mov	r1, r5
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7ff ffc2 	bl	8009df0 <sbrk_aligned>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	4604      	mov	r4, r0
 8009e70:	d14d      	bne.n	8009f0e <_malloc_r+0xde>
 8009e72:	6834      	ldr	r4, [r6, #0]
 8009e74:	4626      	mov	r6, r4
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	d140      	bne.n	8009efc <_malloc_r+0xcc>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4638      	mov	r0, r7
 8009e80:	eb04 0803 	add.w	r8, r4, r3
 8009e84:	f000 fcb2 	bl	800a7ec <_sbrk_r>
 8009e88:	4580      	cmp	r8, r0
 8009e8a:	d13a      	bne.n	8009f02 <_malloc_r+0xd2>
 8009e8c:	6821      	ldr	r1, [r4, #0]
 8009e8e:	3503      	adds	r5, #3
 8009e90:	1a6d      	subs	r5, r5, r1
 8009e92:	f025 0503 	bic.w	r5, r5, #3
 8009e96:	3508      	adds	r5, #8
 8009e98:	2d0c      	cmp	r5, #12
 8009e9a:	bf38      	it	cc
 8009e9c:	250c      	movcc	r5, #12
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7ff ffa5 	bl	8009df0 <sbrk_aligned>
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	d02b      	beq.n	8009f02 <_malloc_r+0xd2>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	442b      	add	r3, r5
 8009eae:	6023      	str	r3, [r4, #0]
 8009eb0:	e00e      	b.n	8009ed0 <_malloc_r+0xa0>
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	1b52      	subs	r2, r2, r5
 8009eb6:	d41e      	bmi.n	8009ef6 <_malloc_r+0xc6>
 8009eb8:	2a0b      	cmp	r2, #11
 8009eba:	d916      	bls.n	8009eea <_malloc_r+0xba>
 8009ebc:	1961      	adds	r1, r4, r5
 8009ebe:	42a3      	cmp	r3, r4
 8009ec0:	6025      	str	r5, [r4, #0]
 8009ec2:	bf18      	it	ne
 8009ec4:	6059      	strne	r1, [r3, #4]
 8009ec6:	6863      	ldr	r3, [r4, #4]
 8009ec8:	bf08      	it	eq
 8009eca:	6031      	streq	r1, [r6, #0]
 8009ecc:	5162      	str	r2, [r4, r5]
 8009ece:	604b      	str	r3, [r1, #4]
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f104 060b 	add.w	r6, r4, #11
 8009ed6:	f001 fca7 	bl	800b828 <__malloc_unlock>
 8009eda:	f026 0607 	bic.w	r6, r6, #7
 8009ede:	1d23      	adds	r3, r4, #4
 8009ee0:	1af2      	subs	r2, r6, r3
 8009ee2:	d0b6      	beq.n	8009e52 <_malloc_r+0x22>
 8009ee4:	1b9b      	subs	r3, r3, r6
 8009ee6:	50a3      	str	r3, [r4, r2]
 8009ee8:	e7b3      	b.n	8009e52 <_malloc_r+0x22>
 8009eea:	6862      	ldr	r2, [r4, #4]
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	bf0c      	ite	eq
 8009ef0:	6032      	streq	r2, [r6, #0]
 8009ef2:	605a      	strne	r2, [r3, #4]
 8009ef4:	e7ec      	b.n	8009ed0 <_malloc_r+0xa0>
 8009ef6:	4623      	mov	r3, r4
 8009ef8:	6864      	ldr	r4, [r4, #4]
 8009efa:	e7b2      	b.n	8009e62 <_malloc_r+0x32>
 8009efc:	4634      	mov	r4, r6
 8009efe:	6876      	ldr	r6, [r6, #4]
 8009f00:	e7b9      	b.n	8009e76 <_malloc_r+0x46>
 8009f02:	230c      	movs	r3, #12
 8009f04:	603b      	str	r3, [r7, #0]
 8009f06:	4638      	mov	r0, r7
 8009f08:	f001 fc8e 	bl	800b828 <__malloc_unlock>
 8009f0c:	e7a1      	b.n	8009e52 <_malloc_r+0x22>
 8009f0e:	6025      	str	r5, [r4, #0]
 8009f10:	e7de      	b.n	8009ed0 <_malloc_r+0xa0>
 8009f12:	bf00      	nop
 8009f14:	20000b5c 	.word	0x20000b5c

08009f18 <__cvt>:
 8009f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	ec55 4b10 	vmov	r4, r5, d0
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	460e      	mov	r6, r1
 8009f24:	4619      	mov	r1, r3
 8009f26:	462b      	mov	r3, r5
 8009f28:	bfbb      	ittet	lt
 8009f2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f2e:	461d      	movlt	r5, r3
 8009f30:	2300      	movge	r3, #0
 8009f32:	232d      	movlt	r3, #45	; 0x2d
 8009f34:	700b      	strb	r3, [r1, #0]
 8009f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f3c:	4691      	mov	r9, r2
 8009f3e:	f023 0820 	bic.w	r8, r3, #32
 8009f42:	bfbc      	itt	lt
 8009f44:	4622      	movlt	r2, r4
 8009f46:	4614      	movlt	r4, r2
 8009f48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f4c:	d005      	beq.n	8009f5a <__cvt+0x42>
 8009f4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f52:	d100      	bne.n	8009f56 <__cvt+0x3e>
 8009f54:	3601      	adds	r6, #1
 8009f56:	2102      	movs	r1, #2
 8009f58:	e000      	b.n	8009f5c <__cvt+0x44>
 8009f5a:	2103      	movs	r1, #3
 8009f5c:	ab03      	add	r3, sp, #12
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	ab02      	add	r3, sp, #8
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	ec45 4b10 	vmov	d0, r4, r5
 8009f68:	4653      	mov	r3, sl
 8009f6a:	4632      	mov	r2, r6
 8009f6c:	f000 fe44 	bl	800abf8 <_dtoa_r>
 8009f70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f74:	4607      	mov	r7, r0
 8009f76:	d102      	bne.n	8009f7e <__cvt+0x66>
 8009f78:	f019 0f01 	tst.w	r9, #1
 8009f7c:	d022      	beq.n	8009fc4 <__cvt+0xac>
 8009f7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f82:	eb07 0906 	add.w	r9, r7, r6
 8009f86:	d110      	bne.n	8009faa <__cvt+0x92>
 8009f88:	783b      	ldrb	r3, [r7, #0]
 8009f8a:	2b30      	cmp	r3, #48	; 0x30
 8009f8c:	d10a      	bne.n	8009fa4 <__cvt+0x8c>
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2300      	movs	r3, #0
 8009f92:	4620      	mov	r0, r4
 8009f94:	4629      	mov	r1, r5
 8009f96:	f7f6 fdaf 	bl	8000af8 <__aeabi_dcmpeq>
 8009f9a:	b918      	cbnz	r0, 8009fa4 <__cvt+0x8c>
 8009f9c:	f1c6 0601 	rsb	r6, r6, #1
 8009fa0:	f8ca 6000 	str.w	r6, [sl]
 8009fa4:	f8da 3000 	ldr.w	r3, [sl]
 8009fa8:	4499      	add	r9, r3
 8009faa:	2200      	movs	r2, #0
 8009fac:	2300      	movs	r3, #0
 8009fae:	4620      	mov	r0, r4
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	f7f6 fda1 	bl	8000af8 <__aeabi_dcmpeq>
 8009fb6:	b108      	cbz	r0, 8009fbc <__cvt+0xa4>
 8009fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fbc:	2230      	movs	r2, #48	; 0x30
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	454b      	cmp	r3, r9
 8009fc2:	d307      	bcc.n	8009fd4 <__cvt+0xbc>
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fc8:	1bdb      	subs	r3, r3, r7
 8009fca:	4638      	mov	r0, r7
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	b004      	add	sp, #16
 8009fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd4:	1c59      	adds	r1, r3, #1
 8009fd6:	9103      	str	r1, [sp, #12]
 8009fd8:	701a      	strb	r2, [r3, #0]
 8009fda:	e7f0      	b.n	8009fbe <__cvt+0xa6>

08009fdc <__exponent>:
 8009fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	bfb8      	it	lt
 8009fe4:	4249      	neglt	r1, r1
 8009fe6:	f803 2b02 	strb.w	r2, [r3], #2
 8009fea:	bfb4      	ite	lt
 8009fec:	222d      	movlt	r2, #45	; 0x2d
 8009fee:	222b      	movge	r2, #43	; 0x2b
 8009ff0:	2909      	cmp	r1, #9
 8009ff2:	7042      	strb	r2, [r0, #1]
 8009ff4:	dd2a      	ble.n	800a04c <__exponent+0x70>
 8009ff6:	f10d 0407 	add.w	r4, sp, #7
 8009ffa:	46a4      	mov	ip, r4
 8009ffc:	270a      	movs	r7, #10
 8009ffe:	46a6      	mov	lr, r4
 800a000:	460a      	mov	r2, r1
 800a002:	fb91 f6f7 	sdiv	r6, r1, r7
 800a006:	fb07 1516 	mls	r5, r7, r6, r1
 800a00a:	3530      	adds	r5, #48	; 0x30
 800a00c:	2a63      	cmp	r2, #99	; 0x63
 800a00e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a012:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a016:	4631      	mov	r1, r6
 800a018:	dcf1      	bgt.n	8009ffe <__exponent+0x22>
 800a01a:	3130      	adds	r1, #48	; 0x30
 800a01c:	f1ae 0502 	sub.w	r5, lr, #2
 800a020:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a024:	1c44      	adds	r4, r0, #1
 800a026:	4629      	mov	r1, r5
 800a028:	4561      	cmp	r1, ip
 800a02a:	d30a      	bcc.n	800a042 <__exponent+0x66>
 800a02c:	f10d 0209 	add.w	r2, sp, #9
 800a030:	eba2 020e 	sub.w	r2, r2, lr
 800a034:	4565      	cmp	r5, ip
 800a036:	bf88      	it	hi
 800a038:	2200      	movhi	r2, #0
 800a03a:	4413      	add	r3, r2
 800a03c:	1a18      	subs	r0, r3, r0
 800a03e:	b003      	add	sp, #12
 800a040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a046:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a04a:	e7ed      	b.n	800a028 <__exponent+0x4c>
 800a04c:	2330      	movs	r3, #48	; 0x30
 800a04e:	3130      	adds	r1, #48	; 0x30
 800a050:	7083      	strb	r3, [r0, #2]
 800a052:	70c1      	strb	r1, [r0, #3]
 800a054:	1d03      	adds	r3, r0, #4
 800a056:	e7f1      	b.n	800a03c <__exponent+0x60>

0800a058 <_printf_float>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	ed2d 8b02 	vpush	{d8}
 800a060:	b08d      	sub	sp, #52	; 0x34
 800a062:	460c      	mov	r4, r1
 800a064:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a068:	4616      	mov	r6, r2
 800a06a:	461f      	mov	r7, r3
 800a06c:	4605      	mov	r5, r0
 800a06e:	f001 fbb1 	bl	800b7d4 <_localeconv_r>
 800a072:	f8d0 a000 	ldr.w	sl, [r0]
 800a076:	4650      	mov	r0, sl
 800a078:	f7f6 f8bc 	bl	80001f4 <strlen>
 800a07c:	2300      	movs	r3, #0
 800a07e:	930a      	str	r3, [sp, #40]	; 0x28
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	9305      	str	r3, [sp, #20]
 800a084:	f8d8 3000 	ldr.w	r3, [r8]
 800a088:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a08c:	3307      	adds	r3, #7
 800a08e:	f023 0307 	bic.w	r3, r3, #7
 800a092:	f103 0208 	add.w	r2, r3, #8
 800a096:	f8c8 2000 	str.w	r2, [r8]
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a0a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a0a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0aa:	9307      	str	r3, [sp, #28]
 800a0ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0b0:	ee08 0a10 	vmov	s16, r0
 800a0b4:	4b9f      	ldr	r3, [pc, #636]	; (800a334 <_printf_float+0x2dc>)
 800a0b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a0be:	f7f6 fd4d 	bl	8000b5c <__aeabi_dcmpun>
 800a0c2:	bb88      	cbnz	r0, 800a128 <_printf_float+0xd0>
 800a0c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0c8:	4b9a      	ldr	r3, [pc, #616]	; (800a334 <_printf_float+0x2dc>)
 800a0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ce:	f7f6 fd27 	bl	8000b20 <__aeabi_dcmple>
 800a0d2:	bb48      	cbnz	r0, 800a128 <_printf_float+0xd0>
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4640      	mov	r0, r8
 800a0da:	4649      	mov	r1, r9
 800a0dc:	f7f6 fd16 	bl	8000b0c <__aeabi_dcmplt>
 800a0e0:	b110      	cbz	r0, 800a0e8 <_printf_float+0x90>
 800a0e2:	232d      	movs	r3, #45	; 0x2d
 800a0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0e8:	4b93      	ldr	r3, [pc, #588]	; (800a338 <_printf_float+0x2e0>)
 800a0ea:	4894      	ldr	r0, [pc, #592]	; (800a33c <_printf_float+0x2e4>)
 800a0ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a0f0:	bf94      	ite	ls
 800a0f2:	4698      	movls	r8, r3
 800a0f4:	4680      	movhi	r8, r0
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	6123      	str	r3, [r4, #16]
 800a0fa:	9b05      	ldr	r3, [sp, #20]
 800a0fc:	f023 0204 	bic.w	r2, r3, #4
 800a100:	6022      	str	r2, [r4, #0]
 800a102:	f04f 0900 	mov.w	r9, #0
 800a106:	9700      	str	r7, [sp, #0]
 800a108:	4633      	mov	r3, r6
 800a10a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a10c:	4621      	mov	r1, r4
 800a10e:	4628      	mov	r0, r5
 800a110:	f000 f9d8 	bl	800a4c4 <_printf_common>
 800a114:	3001      	adds	r0, #1
 800a116:	f040 8090 	bne.w	800a23a <_printf_float+0x1e2>
 800a11a:	f04f 30ff 	mov.w	r0, #4294967295
 800a11e:	b00d      	add	sp, #52	; 0x34
 800a120:	ecbd 8b02 	vpop	{d8}
 800a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a128:	4642      	mov	r2, r8
 800a12a:	464b      	mov	r3, r9
 800a12c:	4640      	mov	r0, r8
 800a12e:	4649      	mov	r1, r9
 800a130:	f7f6 fd14 	bl	8000b5c <__aeabi_dcmpun>
 800a134:	b140      	cbz	r0, 800a148 <_printf_float+0xf0>
 800a136:	464b      	mov	r3, r9
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bfbc      	itt	lt
 800a13c:	232d      	movlt	r3, #45	; 0x2d
 800a13e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a142:	487f      	ldr	r0, [pc, #508]	; (800a340 <_printf_float+0x2e8>)
 800a144:	4b7f      	ldr	r3, [pc, #508]	; (800a344 <_printf_float+0x2ec>)
 800a146:	e7d1      	b.n	800a0ec <_printf_float+0x94>
 800a148:	6863      	ldr	r3, [r4, #4]
 800a14a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a14e:	9206      	str	r2, [sp, #24]
 800a150:	1c5a      	adds	r2, r3, #1
 800a152:	d13f      	bne.n	800a1d4 <_printf_float+0x17c>
 800a154:	2306      	movs	r3, #6
 800a156:	6063      	str	r3, [r4, #4]
 800a158:	9b05      	ldr	r3, [sp, #20]
 800a15a:	6861      	ldr	r1, [r4, #4]
 800a15c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a160:	2300      	movs	r3, #0
 800a162:	9303      	str	r3, [sp, #12]
 800a164:	ab0a      	add	r3, sp, #40	; 0x28
 800a166:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a16a:	ab09      	add	r3, sp, #36	; 0x24
 800a16c:	ec49 8b10 	vmov	d0, r8, r9
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	6022      	str	r2, [r4, #0]
 800a174:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a178:	4628      	mov	r0, r5
 800a17a:	f7ff fecd 	bl	8009f18 <__cvt>
 800a17e:	9b06      	ldr	r3, [sp, #24]
 800a180:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a182:	2b47      	cmp	r3, #71	; 0x47
 800a184:	4680      	mov	r8, r0
 800a186:	d108      	bne.n	800a19a <_printf_float+0x142>
 800a188:	1cc8      	adds	r0, r1, #3
 800a18a:	db02      	blt.n	800a192 <_printf_float+0x13a>
 800a18c:	6863      	ldr	r3, [r4, #4]
 800a18e:	4299      	cmp	r1, r3
 800a190:	dd41      	ble.n	800a216 <_printf_float+0x1be>
 800a192:	f1ab 0b02 	sub.w	fp, fp, #2
 800a196:	fa5f fb8b 	uxtb.w	fp, fp
 800a19a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a19e:	d820      	bhi.n	800a1e2 <_printf_float+0x18a>
 800a1a0:	3901      	subs	r1, #1
 800a1a2:	465a      	mov	r2, fp
 800a1a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1a8:	9109      	str	r1, [sp, #36]	; 0x24
 800a1aa:	f7ff ff17 	bl	8009fdc <__exponent>
 800a1ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1b0:	1813      	adds	r3, r2, r0
 800a1b2:	2a01      	cmp	r2, #1
 800a1b4:	4681      	mov	r9, r0
 800a1b6:	6123      	str	r3, [r4, #16]
 800a1b8:	dc02      	bgt.n	800a1c0 <_printf_float+0x168>
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	07d2      	lsls	r2, r2, #31
 800a1be:	d501      	bpl.n	800a1c4 <_printf_float+0x16c>
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	6123      	str	r3, [r4, #16]
 800a1c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d09c      	beq.n	800a106 <_printf_float+0xae>
 800a1cc:	232d      	movs	r3, #45	; 0x2d
 800a1ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d2:	e798      	b.n	800a106 <_printf_float+0xae>
 800a1d4:	9a06      	ldr	r2, [sp, #24]
 800a1d6:	2a47      	cmp	r2, #71	; 0x47
 800a1d8:	d1be      	bne.n	800a158 <_printf_float+0x100>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1bc      	bne.n	800a158 <_printf_float+0x100>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e7b9      	b.n	800a156 <_printf_float+0xfe>
 800a1e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a1e6:	d118      	bne.n	800a21a <_printf_float+0x1c2>
 800a1e8:	2900      	cmp	r1, #0
 800a1ea:	6863      	ldr	r3, [r4, #4]
 800a1ec:	dd0b      	ble.n	800a206 <_printf_float+0x1ae>
 800a1ee:	6121      	str	r1, [r4, #16]
 800a1f0:	b913      	cbnz	r3, 800a1f8 <_printf_float+0x1a0>
 800a1f2:	6822      	ldr	r2, [r4, #0]
 800a1f4:	07d0      	lsls	r0, r2, #31
 800a1f6:	d502      	bpl.n	800a1fe <_printf_float+0x1a6>
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	440b      	add	r3, r1
 800a1fc:	6123      	str	r3, [r4, #16]
 800a1fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a200:	f04f 0900 	mov.w	r9, #0
 800a204:	e7de      	b.n	800a1c4 <_printf_float+0x16c>
 800a206:	b913      	cbnz	r3, 800a20e <_printf_float+0x1b6>
 800a208:	6822      	ldr	r2, [r4, #0]
 800a20a:	07d2      	lsls	r2, r2, #31
 800a20c:	d501      	bpl.n	800a212 <_printf_float+0x1ba>
 800a20e:	3302      	adds	r3, #2
 800a210:	e7f4      	b.n	800a1fc <_printf_float+0x1a4>
 800a212:	2301      	movs	r3, #1
 800a214:	e7f2      	b.n	800a1fc <_printf_float+0x1a4>
 800a216:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a21c:	4299      	cmp	r1, r3
 800a21e:	db05      	blt.n	800a22c <_printf_float+0x1d4>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	6121      	str	r1, [r4, #16]
 800a224:	07d8      	lsls	r0, r3, #31
 800a226:	d5ea      	bpl.n	800a1fe <_printf_float+0x1a6>
 800a228:	1c4b      	adds	r3, r1, #1
 800a22a:	e7e7      	b.n	800a1fc <_printf_float+0x1a4>
 800a22c:	2900      	cmp	r1, #0
 800a22e:	bfd4      	ite	le
 800a230:	f1c1 0202 	rsble	r2, r1, #2
 800a234:	2201      	movgt	r2, #1
 800a236:	4413      	add	r3, r2
 800a238:	e7e0      	b.n	800a1fc <_printf_float+0x1a4>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	055a      	lsls	r2, r3, #21
 800a23e:	d407      	bmi.n	800a250 <_printf_float+0x1f8>
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	4642      	mov	r2, r8
 800a244:	4631      	mov	r1, r6
 800a246:	4628      	mov	r0, r5
 800a248:	47b8      	blx	r7
 800a24a:	3001      	adds	r0, #1
 800a24c:	d12c      	bne.n	800a2a8 <_printf_float+0x250>
 800a24e:	e764      	b.n	800a11a <_printf_float+0xc2>
 800a250:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a254:	f240 80e0 	bls.w	800a418 <_printf_float+0x3c0>
 800a258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a25c:	2200      	movs	r2, #0
 800a25e:	2300      	movs	r3, #0
 800a260:	f7f6 fc4a 	bl	8000af8 <__aeabi_dcmpeq>
 800a264:	2800      	cmp	r0, #0
 800a266:	d034      	beq.n	800a2d2 <_printf_float+0x27a>
 800a268:	4a37      	ldr	r2, [pc, #220]	; (800a348 <_printf_float+0x2f0>)
 800a26a:	2301      	movs	r3, #1
 800a26c:	4631      	mov	r1, r6
 800a26e:	4628      	mov	r0, r5
 800a270:	47b8      	blx	r7
 800a272:	3001      	adds	r0, #1
 800a274:	f43f af51 	beq.w	800a11a <_printf_float+0xc2>
 800a278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a27c:	429a      	cmp	r2, r3
 800a27e:	db02      	blt.n	800a286 <_printf_float+0x22e>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	07d8      	lsls	r0, r3, #31
 800a284:	d510      	bpl.n	800a2a8 <_printf_float+0x250>
 800a286:	ee18 3a10 	vmov	r3, s16
 800a28a:	4652      	mov	r2, sl
 800a28c:	4631      	mov	r1, r6
 800a28e:	4628      	mov	r0, r5
 800a290:	47b8      	blx	r7
 800a292:	3001      	adds	r0, #1
 800a294:	f43f af41 	beq.w	800a11a <_printf_float+0xc2>
 800a298:	f04f 0800 	mov.w	r8, #0
 800a29c:	f104 091a 	add.w	r9, r4, #26
 800a2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	4543      	cmp	r3, r8
 800a2a6:	dc09      	bgt.n	800a2bc <_printf_float+0x264>
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	079b      	lsls	r3, r3, #30
 800a2ac:	f100 8105 	bmi.w	800a4ba <_printf_float+0x462>
 800a2b0:	68e0      	ldr	r0, [r4, #12]
 800a2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2b4:	4298      	cmp	r0, r3
 800a2b6:	bfb8      	it	lt
 800a2b8:	4618      	movlt	r0, r3
 800a2ba:	e730      	b.n	800a11e <_printf_float+0xc6>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	464a      	mov	r2, r9
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b8      	blx	r7
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	f43f af27 	beq.w	800a11a <_printf_float+0xc2>
 800a2cc:	f108 0801 	add.w	r8, r8, #1
 800a2d0:	e7e6      	b.n	800a2a0 <_printf_float+0x248>
 800a2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	dc39      	bgt.n	800a34c <_printf_float+0x2f4>
 800a2d8:	4a1b      	ldr	r2, [pc, #108]	; (800a348 <_printf_float+0x2f0>)
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f43f af19 	beq.w	800a11a <_printf_float+0xc2>
 800a2e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	d102      	bne.n	800a2f6 <_printf_float+0x29e>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	07d9      	lsls	r1, r3, #31
 800a2f4:	d5d8      	bpl.n	800a2a8 <_printf_float+0x250>
 800a2f6:	ee18 3a10 	vmov	r3, s16
 800a2fa:	4652      	mov	r2, sl
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	4628      	mov	r0, r5
 800a300:	47b8      	blx	r7
 800a302:	3001      	adds	r0, #1
 800a304:	f43f af09 	beq.w	800a11a <_printf_float+0xc2>
 800a308:	f04f 0900 	mov.w	r9, #0
 800a30c:	f104 0a1a 	add.w	sl, r4, #26
 800a310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a312:	425b      	negs	r3, r3
 800a314:	454b      	cmp	r3, r9
 800a316:	dc01      	bgt.n	800a31c <_printf_float+0x2c4>
 800a318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31a:	e792      	b.n	800a242 <_printf_float+0x1ea>
 800a31c:	2301      	movs	r3, #1
 800a31e:	4652      	mov	r2, sl
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f aef7 	beq.w	800a11a <_printf_float+0xc2>
 800a32c:	f109 0901 	add.w	r9, r9, #1
 800a330:	e7ee      	b.n	800a310 <_printf_float+0x2b8>
 800a332:	bf00      	nop
 800a334:	7fefffff 	.word	0x7fefffff
 800a338:	0800e58c 	.word	0x0800e58c
 800a33c:	0800e590 	.word	0x0800e590
 800a340:	0800e598 	.word	0x0800e598
 800a344:	0800e594 	.word	0x0800e594
 800a348:	0800e8c1 	.word	0x0800e8c1
 800a34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a34e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a350:	429a      	cmp	r2, r3
 800a352:	bfa8      	it	ge
 800a354:	461a      	movge	r2, r3
 800a356:	2a00      	cmp	r2, #0
 800a358:	4691      	mov	r9, r2
 800a35a:	dc37      	bgt.n	800a3cc <_printf_float+0x374>
 800a35c:	f04f 0b00 	mov.w	fp, #0
 800a360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a364:	f104 021a 	add.w	r2, r4, #26
 800a368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	eba3 0309 	sub.w	r3, r3, r9
 800a370:	455b      	cmp	r3, fp
 800a372:	dc33      	bgt.n	800a3dc <_printf_float+0x384>
 800a374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a378:	429a      	cmp	r2, r3
 800a37a:	db3b      	blt.n	800a3f4 <_printf_float+0x39c>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	07da      	lsls	r2, r3, #31
 800a380:	d438      	bmi.n	800a3f4 <_printf_float+0x39c>
 800a382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a384:	9a05      	ldr	r2, [sp, #20]
 800a386:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a388:	1a9a      	subs	r2, r3, r2
 800a38a:	eba3 0901 	sub.w	r9, r3, r1
 800a38e:	4591      	cmp	r9, r2
 800a390:	bfa8      	it	ge
 800a392:	4691      	movge	r9, r2
 800a394:	f1b9 0f00 	cmp.w	r9, #0
 800a398:	dc35      	bgt.n	800a406 <_printf_float+0x3ae>
 800a39a:	f04f 0800 	mov.w	r8, #0
 800a39e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3a2:	f104 0a1a 	add.w	sl, r4, #26
 800a3a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3aa:	1a9b      	subs	r3, r3, r2
 800a3ac:	eba3 0309 	sub.w	r3, r3, r9
 800a3b0:	4543      	cmp	r3, r8
 800a3b2:	f77f af79 	ble.w	800a2a8 <_printf_float+0x250>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4652      	mov	r2, sl
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	f43f aeaa 	beq.w	800a11a <_printf_float+0xc2>
 800a3c6:	f108 0801 	add.w	r8, r8, #1
 800a3ca:	e7ec      	b.n	800a3a6 <_printf_float+0x34e>
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4642      	mov	r2, r8
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	47b8      	blx	r7
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d1c0      	bne.n	800a35c <_printf_float+0x304>
 800a3da:	e69e      	b.n	800a11a <_printf_float+0xc2>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	4631      	mov	r1, r6
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	9205      	str	r2, [sp, #20]
 800a3e4:	47b8      	blx	r7
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	f43f ae97 	beq.w	800a11a <_printf_float+0xc2>
 800a3ec:	9a05      	ldr	r2, [sp, #20]
 800a3ee:	f10b 0b01 	add.w	fp, fp, #1
 800a3f2:	e7b9      	b.n	800a368 <_printf_float+0x310>
 800a3f4:	ee18 3a10 	vmov	r3, s16
 800a3f8:	4652      	mov	r2, sl
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	d1be      	bne.n	800a382 <_printf_float+0x32a>
 800a404:	e689      	b.n	800a11a <_printf_float+0xc2>
 800a406:	9a05      	ldr	r2, [sp, #20]
 800a408:	464b      	mov	r3, r9
 800a40a:	4442      	add	r2, r8
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	d1c1      	bne.n	800a39a <_printf_float+0x342>
 800a416:	e680      	b.n	800a11a <_printf_float+0xc2>
 800a418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a41a:	2a01      	cmp	r2, #1
 800a41c:	dc01      	bgt.n	800a422 <_printf_float+0x3ca>
 800a41e:	07db      	lsls	r3, r3, #31
 800a420:	d538      	bpl.n	800a494 <_printf_float+0x43c>
 800a422:	2301      	movs	r3, #1
 800a424:	4642      	mov	r2, r8
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae74 	beq.w	800a11a <_printf_float+0xc2>
 800a432:	ee18 3a10 	vmov	r3, s16
 800a436:	4652      	mov	r2, sl
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b8      	blx	r7
 800a43e:	3001      	adds	r0, #1
 800a440:	f43f ae6b 	beq.w	800a11a <_printf_float+0xc2>
 800a444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a448:	2200      	movs	r2, #0
 800a44a:	2300      	movs	r3, #0
 800a44c:	f7f6 fb54 	bl	8000af8 <__aeabi_dcmpeq>
 800a450:	b9d8      	cbnz	r0, 800a48a <_printf_float+0x432>
 800a452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a454:	f108 0201 	add.w	r2, r8, #1
 800a458:	3b01      	subs	r3, #1
 800a45a:	4631      	mov	r1, r6
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	d10e      	bne.n	800a482 <_printf_float+0x42a>
 800a464:	e659      	b.n	800a11a <_printf_float+0xc2>
 800a466:	2301      	movs	r3, #1
 800a468:	4652      	mov	r2, sl
 800a46a:	4631      	mov	r1, r6
 800a46c:	4628      	mov	r0, r5
 800a46e:	47b8      	blx	r7
 800a470:	3001      	adds	r0, #1
 800a472:	f43f ae52 	beq.w	800a11a <_printf_float+0xc2>
 800a476:	f108 0801 	add.w	r8, r8, #1
 800a47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47c:	3b01      	subs	r3, #1
 800a47e:	4543      	cmp	r3, r8
 800a480:	dcf1      	bgt.n	800a466 <_printf_float+0x40e>
 800a482:	464b      	mov	r3, r9
 800a484:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a488:	e6dc      	b.n	800a244 <_printf_float+0x1ec>
 800a48a:	f04f 0800 	mov.w	r8, #0
 800a48e:	f104 0a1a 	add.w	sl, r4, #26
 800a492:	e7f2      	b.n	800a47a <_printf_float+0x422>
 800a494:	2301      	movs	r3, #1
 800a496:	4642      	mov	r2, r8
 800a498:	e7df      	b.n	800a45a <_printf_float+0x402>
 800a49a:	2301      	movs	r3, #1
 800a49c:	464a      	mov	r2, r9
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	47b8      	blx	r7
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	f43f ae38 	beq.w	800a11a <_printf_float+0xc2>
 800a4aa:	f108 0801 	add.w	r8, r8, #1
 800a4ae:	68e3      	ldr	r3, [r4, #12]
 800a4b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4b2:	1a5b      	subs	r3, r3, r1
 800a4b4:	4543      	cmp	r3, r8
 800a4b6:	dcf0      	bgt.n	800a49a <_printf_float+0x442>
 800a4b8:	e6fa      	b.n	800a2b0 <_printf_float+0x258>
 800a4ba:	f04f 0800 	mov.w	r8, #0
 800a4be:	f104 0919 	add.w	r9, r4, #25
 800a4c2:	e7f4      	b.n	800a4ae <_printf_float+0x456>

0800a4c4 <_printf_common>:
 800a4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	4616      	mov	r6, r2
 800a4ca:	4699      	mov	r9, r3
 800a4cc:	688a      	ldr	r2, [r1, #8]
 800a4ce:	690b      	ldr	r3, [r1, #16]
 800a4d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	bfb8      	it	lt
 800a4d8:	4613      	movlt	r3, r2
 800a4da:	6033      	str	r3, [r6, #0]
 800a4dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	b10a      	cbz	r2, 800a4ea <_printf_common+0x26>
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	6033      	str	r3, [r6, #0]
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	0699      	lsls	r1, r3, #26
 800a4ee:	bf42      	ittt	mi
 800a4f0:	6833      	ldrmi	r3, [r6, #0]
 800a4f2:	3302      	addmi	r3, #2
 800a4f4:	6033      	strmi	r3, [r6, #0]
 800a4f6:	6825      	ldr	r5, [r4, #0]
 800a4f8:	f015 0506 	ands.w	r5, r5, #6
 800a4fc:	d106      	bne.n	800a50c <_printf_common+0x48>
 800a4fe:	f104 0a19 	add.w	sl, r4, #25
 800a502:	68e3      	ldr	r3, [r4, #12]
 800a504:	6832      	ldr	r2, [r6, #0]
 800a506:	1a9b      	subs	r3, r3, r2
 800a508:	42ab      	cmp	r3, r5
 800a50a:	dc26      	bgt.n	800a55a <_printf_common+0x96>
 800a50c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a510:	1e13      	subs	r3, r2, #0
 800a512:	6822      	ldr	r2, [r4, #0]
 800a514:	bf18      	it	ne
 800a516:	2301      	movne	r3, #1
 800a518:	0692      	lsls	r2, r2, #26
 800a51a:	d42b      	bmi.n	800a574 <_printf_common+0xb0>
 800a51c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a520:	4649      	mov	r1, r9
 800a522:	4638      	mov	r0, r7
 800a524:	47c0      	blx	r8
 800a526:	3001      	adds	r0, #1
 800a528:	d01e      	beq.n	800a568 <_printf_common+0xa4>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	68e5      	ldr	r5, [r4, #12]
 800a52e:	6832      	ldr	r2, [r6, #0]
 800a530:	f003 0306 	and.w	r3, r3, #6
 800a534:	2b04      	cmp	r3, #4
 800a536:	bf08      	it	eq
 800a538:	1aad      	subeq	r5, r5, r2
 800a53a:	68a3      	ldr	r3, [r4, #8]
 800a53c:	6922      	ldr	r2, [r4, #16]
 800a53e:	bf0c      	ite	eq
 800a540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a544:	2500      	movne	r5, #0
 800a546:	4293      	cmp	r3, r2
 800a548:	bfc4      	itt	gt
 800a54a:	1a9b      	subgt	r3, r3, r2
 800a54c:	18ed      	addgt	r5, r5, r3
 800a54e:	2600      	movs	r6, #0
 800a550:	341a      	adds	r4, #26
 800a552:	42b5      	cmp	r5, r6
 800a554:	d11a      	bne.n	800a58c <_printf_common+0xc8>
 800a556:	2000      	movs	r0, #0
 800a558:	e008      	b.n	800a56c <_printf_common+0xa8>
 800a55a:	2301      	movs	r3, #1
 800a55c:	4652      	mov	r2, sl
 800a55e:	4649      	mov	r1, r9
 800a560:	4638      	mov	r0, r7
 800a562:	47c0      	blx	r8
 800a564:	3001      	adds	r0, #1
 800a566:	d103      	bne.n	800a570 <_printf_common+0xac>
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a570:	3501      	adds	r5, #1
 800a572:	e7c6      	b.n	800a502 <_printf_common+0x3e>
 800a574:	18e1      	adds	r1, r4, r3
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	2030      	movs	r0, #48	; 0x30
 800a57a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a57e:	4422      	add	r2, r4
 800a580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a588:	3302      	adds	r3, #2
 800a58a:	e7c7      	b.n	800a51c <_printf_common+0x58>
 800a58c:	2301      	movs	r3, #1
 800a58e:	4622      	mov	r2, r4
 800a590:	4649      	mov	r1, r9
 800a592:	4638      	mov	r0, r7
 800a594:	47c0      	blx	r8
 800a596:	3001      	adds	r0, #1
 800a598:	d0e6      	beq.n	800a568 <_printf_common+0xa4>
 800a59a:	3601      	adds	r6, #1
 800a59c:	e7d9      	b.n	800a552 <_printf_common+0x8e>
	...

0800a5a0 <_printf_i>:
 800a5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	7e0f      	ldrb	r7, [r1, #24]
 800a5a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5a8:	2f78      	cmp	r7, #120	; 0x78
 800a5aa:	4691      	mov	r9, r2
 800a5ac:	4680      	mov	r8, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	469a      	mov	sl, r3
 800a5b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5b6:	d807      	bhi.n	800a5c8 <_printf_i+0x28>
 800a5b8:	2f62      	cmp	r7, #98	; 0x62
 800a5ba:	d80a      	bhi.n	800a5d2 <_printf_i+0x32>
 800a5bc:	2f00      	cmp	r7, #0
 800a5be:	f000 80d8 	beq.w	800a772 <_printf_i+0x1d2>
 800a5c2:	2f58      	cmp	r7, #88	; 0x58
 800a5c4:	f000 80a3 	beq.w	800a70e <_printf_i+0x16e>
 800a5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5d0:	e03a      	b.n	800a648 <_printf_i+0xa8>
 800a5d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5d6:	2b15      	cmp	r3, #21
 800a5d8:	d8f6      	bhi.n	800a5c8 <_printf_i+0x28>
 800a5da:	a101      	add	r1, pc, #4	; (adr r1, 800a5e0 <_printf_i+0x40>)
 800a5dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5e0:	0800a639 	.word	0x0800a639
 800a5e4:	0800a64d 	.word	0x0800a64d
 800a5e8:	0800a5c9 	.word	0x0800a5c9
 800a5ec:	0800a5c9 	.word	0x0800a5c9
 800a5f0:	0800a5c9 	.word	0x0800a5c9
 800a5f4:	0800a5c9 	.word	0x0800a5c9
 800a5f8:	0800a64d 	.word	0x0800a64d
 800a5fc:	0800a5c9 	.word	0x0800a5c9
 800a600:	0800a5c9 	.word	0x0800a5c9
 800a604:	0800a5c9 	.word	0x0800a5c9
 800a608:	0800a5c9 	.word	0x0800a5c9
 800a60c:	0800a759 	.word	0x0800a759
 800a610:	0800a67d 	.word	0x0800a67d
 800a614:	0800a73b 	.word	0x0800a73b
 800a618:	0800a5c9 	.word	0x0800a5c9
 800a61c:	0800a5c9 	.word	0x0800a5c9
 800a620:	0800a77b 	.word	0x0800a77b
 800a624:	0800a5c9 	.word	0x0800a5c9
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a5c9 	.word	0x0800a5c9
 800a630:	0800a5c9 	.word	0x0800a5c9
 800a634:	0800a743 	.word	0x0800a743
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	1d1a      	adds	r2, r3, #4
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	602a      	str	r2, [r5, #0]
 800a640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a648:	2301      	movs	r3, #1
 800a64a:	e0a3      	b.n	800a794 <_printf_i+0x1f4>
 800a64c:	6820      	ldr	r0, [r4, #0]
 800a64e:	6829      	ldr	r1, [r5, #0]
 800a650:	0606      	lsls	r6, r0, #24
 800a652:	f101 0304 	add.w	r3, r1, #4
 800a656:	d50a      	bpl.n	800a66e <_printf_i+0xce>
 800a658:	680e      	ldr	r6, [r1, #0]
 800a65a:	602b      	str	r3, [r5, #0]
 800a65c:	2e00      	cmp	r6, #0
 800a65e:	da03      	bge.n	800a668 <_printf_i+0xc8>
 800a660:	232d      	movs	r3, #45	; 0x2d
 800a662:	4276      	negs	r6, r6
 800a664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a668:	485e      	ldr	r0, [pc, #376]	; (800a7e4 <_printf_i+0x244>)
 800a66a:	230a      	movs	r3, #10
 800a66c:	e019      	b.n	800a6a2 <_printf_i+0x102>
 800a66e:	680e      	ldr	r6, [r1, #0]
 800a670:	602b      	str	r3, [r5, #0]
 800a672:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a676:	bf18      	it	ne
 800a678:	b236      	sxthne	r6, r6
 800a67a:	e7ef      	b.n	800a65c <_printf_i+0xbc>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	6820      	ldr	r0, [r4, #0]
 800a680:	1d19      	adds	r1, r3, #4
 800a682:	6029      	str	r1, [r5, #0]
 800a684:	0601      	lsls	r1, r0, #24
 800a686:	d501      	bpl.n	800a68c <_printf_i+0xec>
 800a688:	681e      	ldr	r6, [r3, #0]
 800a68a:	e002      	b.n	800a692 <_printf_i+0xf2>
 800a68c:	0646      	lsls	r6, r0, #25
 800a68e:	d5fb      	bpl.n	800a688 <_printf_i+0xe8>
 800a690:	881e      	ldrh	r6, [r3, #0]
 800a692:	4854      	ldr	r0, [pc, #336]	; (800a7e4 <_printf_i+0x244>)
 800a694:	2f6f      	cmp	r7, #111	; 0x6f
 800a696:	bf0c      	ite	eq
 800a698:	2308      	moveq	r3, #8
 800a69a:	230a      	movne	r3, #10
 800a69c:	2100      	movs	r1, #0
 800a69e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6a2:	6865      	ldr	r5, [r4, #4]
 800a6a4:	60a5      	str	r5, [r4, #8]
 800a6a6:	2d00      	cmp	r5, #0
 800a6a8:	bfa2      	ittt	ge
 800a6aa:	6821      	ldrge	r1, [r4, #0]
 800a6ac:	f021 0104 	bicge.w	r1, r1, #4
 800a6b0:	6021      	strge	r1, [r4, #0]
 800a6b2:	b90e      	cbnz	r6, 800a6b8 <_printf_i+0x118>
 800a6b4:	2d00      	cmp	r5, #0
 800a6b6:	d04d      	beq.n	800a754 <_printf_i+0x1b4>
 800a6b8:	4615      	mov	r5, r2
 800a6ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6be:	fb03 6711 	mls	r7, r3, r1, r6
 800a6c2:	5dc7      	ldrb	r7, [r0, r7]
 800a6c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6c8:	4637      	mov	r7, r6
 800a6ca:	42bb      	cmp	r3, r7
 800a6cc:	460e      	mov	r6, r1
 800a6ce:	d9f4      	bls.n	800a6ba <_printf_i+0x11a>
 800a6d0:	2b08      	cmp	r3, #8
 800a6d2:	d10b      	bne.n	800a6ec <_printf_i+0x14c>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	07de      	lsls	r6, r3, #31
 800a6d8:	d508      	bpl.n	800a6ec <_printf_i+0x14c>
 800a6da:	6923      	ldr	r3, [r4, #16]
 800a6dc:	6861      	ldr	r1, [r4, #4]
 800a6de:	4299      	cmp	r1, r3
 800a6e0:	bfde      	ittt	le
 800a6e2:	2330      	movle	r3, #48	; 0x30
 800a6e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6ec:	1b52      	subs	r2, r2, r5
 800a6ee:	6122      	str	r2, [r4, #16]
 800a6f0:	f8cd a000 	str.w	sl, [sp]
 800a6f4:	464b      	mov	r3, r9
 800a6f6:	aa03      	add	r2, sp, #12
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	f7ff fee2 	bl	800a4c4 <_printf_common>
 800a700:	3001      	adds	r0, #1
 800a702:	d14c      	bne.n	800a79e <_printf_i+0x1fe>
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	b004      	add	sp, #16
 800a70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70e:	4835      	ldr	r0, [pc, #212]	; (800a7e4 <_printf_i+0x244>)
 800a710:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a714:	6829      	ldr	r1, [r5, #0]
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	f851 6b04 	ldr.w	r6, [r1], #4
 800a71c:	6029      	str	r1, [r5, #0]
 800a71e:	061d      	lsls	r5, r3, #24
 800a720:	d514      	bpl.n	800a74c <_printf_i+0x1ac>
 800a722:	07df      	lsls	r7, r3, #31
 800a724:	bf44      	itt	mi
 800a726:	f043 0320 	orrmi.w	r3, r3, #32
 800a72a:	6023      	strmi	r3, [r4, #0]
 800a72c:	b91e      	cbnz	r6, 800a736 <_printf_i+0x196>
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	f023 0320 	bic.w	r3, r3, #32
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	2310      	movs	r3, #16
 800a738:	e7b0      	b.n	800a69c <_printf_i+0xfc>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	f043 0320 	orr.w	r3, r3, #32
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	2378      	movs	r3, #120	; 0x78
 800a744:	4828      	ldr	r0, [pc, #160]	; (800a7e8 <_printf_i+0x248>)
 800a746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a74a:	e7e3      	b.n	800a714 <_printf_i+0x174>
 800a74c:	0659      	lsls	r1, r3, #25
 800a74e:	bf48      	it	mi
 800a750:	b2b6      	uxthmi	r6, r6
 800a752:	e7e6      	b.n	800a722 <_printf_i+0x182>
 800a754:	4615      	mov	r5, r2
 800a756:	e7bb      	b.n	800a6d0 <_printf_i+0x130>
 800a758:	682b      	ldr	r3, [r5, #0]
 800a75a:	6826      	ldr	r6, [r4, #0]
 800a75c:	6961      	ldr	r1, [r4, #20]
 800a75e:	1d18      	adds	r0, r3, #4
 800a760:	6028      	str	r0, [r5, #0]
 800a762:	0635      	lsls	r5, r6, #24
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	d501      	bpl.n	800a76c <_printf_i+0x1cc>
 800a768:	6019      	str	r1, [r3, #0]
 800a76a:	e002      	b.n	800a772 <_printf_i+0x1d2>
 800a76c:	0670      	lsls	r0, r6, #25
 800a76e:	d5fb      	bpl.n	800a768 <_printf_i+0x1c8>
 800a770:	8019      	strh	r1, [r3, #0]
 800a772:	2300      	movs	r3, #0
 800a774:	6123      	str	r3, [r4, #16]
 800a776:	4615      	mov	r5, r2
 800a778:	e7ba      	b.n	800a6f0 <_printf_i+0x150>
 800a77a:	682b      	ldr	r3, [r5, #0]
 800a77c:	1d1a      	adds	r2, r3, #4
 800a77e:	602a      	str	r2, [r5, #0]
 800a780:	681d      	ldr	r5, [r3, #0]
 800a782:	6862      	ldr	r2, [r4, #4]
 800a784:	2100      	movs	r1, #0
 800a786:	4628      	mov	r0, r5
 800a788:	f7f5 fd42 	bl	8000210 <memchr>
 800a78c:	b108      	cbz	r0, 800a792 <_printf_i+0x1f2>
 800a78e:	1b40      	subs	r0, r0, r5
 800a790:	6060      	str	r0, [r4, #4]
 800a792:	6863      	ldr	r3, [r4, #4]
 800a794:	6123      	str	r3, [r4, #16]
 800a796:	2300      	movs	r3, #0
 800a798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a79c:	e7a8      	b.n	800a6f0 <_printf_i+0x150>
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	462a      	mov	r2, r5
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	47d0      	blx	sl
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	d0ab      	beq.n	800a704 <_printf_i+0x164>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	079b      	lsls	r3, r3, #30
 800a7b0:	d413      	bmi.n	800a7da <_printf_i+0x23a>
 800a7b2:	68e0      	ldr	r0, [r4, #12]
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	4298      	cmp	r0, r3
 800a7b8:	bfb8      	it	lt
 800a7ba:	4618      	movlt	r0, r3
 800a7bc:	e7a4      	b.n	800a708 <_printf_i+0x168>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	4640      	mov	r0, r8
 800a7c6:	47d0      	blx	sl
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	d09b      	beq.n	800a704 <_printf_i+0x164>
 800a7cc:	3501      	adds	r5, #1
 800a7ce:	68e3      	ldr	r3, [r4, #12]
 800a7d0:	9903      	ldr	r1, [sp, #12]
 800a7d2:	1a5b      	subs	r3, r3, r1
 800a7d4:	42ab      	cmp	r3, r5
 800a7d6:	dcf2      	bgt.n	800a7be <_printf_i+0x21e>
 800a7d8:	e7eb      	b.n	800a7b2 <_printf_i+0x212>
 800a7da:	2500      	movs	r5, #0
 800a7dc:	f104 0619 	add.w	r6, r4, #25
 800a7e0:	e7f5      	b.n	800a7ce <_printf_i+0x22e>
 800a7e2:	bf00      	nop
 800a7e4:	0800e59c 	.word	0x0800e59c
 800a7e8:	0800e5ad 	.word	0x0800e5ad

0800a7ec <_sbrk_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d06      	ldr	r5, [pc, #24]	; (800a808 <_sbrk_r+0x1c>)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	f7f8 ffa6 	bl	8003748 <_sbrk>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d102      	bne.n	800a806 <_sbrk_r+0x1a>
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	b103      	cbz	r3, 800a806 <_sbrk_r+0x1a>
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	20000b64 	.word	0x20000b64

0800a80c <siprintf>:
 800a80c:	b40e      	push	{r1, r2, r3}
 800a80e:	b500      	push	{lr}
 800a810:	b09c      	sub	sp, #112	; 0x70
 800a812:	ab1d      	add	r3, sp, #116	; 0x74
 800a814:	9002      	str	r0, [sp, #8]
 800a816:	9006      	str	r0, [sp, #24]
 800a818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a81c:	4809      	ldr	r0, [pc, #36]	; (800a844 <siprintf+0x38>)
 800a81e:	9107      	str	r1, [sp, #28]
 800a820:	9104      	str	r1, [sp, #16]
 800a822:	4909      	ldr	r1, [pc, #36]	; (800a848 <siprintf+0x3c>)
 800a824:	f853 2b04 	ldr.w	r2, [r3], #4
 800a828:	9105      	str	r1, [sp, #20]
 800a82a:	6800      	ldr	r0, [r0, #0]
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	a902      	add	r1, sp, #8
 800a830:	f001 fbf6 	bl	800c020 <_svfiprintf_r>
 800a834:	9b02      	ldr	r3, [sp, #8]
 800a836:	2200      	movs	r2, #0
 800a838:	701a      	strb	r2, [r3, #0]
 800a83a:	b01c      	add	sp, #112	; 0x70
 800a83c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a840:	b003      	add	sp, #12
 800a842:	4770      	bx	lr
 800a844:	20000118 	.word	0x20000118
 800a848:	ffff0208 	.word	0xffff0208

0800a84c <siscanf>:
 800a84c:	b40e      	push	{r1, r2, r3}
 800a84e:	b510      	push	{r4, lr}
 800a850:	b09f      	sub	sp, #124	; 0x7c
 800a852:	ac21      	add	r4, sp, #132	; 0x84
 800a854:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a858:	f854 2b04 	ldr.w	r2, [r4], #4
 800a85c:	9201      	str	r2, [sp, #4]
 800a85e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a862:	9004      	str	r0, [sp, #16]
 800a864:	9008      	str	r0, [sp, #32]
 800a866:	f7f5 fcc5 	bl	80001f4 <strlen>
 800a86a:	4b0c      	ldr	r3, [pc, #48]	; (800a89c <siscanf+0x50>)
 800a86c:	9005      	str	r0, [sp, #20]
 800a86e:	9009      	str	r0, [sp, #36]	; 0x24
 800a870:	930d      	str	r3, [sp, #52]	; 0x34
 800a872:	480b      	ldr	r0, [pc, #44]	; (800a8a0 <siscanf+0x54>)
 800a874:	9a01      	ldr	r2, [sp, #4]
 800a876:	6800      	ldr	r0, [r0, #0]
 800a878:	9403      	str	r4, [sp, #12]
 800a87a:	2300      	movs	r3, #0
 800a87c:	9311      	str	r3, [sp, #68]	; 0x44
 800a87e:	9316      	str	r3, [sp, #88]	; 0x58
 800a880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a884:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a888:	a904      	add	r1, sp, #16
 800a88a:	4623      	mov	r3, r4
 800a88c:	f001 fd22 	bl	800c2d4 <__ssvfiscanf_r>
 800a890:	b01f      	add	sp, #124	; 0x7c
 800a892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a896:	b003      	add	sp, #12
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	0800a8c7 	.word	0x0800a8c7
 800a8a0:	20000118 	.word	0x20000118

0800a8a4 <__sread>:
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ac:	f001 ffdc 	bl	800c868 <_read_r>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	bfab      	itete	ge
 800a8b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8b6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8b8:	181b      	addge	r3, r3, r0
 800a8ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8be:	bfac      	ite	ge
 800a8c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8c2:	81a3      	strhlt	r3, [r4, #12]
 800a8c4:	bd10      	pop	{r4, pc}

0800a8c6 <__seofread>:
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	4770      	bx	lr

0800a8ca <__swrite>:
 800a8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ce:	461f      	mov	r7, r3
 800a8d0:	898b      	ldrh	r3, [r1, #12]
 800a8d2:	05db      	lsls	r3, r3, #23
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	4616      	mov	r6, r2
 800a8da:	d505      	bpl.n	800a8e8 <__swrite+0x1e>
 800a8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f000 ff7a 	bl	800b7dc <_lseek_r>
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8f2:	81a3      	strh	r3, [r4, #12]
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	463b      	mov	r3, r7
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fe:	f000 b8cd 	b.w	800aa9c <_write_r>

0800a902 <__sseek>:
 800a902:	b510      	push	{r4, lr}
 800a904:	460c      	mov	r4, r1
 800a906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90a:	f000 ff67 	bl	800b7dc <_lseek_r>
 800a90e:	1c43      	adds	r3, r0, #1
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	bf15      	itete	ne
 800a914:	6560      	strne	r0, [r4, #84]	; 0x54
 800a916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a91a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a91e:	81a3      	strheq	r3, [r4, #12]
 800a920:	bf18      	it	ne
 800a922:	81a3      	strhne	r3, [r4, #12]
 800a924:	bd10      	pop	{r4, pc}

0800a926 <__sclose>:
 800a926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a92a:	f000 b8c9 	b.w	800aac0 <_close_r>

0800a92e <strchr>:
 800a92e:	b2c9      	uxtb	r1, r1
 800a930:	4603      	mov	r3, r0
 800a932:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a936:	b11a      	cbz	r2, 800a940 <strchr+0x12>
 800a938:	428a      	cmp	r2, r1
 800a93a:	d1f9      	bne.n	800a930 <strchr+0x2>
 800a93c:	4618      	mov	r0, r3
 800a93e:	4770      	bx	lr
 800a940:	2900      	cmp	r1, #0
 800a942:	bf18      	it	ne
 800a944:	2300      	movne	r3, #0
 800a946:	e7f9      	b.n	800a93c <strchr+0xe>

0800a948 <strcpy>:
 800a948:	4603      	mov	r3, r0
 800a94a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a94e:	f803 2b01 	strb.w	r2, [r3], #1
 800a952:	2a00      	cmp	r2, #0
 800a954:	d1f9      	bne.n	800a94a <strcpy+0x2>
 800a956:	4770      	bx	lr

0800a958 <strncmp>:
 800a958:	b510      	push	{r4, lr}
 800a95a:	b17a      	cbz	r2, 800a97c <strncmp+0x24>
 800a95c:	4603      	mov	r3, r0
 800a95e:	3901      	subs	r1, #1
 800a960:	1884      	adds	r4, r0, r2
 800a962:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a966:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a96a:	4290      	cmp	r0, r2
 800a96c:	d101      	bne.n	800a972 <strncmp+0x1a>
 800a96e:	42a3      	cmp	r3, r4
 800a970:	d101      	bne.n	800a976 <strncmp+0x1e>
 800a972:	1a80      	subs	r0, r0, r2
 800a974:	bd10      	pop	{r4, pc}
 800a976:	2800      	cmp	r0, #0
 800a978:	d1f3      	bne.n	800a962 <strncmp+0xa>
 800a97a:	e7fa      	b.n	800a972 <strncmp+0x1a>
 800a97c:	4610      	mov	r0, r2
 800a97e:	e7f9      	b.n	800a974 <strncmp+0x1c>

0800a980 <_strtol_l.constprop.0>:
 800a980:	2b01      	cmp	r3, #1
 800a982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a986:	d001      	beq.n	800a98c <_strtol_l.constprop.0+0xc>
 800a988:	2b24      	cmp	r3, #36	; 0x24
 800a98a:	d906      	bls.n	800a99a <_strtol_l.constprop.0+0x1a>
 800a98c:	f7ff f9a2 	bl	8009cd4 <__errno>
 800a990:	2316      	movs	r3, #22
 800a992:	6003      	str	r3, [r0, #0]
 800a994:	2000      	movs	r0, #0
 800a996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a99a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aa80 <_strtol_l.constprop.0+0x100>
 800a99e:	460d      	mov	r5, r1
 800a9a0:	462e      	mov	r6, r5
 800a9a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a9aa:	f017 0708 	ands.w	r7, r7, #8
 800a9ae:	d1f7      	bne.n	800a9a0 <_strtol_l.constprop.0+0x20>
 800a9b0:	2c2d      	cmp	r4, #45	; 0x2d
 800a9b2:	d132      	bne.n	800aa1a <_strtol_l.constprop.0+0x9a>
 800a9b4:	782c      	ldrb	r4, [r5, #0]
 800a9b6:	2701      	movs	r7, #1
 800a9b8:	1cb5      	adds	r5, r6, #2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d05b      	beq.n	800aa76 <_strtol_l.constprop.0+0xf6>
 800a9be:	2b10      	cmp	r3, #16
 800a9c0:	d109      	bne.n	800a9d6 <_strtol_l.constprop.0+0x56>
 800a9c2:	2c30      	cmp	r4, #48	; 0x30
 800a9c4:	d107      	bne.n	800a9d6 <_strtol_l.constprop.0+0x56>
 800a9c6:	782c      	ldrb	r4, [r5, #0]
 800a9c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a9cc:	2c58      	cmp	r4, #88	; 0x58
 800a9ce:	d14d      	bne.n	800aa6c <_strtol_l.constprop.0+0xec>
 800a9d0:	786c      	ldrb	r4, [r5, #1]
 800a9d2:	2310      	movs	r3, #16
 800a9d4:	3502      	adds	r5, #2
 800a9d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a9da:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9de:	f04f 0c00 	mov.w	ip, #0
 800a9e2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a9e6:	4666      	mov	r6, ip
 800a9e8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a9ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a9f0:	f1be 0f09 	cmp.w	lr, #9
 800a9f4:	d816      	bhi.n	800aa24 <_strtol_l.constprop.0+0xa4>
 800a9f6:	4674      	mov	r4, lr
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	dd24      	ble.n	800aa46 <_strtol_l.constprop.0+0xc6>
 800a9fc:	f1bc 0f00 	cmp.w	ip, #0
 800aa00:	db1e      	blt.n	800aa40 <_strtol_l.constprop.0+0xc0>
 800aa02:	45b1      	cmp	r9, r6
 800aa04:	d31c      	bcc.n	800aa40 <_strtol_l.constprop.0+0xc0>
 800aa06:	d101      	bne.n	800aa0c <_strtol_l.constprop.0+0x8c>
 800aa08:	45a2      	cmp	sl, r4
 800aa0a:	db19      	blt.n	800aa40 <_strtol_l.constprop.0+0xc0>
 800aa0c:	fb06 4603 	mla	r6, r6, r3, r4
 800aa10:	f04f 0c01 	mov.w	ip, #1
 800aa14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa18:	e7e8      	b.n	800a9ec <_strtol_l.constprop.0+0x6c>
 800aa1a:	2c2b      	cmp	r4, #43	; 0x2b
 800aa1c:	bf04      	itt	eq
 800aa1e:	782c      	ldrbeq	r4, [r5, #0]
 800aa20:	1cb5      	addeq	r5, r6, #2
 800aa22:	e7ca      	b.n	800a9ba <_strtol_l.constprop.0+0x3a>
 800aa24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aa28:	f1be 0f19 	cmp.w	lr, #25
 800aa2c:	d801      	bhi.n	800aa32 <_strtol_l.constprop.0+0xb2>
 800aa2e:	3c37      	subs	r4, #55	; 0x37
 800aa30:	e7e2      	b.n	800a9f8 <_strtol_l.constprop.0+0x78>
 800aa32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800aa36:	f1be 0f19 	cmp.w	lr, #25
 800aa3a:	d804      	bhi.n	800aa46 <_strtol_l.constprop.0+0xc6>
 800aa3c:	3c57      	subs	r4, #87	; 0x57
 800aa3e:	e7db      	b.n	800a9f8 <_strtol_l.constprop.0+0x78>
 800aa40:	f04f 3cff 	mov.w	ip, #4294967295
 800aa44:	e7e6      	b.n	800aa14 <_strtol_l.constprop.0+0x94>
 800aa46:	f1bc 0f00 	cmp.w	ip, #0
 800aa4a:	da05      	bge.n	800aa58 <_strtol_l.constprop.0+0xd8>
 800aa4c:	2322      	movs	r3, #34	; 0x22
 800aa4e:	6003      	str	r3, [r0, #0]
 800aa50:	4646      	mov	r6, r8
 800aa52:	b942      	cbnz	r2, 800aa66 <_strtol_l.constprop.0+0xe6>
 800aa54:	4630      	mov	r0, r6
 800aa56:	e79e      	b.n	800a996 <_strtol_l.constprop.0+0x16>
 800aa58:	b107      	cbz	r7, 800aa5c <_strtol_l.constprop.0+0xdc>
 800aa5a:	4276      	negs	r6, r6
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	d0f9      	beq.n	800aa54 <_strtol_l.constprop.0+0xd4>
 800aa60:	f1bc 0f00 	cmp.w	ip, #0
 800aa64:	d000      	beq.n	800aa68 <_strtol_l.constprop.0+0xe8>
 800aa66:	1e69      	subs	r1, r5, #1
 800aa68:	6011      	str	r1, [r2, #0]
 800aa6a:	e7f3      	b.n	800aa54 <_strtol_l.constprop.0+0xd4>
 800aa6c:	2430      	movs	r4, #48	; 0x30
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1b1      	bne.n	800a9d6 <_strtol_l.constprop.0+0x56>
 800aa72:	2308      	movs	r3, #8
 800aa74:	e7af      	b.n	800a9d6 <_strtol_l.constprop.0+0x56>
 800aa76:	2c30      	cmp	r4, #48	; 0x30
 800aa78:	d0a5      	beq.n	800a9c6 <_strtol_l.constprop.0+0x46>
 800aa7a:	230a      	movs	r3, #10
 800aa7c:	e7ab      	b.n	800a9d6 <_strtol_l.constprop.0+0x56>
 800aa7e:	bf00      	nop
 800aa80:	0800e5bf 	.word	0x0800e5bf

0800aa84 <_strtol_r>:
 800aa84:	f7ff bf7c 	b.w	800a980 <_strtol_l.constprop.0>

0800aa88 <strtol>:
 800aa88:	4613      	mov	r3, r2
 800aa8a:	460a      	mov	r2, r1
 800aa8c:	4601      	mov	r1, r0
 800aa8e:	4802      	ldr	r0, [pc, #8]	; (800aa98 <strtol+0x10>)
 800aa90:	6800      	ldr	r0, [r0, #0]
 800aa92:	f7ff bf75 	b.w	800a980 <_strtol_l.constprop.0>
 800aa96:	bf00      	nop
 800aa98:	20000118 	.word	0x20000118

0800aa9c <_write_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4d07      	ldr	r5, [pc, #28]	; (800aabc <_write_r+0x20>)
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	4608      	mov	r0, r1
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	602a      	str	r2, [r5, #0]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f7f8 fdfb 	bl	80036a6 <_write>
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	d102      	bne.n	800aaba <_write_r+0x1e>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	b103      	cbz	r3, 800aaba <_write_r+0x1e>
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	20000b64 	.word	0x20000b64

0800aac0 <_close_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4d06      	ldr	r5, [pc, #24]	; (800aadc <_close_r+0x1c>)
 800aac4:	2300      	movs	r3, #0
 800aac6:	4604      	mov	r4, r0
 800aac8:	4608      	mov	r0, r1
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	f7f8 fe07 	bl	80036de <_close>
 800aad0:	1c43      	adds	r3, r0, #1
 800aad2:	d102      	bne.n	800aada <_close_r+0x1a>
 800aad4:	682b      	ldr	r3, [r5, #0]
 800aad6:	b103      	cbz	r3, 800aada <_close_r+0x1a>
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	20000b64 	.word	0x20000b64

0800aae0 <quorem>:
 800aae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae4:	6903      	ldr	r3, [r0, #16]
 800aae6:	690c      	ldr	r4, [r1, #16]
 800aae8:	42a3      	cmp	r3, r4
 800aaea:	4607      	mov	r7, r0
 800aaec:	f2c0 8081 	blt.w	800abf2 <quorem+0x112>
 800aaf0:	3c01      	subs	r4, #1
 800aaf2:	f101 0814 	add.w	r8, r1, #20
 800aaf6:	f100 0514 	add.w	r5, r0, #20
 800aafa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aafe:	9301      	str	r3, [sp, #4]
 800ab00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab14:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab18:	d331      	bcc.n	800ab7e <quorem+0x9e>
 800ab1a:	f04f 0e00 	mov.w	lr, #0
 800ab1e:	4640      	mov	r0, r8
 800ab20:	46ac      	mov	ip, r5
 800ab22:	46f2      	mov	sl, lr
 800ab24:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab28:	b293      	uxth	r3, r2
 800ab2a:	fb06 e303 	mla	r3, r6, r3, lr
 800ab2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	ebaa 0303 	sub.w	r3, sl, r3
 800ab38:	f8dc a000 	ldr.w	sl, [ip]
 800ab3c:	0c12      	lsrs	r2, r2, #16
 800ab3e:	fa13 f38a 	uxtah	r3, r3, sl
 800ab42:	fb06 e202 	mla	r2, r6, r2, lr
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	9b00      	ldr	r3, [sp, #0]
 800ab4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab4e:	b292      	uxth	r2, r2
 800ab50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab58:	f8bd 3000 	ldrh.w	r3, [sp]
 800ab5c:	4581      	cmp	r9, r0
 800ab5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab62:	f84c 3b04 	str.w	r3, [ip], #4
 800ab66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab6a:	d2db      	bcs.n	800ab24 <quorem+0x44>
 800ab6c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab70:	b92b      	cbnz	r3, 800ab7e <quorem+0x9e>
 800ab72:	9b01      	ldr	r3, [sp, #4]
 800ab74:	3b04      	subs	r3, #4
 800ab76:	429d      	cmp	r5, r3
 800ab78:	461a      	mov	r2, r3
 800ab7a:	d32e      	bcc.n	800abda <quorem+0xfa>
 800ab7c:	613c      	str	r4, [r7, #16]
 800ab7e:	4638      	mov	r0, r7
 800ab80:	f001 f8da 	bl	800bd38 <__mcmp>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	db24      	blt.n	800abd2 <quorem+0xf2>
 800ab88:	3601      	adds	r6, #1
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f04f 0c00 	mov.w	ip, #0
 800ab90:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab94:	f8d0 e000 	ldr.w	lr, [r0]
 800ab98:	b293      	uxth	r3, r2
 800ab9a:	ebac 0303 	sub.w	r3, ip, r3
 800ab9e:	0c12      	lsrs	r2, r2, #16
 800aba0:	fa13 f38e 	uxtah	r3, r3, lr
 800aba4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aba8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abac:	b29b      	uxth	r3, r3
 800abae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abb2:	45c1      	cmp	r9, r8
 800abb4:	f840 3b04 	str.w	r3, [r0], #4
 800abb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800abbc:	d2e8      	bcs.n	800ab90 <quorem+0xb0>
 800abbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abc6:	b922      	cbnz	r2, 800abd2 <quorem+0xf2>
 800abc8:	3b04      	subs	r3, #4
 800abca:	429d      	cmp	r5, r3
 800abcc:	461a      	mov	r2, r3
 800abce:	d30a      	bcc.n	800abe6 <quorem+0x106>
 800abd0:	613c      	str	r4, [r7, #16]
 800abd2:	4630      	mov	r0, r6
 800abd4:	b003      	add	sp, #12
 800abd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abda:	6812      	ldr	r2, [r2, #0]
 800abdc:	3b04      	subs	r3, #4
 800abde:	2a00      	cmp	r2, #0
 800abe0:	d1cc      	bne.n	800ab7c <quorem+0x9c>
 800abe2:	3c01      	subs	r4, #1
 800abe4:	e7c7      	b.n	800ab76 <quorem+0x96>
 800abe6:	6812      	ldr	r2, [r2, #0]
 800abe8:	3b04      	subs	r3, #4
 800abea:	2a00      	cmp	r2, #0
 800abec:	d1f0      	bne.n	800abd0 <quorem+0xf0>
 800abee:	3c01      	subs	r4, #1
 800abf0:	e7eb      	b.n	800abca <quorem+0xea>
 800abf2:	2000      	movs	r0, #0
 800abf4:	e7ee      	b.n	800abd4 <quorem+0xf4>
	...

0800abf8 <_dtoa_r>:
 800abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfc:	ed2d 8b04 	vpush	{d8-d9}
 800ac00:	ec57 6b10 	vmov	r6, r7, d0
 800ac04:	b093      	sub	sp, #76	; 0x4c
 800ac06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac0c:	9106      	str	r1, [sp, #24]
 800ac0e:	ee10 aa10 	vmov	sl, s0
 800ac12:	4604      	mov	r4, r0
 800ac14:	9209      	str	r2, [sp, #36]	; 0x24
 800ac16:	930c      	str	r3, [sp, #48]	; 0x30
 800ac18:	46bb      	mov	fp, r7
 800ac1a:	b975      	cbnz	r5, 800ac3a <_dtoa_r+0x42>
 800ac1c:	2010      	movs	r0, #16
 800ac1e:	f7ff f883 	bl	8009d28 <malloc>
 800ac22:	4602      	mov	r2, r0
 800ac24:	6260      	str	r0, [r4, #36]	; 0x24
 800ac26:	b920      	cbnz	r0, 800ac32 <_dtoa_r+0x3a>
 800ac28:	4ba7      	ldr	r3, [pc, #668]	; (800aec8 <_dtoa_r+0x2d0>)
 800ac2a:	21ea      	movs	r1, #234	; 0xea
 800ac2c:	48a7      	ldr	r0, [pc, #668]	; (800aecc <_dtoa_r+0x2d4>)
 800ac2e:	f001 ff13 	bl	800ca58 <__assert_func>
 800ac32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac36:	6005      	str	r5, [r0, #0]
 800ac38:	60c5      	str	r5, [r0, #12]
 800ac3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac3c:	6819      	ldr	r1, [r3, #0]
 800ac3e:	b151      	cbz	r1, 800ac56 <_dtoa_r+0x5e>
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	604a      	str	r2, [r1, #4]
 800ac44:	2301      	movs	r3, #1
 800ac46:	4093      	lsls	r3, r2
 800ac48:	608b      	str	r3, [r1, #8]
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fe32 	bl	800b8b4 <_Bfree>
 800ac50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac52:	2200      	movs	r2, #0
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	1e3b      	subs	r3, r7, #0
 800ac58:	bfaa      	itet	ge
 800ac5a:	2300      	movge	r3, #0
 800ac5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ac60:	f8c8 3000 	strge.w	r3, [r8]
 800ac64:	4b9a      	ldr	r3, [pc, #616]	; (800aed0 <_dtoa_r+0x2d8>)
 800ac66:	bfbc      	itt	lt
 800ac68:	2201      	movlt	r2, #1
 800ac6a:	f8c8 2000 	strlt.w	r2, [r8]
 800ac6e:	ea33 030b 	bics.w	r3, r3, fp
 800ac72:	d11b      	bne.n	800acac <_dtoa_r+0xb4>
 800ac74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac76:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac80:	4333      	orrs	r3, r6
 800ac82:	f000 8592 	beq.w	800b7aa <_dtoa_r+0xbb2>
 800ac86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac88:	b963      	cbnz	r3, 800aca4 <_dtoa_r+0xac>
 800ac8a:	4b92      	ldr	r3, [pc, #584]	; (800aed4 <_dtoa_r+0x2dc>)
 800ac8c:	e022      	b.n	800acd4 <_dtoa_r+0xdc>
 800ac8e:	4b92      	ldr	r3, [pc, #584]	; (800aed8 <_dtoa_r+0x2e0>)
 800ac90:	9301      	str	r3, [sp, #4]
 800ac92:	3308      	adds	r3, #8
 800ac94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac96:	6013      	str	r3, [r2, #0]
 800ac98:	9801      	ldr	r0, [sp, #4]
 800ac9a:	b013      	add	sp, #76	; 0x4c
 800ac9c:	ecbd 8b04 	vpop	{d8-d9}
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca4:	4b8b      	ldr	r3, [pc, #556]	; (800aed4 <_dtoa_r+0x2dc>)
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	3303      	adds	r3, #3
 800acaa:	e7f3      	b.n	800ac94 <_dtoa_r+0x9c>
 800acac:	2200      	movs	r2, #0
 800acae:	2300      	movs	r3, #0
 800acb0:	4650      	mov	r0, sl
 800acb2:	4659      	mov	r1, fp
 800acb4:	f7f5 ff20 	bl	8000af8 <__aeabi_dcmpeq>
 800acb8:	ec4b ab19 	vmov	d9, sl, fp
 800acbc:	4680      	mov	r8, r0
 800acbe:	b158      	cbz	r0, 800acd8 <_dtoa_r+0xe0>
 800acc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acc2:	2301      	movs	r3, #1
 800acc4:	6013      	str	r3, [r2, #0]
 800acc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f000 856b 	beq.w	800b7a4 <_dtoa_r+0xbac>
 800acce:	4883      	ldr	r0, [pc, #524]	; (800aedc <_dtoa_r+0x2e4>)
 800acd0:	6018      	str	r0, [r3, #0]
 800acd2:	1e43      	subs	r3, r0, #1
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	e7df      	b.n	800ac98 <_dtoa_r+0xa0>
 800acd8:	ec4b ab10 	vmov	d0, sl, fp
 800acdc:	aa10      	add	r2, sp, #64	; 0x40
 800acde:	a911      	add	r1, sp, #68	; 0x44
 800ace0:	4620      	mov	r0, r4
 800ace2:	f001 f8cf 	bl	800be84 <__d2b>
 800ace6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800acea:	ee08 0a10 	vmov	s16, r0
 800acee:	2d00      	cmp	r5, #0
 800acf0:	f000 8084 	beq.w	800adfc <_dtoa_r+0x204>
 800acf4:	ee19 3a90 	vmov	r3, s19
 800acf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ad00:	4656      	mov	r6, sl
 800ad02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ad06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ad0e:	4b74      	ldr	r3, [pc, #464]	; (800aee0 <_dtoa_r+0x2e8>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	4630      	mov	r0, r6
 800ad14:	4639      	mov	r1, r7
 800ad16:	f7f5 facf 	bl	80002b8 <__aeabi_dsub>
 800ad1a:	a365      	add	r3, pc, #404	; (adr r3, 800aeb0 <_dtoa_r+0x2b8>)
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	f7f5 fc82 	bl	8000628 <__aeabi_dmul>
 800ad24:	a364      	add	r3, pc, #400	; (adr r3, 800aeb8 <_dtoa_r+0x2c0>)
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	f7f5 fac7 	bl	80002bc <__adddf3>
 800ad2e:	4606      	mov	r6, r0
 800ad30:	4628      	mov	r0, r5
 800ad32:	460f      	mov	r7, r1
 800ad34:	f7f5 fc0e 	bl	8000554 <__aeabi_i2d>
 800ad38:	a361      	add	r3, pc, #388	; (adr r3, 800aec0 <_dtoa_r+0x2c8>)
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	f7f5 fc73 	bl	8000628 <__aeabi_dmul>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	4630      	mov	r0, r6
 800ad48:	4639      	mov	r1, r7
 800ad4a:	f7f5 fab7 	bl	80002bc <__adddf3>
 800ad4e:	4606      	mov	r6, r0
 800ad50:	460f      	mov	r7, r1
 800ad52:	f7f5 ff19 	bl	8000b88 <__aeabi_d2iz>
 800ad56:	2200      	movs	r2, #0
 800ad58:	9000      	str	r0, [sp, #0]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	4639      	mov	r1, r7
 800ad60:	f7f5 fed4 	bl	8000b0c <__aeabi_dcmplt>
 800ad64:	b150      	cbz	r0, 800ad7c <_dtoa_r+0x184>
 800ad66:	9800      	ldr	r0, [sp, #0]
 800ad68:	f7f5 fbf4 	bl	8000554 <__aeabi_i2d>
 800ad6c:	4632      	mov	r2, r6
 800ad6e:	463b      	mov	r3, r7
 800ad70:	f7f5 fec2 	bl	8000af8 <__aeabi_dcmpeq>
 800ad74:	b910      	cbnz	r0, 800ad7c <_dtoa_r+0x184>
 800ad76:	9b00      	ldr	r3, [sp, #0]
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	9b00      	ldr	r3, [sp, #0]
 800ad7e:	2b16      	cmp	r3, #22
 800ad80:	d85a      	bhi.n	800ae38 <_dtoa_r+0x240>
 800ad82:	9a00      	ldr	r2, [sp, #0]
 800ad84:	4b57      	ldr	r3, [pc, #348]	; (800aee4 <_dtoa_r+0x2ec>)
 800ad86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	ec51 0b19 	vmov	r0, r1, d9
 800ad92:	f7f5 febb 	bl	8000b0c <__aeabi_dcmplt>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d050      	beq.n	800ae3c <_dtoa_r+0x244>
 800ad9a:	9b00      	ldr	r3, [sp, #0]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	2300      	movs	r3, #0
 800ada2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ada4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ada6:	1b5d      	subs	r5, r3, r5
 800ada8:	1e6b      	subs	r3, r5, #1
 800adaa:	9305      	str	r3, [sp, #20]
 800adac:	bf45      	ittet	mi
 800adae:	f1c5 0301 	rsbmi	r3, r5, #1
 800adb2:	9304      	strmi	r3, [sp, #16]
 800adb4:	2300      	movpl	r3, #0
 800adb6:	2300      	movmi	r3, #0
 800adb8:	bf4c      	ite	mi
 800adba:	9305      	strmi	r3, [sp, #20]
 800adbc:	9304      	strpl	r3, [sp, #16]
 800adbe:	9b00      	ldr	r3, [sp, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	db3d      	blt.n	800ae40 <_dtoa_r+0x248>
 800adc4:	9b05      	ldr	r3, [sp, #20]
 800adc6:	9a00      	ldr	r2, [sp, #0]
 800adc8:	920a      	str	r2, [sp, #40]	; 0x28
 800adca:	4413      	add	r3, r2
 800adcc:	9305      	str	r3, [sp, #20]
 800adce:	2300      	movs	r3, #0
 800add0:	9307      	str	r3, [sp, #28]
 800add2:	9b06      	ldr	r3, [sp, #24]
 800add4:	2b09      	cmp	r3, #9
 800add6:	f200 8089 	bhi.w	800aeec <_dtoa_r+0x2f4>
 800adda:	2b05      	cmp	r3, #5
 800addc:	bfc4      	itt	gt
 800adde:	3b04      	subgt	r3, #4
 800ade0:	9306      	strgt	r3, [sp, #24]
 800ade2:	9b06      	ldr	r3, [sp, #24]
 800ade4:	f1a3 0302 	sub.w	r3, r3, #2
 800ade8:	bfcc      	ite	gt
 800adea:	2500      	movgt	r5, #0
 800adec:	2501      	movle	r5, #1
 800adee:	2b03      	cmp	r3, #3
 800adf0:	f200 8087 	bhi.w	800af02 <_dtoa_r+0x30a>
 800adf4:	e8df f003 	tbb	[pc, r3]
 800adf8:	59383a2d 	.word	0x59383a2d
 800adfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae00:	441d      	add	r5, r3
 800ae02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae06:	2b20      	cmp	r3, #32
 800ae08:	bfc1      	itttt	gt
 800ae0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ae12:	fa0b f303 	lslgt.w	r3, fp, r3
 800ae16:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ae1a:	bfda      	itte	le
 800ae1c:	f1c3 0320 	rsble	r3, r3, #32
 800ae20:	fa06 f003 	lslle.w	r0, r6, r3
 800ae24:	4318      	orrgt	r0, r3
 800ae26:	f7f5 fb85 	bl	8000534 <__aeabi_ui2d>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ae32:	3d01      	subs	r5, #1
 800ae34:	930e      	str	r3, [sp, #56]	; 0x38
 800ae36:	e76a      	b.n	800ad0e <_dtoa_r+0x116>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e7b2      	b.n	800ada2 <_dtoa_r+0x1aa>
 800ae3c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae3e:	e7b1      	b.n	800ada4 <_dtoa_r+0x1ac>
 800ae40:	9b04      	ldr	r3, [sp, #16]
 800ae42:	9a00      	ldr	r2, [sp, #0]
 800ae44:	1a9b      	subs	r3, r3, r2
 800ae46:	9304      	str	r3, [sp, #16]
 800ae48:	4253      	negs	r3, r2
 800ae4a:	9307      	str	r3, [sp, #28]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae50:	e7bf      	b.n	800add2 <_dtoa_r+0x1da>
 800ae52:	2300      	movs	r3, #0
 800ae54:	9308      	str	r3, [sp, #32]
 800ae56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	dc55      	bgt.n	800af08 <_dtoa_r+0x310>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae62:	461a      	mov	r2, r3
 800ae64:	9209      	str	r2, [sp, #36]	; 0x24
 800ae66:	e00c      	b.n	800ae82 <_dtoa_r+0x28a>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e7f3      	b.n	800ae54 <_dtoa_r+0x25c>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae70:	9308      	str	r3, [sp, #32]
 800ae72:	9b00      	ldr	r3, [sp, #0]
 800ae74:	4413      	add	r3, r2
 800ae76:	9302      	str	r3, [sp, #8]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	9303      	str	r3, [sp, #12]
 800ae7e:	bfb8      	it	lt
 800ae80:	2301      	movlt	r3, #1
 800ae82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ae84:	2200      	movs	r2, #0
 800ae86:	6042      	str	r2, [r0, #4]
 800ae88:	2204      	movs	r2, #4
 800ae8a:	f102 0614 	add.w	r6, r2, #20
 800ae8e:	429e      	cmp	r6, r3
 800ae90:	6841      	ldr	r1, [r0, #4]
 800ae92:	d93d      	bls.n	800af10 <_dtoa_r+0x318>
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 fccd 	bl	800b834 <_Balloc>
 800ae9a:	9001      	str	r0, [sp, #4]
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d13b      	bne.n	800af18 <_dtoa_r+0x320>
 800aea0:	4b11      	ldr	r3, [pc, #68]	; (800aee8 <_dtoa_r+0x2f0>)
 800aea2:	4602      	mov	r2, r0
 800aea4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aea8:	e6c0      	b.n	800ac2c <_dtoa_r+0x34>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e7df      	b.n	800ae6e <_dtoa_r+0x276>
 800aeae:	bf00      	nop
 800aeb0:	636f4361 	.word	0x636f4361
 800aeb4:	3fd287a7 	.word	0x3fd287a7
 800aeb8:	8b60c8b3 	.word	0x8b60c8b3
 800aebc:	3fc68a28 	.word	0x3fc68a28
 800aec0:	509f79fb 	.word	0x509f79fb
 800aec4:	3fd34413 	.word	0x3fd34413
 800aec8:	0800e6cc 	.word	0x0800e6cc
 800aecc:	0800e6e3 	.word	0x0800e6e3
 800aed0:	7ff00000 	.word	0x7ff00000
 800aed4:	0800e6c8 	.word	0x0800e6c8
 800aed8:	0800e6bf 	.word	0x0800e6bf
 800aedc:	0800e8c2 	.word	0x0800e8c2
 800aee0:	3ff80000 	.word	0x3ff80000
 800aee4:	0800e7d8 	.word	0x0800e7d8
 800aee8:	0800e73e 	.word	0x0800e73e
 800aeec:	2501      	movs	r5, #1
 800aeee:	2300      	movs	r3, #0
 800aef0:	9306      	str	r3, [sp, #24]
 800aef2:	9508      	str	r5, [sp, #32]
 800aef4:	f04f 33ff 	mov.w	r3, #4294967295
 800aef8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aefc:	2200      	movs	r2, #0
 800aefe:	2312      	movs	r3, #18
 800af00:	e7b0      	b.n	800ae64 <_dtoa_r+0x26c>
 800af02:	2301      	movs	r3, #1
 800af04:	9308      	str	r3, [sp, #32]
 800af06:	e7f5      	b.n	800aef4 <_dtoa_r+0x2fc>
 800af08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af0e:	e7b8      	b.n	800ae82 <_dtoa_r+0x28a>
 800af10:	3101      	adds	r1, #1
 800af12:	6041      	str	r1, [r0, #4]
 800af14:	0052      	lsls	r2, r2, #1
 800af16:	e7b8      	b.n	800ae8a <_dtoa_r+0x292>
 800af18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af1a:	9a01      	ldr	r2, [sp, #4]
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	2b0e      	cmp	r3, #14
 800af22:	f200 809d 	bhi.w	800b060 <_dtoa_r+0x468>
 800af26:	2d00      	cmp	r5, #0
 800af28:	f000 809a 	beq.w	800b060 <_dtoa_r+0x468>
 800af2c:	9b00      	ldr	r3, [sp, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dd32      	ble.n	800af98 <_dtoa_r+0x3a0>
 800af32:	4ab7      	ldr	r2, [pc, #732]	; (800b210 <_dtoa_r+0x618>)
 800af34:	f003 030f 	and.w	r3, r3, #15
 800af38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af40:	9b00      	ldr	r3, [sp, #0]
 800af42:	05d8      	lsls	r0, r3, #23
 800af44:	ea4f 1723 	mov.w	r7, r3, asr #4
 800af48:	d516      	bpl.n	800af78 <_dtoa_r+0x380>
 800af4a:	4bb2      	ldr	r3, [pc, #712]	; (800b214 <_dtoa_r+0x61c>)
 800af4c:	ec51 0b19 	vmov	r0, r1, d9
 800af50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af54:	f7f5 fc92 	bl	800087c <__aeabi_ddiv>
 800af58:	f007 070f 	and.w	r7, r7, #15
 800af5c:	4682      	mov	sl, r0
 800af5e:	468b      	mov	fp, r1
 800af60:	2503      	movs	r5, #3
 800af62:	4eac      	ldr	r6, [pc, #688]	; (800b214 <_dtoa_r+0x61c>)
 800af64:	b957      	cbnz	r7, 800af7c <_dtoa_r+0x384>
 800af66:	4642      	mov	r2, r8
 800af68:	464b      	mov	r3, r9
 800af6a:	4650      	mov	r0, sl
 800af6c:	4659      	mov	r1, fp
 800af6e:	f7f5 fc85 	bl	800087c <__aeabi_ddiv>
 800af72:	4682      	mov	sl, r0
 800af74:	468b      	mov	fp, r1
 800af76:	e028      	b.n	800afca <_dtoa_r+0x3d2>
 800af78:	2502      	movs	r5, #2
 800af7a:	e7f2      	b.n	800af62 <_dtoa_r+0x36a>
 800af7c:	07f9      	lsls	r1, r7, #31
 800af7e:	d508      	bpl.n	800af92 <_dtoa_r+0x39a>
 800af80:	4640      	mov	r0, r8
 800af82:	4649      	mov	r1, r9
 800af84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af88:	f7f5 fb4e 	bl	8000628 <__aeabi_dmul>
 800af8c:	3501      	adds	r5, #1
 800af8e:	4680      	mov	r8, r0
 800af90:	4689      	mov	r9, r1
 800af92:	107f      	asrs	r7, r7, #1
 800af94:	3608      	adds	r6, #8
 800af96:	e7e5      	b.n	800af64 <_dtoa_r+0x36c>
 800af98:	f000 809b 	beq.w	800b0d2 <_dtoa_r+0x4da>
 800af9c:	9b00      	ldr	r3, [sp, #0]
 800af9e:	4f9d      	ldr	r7, [pc, #628]	; (800b214 <_dtoa_r+0x61c>)
 800afa0:	425e      	negs	r6, r3
 800afa2:	4b9b      	ldr	r3, [pc, #620]	; (800b210 <_dtoa_r+0x618>)
 800afa4:	f006 020f 	and.w	r2, r6, #15
 800afa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	ec51 0b19 	vmov	r0, r1, d9
 800afb4:	f7f5 fb38 	bl	8000628 <__aeabi_dmul>
 800afb8:	1136      	asrs	r6, r6, #4
 800afba:	4682      	mov	sl, r0
 800afbc:	468b      	mov	fp, r1
 800afbe:	2300      	movs	r3, #0
 800afc0:	2502      	movs	r5, #2
 800afc2:	2e00      	cmp	r6, #0
 800afc4:	d17a      	bne.n	800b0bc <_dtoa_r+0x4c4>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1d3      	bne.n	800af72 <_dtoa_r+0x37a>
 800afca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 8082 	beq.w	800b0d6 <_dtoa_r+0x4de>
 800afd2:	4b91      	ldr	r3, [pc, #580]	; (800b218 <_dtoa_r+0x620>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	4650      	mov	r0, sl
 800afd8:	4659      	mov	r1, fp
 800afda:	f7f5 fd97 	bl	8000b0c <__aeabi_dcmplt>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d079      	beq.n	800b0d6 <_dtoa_r+0x4de>
 800afe2:	9b03      	ldr	r3, [sp, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d076      	beq.n	800b0d6 <_dtoa_r+0x4de>
 800afe8:	9b02      	ldr	r3, [sp, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	dd36      	ble.n	800b05c <_dtoa_r+0x464>
 800afee:	9b00      	ldr	r3, [sp, #0]
 800aff0:	4650      	mov	r0, sl
 800aff2:	4659      	mov	r1, fp
 800aff4:	1e5f      	subs	r7, r3, #1
 800aff6:	2200      	movs	r2, #0
 800aff8:	4b88      	ldr	r3, [pc, #544]	; (800b21c <_dtoa_r+0x624>)
 800affa:	f7f5 fb15 	bl	8000628 <__aeabi_dmul>
 800affe:	9e02      	ldr	r6, [sp, #8]
 800b000:	4682      	mov	sl, r0
 800b002:	468b      	mov	fp, r1
 800b004:	3501      	adds	r5, #1
 800b006:	4628      	mov	r0, r5
 800b008:	f7f5 faa4 	bl	8000554 <__aeabi_i2d>
 800b00c:	4652      	mov	r2, sl
 800b00e:	465b      	mov	r3, fp
 800b010:	f7f5 fb0a 	bl	8000628 <__aeabi_dmul>
 800b014:	4b82      	ldr	r3, [pc, #520]	; (800b220 <_dtoa_r+0x628>)
 800b016:	2200      	movs	r2, #0
 800b018:	f7f5 f950 	bl	80002bc <__adddf3>
 800b01c:	46d0      	mov	r8, sl
 800b01e:	46d9      	mov	r9, fp
 800b020:	4682      	mov	sl, r0
 800b022:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b026:	2e00      	cmp	r6, #0
 800b028:	d158      	bne.n	800b0dc <_dtoa_r+0x4e4>
 800b02a:	4b7e      	ldr	r3, [pc, #504]	; (800b224 <_dtoa_r+0x62c>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	4640      	mov	r0, r8
 800b030:	4649      	mov	r1, r9
 800b032:	f7f5 f941 	bl	80002b8 <__aeabi_dsub>
 800b036:	4652      	mov	r2, sl
 800b038:	465b      	mov	r3, fp
 800b03a:	4680      	mov	r8, r0
 800b03c:	4689      	mov	r9, r1
 800b03e:	f7f5 fd83 	bl	8000b48 <__aeabi_dcmpgt>
 800b042:	2800      	cmp	r0, #0
 800b044:	f040 8295 	bne.w	800b572 <_dtoa_r+0x97a>
 800b048:	4652      	mov	r2, sl
 800b04a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b04e:	4640      	mov	r0, r8
 800b050:	4649      	mov	r1, r9
 800b052:	f7f5 fd5b 	bl	8000b0c <__aeabi_dcmplt>
 800b056:	2800      	cmp	r0, #0
 800b058:	f040 8289 	bne.w	800b56e <_dtoa_r+0x976>
 800b05c:	ec5b ab19 	vmov	sl, fp, d9
 800b060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b062:	2b00      	cmp	r3, #0
 800b064:	f2c0 8148 	blt.w	800b2f8 <_dtoa_r+0x700>
 800b068:	9a00      	ldr	r2, [sp, #0]
 800b06a:	2a0e      	cmp	r2, #14
 800b06c:	f300 8144 	bgt.w	800b2f8 <_dtoa_r+0x700>
 800b070:	4b67      	ldr	r3, [pc, #412]	; (800b210 <_dtoa_r+0x618>)
 800b072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b076:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f280 80d5 	bge.w	800b22c <_dtoa_r+0x634>
 800b082:	9b03      	ldr	r3, [sp, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	f300 80d1 	bgt.w	800b22c <_dtoa_r+0x634>
 800b08a:	f040 826f 	bne.w	800b56c <_dtoa_r+0x974>
 800b08e:	4b65      	ldr	r3, [pc, #404]	; (800b224 <_dtoa_r+0x62c>)
 800b090:	2200      	movs	r2, #0
 800b092:	4640      	mov	r0, r8
 800b094:	4649      	mov	r1, r9
 800b096:	f7f5 fac7 	bl	8000628 <__aeabi_dmul>
 800b09a:	4652      	mov	r2, sl
 800b09c:	465b      	mov	r3, fp
 800b09e:	f7f5 fd49 	bl	8000b34 <__aeabi_dcmpge>
 800b0a2:	9e03      	ldr	r6, [sp, #12]
 800b0a4:	4637      	mov	r7, r6
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f040 8245 	bne.w	800b536 <_dtoa_r+0x93e>
 800b0ac:	9d01      	ldr	r5, [sp, #4]
 800b0ae:	2331      	movs	r3, #49	; 0x31
 800b0b0:	f805 3b01 	strb.w	r3, [r5], #1
 800b0b4:	9b00      	ldr	r3, [sp, #0]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	e240      	b.n	800b53e <_dtoa_r+0x946>
 800b0bc:	07f2      	lsls	r2, r6, #31
 800b0be:	d505      	bpl.n	800b0cc <_dtoa_r+0x4d4>
 800b0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0c4:	f7f5 fab0 	bl	8000628 <__aeabi_dmul>
 800b0c8:	3501      	adds	r5, #1
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	1076      	asrs	r6, r6, #1
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	e777      	b.n	800afc2 <_dtoa_r+0x3ca>
 800b0d2:	2502      	movs	r5, #2
 800b0d4:	e779      	b.n	800afca <_dtoa_r+0x3d2>
 800b0d6:	9f00      	ldr	r7, [sp, #0]
 800b0d8:	9e03      	ldr	r6, [sp, #12]
 800b0da:	e794      	b.n	800b006 <_dtoa_r+0x40e>
 800b0dc:	9901      	ldr	r1, [sp, #4]
 800b0de:	4b4c      	ldr	r3, [pc, #304]	; (800b210 <_dtoa_r+0x618>)
 800b0e0:	4431      	add	r1, r6
 800b0e2:	910d      	str	r1, [sp, #52]	; 0x34
 800b0e4:	9908      	ldr	r1, [sp, #32]
 800b0e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b0ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0ee:	2900      	cmp	r1, #0
 800b0f0:	d043      	beq.n	800b17a <_dtoa_r+0x582>
 800b0f2:	494d      	ldr	r1, [pc, #308]	; (800b228 <_dtoa_r+0x630>)
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	f7f5 fbc1 	bl	800087c <__aeabi_ddiv>
 800b0fa:	4652      	mov	r2, sl
 800b0fc:	465b      	mov	r3, fp
 800b0fe:	f7f5 f8db 	bl	80002b8 <__aeabi_dsub>
 800b102:	9d01      	ldr	r5, [sp, #4]
 800b104:	4682      	mov	sl, r0
 800b106:	468b      	mov	fp, r1
 800b108:	4649      	mov	r1, r9
 800b10a:	4640      	mov	r0, r8
 800b10c:	f7f5 fd3c 	bl	8000b88 <__aeabi_d2iz>
 800b110:	4606      	mov	r6, r0
 800b112:	f7f5 fa1f 	bl	8000554 <__aeabi_i2d>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4640      	mov	r0, r8
 800b11c:	4649      	mov	r1, r9
 800b11e:	f7f5 f8cb 	bl	80002b8 <__aeabi_dsub>
 800b122:	3630      	adds	r6, #48	; 0x30
 800b124:	f805 6b01 	strb.w	r6, [r5], #1
 800b128:	4652      	mov	r2, sl
 800b12a:	465b      	mov	r3, fp
 800b12c:	4680      	mov	r8, r0
 800b12e:	4689      	mov	r9, r1
 800b130:	f7f5 fcec 	bl	8000b0c <__aeabi_dcmplt>
 800b134:	2800      	cmp	r0, #0
 800b136:	d163      	bne.n	800b200 <_dtoa_r+0x608>
 800b138:	4642      	mov	r2, r8
 800b13a:	464b      	mov	r3, r9
 800b13c:	4936      	ldr	r1, [pc, #216]	; (800b218 <_dtoa_r+0x620>)
 800b13e:	2000      	movs	r0, #0
 800b140:	f7f5 f8ba 	bl	80002b8 <__aeabi_dsub>
 800b144:	4652      	mov	r2, sl
 800b146:	465b      	mov	r3, fp
 800b148:	f7f5 fce0 	bl	8000b0c <__aeabi_dcmplt>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	f040 80b5 	bne.w	800b2bc <_dtoa_r+0x6c4>
 800b152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b154:	429d      	cmp	r5, r3
 800b156:	d081      	beq.n	800b05c <_dtoa_r+0x464>
 800b158:	4b30      	ldr	r3, [pc, #192]	; (800b21c <_dtoa_r+0x624>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	4650      	mov	r0, sl
 800b15e:	4659      	mov	r1, fp
 800b160:	f7f5 fa62 	bl	8000628 <__aeabi_dmul>
 800b164:	4b2d      	ldr	r3, [pc, #180]	; (800b21c <_dtoa_r+0x624>)
 800b166:	4682      	mov	sl, r0
 800b168:	468b      	mov	fp, r1
 800b16a:	4640      	mov	r0, r8
 800b16c:	4649      	mov	r1, r9
 800b16e:	2200      	movs	r2, #0
 800b170:	f7f5 fa5a 	bl	8000628 <__aeabi_dmul>
 800b174:	4680      	mov	r8, r0
 800b176:	4689      	mov	r9, r1
 800b178:	e7c6      	b.n	800b108 <_dtoa_r+0x510>
 800b17a:	4650      	mov	r0, sl
 800b17c:	4659      	mov	r1, fp
 800b17e:	f7f5 fa53 	bl	8000628 <__aeabi_dmul>
 800b182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b184:	9d01      	ldr	r5, [sp, #4]
 800b186:	930f      	str	r3, [sp, #60]	; 0x3c
 800b188:	4682      	mov	sl, r0
 800b18a:	468b      	mov	fp, r1
 800b18c:	4649      	mov	r1, r9
 800b18e:	4640      	mov	r0, r8
 800b190:	f7f5 fcfa 	bl	8000b88 <__aeabi_d2iz>
 800b194:	4606      	mov	r6, r0
 800b196:	f7f5 f9dd 	bl	8000554 <__aeabi_i2d>
 800b19a:	3630      	adds	r6, #48	; 0x30
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4640      	mov	r0, r8
 800b1a2:	4649      	mov	r1, r9
 800b1a4:	f7f5 f888 	bl	80002b8 <__aeabi_dsub>
 800b1a8:	f805 6b01 	strb.w	r6, [r5], #1
 800b1ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ae:	429d      	cmp	r5, r3
 800b1b0:	4680      	mov	r8, r0
 800b1b2:	4689      	mov	r9, r1
 800b1b4:	f04f 0200 	mov.w	r2, #0
 800b1b8:	d124      	bne.n	800b204 <_dtoa_r+0x60c>
 800b1ba:	4b1b      	ldr	r3, [pc, #108]	; (800b228 <_dtoa_r+0x630>)
 800b1bc:	4650      	mov	r0, sl
 800b1be:	4659      	mov	r1, fp
 800b1c0:	f7f5 f87c 	bl	80002bc <__adddf3>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	f7f5 fcbc 	bl	8000b48 <__aeabi_dcmpgt>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d173      	bne.n	800b2bc <_dtoa_r+0x6c4>
 800b1d4:	4652      	mov	r2, sl
 800b1d6:	465b      	mov	r3, fp
 800b1d8:	4913      	ldr	r1, [pc, #76]	; (800b228 <_dtoa_r+0x630>)
 800b1da:	2000      	movs	r0, #0
 800b1dc:	f7f5 f86c 	bl	80002b8 <__aeabi_dsub>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4640      	mov	r0, r8
 800b1e6:	4649      	mov	r1, r9
 800b1e8:	f7f5 fc90 	bl	8000b0c <__aeabi_dcmplt>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f43f af35 	beq.w	800b05c <_dtoa_r+0x464>
 800b1f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b1f4:	1e6b      	subs	r3, r5, #1
 800b1f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1fc:	2b30      	cmp	r3, #48	; 0x30
 800b1fe:	d0f8      	beq.n	800b1f2 <_dtoa_r+0x5fa>
 800b200:	9700      	str	r7, [sp, #0]
 800b202:	e049      	b.n	800b298 <_dtoa_r+0x6a0>
 800b204:	4b05      	ldr	r3, [pc, #20]	; (800b21c <_dtoa_r+0x624>)
 800b206:	f7f5 fa0f 	bl	8000628 <__aeabi_dmul>
 800b20a:	4680      	mov	r8, r0
 800b20c:	4689      	mov	r9, r1
 800b20e:	e7bd      	b.n	800b18c <_dtoa_r+0x594>
 800b210:	0800e7d8 	.word	0x0800e7d8
 800b214:	0800e7b0 	.word	0x0800e7b0
 800b218:	3ff00000 	.word	0x3ff00000
 800b21c:	40240000 	.word	0x40240000
 800b220:	401c0000 	.word	0x401c0000
 800b224:	40140000 	.word	0x40140000
 800b228:	3fe00000 	.word	0x3fe00000
 800b22c:	9d01      	ldr	r5, [sp, #4]
 800b22e:	4656      	mov	r6, sl
 800b230:	465f      	mov	r7, fp
 800b232:	4642      	mov	r2, r8
 800b234:	464b      	mov	r3, r9
 800b236:	4630      	mov	r0, r6
 800b238:	4639      	mov	r1, r7
 800b23a:	f7f5 fb1f 	bl	800087c <__aeabi_ddiv>
 800b23e:	f7f5 fca3 	bl	8000b88 <__aeabi_d2iz>
 800b242:	4682      	mov	sl, r0
 800b244:	f7f5 f986 	bl	8000554 <__aeabi_i2d>
 800b248:	4642      	mov	r2, r8
 800b24a:	464b      	mov	r3, r9
 800b24c:	f7f5 f9ec 	bl	8000628 <__aeabi_dmul>
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	4630      	mov	r0, r6
 800b256:	4639      	mov	r1, r7
 800b258:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b25c:	f7f5 f82c 	bl	80002b8 <__aeabi_dsub>
 800b260:	f805 6b01 	strb.w	r6, [r5], #1
 800b264:	9e01      	ldr	r6, [sp, #4]
 800b266:	9f03      	ldr	r7, [sp, #12]
 800b268:	1bae      	subs	r6, r5, r6
 800b26a:	42b7      	cmp	r7, r6
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	d135      	bne.n	800b2de <_dtoa_r+0x6e6>
 800b272:	f7f5 f823 	bl	80002bc <__adddf3>
 800b276:	4642      	mov	r2, r8
 800b278:	464b      	mov	r3, r9
 800b27a:	4606      	mov	r6, r0
 800b27c:	460f      	mov	r7, r1
 800b27e:	f7f5 fc63 	bl	8000b48 <__aeabi_dcmpgt>
 800b282:	b9d0      	cbnz	r0, 800b2ba <_dtoa_r+0x6c2>
 800b284:	4642      	mov	r2, r8
 800b286:	464b      	mov	r3, r9
 800b288:	4630      	mov	r0, r6
 800b28a:	4639      	mov	r1, r7
 800b28c:	f7f5 fc34 	bl	8000af8 <__aeabi_dcmpeq>
 800b290:	b110      	cbz	r0, 800b298 <_dtoa_r+0x6a0>
 800b292:	f01a 0f01 	tst.w	sl, #1
 800b296:	d110      	bne.n	800b2ba <_dtoa_r+0x6c2>
 800b298:	4620      	mov	r0, r4
 800b29a:	ee18 1a10 	vmov	r1, s16
 800b29e:	f000 fb09 	bl	800b8b4 <_Bfree>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	9800      	ldr	r0, [sp, #0]
 800b2a6:	702b      	strb	r3, [r5, #0]
 800b2a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	6018      	str	r0, [r3, #0]
 800b2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f43f acf1 	beq.w	800ac98 <_dtoa_r+0xa0>
 800b2b6:	601d      	str	r5, [r3, #0]
 800b2b8:	e4ee      	b.n	800ac98 <_dtoa_r+0xa0>
 800b2ba:	9f00      	ldr	r7, [sp, #0]
 800b2bc:	462b      	mov	r3, r5
 800b2be:	461d      	mov	r5, r3
 800b2c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2c4:	2a39      	cmp	r2, #57	; 0x39
 800b2c6:	d106      	bne.n	800b2d6 <_dtoa_r+0x6de>
 800b2c8:	9a01      	ldr	r2, [sp, #4]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d1f7      	bne.n	800b2be <_dtoa_r+0x6c6>
 800b2ce:	9901      	ldr	r1, [sp, #4]
 800b2d0:	2230      	movs	r2, #48	; 0x30
 800b2d2:	3701      	adds	r7, #1
 800b2d4:	700a      	strb	r2, [r1, #0]
 800b2d6:	781a      	ldrb	r2, [r3, #0]
 800b2d8:	3201      	adds	r2, #1
 800b2da:	701a      	strb	r2, [r3, #0]
 800b2dc:	e790      	b.n	800b200 <_dtoa_r+0x608>
 800b2de:	4ba6      	ldr	r3, [pc, #664]	; (800b578 <_dtoa_r+0x980>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f7f5 f9a1 	bl	8000628 <__aeabi_dmul>
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	460f      	mov	r7, r1
 800b2ee:	f7f5 fc03 	bl	8000af8 <__aeabi_dcmpeq>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d09d      	beq.n	800b232 <_dtoa_r+0x63a>
 800b2f6:	e7cf      	b.n	800b298 <_dtoa_r+0x6a0>
 800b2f8:	9a08      	ldr	r2, [sp, #32]
 800b2fa:	2a00      	cmp	r2, #0
 800b2fc:	f000 80d7 	beq.w	800b4ae <_dtoa_r+0x8b6>
 800b300:	9a06      	ldr	r2, [sp, #24]
 800b302:	2a01      	cmp	r2, #1
 800b304:	f300 80ba 	bgt.w	800b47c <_dtoa_r+0x884>
 800b308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b30a:	2a00      	cmp	r2, #0
 800b30c:	f000 80b2 	beq.w	800b474 <_dtoa_r+0x87c>
 800b310:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b314:	9e07      	ldr	r6, [sp, #28]
 800b316:	9d04      	ldr	r5, [sp, #16]
 800b318:	9a04      	ldr	r2, [sp, #16]
 800b31a:	441a      	add	r2, r3
 800b31c:	9204      	str	r2, [sp, #16]
 800b31e:	9a05      	ldr	r2, [sp, #20]
 800b320:	2101      	movs	r1, #1
 800b322:	441a      	add	r2, r3
 800b324:	4620      	mov	r0, r4
 800b326:	9205      	str	r2, [sp, #20]
 800b328:	f000 fb7c 	bl	800ba24 <__i2b>
 800b32c:	4607      	mov	r7, r0
 800b32e:	2d00      	cmp	r5, #0
 800b330:	dd0c      	ble.n	800b34c <_dtoa_r+0x754>
 800b332:	9b05      	ldr	r3, [sp, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	dd09      	ble.n	800b34c <_dtoa_r+0x754>
 800b338:	42ab      	cmp	r3, r5
 800b33a:	9a04      	ldr	r2, [sp, #16]
 800b33c:	bfa8      	it	ge
 800b33e:	462b      	movge	r3, r5
 800b340:	1ad2      	subs	r2, r2, r3
 800b342:	9204      	str	r2, [sp, #16]
 800b344:	9a05      	ldr	r2, [sp, #20]
 800b346:	1aed      	subs	r5, r5, r3
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	9305      	str	r3, [sp, #20]
 800b34c:	9b07      	ldr	r3, [sp, #28]
 800b34e:	b31b      	cbz	r3, 800b398 <_dtoa_r+0x7a0>
 800b350:	9b08      	ldr	r3, [sp, #32]
 800b352:	2b00      	cmp	r3, #0
 800b354:	f000 80af 	beq.w	800b4b6 <_dtoa_r+0x8be>
 800b358:	2e00      	cmp	r6, #0
 800b35a:	dd13      	ble.n	800b384 <_dtoa_r+0x78c>
 800b35c:	4639      	mov	r1, r7
 800b35e:	4632      	mov	r2, r6
 800b360:	4620      	mov	r0, r4
 800b362:	f000 fc1f 	bl	800bba4 <__pow5mult>
 800b366:	ee18 2a10 	vmov	r2, s16
 800b36a:	4601      	mov	r1, r0
 800b36c:	4607      	mov	r7, r0
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 fb6e 	bl	800ba50 <__multiply>
 800b374:	ee18 1a10 	vmov	r1, s16
 800b378:	4680      	mov	r8, r0
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 fa9a 	bl	800b8b4 <_Bfree>
 800b380:	ee08 8a10 	vmov	s16, r8
 800b384:	9b07      	ldr	r3, [sp, #28]
 800b386:	1b9a      	subs	r2, r3, r6
 800b388:	d006      	beq.n	800b398 <_dtoa_r+0x7a0>
 800b38a:	ee18 1a10 	vmov	r1, s16
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 fc08 	bl	800bba4 <__pow5mult>
 800b394:	ee08 0a10 	vmov	s16, r0
 800b398:	2101      	movs	r1, #1
 800b39a:	4620      	mov	r0, r4
 800b39c:	f000 fb42 	bl	800ba24 <__i2b>
 800b3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	f340 8088 	ble.w	800b4ba <_dtoa_r+0x8c2>
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	4601      	mov	r1, r0
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f000 fbf8 	bl	800bba4 <__pow5mult>
 800b3b4:	9b06      	ldr	r3, [sp, #24]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	f340 8081 	ble.w	800b4c0 <_dtoa_r+0x8c8>
 800b3be:	f04f 0800 	mov.w	r8, #0
 800b3c2:	6933      	ldr	r3, [r6, #16]
 800b3c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b3c8:	6918      	ldr	r0, [r3, #16]
 800b3ca:	f000 fadb 	bl	800b984 <__hi0bits>
 800b3ce:	f1c0 0020 	rsb	r0, r0, #32
 800b3d2:	9b05      	ldr	r3, [sp, #20]
 800b3d4:	4418      	add	r0, r3
 800b3d6:	f010 001f 	ands.w	r0, r0, #31
 800b3da:	f000 8092 	beq.w	800b502 <_dtoa_r+0x90a>
 800b3de:	f1c0 0320 	rsb	r3, r0, #32
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	f340 808a 	ble.w	800b4fc <_dtoa_r+0x904>
 800b3e8:	f1c0 001c 	rsb	r0, r0, #28
 800b3ec:	9b04      	ldr	r3, [sp, #16]
 800b3ee:	4403      	add	r3, r0
 800b3f0:	9304      	str	r3, [sp, #16]
 800b3f2:	9b05      	ldr	r3, [sp, #20]
 800b3f4:	4403      	add	r3, r0
 800b3f6:	4405      	add	r5, r0
 800b3f8:	9305      	str	r3, [sp, #20]
 800b3fa:	9b04      	ldr	r3, [sp, #16]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	dd07      	ble.n	800b410 <_dtoa_r+0x818>
 800b400:	ee18 1a10 	vmov	r1, s16
 800b404:	461a      	mov	r2, r3
 800b406:	4620      	mov	r0, r4
 800b408:	f000 fc26 	bl	800bc58 <__lshift>
 800b40c:	ee08 0a10 	vmov	s16, r0
 800b410:	9b05      	ldr	r3, [sp, #20]
 800b412:	2b00      	cmp	r3, #0
 800b414:	dd05      	ble.n	800b422 <_dtoa_r+0x82a>
 800b416:	4631      	mov	r1, r6
 800b418:	461a      	mov	r2, r3
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 fc1c 	bl	800bc58 <__lshift>
 800b420:	4606      	mov	r6, r0
 800b422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d06e      	beq.n	800b506 <_dtoa_r+0x90e>
 800b428:	ee18 0a10 	vmov	r0, s16
 800b42c:	4631      	mov	r1, r6
 800b42e:	f000 fc83 	bl	800bd38 <__mcmp>
 800b432:	2800      	cmp	r0, #0
 800b434:	da67      	bge.n	800b506 <_dtoa_r+0x90e>
 800b436:	9b00      	ldr	r3, [sp, #0]
 800b438:	3b01      	subs	r3, #1
 800b43a:	ee18 1a10 	vmov	r1, s16
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	220a      	movs	r2, #10
 800b442:	2300      	movs	r3, #0
 800b444:	4620      	mov	r0, r4
 800b446:	f000 fa57 	bl	800b8f8 <__multadd>
 800b44a:	9b08      	ldr	r3, [sp, #32]
 800b44c:	ee08 0a10 	vmov	s16, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 81b1 	beq.w	800b7b8 <_dtoa_r+0xbc0>
 800b456:	2300      	movs	r3, #0
 800b458:	4639      	mov	r1, r7
 800b45a:	220a      	movs	r2, #10
 800b45c:	4620      	mov	r0, r4
 800b45e:	f000 fa4b 	bl	800b8f8 <__multadd>
 800b462:	9b02      	ldr	r3, [sp, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	4607      	mov	r7, r0
 800b468:	f300 808e 	bgt.w	800b588 <_dtoa_r+0x990>
 800b46c:	9b06      	ldr	r3, [sp, #24]
 800b46e:	2b02      	cmp	r3, #2
 800b470:	dc51      	bgt.n	800b516 <_dtoa_r+0x91e>
 800b472:	e089      	b.n	800b588 <_dtoa_r+0x990>
 800b474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b476:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b47a:	e74b      	b.n	800b314 <_dtoa_r+0x71c>
 800b47c:	9b03      	ldr	r3, [sp, #12]
 800b47e:	1e5e      	subs	r6, r3, #1
 800b480:	9b07      	ldr	r3, [sp, #28]
 800b482:	42b3      	cmp	r3, r6
 800b484:	bfbf      	itttt	lt
 800b486:	9b07      	ldrlt	r3, [sp, #28]
 800b488:	9607      	strlt	r6, [sp, #28]
 800b48a:	1af2      	sublt	r2, r6, r3
 800b48c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b48e:	bfb6      	itet	lt
 800b490:	189b      	addlt	r3, r3, r2
 800b492:	1b9e      	subge	r6, r3, r6
 800b494:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b496:	9b03      	ldr	r3, [sp, #12]
 800b498:	bfb8      	it	lt
 800b49a:	2600      	movlt	r6, #0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	bfb7      	itett	lt
 800b4a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b4a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b4a8:	1a9d      	sublt	r5, r3, r2
 800b4aa:	2300      	movlt	r3, #0
 800b4ac:	e734      	b.n	800b318 <_dtoa_r+0x720>
 800b4ae:	9e07      	ldr	r6, [sp, #28]
 800b4b0:	9d04      	ldr	r5, [sp, #16]
 800b4b2:	9f08      	ldr	r7, [sp, #32]
 800b4b4:	e73b      	b.n	800b32e <_dtoa_r+0x736>
 800b4b6:	9a07      	ldr	r2, [sp, #28]
 800b4b8:	e767      	b.n	800b38a <_dtoa_r+0x792>
 800b4ba:	9b06      	ldr	r3, [sp, #24]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	dc18      	bgt.n	800b4f2 <_dtoa_r+0x8fa>
 800b4c0:	f1ba 0f00 	cmp.w	sl, #0
 800b4c4:	d115      	bne.n	800b4f2 <_dtoa_r+0x8fa>
 800b4c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4ca:	b993      	cbnz	r3, 800b4f2 <_dtoa_r+0x8fa>
 800b4cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4d0:	0d1b      	lsrs	r3, r3, #20
 800b4d2:	051b      	lsls	r3, r3, #20
 800b4d4:	b183      	cbz	r3, 800b4f8 <_dtoa_r+0x900>
 800b4d6:	9b04      	ldr	r3, [sp, #16]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	9304      	str	r3, [sp, #16]
 800b4dc:	9b05      	ldr	r3, [sp, #20]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	9305      	str	r3, [sp, #20]
 800b4e2:	f04f 0801 	mov.w	r8, #1
 800b4e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f47f af6a 	bne.w	800b3c2 <_dtoa_r+0x7ca>
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	e76f      	b.n	800b3d2 <_dtoa_r+0x7da>
 800b4f2:	f04f 0800 	mov.w	r8, #0
 800b4f6:	e7f6      	b.n	800b4e6 <_dtoa_r+0x8ee>
 800b4f8:	4698      	mov	r8, r3
 800b4fa:	e7f4      	b.n	800b4e6 <_dtoa_r+0x8ee>
 800b4fc:	f43f af7d 	beq.w	800b3fa <_dtoa_r+0x802>
 800b500:	4618      	mov	r0, r3
 800b502:	301c      	adds	r0, #28
 800b504:	e772      	b.n	800b3ec <_dtoa_r+0x7f4>
 800b506:	9b03      	ldr	r3, [sp, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dc37      	bgt.n	800b57c <_dtoa_r+0x984>
 800b50c:	9b06      	ldr	r3, [sp, #24]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	dd34      	ble.n	800b57c <_dtoa_r+0x984>
 800b512:	9b03      	ldr	r3, [sp, #12]
 800b514:	9302      	str	r3, [sp, #8]
 800b516:	9b02      	ldr	r3, [sp, #8]
 800b518:	b96b      	cbnz	r3, 800b536 <_dtoa_r+0x93e>
 800b51a:	4631      	mov	r1, r6
 800b51c:	2205      	movs	r2, #5
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 f9ea 	bl	800b8f8 <__multadd>
 800b524:	4601      	mov	r1, r0
 800b526:	4606      	mov	r6, r0
 800b528:	ee18 0a10 	vmov	r0, s16
 800b52c:	f000 fc04 	bl	800bd38 <__mcmp>
 800b530:	2800      	cmp	r0, #0
 800b532:	f73f adbb 	bgt.w	800b0ac <_dtoa_r+0x4b4>
 800b536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b538:	9d01      	ldr	r5, [sp, #4]
 800b53a:	43db      	mvns	r3, r3
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	f04f 0800 	mov.w	r8, #0
 800b542:	4631      	mov	r1, r6
 800b544:	4620      	mov	r0, r4
 800b546:	f000 f9b5 	bl	800b8b4 <_Bfree>
 800b54a:	2f00      	cmp	r7, #0
 800b54c:	f43f aea4 	beq.w	800b298 <_dtoa_r+0x6a0>
 800b550:	f1b8 0f00 	cmp.w	r8, #0
 800b554:	d005      	beq.n	800b562 <_dtoa_r+0x96a>
 800b556:	45b8      	cmp	r8, r7
 800b558:	d003      	beq.n	800b562 <_dtoa_r+0x96a>
 800b55a:	4641      	mov	r1, r8
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 f9a9 	bl	800b8b4 <_Bfree>
 800b562:	4639      	mov	r1, r7
 800b564:	4620      	mov	r0, r4
 800b566:	f000 f9a5 	bl	800b8b4 <_Bfree>
 800b56a:	e695      	b.n	800b298 <_dtoa_r+0x6a0>
 800b56c:	2600      	movs	r6, #0
 800b56e:	4637      	mov	r7, r6
 800b570:	e7e1      	b.n	800b536 <_dtoa_r+0x93e>
 800b572:	9700      	str	r7, [sp, #0]
 800b574:	4637      	mov	r7, r6
 800b576:	e599      	b.n	800b0ac <_dtoa_r+0x4b4>
 800b578:	40240000 	.word	0x40240000
 800b57c:	9b08      	ldr	r3, [sp, #32]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 80ca 	beq.w	800b718 <_dtoa_r+0xb20>
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	9302      	str	r3, [sp, #8]
 800b588:	2d00      	cmp	r5, #0
 800b58a:	dd05      	ble.n	800b598 <_dtoa_r+0x9a0>
 800b58c:	4639      	mov	r1, r7
 800b58e:	462a      	mov	r2, r5
 800b590:	4620      	mov	r0, r4
 800b592:	f000 fb61 	bl	800bc58 <__lshift>
 800b596:	4607      	mov	r7, r0
 800b598:	f1b8 0f00 	cmp.w	r8, #0
 800b59c:	d05b      	beq.n	800b656 <_dtoa_r+0xa5e>
 800b59e:	6879      	ldr	r1, [r7, #4]
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 f947 	bl	800b834 <_Balloc>
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	b928      	cbnz	r0, 800b5b6 <_dtoa_r+0x9be>
 800b5aa:	4b87      	ldr	r3, [pc, #540]	; (800b7c8 <_dtoa_r+0xbd0>)
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b5b2:	f7ff bb3b 	b.w	800ac2c <_dtoa_r+0x34>
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	3202      	adds	r2, #2
 800b5ba:	0092      	lsls	r2, r2, #2
 800b5bc:	f107 010c 	add.w	r1, r7, #12
 800b5c0:	300c      	adds	r0, #12
 800b5c2:	f000 f91d 	bl	800b800 <memcpy>
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 fb44 	bl	800bc58 <__lshift>
 800b5d0:	9b01      	ldr	r3, [sp, #4]
 800b5d2:	f103 0901 	add.w	r9, r3, #1
 800b5d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b5da:	4413      	add	r3, r2
 800b5dc:	9305      	str	r3, [sp, #20]
 800b5de:	f00a 0301 	and.w	r3, sl, #1
 800b5e2:	46b8      	mov	r8, r7
 800b5e4:	9304      	str	r3, [sp, #16]
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	ee18 0a10 	vmov	r0, s16
 800b5ee:	f7ff fa77 	bl	800aae0 <quorem>
 800b5f2:	4641      	mov	r1, r8
 800b5f4:	9002      	str	r0, [sp, #8]
 800b5f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b5fa:	ee18 0a10 	vmov	r0, s16
 800b5fe:	f000 fb9b 	bl	800bd38 <__mcmp>
 800b602:	463a      	mov	r2, r7
 800b604:	9003      	str	r0, [sp, #12]
 800b606:	4631      	mov	r1, r6
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 fbb1 	bl	800bd70 <__mdiff>
 800b60e:	68c2      	ldr	r2, [r0, #12]
 800b610:	f109 3bff 	add.w	fp, r9, #4294967295
 800b614:	4605      	mov	r5, r0
 800b616:	bb02      	cbnz	r2, 800b65a <_dtoa_r+0xa62>
 800b618:	4601      	mov	r1, r0
 800b61a:	ee18 0a10 	vmov	r0, s16
 800b61e:	f000 fb8b 	bl	800bd38 <__mcmp>
 800b622:	4602      	mov	r2, r0
 800b624:	4629      	mov	r1, r5
 800b626:	4620      	mov	r0, r4
 800b628:	9207      	str	r2, [sp, #28]
 800b62a:	f000 f943 	bl	800b8b4 <_Bfree>
 800b62e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b632:	ea43 0102 	orr.w	r1, r3, r2
 800b636:	9b04      	ldr	r3, [sp, #16]
 800b638:	430b      	orrs	r3, r1
 800b63a:	464d      	mov	r5, r9
 800b63c:	d10f      	bne.n	800b65e <_dtoa_r+0xa66>
 800b63e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b642:	d02a      	beq.n	800b69a <_dtoa_r+0xaa2>
 800b644:	9b03      	ldr	r3, [sp, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	dd02      	ble.n	800b650 <_dtoa_r+0xa58>
 800b64a:	9b02      	ldr	r3, [sp, #8]
 800b64c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b650:	f88b a000 	strb.w	sl, [fp]
 800b654:	e775      	b.n	800b542 <_dtoa_r+0x94a>
 800b656:	4638      	mov	r0, r7
 800b658:	e7ba      	b.n	800b5d0 <_dtoa_r+0x9d8>
 800b65a:	2201      	movs	r2, #1
 800b65c:	e7e2      	b.n	800b624 <_dtoa_r+0xa2c>
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	db04      	blt.n	800b66e <_dtoa_r+0xa76>
 800b664:	9906      	ldr	r1, [sp, #24]
 800b666:	430b      	orrs	r3, r1
 800b668:	9904      	ldr	r1, [sp, #16]
 800b66a:	430b      	orrs	r3, r1
 800b66c:	d122      	bne.n	800b6b4 <_dtoa_r+0xabc>
 800b66e:	2a00      	cmp	r2, #0
 800b670:	ddee      	ble.n	800b650 <_dtoa_r+0xa58>
 800b672:	ee18 1a10 	vmov	r1, s16
 800b676:	2201      	movs	r2, #1
 800b678:	4620      	mov	r0, r4
 800b67a:	f000 faed 	bl	800bc58 <__lshift>
 800b67e:	4631      	mov	r1, r6
 800b680:	ee08 0a10 	vmov	s16, r0
 800b684:	f000 fb58 	bl	800bd38 <__mcmp>
 800b688:	2800      	cmp	r0, #0
 800b68a:	dc03      	bgt.n	800b694 <_dtoa_r+0xa9c>
 800b68c:	d1e0      	bne.n	800b650 <_dtoa_r+0xa58>
 800b68e:	f01a 0f01 	tst.w	sl, #1
 800b692:	d0dd      	beq.n	800b650 <_dtoa_r+0xa58>
 800b694:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b698:	d1d7      	bne.n	800b64a <_dtoa_r+0xa52>
 800b69a:	2339      	movs	r3, #57	; 0x39
 800b69c:	f88b 3000 	strb.w	r3, [fp]
 800b6a0:	462b      	mov	r3, r5
 800b6a2:	461d      	mov	r5, r3
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b6aa:	2a39      	cmp	r2, #57	; 0x39
 800b6ac:	d071      	beq.n	800b792 <_dtoa_r+0xb9a>
 800b6ae:	3201      	adds	r2, #1
 800b6b0:	701a      	strb	r2, [r3, #0]
 800b6b2:	e746      	b.n	800b542 <_dtoa_r+0x94a>
 800b6b4:	2a00      	cmp	r2, #0
 800b6b6:	dd07      	ble.n	800b6c8 <_dtoa_r+0xad0>
 800b6b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6bc:	d0ed      	beq.n	800b69a <_dtoa_r+0xaa2>
 800b6be:	f10a 0301 	add.w	r3, sl, #1
 800b6c2:	f88b 3000 	strb.w	r3, [fp]
 800b6c6:	e73c      	b.n	800b542 <_dtoa_r+0x94a>
 800b6c8:	9b05      	ldr	r3, [sp, #20]
 800b6ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b6ce:	4599      	cmp	r9, r3
 800b6d0:	d047      	beq.n	800b762 <_dtoa_r+0xb6a>
 800b6d2:	ee18 1a10 	vmov	r1, s16
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	220a      	movs	r2, #10
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 f90c 	bl	800b8f8 <__multadd>
 800b6e0:	45b8      	cmp	r8, r7
 800b6e2:	ee08 0a10 	vmov	s16, r0
 800b6e6:	f04f 0300 	mov.w	r3, #0
 800b6ea:	f04f 020a 	mov.w	r2, #10
 800b6ee:	4641      	mov	r1, r8
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	d106      	bne.n	800b702 <_dtoa_r+0xb0a>
 800b6f4:	f000 f900 	bl	800b8f8 <__multadd>
 800b6f8:	4680      	mov	r8, r0
 800b6fa:	4607      	mov	r7, r0
 800b6fc:	f109 0901 	add.w	r9, r9, #1
 800b700:	e772      	b.n	800b5e8 <_dtoa_r+0x9f0>
 800b702:	f000 f8f9 	bl	800b8f8 <__multadd>
 800b706:	4639      	mov	r1, r7
 800b708:	4680      	mov	r8, r0
 800b70a:	2300      	movs	r3, #0
 800b70c:	220a      	movs	r2, #10
 800b70e:	4620      	mov	r0, r4
 800b710:	f000 f8f2 	bl	800b8f8 <__multadd>
 800b714:	4607      	mov	r7, r0
 800b716:	e7f1      	b.n	800b6fc <_dtoa_r+0xb04>
 800b718:	9b03      	ldr	r3, [sp, #12]
 800b71a:	9302      	str	r3, [sp, #8]
 800b71c:	9d01      	ldr	r5, [sp, #4]
 800b71e:	ee18 0a10 	vmov	r0, s16
 800b722:	4631      	mov	r1, r6
 800b724:	f7ff f9dc 	bl	800aae0 <quorem>
 800b728:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b72c:	9b01      	ldr	r3, [sp, #4]
 800b72e:	f805 ab01 	strb.w	sl, [r5], #1
 800b732:	1aea      	subs	r2, r5, r3
 800b734:	9b02      	ldr	r3, [sp, #8]
 800b736:	4293      	cmp	r3, r2
 800b738:	dd09      	ble.n	800b74e <_dtoa_r+0xb56>
 800b73a:	ee18 1a10 	vmov	r1, s16
 800b73e:	2300      	movs	r3, #0
 800b740:	220a      	movs	r2, #10
 800b742:	4620      	mov	r0, r4
 800b744:	f000 f8d8 	bl	800b8f8 <__multadd>
 800b748:	ee08 0a10 	vmov	s16, r0
 800b74c:	e7e7      	b.n	800b71e <_dtoa_r+0xb26>
 800b74e:	9b02      	ldr	r3, [sp, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	bfc8      	it	gt
 800b754:	461d      	movgt	r5, r3
 800b756:	9b01      	ldr	r3, [sp, #4]
 800b758:	bfd8      	it	le
 800b75a:	2501      	movle	r5, #1
 800b75c:	441d      	add	r5, r3
 800b75e:	f04f 0800 	mov.w	r8, #0
 800b762:	ee18 1a10 	vmov	r1, s16
 800b766:	2201      	movs	r2, #1
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 fa75 	bl	800bc58 <__lshift>
 800b76e:	4631      	mov	r1, r6
 800b770:	ee08 0a10 	vmov	s16, r0
 800b774:	f000 fae0 	bl	800bd38 <__mcmp>
 800b778:	2800      	cmp	r0, #0
 800b77a:	dc91      	bgt.n	800b6a0 <_dtoa_r+0xaa8>
 800b77c:	d102      	bne.n	800b784 <_dtoa_r+0xb8c>
 800b77e:	f01a 0f01 	tst.w	sl, #1
 800b782:	d18d      	bne.n	800b6a0 <_dtoa_r+0xaa8>
 800b784:	462b      	mov	r3, r5
 800b786:	461d      	mov	r5, r3
 800b788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b78c:	2a30      	cmp	r2, #48	; 0x30
 800b78e:	d0fa      	beq.n	800b786 <_dtoa_r+0xb8e>
 800b790:	e6d7      	b.n	800b542 <_dtoa_r+0x94a>
 800b792:	9a01      	ldr	r2, [sp, #4]
 800b794:	429a      	cmp	r2, r3
 800b796:	d184      	bne.n	800b6a2 <_dtoa_r+0xaaa>
 800b798:	9b00      	ldr	r3, [sp, #0]
 800b79a:	3301      	adds	r3, #1
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	2331      	movs	r3, #49	; 0x31
 800b7a0:	7013      	strb	r3, [r2, #0]
 800b7a2:	e6ce      	b.n	800b542 <_dtoa_r+0x94a>
 800b7a4:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <_dtoa_r+0xbd4>)
 800b7a6:	f7ff ba95 	b.w	800acd4 <_dtoa_r+0xdc>
 800b7aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f47f aa6e 	bne.w	800ac8e <_dtoa_r+0x96>
 800b7b2:	4b07      	ldr	r3, [pc, #28]	; (800b7d0 <_dtoa_r+0xbd8>)
 800b7b4:	f7ff ba8e 	b.w	800acd4 <_dtoa_r+0xdc>
 800b7b8:	9b02      	ldr	r3, [sp, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	dcae      	bgt.n	800b71c <_dtoa_r+0xb24>
 800b7be:	9b06      	ldr	r3, [sp, #24]
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	f73f aea8 	bgt.w	800b516 <_dtoa_r+0x91e>
 800b7c6:	e7a9      	b.n	800b71c <_dtoa_r+0xb24>
 800b7c8:	0800e73e 	.word	0x0800e73e
 800b7cc:	0800e8c1 	.word	0x0800e8c1
 800b7d0:	0800e6bf 	.word	0x0800e6bf

0800b7d4 <_localeconv_r>:
 800b7d4:	4800      	ldr	r0, [pc, #0]	; (800b7d8 <_localeconv_r+0x4>)
 800b7d6:	4770      	bx	lr
 800b7d8:	2000026c 	.word	0x2000026c

0800b7dc <_lseek_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4d07      	ldr	r5, [pc, #28]	; (800b7fc <_lseek_r+0x20>)
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	4608      	mov	r0, r1
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	602a      	str	r2, [r5, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	f7f7 ff9e 	bl	800372c <_lseek>
 800b7f0:	1c43      	adds	r3, r0, #1
 800b7f2:	d102      	bne.n	800b7fa <_lseek_r+0x1e>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	b103      	cbz	r3, 800b7fa <_lseek_r+0x1e>
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
 800b7fc:	20000b64 	.word	0x20000b64

0800b800 <memcpy>:
 800b800:	440a      	add	r2, r1
 800b802:	4291      	cmp	r1, r2
 800b804:	f100 33ff 	add.w	r3, r0, #4294967295
 800b808:	d100      	bne.n	800b80c <memcpy+0xc>
 800b80a:	4770      	bx	lr
 800b80c:	b510      	push	{r4, lr}
 800b80e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b812:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b816:	4291      	cmp	r1, r2
 800b818:	d1f9      	bne.n	800b80e <memcpy+0xe>
 800b81a:	bd10      	pop	{r4, pc}

0800b81c <__malloc_lock>:
 800b81c:	4801      	ldr	r0, [pc, #4]	; (800b824 <__malloc_lock+0x8>)
 800b81e:	f001 bb03 	b.w	800ce28 <__retarget_lock_acquire_recursive>
 800b822:	bf00      	nop
 800b824:	20000b68 	.word	0x20000b68

0800b828 <__malloc_unlock>:
 800b828:	4801      	ldr	r0, [pc, #4]	; (800b830 <__malloc_unlock+0x8>)
 800b82a:	f001 bafe 	b.w	800ce2a <__retarget_lock_release_recursive>
 800b82e:	bf00      	nop
 800b830:	20000b68 	.word	0x20000b68

0800b834 <_Balloc>:
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b838:	4604      	mov	r4, r0
 800b83a:	460d      	mov	r5, r1
 800b83c:	b976      	cbnz	r6, 800b85c <_Balloc+0x28>
 800b83e:	2010      	movs	r0, #16
 800b840:	f7fe fa72 	bl	8009d28 <malloc>
 800b844:	4602      	mov	r2, r0
 800b846:	6260      	str	r0, [r4, #36]	; 0x24
 800b848:	b920      	cbnz	r0, 800b854 <_Balloc+0x20>
 800b84a:	4b18      	ldr	r3, [pc, #96]	; (800b8ac <_Balloc+0x78>)
 800b84c:	4818      	ldr	r0, [pc, #96]	; (800b8b0 <_Balloc+0x7c>)
 800b84e:	2166      	movs	r1, #102	; 0x66
 800b850:	f001 f902 	bl	800ca58 <__assert_func>
 800b854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b858:	6006      	str	r6, [r0, #0]
 800b85a:	60c6      	str	r6, [r0, #12]
 800b85c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b85e:	68f3      	ldr	r3, [r6, #12]
 800b860:	b183      	cbz	r3, 800b884 <_Balloc+0x50>
 800b862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b86a:	b9b8      	cbnz	r0, 800b89c <_Balloc+0x68>
 800b86c:	2101      	movs	r1, #1
 800b86e:	fa01 f605 	lsl.w	r6, r1, r5
 800b872:	1d72      	adds	r2, r6, #5
 800b874:	0092      	lsls	r2, r2, #2
 800b876:	4620      	mov	r0, r4
 800b878:	f000 fb60 	bl	800bf3c <_calloc_r>
 800b87c:	b160      	cbz	r0, 800b898 <_Balloc+0x64>
 800b87e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b882:	e00e      	b.n	800b8a2 <_Balloc+0x6e>
 800b884:	2221      	movs	r2, #33	; 0x21
 800b886:	2104      	movs	r1, #4
 800b888:	4620      	mov	r0, r4
 800b88a:	f000 fb57 	bl	800bf3c <_calloc_r>
 800b88e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b890:	60f0      	str	r0, [r6, #12]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1e4      	bne.n	800b862 <_Balloc+0x2e>
 800b898:	2000      	movs	r0, #0
 800b89a:	bd70      	pop	{r4, r5, r6, pc}
 800b89c:	6802      	ldr	r2, [r0, #0]
 800b89e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8a8:	e7f7      	b.n	800b89a <_Balloc+0x66>
 800b8aa:	bf00      	nop
 800b8ac:	0800e6cc 	.word	0x0800e6cc
 800b8b0:	0800e74f 	.word	0x0800e74f

0800b8b4 <_Bfree>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	b976      	cbnz	r6, 800b8dc <_Bfree+0x28>
 800b8be:	2010      	movs	r0, #16
 800b8c0:	f7fe fa32 	bl	8009d28 <malloc>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	6268      	str	r0, [r5, #36]	; 0x24
 800b8c8:	b920      	cbnz	r0, 800b8d4 <_Bfree+0x20>
 800b8ca:	4b09      	ldr	r3, [pc, #36]	; (800b8f0 <_Bfree+0x3c>)
 800b8cc:	4809      	ldr	r0, [pc, #36]	; (800b8f4 <_Bfree+0x40>)
 800b8ce:	218a      	movs	r1, #138	; 0x8a
 800b8d0:	f001 f8c2 	bl	800ca58 <__assert_func>
 800b8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8d8:	6006      	str	r6, [r0, #0]
 800b8da:	60c6      	str	r6, [r0, #12]
 800b8dc:	b13c      	cbz	r4, 800b8ee <_Bfree+0x3a>
 800b8de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8e0:	6862      	ldr	r2, [r4, #4]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8e8:	6021      	str	r1, [r4, #0]
 800b8ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	0800e6cc 	.word	0x0800e6cc
 800b8f4:	0800e74f 	.word	0x0800e74f

0800b8f8 <__multadd>:
 800b8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8fc:	690d      	ldr	r5, [r1, #16]
 800b8fe:	4607      	mov	r7, r0
 800b900:	460c      	mov	r4, r1
 800b902:	461e      	mov	r6, r3
 800b904:	f101 0c14 	add.w	ip, r1, #20
 800b908:	2000      	movs	r0, #0
 800b90a:	f8dc 3000 	ldr.w	r3, [ip]
 800b90e:	b299      	uxth	r1, r3
 800b910:	fb02 6101 	mla	r1, r2, r1, r6
 800b914:	0c1e      	lsrs	r6, r3, #16
 800b916:	0c0b      	lsrs	r3, r1, #16
 800b918:	fb02 3306 	mla	r3, r2, r6, r3
 800b91c:	b289      	uxth	r1, r1
 800b91e:	3001      	adds	r0, #1
 800b920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b924:	4285      	cmp	r5, r0
 800b926:	f84c 1b04 	str.w	r1, [ip], #4
 800b92a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b92e:	dcec      	bgt.n	800b90a <__multadd+0x12>
 800b930:	b30e      	cbz	r6, 800b976 <__multadd+0x7e>
 800b932:	68a3      	ldr	r3, [r4, #8]
 800b934:	42ab      	cmp	r3, r5
 800b936:	dc19      	bgt.n	800b96c <__multadd+0x74>
 800b938:	6861      	ldr	r1, [r4, #4]
 800b93a:	4638      	mov	r0, r7
 800b93c:	3101      	adds	r1, #1
 800b93e:	f7ff ff79 	bl	800b834 <_Balloc>
 800b942:	4680      	mov	r8, r0
 800b944:	b928      	cbnz	r0, 800b952 <__multadd+0x5a>
 800b946:	4602      	mov	r2, r0
 800b948:	4b0c      	ldr	r3, [pc, #48]	; (800b97c <__multadd+0x84>)
 800b94a:	480d      	ldr	r0, [pc, #52]	; (800b980 <__multadd+0x88>)
 800b94c:	21b5      	movs	r1, #181	; 0xb5
 800b94e:	f001 f883 	bl	800ca58 <__assert_func>
 800b952:	6922      	ldr	r2, [r4, #16]
 800b954:	3202      	adds	r2, #2
 800b956:	f104 010c 	add.w	r1, r4, #12
 800b95a:	0092      	lsls	r2, r2, #2
 800b95c:	300c      	adds	r0, #12
 800b95e:	f7ff ff4f 	bl	800b800 <memcpy>
 800b962:	4621      	mov	r1, r4
 800b964:	4638      	mov	r0, r7
 800b966:	f7ff ffa5 	bl	800b8b4 <_Bfree>
 800b96a:	4644      	mov	r4, r8
 800b96c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b970:	3501      	adds	r5, #1
 800b972:	615e      	str	r6, [r3, #20]
 800b974:	6125      	str	r5, [r4, #16]
 800b976:	4620      	mov	r0, r4
 800b978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b97c:	0800e73e 	.word	0x0800e73e
 800b980:	0800e74f 	.word	0x0800e74f

0800b984 <__hi0bits>:
 800b984:	0c03      	lsrs	r3, r0, #16
 800b986:	041b      	lsls	r3, r3, #16
 800b988:	b9d3      	cbnz	r3, 800b9c0 <__hi0bits+0x3c>
 800b98a:	0400      	lsls	r0, r0, #16
 800b98c:	2310      	movs	r3, #16
 800b98e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b992:	bf04      	itt	eq
 800b994:	0200      	lsleq	r0, r0, #8
 800b996:	3308      	addeq	r3, #8
 800b998:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b99c:	bf04      	itt	eq
 800b99e:	0100      	lsleq	r0, r0, #4
 800b9a0:	3304      	addeq	r3, #4
 800b9a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b9a6:	bf04      	itt	eq
 800b9a8:	0080      	lsleq	r0, r0, #2
 800b9aa:	3302      	addeq	r3, #2
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	db05      	blt.n	800b9bc <__hi0bits+0x38>
 800b9b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b9b4:	f103 0301 	add.w	r3, r3, #1
 800b9b8:	bf08      	it	eq
 800b9ba:	2320      	moveq	r3, #32
 800b9bc:	4618      	mov	r0, r3
 800b9be:	4770      	bx	lr
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	e7e4      	b.n	800b98e <__hi0bits+0xa>

0800b9c4 <__lo0bits>:
 800b9c4:	6803      	ldr	r3, [r0, #0]
 800b9c6:	f013 0207 	ands.w	r2, r3, #7
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	d00b      	beq.n	800b9e6 <__lo0bits+0x22>
 800b9ce:	07da      	lsls	r2, r3, #31
 800b9d0:	d423      	bmi.n	800ba1a <__lo0bits+0x56>
 800b9d2:	0798      	lsls	r0, r3, #30
 800b9d4:	bf49      	itett	mi
 800b9d6:	085b      	lsrmi	r3, r3, #1
 800b9d8:	089b      	lsrpl	r3, r3, #2
 800b9da:	2001      	movmi	r0, #1
 800b9dc:	600b      	strmi	r3, [r1, #0]
 800b9de:	bf5c      	itt	pl
 800b9e0:	600b      	strpl	r3, [r1, #0]
 800b9e2:	2002      	movpl	r0, #2
 800b9e4:	4770      	bx	lr
 800b9e6:	b298      	uxth	r0, r3
 800b9e8:	b9a8      	cbnz	r0, 800ba16 <__lo0bits+0x52>
 800b9ea:	0c1b      	lsrs	r3, r3, #16
 800b9ec:	2010      	movs	r0, #16
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	b90a      	cbnz	r2, 800b9f6 <__lo0bits+0x32>
 800b9f2:	3008      	adds	r0, #8
 800b9f4:	0a1b      	lsrs	r3, r3, #8
 800b9f6:	071a      	lsls	r2, r3, #28
 800b9f8:	bf04      	itt	eq
 800b9fa:	091b      	lsreq	r3, r3, #4
 800b9fc:	3004      	addeq	r0, #4
 800b9fe:	079a      	lsls	r2, r3, #30
 800ba00:	bf04      	itt	eq
 800ba02:	089b      	lsreq	r3, r3, #2
 800ba04:	3002      	addeq	r0, #2
 800ba06:	07da      	lsls	r2, r3, #31
 800ba08:	d403      	bmi.n	800ba12 <__lo0bits+0x4e>
 800ba0a:	085b      	lsrs	r3, r3, #1
 800ba0c:	f100 0001 	add.w	r0, r0, #1
 800ba10:	d005      	beq.n	800ba1e <__lo0bits+0x5a>
 800ba12:	600b      	str	r3, [r1, #0]
 800ba14:	4770      	bx	lr
 800ba16:	4610      	mov	r0, r2
 800ba18:	e7e9      	b.n	800b9ee <__lo0bits+0x2a>
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	4770      	bx	lr
 800ba1e:	2020      	movs	r0, #32
 800ba20:	4770      	bx	lr
	...

0800ba24 <__i2b>:
 800ba24:	b510      	push	{r4, lr}
 800ba26:	460c      	mov	r4, r1
 800ba28:	2101      	movs	r1, #1
 800ba2a:	f7ff ff03 	bl	800b834 <_Balloc>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	b928      	cbnz	r0, 800ba3e <__i2b+0x1a>
 800ba32:	4b05      	ldr	r3, [pc, #20]	; (800ba48 <__i2b+0x24>)
 800ba34:	4805      	ldr	r0, [pc, #20]	; (800ba4c <__i2b+0x28>)
 800ba36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba3a:	f001 f80d 	bl	800ca58 <__assert_func>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	6144      	str	r4, [r0, #20]
 800ba42:	6103      	str	r3, [r0, #16]
 800ba44:	bd10      	pop	{r4, pc}
 800ba46:	bf00      	nop
 800ba48:	0800e73e 	.word	0x0800e73e
 800ba4c:	0800e74f 	.word	0x0800e74f

0800ba50 <__multiply>:
 800ba50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba54:	4691      	mov	r9, r2
 800ba56:	690a      	ldr	r2, [r1, #16]
 800ba58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	bfb8      	it	lt
 800ba60:	460b      	movlt	r3, r1
 800ba62:	460c      	mov	r4, r1
 800ba64:	bfbc      	itt	lt
 800ba66:	464c      	movlt	r4, r9
 800ba68:	4699      	movlt	r9, r3
 800ba6a:	6927      	ldr	r7, [r4, #16]
 800ba6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba70:	68a3      	ldr	r3, [r4, #8]
 800ba72:	6861      	ldr	r1, [r4, #4]
 800ba74:	eb07 060a 	add.w	r6, r7, sl
 800ba78:	42b3      	cmp	r3, r6
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	bfb8      	it	lt
 800ba7e:	3101      	addlt	r1, #1
 800ba80:	f7ff fed8 	bl	800b834 <_Balloc>
 800ba84:	b930      	cbnz	r0, 800ba94 <__multiply+0x44>
 800ba86:	4602      	mov	r2, r0
 800ba88:	4b44      	ldr	r3, [pc, #272]	; (800bb9c <__multiply+0x14c>)
 800ba8a:	4845      	ldr	r0, [pc, #276]	; (800bba0 <__multiply+0x150>)
 800ba8c:	f240 115d 	movw	r1, #349	; 0x15d
 800ba90:	f000 ffe2 	bl	800ca58 <__assert_func>
 800ba94:	f100 0514 	add.w	r5, r0, #20
 800ba98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	2200      	movs	r2, #0
 800baa0:	4543      	cmp	r3, r8
 800baa2:	d321      	bcc.n	800bae8 <__multiply+0x98>
 800baa4:	f104 0314 	add.w	r3, r4, #20
 800baa8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800baac:	f109 0314 	add.w	r3, r9, #20
 800bab0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bab4:	9202      	str	r2, [sp, #8]
 800bab6:	1b3a      	subs	r2, r7, r4
 800bab8:	3a15      	subs	r2, #21
 800baba:	f022 0203 	bic.w	r2, r2, #3
 800babe:	3204      	adds	r2, #4
 800bac0:	f104 0115 	add.w	r1, r4, #21
 800bac4:	428f      	cmp	r7, r1
 800bac6:	bf38      	it	cc
 800bac8:	2204      	movcc	r2, #4
 800baca:	9201      	str	r2, [sp, #4]
 800bacc:	9a02      	ldr	r2, [sp, #8]
 800bace:	9303      	str	r3, [sp, #12]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d80c      	bhi.n	800baee <__multiply+0x9e>
 800bad4:	2e00      	cmp	r6, #0
 800bad6:	dd03      	ble.n	800bae0 <__multiply+0x90>
 800bad8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800badc:	2b00      	cmp	r3, #0
 800bade:	d05a      	beq.n	800bb96 <__multiply+0x146>
 800bae0:	6106      	str	r6, [r0, #16]
 800bae2:	b005      	add	sp, #20
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	f843 2b04 	str.w	r2, [r3], #4
 800baec:	e7d8      	b.n	800baa0 <__multiply+0x50>
 800baee:	f8b3 a000 	ldrh.w	sl, [r3]
 800baf2:	f1ba 0f00 	cmp.w	sl, #0
 800baf6:	d024      	beq.n	800bb42 <__multiply+0xf2>
 800baf8:	f104 0e14 	add.w	lr, r4, #20
 800bafc:	46a9      	mov	r9, r5
 800bafe:	f04f 0c00 	mov.w	ip, #0
 800bb02:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb06:	f8d9 1000 	ldr.w	r1, [r9]
 800bb0a:	fa1f fb82 	uxth.w	fp, r2
 800bb0e:	b289      	uxth	r1, r1
 800bb10:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb18:	f8d9 2000 	ldr.w	r2, [r9]
 800bb1c:	4461      	add	r1, ip
 800bb1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb22:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb2a:	b289      	uxth	r1, r1
 800bb2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb30:	4577      	cmp	r7, lr
 800bb32:	f849 1b04 	str.w	r1, [r9], #4
 800bb36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb3a:	d8e2      	bhi.n	800bb02 <__multiply+0xb2>
 800bb3c:	9a01      	ldr	r2, [sp, #4]
 800bb3e:	f845 c002 	str.w	ip, [r5, r2]
 800bb42:	9a03      	ldr	r2, [sp, #12]
 800bb44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	f1b9 0f00 	cmp.w	r9, #0
 800bb4e:	d020      	beq.n	800bb92 <__multiply+0x142>
 800bb50:	6829      	ldr	r1, [r5, #0]
 800bb52:	f104 0c14 	add.w	ip, r4, #20
 800bb56:	46ae      	mov	lr, r5
 800bb58:	f04f 0a00 	mov.w	sl, #0
 800bb5c:	f8bc b000 	ldrh.w	fp, [ip]
 800bb60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb64:	fb09 220b 	mla	r2, r9, fp, r2
 800bb68:	4492      	add	sl, r2
 800bb6a:	b289      	uxth	r1, r1
 800bb6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bb70:	f84e 1b04 	str.w	r1, [lr], #4
 800bb74:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb78:	f8be 1000 	ldrh.w	r1, [lr]
 800bb7c:	0c12      	lsrs	r2, r2, #16
 800bb7e:	fb09 1102 	mla	r1, r9, r2, r1
 800bb82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bb86:	4567      	cmp	r7, ip
 800bb88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb8c:	d8e6      	bhi.n	800bb5c <__multiply+0x10c>
 800bb8e:	9a01      	ldr	r2, [sp, #4]
 800bb90:	50a9      	str	r1, [r5, r2]
 800bb92:	3504      	adds	r5, #4
 800bb94:	e79a      	b.n	800bacc <__multiply+0x7c>
 800bb96:	3e01      	subs	r6, #1
 800bb98:	e79c      	b.n	800bad4 <__multiply+0x84>
 800bb9a:	bf00      	nop
 800bb9c:	0800e73e 	.word	0x0800e73e
 800bba0:	0800e74f 	.word	0x0800e74f

0800bba4 <__pow5mult>:
 800bba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bba8:	4615      	mov	r5, r2
 800bbaa:	f012 0203 	ands.w	r2, r2, #3
 800bbae:	4606      	mov	r6, r0
 800bbb0:	460f      	mov	r7, r1
 800bbb2:	d007      	beq.n	800bbc4 <__pow5mult+0x20>
 800bbb4:	4c25      	ldr	r4, [pc, #148]	; (800bc4c <__pow5mult+0xa8>)
 800bbb6:	3a01      	subs	r2, #1
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbbe:	f7ff fe9b 	bl	800b8f8 <__multadd>
 800bbc2:	4607      	mov	r7, r0
 800bbc4:	10ad      	asrs	r5, r5, #2
 800bbc6:	d03d      	beq.n	800bc44 <__pow5mult+0xa0>
 800bbc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bbca:	b97c      	cbnz	r4, 800bbec <__pow5mult+0x48>
 800bbcc:	2010      	movs	r0, #16
 800bbce:	f7fe f8ab 	bl	8009d28 <malloc>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	6270      	str	r0, [r6, #36]	; 0x24
 800bbd6:	b928      	cbnz	r0, 800bbe4 <__pow5mult+0x40>
 800bbd8:	4b1d      	ldr	r3, [pc, #116]	; (800bc50 <__pow5mult+0xac>)
 800bbda:	481e      	ldr	r0, [pc, #120]	; (800bc54 <__pow5mult+0xb0>)
 800bbdc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bbe0:	f000 ff3a 	bl	800ca58 <__assert_func>
 800bbe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbe8:	6004      	str	r4, [r0, #0]
 800bbea:	60c4      	str	r4, [r0, #12]
 800bbec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bbf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbf4:	b94c      	cbnz	r4, 800bc0a <__pow5mult+0x66>
 800bbf6:	f240 2171 	movw	r1, #625	; 0x271
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f7ff ff12 	bl	800ba24 <__i2b>
 800bc00:	2300      	movs	r3, #0
 800bc02:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc06:	4604      	mov	r4, r0
 800bc08:	6003      	str	r3, [r0, #0]
 800bc0a:	f04f 0900 	mov.w	r9, #0
 800bc0e:	07eb      	lsls	r3, r5, #31
 800bc10:	d50a      	bpl.n	800bc28 <__pow5mult+0x84>
 800bc12:	4639      	mov	r1, r7
 800bc14:	4622      	mov	r2, r4
 800bc16:	4630      	mov	r0, r6
 800bc18:	f7ff ff1a 	bl	800ba50 <__multiply>
 800bc1c:	4639      	mov	r1, r7
 800bc1e:	4680      	mov	r8, r0
 800bc20:	4630      	mov	r0, r6
 800bc22:	f7ff fe47 	bl	800b8b4 <_Bfree>
 800bc26:	4647      	mov	r7, r8
 800bc28:	106d      	asrs	r5, r5, #1
 800bc2a:	d00b      	beq.n	800bc44 <__pow5mult+0xa0>
 800bc2c:	6820      	ldr	r0, [r4, #0]
 800bc2e:	b938      	cbnz	r0, 800bc40 <__pow5mult+0x9c>
 800bc30:	4622      	mov	r2, r4
 800bc32:	4621      	mov	r1, r4
 800bc34:	4630      	mov	r0, r6
 800bc36:	f7ff ff0b 	bl	800ba50 <__multiply>
 800bc3a:	6020      	str	r0, [r4, #0]
 800bc3c:	f8c0 9000 	str.w	r9, [r0]
 800bc40:	4604      	mov	r4, r0
 800bc42:	e7e4      	b.n	800bc0e <__pow5mult+0x6a>
 800bc44:	4638      	mov	r0, r7
 800bc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc4a:	bf00      	nop
 800bc4c:	0800e8a0 	.word	0x0800e8a0
 800bc50:	0800e6cc 	.word	0x0800e6cc
 800bc54:	0800e74f 	.word	0x0800e74f

0800bc58 <__lshift>:
 800bc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	6849      	ldr	r1, [r1, #4]
 800bc60:	6923      	ldr	r3, [r4, #16]
 800bc62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc66:	68a3      	ldr	r3, [r4, #8]
 800bc68:	4607      	mov	r7, r0
 800bc6a:	4691      	mov	r9, r2
 800bc6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc70:	f108 0601 	add.w	r6, r8, #1
 800bc74:	42b3      	cmp	r3, r6
 800bc76:	db0b      	blt.n	800bc90 <__lshift+0x38>
 800bc78:	4638      	mov	r0, r7
 800bc7a:	f7ff fddb 	bl	800b834 <_Balloc>
 800bc7e:	4605      	mov	r5, r0
 800bc80:	b948      	cbnz	r0, 800bc96 <__lshift+0x3e>
 800bc82:	4602      	mov	r2, r0
 800bc84:	4b2a      	ldr	r3, [pc, #168]	; (800bd30 <__lshift+0xd8>)
 800bc86:	482b      	ldr	r0, [pc, #172]	; (800bd34 <__lshift+0xdc>)
 800bc88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc8c:	f000 fee4 	bl	800ca58 <__assert_func>
 800bc90:	3101      	adds	r1, #1
 800bc92:	005b      	lsls	r3, r3, #1
 800bc94:	e7ee      	b.n	800bc74 <__lshift+0x1c>
 800bc96:	2300      	movs	r3, #0
 800bc98:	f100 0114 	add.w	r1, r0, #20
 800bc9c:	f100 0210 	add.w	r2, r0, #16
 800bca0:	4618      	mov	r0, r3
 800bca2:	4553      	cmp	r3, sl
 800bca4:	db37      	blt.n	800bd16 <__lshift+0xbe>
 800bca6:	6920      	ldr	r0, [r4, #16]
 800bca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcac:	f104 0314 	add.w	r3, r4, #20
 800bcb0:	f019 091f 	ands.w	r9, r9, #31
 800bcb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bcbc:	d02f      	beq.n	800bd1e <__lshift+0xc6>
 800bcbe:	f1c9 0e20 	rsb	lr, r9, #32
 800bcc2:	468a      	mov	sl, r1
 800bcc4:	f04f 0c00 	mov.w	ip, #0
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	fa02 f209 	lsl.w	r2, r2, r9
 800bcce:	ea42 020c 	orr.w	r2, r2, ip
 800bcd2:	f84a 2b04 	str.w	r2, [sl], #4
 800bcd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcda:	4298      	cmp	r0, r3
 800bcdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bce0:	d8f2      	bhi.n	800bcc8 <__lshift+0x70>
 800bce2:	1b03      	subs	r3, r0, r4
 800bce4:	3b15      	subs	r3, #21
 800bce6:	f023 0303 	bic.w	r3, r3, #3
 800bcea:	3304      	adds	r3, #4
 800bcec:	f104 0215 	add.w	r2, r4, #21
 800bcf0:	4290      	cmp	r0, r2
 800bcf2:	bf38      	it	cc
 800bcf4:	2304      	movcc	r3, #4
 800bcf6:	f841 c003 	str.w	ip, [r1, r3]
 800bcfa:	f1bc 0f00 	cmp.w	ip, #0
 800bcfe:	d001      	beq.n	800bd04 <__lshift+0xac>
 800bd00:	f108 0602 	add.w	r6, r8, #2
 800bd04:	3e01      	subs	r6, #1
 800bd06:	4638      	mov	r0, r7
 800bd08:	612e      	str	r6, [r5, #16]
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	f7ff fdd2 	bl	800b8b4 <_Bfree>
 800bd10:	4628      	mov	r0, r5
 800bd12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd16:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	e7c1      	b.n	800bca2 <__lshift+0x4a>
 800bd1e:	3904      	subs	r1, #4
 800bd20:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd24:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd28:	4298      	cmp	r0, r3
 800bd2a:	d8f9      	bhi.n	800bd20 <__lshift+0xc8>
 800bd2c:	e7ea      	b.n	800bd04 <__lshift+0xac>
 800bd2e:	bf00      	nop
 800bd30:	0800e73e 	.word	0x0800e73e
 800bd34:	0800e74f 	.word	0x0800e74f

0800bd38 <__mcmp>:
 800bd38:	b530      	push	{r4, r5, lr}
 800bd3a:	6902      	ldr	r2, [r0, #16]
 800bd3c:	690c      	ldr	r4, [r1, #16]
 800bd3e:	1b12      	subs	r2, r2, r4
 800bd40:	d10e      	bne.n	800bd60 <__mcmp+0x28>
 800bd42:	f100 0314 	add.w	r3, r0, #20
 800bd46:	3114      	adds	r1, #20
 800bd48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd58:	42a5      	cmp	r5, r4
 800bd5a:	d003      	beq.n	800bd64 <__mcmp+0x2c>
 800bd5c:	d305      	bcc.n	800bd6a <__mcmp+0x32>
 800bd5e:	2201      	movs	r2, #1
 800bd60:	4610      	mov	r0, r2
 800bd62:	bd30      	pop	{r4, r5, pc}
 800bd64:	4283      	cmp	r3, r0
 800bd66:	d3f3      	bcc.n	800bd50 <__mcmp+0x18>
 800bd68:	e7fa      	b.n	800bd60 <__mcmp+0x28>
 800bd6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd6e:	e7f7      	b.n	800bd60 <__mcmp+0x28>

0800bd70 <__mdiff>:
 800bd70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	460c      	mov	r4, r1
 800bd76:	4606      	mov	r6, r0
 800bd78:	4611      	mov	r1, r2
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	4690      	mov	r8, r2
 800bd7e:	f7ff ffdb 	bl	800bd38 <__mcmp>
 800bd82:	1e05      	subs	r5, r0, #0
 800bd84:	d110      	bne.n	800bda8 <__mdiff+0x38>
 800bd86:	4629      	mov	r1, r5
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f7ff fd53 	bl	800b834 <_Balloc>
 800bd8e:	b930      	cbnz	r0, 800bd9e <__mdiff+0x2e>
 800bd90:	4b3a      	ldr	r3, [pc, #232]	; (800be7c <__mdiff+0x10c>)
 800bd92:	4602      	mov	r2, r0
 800bd94:	f240 2132 	movw	r1, #562	; 0x232
 800bd98:	4839      	ldr	r0, [pc, #228]	; (800be80 <__mdiff+0x110>)
 800bd9a:	f000 fe5d 	bl	800ca58 <__assert_func>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bda4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda8:	bfa4      	itt	ge
 800bdaa:	4643      	movge	r3, r8
 800bdac:	46a0      	movge	r8, r4
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bdb4:	bfa6      	itte	ge
 800bdb6:	461c      	movge	r4, r3
 800bdb8:	2500      	movge	r5, #0
 800bdba:	2501      	movlt	r5, #1
 800bdbc:	f7ff fd3a 	bl	800b834 <_Balloc>
 800bdc0:	b920      	cbnz	r0, 800bdcc <__mdiff+0x5c>
 800bdc2:	4b2e      	ldr	r3, [pc, #184]	; (800be7c <__mdiff+0x10c>)
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bdca:	e7e5      	b.n	800bd98 <__mdiff+0x28>
 800bdcc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bdd0:	6926      	ldr	r6, [r4, #16]
 800bdd2:	60c5      	str	r5, [r0, #12]
 800bdd4:	f104 0914 	add.w	r9, r4, #20
 800bdd8:	f108 0514 	add.w	r5, r8, #20
 800bddc:	f100 0e14 	add.w	lr, r0, #20
 800bde0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bde4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bde8:	f108 0210 	add.w	r2, r8, #16
 800bdec:	46f2      	mov	sl, lr
 800bdee:	2100      	movs	r1, #0
 800bdf0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bdf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bdf8:	fa1f f883 	uxth.w	r8, r3
 800bdfc:	fa11 f18b 	uxtah	r1, r1, fp
 800be00:	0c1b      	lsrs	r3, r3, #16
 800be02:	eba1 0808 	sub.w	r8, r1, r8
 800be06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be0e:	fa1f f888 	uxth.w	r8, r8
 800be12:	1419      	asrs	r1, r3, #16
 800be14:	454e      	cmp	r6, r9
 800be16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be1a:	f84a 3b04 	str.w	r3, [sl], #4
 800be1e:	d8e7      	bhi.n	800bdf0 <__mdiff+0x80>
 800be20:	1b33      	subs	r3, r6, r4
 800be22:	3b15      	subs	r3, #21
 800be24:	f023 0303 	bic.w	r3, r3, #3
 800be28:	3304      	adds	r3, #4
 800be2a:	3415      	adds	r4, #21
 800be2c:	42a6      	cmp	r6, r4
 800be2e:	bf38      	it	cc
 800be30:	2304      	movcc	r3, #4
 800be32:	441d      	add	r5, r3
 800be34:	4473      	add	r3, lr
 800be36:	469e      	mov	lr, r3
 800be38:	462e      	mov	r6, r5
 800be3a:	4566      	cmp	r6, ip
 800be3c:	d30e      	bcc.n	800be5c <__mdiff+0xec>
 800be3e:	f10c 0203 	add.w	r2, ip, #3
 800be42:	1b52      	subs	r2, r2, r5
 800be44:	f022 0203 	bic.w	r2, r2, #3
 800be48:	3d03      	subs	r5, #3
 800be4a:	45ac      	cmp	ip, r5
 800be4c:	bf38      	it	cc
 800be4e:	2200      	movcc	r2, #0
 800be50:	441a      	add	r2, r3
 800be52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be56:	b17b      	cbz	r3, 800be78 <__mdiff+0x108>
 800be58:	6107      	str	r7, [r0, #16]
 800be5a:	e7a3      	b.n	800bda4 <__mdiff+0x34>
 800be5c:	f856 8b04 	ldr.w	r8, [r6], #4
 800be60:	fa11 f288 	uxtah	r2, r1, r8
 800be64:	1414      	asrs	r4, r2, #16
 800be66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be6a:	b292      	uxth	r2, r2
 800be6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be70:	f84e 2b04 	str.w	r2, [lr], #4
 800be74:	1421      	asrs	r1, r4, #16
 800be76:	e7e0      	b.n	800be3a <__mdiff+0xca>
 800be78:	3f01      	subs	r7, #1
 800be7a:	e7ea      	b.n	800be52 <__mdiff+0xe2>
 800be7c:	0800e73e 	.word	0x0800e73e
 800be80:	0800e74f 	.word	0x0800e74f

0800be84 <__d2b>:
 800be84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be88:	4689      	mov	r9, r1
 800be8a:	2101      	movs	r1, #1
 800be8c:	ec57 6b10 	vmov	r6, r7, d0
 800be90:	4690      	mov	r8, r2
 800be92:	f7ff fccf 	bl	800b834 <_Balloc>
 800be96:	4604      	mov	r4, r0
 800be98:	b930      	cbnz	r0, 800bea8 <__d2b+0x24>
 800be9a:	4602      	mov	r2, r0
 800be9c:	4b25      	ldr	r3, [pc, #148]	; (800bf34 <__d2b+0xb0>)
 800be9e:	4826      	ldr	r0, [pc, #152]	; (800bf38 <__d2b+0xb4>)
 800bea0:	f240 310a 	movw	r1, #778	; 0x30a
 800bea4:	f000 fdd8 	bl	800ca58 <__assert_func>
 800bea8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800beac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800beb0:	bb35      	cbnz	r5, 800bf00 <__d2b+0x7c>
 800beb2:	2e00      	cmp	r6, #0
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	d028      	beq.n	800bf0a <__d2b+0x86>
 800beb8:	4668      	mov	r0, sp
 800beba:	9600      	str	r6, [sp, #0]
 800bebc:	f7ff fd82 	bl	800b9c4 <__lo0bits>
 800bec0:	9900      	ldr	r1, [sp, #0]
 800bec2:	b300      	cbz	r0, 800bf06 <__d2b+0x82>
 800bec4:	9a01      	ldr	r2, [sp, #4]
 800bec6:	f1c0 0320 	rsb	r3, r0, #32
 800beca:	fa02 f303 	lsl.w	r3, r2, r3
 800bece:	430b      	orrs	r3, r1
 800bed0:	40c2      	lsrs	r2, r0
 800bed2:	6163      	str	r3, [r4, #20]
 800bed4:	9201      	str	r2, [sp, #4]
 800bed6:	9b01      	ldr	r3, [sp, #4]
 800bed8:	61a3      	str	r3, [r4, #24]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	bf14      	ite	ne
 800bede:	2202      	movne	r2, #2
 800bee0:	2201      	moveq	r2, #1
 800bee2:	6122      	str	r2, [r4, #16]
 800bee4:	b1d5      	cbz	r5, 800bf1c <__d2b+0x98>
 800bee6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800beea:	4405      	add	r5, r0
 800beec:	f8c9 5000 	str.w	r5, [r9]
 800bef0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bef4:	f8c8 0000 	str.w	r0, [r8]
 800bef8:	4620      	mov	r0, r4
 800befa:	b003      	add	sp, #12
 800befc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf04:	e7d5      	b.n	800beb2 <__d2b+0x2e>
 800bf06:	6161      	str	r1, [r4, #20]
 800bf08:	e7e5      	b.n	800bed6 <__d2b+0x52>
 800bf0a:	a801      	add	r0, sp, #4
 800bf0c:	f7ff fd5a 	bl	800b9c4 <__lo0bits>
 800bf10:	9b01      	ldr	r3, [sp, #4]
 800bf12:	6163      	str	r3, [r4, #20]
 800bf14:	2201      	movs	r2, #1
 800bf16:	6122      	str	r2, [r4, #16]
 800bf18:	3020      	adds	r0, #32
 800bf1a:	e7e3      	b.n	800bee4 <__d2b+0x60>
 800bf1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf24:	f8c9 0000 	str.w	r0, [r9]
 800bf28:	6918      	ldr	r0, [r3, #16]
 800bf2a:	f7ff fd2b 	bl	800b984 <__hi0bits>
 800bf2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf32:	e7df      	b.n	800bef4 <__d2b+0x70>
 800bf34:	0800e73e 	.word	0x0800e73e
 800bf38:	0800e74f 	.word	0x0800e74f

0800bf3c <_calloc_r>:
 800bf3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf3e:	fba1 2402 	umull	r2, r4, r1, r2
 800bf42:	b94c      	cbnz	r4, 800bf58 <_calloc_r+0x1c>
 800bf44:	4611      	mov	r1, r2
 800bf46:	9201      	str	r2, [sp, #4]
 800bf48:	f7fd ff72 	bl	8009e30 <_malloc_r>
 800bf4c:	9a01      	ldr	r2, [sp, #4]
 800bf4e:	4605      	mov	r5, r0
 800bf50:	b930      	cbnz	r0, 800bf60 <_calloc_r+0x24>
 800bf52:	4628      	mov	r0, r5
 800bf54:	b003      	add	sp, #12
 800bf56:	bd30      	pop	{r4, r5, pc}
 800bf58:	220c      	movs	r2, #12
 800bf5a:	6002      	str	r2, [r0, #0]
 800bf5c:	2500      	movs	r5, #0
 800bf5e:	e7f8      	b.n	800bf52 <_calloc_r+0x16>
 800bf60:	4621      	mov	r1, r4
 800bf62:	f7fd fef1 	bl	8009d48 <memset>
 800bf66:	e7f4      	b.n	800bf52 <_calloc_r+0x16>

0800bf68 <__ssputs_r>:
 800bf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf6c:	688e      	ldr	r6, [r1, #8]
 800bf6e:	429e      	cmp	r6, r3
 800bf70:	4682      	mov	sl, r0
 800bf72:	460c      	mov	r4, r1
 800bf74:	4690      	mov	r8, r2
 800bf76:	461f      	mov	r7, r3
 800bf78:	d838      	bhi.n	800bfec <__ssputs_r+0x84>
 800bf7a:	898a      	ldrh	r2, [r1, #12]
 800bf7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf80:	d032      	beq.n	800bfe8 <__ssputs_r+0x80>
 800bf82:	6825      	ldr	r5, [r4, #0]
 800bf84:	6909      	ldr	r1, [r1, #16]
 800bf86:	eba5 0901 	sub.w	r9, r5, r1
 800bf8a:	6965      	ldr	r5, [r4, #20]
 800bf8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf94:	3301      	adds	r3, #1
 800bf96:	444b      	add	r3, r9
 800bf98:	106d      	asrs	r5, r5, #1
 800bf9a:	429d      	cmp	r5, r3
 800bf9c:	bf38      	it	cc
 800bf9e:	461d      	movcc	r5, r3
 800bfa0:	0553      	lsls	r3, r2, #21
 800bfa2:	d531      	bpl.n	800c008 <__ssputs_r+0xa0>
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	f7fd ff43 	bl	8009e30 <_malloc_r>
 800bfaa:	4606      	mov	r6, r0
 800bfac:	b950      	cbnz	r0, 800bfc4 <__ssputs_r+0x5c>
 800bfae:	230c      	movs	r3, #12
 800bfb0:	f8ca 3000 	str.w	r3, [sl]
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfba:	81a3      	strh	r3, [r4, #12]
 800bfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc4:	6921      	ldr	r1, [r4, #16]
 800bfc6:	464a      	mov	r2, r9
 800bfc8:	f7ff fc1a 	bl	800b800 <memcpy>
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfd6:	81a3      	strh	r3, [r4, #12]
 800bfd8:	6126      	str	r6, [r4, #16]
 800bfda:	6165      	str	r5, [r4, #20]
 800bfdc:	444e      	add	r6, r9
 800bfde:	eba5 0509 	sub.w	r5, r5, r9
 800bfe2:	6026      	str	r6, [r4, #0]
 800bfe4:	60a5      	str	r5, [r4, #8]
 800bfe6:	463e      	mov	r6, r7
 800bfe8:	42be      	cmp	r6, r7
 800bfea:	d900      	bls.n	800bfee <__ssputs_r+0x86>
 800bfec:	463e      	mov	r6, r7
 800bfee:	6820      	ldr	r0, [r4, #0]
 800bff0:	4632      	mov	r2, r6
 800bff2:	4641      	mov	r1, r8
 800bff4:	f000 ff2c 	bl	800ce50 <memmove>
 800bff8:	68a3      	ldr	r3, [r4, #8]
 800bffa:	1b9b      	subs	r3, r3, r6
 800bffc:	60a3      	str	r3, [r4, #8]
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	4433      	add	r3, r6
 800c002:	6023      	str	r3, [r4, #0]
 800c004:	2000      	movs	r0, #0
 800c006:	e7db      	b.n	800bfc0 <__ssputs_r+0x58>
 800c008:	462a      	mov	r2, r5
 800c00a:	f000 ff3b 	bl	800ce84 <_realloc_r>
 800c00e:	4606      	mov	r6, r0
 800c010:	2800      	cmp	r0, #0
 800c012:	d1e1      	bne.n	800bfd8 <__ssputs_r+0x70>
 800c014:	6921      	ldr	r1, [r4, #16]
 800c016:	4650      	mov	r0, sl
 800c018:	f7fd fe9e 	bl	8009d58 <_free_r>
 800c01c:	e7c7      	b.n	800bfae <__ssputs_r+0x46>
	...

0800c020 <_svfiprintf_r>:
 800c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	4698      	mov	r8, r3
 800c026:	898b      	ldrh	r3, [r1, #12]
 800c028:	061b      	lsls	r3, r3, #24
 800c02a:	b09d      	sub	sp, #116	; 0x74
 800c02c:	4607      	mov	r7, r0
 800c02e:	460d      	mov	r5, r1
 800c030:	4614      	mov	r4, r2
 800c032:	d50e      	bpl.n	800c052 <_svfiprintf_r+0x32>
 800c034:	690b      	ldr	r3, [r1, #16]
 800c036:	b963      	cbnz	r3, 800c052 <_svfiprintf_r+0x32>
 800c038:	2140      	movs	r1, #64	; 0x40
 800c03a:	f7fd fef9 	bl	8009e30 <_malloc_r>
 800c03e:	6028      	str	r0, [r5, #0]
 800c040:	6128      	str	r0, [r5, #16]
 800c042:	b920      	cbnz	r0, 800c04e <_svfiprintf_r+0x2e>
 800c044:	230c      	movs	r3, #12
 800c046:	603b      	str	r3, [r7, #0]
 800c048:	f04f 30ff 	mov.w	r0, #4294967295
 800c04c:	e0d1      	b.n	800c1f2 <_svfiprintf_r+0x1d2>
 800c04e:	2340      	movs	r3, #64	; 0x40
 800c050:	616b      	str	r3, [r5, #20]
 800c052:	2300      	movs	r3, #0
 800c054:	9309      	str	r3, [sp, #36]	; 0x24
 800c056:	2320      	movs	r3, #32
 800c058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c060:	2330      	movs	r3, #48	; 0x30
 800c062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c20c <_svfiprintf_r+0x1ec>
 800c066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c06a:	f04f 0901 	mov.w	r9, #1
 800c06e:	4623      	mov	r3, r4
 800c070:	469a      	mov	sl, r3
 800c072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c076:	b10a      	cbz	r2, 800c07c <_svfiprintf_r+0x5c>
 800c078:	2a25      	cmp	r2, #37	; 0x25
 800c07a:	d1f9      	bne.n	800c070 <_svfiprintf_r+0x50>
 800c07c:	ebba 0b04 	subs.w	fp, sl, r4
 800c080:	d00b      	beq.n	800c09a <_svfiprintf_r+0x7a>
 800c082:	465b      	mov	r3, fp
 800c084:	4622      	mov	r2, r4
 800c086:	4629      	mov	r1, r5
 800c088:	4638      	mov	r0, r7
 800c08a:	f7ff ff6d 	bl	800bf68 <__ssputs_r>
 800c08e:	3001      	adds	r0, #1
 800c090:	f000 80aa 	beq.w	800c1e8 <_svfiprintf_r+0x1c8>
 800c094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c096:	445a      	add	r2, fp
 800c098:	9209      	str	r2, [sp, #36]	; 0x24
 800c09a:	f89a 3000 	ldrb.w	r3, [sl]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 80a2 	beq.w	800c1e8 <_svfiprintf_r+0x1c8>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0ae:	f10a 0a01 	add.w	sl, sl, #1
 800c0b2:	9304      	str	r3, [sp, #16]
 800c0b4:	9307      	str	r3, [sp, #28]
 800c0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800c0bc:	4654      	mov	r4, sl
 800c0be:	2205      	movs	r2, #5
 800c0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c4:	4851      	ldr	r0, [pc, #324]	; (800c20c <_svfiprintf_r+0x1ec>)
 800c0c6:	f7f4 f8a3 	bl	8000210 <memchr>
 800c0ca:	9a04      	ldr	r2, [sp, #16]
 800c0cc:	b9d8      	cbnz	r0, 800c106 <_svfiprintf_r+0xe6>
 800c0ce:	06d0      	lsls	r0, r2, #27
 800c0d0:	bf44      	itt	mi
 800c0d2:	2320      	movmi	r3, #32
 800c0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0d8:	0711      	lsls	r1, r2, #28
 800c0da:	bf44      	itt	mi
 800c0dc:	232b      	movmi	r3, #43	; 0x2b
 800c0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c0e8:	d015      	beq.n	800c116 <_svfiprintf_r+0xf6>
 800c0ea:	9a07      	ldr	r2, [sp, #28]
 800c0ec:	4654      	mov	r4, sl
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	f04f 0c0a 	mov.w	ip, #10
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0fa:	3b30      	subs	r3, #48	; 0x30
 800c0fc:	2b09      	cmp	r3, #9
 800c0fe:	d94e      	bls.n	800c19e <_svfiprintf_r+0x17e>
 800c100:	b1b0      	cbz	r0, 800c130 <_svfiprintf_r+0x110>
 800c102:	9207      	str	r2, [sp, #28]
 800c104:	e014      	b.n	800c130 <_svfiprintf_r+0x110>
 800c106:	eba0 0308 	sub.w	r3, r0, r8
 800c10a:	fa09 f303 	lsl.w	r3, r9, r3
 800c10e:	4313      	orrs	r3, r2
 800c110:	9304      	str	r3, [sp, #16]
 800c112:	46a2      	mov	sl, r4
 800c114:	e7d2      	b.n	800c0bc <_svfiprintf_r+0x9c>
 800c116:	9b03      	ldr	r3, [sp, #12]
 800c118:	1d19      	adds	r1, r3, #4
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	9103      	str	r1, [sp, #12]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	bfbb      	ittet	lt
 800c122:	425b      	neglt	r3, r3
 800c124:	f042 0202 	orrlt.w	r2, r2, #2
 800c128:	9307      	strge	r3, [sp, #28]
 800c12a:	9307      	strlt	r3, [sp, #28]
 800c12c:	bfb8      	it	lt
 800c12e:	9204      	strlt	r2, [sp, #16]
 800c130:	7823      	ldrb	r3, [r4, #0]
 800c132:	2b2e      	cmp	r3, #46	; 0x2e
 800c134:	d10c      	bne.n	800c150 <_svfiprintf_r+0x130>
 800c136:	7863      	ldrb	r3, [r4, #1]
 800c138:	2b2a      	cmp	r3, #42	; 0x2a
 800c13a:	d135      	bne.n	800c1a8 <_svfiprintf_r+0x188>
 800c13c:	9b03      	ldr	r3, [sp, #12]
 800c13e:	1d1a      	adds	r2, r3, #4
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	9203      	str	r2, [sp, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	bfb8      	it	lt
 800c148:	f04f 33ff 	movlt.w	r3, #4294967295
 800c14c:	3402      	adds	r4, #2
 800c14e:	9305      	str	r3, [sp, #20]
 800c150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c21c <_svfiprintf_r+0x1fc>
 800c154:	7821      	ldrb	r1, [r4, #0]
 800c156:	2203      	movs	r2, #3
 800c158:	4650      	mov	r0, sl
 800c15a:	f7f4 f859 	bl	8000210 <memchr>
 800c15e:	b140      	cbz	r0, 800c172 <_svfiprintf_r+0x152>
 800c160:	2340      	movs	r3, #64	; 0x40
 800c162:	eba0 000a 	sub.w	r0, r0, sl
 800c166:	fa03 f000 	lsl.w	r0, r3, r0
 800c16a:	9b04      	ldr	r3, [sp, #16]
 800c16c:	4303      	orrs	r3, r0
 800c16e:	3401      	adds	r4, #1
 800c170:	9304      	str	r3, [sp, #16]
 800c172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c176:	4826      	ldr	r0, [pc, #152]	; (800c210 <_svfiprintf_r+0x1f0>)
 800c178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c17c:	2206      	movs	r2, #6
 800c17e:	f7f4 f847 	bl	8000210 <memchr>
 800c182:	2800      	cmp	r0, #0
 800c184:	d038      	beq.n	800c1f8 <_svfiprintf_r+0x1d8>
 800c186:	4b23      	ldr	r3, [pc, #140]	; (800c214 <_svfiprintf_r+0x1f4>)
 800c188:	bb1b      	cbnz	r3, 800c1d2 <_svfiprintf_r+0x1b2>
 800c18a:	9b03      	ldr	r3, [sp, #12]
 800c18c:	3307      	adds	r3, #7
 800c18e:	f023 0307 	bic.w	r3, r3, #7
 800c192:	3308      	adds	r3, #8
 800c194:	9303      	str	r3, [sp, #12]
 800c196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c198:	4433      	add	r3, r6
 800c19a:	9309      	str	r3, [sp, #36]	; 0x24
 800c19c:	e767      	b.n	800c06e <_svfiprintf_r+0x4e>
 800c19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	2001      	movs	r0, #1
 800c1a6:	e7a5      	b.n	800c0f4 <_svfiprintf_r+0xd4>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	3401      	adds	r4, #1
 800c1ac:	9305      	str	r3, [sp, #20]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	f04f 0c0a 	mov.w	ip, #10
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ba:	3a30      	subs	r2, #48	; 0x30
 800c1bc:	2a09      	cmp	r2, #9
 800c1be:	d903      	bls.n	800c1c8 <_svfiprintf_r+0x1a8>
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d0c5      	beq.n	800c150 <_svfiprintf_r+0x130>
 800c1c4:	9105      	str	r1, [sp, #20]
 800c1c6:	e7c3      	b.n	800c150 <_svfiprintf_r+0x130>
 800c1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e7f0      	b.n	800c1b4 <_svfiprintf_r+0x194>
 800c1d2:	ab03      	add	r3, sp, #12
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	462a      	mov	r2, r5
 800c1d8:	4b0f      	ldr	r3, [pc, #60]	; (800c218 <_svfiprintf_r+0x1f8>)
 800c1da:	a904      	add	r1, sp, #16
 800c1dc:	4638      	mov	r0, r7
 800c1de:	f7fd ff3b 	bl	800a058 <_printf_float>
 800c1e2:	1c42      	adds	r2, r0, #1
 800c1e4:	4606      	mov	r6, r0
 800c1e6:	d1d6      	bne.n	800c196 <_svfiprintf_r+0x176>
 800c1e8:	89ab      	ldrh	r3, [r5, #12]
 800c1ea:	065b      	lsls	r3, r3, #25
 800c1ec:	f53f af2c 	bmi.w	800c048 <_svfiprintf_r+0x28>
 800c1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1f2:	b01d      	add	sp, #116	; 0x74
 800c1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f8:	ab03      	add	r3, sp, #12
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	462a      	mov	r2, r5
 800c1fe:	4b06      	ldr	r3, [pc, #24]	; (800c218 <_svfiprintf_r+0x1f8>)
 800c200:	a904      	add	r1, sp, #16
 800c202:	4638      	mov	r0, r7
 800c204:	f7fe f9cc 	bl	800a5a0 <_printf_i>
 800c208:	e7eb      	b.n	800c1e2 <_svfiprintf_r+0x1c2>
 800c20a:	bf00      	nop
 800c20c:	0800e8ac 	.word	0x0800e8ac
 800c210:	0800e8b6 	.word	0x0800e8b6
 800c214:	0800a059 	.word	0x0800a059
 800c218:	0800bf69 	.word	0x0800bf69
 800c21c:	0800e8b2 	.word	0x0800e8b2

0800c220 <_sungetc_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	1c4b      	adds	r3, r1, #1
 800c224:	4614      	mov	r4, r2
 800c226:	d103      	bne.n	800c230 <_sungetc_r+0x10>
 800c228:	f04f 35ff 	mov.w	r5, #4294967295
 800c22c:	4628      	mov	r0, r5
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	8993      	ldrh	r3, [r2, #12]
 800c232:	f023 0320 	bic.w	r3, r3, #32
 800c236:	8193      	strh	r3, [r2, #12]
 800c238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c23a:	6852      	ldr	r2, [r2, #4]
 800c23c:	b2cd      	uxtb	r5, r1
 800c23e:	b18b      	cbz	r3, 800c264 <_sungetc_r+0x44>
 800c240:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c242:	4293      	cmp	r3, r2
 800c244:	dd08      	ble.n	800c258 <_sungetc_r+0x38>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	1e5a      	subs	r2, r3, #1
 800c24a:	6022      	str	r2, [r4, #0]
 800c24c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c250:	6863      	ldr	r3, [r4, #4]
 800c252:	3301      	adds	r3, #1
 800c254:	6063      	str	r3, [r4, #4]
 800c256:	e7e9      	b.n	800c22c <_sungetc_r+0xc>
 800c258:	4621      	mov	r1, r4
 800c25a:	f000 fbc3 	bl	800c9e4 <__submore>
 800c25e:	2800      	cmp	r0, #0
 800c260:	d0f1      	beq.n	800c246 <_sungetc_r+0x26>
 800c262:	e7e1      	b.n	800c228 <_sungetc_r+0x8>
 800c264:	6921      	ldr	r1, [r4, #16]
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	b151      	cbz	r1, 800c280 <_sungetc_r+0x60>
 800c26a:	4299      	cmp	r1, r3
 800c26c:	d208      	bcs.n	800c280 <_sungetc_r+0x60>
 800c26e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c272:	42a9      	cmp	r1, r5
 800c274:	d104      	bne.n	800c280 <_sungetc_r+0x60>
 800c276:	3b01      	subs	r3, #1
 800c278:	3201      	adds	r2, #1
 800c27a:	6023      	str	r3, [r4, #0]
 800c27c:	6062      	str	r2, [r4, #4]
 800c27e:	e7d5      	b.n	800c22c <_sungetc_r+0xc>
 800c280:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c288:	6363      	str	r3, [r4, #52]	; 0x34
 800c28a:	2303      	movs	r3, #3
 800c28c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c28e:	4623      	mov	r3, r4
 800c290:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	2301      	movs	r3, #1
 800c298:	e7dc      	b.n	800c254 <_sungetc_r+0x34>

0800c29a <__ssrefill_r>:
 800c29a:	b510      	push	{r4, lr}
 800c29c:	460c      	mov	r4, r1
 800c29e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c2a0:	b169      	cbz	r1, 800c2be <__ssrefill_r+0x24>
 800c2a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2a6:	4299      	cmp	r1, r3
 800c2a8:	d001      	beq.n	800c2ae <__ssrefill_r+0x14>
 800c2aa:	f7fd fd55 	bl	8009d58 <_free_r>
 800c2ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2b0:	6063      	str	r3, [r4, #4]
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	6360      	str	r0, [r4, #52]	; 0x34
 800c2b6:	b113      	cbz	r3, 800c2be <__ssrefill_r+0x24>
 800c2b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c2ba:	6023      	str	r3, [r4, #0]
 800c2bc:	bd10      	pop	{r4, pc}
 800c2be:	6923      	ldr	r3, [r4, #16]
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	6063      	str	r3, [r4, #4]
 800c2c6:	89a3      	ldrh	r3, [r4, #12]
 800c2c8:	f043 0320 	orr.w	r3, r3, #32
 800c2cc:	81a3      	strh	r3, [r4, #12]
 800c2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d2:	e7f3      	b.n	800c2bc <__ssrefill_r+0x22>

0800c2d4 <__ssvfiscanf_r>:
 800c2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d8:	460c      	mov	r4, r1
 800c2da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c2de:	2100      	movs	r1, #0
 800c2e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c2e4:	49a6      	ldr	r1, [pc, #664]	; (800c580 <__ssvfiscanf_r+0x2ac>)
 800c2e6:	91a0      	str	r1, [sp, #640]	; 0x280
 800c2e8:	f10d 0804 	add.w	r8, sp, #4
 800c2ec:	49a5      	ldr	r1, [pc, #660]	; (800c584 <__ssvfiscanf_r+0x2b0>)
 800c2ee:	4fa6      	ldr	r7, [pc, #664]	; (800c588 <__ssvfiscanf_r+0x2b4>)
 800c2f0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c58c <__ssvfiscanf_r+0x2b8>
 800c2f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	91a1      	str	r1, [sp, #644]	; 0x284
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	7813      	ldrb	r3, [r2, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	f000 815a 	beq.w	800c5ba <__ssvfiscanf_r+0x2e6>
 800c306:	5dd9      	ldrb	r1, [r3, r7]
 800c308:	f011 0108 	ands.w	r1, r1, #8
 800c30c:	f102 0501 	add.w	r5, r2, #1
 800c310:	d019      	beq.n	800c346 <__ssvfiscanf_r+0x72>
 800c312:	6863      	ldr	r3, [r4, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	dd0f      	ble.n	800c338 <__ssvfiscanf_r+0x64>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	781a      	ldrb	r2, [r3, #0]
 800c31c:	5cba      	ldrb	r2, [r7, r2]
 800c31e:	0712      	lsls	r2, r2, #28
 800c320:	d401      	bmi.n	800c326 <__ssvfiscanf_r+0x52>
 800c322:	462a      	mov	r2, r5
 800c324:	e7eb      	b.n	800c2fe <__ssvfiscanf_r+0x2a>
 800c326:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c328:	3201      	adds	r2, #1
 800c32a:	9245      	str	r2, [sp, #276]	; 0x114
 800c32c:	6862      	ldr	r2, [r4, #4]
 800c32e:	3301      	adds	r3, #1
 800c330:	3a01      	subs	r2, #1
 800c332:	6062      	str	r2, [r4, #4]
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	e7ec      	b.n	800c312 <__ssvfiscanf_r+0x3e>
 800c338:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c33a:	4621      	mov	r1, r4
 800c33c:	4630      	mov	r0, r6
 800c33e:	4798      	blx	r3
 800c340:	2800      	cmp	r0, #0
 800c342:	d0e9      	beq.n	800c318 <__ssvfiscanf_r+0x44>
 800c344:	e7ed      	b.n	800c322 <__ssvfiscanf_r+0x4e>
 800c346:	2b25      	cmp	r3, #37	; 0x25
 800c348:	d012      	beq.n	800c370 <__ssvfiscanf_r+0x9c>
 800c34a:	469a      	mov	sl, r3
 800c34c:	6863      	ldr	r3, [r4, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f340 8091 	ble.w	800c476 <__ssvfiscanf_r+0x1a2>
 800c354:	6822      	ldr	r2, [r4, #0]
 800c356:	7813      	ldrb	r3, [r2, #0]
 800c358:	4553      	cmp	r3, sl
 800c35a:	f040 812e 	bne.w	800c5ba <__ssvfiscanf_r+0x2e6>
 800c35e:	6863      	ldr	r3, [r4, #4]
 800c360:	3b01      	subs	r3, #1
 800c362:	6063      	str	r3, [r4, #4]
 800c364:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c366:	3201      	adds	r2, #1
 800c368:	3301      	adds	r3, #1
 800c36a:	6022      	str	r2, [r4, #0]
 800c36c:	9345      	str	r3, [sp, #276]	; 0x114
 800c36e:	e7d8      	b.n	800c322 <__ssvfiscanf_r+0x4e>
 800c370:	9141      	str	r1, [sp, #260]	; 0x104
 800c372:	9143      	str	r1, [sp, #268]	; 0x10c
 800c374:	7853      	ldrb	r3, [r2, #1]
 800c376:	2b2a      	cmp	r3, #42	; 0x2a
 800c378:	bf02      	ittt	eq
 800c37a:	2310      	moveq	r3, #16
 800c37c:	1c95      	addeq	r5, r2, #2
 800c37e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c380:	220a      	movs	r2, #10
 800c382:	46aa      	mov	sl, r5
 800c384:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c388:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c38c:	2b09      	cmp	r3, #9
 800c38e:	d91d      	bls.n	800c3cc <__ssvfiscanf_r+0xf8>
 800c390:	487e      	ldr	r0, [pc, #504]	; (800c58c <__ssvfiscanf_r+0x2b8>)
 800c392:	2203      	movs	r2, #3
 800c394:	f7f3 ff3c 	bl	8000210 <memchr>
 800c398:	b140      	cbz	r0, 800c3ac <__ssvfiscanf_r+0xd8>
 800c39a:	2301      	movs	r3, #1
 800c39c:	eba0 0009 	sub.w	r0, r0, r9
 800c3a0:	fa03 f000 	lsl.w	r0, r3, r0
 800c3a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c3a6:	4318      	orrs	r0, r3
 800c3a8:	9041      	str	r0, [sp, #260]	; 0x104
 800c3aa:	4655      	mov	r5, sl
 800c3ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c3b0:	2b78      	cmp	r3, #120	; 0x78
 800c3b2:	d806      	bhi.n	800c3c2 <__ssvfiscanf_r+0xee>
 800c3b4:	2b57      	cmp	r3, #87	; 0x57
 800c3b6:	d810      	bhi.n	800c3da <__ssvfiscanf_r+0x106>
 800c3b8:	2b25      	cmp	r3, #37	; 0x25
 800c3ba:	d0c6      	beq.n	800c34a <__ssvfiscanf_r+0x76>
 800c3bc:	d856      	bhi.n	800c46c <__ssvfiscanf_r+0x198>
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d064      	beq.n	800c48c <__ssvfiscanf_r+0x1b8>
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	9347      	str	r3, [sp, #284]	; 0x11c
 800c3c6:	230a      	movs	r3, #10
 800c3c8:	9342      	str	r3, [sp, #264]	; 0x108
 800c3ca:	e071      	b.n	800c4b0 <__ssvfiscanf_r+0x1dc>
 800c3cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c3ce:	fb02 1103 	mla	r1, r2, r3, r1
 800c3d2:	3930      	subs	r1, #48	; 0x30
 800c3d4:	9143      	str	r1, [sp, #268]	; 0x10c
 800c3d6:	4655      	mov	r5, sl
 800c3d8:	e7d3      	b.n	800c382 <__ssvfiscanf_r+0xae>
 800c3da:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c3de:	2a20      	cmp	r2, #32
 800c3e0:	d8ef      	bhi.n	800c3c2 <__ssvfiscanf_r+0xee>
 800c3e2:	a101      	add	r1, pc, #4	; (adr r1, 800c3e8 <__ssvfiscanf_r+0x114>)
 800c3e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c3e8:	0800c49b 	.word	0x0800c49b
 800c3ec:	0800c3c3 	.word	0x0800c3c3
 800c3f0:	0800c3c3 	.word	0x0800c3c3
 800c3f4:	0800c4f9 	.word	0x0800c4f9
 800c3f8:	0800c3c3 	.word	0x0800c3c3
 800c3fc:	0800c3c3 	.word	0x0800c3c3
 800c400:	0800c3c3 	.word	0x0800c3c3
 800c404:	0800c3c3 	.word	0x0800c3c3
 800c408:	0800c3c3 	.word	0x0800c3c3
 800c40c:	0800c3c3 	.word	0x0800c3c3
 800c410:	0800c3c3 	.word	0x0800c3c3
 800c414:	0800c50f 	.word	0x0800c50f
 800c418:	0800c4e5 	.word	0x0800c4e5
 800c41c:	0800c473 	.word	0x0800c473
 800c420:	0800c473 	.word	0x0800c473
 800c424:	0800c473 	.word	0x0800c473
 800c428:	0800c3c3 	.word	0x0800c3c3
 800c42c:	0800c4e9 	.word	0x0800c4e9
 800c430:	0800c3c3 	.word	0x0800c3c3
 800c434:	0800c3c3 	.word	0x0800c3c3
 800c438:	0800c3c3 	.word	0x0800c3c3
 800c43c:	0800c3c3 	.word	0x0800c3c3
 800c440:	0800c51f 	.word	0x0800c51f
 800c444:	0800c4f1 	.word	0x0800c4f1
 800c448:	0800c493 	.word	0x0800c493
 800c44c:	0800c3c3 	.word	0x0800c3c3
 800c450:	0800c3c3 	.word	0x0800c3c3
 800c454:	0800c51b 	.word	0x0800c51b
 800c458:	0800c3c3 	.word	0x0800c3c3
 800c45c:	0800c4e5 	.word	0x0800c4e5
 800c460:	0800c3c3 	.word	0x0800c3c3
 800c464:	0800c3c3 	.word	0x0800c3c3
 800c468:	0800c49b 	.word	0x0800c49b
 800c46c:	3b45      	subs	r3, #69	; 0x45
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d8a7      	bhi.n	800c3c2 <__ssvfiscanf_r+0xee>
 800c472:	2305      	movs	r3, #5
 800c474:	e01b      	b.n	800c4ae <__ssvfiscanf_r+0x1da>
 800c476:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c478:	4621      	mov	r1, r4
 800c47a:	4630      	mov	r0, r6
 800c47c:	4798      	blx	r3
 800c47e:	2800      	cmp	r0, #0
 800c480:	f43f af68 	beq.w	800c354 <__ssvfiscanf_r+0x80>
 800c484:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c486:	2800      	cmp	r0, #0
 800c488:	f040 808d 	bne.w	800c5a6 <__ssvfiscanf_r+0x2d2>
 800c48c:	f04f 30ff 	mov.w	r0, #4294967295
 800c490:	e08f      	b.n	800c5b2 <__ssvfiscanf_r+0x2de>
 800c492:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c494:	f042 0220 	orr.w	r2, r2, #32
 800c498:	9241      	str	r2, [sp, #260]	; 0x104
 800c49a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c49c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4a0:	9241      	str	r2, [sp, #260]	; 0x104
 800c4a2:	2210      	movs	r2, #16
 800c4a4:	2b6f      	cmp	r3, #111	; 0x6f
 800c4a6:	9242      	str	r2, [sp, #264]	; 0x108
 800c4a8:	bf34      	ite	cc
 800c4aa:	2303      	movcc	r3, #3
 800c4ac:	2304      	movcs	r3, #4
 800c4ae:	9347      	str	r3, [sp, #284]	; 0x11c
 800c4b0:	6863      	ldr	r3, [r4, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	dd42      	ble.n	800c53c <__ssvfiscanf_r+0x268>
 800c4b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c4b8:	0659      	lsls	r1, r3, #25
 800c4ba:	d404      	bmi.n	800c4c6 <__ssvfiscanf_r+0x1f2>
 800c4bc:	6823      	ldr	r3, [r4, #0]
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	5cba      	ldrb	r2, [r7, r2]
 800c4c2:	0712      	lsls	r2, r2, #28
 800c4c4:	d441      	bmi.n	800c54a <__ssvfiscanf_r+0x276>
 800c4c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	dc50      	bgt.n	800c56e <__ssvfiscanf_r+0x29a>
 800c4cc:	466b      	mov	r3, sp
 800c4ce:	4622      	mov	r2, r4
 800c4d0:	a941      	add	r1, sp, #260	; 0x104
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f000 f876 	bl	800c5c4 <_scanf_chars>
 800c4d8:	2801      	cmp	r0, #1
 800c4da:	d06e      	beq.n	800c5ba <__ssvfiscanf_r+0x2e6>
 800c4dc:	2802      	cmp	r0, #2
 800c4de:	f47f af20 	bne.w	800c322 <__ssvfiscanf_r+0x4e>
 800c4e2:	e7cf      	b.n	800c484 <__ssvfiscanf_r+0x1b0>
 800c4e4:	220a      	movs	r2, #10
 800c4e6:	e7dd      	b.n	800c4a4 <__ssvfiscanf_r+0x1d0>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	9342      	str	r3, [sp, #264]	; 0x108
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e7de      	b.n	800c4ae <__ssvfiscanf_r+0x1da>
 800c4f0:	2308      	movs	r3, #8
 800c4f2:	9342      	str	r3, [sp, #264]	; 0x108
 800c4f4:	2304      	movs	r3, #4
 800c4f6:	e7da      	b.n	800c4ae <__ssvfiscanf_r+0x1da>
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	4640      	mov	r0, r8
 800c4fc:	f000 f9c6 	bl	800c88c <__sccl>
 800c500:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c506:	9341      	str	r3, [sp, #260]	; 0x104
 800c508:	4605      	mov	r5, r0
 800c50a:	2301      	movs	r3, #1
 800c50c:	e7cf      	b.n	800c4ae <__ssvfiscanf_r+0x1da>
 800c50e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c514:	9341      	str	r3, [sp, #260]	; 0x104
 800c516:	2300      	movs	r3, #0
 800c518:	e7c9      	b.n	800c4ae <__ssvfiscanf_r+0x1da>
 800c51a:	2302      	movs	r3, #2
 800c51c:	e7c7      	b.n	800c4ae <__ssvfiscanf_r+0x1da>
 800c51e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c520:	06c3      	lsls	r3, r0, #27
 800c522:	f53f aefe 	bmi.w	800c322 <__ssvfiscanf_r+0x4e>
 800c526:	9b00      	ldr	r3, [sp, #0]
 800c528:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c52a:	1d19      	adds	r1, r3, #4
 800c52c:	9100      	str	r1, [sp, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f010 0f01 	tst.w	r0, #1
 800c534:	bf14      	ite	ne
 800c536:	801a      	strhne	r2, [r3, #0]
 800c538:	601a      	streq	r2, [r3, #0]
 800c53a:	e6f2      	b.n	800c322 <__ssvfiscanf_r+0x4e>
 800c53c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c53e:	4621      	mov	r1, r4
 800c540:	4630      	mov	r0, r6
 800c542:	4798      	blx	r3
 800c544:	2800      	cmp	r0, #0
 800c546:	d0b6      	beq.n	800c4b6 <__ssvfiscanf_r+0x1e2>
 800c548:	e79c      	b.n	800c484 <__ssvfiscanf_r+0x1b0>
 800c54a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c54c:	3201      	adds	r2, #1
 800c54e:	9245      	str	r2, [sp, #276]	; 0x114
 800c550:	6862      	ldr	r2, [r4, #4]
 800c552:	3a01      	subs	r2, #1
 800c554:	2a00      	cmp	r2, #0
 800c556:	6062      	str	r2, [r4, #4]
 800c558:	dd02      	ble.n	800c560 <__ssvfiscanf_r+0x28c>
 800c55a:	3301      	adds	r3, #1
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	e7ad      	b.n	800c4bc <__ssvfiscanf_r+0x1e8>
 800c560:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c562:	4621      	mov	r1, r4
 800c564:	4630      	mov	r0, r6
 800c566:	4798      	blx	r3
 800c568:	2800      	cmp	r0, #0
 800c56a:	d0a7      	beq.n	800c4bc <__ssvfiscanf_r+0x1e8>
 800c56c:	e78a      	b.n	800c484 <__ssvfiscanf_r+0x1b0>
 800c56e:	2b04      	cmp	r3, #4
 800c570:	dc0e      	bgt.n	800c590 <__ssvfiscanf_r+0x2bc>
 800c572:	466b      	mov	r3, sp
 800c574:	4622      	mov	r2, r4
 800c576:	a941      	add	r1, sp, #260	; 0x104
 800c578:	4630      	mov	r0, r6
 800c57a:	f000 f87d 	bl	800c678 <_scanf_i>
 800c57e:	e7ab      	b.n	800c4d8 <__ssvfiscanf_r+0x204>
 800c580:	0800c221 	.word	0x0800c221
 800c584:	0800c29b 	.word	0x0800c29b
 800c588:	0800e5bf 	.word	0x0800e5bf
 800c58c:	0800e8b2 	.word	0x0800e8b2
 800c590:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <__ssvfiscanf_r+0x2ec>)
 800c592:	2b00      	cmp	r3, #0
 800c594:	f43f aec5 	beq.w	800c322 <__ssvfiscanf_r+0x4e>
 800c598:	466b      	mov	r3, sp
 800c59a:	4622      	mov	r2, r4
 800c59c:	a941      	add	r1, sp, #260	; 0x104
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f3af 8000 	nop.w
 800c5a4:	e798      	b.n	800c4d8 <__ssvfiscanf_r+0x204>
 800c5a6:	89a3      	ldrh	r3, [r4, #12]
 800c5a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c5ac:	bf18      	it	ne
 800c5ae:	f04f 30ff 	movne.w	r0, #4294967295
 800c5b2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c5bc:	e7f9      	b.n	800c5b2 <__ssvfiscanf_r+0x2de>
 800c5be:	bf00      	nop
 800c5c0:	00000000 	.word	0x00000000

0800c5c4 <_scanf_chars>:
 800c5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5c8:	4615      	mov	r5, r2
 800c5ca:	688a      	ldr	r2, [r1, #8]
 800c5cc:	4680      	mov	r8, r0
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	b932      	cbnz	r2, 800c5e0 <_scanf_chars+0x1c>
 800c5d2:	698a      	ldr	r2, [r1, #24]
 800c5d4:	2a00      	cmp	r2, #0
 800c5d6:	bf0c      	ite	eq
 800c5d8:	2201      	moveq	r2, #1
 800c5da:	f04f 32ff 	movne.w	r2, #4294967295
 800c5de:	608a      	str	r2, [r1, #8]
 800c5e0:	6822      	ldr	r2, [r4, #0]
 800c5e2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c674 <_scanf_chars+0xb0>
 800c5e6:	06d1      	lsls	r1, r2, #27
 800c5e8:	bf5f      	itttt	pl
 800c5ea:	681a      	ldrpl	r2, [r3, #0]
 800c5ec:	1d11      	addpl	r1, r2, #4
 800c5ee:	6019      	strpl	r1, [r3, #0]
 800c5f0:	6816      	ldrpl	r6, [r2, #0]
 800c5f2:	2700      	movs	r7, #0
 800c5f4:	69a0      	ldr	r0, [r4, #24]
 800c5f6:	b188      	cbz	r0, 800c61c <_scanf_chars+0x58>
 800c5f8:	2801      	cmp	r0, #1
 800c5fa:	d107      	bne.n	800c60c <_scanf_chars+0x48>
 800c5fc:	682a      	ldr	r2, [r5, #0]
 800c5fe:	7811      	ldrb	r1, [r2, #0]
 800c600:	6962      	ldr	r2, [r4, #20]
 800c602:	5c52      	ldrb	r2, [r2, r1]
 800c604:	b952      	cbnz	r2, 800c61c <_scanf_chars+0x58>
 800c606:	2f00      	cmp	r7, #0
 800c608:	d031      	beq.n	800c66e <_scanf_chars+0xaa>
 800c60a:	e022      	b.n	800c652 <_scanf_chars+0x8e>
 800c60c:	2802      	cmp	r0, #2
 800c60e:	d120      	bne.n	800c652 <_scanf_chars+0x8e>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c618:	071b      	lsls	r3, r3, #28
 800c61a:	d41a      	bmi.n	800c652 <_scanf_chars+0x8e>
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	06da      	lsls	r2, r3, #27
 800c620:	bf5e      	ittt	pl
 800c622:	682b      	ldrpl	r3, [r5, #0]
 800c624:	781b      	ldrbpl	r3, [r3, #0]
 800c626:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c62a:	682a      	ldr	r2, [r5, #0]
 800c62c:	686b      	ldr	r3, [r5, #4]
 800c62e:	3201      	adds	r2, #1
 800c630:	602a      	str	r2, [r5, #0]
 800c632:	68a2      	ldr	r2, [r4, #8]
 800c634:	3b01      	subs	r3, #1
 800c636:	3a01      	subs	r2, #1
 800c638:	606b      	str	r3, [r5, #4]
 800c63a:	3701      	adds	r7, #1
 800c63c:	60a2      	str	r2, [r4, #8]
 800c63e:	b142      	cbz	r2, 800c652 <_scanf_chars+0x8e>
 800c640:	2b00      	cmp	r3, #0
 800c642:	dcd7      	bgt.n	800c5f4 <_scanf_chars+0x30>
 800c644:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c648:	4629      	mov	r1, r5
 800c64a:	4640      	mov	r0, r8
 800c64c:	4798      	blx	r3
 800c64e:	2800      	cmp	r0, #0
 800c650:	d0d0      	beq.n	800c5f4 <_scanf_chars+0x30>
 800c652:	6823      	ldr	r3, [r4, #0]
 800c654:	f013 0310 	ands.w	r3, r3, #16
 800c658:	d105      	bne.n	800c666 <_scanf_chars+0xa2>
 800c65a:	68e2      	ldr	r2, [r4, #12]
 800c65c:	3201      	adds	r2, #1
 800c65e:	60e2      	str	r2, [r4, #12]
 800c660:	69a2      	ldr	r2, [r4, #24]
 800c662:	b102      	cbz	r2, 800c666 <_scanf_chars+0xa2>
 800c664:	7033      	strb	r3, [r6, #0]
 800c666:	6923      	ldr	r3, [r4, #16]
 800c668:	443b      	add	r3, r7
 800c66a:	6123      	str	r3, [r4, #16]
 800c66c:	2000      	movs	r0, #0
 800c66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c672:	bf00      	nop
 800c674:	0800e5bf 	.word	0x0800e5bf

0800c678 <_scanf_i>:
 800c678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67c:	4698      	mov	r8, r3
 800c67e:	4b76      	ldr	r3, [pc, #472]	; (800c858 <_scanf_i+0x1e0>)
 800c680:	460c      	mov	r4, r1
 800c682:	4682      	mov	sl, r0
 800c684:	4616      	mov	r6, r2
 800c686:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c68a:	b087      	sub	sp, #28
 800c68c:	ab03      	add	r3, sp, #12
 800c68e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c692:	4b72      	ldr	r3, [pc, #456]	; (800c85c <_scanf_i+0x1e4>)
 800c694:	69a1      	ldr	r1, [r4, #24]
 800c696:	4a72      	ldr	r2, [pc, #456]	; (800c860 <_scanf_i+0x1e8>)
 800c698:	2903      	cmp	r1, #3
 800c69a:	bf18      	it	ne
 800c69c:	461a      	movne	r2, r3
 800c69e:	68a3      	ldr	r3, [r4, #8]
 800c6a0:	9201      	str	r2, [sp, #4]
 800c6a2:	1e5a      	subs	r2, r3, #1
 800c6a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c6a8:	bf88      	it	hi
 800c6aa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c6ae:	4627      	mov	r7, r4
 800c6b0:	bf82      	ittt	hi
 800c6b2:	eb03 0905 	addhi.w	r9, r3, r5
 800c6b6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c6ba:	60a3      	strhi	r3, [r4, #8]
 800c6bc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c6c0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c6c4:	bf98      	it	ls
 800c6c6:	f04f 0900 	movls.w	r9, #0
 800c6ca:	6023      	str	r3, [r4, #0]
 800c6cc:	463d      	mov	r5, r7
 800c6ce:	f04f 0b00 	mov.w	fp, #0
 800c6d2:	6831      	ldr	r1, [r6, #0]
 800c6d4:	ab03      	add	r3, sp, #12
 800c6d6:	7809      	ldrb	r1, [r1, #0]
 800c6d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c6dc:	2202      	movs	r2, #2
 800c6de:	f7f3 fd97 	bl	8000210 <memchr>
 800c6e2:	b328      	cbz	r0, 800c730 <_scanf_i+0xb8>
 800c6e4:	f1bb 0f01 	cmp.w	fp, #1
 800c6e8:	d159      	bne.n	800c79e <_scanf_i+0x126>
 800c6ea:	6862      	ldr	r2, [r4, #4]
 800c6ec:	b92a      	cbnz	r2, 800c6fa <_scanf_i+0x82>
 800c6ee:	6822      	ldr	r2, [r4, #0]
 800c6f0:	2308      	movs	r3, #8
 800c6f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6f6:	6063      	str	r3, [r4, #4]
 800c6f8:	6022      	str	r2, [r4, #0]
 800c6fa:	6822      	ldr	r2, [r4, #0]
 800c6fc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c700:	6022      	str	r2, [r4, #0]
 800c702:	68a2      	ldr	r2, [r4, #8]
 800c704:	1e51      	subs	r1, r2, #1
 800c706:	60a1      	str	r1, [r4, #8]
 800c708:	b192      	cbz	r2, 800c730 <_scanf_i+0xb8>
 800c70a:	6832      	ldr	r2, [r6, #0]
 800c70c:	1c51      	adds	r1, r2, #1
 800c70e:	6031      	str	r1, [r6, #0]
 800c710:	7812      	ldrb	r2, [r2, #0]
 800c712:	f805 2b01 	strb.w	r2, [r5], #1
 800c716:	6872      	ldr	r2, [r6, #4]
 800c718:	3a01      	subs	r2, #1
 800c71a:	2a00      	cmp	r2, #0
 800c71c:	6072      	str	r2, [r6, #4]
 800c71e:	dc07      	bgt.n	800c730 <_scanf_i+0xb8>
 800c720:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c724:	4631      	mov	r1, r6
 800c726:	4650      	mov	r0, sl
 800c728:	4790      	blx	r2
 800c72a:	2800      	cmp	r0, #0
 800c72c:	f040 8085 	bne.w	800c83a <_scanf_i+0x1c2>
 800c730:	f10b 0b01 	add.w	fp, fp, #1
 800c734:	f1bb 0f03 	cmp.w	fp, #3
 800c738:	d1cb      	bne.n	800c6d2 <_scanf_i+0x5a>
 800c73a:	6863      	ldr	r3, [r4, #4]
 800c73c:	b90b      	cbnz	r3, 800c742 <_scanf_i+0xca>
 800c73e:	230a      	movs	r3, #10
 800c740:	6063      	str	r3, [r4, #4]
 800c742:	6863      	ldr	r3, [r4, #4]
 800c744:	4947      	ldr	r1, [pc, #284]	; (800c864 <_scanf_i+0x1ec>)
 800c746:	6960      	ldr	r0, [r4, #20]
 800c748:	1ac9      	subs	r1, r1, r3
 800c74a:	f000 f89f 	bl	800c88c <__sccl>
 800c74e:	f04f 0b00 	mov.w	fp, #0
 800c752:	68a3      	ldr	r3, [r4, #8]
 800c754:	6822      	ldr	r2, [r4, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d03d      	beq.n	800c7d6 <_scanf_i+0x15e>
 800c75a:	6831      	ldr	r1, [r6, #0]
 800c75c:	6960      	ldr	r0, [r4, #20]
 800c75e:	f891 c000 	ldrb.w	ip, [r1]
 800c762:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c766:	2800      	cmp	r0, #0
 800c768:	d035      	beq.n	800c7d6 <_scanf_i+0x15e>
 800c76a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c76e:	d124      	bne.n	800c7ba <_scanf_i+0x142>
 800c770:	0510      	lsls	r0, r2, #20
 800c772:	d522      	bpl.n	800c7ba <_scanf_i+0x142>
 800c774:	f10b 0b01 	add.w	fp, fp, #1
 800c778:	f1b9 0f00 	cmp.w	r9, #0
 800c77c:	d003      	beq.n	800c786 <_scanf_i+0x10e>
 800c77e:	3301      	adds	r3, #1
 800c780:	f109 39ff 	add.w	r9, r9, #4294967295
 800c784:	60a3      	str	r3, [r4, #8]
 800c786:	6873      	ldr	r3, [r6, #4]
 800c788:	3b01      	subs	r3, #1
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	6073      	str	r3, [r6, #4]
 800c78e:	dd1b      	ble.n	800c7c8 <_scanf_i+0x150>
 800c790:	6833      	ldr	r3, [r6, #0]
 800c792:	3301      	adds	r3, #1
 800c794:	6033      	str	r3, [r6, #0]
 800c796:	68a3      	ldr	r3, [r4, #8]
 800c798:	3b01      	subs	r3, #1
 800c79a:	60a3      	str	r3, [r4, #8]
 800c79c:	e7d9      	b.n	800c752 <_scanf_i+0xda>
 800c79e:	f1bb 0f02 	cmp.w	fp, #2
 800c7a2:	d1ae      	bne.n	800c702 <_scanf_i+0x8a>
 800c7a4:	6822      	ldr	r2, [r4, #0]
 800c7a6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c7aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c7ae:	d1bf      	bne.n	800c730 <_scanf_i+0xb8>
 800c7b0:	2310      	movs	r3, #16
 800c7b2:	6063      	str	r3, [r4, #4]
 800c7b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7b8:	e7a2      	b.n	800c700 <_scanf_i+0x88>
 800c7ba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c7be:	6022      	str	r2, [r4, #0]
 800c7c0:	780b      	ldrb	r3, [r1, #0]
 800c7c2:	f805 3b01 	strb.w	r3, [r5], #1
 800c7c6:	e7de      	b.n	800c786 <_scanf_i+0x10e>
 800c7c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4650      	mov	r0, sl
 800c7d0:	4798      	blx	r3
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d0df      	beq.n	800c796 <_scanf_i+0x11e>
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	05db      	lsls	r3, r3, #23
 800c7da:	d50d      	bpl.n	800c7f8 <_scanf_i+0x180>
 800c7dc:	42bd      	cmp	r5, r7
 800c7de:	d909      	bls.n	800c7f4 <_scanf_i+0x17c>
 800c7e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c7e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7e8:	4632      	mov	r2, r6
 800c7ea:	4650      	mov	r0, sl
 800c7ec:	4798      	blx	r3
 800c7ee:	f105 39ff 	add.w	r9, r5, #4294967295
 800c7f2:	464d      	mov	r5, r9
 800c7f4:	42bd      	cmp	r5, r7
 800c7f6:	d02d      	beq.n	800c854 <_scanf_i+0x1dc>
 800c7f8:	6822      	ldr	r2, [r4, #0]
 800c7fa:	f012 0210 	ands.w	r2, r2, #16
 800c7fe:	d113      	bne.n	800c828 <_scanf_i+0x1b0>
 800c800:	702a      	strb	r2, [r5, #0]
 800c802:	6863      	ldr	r3, [r4, #4]
 800c804:	9e01      	ldr	r6, [sp, #4]
 800c806:	4639      	mov	r1, r7
 800c808:	4650      	mov	r0, sl
 800c80a:	47b0      	blx	r6
 800c80c:	6821      	ldr	r1, [r4, #0]
 800c80e:	f8d8 3000 	ldr.w	r3, [r8]
 800c812:	f011 0f20 	tst.w	r1, #32
 800c816:	d013      	beq.n	800c840 <_scanf_i+0x1c8>
 800c818:	1d1a      	adds	r2, r3, #4
 800c81a:	f8c8 2000 	str.w	r2, [r8]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6018      	str	r0, [r3, #0]
 800c822:	68e3      	ldr	r3, [r4, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60e3      	str	r3, [r4, #12]
 800c828:	1bed      	subs	r5, r5, r7
 800c82a:	44ab      	add	fp, r5
 800c82c:	6925      	ldr	r5, [r4, #16]
 800c82e:	445d      	add	r5, fp
 800c830:	6125      	str	r5, [r4, #16]
 800c832:	2000      	movs	r0, #0
 800c834:	b007      	add	sp, #28
 800c836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83a:	f04f 0b00 	mov.w	fp, #0
 800c83e:	e7ca      	b.n	800c7d6 <_scanf_i+0x15e>
 800c840:	1d1a      	adds	r2, r3, #4
 800c842:	f8c8 2000 	str.w	r2, [r8]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f011 0f01 	tst.w	r1, #1
 800c84c:	bf14      	ite	ne
 800c84e:	8018      	strhne	r0, [r3, #0]
 800c850:	6018      	streq	r0, [r3, #0]
 800c852:	e7e6      	b.n	800c822 <_scanf_i+0x1aa>
 800c854:	2001      	movs	r0, #1
 800c856:	e7ed      	b.n	800c834 <_scanf_i+0x1bc>
 800c858:	0800e11c 	.word	0x0800e11c
 800c85c:	0800c9e1 	.word	0x0800c9e1
 800c860:	0800aa85 	.word	0x0800aa85
 800c864:	0800e8d6 	.word	0x0800e8d6

0800c868 <_read_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4d07      	ldr	r5, [pc, #28]	; (800c888 <_read_r+0x20>)
 800c86c:	4604      	mov	r4, r0
 800c86e:	4608      	mov	r0, r1
 800c870:	4611      	mov	r1, r2
 800c872:	2200      	movs	r2, #0
 800c874:	602a      	str	r2, [r5, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	f7f6 fef8 	bl	800366c <_read>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_read_r+0x1e>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_read_r+0x1e>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	20000b64 	.word	0x20000b64

0800c88c <__sccl>:
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	780b      	ldrb	r3, [r1, #0]
 800c890:	4604      	mov	r4, r0
 800c892:	2b5e      	cmp	r3, #94	; 0x5e
 800c894:	bf0b      	itete	eq
 800c896:	784b      	ldrbeq	r3, [r1, #1]
 800c898:	1c48      	addne	r0, r1, #1
 800c89a:	1c88      	addeq	r0, r1, #2
 800c89c:	2200      	movne	r2, #0
 800c89e:	bf08      	it	eq
 800c8a0:	2201      	moveq	r2, #1
 800c8a2:	1e61      	subs	r1, r4, #1
 800c8a4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c8a8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c8ac:	42a9      	cmp	r1, r5
 800c8ae:	d1fb      	bne.n	800c8a8 <__sccl+0x1c>
 800c8b0:	b90b      	cbnz	r3, 800c8b6 <__sccl+0x2a>
 800c8b2:	3801      	subs	r0, #1
 800c8b4:	bd70      	pop	{r4, r5, r6, pc}
 800c8b6:	f082 0201 	eor.w	r2, r2, #1
 800c8ba:	54e2      	strb	r2, [r4, r3]
 800c8bc:	4605      	mov	r5, r0
 800c8be:	4628      	mov	r0, r5
 800c8c0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c8c4:	292d      	cmp	r1, #45	; 0x2d
 800c8c6:	d006      	beq.n	800c8d6 <__sccl+0x4a>
 800c8c8:	295d      	cmp	r1, #93	; 0x5d
 800c8ca:	d0f3      	beq.n	800c8b4 <__sccl+0x28>
 800c8cc:	b909      	cbnz	r1, 800c8d2 <__sccl+0x46>
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	e7f0      	b.n	800c8b4 <__sccl+0x28>
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	e7f1      	b.n	800c8ba <__sccl+0x2e>
 800c8d6:	786e      	ldrb	r6, [r5, #1]
 800c8d8:	2e5d      	cmp	r6, #93	; 0x5d
 800c8da:	d0fa      	beq.n	800c8d2 <__sccl+0x46>
 800c8dc:	42b3      	cmp	r3, r6
 800c8de:	dcf8      	bgt.n	800c8d2 <__sccl+0x46>
 800c8e0:	3502      	adds	r5, #2
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	3101      	adds	r1, #1
 800c8e6:	428e      	cmp	r6, r1
 800c8e8:	5462      	strb	r2, [r4, r1]
 800c8ea:	dcfb      	bgt.n	800c8e4 <__sccl+0x58>
 800c8ec:	1af1      	subs	r1, r6, r3
 800c8ee:	3901      	subs	r1, #1
 800c8f0:	1c58      	adds	r0, r3, #1
 800c8f2:	42b3      	cmp	r3, r6
 800c8f4:	bfa8      	it	ge
 800c8f6:	2100      	movge	r1, #0
 800c8f8:	1843      	adds	r3, r0, r1
 800c8fa:	e7e0      	b.n	800c8be <__sccl+0x32>

0800c8fc <_strtoul_l.constprop.0>:
 800c8fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c900:	4f36      	ldr	r7, [pc, #216]	; (800c9dc <_strtoul_l.constprop.0+0xe0>)
 800c902:	4686      	mov	lr, r0
 800c904:	460d      	mov	r5, r1
 800c906:	4628      	mov	r0, r5
 800c908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c90c:	5de6      	ldrb	r6, [r4, r7]
 800c90e:	f016 0608 	ands.w	r6, r6, #8
 800c912:	d1f8      	bne.n	800c906 <_strtoul_l.constprop.0+0xa>
 800c914:	2c2d      	cmp	r4, #45	; 0x2d
 800c916:	d12f      	bne.n	800c978 <_strtoul_l.constprop.0+0x7c>
 800c918:	782c      	ldrb	r4, [r5, #0]
 800c91a:	2601      	movs	r6, #1
 800c91c:	1c85      	adds	r5, r0, #2
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d057      	beq.n	800c9d2 <_strtoul_l.constprop.0+0xd6>
 800c922:	2b10      	cmp	r3, #16
 800c924:	d109      	bne.n	800c93a <_strtoul_l.constprop.0+0x3e>
 800c926:	2c30      	cmp	r4, #48	; 0x30
 800c928:	d107      	bne.n	800c93a <_strtoul_l.constprop.0+0x3e>
 800c92a:	7828      	ldrb	r0, [r5, #0]
 800c92c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c930:	2858      	cmp	r0, #88	; 0x58
 800c932:	d149      	bne.n	800c9c8 <_strtoul_l.constprop.0+0xcc>
 800c934:	786c      	ldrb	r4, [r5, #1]
 800c936:	2310      	movs	r3, #16
 800c938:	3502      	adds	r5, #2
 800c93a:	f04f 38ff 	mov.w	r8, #4294967295
 800c93e:	2700      	movs	r7, #0
 800c940:	fbb8 f8f3 	udiv	r8, r8, r3
 800c944:	fb03 f908 	mul.w	r9, r3, r8
 800c948:	ea6f 0909 	mvn.w	r9, r9
 800c94c:	4638      	mov	r0, r7
 800c94e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c952:	f1bc 0f09 	cmp.w	ip, #9
 800c956:	d814      	bhi.n	800c982 <_strtoul_l.constprop.0+0x86>
 800c958:	4664      	mov	r4, ip
 800c95a:	42a3      	cmp	r3, r4
 800c95c:	dd22      	ble.n	800c9a4 <_strtoul_l.constprop.0+0xa8>
 800c95e:	2f00      	cmp	r7, #0
 800c960:	db1d      	blt.n	800c99e <_strtoul_l.constprop.0+0xa2>
 800c962:	4580      	cmp	r8, r0
 800c964:	d31b      	bcc.n	800c99e <_strtoul_l.constprop.0+0xa2>
 800c966:	d101      	bne.n	800c96c <_strtoul_l.constprop.0+0x70>
 800c968:	45a1      	cmp	r9, r4
 800c96a:	db18      	blt.n	800c99e <_strtoul_l.constprop.0+0xa2>
 800c96c:	fb00 4003 	mla	r0, r0, r3, r4
 800c970:	2701      	movs	r7, #1
 800c972:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c976:	e7ea      	b.n	800c94e <_strtoul_l.constprop.0+0x52>
 800c978:	2c2b      	cmp	r4, #43	; 0x2b
 800c97a:	bf04      	itt	eq
 800c97c:	782c      	ldrbeq	r4, [r5, #0]
 800c97e:	1c85      	addeq	r5, r0, #2
 800c980:	e7cd      	b.n	800c91e <_strtoul_l.constprop.0+0x22>
 800c982:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c986:	f1bc 0f19 	cmp.w	ip, #25
 800c98a:	d801      	bhi.n	800c990 <_strtoul_l.constprop.0+0x94>
 800c98c:	3c37      	subs	r4, #55	; 0x37
 800c98e:	e7e4      	b.n	800c95a <_strtoul_l.constprop.0+0x5e>
 800c990:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c994:	f1bc 0f19 	cmp.w	ip, #25
 800c998:	d804      	bhi.n	800c9a4 <_strtoul_l.constprop.0+0xa8>
 800c99a:	3c57      	subs	r4, #87	; 0x57
 800c99c:	e7dd      	b.n	800c95a <_strtoul_l.constprop.0+0x5e>
 800c99e:	f04f 37ff 	mov.w	r7, #4294967295
 800c9a2:	e7e6      	b.n	800c972 <_strtoul_l.constprop.0+0x76>
 800c9a4:	2f00      	cmp	r7, #0
 800c9a6:	da07      	bge.n	800c9b8 <_strtoul_l.constprop.0+0xbc>
 800c9a8:	2322      	movs	r3, #34	; 0x22
 800c9aa:	f8ce 3000 	str.w	r3, [lr]
 800c9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b2:	b932      	cbnz	r2, 800c9c2 <_strtoul_l.constprop.0+0xc6>
 800c9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9b8:	b106      	cbz	r6, 800c9bc <_strtoul_l.constprop.0+0xc0>
 800c9ba:	4240      	negs	r0, r0
 800c9bc:	2a00      	cmp	r2, #0
 800c9be:	d0f9      	beq.n	800c9b4 <_strtoul_l.constprop.0+0xb8>
 800c9c0:	b107      	cbz	r7, 800c9c4 <_strtoul_l.constprop.0+0xc8>
 800c9c2:	1e69      	subs	r1, r5, #1
 800c9c4:	6011      	str	r1, [r2, #0]
 800c9c6:	e7f5      	b.n	800c9b4 <_strtoul_l.constprop.0+0xb8>
 800c9c8:	2430      	movs	r4, #48	; 0x30
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1b5      	bne.n	800c93a <_strtoul_l.constprop.0+0x3e>
 800c9ce:	2308      	movs	r3, #8
 800c9d0:	e7b3      	b.n	800c93a <_strtoul_l.constprop.0+0x3e>
 800c9d2:	2c30      	cmp	r4, #48	; 0x30
 800c9d4:	d0a9      	beq.n	800c92a <_strtoul_l.constprop.0+0x2e>
 800c9d6:	230a      	movs	r3, #10
 800c9d8:	e7af      	b.n	800c93a <_strtoul_l.constprop.0+0x3e>
 800c9da:	bf00      	nop
 800c9dc:	0800e5bf 	.word	0x0800e5bf

0800c9e0 <_strtoul_r>:
 800c9e0:	f7ff bf8c 	b.w	800c8fc <_strtoul_l.constprop.0>

0800c9e4 <__submore>:
 800c9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e8:	460c      	mov	r4, r1
 800c9ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c9ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9f0:	4299      	cmp	r1, r3
 800c9f2:	d11d      	bne.n	800ca30 <__submore+0x4c>
 800c9f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c9f8:	f7fd fa1a 	bl	8009e30 <_malloc_r>
 800c9fc:	b918      	cbnz	r0, 800ca06 <__submore+0x22>
 800c9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ca02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca0a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ca10:	6360      	str	r0, [r4, #52]	; 0x34
 800ca12:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ca16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ca1a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ca1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ca22:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ca26:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ca2a:	6020      	str	r0, [r4, #0]
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	e7e8      	b.n	800ca02 <__submore+0x1e>
 800ca30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ca32:	0077      	lsls	r7, r6, #1
 800ca34:	463a      	mov	r2, r7
 800ca36:	f000 fa25 	bl	800ce84 <_realloc_r>
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d0de      	beq.n	800c9fe <__submore+0x1a>
 800ca40:	eb00 0806 	add.w	r8, r0, r6
 800ca44:	4601      	mov	r1, r0
 800ca46:	4632      	mov	r2, r6
 800ca48:	4640      	mov	r0, r8
 800ca4a:	f7fe fed9 	bl	800b800 <memcpy>
 800ca4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ca52:	f8c4 8000 	str.w	r8, [r4]
 800ca56:	e7e9      	b.n	800ca2c <__submore+0x48>

0800ca58 <__assert_func>:
 800ca58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca5a:	4614      	mov	r4, r2
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	4b09      	ldr	r3, [pc, #36]	; (800ca84 <__assert_func+0x2c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4605      	mov	r5, r0
 800ca64:	68d8      	ldr	r0, [r3, #12]
 800ca66:	b14c      	cbz	r4, 800ca7c <__assert_func+0x24>
 800ca68:	4b07      	ldr	r3, [pc, #28]	; (800ca88 <__assert_func+0x30>)
 800ca6a:	9100      	str	r1, [sp, #0]
 800ca6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca70:	4906      	ldr	r1, [pc, #24]	; (800ca8c <__assert_func+0x34>)
 800ca72:	462b      	mov	r3, r5
 800ca74:	f000 f9a6 	bl	800cdc4 <fiprintf>
 800ca78:	f000 fc5a 	bl	800d330 <abort>
 800ca7c:	4b04      	ldr	r3, [pc, #16]	; (800ca90 <__assert_func+0x38>)
 800ca7e:	461c      	mov	r4, r3
 800ca80:	e7f3      	b.n	800ca6a <__assert_func+0x12>
 800ca82:	bf00      	nop
 800ca84:	20000118 	.word	0x20000118
 800ca88:	0800e8d8 	.word	0x0800e8d8
 800ca8c:	0800e8e5 	.word	0x0800e8e5
 800ca90:	0800e913 	.word	0x0800e913

0800ca94 <__sflush_r>:
 800ca94:	898a      	ldrh	r2, [r1, #12]
 800ca96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9a:	4605      	mov	r5, r0
 800ca9c:	0710      	lsls	r0, r2, #28
 800ca9e:	460c      	mov	r4, r1
 800caa0:	d458      	bmi.n	800cb54 <__sflush_r+0xc0>
 800caa2:	684b      	ldr	r3, [r1, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	dc05      	bgt.n	800cab4 <__sflush_r+0x20>
 800caa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800caaa:	2b00      	cmp	r3, #0
 800caac:	dc02      	bgt.n	800cab4 <__sflush_r+0x20>
 800caae:	2000      	movs	r0, #0
 800cab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cab6:	2e00      	cmp	r6, #0
 800cab8:	d0f9      	beq.n	800caae <__sflush_r+0x1a>
 800caba:	2300      	movs	r3, #0
 800cabc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cac0:	682f      	ldr	r7, [r5, #0]
 800cac2:	602b      	str	r3, [r5, #0]
 800cac4:	d032      	beq.n	800cb2c <__sflush_r+0x98>
 800cac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cac8:	89a3      	ldrh	r3, [r4, #12]
 800caca:	075a      	lsls	r2, r3, #29
 800cacc:	d505      	bpl.n	800cada <__sflush_r+0x46>
 800cace:	6863      	ldr	r3, [r4, #4]
 800cad0:	1ac0      	subs	r0, r0, r3
 800cad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cad4:	b10b      	cbz	r3, 800cada <__sflush_r+0x46>
 800cad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cad8:	1ac0      	subs	r0, r0, r3
 800cada:	2300      	movs	r3, #0
 800cadc:	4602      	mov	r2, r0
 800cade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cae0:	6a21      	ldr	r1, [r4, #32]
 800cae2:	4628      	mov	r0, r5
 800cae4:	47b0      	blx	r6
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	89a3      	ldrh	r3, [r4, #12]
 800caea:	d106      	bne.n	800cafa <__sflush_r+0x66>
 800caec:	6829      	ldr	r1, [r5, #0]
 800caee:	291d      	cmp	r1, #29
 800caf0:	d82c      	bhi.n	800cb4c <__sflush_r+0xb8>
 800caf2:	4a2a      	ldr	r2, [pc, #168]	; (800cb9c <__sflush_r+0x108>)
 800caf4:	40ca      	lsrs	r2, r1
 800caf6:	07d6      	lsls	r6, r2, #31
 800caf8:	d528      	bpl.n	800cb4c <__sflush_r+0xb8>
 800cafa:	2200      	movs	r2, #0
 800cafc:	6062      	str	r2, [r4, #4]
 800cafe:	04d9      	lsls	r1, r3, #19
 800cb00:	6922      	ldr	r2, [r4, #16]
 800cb02:	6022      	str	r2, [r4, #0]
 800cb04:	d504      	bpl.n	800cb10 <__sflush_r+0x7c>
 800cb06:	1c42      	adds	r2, r0, #1
 800cb08:	d101      	bne.n	800cb0e <__sflush_r+0x7a>
 800cb0a:	682b      	ldr	r3, [r5, #0]
 800cb0c:	b903      	cbnz	r3, 800cb10 <__sflush_r+0x7c>
 800cb0e:	6560      	str	r0, [r4, #84]	; 0x54
 800cb10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb12:	602f      	str	r7, [r5, #0]
 800cb14:	2900      	cmp	r1, #0
 800cb16:	d0ca      	beq.n	800caae <__sflush_r+0x1a>
 800cb18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb1c:	4299      	cmp	r1, r3
 800cb1e:	d002      	beq.n	800cb26 <__sflush_r+0x92>
 800cb20:	4628      	mov	r0, r5
 800cb22:	f7fd f919 	bl	8009d58 <_free_r>
 800cb26:	2000      	movs	r0, #0
 800cb28:	6360      	str	r0, [r4, #52]	; 0x34
 800cb2a:	e7c1      	b.n	800cab0 <__sflush_r+0x1c>
 800cb2c:	6a21      	ldr	r1, [r4, #32]
 800cb2e:	2301      	movs	r3, #1
 800cb30:	4628      	mov	r0, r5
 800cb32:	47b0      	blx	r6
 800cb34:	1c41      	adds	r1, r0, #1
 800cb36:	d1c7      	bne.n	800cac8 <__sflush_r+0x34>
 800cb38:	682b      	ldr	r3, [r5, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d0c4      	beq.n	800cac8 <__sflush_r+0x34>
 800cb3e:	2b1d      	cmp	r3, #29
 800cb40:	d001      	beq.n	800cb46 <__sflush_r+0xb2>
 800cb42:	2b16      	cmp	r3, #22
 800cb44:	d101      	bne.n	800cb4a <__sflush_r+0xb6>
 800cb46:	602f      	str	r7, [r5, #0]
 800cb48:	e7b1      	b.n	800caae <__sflush_r+0x1a>
 800cb4a:	89a3      	ldrh	r3, [r4, #12]
 800cb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb50:	81a3      	strh	r3, [r4, #12]
 800cb52:	e7ad      	b.n	800cab0 <__sflush_r+0x1c>
 800cb54:	690f      	ldr	r7, [r1, #16]
 800cb56:	2f00      	cmp	r7, #0
 800cb58:	d0a9      	beq.n	800caae <__sflush_r+0x1a>
 800cb5a:	0793      	lsls	r3, r2, #30
 800cb5c:	680e      	ldr	r6, [r1, #0]
 800cb5e:	bf08      	it	eq
 800cb60:	694b      	ldreq	r3, [r1, #20]
 800cb62:	600f      	str	r7, [r1, #0]
 800cb64:	bf18      	it	ne
 800cb66:	2300      	movne	r3, #0
 800cb68:	eba6 0807 	sub.w	r8, r6, r7
 800cb6c:	608b      	str	r3, [r1, #8]
 800cb6e:	f1b8 0f00 	cmp.w	r8, #0
 800cb72:	dd9c      	ble.n	800caae <__sflush_r+0x1a>
 800cb74:	6a21      	ldr	r1, [r4, #32]
 800cb76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb78:	4643      	mov	r3, r8
 800cb7a:	463a      	mov	r2, r7
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	47b0      	blx	r6
 800cb80:	2800      	cmp	r0, #0
 800cb82:	dc06      	bgt.n	800cb92 <__sflush_r+0xfe>
 800cb84:	89a3      	ldrh	r3, [r4, #12]
 800cb86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb8a:	81a3      	strh	r3, [r4, #12]
 800cb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb90:	e78e      	b.n	800cab0 <__sflush_r+0x1c>
 800cb92:	4407      	add	r7, r0
 800cb94:	eba8 0800 	sub.w	r8, r8, r0
 800cb98:	e7e9      	b.n	800cb6e <__sflush_r+0xda>
 800cb9a:	bf00      	nop
 800cb9c:	20400001 	.word	0x20400001

0800cba0 <_fflush_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	690b      	ldr	r3, [r1, #16]
 800cba4:	4605      	mov	r5, r0
 800cba6:	460c      	mov	r4, r1
 800cba8:	b913      	cbnz	r3, 800cbb0 <_fflush_r+0x10>
 800cbaa:	2500      	movs	r5, #0
 800cbac:	4628      	mov	r0, r5
 800cbae:	bd38      	pop	{r3, r4, r5, pc}
 800cbb0:	b118      	cbz	r0, 800cbba <_fflush_r+0x1a>
 800cbb2:	6983      	ldr	r3, [r0, #24]
 800cbb4:	b90b      	cbnz	r3, 800cbba <_fflush_r+0x1a>
 800cbb6:	f000 f887 	bl	800ccc8 <__sinit>
 800cbba:	4b14      	ldr	r3, [pc, #80]	; (800cc0c <_fflush_r+0x6c>)
 800cbbc:	429c      	cmp	r4, r3
 800cbbe:	d11b      	bne.n	800cbf8 <_fflush_r+0x58>
 800cbc0:	686c      	ldr	r4, [r5, #4]
 800cbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d0ef      	beq.n	800cbaa <_fflush_r+0xa>
 800cbca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbcc:	07d0      	lsls	r0, r2, #31
 800cbce:	d404      	bmi.n	800cbda <_fflush_r+0x3a>
 800cbd0:	0599      	lsls	r1, r3, #22
 800cbd2:	d402      	bmi.n	800cbda <_fflush_r+0x3a>
 800cbd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbd6:	f000 f927 	bl	800ce28 <__retarget_lock_acquire_recursive>
 800cbda:	4628      	mov	r0, r5
 800cbdc:	4621      	mov	r1, r4
 800cbde:	f7ff ff59 	bl	800ca94 <__sflush_r>
 800cbe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbe4:	07da      	lsls	r2, r3, #31
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	d4e0      	bmi.n	800cbac <_fflush_r+0xc>
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	059b      	lsls	r3, r3, #22
 800cbee:	d4dd      	bmi.n	800cbac <_fflush_r+0xc>
 800cbf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbf2:	f000 f91a 	bl	800ce2a <__retarget_lock_release_recursive>
 800cbf6:	e7d9      	b.n	800cbac <_fflush_r+0xc>
 800cbf8:	4b05      	ldr	r3, [pc, #20]	; (800cc10 <_fflush_r+0x70>)
 800cbfa:	429c      	cmp	r4, r3
 800cbfc:	d101      	bne.n	800cc02 <_fflush_r+0x62>
 800cbfe:	68ac      	ldr	r4, [r5, #8]
 800cc00:	e7df      	b.n	800cbc2 <_fflush_r+0x22>
 800cc02:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <_fflush_r+0x74>)
 800cc04:	429c      	cmp	r4, r3
 800cc06:	bf08      	it	eq
 800cc08:	68ec      	ldreq	r4, [r5, #12]
 800cc0a:	e7da      	b.n	800cbc2 <_fflush_r+0x22>
 800cc0c:	0800e934 	.word	0x0800e934
 800cc10:	0800e954 	.word	0x0800e954
 800cc14:	0800e914 	.word	0x0800e914

0800cc18 <std>:
 800cc18:	2300      	movs	r3, #0
 800cc1a:	b510      	push	{r4, lr}
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc26:	6083      	str	r3, [r0, #8]
 800cc28:	8181      	strh	r1, [r0, #12]
 800cc2a:	6643      	str	r3, [r0, #100]	; 0x64
 800cc2c:	81c2      	strh	r2, [r0, #14]
 800cc2e:	6183      	str	r3, [r0, #24]
 800cc30:	4619      	mov	r1, r3
 800cc32:	2208      	movs	r2, #8
 800cc34:	305c      	adds	r0, #92	; 0x5c
 800cc36:	f7fd f887 	bl	8009d48 <memset>
 800cc3a:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <std+0x38>)
 800cc3c:	6263      	str	r3, [r4, #36]	; 0x24
 800cc3e:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <std+0x3c>)
 800cc40:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc42:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <std+0x40>)
 800cc44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc46:	4b05      	ldr	r3, [pc, #20]	; (800cc5c <std+0x44>)
 800cc48:	6224      	str	r4, [r4, #32]
 800cc4a:	6323      	str	r3, [r4, #48]	; 0x30
 800cc4c:	bd10      	pop	{r4, pc}
 800cc4e:	bf00      	nop
 800cc50:	0800a8a5 	.word	0x0800a8a5
 800cc54:	0800a8cb 	.word	0x0800a8cb
 800cc58:	0800a903 	.word	0x0800a903
 800cc5c:	0800a927 	.word	0x0800a927

0800cc60 <_cleanup_r>:
 800cc60:	4901      	ldr	r1, [pc, #4]	; (800cc68 <_cleanup_r+0x8>)
 800cc62:	f000 b8c1 	b.w	800cde8 <_fwalk_reent>
 800cc66:	bf00      	nop
 800cc68:	0800cba1 	.word	0x0800cba1

0800cc6c <__sfmoreglue>:
 800cc6c:	b570      	push	{r4, r5, r6, lr}
 800cc6e:	2268      	movs	r2, #104	; 0x68
 800cc70:	1e4d      	subs	r5, r1, #1
 800cc72:	4355      	muls	r5, r2
 800cc74:	460e      	mov	r6, r1
 800cc76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc7a:	f7fd f8d9 	bl	8009e30 <_malloc_r>
 800cc7e:	4604      	mov	r4, r0
 800cc80:	b140      	cbz	r0, 800cc94 <__sfmoreglue+0x28>
 800cc82:	2100      	movs	r1, #0
 800cc84:	e9c0 1600 	strd	r1, r6, [r0]
 800cc88:	300c      	adds	r0, #12
 800cc8a:	60a0      	str	r0, [r4, #8]
 800cc8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc90:	f7fd f85a 	bl	8009d48 <memset>
 800cc94:	4620      	mov	r0, r4
 800cc96:	bd70      	pop	{r4, r5, r6, pc}

0800cc98 <__sfp_lock_acquire>:
 800cc98:	4801      	ldr	r0, [pc, #4]	; (800cca0 <__sfp_lock_acquire+0x8>)
 800cc9a:	f000 b8c5 	b.w	800ce28 <__retarget_lock_acquire_recursive>
 800cc9e:	bf00      	nop
 800cca0:	20000b69 	.word	0x20000b69

0800cca4 <__sfp_lock_release>:
 800cca4:	4801      	ldr	r0, [pc, #4]	; (800ccac <__sfp_lock_release+0x8>)
 800cca6:	f000 b8c0 	b.w	800ce2a <__retarget_lock_release_recursive>
 800ccaa:	bf00      	nop
 800ccac:	20000b69 	.word	0x20000b69

0800ccb0 <__sinit_lock_acquire>:
 800ccb0:	4801      	ldr	r0, [pc, #4]	; (800ccb8 <__sinit_lock_acquire+0x8>)
 800ccb2:	f000 b8b9 	b.w	800ce28 <__retarget_lock_acquire_recursive>
 800ccb6:	bf00      	nop
 800ccb8:	20000b6a 	.word	0x20000b6a

0800ccbc <__sinit_lock_release>:
 800ccbc:	4801      	ldr	r0, [pc, #4]	; (800ccc4 <__sinit_lock_release+0x8>)
 800ccbe:	f000 b8b4 	b.w	800ce2a <__retarget_lock_release_recursive>
 800ccc2:	bf00      	nop
 800ccc4:	20000b6a 	.word	0x20000b6a

0800ccc8 <__sinit>:
 800ccc8:	b510      	push	{r4, lr}
 800ccca:	4604      	mov	r4, r0
 800cccc:	f7ff fff0 	bl	800ccb0 <__sinit_lock_acquire>
 800ccd0:	69a3      	ldr	r3, [r4, #24]
 800ccd2:	b11b      	cbz	r3, 800ccdc <__sinit+0x14>
 800ccd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccd8:	f7ff bff0 	b.w	800ccbc <__sinit_lock_release>
 800ccdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cce0:	6523      	str	r3, [r4, #80]	; 0x50
 800cce2:	4b13      	ldr	r3, [pc, #76]	; (800cd30 <__sinit+0x68>)
 800cce4:	4a13      	ldr	r2, [pc, #76]	; (800cd34 <__sinit+0x6c>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ccea:	42a3      	cmp	r3, r4
 800ccec:	bf04      	itt	eq
 800ccee:	2301      	moveq	r3, #1
 800ccf0:	61a3      	streq	r3, [r4, #24]
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f000 f820 	bl	800cd38 <__sfp>
 800ccf8:	6060      	str	r0, [r4, #4]
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 f81c 	bl	800cd38 <__sfp>
 800cd00:	60a0      	str	r0, [r4, #8]
 800cd02:	4620      	mov	r0, r4
 800cd04:	f000 f818 	bl	800cd38 <__sfp>
 800cd08:	2200      	movs	r2, #0
 800cd0a:	60e0      	str	r0, [r4, #12]
 800cd0c:	2104      	movs	r1, #4
 800cd0e:	6860      	ldr	r0, [r4, #4]
 800cd10:	f7ff ff82 	bl	800cc18 <std>
 800cd14:	68a0      	ldr	r0, [r4, #8]
 800cd16:	2201      	movs	r2, #1
 800cd18:	2109      	movs	r1, #9
 800cd1a:	f7ff ff7d 	bl	800cc18 <std>
 800cd1e:	68e0      	ldr	r0, [r4, #12]
 800cd20:	2202      	movs	r2, #2
 800cd22:	2112      	movs	r1, #18
 800cd24:	f7ff ff78 	bl	800cc18 <std>
 800cd28:	2301      	movs	r3, #1
 800cd2a:	61a3      	str	r3, [r4, #24]
 800cd2c:	e7d2      	b.n	800ccd4 <__sinit+0xc>
 800cd2e:	bf00      	nop
 800cd30:	0800e588 	.word	0x0800e588
 800cd34:	0800cc61 	.word	0x0800cc61

0800cd38 <__sfp>:
 800cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3a:	4607      	mov	r7, r0
 800cd3c:	f7ff ffac 	bl	800cc98 <__sfp_lock_acquire>
 800cd40:	4b1e      	ldr	r3, [pc, #120]	; (800cdbc <__sfp+0x84>)
 800cd42:	681e      	ldr	r6, [r3, #0]
 800cd44:	69b3      	ldr	r3, [r6, #24]
 800cd46:	b913      	cbnz	r3, 800cd4e <__sfp+0x16>
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f7ff ffbd 	bl	800ccc8 <__sinit>
 800cd4e:	3648      	adds	r6, #72	; 0x48
 800cd50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	d503      	bpl.n	800cd60 <__sfp+0x28>
 800cd58:	6833      	ldr	r3, [r6, #0]
 800cd5a:	b30b      	cbz	r3, 800cda0 <__sfp+0x68>
 800cd5c:	6836      	ldr	r6, [r6, #0]
 800cd5e:	e7f7      	b.n	800cd50 <__sfp+0x18>
 800cd60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd64:	b9d5      	cbnz	r5, 800cd9c <__sfp+0x64>
 800cd66:	4b16      	ldr	r3, [pc, #88]	; (800cdc0 <__sfp+0x88>)
 800cd68:	60e3      	str	r3, [r4, #12]
 800cd6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd6e:	6665      	str	r5, [r4, #100]	; 0x64
 800cd70:	f000 f859 	bl	800ce26 <__retarget_lock_init_recursive>
 800cd74:	f7ff ff96 	bl	800cca4 <__sfp_lock_release>
 800cd78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd80:	6025      	str	r5, [r4, #0]
 800cd82:	61a5      	str	r5, [r4, #24]
 800cd84:	2208      	movs	r2, #8
 800cd86:	4629      	mov	r1, r5
 800cd88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd8c:	f7fc ffdc 	bl	8009d48 <memset>
 800cd90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd98:	4620      	mov	r0, r4
 800cd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd9c:	3468      	adds	r4, #104	; 0x68
 800cd9e:	e7d9      	b.n	800cd54 <__sfp+0x1c>
 800cda0:	2104      	movs	r1, #4
 800cda2:	4638      	mov	r0, r7
 800cda4:	f7ff ff62 	bl	800cc6c <__sfmoreglue>
 800cda8:	4604      	mov	r4, r0
 800cdaa:	6030      	str	r0, [r6, #0]
 800cdac:	2800      	cmp	r0, #0
 800cdae:	d1d5      	bne.n	800cd5c <__sfp+0x24>
 800cdb0:	f7ff ff78 	bl	800cca4 <__sfp_lock_release>
 800cdb4:	230c      	movs	r3, #12
 800cdb6:	603b      	str	r3, [r7, #0]
 800cdb8:	e7ee      	b.n	800cd98 <__sfp+0x60>
 800cdba:	bf00      	nop
 800cdbc:	0800e588 	.word	0x0800e588
 800cdc0:	ffff0001 	.word	0xffff0001

0800cdc4 <fiprintf>:
 800cdc4:	b40e      	push	{r1, r2, r3}
 800cdc6:	b503      	push	{r0, r1, lr}
 800cdc8:	4601      	mov	r1, r0
 800cdca:	ab03      	add	r3, sp, #12
 800cdcc:	4805      	ldr	r0, [pc, #20]	; (800cde4 <fiprintf+0x20>)
 800cdce:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdd2:	6800      	ldr	r0, [r0, #0]
 800cdd4:	9301      	str	r3, [sp, #4]
 800cdd6:	f000 f8ad 	bl	800cf34 <_vfiprintf_r>
 800cdda:	b002      	add	sp, #8
 800cddc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cde0:	b003      	add	sp, #12
 800cde2:	4770      	bx	lr
 800cde4:	20000118 	.word	0x20000118

0800cde8 <_fwalk_reent>:
 800cde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdec:	4606      	mov	r6, r0
 800cdee:	4688      	mov	r8, r1
 800cdf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdf4:	2700      	movs	r7, #0
 800cdf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdfa:	f1b9 0901 	subs.w	r9, r9, #1
 800cdfe:	d505      	bpl.n	800ce0c <_fwalk_reent+0x24>
 800ce00:	6824      	ldr	r4, [r4, #0]
 800ce02:	2c00      	cmp	r4, #0
 800ce04:	d1f7      	bne.n	800cdf6 <_fwalk_reent+0xe>
 800ce06:	4638      	mov	r0, r7
 800ce08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce0c:	89ab      	ldrh	r3, [r5, #12]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d907      	bls.n	800ce22 <_fwalk_reent+0x3a>
 800ce12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce16:	3301      	adds	r3, #1
 800ce18:	d003      	beq.n	800ce22 <_fwalk_reent+0x3a>
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	47c0      	blx	r8
 800ce20:	4307      	orrs	r7, r0
 800ce22:	3568      	adds	r5, #104	; 0x68
 800ce24:	e7e9      	b.n	800cdfa <_fwalk_reent+0x12>

0800ce26 <__retarget_lock_init_recursive>:
 800ce26:	4770      	bx	lr

0800ce28 <__retarget_lock_acquire_recursive>:
 800ce28:	4770      	bx	lr

0800ce2a <__retarget_lock_release_recursive>:
 800ce2a:	4770      	bx	lr

0800ce2c <__ascii_mbtowc>:
 800ce2c:	b082      	sub	sp, #8
 800ce2e:	b901      	cbnz	r1, 800ce32 <__ascii_mbtowc+0x6>
 800ce30:	a901      	add	r1, sp, #4
 800ce32:	b142      	cbz	r2, 800ce46 <__ascii_mbtowc+0x1a>
 800ce34:	b14b      	cbz	r3, 800ce4a <__ascii_mbtowc+0x1e>
 800ce36:	7813      	ldrb	r3, [r2, #0]
 800ce38:	600b      	str	r3, [r1, #0]
 800ce3a:	7812      	ldrb	r2, [r2, #0]
 800ce3c:	1e10      	subs	r0, r2, #0
 800ce3e:	bf18      	it	ne
 800ce40:	2001      	movne	r0, #1
 800ce42:	b002      	add	sp, #8
 800ce44:	4770      	bx	lr
 800ce46:	4610      	mov	r0, r2
 800ce48:	e7fb      	b.n	800ce42 <__ascii_mbtowc+0x16>
 800ce4a:	f06f 0001 	mvn.w	r0, #1
 800ce4e:	e7f8      	b.n	800ce42 <__ascii_mbtowc+0x16>

0800ce50 <memmove>:
 800ce50:	4288      	cmp	r0, r1
 800ce52:	b510      	push	{r4, lr}
 800ce54:	eb01 0402 	add.w	r4, r1, r2
 800ce58:	d902      	bls.n	800ce60 <memmove+0x10>
 800ce5a:	4284      	cmp	r4, r0
 800ce5c:	4623      	mov	r3, r4
 800ce5e:	d807      	bhi.n	800ce70 <memmove+0x20>
 800ce60:	1e43      	subs	r3, r0, #1
 800ce62:	42a1      	cmp	r1, r4
 800ce64:	d008      	beq.n	800ce78 <memmove+0x28>
 800ce66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce6e:	e7f8      	b.n	800ce62 <memmove+0x12>
 800ce70:	4402      	add	r2, r0
 800ce72:	4601      	mov	r1, r0
 800ce74:	428a      	cmp	r2, r1
 800ce76:	d100      	bne.n	800ce7a <memmove+0x2a>
 800ce78:	bd10      	pop	{r4, pc}
 800ce7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce82:	e7f7      	b.n	800ce74 <memmove+0x24>

0800ce84 <_realloc_r>:
 800ce84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce88:	4680      	mov	r8, r0
 800ce8a:	4614      	mov	r4, r2
 800ce8c:	460e      	mov	r6, r1
 800ce8e:	b921      	cbnz	r1, 800ce9a <_realloc_r+0x16>
 800ce90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce94:	4611      	mov	r1, r2
 800ce96:	f7fc bfcb 	b.w	8009e30 <_malloc_r>
 800ce9a:	b92a      	cbnz	r2, 800cea8 <_realloc_r+0x24>
 800ce9c:	f7fc ff5c 	bl	8009d58 <_free_r>
 800cea0:	4625      	mov	r5, r4
 800cea2:	4628      	mov	r0, r5
 800cea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea8:	f000 faae 	bl	800d408 <_malloc_usable_size_r>
 800ceac:	4284      	cmp	r4, r0
 800ceae:	4607      	mov	r7, r0
 800ceb0:	d802      	bhi.n	800ceb8 <_realloc_r+0x34>
 800ceb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ceb6:	d812      	bhi.n	800cede <_realloc_r+0x5a>
 800ceb8:	4621      	mov	r1, r4
 800ceba:	4640      	mov	r0, r8
 800cebc:	f7fc ffb8 	bl	8009e30 <_malloc_r>
 800cec0:	4605      	mov	r5, r0
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d0ed      	beq.n	800cea2 <_realloc_r+0x1e>
 800cec6:	42bc      	cmp	r4, r7
 800cec8:	4622      	mov	r2, r4
 800ceca:	4631      	mov	r1, r6
 800cecc:	bf28      	it	cs
 800cece:	463a      	movcs	r2, r7
 800ced0:	f7fe fc96 	bl	800b800 <memcpy>
 800ced4:	4631      	mov	r1, r6
 800ced6:	4640      	mov	r0, r8
 800ced8:	f7fc ff3e 	bl	8009d58 <_free_r>
 800cedc:	e7e1      	b.n	800cea2 <_realloc_r+0x1e>
 800cede:	4635      	mov	r5, r6
 800cee0:	e7df      	b.n	800cea2 <_realloc_r+0x1e>

0800cee2 <__sfputc_r>:
 800cee2:	6893      	ldr	r3, [r2, #8]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	b410      	push	{r4}
 800ceea:	6093      	str	r3, [r2, #8]
 800ceec:	da08      	bge.n	800cf00 <__sfputc_r+0x1e>
 800ceee:	6994      	ldr	r4, [r2, #24]
 800cef0:	42a3      	cmp	r3, r4
 800cef2:	db01      	blt.n	800cef8 <__sfputc_r+0x16>
 800cef4:	290a      	cmp	r1, #10
 800cef6:	d103      	bne.n	800cf00 <__sfputc_r+0x1e>
 800cef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cefc:	f000 b94a 	b.w	800d194 <__swbuf_r>
 800cf00:	6813      	ldr	r3, [r2, #0]
 800cf02:	1c58      	adds	r0, r3, #1
 800cf04:	6010      	str	r0, [r2, #0]
 800cf06:	7019      	strb	r1, [r3, #0]
 800cf08:	4608      	mov	r0, r1
 800cf0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <__sfputs_r>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	4606      	mov	r6, r0
 800cf14:	460f      	mov	r7, r1
 800cf16:	4614      	mov	r4, r2
 800cf18:	18d5      	adds	r5, r2, r3
 800cf1a:	42ac      	cmp	r4, r5
 800cf1c:	d101      	bne.n	800cf22 <__sfputs_r+0x12>
 800cf1e:	2000      	movs	r0, #0
 800cf20:	e007      	b.n	800cf32 <__sfputs_r+0x22>
 800cf22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf26:	463a      	mov	r2, r7
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7ff ffda 	bl	800cee2 <__sfputc_r>
 800cf2e:	1c43      	adds	r3, r0, #1
 800cf30:	d1f3      	bne.n	800cf1a <__sfputs_r+0xa>
 800cf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf34 <_vfiprintf_r>:
 800cf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf38:	460d      	mov	r5, r1
 800cf3a:	b09d      	sub	sp, #116	; 0x74
 800cf3c:	4614      	mov	r4, r2
 800cf3e:	4698      	mov	r8, r3
 800cf40:	4606      	mov	r6, r0
 800cf42:	b118      	cbz	r0, 800cf4c <_vfiprintf_r+0x18>
 800cf44:	6983      	ldr	r3, [r0, #24]
 800cf46:	b90b      	cbnz	r3, 800cf4c <_vfiprintf_r+0x18>
 800cf48:	f7ff febe 	bl	800ccc8 <__sinit>
 800cf4c:	4b89      	ldr	r3, [pc, #548]	; (800d174 <_vfiprintf_r+0x240>)
 800cf4e:	429d      	cmp	r5, r3
 800cf50:	d11b      	bne.n	800cf8a <_vfiprintf_r+0x56>
 800cf52:	6875      	ldr	r5, [r6, #4]
 800cf54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf56:	07d9      	lsls	r1, r3, #31
 800cf58:	d405      	bmi.n	800cf66 <_vfiprintf_r+0x32>
 800cf5a:	89ab      	ldrh	r3, [r5, #12]
 800cf5c:	059a      	lsls	r2, r3, #22
 800cf5e:	d402      	bmi.n	800cf66 <_vfiprintf_r+0x32>
 800cf60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf62:	f7ff ff61 	bl	800ce28 <__retarget_lock_acquire_recursive>
 800cf66:	89ab      	ldrh	r3, [r5, #12]
 800cf68:	071b      	lsls	r3, r3, #28
 800cf6a:	d501      	bpl.n	800cf70 <_vfiprintf_r+0x3c>
 800cf6c:	692b      	ldr	r3, [r5, #16]
 800cf6e:	b9eb      	cbnz	r3, 800cfac <_vfiprintf_r+0x78>
 800cf70:	4629      	mov	r1, r5
 800cf72:	4630      	mov	r0, r6
 800cf74:	f000 f96e 	bl	800d254 <__swsetup_r>
 800cf78:	b1c0      	cbz	r0, 800cfac <_vfiprintf_r+0x78>
 800cf7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf7c:	07dc      	lsls	r4, r3, #31
 800cf7e:	d50e      	bpl.n	800cf9e <_vfiprintf_r+0x6a>
 800cf80:	f04f 30ff 	mov.w	r0, #4294967295
 800cf84:	b01d      	add	sp, #116	; 0x74
 800cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8a:	4b7b      	ldr	r3, [pc, #492]	; (800d178 <_vfiprintf_r+0x244>)
 800cf8c:	429d      	cmp	r5, r3
 800cf8e:	d101      	bne.n	800cf94 <_vfiprintf_r+0x60>
 800cf90:	68b5      	ldr	r5, [r6, #8]
 800cf92:	e7df      	b.n	800cf54 <_vfiprintf_r+0x20>
 800cf94:	4b79      	ldr	r3, [pc, #484]	; (800d17c <_vfiprintf_r+0x248>)
 800cf96:	429d      	cmp	r5, r3
 800cf98:	bf08      	it	eq
 800cf9a:	68f5      	ldreq	r5, [r6, #12]
 800cf9c:	e7da      	b.n	800cf54 <_vfiprintf_r+0x20>
 800cf9e:	89ab      	ldrh	r3, [r5, #12]
 800cfa0:	0598      	lsls	r0, r3, #22
 800cfa2:	d4ed      	bmi.n	800cf80 <_vfiprintf_r+0x4c>
 800cfa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfa6:	f7ff ff40 	bl	800ce2a <__retarget_lock_release_recursive>
 800cfaa:	e7e9      	b.n	800cf80 <_vfiprintf_r+0x4c>
 800cfac:	2300      	movs	r3, #0
 800cfae:	9309      	str	r3, [sp, #36]	; 0x24
 800cfb0:	2320      	movs	r3, #32
 800cfb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfba:	2330      	movs	r3, #48	; 0x30
 800cfbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d180 <_vfiprintf_r+0x24c>
 800cfc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfc4:	f04f 0901 	mov.w	r9, #1
 800cfc8:	4623      	mov	r3, r4
 800cfca:	469a      	mov	sl, r3
 800cfcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfd0:	b10a      	cbz	r2, 800cfd6 <_vfiprintf_r+0xa2>
 800cfd2:	2a25      	cmp	r2, #37	; 0x25
 800cfd4:	d1f9      	bne.n	800cfca <_vfiprintf_r+0x96>
 800cfd6:	ebba 0b04 	subs.w	fp, sl, r4
 800cfda:	d00b      	beq.n	800cff4 <_vfiprintf_r+0xc0>
 800cfdc:	465b      	mov	r3, fp
 800cfde:	4622      	mov	r2, r4
 800cfe0:	4629      	mov	r1, r5
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f7ff ff94 	bl	800cf10 <__sfputs_r>
 800cfe8:	3001      	adds	r0, #1
 800cfea:	f000 80aa 	beq.w	800d142 <_vfiprintf_r+0x20e>
 800cfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cff0:	445a      	add	r2, fp
 800cff2:	9209      	str	r2, [sp, #36]	; 0x24
 800cff4:	f89a 3000 	ldrb.w	r3, [sl]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f000 80a2 	beq.w	800d142 <_vfiprintf_r+0x20e>
 800cffe:	2300      	movs	r3, #0
 800d000:	f04f 32ff 	mov.w	r2, #4294967295
 800d004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d008:	f10a 0a01 	add.w	sl, sl, #1
 800d00c:	9304      	str	r3, [sp, #16]
 800d00e:	9307      	str	r3, [sp, #28]
 800d010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d014:	931a      	str	r3, [sp, #104]	; 0x68
 800d016:	4654      	mov	r4, sl
 800d018:	2205      	movs	r2, #5
 800d01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d01e:	4858      	ldr	r0, [pc, #352]	; (800d180 <_vfiprintf_r+0x24c>)
 800d020:	f7f3 f8f6 	bl	8000210 <memchr>
 800d024:	9a04      	ldr	r2, [sp, #16]
 800d026:	b9d8      	cbnz	r0, 800d060 <_vfiprintf_r+0x12c>
 800d028:	06d1      	lsls	r1, r2, #27
 800d02a:	bf44      	itt	mi
 800d02c:	2320      	movmi	r3, #32
 800d02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d032:	0713      	lsls	r3, r2, #28
 800d034:	bf44      	itt	mi
 800d036:	232b      	movmi	r3, #43	; 0x2b
 800d038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d03c:	f89a 3000 	ldrb.w	r3, [sl]
 800d040:	2b2a      	cmp	r3, #42	; 0x2a
 800d042:	d015      	beq.n	800d070 <_vfiprintf_r+0x13c>
 800d044:	9a07      	ldr	r2, [sp, #28]
 800d046:	4654      	mov	r4, sl
 800d048:	2000      	movs	r0, #0
 800d04a:	f04f 0c0a 	mov.w	ip, #10
 800d04e:	4621      	mov	r1, r4
 800d050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d054:	3b30      	subs	r3, #48	; 0x30
 800d056:	2b09      	cmp	r3, #9
 800d058:	d94e      	bls.n	800d0f8 <_vfiprintf_r+0x1c4>
 800d05a:	b1b0      	cbz	r0, 800d08a <_vfiprintf_r+0x156>
 800d05c:	9207      	str	r2, [sp, #28]
 800d05e:	e014      	b.n	800d08a <_vfiprintf_r+0x156>
 800d060:	eba0 0308 	sub.w	r3, r0, r8
 800d064:	fa09 f303 	lsl.w	r3, r9, r3
 800d068:	4313      	orrs	r3, r2
 800d06a:	9304      	str	r3, [sp, #16]
 800d06c:	46a2      	mov	sl, r4
 800d06e:	e7d2      	b.n	800d016 <_vfiprintf_r+0xe2>
 800d070:	9b03      	ldr	r3, [sp, #12]
 800d072:	1d19      	adds	r1, r3, #4
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	9103      	str	r1, [sp, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	bfbb      	ittet	lt
 800d07c:	425b      	neglt	r3, r3
 800d07e:	f042 0202 	orrlt.w	r2, r2, #2
 800d082:	9307      	strge	r3, [sp, #28]
 800d084:	9307      	strlt	r3, [sp, #28]
 800d086:	bfb8      	it	lt
 800d088:	9204      	strlt	r2, [sp, #16]
 800d08a:	7823      	ldrb	r3, [r4, #0]
 800d08c:	2b2e      	cmp	r3, #46	; 0x2e
 800d08e:	d10c      	bne.n	800d0aa <_vfiprintf_r+0x176>
 800d090:	7863      	ldrb	r3, [r4, #1]
 800d092:	2b2a      	cmp	r3, #42	; 0x2a
 800d094:	d135      	bne.n	800d102 <_vfiprintf_r+0x1ce>
 800d096:	9b03      	ldr	r3, [sp, #12]
 800d098:	1d1a      	adds	r2, r3, #4
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	9203      	str	r2, [sp, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfb8      	it	lt
 800d0a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0a6:	3402      	adds	r4, #2
 800d0a8:	9305      	str	r3, [sp, #20]
 800d0aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d190 <_vfiprintf_r+0x25c>
 800d0ae:	7821      	ldrb	r1, [r4, #0]
 800d0b0:	2203      	movs	r2, #3
 800d0b2:	4650      	mov	r0, sl
 800d0b4:	f7f3 f8ac 	bl	8000210 <memchr>
 800d0b8:	b140      	cbz	r0, 800d0cc <_vfiprintf_r+0x198>
 800d0ba:	2340      	movs	r3, #64	; 0x40
 800d0bc:	eba0 000a 	sub.w	r0, r0, sl
 800d0c0:	fa03 f000 	lsl.w	r0, r3, r0
 800d0c4:	9b04      	ldr	r3, [sp, #16]
 800d0c6:	4303      	orrs	r3, r0
 800d0c8:	3401      	adds	r4, #1
 800d0ca:	9304      	str	r3, [sp, #16]
 800d0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0d0:	482c      	ldr	r0, [pc, #176]	; (800d184 <_vfiprintf_r+0x250>)
 800d0d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0d6:	2206      	movs	r2, #6
 800d0d8:	f7f3 f89a 	bl	8000210 <memchr>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d03f      	beq.n	800d160 <_vfiprintf_r+0x22c>
 800d0e0:	4b29      	ldr	r3, [pc, #164]	; (800d188 <_vfiprintf_r+0x254>)
 800d0e2:	bb1b      	cbnz	r3, 800d12c <_vfiprintf_r+0x1f8>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	3307      	adds	r3, #7
 800d0e8:	f023 0307 	bic.w	r3, r3, #7
 800d0ec:	3308      	adds	r3, #8
 800d0ee:	9303      	str	r3, [sp, #12]
 800d0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f2:	443b      	add	r3, r7
 800d0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f6:	e767      	b.n	800cfc8 <_vfiprintf_r+0x94>
 800d0f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	2001      	movs	r0, #1
 800d100:	e7a5      	b.n	800d04e <_vfiprintf_r+0x11a>
 800d102:	2300      	movs	r3, #0
 800d104:	3401      	adds	r4, #1
 800d106:	9305      	str	r3, [sp, #20]
 800d108:	4619      	mov	r1, r3
 800d10a:	f04f 0c0a 	mov.w	ip, #10
 800d10e:	4620      	mov	r0, r4
 800d110:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d114:	3a30      	subs	r2, #48	; 0x30
 800d116:	2a09      	cmp	r2, #9
 800d118:	d903      	bls.n	800d122 <_vfiprintf_r+0x1ee>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0c5      	beq.n	800d0aa <_vfiprintf_r+0x176>
 800d11e:	9105      	str	r1, [sp, #20]
 800d120:	e7c3      	b.n	800d0aa <_vfiprintf_r+0x176>
 800d122:	fb0c 2101 	mla	r1, ip, r1, r2
 800d126:	4604      	mov	r4, r0
 800d128:	2301      	movs	r3, #1
 800d12a:	e7f0      	b.n	800d10e <_vfiprintf_r+0x1da>
 800d12c:	ab03      	add	r3, sp, #12
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	462a      	mov	r2, r5
 800d132:	4b16      	ldr	r3, [pc, #88]	; (800d18c <_vfiprintf_r+0x258>)
 800d134:	a904      	add	r1, sp, #16
 800d136:	4630      	mov	r0, r6
 800d138:	f7fc ff8e 	bl	800a058 <_printf_float>
 800d13c:	4607      	mov	r7, r0
 800d13e:	1c78      	adds	r0, r7, #1
 800d140:	d1d6      	bne.n	800d0f0 <_vfiprintf_r+0x1bc>
 800d142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d144:	07d9      	lsls	r1, r3, #31
 800d146:	d405      	bmi.n	800d154 <_vfiprintf_r+0x220>
 800d148:	89ab      	ldrh	r3, [r5, #12]
 800d14a:	059a      	lsls	r2, r3, #22
 800d14c:	d402      	bmi.n	800d154 <_vfiprintf_r+0x220>
 800d14e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d150:	f7ff fe6b 	bl	800ce2a <__retarget_lock_release_recursive>
 800d154:	89ab      	ldrh	r3, [r5, #12]
 800d156:	065b      	lsls	r3, r3, #25
 800d158:	f53f af12 	bmi.w	800cf80 <_vfiprintf_r+0x4c>
 800d15c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d15e:	e711      	b.n	800cf84 <_vfiprintf_r+0x50>
 800d160:	ab03      	add	r3, sp, #12
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	462a      	mov	r2, r5
 800d166:	4b09      	ldr	r3, [pc, #36]	; (800d18c <_vfiprintf_r+0x258>)
 800d168:	a904      	add	r1, sp, #16
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7fd fa18 	bl	800a5a0 <_printf_i>
 800d170:	e7e4      	b.n	800d13c <_vfiprintf_r+0x208>
 800d172:	bf00      	nop
 800d174:	0800e934 	.word	0x0800e934
 800d178:	0800e954 	.word	0x0800e954
 800d17c:	0800e914 	.word	0x0800e914
 800d180:	0800e8ac 	.word	0x0800e8ac
 800d184:	0800e8b6 	.word	0x0800e8b6
 800d188:	0800a059 	.word	0x0800a059
 800d18c:	0800cf11 	.word	0x0800cf11
 800d190:	0800e8b2 	.word	0x0800e8b2

0800d194 <__swbuf_r>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	460e      	mov	r6, r1
 800d198:	4614      	mov	r4, r2
 800d19a:	4605      	mov	r5, r0
 800d19c:	b118      	cbz	r0, 800d1a6 <__swbuf_r+0x12>
 800d19e:	6983      	ldr	r3, [r0, #24]
 800d1a0:	b90b      	cbnz	r3, 800d1a6 <__swbuf_r+0x12>
 800d1a2:	f7ff fd91 	bl	800ccc8 <__sinit>
 800d1a6:	4b21      	ldr	r3, [pc, #132]	; (800d22c <__swbuf_r+0x98>)
 800d1a8:	429c      	cmp	r4, r3
 800d1aa:	d12b      	bne.n	800d204 <__swbuf_r+0x70>
 800d1ac:	686c      	ldr	r4, [r5, #4]
 800d1ae:	69a3      	ldr	r3, [r4, #24]
 800d1b0:	60a3      	str	r3, [r4, #8]
 800d1b2:	89a3      	ldrh	r3, [r4, #12]
 800d1b4:	071a      	lsls	r2, r3, #28
 800d1b6:	d52f      	bpl.n	800d218 <__swbuf_r+0x84>
 800d1b8:	6923      	ldr	r3, [r4, #16]
 800d1ba:	b36b      	cbz	r3, 800d218 <__swbuf_r+0x84>
 800d1bc:	6923      	ldr	r3, [r4, #16]
 800d1be:	6820      	ldr	r0, [r4, #0]
 800d1c0:	1ac0      	subs	r0, r0, r3
 800d1c2:	6963      	ldr	r3, [r4, #20]
 800d1c4:	b2f6      	uxtb	r6, r6
 800d1c6:	4283      	cmp	r3, r0
 800d1c8:	4637      	mov	r7, r6
 800d1ca:	dc04      	bgt.n	800d1d6 <__swbuf_r+0x42>
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	f7ff fce6 	bl	800cba0 <_fflush_r>
 800d1d4:	bb30      	cbnz	r0, 800d224 <__swbuf_r+0x90>
 800d1d6:	68a3      	ldr	r3, [r4, #8]
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	60a3      	str	r3, [r4, #8]
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	1c5a      	adds	r2, r3, #1
 800d1e0:	6022      	str	r2, [r4, #0]
 800d1e2:	701e      	strb	r6, [r3, #0]
 800d1e4:	6963      	ldr	r3, [r4, #20]
 800d1e6:	3001      	adds	r0, #1
 800d1e8:	4283      	cmp	r3, r0
 800d1ea:	d004      	beq.n	800d1f6 <__swbuf_r+0x62>
 800d1ec:	89a3      	ldrh	r3, [r4, #12]
 800d1ee:	07db      	lsls	r3, r3, #31
 800d1f0:	d506      	bpl.n	800d200 <__swbuf_r+0x6c>
 800d1f2:	2e0a      	cmp	r6, #10
 800d1f4:	d104      	bne.n	800d200 <__swbuf_r+0x6c>
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	f7ff fcd1 	bl	800cba0 <_fflush_r>
 800d1fe:	b988      	cbnz	r0, 800d224 <__swbuf_r+0x90>
 800d200:	4638      	mov	r0, r7
 800d202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d204:	4b0a      	ldr	r3, [pc, #40]	; (800d230 <__swbuf_r+0x9c>)
 800d206:	429c      	cmp	r4, r3
 800d208:	d101      	bne.n	800d20e <__swbuf_r+0x7a>
 800d20a:	68ac      	ldr	r4, [r5, #8]
 800d20c:	e7cf      	b.n	800d1ae <__swbuf_r+0x1a>
 800d20e:	4b09      	ldr	r3, [pc, #36]	; (800d234 <__swbuf_r+0xa0>)
 800d210:	429c      	cmp	r4, r3
 800d212:	bf08      	it	eq
 800d214:	68ec      	ldreq	r4, [r5, #12]
 800d216:	e7ca      	b.n	800d1ae <__swbuf_r+0x1a>
 800d218:	4621      	mov	r1, r4
 800d21a:	4628      	mov	r0, r5
 800d21c:	f000 f81a 	bl	800d254 <__swsetup_r>
 800d220:	2800      	cmp	r0, #0
 800d222:	d0cb      	beq.n	800d1bc <__swbuf_r+0x28>
 800d224:	f04f 37ff 	mov.w	r7, #4294967295
 800d228:	e7ea      	b.n	800d200 <__swbuf_r+0x6c>
 800d22a:	bf00      	nop
 800d22c:	0800e934 	.word	0x0800e934
 800d230:	0800e954 	.word	0x0800e954
 800d234:	0800e914 	.word	0x0800e914

0800d238 <__ascii_wctomb>:
 800d238:	b149      	cbz	r1, 800d24e <__ascii_wctomb+0x16>
 800d23a:	2aff      	cmp	r2, #255	; 0xff
 800d23c:	bf85      	ittet	hi
 800d23e:	238a      	movhi	r3, #138	; 0x8a
 800d240:	6003      	strhi	r3, [r0, #0]
 800d242:	700a      	strbls	r2, [r1, #0]
 800d244:	f04f 30ff 	movhi.w	r0, #4294967295
 800d248:	bf98      	it	ls
 800d24a:	2001      	movls	r0, #1
 800d24c:	4770      	bx	lr
 800d24e:	4608      	mov	r0, r1
 800d250:	4770      	bx	lr
	...

0800d254 <__swsetup_r>:
 800d254:	4b32      	ldr	r3, [pc, #200]	; (800d320 <__swsetup_r+0xcc>)
 800d256:	b570      	push	{r4, r5, r6, lr}
 800d258:	681d      	ldr	r5, [r3, #0]
 800d25a:	4606      	mov	r6, r0
 800d25c:	460c      	mov	r4, r1
 800d25e:	b125      	cbz	r5, 800d26a <__swsetup_r+0x16>
 800d260:	69ab      	ldr	r3, [r5, #24]
 800d262:	b913      	cbnz	r3, 800d26a <__swsetup_r+0x16>
 800d264:	4628      	mov	r0, r5
 800d266:	f7ff fd2f 	bl	800ccc8 <__sinit>
 800d26a:	4b2e      	ldr	r3, [pc, #184]	; (800d324 <__swsetup_r+0xd0>)
 800d26c:	429c      	cmp	r4, r3
 800d26e:	d10f      	bne.n	800d290 <__swsetup_r+0x3c>
 800d270:	686c      	ldr	r4, [r5, #4]
 800d272:	89a3      	ldrh	r3, [r4, #12]
 800d274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d278:	0719      	lsls	r1, r3, #28
 800d27a:	d42c      	bmi.n	800d2d6 <__swsetup_r+0x82>
 800d27c:	06dd      	lsls	r5, r3, #27
 800d27e:	d411      	bmi.n	800d2a4 <__swsetup_r+0x50>
 800d280:	2309      	movs	r3, #9
 800d282:	6033      	str	r3, [r6, #0]
 800d284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d288:	81a3      	strh	r3, [r4, #12]
 800d28a:	f04f 30ff 	mov.w	r0, #4294967295
 800d28e:	e03e      	b.n	800d30e <__swsetup_r+0xba>
 800d290:	4b25      	ldr	r3, [pc, #148]	; (800d328 <__swsetup_r+0xd4>)
 800d292:	429c      	cmp	r4, r3
 800d294:	d101      	bne.n	800d29a <__swsetup_r+0x46>
 800d296:	68ac      	ldr	r4, [r5, #8]
 800d298:	e7eb      	b.n	800d272 <__swsetup_r+0x1e>
 800d29a:	4b24      	ldr	r3, [pc, #144]	; (800d32c <__swsetup_r+0xd8>)
 800d29c:	429c      	cmp	r4, r3
 800d29e:	bf08      	it	eq
 800d2a0:	68ec      	ldreq	r4, [r5, #12]
 800d2a2:	e7e6      	b.n	800d272 <__swsetup_r+0x1e>
 800d2a4:	0758      	lsls	r0, r3, #29
 800d2a6:	d512      	bpl.n	800d2ce <__swsetup_r+0x7a>
 800d2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2aa:	b141      	cbz	r1, 800d2be <__swsetup_r+0x6a>
 800d2ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2b0:	4299      	cmp	r1, r3
 800d2b2:	d002      	beq.n	800d2ba <__swsetup_r+0x66>
 800d2b4:	4630      	mov	r0, r6
 800d2b6:	f7fc fd4f 	bl	8009d58 <_free_r>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	6363      	str	r3, [r4, #52]	; 0x34
 800d2be:	89a3      	ldrh	r3, [r4, #12]
 800d2c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	6063      	str	r3, [r4, #4]
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	89a3      	ldrh	r3, [r4, #12]
 800d2d0:	f043 0308 	orr.w	r3, r3, #8
 800d2d4:	81a3      	strh	r3, [r4, #12]
 800d2d6:	6923      	ldr	r3, [r4, #16]
 800d2d8:	b94b      	cbnz	r3, 800d2ee <__swsetup_r+0x9a>
 800d2da:	89a3      	ldrh	r3, [r4, #12]
 800d2dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2e4:	d003      	beq.n	800d2ee <__swsetup_r+0x9a>
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	f000 f84d 	bl	800d388 <__smakebuf_r>
 800d2ee:	89a0      	ldrh	r0, [r4, #12]
 800d2f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2f4:	f010 0301 	ands.w	r3, r0, #1
 800d2f8:	d00a      	beq.n	800d310 <__swsetup_r+0xbc>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	60a3      	str	r3, [r4, #8]
 800d2fe:	6963      	ldr	r3, [r4, #20]
 800d300:	425b      	negs	r3, r3
 800d302:	61a3      	str	r3, [r4, #24]
 800d304:	6923      	ldr	r3, [r4, #16]
 800d306:	b943      	cbnz	r3, 800d31a <__swsetup_r+0xc6>
 800d308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d30c:	d1ba      	bne.n	800d284 <__swsetup_r+0x30>
 800d30e:	bd70      	pop	{r4, r5, r6, pc}
 800d310:	0781      	lsls	r1, r0, #30
 800d312:	bf58      	it	pl
 800d314:	6963      	ldrpl	r3, [r4, #20]
 800d316:	60a3      	str	r3, [r4, #8]
 800d318:	e7f4      	b.n	800d304 <__swsetup_r+0xb0>
 800d31a:	2000      	movs	r0, #0
 800d31c:	e7f7      	b.n	800d30e <__swsetup_r+0xba>
 800d31e:	bf00      	nop
 800d320:	20000118 	.word	0x20000118
 800d324:	0800e934 	.word	0x0800e934
 800d328:	0800e954 	.word	0x0800e954
 800d32c:	0800e914 	.word	0x0800e914

0800d330 <abort>:
 800d330:	b508      	push	{r3, lr}
 800d332:	2006      	movs	r0, #6
 800d334:	f000 f898 	bl	800d468 <raise>
 800d338:	2001      	movs	r0, #1
 800d33a:	f7f6 f98d 	bl	8003658 <_exit>

0800d33e <__swhatbuf_r>:
 800d33e:	b570      	push	{r4, r5, r6, lr}
 800d340:	460e      	mov	r6, r1
 800d342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d346:	2900      	cmp	r1, #0
 800d348:	b096      	sub	sp, #88	; 0x58
 800d34a:	4614      	mov	r4, r2
 800d34c:	461d      	mov	r5, r3
 800d34e:	da08      	bge.n	800d362 <__swhatbuf_r+0x24>
 800d350:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d354:	2200      	movs	r2, #0
 800d356:	602a      	str	r2, [r5, #0]
 800d358:	061a      	lsls	r2, r3, #24
 800d35a:	d410      	bmi.n	800d37e <__swhatbuf_r+0x40>
 800d35c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d360:	e00e      	b.n	800d380 <__swhatbuf_r+0x42>
 800d362:	466a      	mov	r2, sp
 800d364:	f000 f89c 	bl	800d4a0 <_fstat_r>
 800d368:	2800      	cmp	r0, #0
 800d36a:	dbf1      	blt.n	800d350 <__swhatbuf_r+0x12>
 800d36c:	9a01      	ldr	r2, [sp, #4]
 800d36e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d372:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d376:	425a      	negs	r2, r3
 800d378:	415a      	adcs	r2, r3
 800d37a:	602a      	str	r2, [r5, #0]
 800d37c:	e7ee      	b.n	800d35c <__swhatbuf_r+0x1e>
 800d37e:	2340      	movs	r3, #64	; 0x40
 800d380:	2000      	movs	r0, #0
 800d382:	6023      	str	r3, [r4, #0]
 800d384:	b016      	add	sp, #88	; 0x58
 800d386:	bd70      	pop	{r4, r5, r6, pc}

0800d388 <__smakebuf_r>:
 800d388:	898b      	ldrh	r3, [r1, #12]
 800d38a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d38c:	079d      	lsls	r5, r3, #30
 800d38e:	4606      	mov	r6, r0
 800d390:	460c      	mov	r4, r1
 800d392:	d507      	bpl.n	800d3a4 <__smakebuf_r+0x1c>
 800d394:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	6123      	str	r3, [r4, #16]
 800d39c:	2301      	movs	r3, #1
 800d39e:	6163      	str	r3, [r4, #20]
 800d3a0:	b002      	add	sp, #8
 800d3a2:	bd70      	pop	{r4, r5, r6, pc}
 800d3a4:	ab01      	add	r3, sp, #4
 800d3a6:	466a      	mov	r2, sp
 800d3a8:	f7ff ffc9 	bl	800d33e <__swhatbuf_r>
 800d3ac:	9900      	ldr	r1, [sp, #0]
 800d3ae:	4605      	mov	r5, r0
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	f7fc fd3d 	bl	8009e30 <_malloc_r>
 800d3b6:	b948      	cbnz	r0, 800d3cc <__smakebuf_r+0x44>
 800d3b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3bc:	059a      	lsls	r2, r3, #22
 800d3be:	d4ef      	bmi.n	800d3a0 <__smakebuf_r+0x18>
 800d3c0:	f023 0303 	bic.w	r3, r3, #3
 800d3c4:	f043 0302 	orr.w	r3, r3, #2
 800d3c8:	81a3      	strh	r3, [r4, #12]
 800d3ca:	e7e3      	b.n	800d394 <__smakebuf_r+0xc>
 800d3cc:	4b0d      	ldr	r3, [pc, #52]	; (800d404 <__smakebuf_r+0x7c>)
 800d3ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	6020      	str	r0, [r4, #0]
 800d3d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3d8:	81a3      	strh	r3, [r4, #12]
 800d3da:	9b00      	ldr	r3, [sp, #0]
 800d3dc:	6163      	str	r3, [r4, #20]
 800d3de:	9b01      	ldr	r3, [sp, #4]
 800d3e0:	6120      	str	r0, [r4, #16]
 800d3e2:	b15b      	cbz	r3, 800d3fc <__smakebuf_r+0x74>
 800d3e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	f000 f86b 	bl	800d4c4 <_isatty_r>
 800d3ee:	b128      	cbz	r0, 800d3fc <__smakebuf_r+0x74>
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	f023 0303 	bic.w	r3, r3, #3
 800d3f6:	f043 0301 	orr.w	r3, r3, #1
 800d3fa:	81a3      	strh	r3, [r4, #12]
 800d3fc:	89a0      	ldrh	r0, [r4, #12]
 800d3fe:	4305      	orrs	r5, r0
 800d400:	81a5      	strh	r5, [r4, #12]
 800d402:	e7cd      	b.n	800d3a0 <__smakebuf_r+0x18>
 800d404:	0800cc61 	.word	0x0800cc61

0800d408 <_malloc_usable_size_r>:
 800d408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d40c:	1f18      	subs	r0, r3, #4
 800d40e:	2b00      	cmp	r3, #0
 800d410:	bfbc      	itt	lt
 800d412:	580b      	ldrlt	r3, [r1, r0]
 800d414:	18c0      	addlt	r0, r0, r3
 800d416:	4770      	bx	lr

0800d418 <_raise_r>:
 800d418:	291f      	cmp	r1, #31
 800d41a:	b538      	push	{r3, r4, r5, lr}
 800d41c:	4604      	mov	r4, r0
 800d41e:	460d      	mov	r5, r1
 800d420:	d904      	bls.n	800d42c <_raise_r+0x14>
 800d422:	2316      	movs	r3, #22
 800d424:	6003      	str	r3, [r0, #0]
 800d426:	f04f 30ff 	mov.w	r0, #4294967295
 800d42a:	bd38      	pop	{r3, r4, r5, pc}
 800d42c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d42e:	b112      	cbz	r2, 800d436 <_raise_r+0x1e>
 800d430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d434:	b94b      	cbnz	r3, 800d44a <_raise_r+0x32>
 800d436:	4620      	mov	r0, r4
 800d438:	f000 f830 	bl	800d49c <_getpid_r>
 800d43c:	462a      	mov	r2, r5
 800d43e:	4601      	mov	r1, r0
 800d440:	4620      	mov	r0, r4
 800d442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d446:	f000 b817 	b.w	800d478 <_kill_r>
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d00a      	beq.n	800d464 <_raise_r+0x4c>
 800d44e:	1c59      	adds	r1, r3, #1
 800d450:	d103      	bne.n	800d45a <_raise_r+0x42>
 800d452:	2316      	movs	r3, #22
 800d454:	6003      	str	r3, [r0, #0]
 800d456:	2001      	movs	r0, #1
 800d458:	e7e7      	b.n	800d42a <_raise_r+0x12>
 800d45a:	2400      	movs	r4, #0
 800d45c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d460:	4628      	mov	r0, r5
 800d462:	4798      	blx	r3
 800d464:	2000      	movs	r0, #0
 800d466:	e7e0      	b.n	800d42a <_raise_r+0x12>

0800d468 <raise>:
 800d468:	4b02      	ldr	r3, [pc, #8]	; (800d474 <raise+0xc>)
 800d46a:	4601      	mov	r1, r0
 800d46c:	6818      	ldr	r0, [r3, #0]
 800d46e:	f7ff bfd3 	b.w	800d418 <_raise_r>
 800d472:	bf00      	nop
 800d474:	20000118 	.word	0x20000118

0800d478 <_kill_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d07      	ldr	r5, [pc, #28]	; (800d498 <_kill_r+0x20>)
 800d47c:	2300      	movs	r3, #0
 800d47e:	4604      	mov	r4, r0
 800d480:	4608      	mov	r0, r1
 800d482:	4611      	mov	r1, r2
 800d484:	602b      	str	r3, [r5, #0]
 800d486:	f7f6 f8d7 	bl	8003638 <_kill>
 800d48a:	1c43      	adds	r3, r0, #1
 800d48c:	d102      	bne.n	800d494 <_kill_r+0x1c>
 800d48e:	682b      	ldr	r3, [r5, #0]
 800d490:	b103      	cbz	r3, 800d494 <_kill_r+0x1c>
 800d492:	6023      	str	r3, [r4, #0]
 800d494:	bd38      	pop	{r3, r4, r5, pc}
 800d496:	bf00      	nop
 800d498:	20000b64 	.word	0x20000b64

0800d49c <_getpid_r>:
 800d49c:	f7f6 b8c4 	b.w	8003628 <_getpid>

0800d4a0 <_fstat_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4d07      	ldr	r5, [pc, #28]	; (800d4c0 <_fstat_r+0x20>)
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	4608      	mov	r0, r1
 800d4aa:	4611      	mov	r1, r2
 800d4ac:	602b      	str	r3, [r5, #0]
 800d4ae:	f7f6 f922 	bl	80036f6 <_fstat>
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	d102      	bne.n	800d4bc <_fstat_r+0x1c>
 800d4b6:	682b      	ldr	r3, [r5, #0]
 800d4b8:	b103      	cbz	r3, 800d4bc <_fstat_r+0x1c>
 800d4ba:	6023      	str	r3, [r4, #0]
 800d4bc:	bd38      	pop	{r3, r4, r5, pc}
 800d4be:	bf00      	nop
 800d4c0:	20000b64 	.word	0x20000b64

0800d4c4 <_isatty_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4d06      	ldr	r5, [pc, #24]	; (800d4e0 <_isatty_r+0x1c>)
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	4608      	mov	r0, r1
 800d4ce:	602b      	str	r3, [r5, #0]
 800d4d0:	f7f6 f921 	bl	8003716 <_isatty>
 800d4d4:	1c43      	adds	r3, r0, #1
 800d4d6:	d102      	bne.n	800d4de <_isatty_r+0x1a>
 800d4d8:	682b      	ldr	r3, [r5, #0]
 800d4da:	b103      	cbz	r3, 800d4de <_isatty_r+0x1a>
 800d4dc:	6023      	str	r3, [r4, #0]
 800d4de:	bd38      	pop	{r3, r4, r5, pc}
 800d4e0:	20000b64 	.word	0x20000b64
 800d4e4:	00000000 	.word	0x00000000

0800d4e8 <atan>:
 800d4e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	ec55 4b10 	vmov	r4, r5, d0
 800d4f0:	4bc3      	ldr	r3, [pc, #780]	; (800d800 <atan+0x318>)
 800d4f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d4f6:	429e      	cmp	r6, r3
 800d4f8:	46ab      	mov	fp, r5
 800d4fa:	dd18      	ble.n	800d52e <atan+0x46>
 800d4fc:	4bc1      	ldr	r3, [pc, #772]	; (800d804 <atan+0x31c>)
 800d4fe:	429e      	cmp	r6, r3
 800d500:	dc01      	bgt.n	800d506 <atan+0x1e>
 800d502:	d109      	bne.n	800d518 <atan+0x30>
 800d504:	b144      	cbz	r4, 800d518 <atan+0x30>
 800d506:	4622      	mov	r2, r4
 800d508:	462b      	mov	r3, r5
 800d50a:	4620      	mov	r0, r4
 800d50c:	4629      	mov	r1, r5
 800d50e:	f7f2 fed5 	bl	80002bc <__adddf3>
 800d512:	4604      	mov	r4, r0
 800d514:	460d      	mov	r5, r1
 800d516:	e006      	b.n	800d526 <atan+0x3e>
 800d518:	f1bb 0f00 	cmp.w	fp, #0
 800d51c:	f300 8131 	bgt.w	800d782 <atan+0x29a>
 800d520:	a59b      	add	r5, pc, #620	; (adr r5, 800d790 <atan+0x2a8>)
 800d522:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d526:	ec45 4b10 	vmov	d0, r4, r5
 800d52a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52e:	4bb6      	ldr	r3, [pc, #728]	; (800d808 <atan+0x320>)
 800d530:	429e      	cmp	r6, r3
 800d532:	dc14      	bgt.n	800d55e <atan+0x76>
 800d534:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d538:	429e      	cmp	r6, r3
 800d53a:	dc0d      	bgt.n	800d558 <atan+0x70>
 800d53c:	a396      	add	r3, pc, #600	; (adr r3, 800d798 <atan+0x2b0>)
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	ee10 0a10 	vmov	r0, s0
 800d546:	4629      	mov	r1, r5
 800d548:	f7f2 feb8 	bl	80002bc <__adddf3>
 800d54c:	4baf      	ldr	r3, [pc, #700]	; (800d80c <atan+0x324>)
 800d54e:	2200      	movs	r2, #0
 800d550:	f7f3 fafa 	bl	8000b48 <__aeabi_dcmpgt>
 800d554:	2800      	cmp	r0, #0
 800d556:	d1e6      	bne.n	800d526 <atan+0x3e>
 800d558:	f04f 3aff 	mov.w	sl, #4294967295
 800d55c:	e02b      	b.n	800d5b6 <atan+0xce>
 800d55e:	f000 f963 	bl	800d828 <fabs>
 800d562:	4bab      	ldr	r3, [pc, #684]	; (800d810 <atan+0x328>)
 800d564:	429e      	cmp	r6, r3
 800d566:	ec55 4b10 	vmov	r4, r5, d0
 800d56a:	f300 80bf 	bgt.w	800d6ec <atan+0x204>
 800d56e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d572:	429e      	cmp	r6, r3
 800d574:	f300 80a0 	bgt.w	800d6b8 <atan+0x1d0>
 800d578:	ee10 2a10 	vmov	r2, s0
 800d57c:	ee10 0a10 	vmov	r0, s0
 800d580:	462b      	mov	r3, r5
 800d582:	4629      	mov	r1, r5
 800d584:	f7f2 fe9a 	bl	80002bc <__adddf3>
 800d588:	4ba0      	ldr	r3, [pc, #640]	; (800d80c <atan+0x324>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	f7f2 fe94 	bl	80002b8 <__aeabi_dsub>
 800d590:	2200      	movs	r2, #0
 800d592:	4606      	mov	r6, r0
 800d594:	460f      	mov	r7, r1
 800d596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d59a:	4620      	mov	r0, r4
 800d59c:	4629      	mov	r1, r5
 800d59e:	f7f2 fe8d 	bl	80002bc <__adddf3>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	4639      	mov	r1, r7
 800d5aa:	f7f3 f967 	bl	800087c <__aeabi_ddiv>
 800d5ae:	f04f 0a00 	mov.w	sl, #0
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	460d      	mov	r5, r1
 800d5b6:	4622      	mov	r2, r4
 800d5b8:	462b      	mov	r3, r5
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	4629      	mov	r1, r5
 800d5be:	f7f3 f833 	bl	8000628 <__aeabi_dmul>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	4680      	mov	r8, r0
 800d5c8:	4689      	mov	r9, r1
 800d5ca:	f7f3 f82d 	bl	8000628 <__aeabi_dmul>
 800d5ce:	a374      	add	r3, pc, #464	; (adr r3, 800d7a0 <atan+0x2b8>)
 800d5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	460f      	mov	r7, r1
 800d5d8:	f7f3 f826 	bl	8000628 <__aeabi_dmul>
 800d5dc:	a372      	add	r3, pc, #456	; (adr r3, 800d7a8 <atan+0x2c0>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	f7f2 fe6b 	bl	80002bc <__adddf3>
 800d5e6:	4632      	mov	r2, r6
 800d5e8:	463b      	mov	r3, r7
 800d5ea:	f7f3 f81d 	bl	8000628 <__aeabi_dmul>
 800d5ee:	a370      	add	r3, pc, #448	; (adr r3, 800d7b0 <atan+0x2c8>)
 800d5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f4:	f7f2 fe62 	bl	80002bc <__adddf3>
 800d5f8:	4632      	mov	r2, r6
 800d5fa:	463b      	mov	r3, r7
 800d5fc:	f7f3 f814 	bl	8000628 <__aeabi_dmul>
 800d600:	a36d      	add	r3, pc, #436	; (adr r3, 800d7b8 <atan+0x2d0>)
 800d602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d606:	f7f2 fe59 	bl	80002bc <__adddf3>
 800d60a:	4632      	mov	r2, r6
 800d60c:	463b      	mov	r3, r7
 800d60e:	f7f3 f80b 	bl	8000628 <__aeabi_dmul>
 800d612:	a36b      	add	r3, pc, #428	; (adr r3, 800d7c0 <atan+0x2d8>)
 800d614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d618:	f7f2 fe50 	bl	80002bc <__adddf3>
 800d61c:	4632      	mov	r2, r6
 800d61e:	463b      	mov	r3, r7
 800d620:	f7f3 f802 	bl	8000628 <__aeabi_dmul>
 800d624:	a368      	add	r3, pc, #416	; (adr r3, 800d7c8 <atan+0x2e0>)
 800d626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62a:	f7f2 fe47 	bl	80002bc <__adddf3>
 800d62e:	4642      	mov	r2, r8
 800d630:	464b      	mov	r3, r9
 800d632:	f7f2 fff9 	bl	8000628 <__aeabi_dmul>
 800d636:	a366      	add	r3, pc, #408	; (adr r3, 800d7d0 <atan+0x2e8>)
 800d638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63c:	4680      	mov	r8, r0
 800d63e:	4689      	mov	r9, r1
 800d640:	4630      	mov	r0, r6
 800d642:	4639      	mov	r1, r7
 800d644:	f7f2 fff0 	bl	8000628 <__aeabi_dmul>
 800d648:	a363      	add	r3, pc, #396	; (adr r3, 800d7d8 <atan+0x2f0>)
 800d64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64e:	f7f2 fe33 	bl	80002b8 <__aeabi_dsub>
 800d652:	4632      	mov	r2, r6
 800d654:	463b      	mov	r3, r7
 800d656:	f7f2 ffe7 	bl	8000628 <__aeabi_dmul>
 800d65a:	a361      	add	r3, pc, #388	; (adr r3, 800d7e0 <atan+0x2f8>)
 800d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d660:	f7f2 fe2a 	bl	80002b8 <__aeabi_dsub>
 800d664:	4632      	mov	r2, r6
 800d666:	463b      	mov	r3, r7
 800d668:	f7f2 ffde 	bl	8000628 <__aeabi_dmul>
 800d66c:	a35e      	add	r3, pc, #376	; (adr r3, 800d7e8 <atan+0x300>)
 800d66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d672:	f7f2 fe21 	bl	80002b8 <__aeabi_dsub>
 800d676:	4632      	mov	r2, r6
 800d678:	463b      	mov	r3, r7
 800d67a:	f7f2 ffd5 	bl	8000628 <__aeabi_dmul>
 800d67e:	a35c      	add	r3, pc, #368	; (adr r3, 800d7f0 <atan+0x308>)
 800d680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d684:	f7f2 fe18 	bl	80002b8 <__aeabi_dsub>
 800d688:	4632      	mov	r2, r6
 800d68a:	463b      	mov	r3, r7
 800d68c:	f7f2 ffcc 	bl	8000628 <__aeabi_dmul>
 800d690:	4602      	mov	r2, r0
 800d692:	460b      	mov	r3, r1
 800d694:	4640      	mov	r0, r8
 800d696:	4649      	mov	r1, r9
 800d698:	f7f2 fe10 	bl	80002bc <__adddf3>
 800d69c:	4622      	mov	r2, r4
 800d69e:	462b      	mov	r3, r5
 800d6a0:	f7f2 ffc2 	bl	8000628 <__aeabi_dmul>
 800d6a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	d14b      	bne.n	800d746 <atan+0x25e>
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	f7f2 fe01 	bl	80002b8 <__aeabi_dsub>
 800d6b6:	e72c      	b.n	800d512 <atan+0x2a>
 800d6b8:	ee10 0a10 	vmov	r0, s0
 800d6bc:	4b53      	ldr	r3, [pc, #332]	; (800d80c <atan+0x324>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	f7f2 fdf9 	bl	80002b8 <__aeabi_dsub>
 800d6c6:	4b51      	ldr	r3, [pc, #324]	; (800d80c <atan+0x324>)
 800d6c8:	4606      	mov	r6, r0
 800d6ca:	460f      	mov	r7, r1
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	f7f2 fdf3 	bl	80002bc <__adddf3>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4630      	mov	r0, r6
 800d6dc:	4639      	mov	r1, r7
 800d6de:	f7f3 f8cd 	bl	800087c <__aeabi_ddiv>
 800d6e2:	f04f 0a01 	mov.w	sl, #1
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	460d      	mov	r5, r1
 800d6ea:	e764      	b.n	800d5b6 <atan+0xce>
 800d6ec:	4b49      	ldr	r3, [pc, #292]	; (800d814 <atan+0x32c>)
 800d6ee:	429e      	cmp	r6, r3
 800d6f0:	da1d      	bge.n	800d72e <atan+0x246>
 800d6f2:	ee10 0a10 	vmov	r0, s0
 800d6f6:	4b48      	ldr	r3, [pc, #288]	; (800d818 <atan+0x330>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	f7f2 fddc 	bl	80002b8 <__aeabi_dsub>
 800d700:	4b45      	ldr	r3, [pc, #276]	; (800d818 <atan+0x330>)
 800d702:	4606      	mov	r6, r0
 800d704:	460f      	mov	r7, r1
 800d706:	2200      	movs	r2, #0
 800d708:	4620      	mov	r0, r4
 800d70a:	4629      	mov	r1, r5
 800d70c:	f7f2 ff8c 	bl	8000628 <__aeabi_dmul>
 800d710:	4b3e      	ldr	r3, [pc, #248]	; (800d80c <atan+0x324>)
 800d712:	2200      	movs	r2, #0
 800d714:	f7f2 fdd2 	bl	80002bc <__adddf3>
 800d718:	4602      	mov	r2, r0
 800d71a:	460b      	mov	r3, r1
 800d71c:	4630      	mov	r0, r6
 800d71e:	4639      	mov	r1, r7
 800d720:	f7f3 f8ac 	bl	800087c <__aeabi_ddiv>
 800d724:	f04f 0a02 	mov.w	sl, #2
 800d728:	4604      	mov	r4, r0
 800d72a:	460d      	mov	r5, r1
 800d72c:	e743      	b.n	800d5b6 <atan+0xce>
 800d72e:	462b      	mov	r3, r5
 800d730:	ee10 2a10 	vmov	r2, s0
 800d734:	4939      	ldr	r1, [pc, #228]	; (800d81c <atan+0x334>)
 800d736:	2000      	movs	r0, #0
 800d738:	f7f3 f8a0 	bl	800087c <__aeabi_ddiv>
 800d73c:	f04f 0a03 	mov.w	sl, #3
 800d740:	4604      	mov	r4, r0
 800d742:	460d      	mov	r5, r1
 800d744:	e737      	b.n	800d5b6 <atan+0xce>
 800d746:	4b36      	ldr	r3, [pc, #216]	; (800d820 <atan+0x338>)
 800d748:	4e36      	ldr	r6, [pc, #216]	; (800d824 <atan+0x33c>)
 800d74a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d74e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d752:	e9da 2300 	ldrd	r2, r3, [sl]
 800d756:	f7f2 fdaf 	bl	80002b8 <__aeabi_dsub>
 800d75a:	4622      	mov	r2, r4
 800d75c:	462b      	mov	r3, r5
 800d75e:	f7f2 fdab 	bl	80002b8 <__aeabi_dsub>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d76a:	f7f2 fda5 	bl	80002b8 <__aeabi_dsub>
 800d76e:	f1bb 0f00 	cmp.w	fp, #0
 800d772:	4604      	mov	r4, r0
 800d774:	460d      	mov	r5, r1
 800d776:	f6bf aed6 	bge.w	800d526 <atan+0x3e>
 800d77a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d77e:	461d      	mov	r5, r3
 800d780:	e6d1      	b.n	800d526 <atan+0x3e>
 800d782:	a51d      	add	r5, pc, #116	; (adr r5, 800d7f8 <atan+0x310>)
 800d784:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d788:	e6cd      	b.n	800d526 <atan+0x3e>
 800d78a:	bf00      	nop
 800d78c:	f3af 8000 	nop.w
 800d790:	54442d18 	.word	0x54442d18
 800d794:	bff921fb 	.word	0xbff921fb
 800d798:	8800759c 	.word	0x8800759c
 800d79c:	7e37e43c 	.word	0x7e37e43c
 800d7a0:	e322da11 	.word	0xe322da11
 800d7a4:	3f90ad3a 	.word	0x3f90ad3a
 800d7a8:	24760deb 	.word	0x24760deb
 800d7ac:	3fa97b4b 	.word	0x3fa97b4b
 800d7b0:	a0d03d51 	.word	0xa0d03d51
 800d7b4:	3fb10d66 	.word	0x3fb10d66
 800d7b8:	c54c206e 	.word	0xc54c206e
 800d7bc:	3fb745cd 	.word	0x3fb745cd
 800d7c0:	920083ff 	.word	0x920083ff
 800d7c4:	3fc24924 	.word	0x3fc24924
 800d7c8:	5555550d 	.word	0x5555550d
 800d7cc:	3fd55555 	.word	0x3fd55555
 800d7d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d7d4:	bfa2b444 	.word	0xbfa2b444
 800d7d8:	52defd9a 	.word	0x52defd9a
 800d7dc:	3fadde2d 	.word	0x3fadde2d
 800d7e0:	af749a6d 	.word	0xaf749a6d
 800d7e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800d7e8:	fe231671 	.word	0xfe231671
 800d7ec:	3fbc71c6 	.word	0x3fbc71c6
 800d7f0:	9998ebc4 	.word	0x9998ebc4
 800d7f4:	3fc99999 	.word	0x3fc99999
 800d7f8:	54442d18 	.word	0x54442d18
 800d7fc:	3ff921fb 	.word	0x3ff921fb
 800d800:	440fffff 	.word	0x440fffff
 800d804:	7ff00000 	.word	0x7ff00000
 800d808:	3fdbffff 	.word	0x3fdbffff
 800d80c:	3ff00000 	.word	0x3ff00000
 800d810:	3ff2ffff 	.word	0x3ff2ffff
 800d814:	40038000 	.word	0x40038000
 800d818:	3ff80000 	.word	0x3ff80000
 800d81c:	bff00000 	.word	0xbff00000
 800d820:	0800e9a0 	.word	0x0800e9a0
 800d824:	0800e980 	.word	0x0800e980

0800d828 <fabs>:
 800d828:	ec51 0b10 	vmov	r0, r1, d0
 800d82c:	ee10 2a10 	vmov	r2, s0
 800d830:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d834:	ec43 2b10 	vmov	d0, r2, r3
 800d838:	4770      	bx	lr

0800d83a <atan2>:
 800d83a:	f000 b82d 	b.w	800d898 <__ieee754_atan2>

0800d83e <sqrt>:
 800d83e:	b538      	push	{r3, r4, r5, lr}
 800d840:	ed2d 8b02 	vpush	{d8}
 800d844:	ec55 4b10 	vmov	r4, r5, d0
 800d848:	f000 f8f0 	bl	800da2c <__ieee754_sqrt>
 800d84c:	4622      	mov	r2, r4
 800d84e:	462b      	mov	r3, r5
 800d850:	4620      	mov	r0, r4
 800d852:	4629      	mov	r1, r5
 800d854:	eeb0 8a40 	vmov.f32	s16, s0
 800d858:	eef0 8a60 	vmov.f32	s17, s1
 800d85c:	f7f3 f97e 	bl	8000b5c <__aeabi_dcmpun>
 800d860:	b990      	cbnz	r0, 800d888 <sqrt+0x4a>
 800d862:	2200      	movs	r2, #0
 800d864:	2300      	movs	r3, #0
 800d866:	4620      	mov	r0, r4
 800d868:	4629      	mov	r1, r5
 800d86a:	f7f3 f94f 	bl	8000b0c <__aeabi_dcmplt>
 800d86e:	b158      	cbz	r0, 800d888 <sqrt+0x4a>
 800d870:	f7fc fa30 	bl	8009cd4 <__errno>
 800d874:	2321      	movs	r3, #33	; 0x21
 800d876:	6003      	str	r3, [r0, #0]
 800d878:	2200      	movs	r2, #0
 800d87a:	2300      	movs	r3, #0
 800d87c:	4610      	mov	r0, r2
 800d87e:	4619      	mov	r1, r3
 800d880:	f7f2 fffc 	bl	800087c <__aeabi_ddiv>
 800d884:	ec41 0b18 	vmov	d8, r0, r1
 800d888:	eeb0 0a48 	vmov.f32	s0, s16
 800d88c:	eef0 0a68 	vmov.f32	s1, s17
 800d890:	ecbd 8b02 	vpop	{d8}
 800d894:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d898 <__ieee754_atan2>:
 800d898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d89c:	ec57 6b11 	vmov	r6, r7, d1
 800d8a0:	4273      	negs	r3, r6
 800d8a2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800da28 <__ieee754_atan2+0x190>
 800d8a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d8aa:	4333      	orrs	r3, r6
 800d8ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d8b0:	4573      	cmp	r3, lr
 800d8b2:	ec51 0b10 	vmov	r0, r1, d0
 800d8b6:	ee11 8a10 	vmov	r8, s2
 800d8ba:	d80a      	bhi.n	800d8d2 <__ieee754_atan2+0x3a>
 800d8bc:	4244      	negs	r4, r0
 800d8be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d8c2:	4304      	orrs	r4, r0
 800d8c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d8c8:	4574      	cmp	r4, lr
 800d8ca:	ee10 9a10 	vmov	r9, s0
 800d8ce:	468c      	mov	ip, r1
 800d8d0:	d907      	bls.n	800d8e2 <__ieee754_atan2+0x4a>
 800d8d2:	4632      	mov	r2, r6
 800d8d4:	463b      	mov	r3, r7
 800d8d6:	f7f2 fcf1 	bl	80002bc <__adddf3>
 800d8da:	ec41 0b10 	vmov	d0, r0, r1
 800d8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d8e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d8ea:	4334      	orrs	r4, r6
 800d8ec:	d103      	bne.n	800d8f6 <__ieee754_atan2+0x5e>
 800d8ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f2:	f7ff bdf9 	b.w	800d4e8 <atan>
 800d8f6:	17bc      	asrs	r4, r7, #30
 800d8f8:	f004 0402 	and.w	r4, r4, #2
 800d8fc:	ea53 0909 	orrs.w	r9, r3, r9
 800d900:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d904:	d107      	bne.n	800d916 <__ieee754_atan2+0x7e>
 800d906:	2c02      	cmp	r4, #2
 800d908:	d060      	beq.n	800d9cc <__ieee754_atan2+0x134>
 800d90a:	2c03      	cmp	r4, #3
 800d90c:	d1e5      	bne.n	800d8da <__ieee754_atan2+0x42>
 800d90e:	a142      	add	r1, pc, #264	; (adr r1, 800da18 <__ieee754_atan2+0x180>)
 800d910:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d914:	e7e1      	b.n	800d8da <__ieee754_atan2+0x42>
 800d916:	ea52 0808 	orrs.w	r8, r2, r8
 800d91a:	d106      	bne.n	800d92a <__ieee754_atan2+0x92>
 800d91c:	f1bc 0f00 	cmp.w	ip, #0
 800d920:	da5f      	bge.n	800d9e2 <__ieee754_atan2+0x14a>
 800d922:	a13f      	add	r1, pc, #252	; (adr r1, 800da20 <__ieee754_atan2+0x188>)
 800d924:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d928:	e7d7      	b.n	800d8da <__ieee754_atan2+0x42>
 800d92a:	4572      	cmp	r2, lr
 800d92c:	d10f      	bne.n	800d94e <__ieee754_atan2+0xb6>
 800d92e:	4293      	cmp	r3, r2
 800d930:	f104 34ff 	add.w	r4, r4, #4294967295
 800d934:	d107      	bne.n	800d946 <__ieee754_atan2+0xae>
 800d936:	2c02      	cmp	r4, #2
 800d938:	d84c      	bhi.n	800d9d4 <__ieee754_atan2+0x13c>
 800d93a:	4b35      	ldr	r3, [pc, #212]	; (800da10 <__ieee754_atan2+0x178>)
 800d93c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d940:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d944:	e7c9      	b.n	800d8da <__ieee754_atan2+0x42>
 800d946:	2c02      	cmp	r4, #2
 800d948:	d848      	bhi.n	800d9dc <__ieee754_atan2+0x144>
 800d94a:	4b32      	ldr	r3, [pc, #200]	; (800da14 <__ieee754_atan2+0x17c>)
 800d94c:	e7f6      	b.n	800d93c <__ieee754_atan2+0xa4>
 800d94e:	4573      	cmp	r3, lr
 800d950:	d0e4      	beq.n	800d91c <__ieee754_atan2+0x84>
 800d952:	1a9b      	subs	r3, r3, r2
 800d954:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d958:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d95c:	da1e      	bge.n	800d99c <__ieee754_atan2+0x104>
 800d95e:	2f00      	cmp	r7, #0
 800d960:	da01      	bge.n	800d966 <__ieee754_atan2+0xce>
 800d962:	323c      	adds	r2, #60	; 0x3c
 800d964:	db1e      	blt.n	800d9a4 <__ieee754_atan2+0x10c>
 800d966:	4632      	mov	r2, r6
 800d968:	463b      	mov	r3, r7
 800d96a:	f7f2 ff87 	bl	800087c <__aeabi_ddiv>
 800d96e:	ec41 0b10 	vmov	d0, r0, r1
 800d972:	f7ff ff59 	bl	800d828 <fabs>
 800d976:	f7ff fdb7 	bl	800d4e8 <atan>
 800d97a:	ec51 0b10 	vmov	r0, r1, d0
 800d97e:	2c01      	cmp	r4, #1
 800d980:	d013      	beq.n	800d9aa <__ieee754_atan2+0x112>
 800d982:	2c02      	cmp	r4, #2
 800d984:	d015      	beq.n	800d9b2 <__ieee754_atan2+0x11a>
 800d986:	2c00      	cmp	r4, #0
 800d988:	d0a7      	beq.n	800d8da <__ieee754_atan2+0x42>
 800d98a:	a319      	add	r3, pc, #100	; (adr r3, 800d9f0 <__ieee754_atan2+0x158>)
 800d98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d990:	f7f2 fc92 	bl	80002b8 <__aeabi_dsub>
 800d994:	a318      	add	r3, pc, #96	; (adr r3, 800d9f8 <__ieee754_atan2+0x160>)
 800d996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99a:	e014      	b.n	800d9c6 <__ieee754_atan2+0x12e>
 800d99c:	a118      	add	r1, pc, #96	; (adr r1, 800da00 <__ieee754_atan2+0x168>)
 800d99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9a2:	e7ec      	b.n	800d97e <__ieee754_atan2+0xe6>
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	e7e9      	b.n	800d97e <__ieee754_atan2+0xe6>
 800d9aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	e793      	b.n	800d8da <__ieee754_atan2+0x42>
 800d9b2:	a30f      	add	r3, pc, #60	; (adr r3, 800d9f0 <__ieee754_atan2+0x158>)
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	f7f2 fc7e 	bl	80002b8 <__aeabi_dsub>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	460b      	mov	r3, r1
 800d9c0:	a10d      	add	r1, pc, #52	; (adr r1, 800d9f8 <__ieee754_atan2+0x160>)
 800d9c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9c6:	f7f2 fc77 	bl	80002b8 <__aeabi_dsub>
 800d9ca:	e786      	b.n	800d8da <__ieee754_atan2+0x42>
 800d9cc:	a10a      	add	r1, pc, #40	; (adr r1, 800d9f8 <__ieee754_atan2+0x160>)
 800d9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9d2:	e782      	b.n	800d8da <__ieee754_atan2+0x42>
 800d9d4:	a10c      	add	r1, pc, #48	; (adr r1, 800da08 <__ieee754_atan2+0x170>)
 800d9d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9da:	e77e      	b.n	800d8da <__ieee754_atan2+0x42>
 800d9dc:	2000      	movs	r0, #0
 800d9de:	2100      	movs	r1, #0
 800d9e0:	e77b      	b.n	800d8da <__ieee754_atan2+0x42>
 800d9e2:	a107      	add	r1, pc, #28	; (adr r1, 800da00 <__ieee754_atan2+0x168>)
 800d9e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9e8:	e777      	b.n	800d8da <__ieee754_atan2+0x42>
 800d9ea:	bf00      	nop
 800d9ec:	f3af 8000 	nop.w
 800d9f0:	33145c07 	.word	0x33145c07
 800d9f4:	3ca1a626 	.word	0x3ca1a626
 800d9f8:	54442d18 	.word	0x54442d18
 800d9fc:	400921fb 	.word	0x400921fb
 800da00:	54442d18 	.word	0x54442d18
 800da04:	3ff921fb 	.word	0x3ff921fb
 800da08:	54442d18 	.word	0x54442d18
 800da0c:	3fe921fb 	.word	0x3fe921fb
 800da10:	0800e9c0 	.word	0x0800e9c0
 800da14:	0800e9d8 	.word	0x0800e9d8
 800da18:	54442d18 	.word	0x54442d18
 800da1c:	c00921fb 	.word	0xc00921fb
 800da20:	54442d18 	.word	0x54442d18
 800da24:	bff921fb 	.word	0xbff921fb
 800da28:	7ff00000 	.word	0x7ff00000

0800da2c <__ieee754_sqrt>:
 800da2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da30:	ec55 4b10 	vmov	r4, r5, d0
 800da34:	4e55      	ldr	r6, [pc, #340]	; (800db8c <__ieee754_sqrt+0x160>)
 800da36:	43ae      	bics	r6, r5
 800da38:	ee10 0a10 	vmov	r0, s0
 800da3c:	ee10 3a10 	vmov	r3, s0
 800da40:	462a      	mov	r2, r5
 800da42:	4629      	mov	r1, r5
 800da44:	d110      	bne.n	800da68 <__ieee754_sqrt+0x3c>
 800da46:	ee10 2a10 	vmov	r2, s0
 800da4a:	462b      	mov	r3, r5
 800da4c:	f7f2 fdec 	bl	8000628 <__aeabi_dmul>
 800da50:	4602      	mov	r2, r0
 800da52:	460b      	mov	r3, r1
 800da54:	4620      	mov	r0, r4
 800da56:	4629      	mov	r1, r5
 800da58:	f7f2 fc30 	bl	80002bc <__adddf3>
 800da5c:	4604      	mov	r4, r0
 800da5e:	460d      	mov	r5, r1
 800da60:	ec45 4b10 	vmov	d0, r4, r5
 800da64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da68:	2d00      	cmp	r5, #0
 800da6a:	dc10      	bgt.n	800da8e <__ieee754_sqrt+0x62>
 800da6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800da70:	4330      	orrs	r0, r6
 800da72:	d0f5      	beq.n	800da60 <__ieee754_sqrt+0x34>
 800da74:	b15d      	cbz	r5, 800da8e <__ieee754_sqrt+0x62>
 800da76:	ee10 2a10 	vmov	r2, s0
 800da7a:	462b      	mov	r3, r5
 800da7c:	ee10 0a10 	vmov	r0, s0
 800da80:	f7f2 fc1a 	bl	80002b8 <__aeabi_dsub>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	f7f2 fef8 	bl	800087c <__aeabi_ddiv>
 800da8c:	e7e6      	b.n	800da5c <__ieee754_sqrt+0x30>
 800da8e:	1512      	asrs	r2, r2, #20
 800da90:	d074      	beq.n	800db7c <__ieee754_sqrt+0x150>
 800da92:	07d4      	lsls	r4, r2, #31
 800da94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800da98:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800da9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800daa0:	bf5e      	ittt	pl
 800daa2:	0fda      	lsrpl	r2, r3, #31
 800daa4:	005b      	lslpl	r3, r3, #1
 800daa6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800daaa:	2400      	movs	r4, #0
 800daac:	0fda      	lsrs	r2, r3, #31
 800daae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800dab2:	107f      	asrs	r7, r7, #1
 800dab4:	005b      	lsls	r3, r3, #1
 800dab6:	2516      	movs	r5, #22
 800dab8:	4620      	mov	r0, r4
 800daba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dabe:	1886      	adds	r6, r0, r2
 800dac0:	428e      	cmp	r6, r1
 800dac2:	bfde      	ittt	le
 800dac4:	1b89      	suble	r1, r1, r6
 800dac6:	18b0      	addle	r0, r6, r2
 800dac8:	18a4      	addle	r4, r4, r2
 800daca:	0049      	lsls	r1, r1, #1
 800dacc:	3d01      	subs	r5, #1
 800dace:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800dad2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800dad6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dada:	d1f0      	bne.n	800dabe <__ieee754_sqrt+0x92>
 800dadc:	462a      	mov	r2, r5
 800dade:	f04f 0e20 	mov.w	lr, #32
 800dae2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dae6:	4281      	cmp	r1, r0
 800dae8:	eb06 0c05 	add.w	ip, r6, r5
 800daec:	dc02      	bgt.n	800daf4 <__ieee754_sqrt+0xc8>
 800daee:	d113      	bne.n	800db18 <__ieee754_sqrt+0xec>
 800daf0:	459c      	cmp	ip, r3
 800daf2:	d811      	bhi.n	800db18 <__ieee754_sqrt+0xec>
 800daf4:	f1bc 0f00 	cmp.w	ip, #0
 800daf8:	eb0c 0506 	add.w	r5, ip, r6
 800dafc:	da43      	bge.n	800db86 <__ieee754_sqrt+0x15a>
 800dafe:	2d00      	cmp	r5, #0
 800db00:	db41      	blt.n	800db86 <__ieee754_sqrt+0x15a>
 800db02:	f100 0801 	add.w	r8, r0, #1
 800db06:	1a09      	subs	r1, r1, r0
 800db08:	459c      	cmp	ip, r3
 800db0a:	bf88      	it	hi
 800db0c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800db10:	eba3 030c 	sub.w	r3, r3, ip
 800db14:	4432      	add	r2, r6
 800db16:	4640      	mov	r0, r8
 800db18:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800db1c:	f1be 0e01 	subs.w	lr, lr, #1
 800db20:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800db24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800db28:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800db2c:	d1db      	bne.n	800dae6 <__ieee754_sqrt+0xba>
 800db2e:	430b      	orrs	r3, r1
 800db30:	d006      	beq.n	800db40 <__ieee754_sqrt+0x114>
 800db32:	1c50      	adds	r0, r2, #1
 800db34:	bf13      	iteet	ne
 800db36:	3201      	addne	r2, #1
 800db38:	3401      	addeq	r4, #1
 800db3a:	4672      	moveq	r2, lr
 800db3c:	f022 0201 	bicne.w	r2, r2, #1
 800db40:	1063      	asrs	r3, r4, #1
 800db42:	0852      	lsrs	r2, r2, #1
 800db44:	07e1      	lsls	r1, r4, #31
 800db46:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800db4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800db4e:	bf48      	it	mi
 800db50:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800db54:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800db58:	4614      	mov	r4, r2
 800db5a:	e781      	b.n	800da60 <__ieee754_sqrt+0x34>
 800db5c:	0ad9      	lsrs	r1, r3, #11
 800db5e:	3815      	subs	r0, #21
 800db60:	055b      	lsls	r3, r3, #21
 800db62:	2900      	cmp	r1, #0
 800db64:	d0fa      	beq.n	800db5c <__ieee754_sqrt+0x130>
 800db66:	02cd      	lsls	r5, r1, #11
 800db68:	d50a      	bpl.n	800db80 <__ieee754_sqrt+0x154>
 800db6a:	f1c2 0420 	rsb	r4, r2, #32
 800db6e:	fa23 f404 	lsr.w	r4, r3, r4
 800db72:	1e55      	subs	r5, r2, #1
 800db74:	4093      	lsls	r3, r2
 800db76:	4321      	orrs	r1, r4
 800db78:	1b42      	subs	r2, r0, r5
 800db7a:	e78a      	b.n	800da92 <__ieee754_sqrt+0x66>
 800db7c:	4610      	mov	r0, r2
 800db7e:	e7f0      	b.n	800db62 <__ieee754_sqrt+0x136>
 800db80:	0049      	lsls	r1, r1, #1
 800db82:	3201      	adds	r2, #1
 800db84:	e7ef      	b.n	800db66 <__ieee754_sqrt+0x13a>
 800db86:	4680      	mov	r8, r0
 800db88:	e7bd      	b.n	800db06 <__ieee754_sqrt+0xda>
 800db8a:	bf00      	nop
 800db8c:	7ff00000 	.word	0x7ff00000

0800db90 <_init>:
 800db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db92:	bf00      	nop
 800db94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db96:	bc08      	pop	{r3}
 800db98:	469e      	mov	lr, r3
 800db9a:	4770      	bx	lr

0800db9c <_fini>:
 800db9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9e:	bf00      	nop
 800dba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dba2:	bc08      	pop	{r3}
 800dba4:	469e      	mov	lr, r3
 800dba6:	4770      	bx	lr
