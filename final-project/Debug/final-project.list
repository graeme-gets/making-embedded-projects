
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c378  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be8  0800c518  0800c518  0001c518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d100  0800d100  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  0800d100  0800d100  0001d100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d108  0800d108  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d108  0800d108  0001d108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d10c  0800d10c  0001d10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800d110  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000274  0800d384  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800d384  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179f3  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab7  00000000  00000000  00037c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b016  00000000  00000000  0003ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7a5  00000000  00000000  00058de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099588  00000000  00000000  0007558b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010eb13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006834  00000000  00000000  0010eb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000274 	.word	0x20000274
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c500 	.word	0x0800c500

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000278 	.word	0x20000278
 80001dc:	0800c500 	.word	0x0800c500

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f007 fbd3 	bl	80086b8 <memset>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	cbuffer->buffer[cbuffer->write] = data;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	7992      	ldrb	r2, [r2, #6]
 8000f2e:	4413      	add	r3, r2
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b25a      	sxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	757b      	strb	r3, [r7, #21]
	uint8_t length;
	uint8_t read = cbuffer->read;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	795b      	ldrb	r3, [r3, #5]
 8000f7c:	74bb      	strb	r3, [r7, #18]
	uint8_t ch;
	length = cBuffer_Length(cbuffer);
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f89a 	bl	80010b8 <cBuffer_Length>
 8000f84:	4603      	mov	r3, r0
 8000f86:	753b      	strb	r3, [r7, #20]

	for (i=0; i < length;i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
 8000f8c:	e012      	b.n	8000fb4 <cBuffer_GetString+0x54>
	{
		err = cBuffer_Peek(cbuffer, &ch, &read);
 8000f8e:	f107 0212 	add.w	r2, r7, #18
 8000f92:	f107 0311 	add.w	r3, r7, #17
 8000f96:	4619      	mov	r1, r3
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f863 	bl	8001064 <cBuffer_Peek>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	757b      	strb	r3, [r7, #21]

		if (ch == '\r') // A string is found - copy it to the outgoing buffer
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	2b0d      	cmp	r3, #13
 8000fa6:	d102      	bne.n	8000fae <cBuffer_GetString+0x4e>
		{
			found = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75bb      	strb	r3, [r7, #22]
			break;
 8000fac:	e006      	b.n	8000fbc <cBuffer_GetString+0x5c>
	for (i=0; i < length;i++)
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	7d3b      	ldrb	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3e8      	bcc.n	8000f8e <cBuffer_GetString+0x2e>
		}
	}
	if (found)
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d020      	beq.n	8001004 <cBuffer_GetString+0xa4>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, read);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	7cba      	ldrb	r2, [r7, #18]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f88d 	bl	80010ea <cBuffer_LengthCustom>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000fd8:	f107 0313 	add.w	r3, r7, #19
 8000fdc:	4619      	mov	r1, r3
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f817 	bl	8001012 <cBuffer_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	757b      	strb	r3, [r7, #21]
			*string = chr;
 8000fe8:	7cfa      	ldrb	r2, [r7, #19]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	701a      	strb	r2, [r3, #0]
			string++;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
		} while (chr != sTerminator || err != CBUFFER_OK);
 8000ff4:	7cfb      	ldrb	r3, [r7, #19]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d1ed      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8000ffc:	7d7b      	ldrb	r3, [r7, #21]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1ea      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8001002:	e001      	b.n	8001008 <cBuffer_GetString+0xa8>
	}
	else
		err = CBUFFER_NO_STRING;
 8001004:	2303      	movs	r3, #3
 8001006:	757b      	strb	r3, [r7, #21]


	return err;
 8001008:	7d7b      	ldrb	r3, [r7, #21]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f84b 	bl	80010b8 <cBuffer_Length>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8001028:	2302      	movs	r3, #2
 800102a:	e017      	b.n	800105c <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	7952      	ldrb	r2, [r2, #5]
 8001034:	4413      	add	r3, r2
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	3301      	adds	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b25a      	sxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4013      	ands	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <cBuffer_Peek>:

CBUFFER_ERR cBuffer_Peek(cBuffer_t* cbuffer,uint8_t* data, uint8_t*read)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (cBuffer_Length(cbuffer) == 0)
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f821 	bl	80010b8 <cBuffer_Length>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <cBuffer_Peek+0x1c>
	{
		return CBUFFER_EMPTY;
 800107c:	2302      	movs	r3, #2
 800107e:	e017      	b.n	80010b0 <cBuffer_Peek+0x4c>
	}
	*data = cbuffer->buffer[*read];
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	701a      	strb	r2, [r3, #0]
	*read = ((*read)+1) & (cbuffer->size-1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25a      	sxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
	return CBUFFER_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	799a      	ldrb	r2, [r3, #6]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3

}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
 80010f6:	4613      	mov	r3, r2
 80010f8:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b25a      	sxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 800112a:	2120      	movs	r1, #32
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f008 f8b6 	bl	800929e <strchr>
 8001132:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <ConsoleCommandMatch+0x32>
	{
			r =  strcmp(name,buffer) == 0;
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff f84f 	bl	80001e0 <strcmp>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e00f      	b.n	8001172 <ConsoleCommandMatch+0x52>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff f84e 	bl	80001f4 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	6839      	ldr	r1, [r7, #0]
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f008 f8b2 	bl	80092c8 <strncmp>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	60fb      	str	r3, [r7, #12]
	}

	return r;
 8001172:	68fb      	ldr	r3, [r7, #12]

}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <ConsoleInit>:


// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001182:	f000 fc87 	bl	8001a94 <ConsoleIoInit>
	ConsoleIoSendString("Dodec Timer - A Thousand Projects");
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <ConsoleInit+0x44>)
 8001188:	f000 fcbc 	bl	8001b04 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <ConsoleInit+0x48>)
 800118e:	f000 fcb9 	bl	8001b04 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <ConsoleInit+0x4c>)
 8001194:	f000 fcb6 	bl	8001b04 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	e007      	b.n	80011ae <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <ConsoleInit+0x50>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3301      	adds	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b63      	cmp	r3, #99	; 0x63
 80011b2:	d9f4      	bls.n	800119e <ConsoleInit+0x22>
	}

}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	0800c518 	.word	0x0800c518
 80011c4:	0800c53c 	.word	0x0800c53c
 80011c8:	0800c540 	.word	0x0800c540
 80011cc:	20000290 	.word	0x20000290

080011d0 <ConsolePrintPrompt>:

void ConsolePrintPrompt()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	ConsoleIoSendString(STR_ENDLINE);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <ConsolePrintPrompt+0x14>)
 80011d6:	f000 fc95 	bl	8001b04 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <ConsolePrintPrompt+0x18>)
 80011dc:	f000 fc92 	bl	8001b04 <ConsoleIoSendString>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800c53c 	.word	0x0800c53c
 80011e8:	0800c540 	.word	0x0800c540

080011ec <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;
	eConsoleError consoleResult;

	consoleResult = ConsoleIoReceive(mReceiveBuffer);
 80011f2:	4843      	ldr	r0, [pc, #268]	; (8001300 <ConsoleProcess+0x114>)
 80011f4:	f000 fc66 	bl	8001ac4 <ConsoleIoReceive>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]

	switch (consoleResult)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d07a      	beq.n	80012f8 <ConsoleProcess+0x10c>
 8001202:	2b03      	cmp	r3, #3
 8001204:	dc79      	bgt.n	80012fa <ConsoleProcess+0x10e>
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <ConsoleProcess+0x28>
 800120a:	2b00      	cmp	r3, #0
 800120c:	db75      	blt.n	80012fa <ConsoleProcess+0x10e>
 800120e:	3b01      	subs	r3, #1
 8001210:	2b01      	cmp	r3, #1
 8001212:	e072      	b.n	80012fa <ConsoleProcess+0x10e>
	{
		case CONSOLE_ERROR:
		case CONSOLE_NO_STRING:
			break;
		case CONSOLE_SUCCESS:
			if ('\0' == mReceiveBuffer[0] )
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <ConsoleProcess+0x114>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <ConsoleProcess+0x3e>
			{
				ConsoleIoSendString(STR_ENDLINE);
 800121c:	4839      	ldr	r0, [pc, #228]	; (8001304 <ConsoleProcess+0x118>)
 800121e:	f000 fc71 	bl	8001b04 <ConsoleIoSendString>
				ConsoleIoSendString(CONSOLE_PROMPT);
 8001222:	4839      	ldr	r0, [pc, #228]	; (8001308 <ConsoleProcess+0x11c>)
 8001224:	f000 fc6e 	bl	8001b04 <ConsoleIoSendString>
				return;
 8001228:	e067      	b.n	80012fa <ConsoleProcess+0x10e>
			}
			commandTable = ConsoleCommandsGetTable();
 800122a:	f000 fc0b 	bl	8001a44 <ConsoleCommandsGetTable>
 800122e:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	613b      	str	r3, [r7, #16]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800123a:	e03d      	b.n	80012b8 <ConsoleProcess+0xcc>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	461a      	mov	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4413      	add	r3, r2
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	492c      	ldr	r1, [pc, #176]	; (8001300 <ConsoleProcess+0x114>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff65 	bl	8001120 <ConsoleCommandMatch>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d02a      	beq.n	80012b2 <ConsoleProcess+0xc6>
				{
					result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4413      	add	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4824      	ldr	r0, [pc, #144]	; (8001300 <ConsoleProcess+0x114>)
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d017      	beq.n	80012ac <ConsoleProcess+0xc0>
					{
						ConsoleIoSendString("Error: ");
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <ConsoleProcess+0x120>)
 800127e:	f000 fc41 	bl	8001b04 <ConsoleIoSendString>
						ConsoleIoSendString((char*)mReceiveBuffer);
 8001282:	481f      	ldr	r0, [pc, #124]	; (8001300 <ConsoleProcess+0x114>)
 8001284:	f000 fc3e 	bl	8001b04 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 8001288:	4821      	ldr	r0, [pc, #132]	; (8001310 <ConsoleProcess+0x124>)
 800128a:	f000 fc3b 	bl	8001b04 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	461a      	mov	r2, r3
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	4413      	add	r3, r2
 800129e:	3308      	adds	r3, #8
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fc2f 	bl	8001b04 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80012a6:	4817      	ldr	r0, [pc, #92]	; (8001304 <ConsoleProcess+0x118>)
 80012a8:	f000 fc2c 	bl	8001b04 <ConsoleIoSendString>
					}
					found = cmdIndex;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	e002      	b.n	80012b8 <ConsoleProcess+0xcc>
				}
				else
				{
					cmdIndex++;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4613      	mov	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <ConsoleProcess+0xea>
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d0b2      	beq.n	800123c <ConsoleProcess+0x50>
				}
			}
			if (found == NOT_FOUND)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d105      	bne.n	80012ea <ConsoleProcess+0xfe>
			{
				ConsoleIoSendString("Command not found: ");
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <ConsoleProcess+0x128>)
 80012e0:	f000 fc10 	bl	8001b04 <ConsoleIoSendString>
				ConsoleIoSendString((char*)mReceiveBuffer);
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <ConsoleProcess+0x114>)
 80012e6:	f000 fc0d 	bl	8001b04 <ConsoleIoSendString>

			}
			ConsoleIoSendString(STR_ENDLINE);
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <ConsoleProcess+0x118>)
 80012ec:	f000 fc0a 	bl	8001b04 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <ConsoleProcess+0x11c>)
 80012f2:	f000 fc07 	bl	8001b04 <ConsoleIoSendString>

			break;
 80012f6:	e000      	b.n	80012fa <ConsoleProcess+0x10e>
		case CONSOLE_BUFFER_FULL:

		break;
 80012f8:	bf00      	nop
	}

}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000290 	.word	0x20000290
 8001304:	0800c53c 	.word	0x0800c53c
 8001308:	0800c540 	.word	0x0800c540
 800130c:	0800c544 	.word	0x0800c544
 8001310:	0800c54c 	.word	0x0800c54c
 8001314:	0800c554 	.word	0x0800c554

08001318 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	460b      	mov	r3, r1
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001332:	e00b      	b.n	800134c <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b20      	cmp	r3, #32
 800133e:	d102      	bne.n	8001346 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	3301      	adds	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	429a      	cmp	r2, r3
 8001352:	d002      	beq.n	800135a <ConsoleParamFindN+0x42>
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b63      	cmp	r3, #99	; 0x63
 8001358:	d9ec      	bls.n	8001334 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2b64      	cmp	r3, #100	; 0x64
 800135e:	d102      	bne.n	8001366 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001360:	2310      	movs	r3, #16
 8001362:	75fb      	strb	r3, [r7, #23]
 8001364:	e002      	b.n	800136c <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	601a      	str	r2, [r3, #0]
	}
	return result;
 800136c:	7dfb      	ldrb	r3, [r7, #23]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b08a      	sub	sp, #40	; 0x28
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	460b      	mov	r3, r1
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800138c:	f107 021c 	add.w	r2, r7, #28
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	4619      	mov	r1, r3
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f7ff ffbf 	bl	8001318 <ConsoleParamFindN>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	4413      	add	r3, r2
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 80013b4:	e011      	b.n	80013da <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 80013b6:	f107 0214 	add.w	r2, r7, #20
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	4413      	add	r3, r2
 80013be:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80013c2:	701a      	strb	r2, [r3, #0]
		i++;
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	3301      	adds	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	4413      	add	r3, r2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 80013da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 80013e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d002      	beq.n	80013f0 <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d9e2      	bls.n	80013b6 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d102      	bne.n	80013fc <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 80013f6:	2310      	movs	r3, #16
 80013f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80013fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11a      	bne.n	800143a <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8001404:	f107 0214 	add.w	r2, r7, #20
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f000 ff9f 	bl	8002358 <isNumber>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4618      	mov	r0, r3
 8001426:	f007 f909 	bl	800863c <atoi>
 800142a:	4603      	mov	r3, r0
 800142c:	b21a      	sxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	e002      	b.n	800143a <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 8001434:	2310      	movs	r3, #16
 8001436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}


	return result;
 800143a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800143e:	4618      	mov	r0, r3
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fb58 	bl	8001b04 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fb4b 	bl	8001b04 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <ConsoleSendLine+0x20>)
 8001470:	f000 fb48 	bl	8001b04 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800c53c 	.word	0x0800c53c

08001484 <ConsoleCommandCPUQuery>:
	CONSOLE_COMMAND_TABLE_END // must be LAST
};


static eCommandResult_T ConsoleCommandCPUQuery(const char buffer[])
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

	char msg[30];
	register int SP __asm("r13");


	sprintf(msg,"-- CPU Details --");
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4937      	ldr	r1, [pc, #220]	; (8001570 <ConsoleCommandCPUQuery+0xec>)
 8001492:	4618      	mov	r0, r3
 8001494:	f007 fe72 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ffdf 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Stack Pointer \t\t%#08x",SP);
 80014a2:	466a      	mov	r2, sp
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4932      	ldr	r1, [pc, #200]	; (8001574 <ConsoleCommandCPUQuery+0xf0>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f007 fe66 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ffd3 	bl	8001460 <ConsoleSendLine>

	unsigned int* HP = malloc(1);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f007 f8ec 	bl	8008698 <malloc>
 80014c0:	4603      	mov	r3, r0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	*HP=0xAB;
 80014c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c6:	22ab      	movs	r2, #171	; 0xab
 80014c8:	601a      	str	r2, [r3, #0]

	sprintf(msg,"Heap Pointer \t\t%#08x",(unsigned int)HP-1);
 80014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014cc:	1e5a      	subs	r2, r3, #1
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4929      	ldr	r1, [pc, #164]	; (8001578 <ConsoleCommandCPUQuery+0xf4>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f007 fe51 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ffbe 	bl	8001460 <ConsoleSendLine>
	free(HP);
 80014e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014e6:	f007 f8df 	bl	80086a8 <free>

	sprintf(msg,"Initialised global variable \t\t%#08x",(unsigned int)(&initGlobalVar));
 80014ea:	4a24      	ldr	r2, [pc, #144]	; (800157c <ConsoleCommandCPUQuery+0xf8>)
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	4923      	ldr	r1, [pc, #140]	; (8001580 <ConsoleCommandCPUQuery+0xfc>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f007 fe42 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ffaf 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Un-initialised global variable \t\t%#08x",(unsigned int)&uninitGlobalVar);
 8001502:	4a20      	ldr	r2, [pc, #128]	; (8001584 <ConsoleCommandCPUQuery+0x100>)
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	491f      	ldr	r1, [pc, #124]	; (8001588 <ConsoleCommandCPUQuery+0x104>)
 800150a:	4618      	mov	r0, r3
 800150c:	f007 fe36 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ffa3 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Const variable \t\t%#08x",(unsigned int)&constVar);
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <ConsoleCommandCPUQuery+0x108>)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	491b      	ldr	r1, [pc, #108]	; (8001590 <ConsoleCommandCPUQuery+0x10c>)
 8001522:	4618      	mov	r0, r3
 8001524:	f007 fe2a 	bl	800917c <siprintf>
		ConsoleSendLine(msg);
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff97 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Static variable \t\t%#08x",(unsigned int)&staticVar);
 8001532:	4a18      	ldr	r2, [pc, #96]	; (8001594 <ConsoleCommandCPUQuery+0x110>)
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4917      	ldr	r1, [pc, #92]	; (8001598 <ConsoleCommandCPUQuery+0x114>)
 800153a:	4618      	mov	r0, r3
 800153c:	f007 fe1e 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff8b 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Function variable \t\t%#08x",(unsigned int)&funcVar);
 800154a:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	4912      	ldr	r1, [pc, #72]	; (800159c <ConsoleCommandCPUQuery+0x118>)
 8001554:	4618      	mov	r0, r3
 8001556:	f007 fe11 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff7e 	bl	8001460 <ConsoleSendLine>

	return CONSOLE_SUCCESS;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3730      	adds	r7, #48	; 0x30
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	0800c5b8 	.word	0x0800c5b8
 8001574:	0800c5cc 	.word	0x0800c5cc
 8001578:	0800c5e4 	.word	0x0800c5e4
 800157c:	20000000 	.word	0x20000000
 8001580:	0800c5fc 	.word	0x0800c5fc
 8001584:	200002f4 	.word	0x200002f4
 8001588:	0800c620 	.word	0x0800c620
 800158c:	0800c918 	.word	0x0800c918
 8001590:	0800c648 	.word	0x0800c648
 8001594:	200002f5 	.word	0x200002f5
 8001598:	0800c660 	.word	0x0800c660
 800159c:	0800c678 	.word	0x0800c678

080015a0 <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	461a      	mov	r2, r3
 80015ae:	2101      	movs	r1, #1
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff feb1 	bl	8001318 <ConsoleParamFindN>
 80015b6:	4603      	mov	r3, r0
 80015b8:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 80015ba:	7ffb      	ldrb	r3, [r7, #31]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 80015c0:	2310      	movs	r3, #16
 80015c2:	e049      	b.n	8001658 <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	18d0      	adds	r0, r2, r3
 80015ca:	f107 0114 	add.w	r1, r7, #20
 80015ce:	f107 0218 	add.w	r2, r7, #24
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	460b      	mov	r3, r1
 80015da:	4921      	ldr	r1, [pc, #132]	; (8001660 <ConsoleCommandDateSet+0xc0>)
 80015dc:	f007 fdee 	bl	80091bc <siscanf>

	if (!IS_RTC_DATE(day) )
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <ConsoleCommandDateSet+0x4c>
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b1f      	cmp	r3, #31
 80015ea:	d904      	bls.n	80015f6 <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <ConsoleCommandDateSet+0xc4>)
 80015ee:	f7ff ff37 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80015f2:	2310      	movs	r3, #16
 80015f4:	e030      	b.n	8001658 <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <ConsoleCommandDateSet+0x62>
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d904      	bls.n	800160c <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 8001602:	4819      	ldr	r0, [pc, #100]	; (8001668 <ConsoleCommandDateSet+0xc8>)
 8001604:	f7ff ff2c 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001608:	2310      	movs	r3, #16
 800160a:	e025      	b.n	8001658 <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	2b63      	cmp	r3, #99	; 0x63
 8001610:	d904      	bls.n	800161c <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8001612:	4816      	ldr	r0, [pc, #88]	; (800166c <ConsoleCommandDateSet+0xcc>)
 8001614:	f7ff ff24 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001618:	2310      	movs	r3, #16
 800161a:	e01d      	b.n	8001658 <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 800162e:	2307      	movs	r3, #7
 8001630:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <ConsoleCommandDateSet+0xd0>)
 800163c:	f004 fce8 	bl	8006010 <HAL_RTC_SetDate>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 8001646:	480b      	ldr	r0, [pc, #44]	; (8001674 <ConsoleCommandDateSet+0xd4>)
 8001648:	f7ff ff0a 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 800164c:	2310      	movs	r3, #16
 800164e:	e003      	b.n	8001658 <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <ConsoleCommandDateSet+0xd8>)
 8001652:	f7ff ff05 	bl	8001460 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001656:	2300      	movs	r3, #0
	}
}
 8001658:	4618      	mov	r0, r3
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	0800c694 	.word	0x0800c694
 8001664:	0800c6a0 	.word	0x0800c6a0
 8001668:	0800c6c4 	.word	0x0800c6c4
 800166c:	0800c6e8 	.word	0x0800c6e8
 8001670:	2000039c 	.word	0x2000039c
 8001674:	0800c70c 	.word	0x0800c70c
 8001678:	0800c730 	.word	0x0800c730

0800167c <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	; 0x38
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	461a      	mov	r2, r3
 800168a:	2101      	movs	r1, #1
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fe43 	bl	8001318 <ConsoleParamFindN>
 8001692:	4603      	mov	r3, r0
 8001694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 8001698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 80016a0:	2310      	movs	r3, #16
 80016a2:	e041      	b.n	8001728 <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	18d0      	adds	r0, r2, r3
 80016aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80016ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	460b      	mov	r3, r1
 80016ba:	491d      	ldr	r1, [pc, #116]	; (8001730 <ConsoleCommandTimeSet+0xb4>)
 80016bc:	f007 fd7e 	bl	80091bc <siscanf>

	if (!IS_RTC_MINUTES(min) )
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	2b3b      	cmp	r3, #59	; 0x3b
 80016c4:	d904      	bls.n	80016d0 <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 80016c6:	481b      	ldr	r0, [pc, #108]	; (8001734 <ConsoleCommandTimeSet+0xb8>)
 80016c8:	f7ff feca 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80016cc:	2310      	movs	r3, #16
 80016ce:	e02b      	b.n	8001728 <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	2b3b      	cmp	r3, #59	; 0x3b
 80016d4:	d904      	bls.n	80016e0 <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 80016d6:	4818      	ldr	r0, [pc, #96]	; (8001738 <ConsoleCommandTimeSet+0xbc>)
 80016d8:	f7ff fec2 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80016dc:	2310      	movs	r3, #16
 80016de:	e023      	b.n	8001728 <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	2b17      	cmp	r3, #23
 80016e4:	d904      	bls.n	80016f0 <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 80016e6:	4815      	ldr	r0, [pc, #84]	; (800173c <ConsoleCommandTimeSet+0xc0>)
 80016e8:	f7ff feba 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80016ec:	2310      	movs	r3, #16
 80016ee:	e01b      	b.n	8001728 <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <ConsoleCommandTimeSet+0xc4>)
 800170c:	f004 fb88 	bl	8005e20 <HAL_RTC_SetTime>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <ConsoleCommandTimeSet+0xc8>)
 8001718:	f7ff fea2 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 800171c:	2310      	movs	r3, #16
 800171e:	e003      	b.n	8001728 <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Time Set");
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <ConsoleCommandTimeSet+0xcc>)
 8001722:	f7ff fe9d 	bl	8001460 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001726:	2300      	movs	r3, #0
	}
}
 8001728:	4618      	mov	r0, r3
 800172a:	3730      	adds	r7, #48	; 0x30
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	0800c73c 	.word	0x0800c73c
 8001734:	0800c748 	.word	0x0800c748
 8001738:	0800c76c 	.word	0x0800c76c
 800173c:	0800c794 	.word	0x0800c794
 8001740:	2000039c 	.word	0x2000039c
 8001744:	0800c7b8 	.word	0x0800c7b8
 8001748:	0800c7dc 	.word	0x0800c7dc

0800174c <ConsoleCommandLedToggle>:


static eCommandResult_T ConsoleCommandLedToggle(const char buffer[])
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	eCommandResult_T result;
	int16_t parameterInt;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	461a      	mov	r2, r3
 800175a:	2101      	movs	r1, #1
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fe0c 	bl	800137a <ConsoleReceiveParamInt16>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]
	if (result == COMMAND_PARAMETER_ERROR)
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b10      	cmp	r3, #16
 800176a:	d101      	bne.n	8001770 <ConsoleCommandLedToggle+0x24>
			return result;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	e011      	b.n	8001794 <ConsoleCommandLedToggle+0x48>
	if (0 == parameterInt )
 8001770:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d106      	bne.n	8001786 <ConsoleCommandLedToggle+0x3a>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177e:	4807      	ldr	r0, [pc, #28]	; (800179c <ConsoleCommandLedToggle+0x50>)
 8001780:	f002 fdb6 	bl	80042f0 <HAL_GPIO_WritePin>
 8001784:	e005      	b.n	8001792 <ConsoleCommandLedToggle+0x46>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178c:	4803      	ldr	r0, [pc, #12]	; (800179c <ConsoleCommandLedToggle+0x50>)
 800178e:	f002 fdaf 	bl	80042f0 <HAL_GPIO_WritePin>

	return COMMAND_SUCCESS;
 8001792:	2300      	movs	r3, #0

}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40020800 	.word	0x40020800

080017a0 <ConsoleCommandLipoQuery>:


static eCommandResult_T ConsoleCommandLipoQuery(const char buffer[])
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b090      	sub	sp, #64	; 0x40
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	uint16_t voltage;
	uint16_t temp;
	uint16_t version;
	char msg[50];
	lc709203_getCellVoltage(&voltage);
 80017a8:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fdf0 	bl	8002392 <lc709203_getCellVoltage>
	lc709203_getCellTemp(&temp);
 80017b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fdf8 	bl	80023ac <lc709203_getCellTemp>
	lc709203_getId(&version);
 80017bc:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fe00 	bl	80023c6 <lc709203_getId>

	sprintf(msg,"-- Lipo Cell Details --");
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4922      	ldr	r1, [pc, #136]	; (8001854 <ConsoleCommandLipoQuery+0xb4>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f007 fcd5 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fe42 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Monitor Version: %d",version);
 80017dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80017de:	461a      	mov	r2, r3
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	491c      	ldr	r1, [pc, #112]	; (8001858 <ConsoleCommandLipoQuery+0xb8>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f007 fcc8 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe35 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Cell Voltage: %1.4f v",((double)voltage/1000));
 80017f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe9b 	bl	8000534 <__aeabi_ui2d>
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <ConsoleCommandLipoQuery+0xbc>)
 8001804:	f7ff f83a 	bl	800087c <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	f107 0008 	add.w	r0, r7, #8
 8001810:	4913      	ldr	r1, [pc, #76]	; (8001860 <ConsoleCommandLipoQuery+0xc0>)
 8001812:	f007 fcb3 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fe20 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Cell Temp: %1.2f v",((double)temp/100));
 8001820:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe86 	bl	8000534 <__aeabi_ui2d>
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <ConsoleCommandLipoQuery+0xc4>)
 800182e:	f7ff f825 	bl	800087c <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	f107 0008 	add.w	r0, r7, #8
 800183a:	490b      	ldr	r1, [pc, #44]	; (8001868 <ConsoleCommandLipoQuery+0xc8>)
 800183c:	f007 fc9e 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fe0b 	bl	8001460 <ConsoleSendLine>



	return COMMAND_SUCCESS;
 800184a:	2300      	movs	r3, #0

}
 800184c:	4618      	mov	r0, r3
 800184e:	3740      	adds	r7, #64	; 0x40
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	0800c7e8 	.word	0x0800c7e8
 8001858:	0800c800 	.word	0x0800c800
 800185c:	408f4000 	.word	0x408f4000
 8001860:	0800c814 	.word	0x0800c814
 8001864:	40590000 	.word	0x40590000
 8001868:	0800c82c 	.word	0x0800c82c

0800186c <ConsoleCommandAccelQuery>:
 * @param: Buffer
 * @return: eCommandResult_T
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandAccelQuery(const char buffer[])
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b0a9      	sub	sp, #164	; 0xa4
 8001870:	af02      	add	r7, sp, #8
 8001872:	6078      	str	r0, [r7, #4]

	MPU6050_t data;
	char msg[50];
	MPU6050_Read_All(&I2C_MPU6050, &data);
 8001874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001878:	4619      	mov	r1, r3
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <ConsoleCommandAccelQuery+0x44>)
 800187c:	f000 f9b0 	bl	8001be0 <MPU6050_Read_All>

	sprintf(msg,"X Angle\t: %f \t\t Y Angle\t: %f\n",data.KalmanAngleX, data.KalmanAngleY);
 8001880:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001884:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001888:	f107 040c 	add.w	r4, r7, #12
 800188c:	e9cd 2300 	strd	r2, r3, [sp]
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <ConsoleCommandAccelQuery+0x48>)
 8001896:	4620      	mov	r0, r4
 8001898:	f007 fc70 	bl	800917c <siprintf>
	ConsoleSendLine(msg);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fddd 	bl	8001460 <ConsoleSendLine>


	return COMMAND_SUCCESS;
 80018a6:	2300      	movs	r3, #0

}
 80018a8:	4618      	mov	r0, r3
 80018aa:	379c      	adds	r7, #156	; 0x9c
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	20000348 	.word	0x20000348
 80018b4:	0800c840 	.word	0x0800c840

080018b8 <ConsoleCommandTimeQuery>:


static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b092      	sub	sp, #72	; 0x48
 80018bc:	af02      	add	r7, sp, #8
 80018be:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	480f      	ldr	r0, [pc, #60]	; (8001908 <ConsoleCommandTimeQuery+0x50>)
 80018ca:	f004 fb43 	bl	8005f54 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <ConsoleCommandTimeQuery+0x50>)
 80018d8:	f004 fc1e 	bl	8006118 <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80018dc:	7b3b      	ldrb	r3, [r7, #12]
 80018de:	461a      	mov	r2, r3
 80018e0:	7b7b      	ldrb	r3, [r7, #13]
 80018e2:	4619      	mov	r1, r3
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	f107 0020 	add.w	r0, r7, #32
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	460b      	mov	r3, r1
 80018ee:	4907      	ldr	r1, [pc, #28]	; (800190c <ConsoleCommandTimeQuery+0x54>)
 80018f0:	f007 fc44 	bl	800917c <siprintf>
	ConsoleSendString(time);
 80018f4:	f107 0320 	add.w	r3, r7, #32
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fda4 	bl	8001446 <ConsoleSendString>
	return COMMAND_SUCCESS;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3740      	adds	r7, #64	; 0x40
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2000039c 	.word	0x2000039c
 800190c:	0800c860 	.word	0x0800c860

08001910 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	; 0x38
 8001914:	af02      	add	r7, sp, #8
 8001916:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <ConsoleCommandDateQuery+0x44>)
 8001922:	f004 fbf9 	bl	8006118 <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8001926:	7bbb      	ldrb	r3, [r7, #14]
 8001928:	461a      	mov	r2, r3
 800192a:	7b7b      	ldrb	r3, [r7, #13]
 800192c:	4619      	mov	r1, r3
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	f107 0010 	add.w	r0, r7, #16
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	460b      	mov	r3, r1
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <ConsoleCommandDateQuery+0x48>)
 800193a:	f007 fc1f 	bl	800917c <siprintf>
	ConsoleSendString(date);
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fd7f 	bl	8001446 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3730      	adds	r7, #48	; 0x30
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000039c 	.word	0x2000039c
 8001958:	0800c878 	.word	0x0800c878

0800195c <ConsoleCommandLedQuery>:


static eCommandResult_T ConsoleCommandLedQuery(const char buffer[])
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin)==0)
 8001964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <ConsoleCommandLedQuery+0x38>)
 800196a:	f002 fca9 	bl	80042c0 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d103      	bne.n	800197c <ConsoleCommandLedQuery+0x20>
			ConsoleIoSendString("LED is ON ");
 8001974:	4808      	ldr	r0, [pc, #32]	; (8001998 <ConsoleCommandLedQuery+0x3c>)
 8001976:	f000 f8c5 	bl	8001b04 <ConsoleIoSendString>
 800197a:	e002      	b.n	8001982 <ConsoleCommandLedQuery+0x26>
	else
		ConsoleIoSendString("LED is OFF ");
 800197c:	4807      	ldr	r0, [pc, #28]	; (800199c <ConsoleCommandLedQuery+0x40>)
 800197e:	f000 f8c1 	bl	8001b04 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001982:	4807      	ldr	r0, [pc, #28]	; (80019a0 <ConsoleCommandLedQuery+0x44>)
 8001984:	f000 f8be 	bl	8001b04 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40020800 	.word	0x40020800
 8001998:	0800c890 	.word	0x0800c890
 800199c:	0800c89c 	.word	0x0800c89c
 80019a0:	0800c8a8 	.word	0x0800c8a8

080019a4 <ConsoleCommandHelp>:



static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 80019ac:	2300      	movs	r3, #0
 80019ae:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 80019b0:	230c      	movs	r3, #12
 80019b2:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e01e      	b.n	80019f8 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 80019ba:	4914      	ldr	r1, [pc, #80]	; (8001a0c <ConsoleCommandHelp+0x68>)
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f89a 	bl	8001b04 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 80019d0:	480f      	ldr	r0, [pc, #60]	; (8001a10 <ConsoleCommandHelp+0x6c>)
 80019d2:	f000 f897 	bl	8001b04 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	3308      	adds	r3, #8
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <ConsoleCommandHelp+0x68>)
 80019e4:	4413      	add	r3, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f88c 	bl	8001b04 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 80019ec:	4809      	ldr	r0, [pc, #36]	; (8001a14 <ConsoleCommandHelp+0x70>)
 80019ee:	f000 f889 	bl	8001b04 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3db      	bcc.n	80019ba <ConsoleCommandHelp+0x16>
	}
	return result;
 8001a02:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	0800c91c 	.word	0x0800c91c
 8001a10:	0800c8ac 	.word	0x0800c8ac
 8001a14:	0800c8a8 	.word	0x0800c8a8

08001a18 <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <ConsoleCommandVer+0x24>)
 8001a26:	f000 f86d 	bl	8001b04 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <ConsoleCommandVer+0x28>)
 8001a2c:	f000 f86a 	bl	8001b04 <ConsoleIoSendString>
	return result;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	0800c8b0 	.word	0x0800c8b0
 8001a40:	0800c8a8 	.word	0x0800c8a8

08001a44 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001a48:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <ConsoleCommandsGetTable+0x10>)
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	0800c91c 	.word	0x0800c91c

08001a58 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8001a60:	2201      	movs	r2, #1
 8001a62:	4909      	ldr	r1, [pc, #36]	; (8001a88 <HAL_UART_RxCpltCallback+0x30>)
 8001a64:	4809      	ldr	r0, [pc, #36]	; (8001a8c <HAL_UART_RxCpltCallback+0x34>)
 8001a66:	f005 fe50 	bl	800770a <HAL_UART_Receive_IT>
    }



    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_UART_RxCpltCallback+0x30>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b0a      	cmp	r3, #10
 8001a70:	d005      	beq.n	8001a7e <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_UART_RxCpltCallback+0x30>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_UART_RxCpltCallback+0x38>)
 8001a7a:	f7ff fa4e 	bl	8000f1a <cBuffer_Write>

    }
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000340 	.word	0x20000340
 8001a8c:	20000468 	.word	0x20000468
 8001a90:	20000338 	.word	0x20000338

08001a94 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 8001a98:	2240      	movs	r2, #64	; 0x40
 8001a9a:	4906      	ldr	r1, [pc, #24]	; (8001ab4 <ConsoleIoInit+0x20>)
 8001a9c:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <ConsoleIoInit+0x24>)
 8001a9e:	f7ff fa1d 	bl	8000edc <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4905      	ldr	r1, [pc, #20]	; (8001abc <ConsoleIoInit+0x28>)
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <ConsoleIoInit+0x2c>)
 8001aa8:	f005 fe2f 	bl	800770a <HAL_UART_Receive_IT>

	return CONSOLE_SUCCESS;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200002f8 	.word	0x200002f8
 8001ab8:	20000338 	.word	0x20000338
 8001abc:	20000340 	.word	0x20000340
 8001ac0:	20000468 	.word	0x20000468

08001ac4 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	uint8_t len;




	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 8001acc:	f107 030f 	add.w	r3, r7, #15
 8001ad0:	220d      	movs	r2, #13
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	480a      	ldr	r0, [pc, #40]	; (8001b00 <ConsoleIoReceive+0x3c>)
 8001ad6:	f7ff fa43 	bl	8000f60 <cBuffer_GetString>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len-1]  = 0x0; //Terminate String in C Style
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fbf4 	bl	80022da <manageBackSpace>
		return CONSOLE_SUCCESS;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <ConsoleIoReceive+0x34>
	}
	return CONSOLE_NO_STRING;
 8001af6:	2302      	movs	r3, #2

}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000338 	.word	0x20000338

08001b04 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7fe fb71 	bl	80001f4 <strlen>
 8001b12:	4603      	mov	r3, r0
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	2364      	movs	r3, #100	; 0x64
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4804      	ldr	r0, [pc, #16]	; (8001b2c <ConsoleIoSendString+0x28>)
 8001b1c:	f005 fd63 	bl	80075e6 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000468 	.word	0x20000468

08001b30 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af04      	add	r7, sp, #16
 8001b36:	6078      	str	r0, [r7, #4]

    // check device ID WHO_AM_I



    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001b38:	2364      	movs	r3, #100	; 0x64
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	f107 030f 	add.w	r3, r7, #15
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2301      	movs	r3, #1
 8001b48:	2275      	movs	r2, #117	; 0x75
 8001b4a:	21d0      	movs	r1, #208	; 0xd0
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f002 fe27 	bl	80047a0 <HAL_I2C_Mem_Read>

    if (check == 114)  // 0x68 will be returned by the sensor if everything goes well
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b72      	cmp	r3, #114	; 0x72
 8001b56:	d13d      	bne.n	8001bd4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001b5c:	2364      	movs	r3, #100	; 0x64
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	2301      	movs	r3, #1
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	f107 030e 	add.w	r3, r7, #14
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	226b      	movs	r2, #107	; 0x6b
 8001b6e:	21d0      	movs	r1, #208	; 0xd0
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f002 fd1b 	bl	80045ac <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001b76:	2307      	movs	r3, #7
 8001b78:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001b7a:	2364      	movs	r3, #100	; 0x64
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	f107 030e 	add.w	r3, r7, #14
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	2219      	movs	r2, #25
 8001b8c:	21d0      	movs	r1, #208	; 0xd0
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f002 fd0c 	bl	80045ac <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001b98:	2364      	movs	r3, #100	; 0x64
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	f107 030e 	add.w	r3, r7, #14
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	221c      	movs	r2, #28
 8001baa:	21d0      	movs	r1, #208	; 0xd0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f002 fcfd 	bl	80045ac <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001bb6:	2364      	movs	r3, #100	; 0x64
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	f107 030e 	add.w	r3, r7, #14
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	221b      	movs	r2, #27
 8001bc8:	21d0      	movs	r1, #208	; 0xd0
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f002 fcee 	bl	80045ac <HAL_I2C_Mem_Write>
        return 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <MPU6050_Init+0xa6>
    }
    return 1;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be4:	b094      	sub	sp, #80	; 0x50
 8001be6:	af04      	add	r7, sp, #16
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001bec:	2364      	movs	r3, #100	; 0x64
 8001bee:	9302      	str	r3, [sp, #8]
 8001bf0:	230e      	movs	r3, #14
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	223b      	movs	r2, #59	; 0x3b
 8001bfe:	21d0      	movs	r1, #208	; 0xd0
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f002 fdcd 	bl	80047a0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001c06:	7a3b      	ldrb	r3, [r7, #8]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	7a7b      	ldrb	r3, [r7, #9]
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001c18:	7abb      	ldrb	r3, [r7, #10]
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001c2a:	7b3b      	ldrb	r3, [r7, #12]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	7b7b      	ldrb	r3, [r7, #13]
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	4313      	orrs	r3, r2
 8001c48:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001c4a:	7c3b      	ldrb	r3, [r7, #16]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	7c7b      	ldrb	r3, [r7, #17]
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001c5c:	7cbb      	ldrb	r3, [r7, #18]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	7cfb      	ldrb	r3, [r7, #19]
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	4313      	orrs	r3, r2
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001c6e:	7d3b      	ldrb	r3, [r7, #20]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	7d7b      	ldrb	r3, [r7, #21]
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc64 	bl	8000554 <__aeabi_i2d>
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4bb5      	ldr	r3, [pc, #724]	; (8001f68 <MPU6050_Read_All+0x388>)
 8001c92:	f7fe fdf3 	bl	800087c <__aeabi_ddiv>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc54 	bl	8000554 <__aeabi_i2d>
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	4bad      	ldr	r3, [pc, #692]	; (8001f68 <MPU6050_Read_All+0x388>)
 8001cb2:	f7fe fde3 	bl	800087c <__aeabi_ddiv>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	6839      	ldr	r1, [r7, #0]
 8001cbc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc44 	bl	8000554 <__aeabi_i2d>
 8001ccc:	a39e      	add	r3, pc, #632	; (adr r3, 8001f48 <MPU6050_Read_All+0x368>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fdd3 	bl	800087c <__aeabi_ddiv>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	6839      	ldr	r1, [r7, #0]
 8001cdc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    // Callibrate
       //DataStruct->Ax += CAL_X;
      // DataStruct->Ay += CAL_Y;
       //DataStruct->Az += CAL_Y;

    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ce6:	a39a      	add	r3, pc, #616	; (adr r3, 8001f50 <MPU6050_Read_All+0x370>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe ff0e 	bl	8000b0c <__aeabi_dcmplt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <MPU6050_Read_All+0x124>
 8001cf6:	6839      	ldr	r1, [r7, #0]
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d0a:	a391      	add	r3, pc, #580	; (adr r3, 8001f50 <MPU6050_Read_All+0x370>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	f7fe fefc 	bl	8000b0c <__aeabi_dcmplt>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <MPU6050_Read_All+0x148>
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d2e:	a388      	add	r3, pc, #544	; (adr r3, 8001f50 <MPU6050_Read_All+0x370>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe feea 	bl	8000b0c <__aeabi_dcmplt>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d006      	beq.n	8001d4c <MPU6050_Read_All+0x16c>
 8001d3e:	6839      	ldr	r1, [r7, #0]
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9c1 2306 	strd	r2, r3, [r1, #24]


    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001d4c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d58:	eddf 6a84 	vldr	s13, [pc, #528]	; 8001f6c <MPU6050_Read_All+0x38c>
 8001d5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d60:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001f70 <MPU6050_Read_All+0x390>
 8001d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbed 	bl	8000554 <__aeabi_i2d>
 8001d7a:	a377      	add	r3, pc, #476	; (adr r3, 8001f58 <MPU6050_Read_All+0x378>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fd7c 	bl	800087c <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	6839      	ldr	r1, [r7, #0]
 8001d8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbdd 	bl	8000554 <__aeabi_i2d>
 8001d9a:	a36f      	add	r3, pc, #444	; (adr r3, 8001f58 <MPU6050_Read_All+0x378>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fd6c 	bl	800087c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	6839      	ldr	r1, [r7, #0]
 8001daa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbcd 	bl	8000554 <__aeabi_i2d>
 8001dba:	a367      	add	r3, pc, #412	; (adr r3, 8001f58 <MPU6050_Read_All+0x378>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fd5c 	bl	800087c <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001dce:	f001 fbaf 	bl	8003530 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <MPU6050_Read_All+0x394>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbaa 	bl	8000534 <__aeabi_ui2d>
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b64      	ldr	r3, [pc, #400]	; (8001f78 <MPU6050_Read_All+0x398>)
 8001de6:	f7fe fd49 	bl	800087c <__aeabi_ddiv>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001df2:	f001 fb9d 	bl	8003530 <HAL_GetTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4a5e      	ldr	r2, [pc, #376]	; (8001f74 <MPU6050_Read_All+0x394>)
 8001dfa:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e02:	461a      	mov	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0a:	fb03 f202 	mul.w	r2, r3, r2
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e14:	4619      	mov	r1, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb96 	bl	8000554 <__aeabi_i2d>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	ec43 2b10 	vmov	d0, r2, r3
 8001e30:	f00a f9bd 	bl	800c1ae <sqrt>
 8001e34:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e44:	f7fe fe58 	bl	8000af8 <__aeabi_dcmpeq>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d11f      	bne.n	8001e8e <MPU6050_Read_All+0x2ae>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb7d 	bl	8000554 <__aeabi_i2d>
 8001e5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e5e:	f7fe fd0d 	bl	800087c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	ec43 2b17 	vmov	d7, r2, r3
 8001e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e6e:	eef0 0a67 	vmov.f32	s1, s15
 8001e72:	f009 fff1 	bl	800be58 <atan>
 8001e76:	ec51 0b10 	vmov	r0, r1, d0
 8001e7a:	a339      	add	r3, pc, #228	; (adr r3, 8001f60 <MPU6050_Read_All+0x380>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fbd2 	bl	8000628 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001e8c:	e005      	b.n	8001e9a <MPU6050_Read_All+0x2ba>
    } else {
        roll = 0.0;
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea0:	425b      	negs	r3, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fb56 	bl	8000554 <__aeabi_i2d>
 8001ea8:	4682      	mov	sl, r0
 8001eaa:	468b      	mov	fp, r1
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fb4e 	bl	8000554 <__aeabi_i2d>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	ec43 2b11 	vmov	d1, r2, r3
 8001ec0:	ec4b ab10 	vmov	d0, sl, fp
 8001ec4:	f00a f971 	bl	800c1aa <atan2>
 8001ec8:	ec51 0b10 	vmov	r0, r1, d0
 8001ecc:	a324      	add	r3, pc, #144	; (adr r3, 8001f60 <MPU6050_Read_All+0x380>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fba9 	bl	8000628 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <MPU6050_Read_All+0x39c>)
 8001ee4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ee8:	f7fe fe10 	bl	8000b0c <__aeabi_dcmplt>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <MPU6050_Read_All+0x328>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <MPU6050_Read_All+0x3a0>)
 8001efe:	f7fe fe23 	bl	8000b48 <__aeabi_dcmpgt>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d114      	bne.n	8001f32 <MPU6050_Read_All+0x352>
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <MPU6050_Read_All+0x3a0>)
 8001f0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f12:	f7fe fe19 	bl	8000b48 <__aeabi_dcmpgt>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d035      	beq.n	8001f88 <MPU6050_Read_All+0x3a8>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <MPU6050_Read_All+0x39c>)
 8001f28:	f7fe fdf0 	bl	8000b0c <__aeabi_dcmplt>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d02a      	beq.n	8001f88 <MPU6050_Read_All+0x3a8>
        KalmanY.angle = pitch;
 8001f32:	4914      	ldr	r1, [pc, #80]	; (8001f84 <MPU6050_Read_All+0x3a4>)
 8001f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f38:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001f3c:	6839      	ldr	r1, [r7, #0]
 8001f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f42:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001f46:	e034      	b.n	8001fb2 <MPU6050_Read_All+0x3d2>
 8001f48:	00000000 	.word	0x00000000
 8001f4c:	40cc2900 	.word	0x40cc2900
 8001f50:	70a3d70a 	.word	0x70a3d70a
 8001f54:	3fb70a3d 	.word	0x3fb70a3d
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	40606000 	.word	0x40606000
 8001f60:	1a63c1f8 	.word	0x1a63c1f8
 8001f64:	404ca5dc 	.word	0x404ca5dc
 8001f68:	40d00000 	.word	0x40d00000
 8001f6c:	43aa0000 	.word	0x43aa0000
 8001f70:	42121eb8 	.word	0x42121eb8
 8001f74:	20000344 	.word	0x20000344
 8001f78:	408f4000 	.word	0x408f4000
 8001f7c:	c0568000 	.word	0xc0568000
 8001f80:	40568000 	.word	0x40568000
 8001f84:	20000050 	.word	0x20000050
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001f8e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001f92:	eeb0 1a47 	vmov.f32	s2, s14
 8001f96:	eef0 1a67 	vmov.f32	s3, s15
 8001f9a:	ed97 0b06 	vldr	d0, [r7, #24]
 8001f9e:	481e      	ldr	r0, [pc, #120]	; (8002018 <MPU6050_Read_All+0x438>)
 8001fa0:	f000 f840 	bl	8002024 <Kalman_getAngle>
 8001fa4:	eeb0 7a40 	vmov.f32	s14, s0
 8001fa8:	eef0 7a60 	vmov.f32	s15, s1
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001fb8:	4690      	mov	r8, r2
 8001fba:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <MPU6050_Read_All+0x43c>)
 8001fc4:	4640      	mov	r0, r8
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	f7fe fdbe 	bl	8000b48 <__aeabi_dcmpgt>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <MPU6050_Read_All+0x404>
        DataStruct->Gx = -DataStruct->Gx;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001fd8:	4614      	mov	r4, r2
 8001fda:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001fea:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001fee:	eeb0 1a47 	vmov.f32	s2, s14
 8001ff2:	eef0 1a67 	vmov.f32	s3, s15
 8001ff6:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001ffa:	4809      	ldr	r0, [pc, #36]	; (8002020 <MPU6050_Read_All+0x440>)
 8001ffc:	f000 f812 	bl	8002024 <Kalman_getAngle>
 8002000:	eeb0 7a40 	vmov.f32	s14, s0
 8002004:	eef0 7a60 	vmov.f32	s15, s1
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 800200e:	bf00      	nop
 8002010:	3740      	adds	r7, #64	; 0x40
 8002012:	46bd      	mov	sp, r7
 8002014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002018:	20000050 	.word	0x20000050
 800201c:	40568000 	.word	0x40568000
 8002020:	20000008 	.word	0x20000008

08002024 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b096      	sub	sp, #88	; 0x58
 8002028:	af00      	add	r7, sp, #0
 800202a:	61f8      	str	r0, [r7, #28]
 800202c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002030:	ed87 1b02 	vstr	d1, [r7, #8]
 8002034:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800203e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002042:	f7fe f939 	bl	80002b8 <__aeabi_dsub>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002054:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800205c:	f7fe fae4 	bl	8000628 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4620      	mov	r0, r4
 8002066:	4629      	mov	r1, r5
 8002068:	f7fe f928 	bl	80002bc <__adddf3>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	69f9      	ldr	r1, [r7, #28]
 8002072:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002086:	f7fe facf 	bl	8000628 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002098:	f7fe f90e 	bl	80002b8 <__aeabi_dsub>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80020aa:	f7fe f905 	bl	80002b8 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe f8fe 	bl	80002bc <__adddf3>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020cc:	f7fe faac 	bl	8000628 <__aeabi_dmul>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4620      	mov	r0, r4
 80020d6:	4629      	mov	r1, r5
 80020d8:	f7fe f8f0 	bl	80002bc <__adddf3>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	69f9      	ldr	r1, [r7, #28]
 80020e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80020f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020f6:	f7fe fa97 	bl	8000628 <__aeabi_dmul>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4620      	mov	r0, r4
 8002100:	4629      	mov	r1, r5
 8002102:	f7fe f8d9 	bl	80002b8 <__aeabi_dsub>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	69f9      	ldr	r1, [r7, #28]
 800210c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800211c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002120:	f7fe fa82 	bl	8000628 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4620      	mov	r0, r4
 800212a:	4629      	mov	r1, r5
 800212c:	f7fe f8c4 	bl	80002b8 <__aeabi_dsub>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	69f9      	ldr	r1, [r7, #28]
 8002136:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800214a:	f7fe fa6d 	bl	8000628 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe f8b1 	bl	80002bc <__adddf3>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	69f9      	ldr	r1, [r7, #28]
 8002160:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002170:	f7fe f8a4 	bl	80002bc <__adddf3>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002182:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002186:	f7fe fb79 	bl	800087c <__aeabi_ddiv>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002198:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800219c:	f7fe fb6e 	bl	800087c <__aeabi_ddiv>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021b2:	f7fe f881 	bl	80002b8 <__aeabi_dsub>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80021c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021cc:	f7fe fa2c 	bl	8000628 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	69f9      	ldr	r1, [r7, #28]
 80021e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021f4:	f7fe fa18 	bl	8000628 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4620      	mov	r0, r4
 80021fe:	4629      	mov	r1, r5
 8002200:	f7fe f85c 	bl	80002bc <__adddf3>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	69f9      	ldr	r1, [r7, #28]
 800220a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002214:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800221e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002228:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800222c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002230:	f7fe f9fa 	bl	8000628 <__aeabi_dmul>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4620      	mov	r0, r4
 800223a:	4629      	mov	r1, r5
 800223c:	f7fe f83c 	bl	80002b8 <__aeabi_dsub>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	69f9      	ldr	r1, [r7, #28]
 8002246:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002250:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002254:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002258:	f7fe f9e6 	bl	8000628 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fe f828 	bl	80002b8 <__aeabi_dsub>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	69f9      	ldr	r1, [r7, #28]
 800226e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002278:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800227c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002280:	f7fe f9d2 	bl	8000628 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4620      	mov	r0, r4
 800228a:	4629      	mov	r1, r5
 800228c:	f7fe f814 	bl	80002b8 <__aeabi_dsub>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	69f9      	ldr	r1, [r7, #28]
 8002296:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80022a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022a8:	f7fe f9be 	bl	8000628 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fe f800 	bl	80002b8 <__aeabi_dsub>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	69f9      	ldr	r1, [r7, #28]
 80022be:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022c8:	ec43 2b17 	vmov	d7, r2, r3
};
 80022cc:	eeb0 0a47 	vmov.f32	s0, s14
 80022d0:	eef0 0a67 	vmov.f32	s1, s15
 80022d4:	3758      	adds	r7, #88	; 0x58
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bdb0      	pop	{r4, r5, r7, pc}

080022da <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 80022e6:	217f      	movs	r1, #127	; 0x7f
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f006 ffd8 	bl	800929e <strchr>
 80022ee:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 80022f0:	e029      	b.n	8002346 <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b7f      	cmp	r3, #127	; 0x7f
 80022f8:	d106      	bne.n	8002308 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3301      	adds	r3, #1
 80022fe:	4619      	mov	r1, r3
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f006 ffd9 	bl	80092b8 <strcpy>
 8002306:	e019      	b.n	800233c <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b7f      	cmp	r3, #127	; 0x7f
 800230e:	d109      	bne.n	8002324 <manageBackSpace+0x4a>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3301      	adds	r3, #1
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3b01      	subs	r3, #1
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e00b      	b.n	800233c <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b7f      	cmp	r3, #127	; 0x7f
 800232a:	d107      	bne.n	800233c <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e5a      	subs	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3301      	adds	r3, #1
 8002334:	4619      	mov	r1, r3
 8002336:	4610      	mov	r0, r2
 8002338:	f006 ffbe 	bl	80092b8 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 800233c:	217f      	movs	r1, #127	; 0x7f
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f006 ffad 	bl	800929e <strchr>
 8002344:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1d1      	bne.n	80022f2 <manageBackSpace+0x18>
		}
}
 800234e:	bf00      	nop
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 8002360:	e00c      	b.n	800237c <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b2f      	cmp	r3, #47	; 0x2f
 8002368:	d903      	bls.n	8002372 <isNumber+0x1a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b39      	cmp	r3, #57	; 0x39
 8002370:	d901      	bls.n	8002376 <isNumber+0x1e>
			return 0;
 8002372:	2300      	movs	r3, #0
 8002374:	e007      	b.n	8002386 <isNumber+0x2e>
		string++;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3301      	adds	r3, #1
 800237a:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1ee      	bne.n	8002362 <isNumber+0xa>
	}
	return 1;
 8002384:	2301      	movs	r3, #1
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <lc709203_getCellVoltage>:
 * @param: 16bit pointer to value
 * @return: Error Code
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getCellVoltage(uint16_t *voltage)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_VOLTAGE,voltage);
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	2009      	movs	r0, #9
 800239e:	f000 f81f 	bl	80023e0 <lc709203_getRegisterValue>
 80023a2:	4603      	mov	r3, r0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <lc709203_getCellTemp>:

eLC709203_Error_t lc709203_getCellTemp(uint16_t *voltage)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_TEMP,voltage);
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	2008      	movs	r0, #8
 80023b8:	f000 f812 	bl	80023e0 <lc709203_getRegisterValue>
 80023bc:	4603      	mov	r3, r0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <lc709203_getId>:

eLC709203_Error_t lc709203_getId(uint16_t *version)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_IC_VERSION,version);
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	2011      	movs	r0, #17
 80023d2:	f000 f805 	bl	80023e0 <lc709203_getRegisterValue>
 80023d6:	4603      	mov	r3, r0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <lc709203_getRegisterValue>:
 * @param: value - a 16 bit pointer to the value to be used
 * @return: Error code foe the function
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getRegisterValue (uint8_t reg,uint16_t *value)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af04      	add	r7, sp, #16
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c1, LC709302_ADRESS, reg, 1, (uint8_t*)value, 2, 100);
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	2364      	movs	r3, #100	; 0x64
 80023f2:	9302      	str	r3, [sp, #8]
 80023f4:	2302      	movs	r3, #2
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2301      	movs	r3, #1
 80023fe:	2116      	movs	r1, #22
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <lc709203_getRegisterValue+0x40>)
 8002402:	f002 f9cd 	bl	80047a0 <HAL_I2C_Mem_Read>
 8002406:	4603      	mov	r3, r0
 8002408:	73fb      	strb	r3, [r7, #15]

	if (result != HAL_OK)
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <lc709203_getRegisterValue+0x34>
	{
		return LC798_COMM_ERROR;
 8002410:	2302      	movs	r3, #2
 8002412:	e000      	b.n	8002416 <lc709203_getRegisterValue+0x36>
	}
	else
		return LC798_OK;
 8002414:	2301      	movs	r3, #1

}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000348 	.word	0x20000348

08002424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_DMA_Init+0x3c>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <MX_DMA_Init+0x3c>)
 8002434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MX_DMA_Init+0x3c>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	2039      	movs	r0, #57	; 0x39
 800244c:	f001 f97b 	bl	8003746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002450:	2039      	movs	r0, #57	; 0x39
 8002452:	f001 f994 	bl	800377e <HAL_NVIC_EnableIRQ>

}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800

08002464 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b27      	ldr	r3, [pc, #156]	; (800251c <MX_GPIO_Init+0xb8>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a26      	ldr	r2, [pc, #152]	; (800251c <MX_GPIO_Init+0xb8>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <MX_GPIO_Init+0xb8>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <MX_GPIO_Init+0xb8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <MX_GPIO_Init+0xb8>)
 80024a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b1d      	ldr	r3, [pc, #116]	; (800251c <MX_GPIO_Init+0xb8>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <MX_GPIO_Init+0xb8>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <MX_GPIO_Init+0xb8>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <MX_GPIO_Init+0xb8>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <MX_GPIO_Init+0xb8>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a11      	ldr	r2, [pc, #68]	; (800251c <MX_GPIO_Init+0xb8>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <MX_GPIO_Init+0xb8>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024f0:	480b      	ldr	r0, [pc, #44]	; (8002520 <MX_GPIO_Init+0xbc>)
 80024f2:	f001 fefd 	bl	80042f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80024f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4619      	mov	r1, r3
 800250e:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_GPIO_Init+0xbc>)
 8002510:	f001 fd52 	bl	8003fb8 <HAL_GPIO_Init>

}
 8002514:	bf00      	nop
 8002516:	3728      	adds	r7, #40	; 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	40020800 	.word	0x40020800

08002524 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <MX_I2C1_Init+0x50>)
 800252a:	4a13      	ldr	r2, [pc, #76]	; (8002578 <MX_I2C1_Init+0x54>)
 800252c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <MX_I2C1_Init+0x50>)
 8002530:	4a12      	ldr	r2, [pc, #72]	; (800257c <MX_I2C1_Init+0x58>)
 8002532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <MX_I2C1_Init+0x50>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <MX_I2C1_Init+0x50>)
 800253c:	2200      	movs	r2, #0
 800253e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <MX_I2C1_Init+0x50>)
 8002542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <MX_I2C1_Init+0x50>)
 800254a:	2200      	movs	r2, #0
 800254c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <MX_I2C1_Init+0x50>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <MX_I2C1_Init+0x50>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <MX_I2C1_Init+0x50>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002560:	4804      	ldr	r0, [pc, #16]	; (8002574 <MX_I2C1_Init+0x50>)
 8002562:	f001 fedf 	bl	8004324 <HAL_I2C_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800256c:	f000 f91a 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000348 	.word	0x20000348
 8002578:	40005400 	.word	0x40005400
 800257c:	000186a0 	.word	0x000186a0

08002580 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	; 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_I2C_MspInit+0x84>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d12b      	bne.n	80025fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_I2C_MspInit+0x88>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_I2C_MspInit+0x88>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_I2C_MspInit+0x88>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025be:	23c0      	movs	r3, #192	; 0xc0
 80025c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c2:	2312      	movs	r3, #18
 80025c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025ce:	2304      	movs	r3, #4
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	480c      	ldr	r0, [pc, #48]	; (800260c <HAL_I2C_MspInit+0x8c>)
 80025da:	f001 fced 	bl	8003fb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_I2C_MspInit+0x88>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_I2C_MspInit+0x88>)
 80025e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_I2C_MspInit+0x88>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025fa:	bf00      	nop
 80025fc:	3728      	adds	r7, #40	; 0x28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40005400 	.word	0x40005400
 8002608:	40023800 	.word	0x40023800
 800260c:	40020400 	.word	0x40020400

08002610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002616:	f000 ff25 	bl	8003464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800261a:	f000 f859 	bl	80026d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800261e:	f7ff ff21 	bl	8002464 <MX_GPIO_Init>
  MX_RTC_Init();
 8002622:	f000 f8c5 	bl	80027b0 <MX_RTC_Init>
  MX_DMA_Init();
 8002626:	f7ff fefd 	bl	8002424 <MX_DMA_Init>
  MX_I2C1_Init();
 800262a:	f7ff ff7b 	bl	8002524 <MX_I2C1_Init>
  MX_TIM1_Init();
 800262e:	f000 fa4f 	bl	8002ad0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002632:	f000 fb7b 	bl	8002d2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t angle = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 800263a:	230b      	movs	r3, #11
 800263c:	717b      	strb	r3, [r7, #5]

  ConsoleInit();
 800263e:	f7fe fd9d 	bl	800117c <ConsoleInit>
  ConsoleSendString("Console Initialised\n");
 8002642:	481f      	ldr	r0, [pc, #124]	; (80026c0 <main+0xb0>)
 8002644:	f7fe feff 	bl	8001446 <ConsoleSendString>
  if (MPU6050_Init(&hi2c1) == 1)
 8002648:	481e      	ldr	r0, [pc, #120]	; (80026c4 <main+0xb4>)
 800264a:	f7ff fa71 	bl	8001b30 <MPU6050_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b01      	cmp	r3, #1
 8002652:	d103      	bne.n	800265c <main+0x4c>
  {
	  ConsoleSendString("** ERROR Initialising MNP6050!\n");
 8002654:	481c      	ldr	r0, [pc, #112]	; (80026c8 <main+0xb8>)
 8002656:	f7fe fef6 	bl	8001446 <ConsoleSendString>
 800265a:	e002      	b.n	8002662 <main+0x52>
  }
  else
  {
	  ConsoleSendString("MPU6050 Initialised\n");
 800265c:	481b      	ldr	r0, [pc, #108]	; (80026cc <main+0xbc>)
 800265e:	f7fe fef2 	bl	8001446 <ConsoleSendString>
  }
  ConsolePrintPrompt();
 8002662:	f7fe fdb5 	bl	80011d0 <ConsolePrintPrompt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 8002666:	f7fe fdc1 	bl	80011ec <ConsoleProcess>


	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 800266a:	2300      	movs	r3, #0
 800266c:	71bb      	strb	r3, [r7, #6]
 800266e:	e01b      	b.n	80026a8 <main+0x98>
	  	  			// Calculate color
	  	  			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8002670:	79ba      	ldrb	r2, [r7, #6]
 8002672:	797b      	ldrb	r3, [r7, #5]
 8002674:	fb12 f303 	smulbb	r3, r2, r3
 8002678:	b2da      	uxtb	r2, r3
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	4413      	add	r3, r2
 800267e:	b2db      	uxtb	r3, r3
 8002680:	227f      	movs	r2, #127	; 0x7f
 8002682:	21ff      	movs	r1, #255	; 0xff
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fe27 	bl	80032d8 <hsl_to_rgb>
 800268a:	6038      	str	r0, [r7, #0]
	  	  			// Set color
	  	  			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	0c1b      	lsrs	r3, r3, #16
 8002690:	b2d9      	uxtb	r1, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	b2da      	uxtb	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	79b8      	ldrb	r0, [r7, #6]
 800269e:	f000 fbfd 	bl	8002e9c <led_set_RGB>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 80026a2:	79bb      	ldrb	r3, [r7, #6]
 80026a4:	3301      	adds	r3, #1
 80026a6:	71bb      	strb	r3, [r7, #6]
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	2b0b      	cmp	r3, #11
 80026ac:	d9e0      	bls.n	8002670 <main+0x60>
	  	  		}
	  	  		// Write to LED
	  	    	++angle;
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	3301      	adds	r3, #1
 80026b2:	71fb      	strb	r3, [r7, #7]
	  	  		led_render();
 80026b4:	f000 fc58 	bl	8002f68 <led_render>
	  	  		// Some delay
	  	  		HAL_Delay(10);
 80026b8:	200a      	movs	r0, #10
 80026ba:	f000 ff45 	bl	8003548 <HAL_Delay>
	  ConsoleProcess();
 80026be:	e7d2      	b.n	8002666 <main+0x56>
 80026c0:	0800c8bc 	.word	0x0800c8bc
 80026c4:	20000348 	.word	0x20000348
 80026c8:	0800c8d4 	.word	0x0800c8d4
 80026cc:	0800c8f4 	.word	0x0800c8f4

080026d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b094      	sub	sp, #80	; 0x50
 80026d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d6:	f107 0320 	add.w	r3, r7, #32
 80026da:	2230      	movs	r2, #48	; 0x30
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f005 ffea 	bl	80086b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <SystemClock_Config+0xcc>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <SystemClock_Config+0xcc>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002702:	6413      	str	r3, [r2, #64]	; 0x40
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <SystemClock_Config+0xcc>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002710:	2300      	movs	r3, #0
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <SystemClock_Config+0xd0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <SystemClock_Config+0xd0>)
 800271a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <SystemClock_Config+0xd0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800272c:	2305      	movs	r3, #5
 800272e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002736:	2301      	movs	r3, #1
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800273a:	2302      	movs	r3, #2
 800273c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800273e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002744:	230c      	movs	r3, #12
 8002746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002748:	2360      	movs	r3, #96	; 0x60
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800274c:	2302      	movs	r3, #2
 800274e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002750:	2304      	movs	r3, #4
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002754:	f107 0320 	add.w	r3, r7, #32
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fda3 	bl	80052a4 <HAL_RCC_OscConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002764:	f000 f81e 	bl	80027a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002768:	230f      	movs	r3, #15
 800276a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276c:	2302      	movs	r3, #2
 800276e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	2103      	movs	r1, #3
 8002784:	4618      	mov	r0, r3
 8002786:	f003 f805 	bl	8005794 <HAL_RCC_ClockConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002790:	f000 f808 	bl	80027a4 <Error_Handler>
  }
}
 8002794:	bf00      	nop
 8002796:	3750      	adds	r7, #80	; 0x50
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	40007000 	.word	0x40007000

080027a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a8:	b672      	cpsid	i
}
 80027aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ac:	e7fe      	b.n	80027ac <Error_Handler+0x8>
	...

080027b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <MX_RTC_Init+0x44>)
 80027b6:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <MX_RTC_Init+0x48>)
 80027b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <MX_RTC_Init+0x44>)
 80027bc:	2200      	movs	r2, #0
 80027be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <MX_RTC_Init+0x44>)
 80027c2:	227f      	movs	r2, #127	; 0x7f
 80027c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <MX_RTC_Init+0x44>)
 80027c8:	22ff      	movs	r2, #255	; 0xff
 80027ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <MX_RTC_Init+0x44>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <MX_RTC_Init+0x44>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <MX_RTC_Init+0x44>)
 80027da:	2200      	movs	r2, #0
 80027dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <MX_RTC_Init+0x44>)
 80027e0:	f003 faa8 	bl	8005d34 <HAL_RTC_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80027ea:	f7ff ffdb 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	2000039c 	.word	0x2000039c
 80027f8:	40002800 	.word	0x40002800

080027fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002804:	f107 0308 	add.w	r3, r7, #8
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
 8002814:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_RTC_MspInit+0x50>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d111      	bne.n	8002844 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002820:	2302      	movs	r3, #2
 8002822:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002828:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	4618      	mov	r0, r3
 8002830:	f003 f990 	bl	8005b54 <HAL_RCCEx_PeriphCLKConfig>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800283a:	f7ff ffb3 	bl	80027a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800283e:	4b04      	ldr	r3, [pc, #16]	; (8002850 <HAL_RTC_MspInit+0x54>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002844:	bf00      	nop
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40002800 	.word	0x40002800
 8002850:	42470e3c 	.word	0x42470e3c

08002854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_MspInit+0x4c>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a0f      	ldr	r2, [pc, #60]	; (80028a0 <HAL_MspInit+0x4c>)
 8002864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <HAL_MspInit+0x4c>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_MspInit+0x4c>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <HAL_MspInit+0x4c>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_MspInit+0x4c>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028a8:	e7fe      	b.n	80028a8 <NMI_Handler+0x4>

080028aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ae:	e7fe      	b.n	80028ae <HardFault_Handler+0x4>

080028b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <MemManage_Handler+0x4>

080028b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ba:	e7fe      	b.n	80028ba <BusFault_Handler+0x4>

080028bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <UsageFault_Handler+0x4>

080028c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f0:	f000 fe0a 	bl	8003508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <USART1_IRQHandler+0x10>)
 80028fe:	f004 ff35 	bl	800776c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000468 	.word	0x20000468

0800290c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <DMA2_Stream1_IRQHandler+0x10>)
 8002912:	f001 f8e7 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000408 	.word	0x20000408

08002920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
	return 1;
 8002924:	2301      	movs	r3, #1
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_kill>:

int _kill(int pid, int sig)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800293a:	f005 fe83 	bl	8008644 <__errno>
 800293e:	4603      	mov	r3, r0
 8002940:	2216      	movs	r2, #22
 8002942:	601a      	str	r2, [r3, #0]
	return -1;
 8002944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_exit>:

void _exit (int status)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ffe7 	bl	8002930 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002962:	e7fe      	b.n	8002962 <_exit+0x12>

08002964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e00a      	b.n	800298c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002976:	f3af 8000 	nop.w
 800297a:	4601      	mov	r1, r0
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	60ba      	str	r2, [r7, #8]
 8002982:	b2ca      	uxtb	r2, r1
 8002984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	dbf0      	blt.n	8002976 <_read+0x12>
	}

return len;
 8002994:	687b      	ldr	r3, [r7, #4]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e009      	b.n	80029c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	60ba      	str	r2, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dbf1      	blt.n	80029b0 <_write+0x12>
	}
	return len;
 80029cc:	687b      	ldr	r3, [r7, #4]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_close>:

int _close(int file)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
	return -1;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <_isatty>:

int _isatty(int file)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
	return 1;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <_sbrk+0x5c>)
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <_sbrk+0x60>)
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <_sbrk+0x64>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <_sbrk+0x64>)
 8002a5e:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <_sbrk+0x68>)
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_sbrk+0x64>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d207      	bcs.n	8002a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a70:	f005 fde8 	bl	8008644 <__errno>
 8002a74:	4603      	mov	r3, r0
 8002a76:	220c      	movs	r2, #12
 8002a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e009      	b.n	8002a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <_sbrk+0x64>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <_sbrk+0x64>)
 8002a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20020000 	.word	0x20020000
 8002aa0:	00000400 	.word	0x00000400
 8002aa4:	200003bc 	.word	0x200003bc
 8002aa8:	20000548 	.word	0x20000548

08002aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <SystemInit+0x20>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <SystemInit+0x20>)
 8002ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b096      	sub	sp, #88	; 0x58
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	615a      	str	r2, [r3, #20]
 8002b00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	2220      	movs	r2, #32
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f005 fdd5 	bl	80086b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b10:	4a3e      	ldr	r2, [pc, #248]	; (8002c0c <MX_TIM1_Init+0x13c>)
 8002b12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b14:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 8002b20:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b22:	227c      	movs	r2, #124	; 0x7c
 8002b24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b26:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b2c:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b32:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b38:	4833      	ldr	r0, [pc, #204]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b3a:	f003 fbf9 	bl	8006330 <HAL_TIM_Base_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002b44:	f7ff fe2e 	bl	80027a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b52:	4619      	mov	r1, r3
 8002b54:	482c      	ldr	r0, [pc, #176]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b56:	f003 ffcb 	bl	8006af0 <HAL_TIM_ConfigClockSource>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002b60:	f7ff fe20 	bl	80027a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b64:	4828      	ldr	r0, [pc, #160]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b66:	f003 fc32 	bl	80063ce <HAL_TIM_PWM_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002b70:	f7ff fe18 	bl	80027a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b74:	2300      	movs	r3, #0
 8002b76:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b80:	4619      	mov	r1, r3
 8002b82:	4821      	ldr	r0, [pc, #132]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002b84:	f004 fc22 	bl	80073cc <HAL_TIMEx_MasterConfigSynchronization>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002b8e:	f7ff fe09 	bl	80027a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b92:	2360      	movs	r3, #96	; 0x60
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4814      	ldr	r0, [pc, #80]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002bb8:	f003 fed8 	bl	800696c <HAL_TIM_PWM_ConfigChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002bc2:	f7ff fdef 	bl	80027a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	4807      	ldr	r0, [pc, #28]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002bea:	f004 fc5d 	bl	80074a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002bf4:	f7ff fdd6 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002bf8:	4803      	ldr	r0, [pc, #12]	; (8002c08 <MX_TIM1_Init+0x138>)
 8002bfa:	f000 f85d 	bl	8002cb8 <HAL_TIM_MspPostInit>

}
 8002bfe:	bf00      	nop
 8002c00:	3758      	adds	r7, #88	; 0x58
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200003c0 	.word	0x200003c0
 8002c0c:	40010000 	.word	0x40010000

08002c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <HAL_TIM_Base_MspInit+0x98>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d13e      	bne.n	8002ca0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b21      	ldr	r3, [pc, #132]	; (8002cac <HAL_TIM_Base_MspInit+0x9c>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4a20      	ldr	r2, [pc, #128]	; (8002cac <HAL_TIM_Base_MspInit+0x9c>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <HAL_TIM_Base_MspInit+0x9c>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c40:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c42:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002c44:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c46:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002c4a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c5e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c66:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c76:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c78:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002c84:	480a      	ldr	r0, [pc, #40]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c86:	f000 fd95 	bl	80037b4 <HAL_DMA_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002c90:	f7ff fd88 	bl	80027a4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	20000408 	.word	0x20000408
 8002cb4:	40026428 	.word	0x40026428

08002cb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_TIM_MspPostInit+0x68>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d11e      	bne.n	8002d18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_TIM_MspPostInit+0x6c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <HAL_TIM_MspPostInit+0x6c>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_TIM_MspPostInit+0x6c>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 8002cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	4619      	mov	r1, r3
 8002d12:	4805      	ldr	r0, [pc, #20]	; (8002d28 <HAL_TIM_MspPostInit+0x70>)
 8002d14:	f001 f950 	bl	8003fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40010000 	.word	0x40010000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020000 	.word	0x40020000

08002d2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <MX_USART1_UART_Init+0x50>)
 8002d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d64:	f004 fbf2 	bl	800754c <HAL_UART_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d6e:	f7ff fd19 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000468 	.word	0x20000468
 8002d7c:	40011000 	.word	0x40011000

08002d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <HAL_UART_MspInit+0x94>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d134      	bne.n	8002e0c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <HAL_UART_MspInit+0x98>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4a1b      	ldr	r2, [pc, #108]	; (8002e18 <HAL_UART_MspInit+0x98>)
 8002dac:	f043 0310 	orr.w	r3, r3, #16
 8002db0:	6453      	str	r3, [r2, #68]	; 0x44
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_UART_MspInit+0x98>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_UART_MspInit+0x98>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <HAL_UART_MspInit+0x98>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_UART_MspInit+0x98>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dec:	2307      	movs	r3, #7
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4619      	mov	r1, r3
 8002df6:	4809      	ldr	r0, [pc, #36]	; (8002e1c <HAL_UART_MspInit+0x9c>)
 8002df8:	f001 f8de 	bl	8003fb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	2025      	movs	r0, #37	; 0x25
 8002e02:	f000 fca0 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e06:	2025      	movs	r0, #37	; 0x25
 8002e08:	f000 fcb9 	bl	800377e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3728      	adds	r7, #40	; 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40011000 	.word	0x40011000
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020000 	.word	0x40020000

08002e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e24:	480d      	ldr	r0, [pc, #52]	; (8002e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e26:	490e      	ldr	r1, [pc, #56]	; (8002e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e28:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e2c:	e002      	b.n	8002e34 <LoopCopyDataInit>

08002e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e32:	3304      	adds	r3, #4

08002e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e38:	d3f9      	bcc.n	8002e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e3c:	4c0b      	ldr	r4, [pc, #44]	; (8002e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e40:	e001      	b.n	8002e46 <LoopFillZerobss>

08002e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e44:	3204      	adds	r2, #4

08002e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e48:	d3fb      	bcc.n	8002e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e4a:	f7ff fe2f 	bl	8002aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4e:	f005 fbff 	bl	8008650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e52:	f7ff fbdd 	bl	8002610 <main>
  bx  lr    
 8002e56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e60:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002e64:	0800d110 	.word	0x0800d110
  ldr r2, =_sbss
 8002e68:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8002e6c:	20000548 	.word	0x20000548

08002e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e70:	e7fe      	b.n	8002e70 <ADC_IRQHandler>

08002e72 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	460a      	mov	r2, r1
 8002e7c:	71fb      	strb	r3, [r7, #7]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	79ba      	ldrb	r2, [r7, #6]
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	121b      	asrs	r3, r3, #8
 8002e8c:	b2db      	uxtb	r3, r3
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4623      	mov	r3, r4
 8002eac:	71fb      	strb	r3, [r7, #7]
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71bb      	strb	r3, [r7, #6]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	717b      	strb	r3, [r7, #5]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 8002eba:	79bb      	ldrb	r3, [r7, #6]
 8002ebc:	ee07 3a90 	vmov	s15, r3
 8002ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed0:	edc7 7a00 	vstr	s15, [r7]
 8002ed4:	783b      	ldrb	r3, [r7, #0]
 8002ed6:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 8002ed8:	797b      	ldrb	r3, [r7, #5]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eee:	edc7 7a00 	vstr	s15, [r7]
 8002ef2:	783b      	ldrb	r3, [r7, #0]
 8002ef4:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 8002ef6:	793b      	ldrb	r3, [r7, #4]
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0c:	edc7 7a00 	vstr	s15, [r7]
 8002f10:	783b      	ldrb	r3, [r7, #0]
 8002f12:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8002f14:	79fa      	ldrb	r2, [r7, #7]
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	189c      	adds	r4, r3, r2
 8002f1c:	797b      	ldrb	r3, [r7, #5]
 8002f1e:	21b0      	movs	r1, #176	; 0xb0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ffa6 	bl	8002e72 <scale8>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <led_set_RGB+0xc8>)
 8002f2c:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8002f2e:	79fa      	ldrb	r2, [r7, #7]
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	3301      	adds	r3, #1
 8002f38:	490a      	ldr	r1, [pc, #40]	; (8002f64 <led_set_RGB+0xc8>)
 8002f3a:	79ba      	ldrb	r2, [r7, #6]
 8002f3c:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8002f3e:	79fa      	ldrb	r2, [r7, #7]
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	1c9c      	adds	r4, r3, #2
 8002f48:	793b      	ldrb	r3, [r7, #4]
 8002f4a:	21f0      	movs	r1, #240	; 0xf0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff90 	bl	8002e72 <scale8>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <led_set_RGB+0xc8>)
 8002f58:	551a      	strb	r2, [r3, r4]

}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd90      	pop	{r4, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200004ac 	.word	0x200004ac

08002f68 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 8002f6e:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <led_render+0x148>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <led_render+0x1a>
 8002f76:	4b4f      	ldr	r3, [pc, #316]	; (80030b4 <led_render+0x14c>)
 8002f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d015      	beq.n	8002fae <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	71fb      	strb	r3, [r7, #7]
 8002f86:	e007      	b.n	8002f98 <led_render+0x30>
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	4a4b      	ldr	r2, [pc, #300]	; (80030b8 <led_render+0x150>)
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	3301      	adds	r3, #1
 8002f96:	71fb      	strb	r3, [r7, #7]
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	2b2f      	cmp	r3, #47	; 0x2f
 8002f9c:	d9f4      	bls.n	8002f88 <led_render+0x20>
    wr_buf_p = 0;
 8002f9e:	4b44      	ldr	r3, [pc, #272]	; (80030b0 <led_render+0x148>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4845      	ldr	r0, [pc, #276]	; (80030bc <led_render+0x154>)
 8002fa8:	f003 fc1a 	bl	80067e0 <HAL_TIM_PWM_Stop_DMA>
    return;
 8002fac:	e07c      	b.n	80030a8 <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8002fae:	2300      	movs	r3, #0
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	e06d      	b.n	8003090 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8002fb4:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <led_render+0x158>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	dd01      	ble.n	8002fcc <led_render+0x64>
 8002fc8:	2150      	movs	r1, #80	; 0x50
 8002fca:	e000      	b.n	8002fce <led_render+0x66>
 8002fcc:	2128      	movs	r1, #40	; 0x28
 8002fce:	4a3a      	ldr	r2, [pc, #232]	; (80030b8 <led_render+0x150>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <led_render+0x158>)
 8002fd8:	785b      	ldrb	r3, [r3, #1]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	dd01      	ble.n	8002fee <led_render+0x86>
 8002fea:	2150      	movs	r1, #80	; 0x50
 8002fec:	e000      	b.n	8002ff0 <led_render+0x88>
 8002fee:	2128      	movs	r1, #40	; 0x28
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	4a30      	ldr	r2, [pc, #192]	; (80030b8 <led_render+0x150>)
 8002ff6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <led_render+0x158>)
 8002ffc:	789b      	ldrb	r3, [r3, #2]
 8002ffe:	461a      	mov	r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	dd01      	ble.n	8003012 <led_render+0xaa>
 800300e:	2150      	movs	r1, #80	; 0x50
 8003010:	e000      	b.n	8003014 <led_render+0xac>
 8003012:	2128      	movs	r1, #40	; 0x28
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	3310      	adds	r3, #16
 8003018:	4a27      	ldr	r2, [pc, #156]	; (80030b8 <led_render+0x150>)
 800301a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <led_render+0x158>)
 8003020:	78db      	ldrb	r3, [r3, #3]
 8003022:	461a      	mov	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	2b00      	cmp	r3, #0
 8003030:	dd01      	ble.n	8003036 <led_render+0xce>
 8003032:	2150      	movs	r1, #80	; 0x50
 8003034:	e000      	b.n	8003038 <led_render+0xd0>
 8003036:	2128      	movs	r1, #40	; 0x28
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	3318      	adds	r3, #24
 800303c:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <led_render+0x150>)
 800303e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8003042:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <led_render+0x158>)
 8003044:	791b      	ldrb	r3, [r3, #4]
 8003046:	461a      	mov	r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b00      	cmp	r3, #0
 8003054:	dd01      	ble.n	800305a <led_render+0xf2>
 8003056:	2150      	movs	r1, #80	; 0x50
 8003058:	e000      	b.n	800305c <led_render+0xf4>
 800305a:	2128      	movs	r1, #40	; 0x28
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	3320      	adds	r3, #32
 8003060:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <led_render+0x150>)
 8003062:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <led_render+0x158>)
 8003068:	795b      	ldrb	r3, [r3, #5]
 800306a:	461a      	mov	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	dd01      	ble.n	800307e <led_render+0x116>
 800307a:	2150      	movs	r1, #80	; 0x50
 800307c:	e000      	b.n	8003080 <led_render+0x118>
 800307e:	2128      	movs	r1, #40	; 0x28
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	3328      	adds	r3, #40	; 0x28
 8003084:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <led_render+0x150>)
 8003086:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b07      	cmp	r3, #7
 8003094:	d98e      	bls.n	8002fb4 <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 8003096:	2330      	movs	r3, #48	; 0x30
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <led_render+0x150>)
 800309a:	2100      	movs	r1, #0
 800309c:	4807      	ldr	r0, [pc, #28]	; (80030bc <led_render+0x154>)
 800309e:	f003 f9ef 	bl	8006480 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 80030a2:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <led_render+0x148>)
 80030a4:	2202      	movs	r2, #2
 80030a6:	601a      	str	r2, [r3, #0]
}
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000530 	.word	0x20000530
 80030b4:	20000408 	.word	0x20000408
 80030b8:	200004d0 	.word	0x200004d0
 80030bc:	200003c0 	.word	0x200003c0
 80030c0:	200004ac 	.word	0x200004ac

080030c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b0b      	cmp	r3, #11
 80030d2:	d854      	bhi.n	800317e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e048      	b.n	800316c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80030da:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	4a35      	ldr	r2, [pc, #212]	; (80031bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80030e6:	5cd3      	ldrb	r3, [r2, r3]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	dd01      	ble.n	80030fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 80030f8:	2150      	movs	r1, #80	; 0x50
 80030fa:	e000      	b.n	80030fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 80030fc:	2128      	movs	r1, #40	; 0x28
 80030fe:	4a30      	ldr	r2, [pc, #192]	; (80031c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8003106:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	3301      	adds	r3, #1
 8003112:	4a2a      	ldr	r2, [pc, #168]	; (80031bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003122:	2b00      	cmp	r3, #0
 8003124:	dd01      	ble.n	800312a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 8003126:	2150      	movs	r1, #80	; 0x50
 8003128:	e000      	b.n	800312c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 800312a:	2128      	movs	r1, #40	; 0x28
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3308      	adds	r3, #8
 8003130:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8003132:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	3302      	adds	r3, #2
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8003144:	5cd3      	ldrb	r3, [r2, r3]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	dd01      	ble.n	800315a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8003156:	2150      	movs	r1, #80	; 0x50
 8003158:	e000      	b.n	800315c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800315a:	2128      	movs	r1, #40	; 0x28
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3310      	adds	r3, #16
 8003160:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8003162:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3301      	adds	r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b07      	cmp	r3, #7
 8003170:	d9b3      	bls.n	80030da <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	4a0f      	ldr	r2, [pc, #60]	; (80031b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800317a:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 800317c:	e016      	b.n	80031ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 800317e:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b0d      	cmp	r3, #13
 8003184:	d812      	bhi.n	80031ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	72fb      	strb	r3, [r7, #11]
 800318a:	e007      	b.n	800319c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8003190:	2100      	movs	r1, #0
 8003192:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003196:	7afb      	ldrb	r3, [r7, #11]
 8003198:	3301      	adds	r3, #1
 800319a:	72fb      	strb	r3, [r7, #11]
 800319c:	7afb      	ldrb	r3, [r7, #11]
 800319e:	2b17      	cmp	r3, #23
 80031a0:	d9f4      	bls.n	800318c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3301      	adds	r3, #1
 80031a8:	4a03      	ldr	r2, [pc, #12]	; (80031b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80031aa:	6013      	str	r3, [r2, #0]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	20000530 	.word	0x20000530
 80031bc:	200004ac 	.word	0x200004ac
 80031c0:	200004d0 	.word	0x200004d0

080031c4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80031cc:	4b3e      	ldr	r3, [pc, #248]	; (80032c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b0b      	cmp	r3, #11
 80031d2:	d855      	bhi.n	8003280 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e049      	b.n	800326e <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	4a39      	ldr	r2, [pc, #228]	; (80032cc <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	461a      	mov	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	dd01      	ble.n	80031fc <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 80031f8:	2150      	movs	r1, #80	; 0x50
 80031fa:	e000      	b.n	80031fe <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 80031fc:	2128      	movs	r1, #40	; 0x28
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3318      	adds	r3, #24
 8003202:	4a33      	ldr	r2, [pc, #204]	; (80032d0 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8003204:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8003208:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	3301      	adds	r3, #1
 8003214:	4a2d      	ldr	r2, [pc, #180]	; (80032cc <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	461a      	mov	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	dd01      	ble.n	800322c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8003228:	2150      	movs	r1, #80	; 0x50
 800322a:	e000      	b.n	800322e <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 800322c:	2128      	movs	r1, #40	; 0x28
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3320      	adds	r3, #32
 8003232:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8003234:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	3302      	adds	r3, #2
 8003244:	4a21      	ldr	r2, [pc, #132]	; (80032cc <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	461a      	mov	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	dd01      	ble.n	800325c <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8003258:	2150      	movs	r1, #80	; 0x50
 800325a:	e000      	b.n	800325e <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 800325c:	2128      	movs	r1, #40	; 0x28
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3328      	adds	r3, #40	; 0x28
 8003262:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8003264:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b07      	cmp	r3, #7
 8003272:	d9b2      	bls.n	80031da <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800327c:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 800327e:	e01e      	b.n	80032be <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b0d      	cmp	r3, #13
 8003286:	d813      	bhi.n	80032b0 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8003288:	2318      	movs	r3, #24
 800328a:	72fb      	strb	r3, [r7, #11]
 800328c:	e007      	b.n	800329e <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 800328e:	7afb      	ldrb	r3, [r7, #11]
 8003290:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8003292:	2100      	movs	r1, #0
 8003294:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003298:	7afb      	ldrb	r3, [r7, #11]
 800329a:	3301      	adds	r3, #1
 800329c:	72fb      	strb	r3, [r7, #11]
 800329e:	7afb      	ldrb	r3, [r7, #11]
 80032a0:	2b2f      	cmp	r3, #47	; 0x2f
 80032a2:	d9f4      	bls.n	800328e <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80032ac:	6013      	str	r3, [r2, #0]
}
 80032ae:	e006      	b.n	80032be <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80032b6:	2100      	movs	r1, #0
 80032b8:	4806      	ldr	r0, [pc, #24]	; (80032d4 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80032ba:	f003 fa91 	bl	80067e0 <HAL_TIM_PWM_Stop_DMA>
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000530 	.word	0x20000530
 80032cc:	200004ac 	.word	0x200004ac
 80032d0:	200004d0 	.word	0x200004d0
 80032d4:	200003c0 	.word	0x200003c0

080032d8 <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
 80032e2:	460b      	mov	r3, r1
 80032e4:	71bb      	strb	r3, [r7, #6]
 80032e6:	4613      	mov	r3, r2
 80032e8:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 80032ea:	797b      	ldrb	r3, [r7, #5]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <hsl_to_rgb+0x1c>
 80032f0:	2300      	movs	r3, #0
 80032f2:	e0b1      	b.n	8003458 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 80032f4:	797b      	ldrb	r3, [r7, #5]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 80032fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db09      	blt.n	800331a <hsl_to_rgb+0x42>
 8003306:	89bb      	ldrh	r3, [r7, #12]
 8003308:	b29b      	uxth	r3, r3
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	79ba      	ldrb	r2, [r7, #6]
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	121b      	asrs	r3, r3, #8
 8003314:	b2db      	uxtb	r3, r3
 8003316:	74fb      	strb	r3, [r7, #19]
 8003318:	e00a      	b.n	8003330 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 800331a:	89bb      	ldrh	r3, [r7, #12]
 800331c:	b29b      	uxth	r3, r3
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003324:	79ba      	ldrb	r2, [r7, #6]
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	121b      	asrs	r3, r3, #8
 800332c:	b2db      	uxtb	r3, r3
 800332e:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	b29b      	uxth	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	0052      	lsls	r2, r2, #1
 8003338:	4413      	add	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	b29b      	uxth	r3, r3
 800333e:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8003340:	897b      	ldrh	r3, [r7, #10]
 8003342:	b29b      	uxth	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8003348:	7d3b      	ldrb	r3, [r7, #20]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	b29b      	uxth	r3, r3
 800334e:	3301      	adds	r3, #1
 8003350:	b29b      	uxth	r3, r3
 8003352:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8003354:	897b      	ldrh	r3, [r7, #10]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d109      	bne.n	8003374 <hsl_to_rgb+0x9c>
 8003360:	89fb      	ldrh	r3, [r7, #14]
 8003362:	b29b      	uxth	r3, r3
 8003364:	7cfa      	ldrb	r2, [r7, #19]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	fb02 f303 	mul.w	r3, r2, r3
 800336c:	121b      	asrs	r3, r3, #8
 800336e:	b2db      	uxtb	r3, r3
 8003370:	74bb      	strb	r3, [r7, #18]
 8003372:	e00a      	b.n	800338a <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8003374:	89fb      	ldrh	r3, [r7, #14]
 8003376:	b29b      	uxth	r3, r3
 8003378:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800337c:	7cfa      	ldrb	r2, [r7, #19]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	121b      	asrs	r3, r3, #8
 8003386:	b2db      	uxtb	r3, r3
 8003388:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800338a:	7cfb      	ldrb	r3, [r7, #19]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	797a      	ldrb	r2, [r7, #5]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	b29b      	uxth	r3, r3
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d839      	bhi.n	800341a <hsl_to_rgb+0x142>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <hsl_to_rgb+0xd4>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033c1 	.word	0x080033c1
 80033b0:	080033d3 	.word	0x080033d3
 80033b4:	080033e5 	.word	0x080033e5
 80033b8:	080033f7 	.word	0x080033f7
 80033bc:	08003409 	.word	0x08003409
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	75fb      	strb	r3, [r7, #23]
 80033c6:	7cbb      	ldrb	r3, [r7, #18]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	75bb      	strb	r3, [r7, #22]
 80033cc:	2300      	movs	r3, #0
 80033ce:	757b      	strb	r3, [r7, #21]
 80033d0:	e02c      	b.n	800342c <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 80033d2:	7cbb      	ldrb	r3, [r7, #18]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	75fb      	strb	r3, [r7, #23]
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	75bb      	strb	r3, [r7, #22]
 80033de:	2300      	movs	r3, #0
 80033e0:	757b      	strb	r3, [r7, #21]
 80033e2:	e023      	b.n	800342c <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 80033e4:	2300      	movs	r3, #0
 80033e6:	75fb      	strb	r3, [r7, #23]
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	75bb      	strb	r3, [r7, #22]
 80033ee:	7cbb      	ldrb	r3, [r7, #18]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	757b      	strb	r3, [r7, #21]
 80033f4:	e01a      	b.n	800342c <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 80033f6:	2300      	movs	r3, #0
 80033f8:	75fb      	strb	r3, [r7, #23]
 80033fa:	7cbb      	ldrb	r3, [r7, #18]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	75bb      	strb	r3, [r7, #22]
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	757b      	strb	r3, [r7, #21]
 8003406:	e011      	b.n	800342c <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8003408:	7cbb      	ldrb	r3, [r7, #18]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	75fb      	strb	r3, [r7, #23]
 800340e:	2300      	movs	r3, #0
 8003410:	75bb      	strb	r3, [r7, #22]
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	757b      	strb	r3, [r7, #21]
 8003418:	e008      	b.n	800342c <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 800341a:	7cfb      	ldrb	r3, [r7, #19]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	75fb      	strb	r3, [r7, #23]
 8003420:	2300      	movs	r3, #0
 8003422:	75bb      	strb	r3, [r7, #22]
 8003424:	7cbb      	ldrb	r3, [r7, #18]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	757b      	strb	r3, [r7, #21]
 800342a:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	7c7b      	ldrb	r3, [r7, #17]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	4413      	add	r3, r2
 8003438:	041a      	lsls	r2, r3, #16
 800343a:	7dbb      	ldrb	r3, [r7, #22]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	4619      	mov	r1, r3
 8003440:	7c7b      	ldrb	r3, [r7, #17]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	440b      	add	r3, r1
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	431a      	orrs	r2, r3
 800344a:	7d7b      	ldrb	r3, [r7, #21]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	4619      	mov	r1, r3
 8003450:	7c7b      	ldrb	r3, [r7, #17]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	440b      	add	r3, r1
 8003456:	4313      	orrs	r3, r2
}
 8003458:	4618      	mov	r0, r3
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_Init+0x40>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <HAL_Init+0x40>)
 800346e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_Init+0x40>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <HAL_Init+0x40>)
 800347a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800347e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_Init+0x40>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a07      	ldr	r2, [pc, #28]	; (80034a4 <HAL_Init+0x40>)
 8003486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800348c:	2003      	movs	r0, #3
 800348e:	f000 f94f 	bl	8003730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003492:	200f      	movs	r0, #15
 8003494:	f000 f808 	bl	80034a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003498:	f7ff f9dc 	bl	8002854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023c00 	.word	0x40023c00

080034a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034b0:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_InitTick+0x54>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_InitTick+0x58>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	4619      	mov	r1, r3
 80034ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034be:	fbb3 f3f1 	udiv	r3, r3, r1
 80034c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f967 	bl	800379a <HAL_SYSTICK_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e00e      	b.n	80034f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b0f      	cmp	r3, #15
 80034da:	d80a      	bhi.n	80034f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034dc:	2200      	movs	r2, #0
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	f000 f92f 	bl	8003746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034e8:	4a06      	ldr	r2, [pc, #24]	; (8003504 <HAL_InitTick+0x5c>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20000098 	.word	0x20000098
 8003500:	200000a0 	.word	0x200000a0
 8003504:	2000009c 	.word	0x2000009c

08003508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_IncTick+0x20>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_IncTick+0x24>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4413      	add	r3, r2
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_IncTick+0x24>)
 800351a:	6013      	str	r3, [r2, #0]
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	200000a0 	.word	0x200000a0
 800352c:	20000534 	.word	0x20000534

08003530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return uwTick;
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <HAL_GetTick+0x14>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000534 	.word	0x20000534

08003548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003550:	f7ff ffee 	bl	8003530 <HAL_GetTick>
 8003554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d005      	beq.n	800356e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_Delay+0x44>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800356e:	bf00      	nop
 8003570:	f7ff ffde 	bl	8003530 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	429a      	cmp	r2, r3
 800357e:	d8f7      	bhi.n	8003570 <HAL_Delay+0x28>
  {
  }
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200000a0 	.word	0x200000a0

08003590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ac:	4013      	ands	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c2:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	60d3      	str	r3, [r2, #12]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <__NVIC_GetPriorityGrouping+0x18>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	f003 0307 	and.w	r3, r3, #7
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	2b00      	cmp	r3, #0
 8003604:	db0b      	blt.n	800361e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	4907      	ldr	r1, [pc, #28]	; (800362c <__NVIC_EnableIRQ+0x38>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2001      	movs	r0, #1
 8003616:	fa00 f202 	lsl.w	r2, r0, r2
 800361a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000e100 	.word	0xe000e100

08003630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003640:	2b00      	cmp	r3, #0
 8003642:	db0a      	blt.n	800365a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	490c      	ldr	r1, [pc, #48]	; (800367c <__NVIC_SetPriority+0x4c>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	0112      	lsls	r2, r2, #4
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	440b      	add	r3, r1
 8003654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003658:	e00a      	b.n	8003670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4908      	ldr	r1, [pc, #32]	; (8003680 <__NVIC_SetPriority+0x50>)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	3b04      	subs	r3, #4
 8003668:	0112      	lsls	r2, r2, #4
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	440b      	add	r3, r1
 800366e:	761a      	strb	r2, [r3, #24]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f1c3 0307 	rsb	r3, r3, #7
 800369e:	2b04      	cmp	r3, #4
 80036a0:	bf28      	it	cs
 80036a2:	2304      	movcs	r3, #4
 80036a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d902      	bls.n	80036b4 <NVIC_EncodePriority+0x30>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3b03      	subs	r3, #3
 80036b2:	e000      	b.n	80036b6 <NVIC_EncodePriority+0x32>
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	401a      	ands	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	43d9      	mvns	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036dc:	4313      	orrs	r3, r2
         );
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036fc:	d301      	bcc.n	8003702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036fe:	2301      	movs	r3, #1
 8003700:	e00f      	b.n	8003722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <SysTick_Config+0x40>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370a:	210f      	movs	r1, #15
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	f7ff ff8e 	bl	8003630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <SysTick_Config+0x40>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <SysTick_Config+0x40>)
 800371c:	2207      	movs	r2, #7
 800371e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	e000e010 	.word	0xe000e010

08003730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ff29 	bl	8003590 <__NVIC_SetPriorityGrouping>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003758:	f7ff ff3e 	bl	80035d8 <__NVIC_GetPriorityGrouping>
 800375c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	6978      	ldr	r0, [r7, #20]
 8003764:	f7ff ff8e 	bl	8003684 <NVIC_EncodePriority>
 8003768:	4602      	mov	r2, r0
 800376a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff5d 	bl	8003630 <__NVIC_SetPriority>
}
 8003776:	bf00      	nop
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff31 	bl	80035f4 <__NVIC_EnableIRQ>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ffa2 	bl	80036ec <SysTick_Config>
 80037a8:	4603      	mov	r3, r0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7ff feb6 	bl	8003530 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e099      	b.n	8003904 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f0:	e00f      	b.n	8003812 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037f2:	f7ff fe9d 	bl	8003530 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d908      	bls.n	8003812 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2203      	movs	r2, #3
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e078      	b.n	8003904 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e8      	bne.n	80037f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_DMA_Init+0x158>)
 800382c:	4013      	ands	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2b04      	cmp	r3, #4
 800386a:	d107      	bne.n	800387c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	4313      	orrs	r3, r2
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f023 0307 	bic.w	r3, r3, #7
 8003892:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d117      	bne.n	80038d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00e      	beq.n	80038d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fb01 	bl	8003ec0 <DMA_CheckFifoParam>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2240      	movs	r2, #64	; 0x40
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038d2:	2301      	movs	r3, #1
 80038d4:	e016      	b.n	8003904 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fab8 	bl	8003e54 <DMA_CalcBaseAndBitshift>
 80038e4:	4603      	mov	r3, r0
 80038e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	223f      	movs	r2, #63	; 0x3f
 80038ee:	409a      	lsls	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	f010803f 	.word	0xf010803f

08003910 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_DMA_Start_IT+0x26>
 8003932:	2302      	movs	r3, #2
 8003934:	e040      	b.n	80039b8 <HAL_DMA_Start_IT+0xa8>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	d12f      	bne.n	80039aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fa4a 	bl	8003df8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	223f      	movs	r2, #63	; 0x3f
 800396a:	409a      	lsls	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0216 	orr.w	r2, r2, #22
 800397e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e005      	b.n	80039b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
 80039b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039ce:	f7ff fdaf 	bl	8003530 <HAL_GetTick>
 80039d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d008      	beq.n	80039f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e052      	b.n	8003a98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0216 	bic.w	r2, r2, #22
 8003a00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <HAL_DMA_Abort+0x62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0208 	bic.w	r2, r2, #8
 8003a30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0201 	bic.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a42:	e013      	b.n	8003a6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a44:	f7ff fd74 	bl	8003530 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d90c      	bls.n	8003a6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e015      	b.n	8003a98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e4      	bne.n	8003a44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	223f      	movs	r2, #63	; 0x3f
 8003a80:	409a      	lsls	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d004      	beq.n	8003abe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2280      	movs	r2, #128	; 0x80
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e00c      	b.n	8003ad8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2205      	movs	r2, #5
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003af0:	4b8e      	ldr	r3, [pc, #568]	; (8003d2c <HAL_DMA_IRQHandler+0x248>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a8e      	ldr	r2, [pc, #568]	; (8003d30 <HAL_DMA_IRQHandler+0x24c>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2208      	movs	r2, #8
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01a      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0204 	bic.w	r2, r2, #4
 8003b36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f043 0201 	orr.w	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	2201      	movs	r2, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d012      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b72:	2201      	movs	r2, #1
 8003b74:	409a      	lsls	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f043 0202 	orr.w	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d012      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	2204      	movs	r2, #4
 8003baa:	409a      	lsls	r2, r3
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d043      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d03c      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	2210      	movs	r2, #16
 8003be0:	409a      	lsls	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d018      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d108      	bne.n	8003c14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d024      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
 8003c12:	e01f      	b.n	8003c54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01b      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
 8003c24:	e016      	b.n	8003c54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0208 	bic.w	r2, r2, #8
 8003c42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	2220      	movs	r2, #32
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 808f 	beq.w	8003d84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8087 	beq.w	8003d84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d136      	bne.n	8003cfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0216 	bic.w	r2, r2, #22
 8003c9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <HAL_DMA_IRQHandler+0x1da>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0208 	bic.w	r2, r2, #8
 8003ccc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	223f      	movs	r2, #63	; 0x3f
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d07e      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
        }
        return;
 8003cfa:	e079      	b.n	8003df0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10d      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d031      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
 8003d28:	e02c      	b.n	8003d84 <HAL_DMA_IRQHandler+0x2a0>
 8003d2a:	bf00      	nop
 8003d2c:	20000098 	.word	0x20000098
 8003d30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d023      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
 8003d44:	e01e      	b.n	8003d84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10f      	bne.n	8003d74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0210 	bic.w	r2, r2, #16
 8003d62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d032      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d022      	beq.n	8003dde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2205      	movs	r2, #5
 8003d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	3301      	adds	r3, #1
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d307      	bcc.n	8003dcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f2      	bne.n	8003db0 <HAL_DMA_IRQHandler+0x2cc>
 8003dca:	e000      	b.n	8003dce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003dcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
 8003dee:	e000      	b.n	8003df2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003df0:	bf00      	nop
    }
  }
}
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d108      	bne.n	8003e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e36:	e007      	b.n	8003e48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	3b10      	subs	r3, #16
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x64>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e6e:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <DMA_CalcBaseAndBitshift+0x68>)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d909      	bls.n	8003e96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	659a      	str	r2, [r3, #88]	; 0x58
 8003e94:	e007      	b.n	8003ea6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	aaaaaaab 	.word	0xaaaaaaab
 8003ebc:	0800cc94 	.word	0x0800cc94

08003ec0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d11f      	bne.n	8003f1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d856      	bhi.n	8003f8e <DMA_CheckFifoParam+0xce>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <DMA_CheckFifoParam+0x28>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003f0b 	.word	0x08003f0b
 8003ef0:	08003ef9 	.word	0x08003ef9
 8003ef4:	08003f8f 	.word	0x08003f8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d046      	beq.n	8003f92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f08:	e043      	b.n	8003f92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f12:	d140      	bne.n	8003f96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f18:	e03d      	b.n	8003f96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f22:	d121      	bne.n	8003f68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d837      	bhi.n	8003f9a <DMA_CheckFifoParam+0xda>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <DMA_CheckFifoParam+0x70>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f47 	.word	0x08003f47
 8003f38:	08003f41 	.word	0x08003f41
 8003f3c:	08003f59 	.word	0x08003f59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
      break;
 8003f44:	e030      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d025      	beq.n	8003f9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f56:	e022      	b.n	8003f9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f60:	d11f      	bne.n	8003fa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f66:	e01c      	b.n	8003fa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d903      	bls.n	8003f76 <DMA_CheckFifoParam+0xb6>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d003      	beq.n	8003f7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f74:	e018      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7a:	e015      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8c:	e00b      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e00a      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8003f92:	bf00      	nop
 8003f94:	e008      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8003f96:	bf00      	nop
 8003f98:	e006      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e004      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e002      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fa6:	bf00      	nop
    }
  } 
  
  return status; 
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop

08003fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	; 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	e159      	b.n	8004288 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	f040 8148 	bne.w	8004282 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d005      	beq.n	800400a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004006:	2b02      	cmp	r3, #2
 8004008:	d130      	bne.n	800406c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	2203      	movs	r2, #3
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004040:	2201      	movs	r2, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 0201 	and.w	r2, r3, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	2b03      	cmp	r3, #3
 8004076:	d017      	beq.n	80040a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2203      	movs	r2, #3
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d123      	bne.n	80040fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3208      	adds	r2, #8
 80040bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	220f      	movs	r2, #15
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	08da      	lsrs	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3208      	adds	r2, #8
 80040f6:	69b9      	ldr	r1, [r7, #24]
 80040f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0203 	and.w	r2, r3, #3
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a2 	beq.w	8004282 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	4b57      	ldr	r3, [pc, #348]	; (80042a0 <HAL_GPIO_Init+0x2e8>)
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	4a56      	ldr	r2, [pc, #344]	; (80042a0 <HAL_GPIO_Init+0x2e8>)
 8004148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800414c:	6453      	str	r3, [r2, #68]	; 0x44
 800414e:	4b54      	ldr	r3, [pc, #336]	; (80042a0 <HAL_GPIO_Init+0x2e8>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800415a:	4a52      	ldr	r2, [pc, #328]	; (80042a4 <HAL_GPIO_Init+0x2ec>)
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	3302      	adds	r3, #2
 8004162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	220f      	movs	r2, #15
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4013      	ands	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a49      	ldr	r2, [pc, #292]	; (80042a8 <HAL_GPIO_Init+0x2f0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d019      	beq.n	80041ba <HAL_GPIO_Init+0x202>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a48      	ldr	r2, [pc, #288]	; (80042ac <HAL_GPIO_Init+0x2f4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_GPIO_Init+0x1fe>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a47      	ldr	r2, [pc, #284]	; (80042b0 <HAL_GPIO_Init+0x2f8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00d      	beq.n	80041b2 <HAL_GPIO_Init+0x1fa>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a46      	ldr	r2, [pc, #280]	; (80042b4 <HAL_GPIO_Init+0x2fc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <HAL_GPIO_Init+0x1f6>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a45      	ldr	r2, [pc, #276]	; (80042b8 <HAL_GPIO_Init+0x300>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_GPIO_Init+0x1f2>
 80041a6:	2304      	movs	r3, #4
 80041a8:	e008      	b.n	80041bc <HAL_GPIO_Init+0x204>
 80041aa:	2307      	movs	r3, #7
 80041ac:	e006      	b.n	80041bc <HAL_GPIO_Init+0x204>
 80041ae:	2303      	movs	r3, #3
 80041b0:	e004      	b.n	80041bc <HAL_GPIO_Init+0x204>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e002      	b.n	80041bc <HAL_GPIO_Init+0x204>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <HAL_GPIO_Init+0x204>
 80041ba:	2300      	movs	r3, #0
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	f002 0203 	and.w	r2, r2, #3
 80041c2:	0092      	lsls	r2, r2, #2
 80041c4:	4093      	lsls	r3, r2
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041cc:	4935      	ldr	r1, [pc, #212]	; (80042a4 <HAL_GPIO_Init+0x2ec>)
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	089b      	lsrs	r3, r3, #2
 80041d2:	3302      	adds	r3, #2
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041da:	4b38      	ldr	r3, [pc, #224]	; (80042bc <HAL_GPIO_Init+0x304>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041fe:	4a2f      	ldr	r2, [pc, #188]	; (80042bc <HAL_GPIO_Init+0x304>)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004204:	4b2d      	ldr	r3, [pc, #180]	; (80042bc <HAL_GPIO_Init+0x304>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	43db      	mvns	r3, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004228:	4a24      	ldr	r2, [pc, #144]	; (80042bc <HAL_GPIO_Init+0x304>)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800422e:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_GPIO_Init+0x304>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004252:	4a1a      	ldr	r2, [pc, #104]	; (80042bc <HAL_GPIO_Init+0x304>)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <HAL_GPIO_Init+0x304>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800427c:	4a0f      	ldr	r2, [pc, #60]	; (80042bc <HAL_GPIO_Init+0x304>)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3301      	adds	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2b0f      	cmp	r3, #15
 800428c:	f67f aea2 	bls.w	8003fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	3724      	adds	r7, #36	; 0x24
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40013800 	.word	0x40013800
 80042a8:	40020000 	.word	0x40020000
 80042ac:	40020400 	.word	0x40020400
 80042b0:	40020800 	.word	0x40020800
 80042b4:	40020c00 	.word	0x40020c00
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40013c00 	.word	0x40013c00

080042c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	887b      	ldrh	r3, [r7, #2]
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
 80042dc:	e001      	b.n	80042e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	807b      	strh	r3, [r7, #2]
 80042fc:	4613      	mov	r3, r2
 80042fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004300:	787b      	ldrb	r3, [r7, #1]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004306:	887a      	ldrh	r2, [r7, #2]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800430c:	e003      	b.n	8004316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800430e:	887b      	ldrh	r3, [r7, #2]
 8004310:	041a      	lsls	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	619a      	str	r2, [r3, #24]
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e12b      	b.n	800458e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fe f918 	bl	8002580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2224      	movs	r2, #36	; 0x24
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004388:	f001 fbbc 	bl	8005b04 <HAL_RCC_GetPCLK1Freq>
 800438c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4a81      	ldr	r2, [pc, #516]	; (8004598 <HAL_I2C_Init+0x274>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d807      	bhi.n	80043a8 <HAL_I2C_Init+0x84>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a80      	ldr	r2, [pc, #512]	; (800459c <HAL_I2C_Init+0x278>)
 800439c:	4293      	cmp	r3, r2
 800439e:	bf94      	ite	ls
 80043a0:	2301      	movls	r3, #1
 80043a2:	2300      	movhi	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e006      	b.n	80043b6 <HAL_I2C_Init+0x92>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a7d      	ldr	r2, [pc, #500]	; (80045a0 <HAL_I2C_Init+0x27c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	bf94      	ite	ls
 80043b0:	2301      	movls	r3, #1
 80043b2:	2300      	movhi	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0e7      	b.n	800458e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a78      	ldr	r2, [pc, #480]	; (80045a4 <HAL_I2C_Init+0x280>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	0c9b      	lsrs	r3, r3, #18
 80043c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4a6a      	ldr	r2, [pc, #424]	; (8004598 <HAL_I2C_Init+0x274>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d802      	bhi.n	80043f8 <HAL_I2C_Init+0xd4>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	3301      	adds	r3, #1
 80043f6:	e009      	b.n	800440c <HAL_I2C_Init+0xe8>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	4a69      	ldr	r2, [pc, #420]	; (80045a8 <HAL_I2C_Init+0x284>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	3301      	adds	r3, #1
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	430b      	orrs	r3, r1
 8004412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800441e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	495c      	ldr	r1, [pc, #368]	; (8004598 <HAL_I2C_Init+0x274>)
 8004428:	428b      	cmp	r3, r1
 800442a:	d819      	bhi.n	8004460 <HAL_I2C_Init+0x13c>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e59      	subs	r1, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	fbb1 f3f3 	udiv	r3, r1, r3
 800443a:	1c59      	adds	r1, r3, #1
 800443c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004440:	400b      	ands	r3, r1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_I2C_Init+0x138>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1e59      	subs	r1, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fbb1 f3f3 	udiv	r3, r1, r3
 8004454:	3301      	adds	r3, #1
 8004456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445a:	e051      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 800445c:	2304      	movs	r3, #4
 800445e:	e04f      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d111      	bne.n	800448c <HAL_I2C_Init+0x168>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1e58      	subs	r0, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	440b      	add	r3, r1
 8004476:	fbb0 f3f3 	udiv	r3, r0, r3
 800447a:	3301      	adds	r3, #1
 800447c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e012      	b.n	80044b2 <HAL_I2C_Init+0x18e>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1e58      	subs	r0, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	0099      	lsls	r1, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Init+0x196>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e022      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10e      	bne.n	80044e0 <HAL_I2C_Init+0x1bc>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1e58      	subs	r0, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	440b      	add	r3, r1
 80044d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d4:	3301      	adds	r3, #1
 80044d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044de:	e00f      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1e58      	subs	r0, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	0099      	lsls	r1, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f6:	3301      	adds	r3, #1
 80044f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	6809      	ldr	r1, [r1, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800452e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6911      	ldr	r1, [r2, #16]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68d2      	ldr	r2, [r2, #12]
 800453a:	4311      	orrs	r1, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	000186a0 	.word	0x000186a0
 800459c:	001e847f 	.word	0x001e847f
 80045a0:	003d08ff 	.word	0x003d08ff
 80045a4:	431bde83 	.word	0x431bde83
 80045a8:	10624dd3 	.word	0x10624dd3

080045ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	460b      	mov	r3, r1
 80045c0:	813b      	strh	r3, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045c6:	f7fe ffb3 	bl	8003530 <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	f040 80d9 	bne.w	800478c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	2319      	movs	r3, #25
 80045e0:	2201      	movs	r2, #1
 80045e2:	496d      	ldr	r1, [pc, #436]	; (8004798 <HAL_I2C_Mem_Write+0x1ec>)
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fc7f 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
 80045f2:	e0cc      	b.n	800478e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_I2C_Mem_Write+0x56>
 80045fe:	2302      	movs	r3, #2
 8004600:	e0c5      	b.n	800478e <HAL_I2C_Mem_Write+0x1e2>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b01      	cmp	r3, #1
 8004616:	d007      	beq.n	8004628 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004636:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2221      	movs	r2, #33	; 0x21
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2240      	movs	r2, #64	; 0x40
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a3a      	ldr	r2, [r7, #32]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a4d      	ldr	r2, [pc, #308]	; (800479c <HAL_I2C_Mem_Write+0x1f0>)
 8004668:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800466a:	88f8      	ldrh	r0, [r7, #6]
 800466c:	893a      	ldrh	r2, [r7, #8]
 800466e:	8979      	ldrh	r1, [r7, #10]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	4603      	mov	r3, r0
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fab6 	bl	8004bec <I2C_RequestMemoryWrite>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d052      	beq.n	800472c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e081      	b.n	800478e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fd00 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00d      	beq.n	80046b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d107      	bne.n	80046b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e06b      	b.n	800478e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d11b      	bne.n	800472c <HAL_I2C_Mem_Write+0x180>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d017      	beq.n	800472c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1aa      	bne.n	800468a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fcec 	bl	8005116 <I2C_WaitOnBTFFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00d      	beq.n	8004760 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	2b04      	cmp	r3, #4
 800474a:	d107      	bne.n	800475c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e016      	b.n	800478e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
  }
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	00100002 	.word	0x00100002
 800479c:	ffff0000 	.word	0xffff0000

080047a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08c      	sub	sp, #48	; 0x30
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	4608      	mov	r0, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	461a      	mov	r2, r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	817b      	strh	r3, [r7, #10]
 80047b2:	460b      	mov	r3, r1
 80047b4:	813b      	strh	r3, [r7, #8]
 80047b6:	4613      	mov	r3, r2
 80047b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047ba:	f7fe feb9 	bl	8003530 <HAL_GetTick>
 80047be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	f040 8208 	bne.w	8004bde <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	2319      	movs	r3, #25
 80047d4:	2201      	movs	r2, #1
 80047d6:	497b      	ldr	r1, [pc, #492]	; (80049c4 <HAL_I2C_Mem_Read+0x224>)
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fb85 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
 80047e6:	e1fb      	b.n	8004be0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_I2C_Mem_Read+0x56>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e1f4      	b.n	8004be0 <HAL_I2C_Mem_Read+0x440>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d007      	beq.n	800481c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800482a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2222      	movs	r2, #34	; 0x22
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2240      	movs	r2, #64	; 0x40
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800484c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a5b      	ldr	r2, [pc, #364]	; (80049c8 <HAL_I2C_Mem_Read+0x228>)
 800485c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800485e:	88f8      	ldrh	r0, [r7, #6]
 8004860:	893a      	ldrh	r2, [r7, #8]
 8004862:	8979      	ldrh	r1, [r7, #10]
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	4603      	mov	r3, r0
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fa52 	bl	8004d18 <I2C_RequestMemoryRead>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e1b0      	b.n	8004be0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004882:	2b00      	cmp	r3, #0
 8004884:	d113      	bne.n	80048ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	623b      	str	r3, [r7, #32]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	623b      	str	r3, [r7, #32]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e184      	b.n	8004bb8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d11b      	bne.n	80048ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	61fb      	str	r3, [r7, #28]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e164      	b.n	8004bb8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d11b      	bne.n	800492e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004904:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	e144      	b.n	8004bb8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004944:	e138      	b.n	8004bb8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494a:	2b03      	cmp	r3, #3
 800494c:	f200 80f1 	bhi.w	8004b32 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	2b01      	cmp	r3, #1
 8004956:	d123      	bne.n	80049a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fc1b 	bl	8005198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e139      	b.n	8004be0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800499e:	e10b      	b.n	8004bb8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d14e      	bne.n	8004a46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	2200      	movs	r2, #0
 80049b0:	4906      	ldr	r1, [pc, #24]	; (80049cc <HAL_I2C_Mem_Read+0x22c>)
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fa98 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e10e      	b.n	8004be0 <HAL_I2C_Mem_Read+0x440>
 80049c2:	bf00      	nop
 80049c4:	00100002 	.word	0x00100002
 80049c8:	ffff0000 	.word	0xffff0000
 80049cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a44:	e0b8      	b.n	8004bb8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	4966      	ldr	r1, [pc, #408]	; (8004be8 <HAL_I2C_Mem_Read+0x448>)
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fa49 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e0bf      	b.n	8004be0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	494f      	ldr	r1, [pc, #316]	; (8004be8 <HAL_I2C_Mem_Read+0x448>)
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 fa1b 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e091      	b.n	8004be0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b30:	e042      	b.n	8004bb8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fb2e 	bl	8005198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e04c      	b.n	8004be0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d118      	bne.n	8004bb8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f47f aec2 	bne.w	8004946 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e000      	b.n	8004be0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004bde:	2302      	movs	r3, #2
  }
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3728      	adds	r7, #40	; 0x28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	00010004 	.word	0x00010004

08004bec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	817b      	strh	r3, [r7, #10]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	813b      	strh	r3, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f960 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00d      	beq.n	8004c4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3c:	d103      	bne.n	8004c46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e05f      	b.n	8004d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c4a:	897b      	ldrh	r3, [r7, #10]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	6a3a      	ldr	r2, [r7, #32]
 8004c5e:	492d      	ldr	r1, [pc, #180]	; (8004d14 <I2C_RequestMemoryWrite+0x128>)
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f998 	bl	8004f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e04c      	b.n	8004d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	6a39      	ldr	r1, [r7, #32]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fa02 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00d      	beq.n	8004cb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d107      	bne.n	8004cae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e02b      	b.n	8004d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d105      	bne.n	8004cc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb8:	893b      	ldrh	r3, [r7, #8]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	611a      	str	r2, [r3, #16]
 8004cc2:	e021      	b.n	8004d08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cc4:	893b      	ldrh	r3, [r7, #8]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	6a39      	ldr	r1, [r7, #32]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f9dc 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d107      	bne.n	8004cfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e005      	b.n	8004d0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cfe:	893b      	ldrh	r3, [r7, #8]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	00010002 	.word	0x00010002

08004d18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	4608      	mov	r0, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	817b      	strh	r3, [r7, #10]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	813b      	strh	r3, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f8c2 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d78:	d103      	bne.n	8004d82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0aa      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d86:	897b      	ldrh	r3, [r7, #10]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	4952      	ldr	r1, [pc, #328]	; (8004ee4 <I2C_RequestMemoryRead+0x1cc>)
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f8fa 	bl	8004f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e097      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	6a39      	ldr	r1, [r7, #32]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f964 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00d      	beq.n	8004dee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d107      	bne.n	8004dea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e076      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d105      	bne.n	8004e00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004df4:	893b      	ldrh	r3, [r7, #8]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	611a      	str	r2, [r3, #16]
 8004dfe:	e021      	b.n	8004e44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e00:	893b      	ldrh	r3, [r7, #8]
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e10:	6a39      	ldr	r1, [r7, #32]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f93e 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d107      	bne.n	8004e36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e050      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3a:	893b      	ldrh	r3, [r7, #8]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e46:	6a39      	ldr	r1, [r7, #32]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f923 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d107      	bne.n	8004e6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e035      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f82b 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00d      	beq.n	8004eb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea6:	d103      	bne.n	8004eb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e013      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004eb4:	897b      	ldrh	r3, [r7, #10]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	6a3a      	ldr	r2, [r7, #32]
 8004ec8:	4906      	ldr	r1, [pc, #24]	; (8004ee4 <I2C_RequestMemoryRead+0x1cc>)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f863 	bl	8004f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	00010002 	.word	0x00010002

08004ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef8:	e025      	b.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d021      	beq.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f02:	f7fe fb15 	bl	8003530 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d302      	bcc.n	8004f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d116      	bne.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e023      	b.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d10d      	bne.n	8004f6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	43da      	mvns	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2300      	movne	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	e00c      	b.n	8004f86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	43da      	mvns	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4013      	ands	r3, r2
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bf0c      	ite	eq
 8004f7e:	2301      	moveq	r3, #1
 8004f80:	2300      	movne	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d0b6      	beq.n	8004efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fa4:	e051      	b.n	800504a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb4:	d123      	bne.n	8004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f043 0204 	orr.w	r2, r3, #4
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e046      	b.n	800508c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d021      	beq.n	800504a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7fe fa93 	bl	8003530 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d116      	bne.n	800504a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e020      	b.n	800508c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d10c      	bne.n	800506e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	e00b      	b.n	8005086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	43da      	mvns	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4013      	ands	r3, r2
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d18d      	bne.n	8004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a0:	e02d      	b.n	80050fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f8ce 	bl	8005244 <I2C_IsAcknowledgeFailed>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e02d      	b.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d021      	beq.n	80050fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fe fa39 	bl	8003530 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d116      	bne.n	80050fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e007      	b.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d1ca      	bne.n	80050a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005122:	e02d      	b.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f88d 	bl	8005244 <I2C_IsAcknowledgeFailed>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e02d      	b.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513a:	d021      	beq.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513c:	f7fe f9f8 	bl	8003530 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	429a      	cmp	r2, r3
 800514a:	d302      	bcc.n	8005152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d116      	bne.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e007      	b.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b04      	cmp	r3, #4
 800518c:	d1ca      	bne.n	8005124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051a4:	e042      	b.n	800522c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d119      	bne.n	80051e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0210 	mvn.w	r2, #16
 80051bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e029      	b.n	800523c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e8:	f7fe f9a2 	bl	8003530 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d302      	bcc.n	80051fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d116      	bne.n	800522c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e007      	b.n	800523c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	d1b5      	bne.n	80051a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525a:	d11b      	bne.n	8005294 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005264:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	f043 0204 	orr.w	r2, r3, #4
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e267      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d075      	beq.n	80053ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052c2:	4b88      	ldr	r3, [pc, #544]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 030c 	and.w	r3, r3, #12
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d00c      	beq.n	80052e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ce:	4b85      	ldr	r3, [pc, #532]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d112      	bne.n	8005300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052da:	4b82      	ldr	r3, [pc, #520]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052e6:	d10b      	bne.n	8005300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e8:	4b7e      	ldr	r3, [pc, #504]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d05b      	beq.n	80053ac <HAL_RCC_OscConfig+0x108>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d157      	bne.n	80053ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e242      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005308:	d106      	bne.n	8005318 <HAL_RCC_OscConfig+0x74>
 800530a:	4b76      	ldr	r3, [pc, #472]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a75      	ldr	r2, [pc, #468]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	e01d      	b.n	8005354 <HAL_RCC_OscConfig+0xb0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005320:	d10c      	bne.n	800533c <HAL_RCC_OscConfig+0x98>
 8005322:	4b70      	ldr	r3, [pc, #448]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a6f      	ldr	r2, [pc, #444]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	4b6d      	ldr	r3, [pc, #436]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a6c      	ldr	r2, [pc, #432]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e00b      	b.n	8005354 <HAL_RCC_OscConfig+0xb0>
 800533c:	4b69      	ldr	r3, [pc, #420]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a68      	ldr	r2, [pc, #416]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	4b66      	ldr	r3, [pc, #408]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a65      	ldr	r2, [pc, #404]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 800534e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d013      	beq.n	8005384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fe f8e8 	bl	8003530 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005364:	f7fe f8e4 	bl	8003530 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e207      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005376:	4b5b      	ldr	r3, [pc, #364]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0xc0>
 8005382:	e014      	b.n	80053ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fe f8d4 	bl	8003530 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800538c:	f7fe f8d0 	bl	8003530 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	; 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e1f3      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800539e:	4b51      	ldr	r3, [pc, #324]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0xe8>
 80053aa:	e000      	b.n	80053ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d063      	beq.n	8005482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ba:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053c6:	4b47      	ldr	r3, [pc, #284]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d11c      	bne.n	800540c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053d2:	4b44      	ldr	r3, [pc, #272]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d116      	bne.n	800540c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053de:	4b41      	ldr	r3, [pc, #260]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <HAL_RCC_OscConfig+0x152>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d001      	beq.n	80053f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e1c7      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f6:	4b3b      	ldr	r3, [pc, #236]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4937      	ldr	r1, [pc, #220]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005406:	4313      	orrs	r3, r2
 8005408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540a:	e03a      	b.n	8005482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d020      	beq.n	8005456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005414:	4b34      	ldr	r3, [pc, #208]	; (80054e8 <HAL_RCC_OscConfig+0x244>)
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fe f889 	bl	8003530 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005422:	f7fe f885 	bl	8003530 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e1a8      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005434:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005440:	4b28      	ldr	r3, [pc, #160]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	4925      	ldr	r1, [pc, #148]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005450:	4313      	orrs	r3, r2
 8005452:	600b      	str	r3, [r1, #0]
 8005454:	e015      	b.n	8005482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005456:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <HAL_RCC_OscConfig+0x244>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fe f868 	bl	8003530 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005464:	f7fe f864 	bl	8003530 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e187      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005476:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d036      	beq.n	80054fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d016      	beq.n	80054c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <HAL_RCC_OscConfig+0x248>)
 8005498:	2201      	movs	r2, #1
 800549a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549c:	f7fe f848 	bl	8003530 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054a4:	f7fe f844 	bl	8003530 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e167      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b6:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <HAL_RCC_OscConfig+0x240>)
 80054b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f0      	beq.n	80054a4 <HAL_RCC_OscConfig+0x200>
 80054c2:	e01b      	b.n	80054fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <HAL_RCC_OscConfig+0x248>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ca:	f7fe f831 	bl	8003530 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d0:	e00e      	b.n	80054f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054d2:	f7fe f82d 	bl	8003530 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d907      	bls.n	80054f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e150      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
 80054e4:	40023800 	.word	0x40023800
 80054e8:	42470000 	.word	0x42470000
 80054ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f0:	4b88      	ldr	r3, [pc, #544]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80054f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ea      	bne.n	80054d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8097 	beq.w	8005638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550a:	2300      	movs	r3, #0
 800550c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800550e:	4b81      	ldr	r3, [pc, #516]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	4b7d      	ldr	r3, [pc, #500]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	4a7c      	ldr	r2, [pc, #496]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 8005524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005528:	6413      	str	r3, [r2, #64]	; 0x40
 800552a:	4b7a      	ldr	r3, [pc, #488]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005536:	2301      	movs	r3, #1
 8005538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553a:	4b77      	ldr	r3, [pc, #476]	; (8005718 <HAL_RCC_OscConfig+0x474>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	2b00      	cmp	r3, #0
 8005544:	d118      	bne.n	8005578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005546:	4b74      	ldr	r3, [pc, #464]	; (8005718 <HAL_RCC_OscConfig+0x474>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a73      	ldr	r2, [pc, #460]	; (8005718 <HAL_RCC_OscConfig+0x474>)
 800554c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005552:	f7fd ffed 	bl	8003530 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555a:	f7fd ffe9 	bl	8003530 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e10c      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556c:	4b6a      	ldr	r3, [pc, #424]	; (8005718 <HAL_RCC_OscConfig+0x474>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d106      	bne.n	800558e <HAL_RCC_OscConfig+0x2ea>
 8005580:	4b64      	ldr	r3, [pc, #400]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	4a63      	ldr	r2, [pc, #396]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	6713      	str	r3, [r2, #112]	; 0x70
 800558c:	e01c      	b.n	80055c8 <HAL_RCC_OscConfig+0x324>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b05      	cmp	r3, #5
 8005594:	d10c      	bne.n	80055b0 <HAL_RCC_OscConfig+0x30c>
 8005596:	4b5f      	ldr	r3, [pc, #380]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a5e      	ldr	r2, [pc, #376]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 800559c:	f043 0304 	orr.w	r3, r3, #4
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70
 80055a2:	4b5c      	ldr	r3, [pc, #368]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a5b      	ldr	r2, [pc, #364]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
 80055ae:	e00b      	b.n	80055c8 <HAL_RCC_OscConfig+0x324>
 80055b0:	4b58      	ldr	r3, [pc, #352]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80055b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b4:	4a57      	ldr	r2, [pc, #348]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	6713      	str	r3, [r2, #112]	; 0x70
 80055bc:	4b55      	ldr	r3, [pc, #340]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	4a54      	ldr	r2, [pc, #336]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80055c2:	f023 0304 	bic.w	r3, r3, #4
 80055c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d015      	beq.n	80055fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d0:	f7fd ffae 	bl	8003530 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d6:	e00a      	b.n	80055ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fd ffaa 	bl	8003530 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e0cb      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ee:	4b49      	ldr	r3, [pc, #292]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0ee      	beq.n	80055d8 <HAL_RCC_OscConfig+0x334>
 80055fa:	e014      	b.n	8005626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055fc:	f7fd ff98 	bl	8003530 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005602:	e00a      	b.n	800561a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005604:	f7fd ff94 	bl	8003530 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e0b5      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561a:	4b3e      	ldr	r3, [pc, #248]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1ee      	bne.n	8005604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d105      	bne.n	8005638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562c:	4b39      	ldr	r3, [pc, #228]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	4a38      	ldr	r2, [pc, #224]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 8005632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005636:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80a1 	beq.w	8005784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005642:	4b34      	ldr	r3, [pc, #208]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
 800564a:	2b08      	cmp	r3, #8
 800564c:	d05c      	beq.n	8005708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d141      	bne.n	80056da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005656:	4b31      	ldr	r3, [pc, #196]	; (800571c <HAL_RCC_OscConfig+0x478>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565c:	f7fd ff68 	bl	8003530 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005664:	f7fd ff64 	bl	8003530 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e087      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005676:	4b27      	ldr	r3, [pc, #156]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69da      	ldr	r2, [r3, #28]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	019b      	lsls	r3, r3, #6
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	3b01      	subs	r3, #1
 800569c:	041b      	lsls	r3, r3, #16
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	491b      	ldr	r1, [pc, #108]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056ac:	4b1b      	ldr	r3, [pc, #108]	; (800571c <HAL_RCC_OscConfig+0x478>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b2:	f7fd ff3d 	bl	8003530 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ba:	f7fd ff39 	bl	8003530 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e05c      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056cc:	4b11      	ldr	r3, [pc, #68]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x416>
 80056d8:	e054      	b.n	8005784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <HAL_RCC_OscConfig+0x478>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e0:	f7fd ff26 	bl	8003530 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e8:	f7fd ff22 	bl	8003530 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e045      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fa:	4b06      	ldr	r3, [pc, #24]	; (8005714 <HAL_RCC_OscConfig+0x470>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x444>
 8005706:	e03d      	b.n	8005784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d107      	bne.n	8005720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e038      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
 8005714:	40023800 	.word	0x40023800
 8005718:	40007000 	.word	0x40007000
 800571c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005720:	4b1b      	ldr	r3, [pc, #108]	; (8005790 <HAL_RCC_OscConfig+0x4ec>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d028      	beq.n	8005780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d121      	bne.n	8005780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005746:	429a      	cmp	r2, r3
 8005748:	d11a      	bne.n	8005780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005750:	4013      	ands	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005758:	4293      	cmp	r3, r2
 800575a:	d111      	bne.n	8005780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	3b01      	subs	r3, #1
 800576a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800576c:	429a      	cmp	r2, r3
 800576e:	d107      	bne.n	8005780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	d001      	beq.n	8005784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40023800 	.word	0x40023800

08005794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0cc      	b.n	8005942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057a8:	4b68      	ldr	r3, [pc, #416]	; (800594c <HAL_RCC_ClockConfig+0x1b8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d90c      	bls.n	80057d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b6:	4b65      	ldr	r3, [pc, #404]	; (800594c <HAL_RCC_ClockConfig+0x1b8>)
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057be:	4b63      	ldr	r3, [pc, #396]	; (800594c <HAL_RCC_ClockConfig+0x1b8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0b8      	b.n	8005942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d020      	beq.n	800581e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057e8:	4b59      	ldr	r3, [pc, #356]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4a58      	ldr	r2, [pc, #352]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005800:	4b53      	ldr	r3, [pc, #332]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	4a52      	ldr	r2, [pc, #328]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800580a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800580c:	4b50      	ldr	r3, [pc, #320]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	494d      	ldr	r1, [pc, #308]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	4313      	orrs	r3, r2
 800581c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d044      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d107      	bne.n	8005842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005832:	4b47      	ldr	r3, [pc, #284]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d119      	bne.n	8005872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e07f      	b.n	8005942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d003      	beq.n	8005852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800584e:	2b03      	cmp	r3, #3
 8005850:	d107      	bne.n	8005862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005852:	4b3f      	ldr	r3, [pc, #252]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e06f      	b.n	8005942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005862:	4b3b      	ldr	r3, [pc, #236]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e067      	b.n	8005942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005872:	4b37      	ldr	r3, [pc, #220]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f023 0203 	bic.w	r2, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4934      	ldr	r1, [pc, #208]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 8005880:	4313      	orrs	r3, r2
 8005882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005884:	f7fd fe54 	bl	8003530 <HAL_GetTick>
 8005888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	e00a      	b.n	80058a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800588c:	f7fd fe50 	bl	8003530 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e04f      	b.n	8005942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a2:	4b2b      	ldr	r3, [pc, #172]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 020c 	and.w	r2, r3, #12
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d1eb      	bne.n	800588c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058b4:	4b25      	ldr	r3, [pc, #148]	; (800594c <HAL_RCC_ClockConfig+0x1b8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d20c      	bcs.n	80058dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c2:	4b22      	ldr	r3, [pc, #136]	; (800594c <HAL_RCC_ClockConfig+0x1b8>)
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ca:	4b20      	ldr	r3, [pc, #128]	; (800594c <HAL_RCC_ClockConfig+0x1b8>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d001      	beq.n	80058dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e032      	b.n	8005942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058e8:	4b19      	ldr	r3, [pc, #100]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4916      	ldr	r1, [pc, #88]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005906:	4b12      	ldr	r3, [pc, #72]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	490e      	ldr	r1, [pc, #56]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800591a:	f000 f821 	bl	8005960 <HAL_RCC_GetSysClockFreq>
 800591e:	4602      	mov	r2, r0
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	490a      	ldr	r1, [pc, #40]	; (8005954 <HAL_RCC_ClockConfig+0x1c0>)
 800592c:	5ccb      	ldrb	r3, [r1, r3]
 800592e:	fa22 f303 	lsr.w	r3, r2, r3
 8005932:	4a09      	ldr	r2, [pc, #36]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 8005934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005936:	4b09      	ldr	r3, [pc, #36]	; (800595c <HAL_RCC_ClockConfig+0x1c8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7fd fdb4 	bl	80034a8 <HAL_InitTick>

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40023c00 	.word	0x40023c00
 8005950:	40023800 	.word	0x40023800
 8005954:	0800cc7c 	.word	0x0800cc7c
 8005958:	20000098 	.word	0x20000098
 800595c:	2000009c 	.word	0x2000009c

08005960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005964:	b090      	sub	sp, #64	; 0x40
 8005966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
 800596c:	2300      	movs	r3, #0
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005970:	2300      	movs	r3, #0
 8005972:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005978:	4b59      	ldr	r3, [pc, #356]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 030c 	and.w	r3, r3, #12
 8005980:	2b08      	cmp	r3, #8
 8005982:	d00d      	beq.n	80059a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005984:	2b08      	cmp	r3, #8
 8005986:	f200 80a1 	bhi.w	8005acc <HAL_RCC_GetSysClockFreq+0x16c>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0x34>
 800598e:	2b04      	cmp	r3, #4
 8005990:	d003      	beq.n	800599a <HAL_RCC_GetSysClockFreq+0x3a>
 8005992:	e09b      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005994:	4b53      	ldr	r3, [pc, #332]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005996:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005998:	e09b      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800599a:	4b53      	ldr	r3, [pc, #332]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800599c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800599e:	e098      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059a0:	4b4f      	ldr	r3, [pc, #316]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059aa:	4b4d      	ldr	r3, [pc, #308]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d028      	beq.n	8005a08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059b6:	4b4a      	ldr	r3, [pc, #296]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	099b      	lsrs	r3, r3, #6
 80059bc:	2200      	movs	r2, #0
 80059be:	623b      	str	r3, [r7, #32]
 80059c0:	627a      	str	r2, [r7, #36]	; 0x24
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059c8:	2100      	movs	r1, #0
 80059ca:	4b47      	ldr	r3, [pc, #284]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80059cc:	fb03 f201 	mul.w	r2, r3, r1
 80059d0:	2300      	movs	r3, #0
 80059d2:	fb00 f303 	mul.w	r3, r0, r3
 80059d6:	4413      	add	r3, r2
 80059d8:	4a43      	ldr	r2, [pc, #268]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80059da:	fba0 1202 	umull	r1, r2, r0, r2
 80059de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059e0:	460a      	mov	r2, r1
 80059e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80059e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e6:	4413      	add	r3, r2
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ec:	2200      	movs	r2, #0
 80059ee:	61bb      	str	r3, [r7, #24]
 80059f0:	61fa      	str	r2, [r7, #28]
 80059f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059fa:	f7fb f8ed 	bl	8000bd8 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4613      	mov	r3, r2
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a06:	e053      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a08:	4b35      	ldr	r3, [pc, #212]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	099b      	lsrs	r3, r3, #6
 8005a0e:	2200      	movs	r2, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	617a      	str	r2, [r7, #20]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a1a:	f04f 0b00 	mov.w	fp, #0
 8005a1e:	4652      	mov	r2, sl
 8005a20:	465b      	mov	r3, fp
 8005a22:	f04f 0000 	mov.w	r0, #0
 8005a26:	f04f 0100 	mov.w	r1, #0
 8005a2a:	0159      	lsls	r1, r3, #5
 8005a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a30:	0150      	lsls	r0, r2, #5
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	ebb2 080a 	subs.w	r8, r2, sl
 8005a3a:	eb63 090b 	sbc.w	r9, r3, fp
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a52:	ebb2 0408 	subs.w	r4, r2, r8
 8005a56:	eb63 0509 	sbc.w	r5, r3, r9
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	00eb      	lsls	r3, r5, #3
 8005a64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a68:	00e2      	lsls	r2, r4, #3
 8005a6a:	4614      	mov	r4, r2
 8005a6c:	461d      	mov	r5, r3
 8005a6e:	eb14 030a 	adds.w	r3, r4, sl
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	eb45 030b 	adc.w	r3, r5, fp
 8005a78:	607b      	str	r3, [r7, #4]
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	f04f 0300 	mov.w	r3, #0
 8005a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a86:	4629      	mov	r1, r5
 8005a88:	028b      	lsls	r3, r1, #10
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a90:	4621      	mov	r1, r4
 8005a92:	028a      	lsls	r2, r1, #10
 8005a94:	4610      	mov	r0, r2
 8005a96:	4619      	mov	r1, r3
 8005a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	60fa      	str	r2, [r7, #12]
 8005aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aa4:	f7fb f898 	bl	8000bd8 <__aeabi_uldivmod>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4613      	mov	r3, r2
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	0c1b      	lsrs	r3, r3, #16
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	3301      	adds	r3, #1
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ac0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005aca:	e002      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ace:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3740      	adds	r7, #64	; 0x40
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ade:	bf00      	nop
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	00f42400 	.word	0x00f42400
 8005ae8:	017d7840 	.word	0x017d7840

08005aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005af0:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005af2:	681b      	ldr	r3, [r3, #0]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	20000098 	.word	0x20000098

08005b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b08:	f7ff fff0 	bl	8005aec <HAL_RCC_GetHCLKFreq>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	0a9b      	lsrs	r3, r3, #10
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	4903      	ldr	r1, [pc, #12]	; (8005b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b1a:	5ccb      	ldrb	r3, [r1, r3]
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40023800 	.word	0x40023800
 8005b28:	0800cc8c 	.word	0x0800cc8c

08005b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b30:	f7ff ffdc 	bl	8005aec <HAL_RCC_GetHCLKFreq>
 8005b34:	4602      	mov	r2, r0
 8005b36:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	0b5b      	lsrs	r3, r3, #13
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	4903      	ldr	r1, [pc, #12]	; (8005b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b42:	5ccb      	ldrb	r3, [r1, r3]
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	0800cc8c 	.word	0x0800cc8c

08005b54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d038      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b7c:	4b68      	ldr	r3, [pc, #416]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b82:	f7fd fcd5 	bl	8003530 <HAL_GetTick>
 8005b86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b88:	e008      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b8a:	f7fd fcd1 	bl	8003530 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e0bd      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b9c:	4b61      	ldr	r3, [pc, #388]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1f0      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	019b      	lsls	r3, r3, #6
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	071b      	lsls	r3, r3, #28
 8005bba:	495a      	ldr	r1, [pc, #360]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bc2:	4b57      	ldr	r3, [pc, #348]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bc8:	f7fd fcb2 	bl	8003530 <HAL_GetTick>
 8005bcc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bd0:	f7fd fcae 	bl	8003530 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e09a      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be2:	4b50      	ldr	r3, [pc, #320]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8083 	beq.w	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	4b48      	ldr	r3, [pc, #288]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	4a47      	ldr	r2, [pc, #284]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0c:	4b45      	ldr	r3, [pc, #276]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c18:	4b43      	ldr	r3, [pc, #268]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a42      	ldr	r2, [pc, #264]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c22:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c24:	f7fd fc84 	bl	8003530 <HAL_GetTick>
 8005c28:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c2c:	f7fd fc80 	bl	8003530 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e06c      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c3e:	4b3a      	ldr	r3, [pc, #232]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c4a:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c52:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d02f      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d028      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c68:	4b2e      	ldr	r3, [pc, #184]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c70:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c72:	4b2e      	ldr	r3, [pc, #184]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c78:	4b2c      	ldr	r3, [pc, #176]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c7e:	4a29      	ldr	r2, [pc, #164]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c84:	4b27      	ldr	r3, [pc, #156]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d114      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c90:	f7fd fc4e 	bl	8003530 <HAL_GetTick>
 8005c94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c96:	e00a      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c98:	f7fd fc4a 	bl	8003530 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e034      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cae:	4b1d      	ldr	r3, [pc, #116]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0ee      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc6:	d10d      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005cc8:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cdc:	4911      	ldr	r1, [pc, #68]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
 8005ce2:	e005      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a0e      	ldr	r2, [pc, #56]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cee:	6093      	str	r3, [r2, #8]
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cfc:	4909      	ldr	r1, [pc, #36]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7d1a      	ldrb	r2, [r3, #20]
 8005d12:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005d14:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	42470068 	.word	0x42470068
 8005d24:	40023800 	.word	0x40023800
 8005d28:	40007000 	.word	0x40007000
 8005d2c:	42470e40 	.word	0x42470e40
 8005d30:	424711e0 	.word	0x424711e0

08005d34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e066      	b.n	8005e18 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	7f5b      	ldrb	r3, [r3, #29]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d105      	bne.n	8005d60 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fc fd4e 	bl	80027fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	22ca      	movs	r2, #202	; 0xca
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2253      	movs	r2, #83	; 0x53
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa45 	bl	8006206 <RTC_EnterInitMode>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d12c      	bne.n	8005de0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d98:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6899      	ldr	r1, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	68d2      	ldr	r2, [r2, #12]
 8005dc0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6919      	ldr	r1, [r3, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	041a      	lsls	r2, r3, #16
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa4c 	bl	8006274 <RTC_ExitInitMode>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d113      	bne.n	8005e0e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	22ff      	movs	r2, #255	; 0xff
 8005e14:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e20:	b590      	push	{r4, r7, lr}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	7f1b      	ldrb	r3, [r3, #28]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_RTC_SetTime+0x1c>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e087      	b.n	8005f4c <HAL_RTC_SetTime+0x12c>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2202      	movs	r2, #2
 8005e46:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d126      	bne.n	8005e9c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d102      	bne.n	8005e62 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fa29 	bl	80062be <RTC_ByteToBcd2>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	785b      	ldrb	r3, [r3, #1]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fa22 	bl	80062be <RTC_ByteToBcd2>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e7e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	789b      	ldrb	r3, [r3, #2]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fa1a 	bl	80062be <RTC_ByteToBcd2>
 8005e8a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e8c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	78db      	ldrb	r3, [r3, #3]
 8005e94:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	e018      	b.n	8005ece <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2200      	movs	r2, #0
 8005eae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	785b      	ldrb	r3, [r3, #1]
 8005eba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ebc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ec2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	22ca      	movs	r2, #202	; 0xca
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2253      	movs	r2, #83	; 0x53
 8005edc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f991 	bl	8006206 <RTC_EnterInitMode>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ee8:	7cfb      	ldrb	r3, [r7, #19]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d120      	bne.n	8005f30 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ef8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005efc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f0c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6899      	ldr	r1, [r3, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f9a4 	bl	8006274 <RTC_ExitInitMode>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005f30:	7cfb      	ldrb	r3, [r7, #19]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d102      	bne.n	8005f3c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	22ff      	movs	r2, #255	; 0xff
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	771a      	strb	r2, [r3, #28]

  return status;
 8005f4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd90      	pop	{r4, r7, pc}

08005f54 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f86:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	0c1b      	lsrs	r3, r3, #16
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	0a1b      	lsrs	r3, r3, #8
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	0d9b      	lsrs	r3, r3, #22
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d11a      	bne.n	8006006 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 f98f 	bl	80062f8 <RTC_Bcd2ToByte>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f986 	bl	80062f8 <RTC_Bcd2ToByte>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	789b      	ldrb	r3, [r3, #2]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 f97d 	bl	80062f8 <RTC_Bcd2ToByte>
 8005ffe:	4603      	mov	r3, r0
 8006000:	461a      	mov	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	7f1b      	ldrb	r3, [r3, #28]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <HAL_RTC_SetDate+0x1c>
 8006028:	2302      	movs	r3, #2
 800602a:	e071      	b.n	8006110 <HAL_RTC_SetDate+0x100>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2202      	movs	r2, #2
 8006036:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10e      	bne.n	800605c <HAL_RTC_SetDate+0x4c>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b00      	cmp	r3, #0
 8006048:	d008      	beq.n	800605c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	f023 0310 	bic.w	r3, r3, #16
 8006052:	b2db      	uxtb	r3, r3
 8006054:	330a      	adds	r3, #10
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d11c      	bne.n	800609c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	78db      	ldrb	r3, [r3, #3]
 8006066:	4618      	mov	r0, r3
 8006068:	f000 f929 	bl	80062be <RTC_ByteToBcd2>
 800606c:	4603      	mov	r3, r0
 800606e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	4618      	mov	r0, r3
 8006076:	f000 f922 	bl	80062be <RTC_ByteToBcd2>
 800607a:	4603      	mov	r3, r0
 800607c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800607e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	789b      	ldrb	r3, [r3, #2]
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f91a 	bl	80062be <RTC_ByteToBcd2>
 800608a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800608c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	e00e      	b.n	80060ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060a8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	22ca      	movs	r2, #202	; 0xca
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2253      	movs	r2, #83	; 0x53
 80060c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f89b 	bl	8006206 <RTC_EnterInitMode>
 80060d0:	4603      	mov	r3, r0
 80060d2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10c      	bne.n	80060f4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f8c2 	bl	8006274 <RTC_ExitInitMode>
 80060f0:	4603      	mov	r3, r0
 80060f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80060f4:	7cfb      	ldrb	r3, [r7, #19]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d102      	bne.n	8006100 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	22ff      	movs	r2, #255	; 0xff
 8006106:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	771a      	strb	r2, [r3, #28]

  return status;
 800610e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006110:	4618      	mov	r0, r3
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	bd90      	pop	{r4, r7, pc}

08006118 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006132:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006136:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	0c1b      	lsrs	r3, r3, #16
 800613c:	b2da      	uxtb	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	0a1b      	lsrs	r3, r3, #8
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	b2da      	uxtb	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800615a:	b2da      	uxtb	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	0b5b      	lsrs	r3, r3, #13
 8006164:	b2db      	uxtb	r3, r3
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	b2da      	uxtb	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d11a      	bne.n	80061ac <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	78db      	ldrb	r3, [r3, #3]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f8bc 	bl	80062f8 <RTC_Bcd2ToByte>
 8006180:	4603      	mov	r3, r0
 8006182:	461a      	mov	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	4618      	mov	r0, r3
 800618e:	f000 f8b3 	bl	80062f8 <RTC_Bcd2ToByte>
 8006192:	4603      	mov	r3, r0
 8006194:	461a      	mov	r2, r3
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	789b      	ldrb	r3, [r3, #2]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f8aa 	bl	80062f8 <RTC_Bcd2ToByte>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061d0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061d2:	f7fd f9ad 	bl	8003530 <HAL_GetTick>
 80061d6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061d8:	e009      	b.n	80061ee <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061da:	f7fd f9a9 	bl	8003530 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e8:	d901      	bls.n	80061ee <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e007      	b.n	80061fe <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0ee      	beq.n	80061da <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d122      	bne.n	800626a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006232:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006234:	f7fd f97c 	bl	8003530 <HAL_GetTick>
 8006238:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800623a:	e00c      	b.n	8006256 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800623c:	f7fd f978 	bl	8003530 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800624a:	d904      	bls.n	8006256 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2204      	movs	r2, #4
 8006250:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <RTC_EnterInitMode+0x64>
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d1e8      	bne.n	800623c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800628e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff ff89 	bl	80061b6 <HAL_RTC_WaitForSynchro>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d004      	beq.n	80062b4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2204      	movs	r2, #4
 80062ae:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	4603      	mov	r3, r0
 80062c6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80062cc:	e005      	b.n	80062da <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	3301      	adds	r3, #1
 80062d2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	3b0a      	subs	r3, #10
 80062d8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	2b09      	cmp	r3, #9
 80062de:	d8f6      	bhi.n	80062ce <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	b2db      	uxtb	r3, r3
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	091b      	lsrs	r3, r3, #4
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	0092      	lsls	r2, r2, #2
 8006310:	4413      	add	r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	b2da      	uxtb	r2, r3
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	4413      	add	r3, r2
 8006322:	b2db      	uxtb	r3, r3
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e041      	b.n	80063c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fc fc5a 	bl	8002c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f000 fd60 	bl	8006e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e041      	b.n	8006464 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f839 	bl	800646c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f000 fd11 	bl	8006e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <HAL_TIM_PWM_Start_DMA+0x2c>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e022      	b.n	80064f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d109      	bne.n	80064c6 <HAL_TIM_PWM_Start_DMA+0x46>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	bf0c      	ite	eq
 80064be:	2301      	moveq	r3, #1
 80064c0:	2300      	movne	r3, #0
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	e015      	b.n	80064f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d109      	bne.n	80064e0 <HAL_TIM_PWM_Start_DMA+0x60>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e008      	b.n	80064f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	bf0c      	ite	eq
 80064ec:	2301      	moveq	r3, #1
 80064ee:	2300      	movne	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
 80064f8:	e15d      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d109      	bne.n	8006514 <HAL_TIM_PWM_Start_DMA+0x94>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	bf0c      	ite	eq
 800650c:	2301      	moveq	r3, #1
 800650e:	2300      	movne	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	e022      	b.n	800655a <HAL_TIM_PWM_Start_DMA+0xda>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b04      	cmp	r3, #4
 8006518:	d109      	bne.n	800652e <HAL_TIM_PWM_Start_DMA+0xae>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b01      	cmp	r3, #1
 8006524:	bf0c      	ite	eq
 8006526:	2301      	moveq	r3, #1
 8006528:	2300      	movne	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e015      	b.n	800655a <HAL_TIM_PWM_Start_DMA+0xda>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b08      	cmp	r3, #8
 8006532:	d109      	bne.n	8006548 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	bf0c      	ite	eq
 8006540:	2301      	moveq	r3, #1
 8006542:	2300      	movne	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e008      	b.n	800655a <HAL_TIM_PWM_Start_DMA+0xda>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	bf0c      	ite	eq
 8006554:	2301      	moveq	r3, #1
 8006556:	2300      	movne	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d024      	beq.n	80065a8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <HAL_TIM_PWM_Start_DMA+0xee>
 8006564:	887b      	ldrh	r3, [r7, #2]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e123      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start_DMA+0xfe>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800657c:	e016      	b.n	80065ac <HAL_TIM_PWM_Start_DMA+0x12c>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b04      	cmp	r3, #4
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Start_DMA+0x10e>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800658c:	e00e      	b.n	80065ac <HAL_TIM_PWM_Start_DMA+0x12c>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b08      	cmp	r3, #8
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Start_DMA+0x11e>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800659c:	e006      	b.n	80065ac <HAL_TIM_PWM_Start_DMA+0x12c>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065a6:	e001      	b.n	80065ac <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e104      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b0c      	cmp	r3, #12
 80065b0:	f200 80ae 	bhi.w	8006710 <HAL_TIM_PWM_Start_DMA+0x290>
 80065b4:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	080065f1 	.word	0x080065f1
 80065c0:	08006711 	.word	0x08006711
 80065c4:	08006711 	.word	0x08006711
 80065c8:	08006711 	.word	0x08006711
 80065cc:	08006639 	.word	0x08006639
 80065d0:	08006711 	.word	0x08006711
 80065d4:	08006711 	.word	0x08006711
 80065d8:	08006711 	.word	0x08006711
 80065dc:	08006681 	.word	0x08006681
 80065e0:	08006711 	.word	0x08006711
 80065e4:	08006711 	.word	0x08006711
 80065e8:	08006711 	.word	0x08006711
 80065ec:	080066c9 	.word	0x080066c9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	4a72      	ldr	r2, [pc, #456]	; (80067c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80065f6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	4a71      	ldr	r2, [pc, #452]	; (80067c4 <HAL_TIM_PWM_Start_DMA+0x344>)
 80065fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	4a70      	ldr	r2, [pc, #448]	; (80067c8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006606:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3334      	adds	r3, #52	; 0x34
 8006614:	461a      	mov	r2, r3
 8006616:	887b      	ldrh	r3, [r7, #2]
 8006618:	f7fd f97a 	bl	8003910 <HAL_DMA_Start_IT>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e0c7      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006634:	60da      	str	r2, [r3, #12]
      break;
 8006636:	e06e      	b.n	8006716 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	4a60      	ldr	r2, [pc, #384]	; (80067c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800663e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	4a5f      	ldr	r2, [pc, #380]	; (80067c4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	4a5e      	ldr	r2, [pc, #376]	; (80067c8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800664e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3338      	adds	r3, #56	; 0x38
 800665c:	461a      	mov	r2, r3
 800665e:	887b      	ldrh	r3, [r7, #2]
 8006660:	f7fd f956 	bl	8003910 <HAL_DMA_Start_IT>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e0a3      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800667c:	60da      	str	r2, [r3, #12]
      break;
 800667e:	e04a      	b.n	8006716 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	4a4e      	ldr	r2, [pc, #312]	; (80067c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006686:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4a4d      	ldr	r2, [pc, #308]	; (80067c4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800668e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	4a4c      	ldr	r2, [pc, #304]	; (80067c8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006696:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	333c      	adds	r3, #60	; 0x3c
 80066a4:	461a      	mov	r2, r3
 80066a6:	887b      	ldrh	r3, [r7, #2]
 80066a8:	f7fd f932 	bl	8003910 <HAL_DMA_Start_IT>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e07f      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066c4:	60da      	str	r2, [r3, #12]
      break;
 80066c6:	e026      	b.n	8006716 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	4a3c      	ldr	r2, [pc, #240]	; (80067c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80066ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	4a3b      	ldr	r2, [pc, #236]	; (80067c4 <HAL_TIM_PWM_Start_DMA+0x344>)
 80066d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	4a3a      	ldr	r2, [pc, #232]	; (80067c8 <HAL_TIM_PWM_Start_DMA+0x348>)
 80066de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3340      	adds	r3, #64	; 0x40
 80066ec:	461a      	mov	r2, r3
 80066ee:	887b      	ldrh	r3, [r7, #2]
 80066f0:	f7fd f90e 	bl	8003910 <HAL_DMA_Start_IT>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e05b      	b.n	80067b6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800670c:	60da      	str	r2, [r3, #12]
      break;
 800670e:	e002      	b.n	8006716 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	75fb      	strb	r3, [r7, #23]
      break;
 8006714:	bf00      	nop
  }

  if (status == HAL_OK)
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d14b      	bne.n	80067b4 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2201      	movs	r2, #1
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fe2b 	bl	8007380 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a27      	ldr	r2, [pc, #156]	; (80067cc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d107      	bne.n	8006744 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006742:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a20      	ldr	r2, [pc, #128]	; (80067cc <HAL_TIM_PWM_Start_DMA+0x34c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d018      	beq.n	8006780 <HAL_TIM_PWM_Start_DMA+0x300>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006756:	d013      	beq.n	8006780 <HAL_TIM_PWM_Start_DMA+0x300>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1c      	ldr	r2, [pc, #112]	; (80067d0 <HAL_TIM_PWM_Start_DMA+0x350>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00e      	beq.n	8006780 <HAL_TIM_PWM_Start_DMA+0x300>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1b      	ldr	r2, [pc, #108]	; (80067d4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d009      	beq.n	8006780 <HAL_TIM_PWM_Start_DMA+0x300>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a19      	ldr	r2, [pc, #100]	; (80067d8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_TIM_PWM_Start_DMA+0x300>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a18      	ldr	r2, [pc, #96]	; (80067dc <HAL_TIM_PWM_Start_DMA+0x35c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d111      	bne.n	80067a4 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b06      	cmp	r3, #6
 8006790:	d010      	beq.n	80067b4 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0201 	orr.w	r2, r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a2:	e007      	b.n	80067b4 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	08006d25 	.word	0x08006d25
 80067c4:	08006dcd 	.word	0x08006dcd
 80067c8:	08006c93 	.word	0x08006c93
 80067cc:	40010000 	.word	0x40010000
 80067d0:	40000400 	.word	0x40000400
 80067d4:	40000800 	.word	0x40000800
 80067d8:	40000c00 	.word	0x40000c00
 80067dc:	40014000 	.word	0x40014000

080067e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b0c      	cmp	r3, #12
 80067f2:	d855      	bhi.n	80068a0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80067f4:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006831 	.word	0x08006831
 8006800:	080068a1 	.word	0x080068a1
 8006804:	080068a1 	.word	0x080068a1
 8006808:	080068a1 	.word	0x080068a1
 800680c:	0800684d 	.word	0x0800684d
 8006810:	080068a1 	.word	0x080068a1
 8006814:	080068a1 	.word	0x080068a1
 8006818:	080068a1 	.word	0x080068a1
 800681c:	08006869 	.word	0x08006869
 8006820:	080068a1 	.word	0x080068a1
 8006824:	080068a1 	.word	0x080068a1
 8006828:	080068a1 	.word	0x080068a1
 800682c:	08006885 	.word	0x08006885
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800683e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	4618      	mov	r0, r3
 8006846:	f7fd f92b 	bl	8003aa0 <HAL_DMA_Abort_IT>
      break;
 800684a:	e02c      	b.n	80068a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	4618      	mov	r0, r3
 8006862:	f7fd f91d 	bl	8003aa0 <HAL_DMA_Abort_IT>
      break;
 8006866:	e01e      	b.n	80068a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006876:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	4618      	mov	r0, r3
 800687e:	f7fd f90f 	bl	8003aa0 <HAL_DMA_Abort_IT>
      break;
 8006882:	e010      	b.n	80068a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006892:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006898:	4618      	mov	r0, r3
 800689a:	f7fd f901 	bl	8003aa0 <HAL_DMA_Abort_IT>
      break;
 800689e:	e002      	b.n	80068a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
      break;
 80068a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d157      	bne.n	800695c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2200      	movs	r2, #0
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fd63 	bl	8007380 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a2a      	ldr	r2, [pc, #168]	; (8006968 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d117      	bne.n	80068f4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6a1a      	ldr	r2, [r3, #32]
 80068ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10f      	bne.n	80068f4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	f240 4344 	movw	r3, #1092	; 0x444
 80068de:	4013      	ands	r3, r2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d107      	bne.n	80068f4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6a1a      	ldr	r2, [r3, #32]
 80068fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80068fe:	4013      	ands	r3, r2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10f      	bne.n	8006924 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6a1a      	ldr	r2, [r3, #32]
 800690a:	f240 4344 	movw	r3, #1092	; 0x444
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d107      	bne.n	8006924 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d104      	bne.n	8006934 <HAL_TIM_PWM_Stop_DMA+0x154>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006932:	e013      	b.n	800695c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b04      	cmp	r3, #4
 8006938:	d104      	bne.n	8006944 <HAL_TIM_PWM_Stop_DMA+0x164>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006942:	e00b      	b.n	800695c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b08      	cmp	r3, #8
 8006948:	d104      	bne.n	8006954 <HAL_TIM_PWM_Stop_DMA+0x174>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006952:	e003      	b.n	800695c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000

0800696c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006986:	2302      	movs	r3, #2
 8006988:	e0ae      	b.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b0c      	cmp	r3, #12
 8006996:	f200 809f 	bhi.w	8006ad8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800699a:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069d5 	.word	0x080069d5
 80069a4:	08006ad9 	.word	0x08006ad9
 80069a8:	08006ad9 	.word	0x08006ad9
 80069ac:	08006ad9 	.word	0x08006ad9
 80069b0:	08006a15 	.word	0x08006a15
 80069b4:	08006ad9 	.word	0x08006ad9
 80069b8:	08006ad9 	.word	0x08006ad9
 80069bc:	08006ad9 	.word	0x08006ad9
 80069c0:	08006a57 	.word	0x08006a57
 80069c4:	08006ad9 	.word	0x08006ad9
 80069c8:	08006ad9 	.word	0x08006ad9
 80069cc:	08006ad9 	.word	0x08006ad9
 80069d0:	08006a97 	.word	0x08006a97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 faaa 	bl	8006f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699a      	ldr	r2, [r3, #24]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0208 	orr.w	r2, r2, #8
 80069ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0204 	bic.w	r2, r2, #4
 80069fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6999      	ldr	r1, [r3, #24]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	619a      	str	r2, [r3, #24]
      break;
 8006a12:	e064      	b.n	8006ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 faf0 	bl	8007000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6999      	ldr	r1, [r3, #24]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	021a      	lsls	r2, r3, #8
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	619a      	str	r2, [r3, #24]
      break;
 8006a54:	e043      	b.n	8006ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68b9      	ldr	r1, [r7, #8]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fb3b 	bl	80070d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69da      	ldr	r2, [r3, #28]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0208 	orr.w	r2, r2, #8
 8006a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0204 	bic.w	r2, r2, #4
 8006a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69d9      	ldr	r1, [r3, #28]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	61da      	str	r2, [r3, #28]
      break;
 8006a94:	e023      	b.n	8006ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fb85 	bl	80071ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69da      	ldr	r2, [r3, #28]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69d9      	ldr	r1, [r3, #28]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	021a      	lsls	r2, r3, #8
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	61da      	str	r2, [r3, #28]
      break;
 8006ad6:	e002      	b.n	8006ade <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	75fb      	strb	r3, [r7, #23]
      break;
 8006adc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e0b4      	b.n	8006c76 <HAL_TIM_ConfigClockSource+0x186>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b44:	d03e      	beq.n	8006bc4 <HAL_TIM_ConfigClockSource+0xd4>
 8006b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b4a:	f200 8087 	bhi.w	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b52:	f000 8086 	beq.w	8006c62 <HAL_TIM_ConfigClockSource+0x172>
 8006b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5a:	d87f      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b5c:	2b70      	cmp	r3, #112	; 0x70
 8006b5e:	d01a      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0xa6>
 8006b60:	2b70      	cmp	r3, #112	; 0x70
 8006b62:	d87b      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b64:	2b60      	cmp	r3, #96	; 0x60
 8006b66:	d050      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0x11a>
 8006b68:	2b60      	cmp	r3, #96	; 0x60
 8006b6a:	d877      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b6c:	2b50      	cmp	r3, #80	; 0x50
 8006b6e:	d03c      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0xfa>
 8006b70:	2b50      	cmp	r3, #80	; 0x50
 8006b72:	d873      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b74:	2b40      	cmp	r3, #64	; 0x40
 8006b76:	d058      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x13a>
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d86f      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b7c:	2b30      	cmp	r3, #48	; 0x30
 8006b7e:	d064      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x15a>
 8006b80:	2b30      	cmp	r3, #48	; 0x30
 8006b82:	d86b      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	d060      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x15a>
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d867      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d05c      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x15a>
 8006b90:	2b10      	cmp	r3, #16
 8006b92:	d05a      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x15a>
 8006b94:	e062      	b.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6899      	ldr	r1, [r3, #8]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f000 fbcb 	bl	8007340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	609a      	str	r2, [r3, #8]
      break;
 8006bc2:	e04f      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	6899      	ldr	r1, [r3, #8]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f000 fbb4 	bl	8007340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006be6:	609a      	str	r2, [r3, #8]
      break;
 8006be8:	e03c      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6859      	ldr	r1, [r3, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f000 fb28 	bl	800724c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2150      	movs	r1, #80	; 0x50
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fb81 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 8006c08:	e02c      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6859      	ldr	r1, [r3, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f000 fb47 	bl	80072aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2160      	movs	r1, #96	; 0x60
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fb71 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 8006c28:	e01c      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6818      	ldr	r0, [r3, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6859      	ldr	r1, [r3, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f000 fb08 	bl	800724c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2140      	movs	r1, #64	; 0x40
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fb61 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 8006c48:	e00c      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	4610      	mov	r0, r2
 8006c56:	f000 fb58 	bl	800730a <TIM_ITRx_SetConfig>
      break;
 8006c5a:	e003      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c60:	e000      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d107      	bne.n	8006cba <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cb8:	e02a      	b.n	8006d10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d107      	bne.n	8006cd4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd2:	e01d      	b.n	8006d10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d107      	bne.n	8006cee <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cec:	e010      	b.n	8006d10 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d107      	bne.n	8006d08 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2208      	movs	r2, #8
 8006cfc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d06:	e003      	b.n	8006d10 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff ffb4 	bl	8006c7e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	771a      	strb	r2, [r3, #28]
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d10b      	bne.n	8006d54 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d136      	bne.n	8006db8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d52:	e031      	b.n	8006db8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d10b      	bne.n	8006d76 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2202      	movs	r2, #2
 8006d62:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d125      	bne.n	8006db8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d74:	e020      	b.n	8006db8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d10b      	bne.n	8006d98 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2204      	movs	r2, #4
 8006d84:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d114      	bne.n	8006db8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d96:	e00f      	b.n	8006db8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d10a      	bne.n	8006db8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2208      	movs	r2, #8
 8006da6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f7fc fa03 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	771a      	strb	r2, [r3, #28]
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d103      	bne.n	8006dec <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	771a      	strb	r2, [r3, #28]
 8006dea:	e019      	b.n	8006e20 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d103      	bne.n	8006dfe <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	771a      	strb	r2, [r3, #28]
 8006dfc:	e010      	b.n	8006e20 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d103      	bne.n	8006e10 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	771a      	strb	r2, [r3, #28]
 8006e0e:	e007      	b.n	8006e20 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d102      	bne.n	8006e20 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7fc f94f 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	771a      	strb	r2, [r3, #28]
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a34      	ldr	r2, [pc, #208]	; (8006f18 <TIM_Base_SetConfig+0xe4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00f      	beq.n	8006e6c <TIM_Base_SetConfig+0x38>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e52:	d00b      	beq.n	8006e6c <TIM_Base_SetConfig+0x38>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a31      	ldr	r2, [pc, #196]	; (8006f1c <TIM_Base_SetConfig+0xe8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <TIM_Base_SetConfig+0x38>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a30      	ldr	r2, [pc, #192]	; (8006f20 <TIM_Base_SetConfig+0xec>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_Base_SetConfig+0x38>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a2f      	ldr	r2, [pc, #188]	; (8006f24 <TIM_Base_SetConfig+0xf0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d108      	bne.n	8006e7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a25      	ldr	r2, [pc, #148]	; (8006f18 <TIM_Base_SetConfig+0xe4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d01b      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8c:	d017      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a22      	ldr	r2, [pc, #136]	; (8006f1c <TIM_Base_SetConfig+0xe8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d013      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a21      	ldr	r2, [pc, #132]	; (8006f20 <TIM_Base_SetConfig+0xec>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00f      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a20      	ldr	r2, [pc, #128]	; (8006f24 <TIM_Base_SetConfig+0xf0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00b      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1f      	ldr	r2, [pc, #124]	; (8006f28 <TIM_Base_SetConfig+0xf4>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d007      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a1e      	ldr	r2, [pc, #120]	; (8006f2c <TIM_Base_SetConfig+0xf8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a1d      	ldr	r2, [pc, #116]	; (8006f30 <TIM_Base_SetConfig+0xfc>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d108      	bne.n	8006ed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a08      	ldr	r2, [pc, #32]	; (8006f18 <TIM_Base_SetConfig+0xe4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d103      	bne.n	8006f04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	615a      	str	r2, [r3, #20]
}
 8006f0a:	bf00      	nop
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40014400 	.word	0x40014400
 8006f30:	40014800 	.word	0x40014800

08006f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	f023 0201 	bic.w	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0303 	bic.w	r3, r3, #3
 8006f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f023 0302 	bic.w	r3, r3, #2
 8006f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a1c      	ldr	r2, [pc, #112]	; (8006ffc <TIM_OC1_SetConfig+0xc8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d10c      	bne.n	8006faa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f023 0308 	bic.w	r3, r3, #8
 8006f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f023 0304 	bic.w	r3, r3, #4
 8006fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a13      	ldr	r2, [pc, #76]	; (8006ffc <TIM_OC1_SetConfig+0xc8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d111      	bne.n	8006fd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	621a      	str	r2, [r3, #32]
}
 8006ff0:	bf00      	nop
 8006ff2:	371c      	adds	r7, #28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	40010000 	.word	0x40010000

08007000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0210 	bic.w	r2, r3, #16
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f023 0320 	bic.w	r3, r3, #32
 800704a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a1e      	ldr	r2, [pc, #120]	; (80070d4 <TIM_OC2_SetConfig+0xd4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d10d      	bne.n	800707c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	011b      	lsls	r3, r3, #4
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a15      	ldr	r2, [pc, #84]	; (80070d4 <TIM_OC2_SetConfig+0xd4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d113      	bne.n	80070ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800708a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	621a      	str	r2, [r3, #32]
}
 80070c6:	bf00      	nop
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40010000 	.word	0x40010000

080070d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 0303 	bic.w	r3, r3, #3
 800710e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a1d      	ldr	r2, [pc, #116]	; (80071a8 <TIM_OC3_SetConfig+0xd0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d10d      	bne.n	8007152 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800713c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a14      	ldr	r2, [pc, #80]	; (80071a8 <TIM_OC3_SetConfig+0xd0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d113      	bne.n	8007182 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	621a      	str	r2, [r3, #32]
}
 800719c:	bf00      	nop
 800719e:	371c      	adds	r7, #28
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	40010000 	.word	0x40010000

080071ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	031b      	lsls	r3, r3, #12
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a10      	ldr	r2, [pc, #64]	; (8007248 <TIM_OC4_SetConfig+0x9c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d109      	bne.n	8007220 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	019b      	lsls	r3, r3, #6
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40010000 	.word	0x40010000

0800724c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0201 	bic.w	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f023 030a 	bic.w	r3, r3, #10
 8007288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4313      	orrs	r3, r2
 8007290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	621a      	str	r2, [r3, #32]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b087      	sub	sp, #28
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	f023 0210 	bic.w	r2, r3, #16
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	031b      	lsls	r3, r3, #12
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800730a:	b480      	push	{r7}
 800730c:	b085      	sub	sp, #20
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	f043 0307 	orr.w	r3, r3, #7
 800732c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	609a      	str	r2, [r3, #8]
}
 8007334:	bf00      	nop
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800735a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	021a      	lsls	r2, r3, #8
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	431a      	orrs	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4313      	orrs	r3, r2
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	4313      	orrs	r3, r2
 800736c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	609a      	str	r2, [r3, #8]
}
 8007374:	bf00      	nop
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 031f 	and.w	r3, r3, #31
 8007392:	2201      	movs	r2, #1
 8007394:	fa02 f303 	lsl.w	r3, r2, r3
 8007398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1a      	ldr	r2, [r3, #32]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	401a      	ands	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a1a      	ldr	r2, [r3, #32]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	fa01 f303 	lsl.w	r3, r1, r3
 80073b8:	431a      	orrs	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
	...

080073cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e050      	b.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a1c      	ldr	r2, [pc, #112]	; (8007494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d018      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007430:	d013      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a18      	ldr	r2, [pc, #96]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00e      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a16      	ldr	r2, [pc, #88]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d009      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a15      	ldr	r2, [pc, #84]	; (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d004      	beq.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a13      	ldr	r2, [pc, #76]	; (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d10c      	bne.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	4313      	orrs	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40010000 	.word	0x40010000
 8007498:	40000400 	.word	0x40000400
 800749c:	40000800 	.word	0x40000800
 80074a0:	40000c00 	.word	0x40000c00
 80074a4:	40014000 	.word	0x40014000

080074a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e03d      	b.n	8007540 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e03f      	b.n	80075de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7fb fc04 	bl	8002d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2224      	movs	r2, #36	; 0x24
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800758e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fddf 	bl	8008154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	695a      	ldr	r2, [r3, #20]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b08a      	sub	sp, #40	; 0x28
 80075ea:	af02      	add	r7, sp, #8
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	603b      	str	r3, [r7, #0]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b20      	cmp	r3, #32
 8007604:	d17c      	bne.n	8007700 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <HAL_UART_Transmit+0x2c>
 800760c:	88fb      	ldrh	r3, [r7, #6]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e075      	b.n	8007702 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_UART_Transmit+0x3e>
 8007620:	2302      	movs	r3, #2
 8007622:	e06e      	b.n	8007702 <HAL_UART_Transmit+0x11c>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2221      	movs	r2, #33	; 0x21
 8007636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800763a:	f7fb ff79 	bl	8003530 <HAL_GetTick>
 800763e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	88fa      	ldrh	r2, [r7, #6]
 8007644:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	88fa      	ldrh	r2, [r7, #6]
 800764a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007654:	d108      	bne.n	8007668 <HAL_UART_Transmit+0x82>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	61bb      	str	r3, [r7, #24]
 8007666:	e003      	b.n	8007670 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800766c:	2300      	movs	r3, #0
 800766e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007678:	e02a      	b.n	80076d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2200      	movs	r2, #0
 8007682:	2180      	movs	r1, #128	; 0x80
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fb1f 	bl	8007cc8 <UART_WaitOnFlagUntilTimeout>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e036      	b.n	8007702 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10b      	bne.n	80076b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	3302      	adds	r3, #2
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	e007      	b.n	80076c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	3301      	adds	r3, #1
 80076c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1cf      	bne.n	800767a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2200      	movs	r2, #0
 80076e2:	2140      	movs	r1, #64	; 0x40
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 faef 	bl	8007cc8 <UART_WaitOnFlagUntilTimeout>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e006      	b.n	8007702 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e000      	b.n	8007702 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007700:	2302      	movs	r3, #2
  }
}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	4613      	mov	r3, r2
 8007716:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b20      	cmp	r3, #32
 8007722:	d11d      	bne.n	8007760 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <HAL_UART_Receive_IT+0x26>
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e016      	b.n	8007762 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800773a:	2b01      	cmp	r3, #1
 800773c:	d101      	bne.n	8007742 <HAL_UART_Receive_IT+0x38>
 800773e:	2302      	movs	r3, #2
 8007740:	e00f      	b.n	8007762 <HAL_UART_Receive_IT+0x58>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007750:	88fb      	ldrh	r3, [r7, #6]
 8007752:	461a      	mov	r2, r3
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 fb24 	bl	8007da4 <UART_Start_Receive_IT>
 800775c:	4603      	mov	r3, r0
 800775e:	e000      	b.n	8007762 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007760:	2302      	movs	r3, #2
  }
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b0ba      	sub	sp, #232	; 0xe8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007792:	2300      	movs	r3, #0
 8007794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007798:	2300      	movs	r3, #0
 800779a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80077aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10f      	bne.n	80077d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b6:	f003 0320 	and.w	r3, r3, #32
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <HAL_UART_IRQHandler+0x66>
 80077be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fc07 	bl	8007fde <UART_Receive_IT>
      return;
 80077d0:	e256      	b.n	8007c80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80de 	beq.w	8007998 <HAL_UART_IRQHandler+0x22c>
 80077dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d106      	bne.n	80077f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 80d1 	beq.w	8007998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <HAL_UART_IRQHandler+0xae>
 8007802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f043 0201 	orr.w	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781e:	f003 0304 	and.w	r3, r3, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <HAL_UART_IRQHandler+0xd2>
 8007826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f043 0202 	orr.w	r2, r3, #2
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00b      	beq.n	8007862 <HAL_UART_IRQHandler+0xf6>
 800784a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	f043 0204 	orr.w	r2, r3, #4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d011      	beq.n	8007892 <HAL_UART_IRQHandler+0x126>
 800786e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800787a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d005      	beq.n	8007892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f043 0208 	orr.w	r2, r3, #8
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 81ed 	beq.w	8007c76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800789c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a0:	f003 0320 	and.w	r3, r3, #32
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d008      	beq.n	80078ba <HAL_UART_IRQHandler+0x14e>
 80078a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fb92 	bl	8007fde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c4:	2b40      	cmp	r3, #64	; 0x40
 80078c6:	bf0c      	ite	eq
 80078c8:	2301      	moveq	r3, #1
 80078ca:	2300      	movne	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d103      	bne.n	80078e6 <HAL_UART_IRQHandler+0x17a>
 80078de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d04f      	beq.n	8007986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa9a 	bl	8007e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f6:	2b40      	cmp	r3, #64	; 0x40
 80078f8:	d141      	bne.n	800797e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3314      	adds	r3, #20
 8007900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3314      	adds	r3, #20
 8007922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007926:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800792a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800793e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1d9      	bne.n	80078fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	2b00      	cmp	r3, #0
 800794c:	d013      	beq.n	8007976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	4a7d      	ldr	r2, [pc, #500]	; (8007b48 <HAL_UART_IRQHandler+0x3dc>)
 8007954:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	4618      	mov	r0, r3
 800795c:	f7fc f8a0 	bl	8003aa0 <HAL_DMA_Abort_IT>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d016      	beq.n	8007994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007970:	4610      	mov	r0, r2
 8007972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007974:	e00e      	b.n	8007994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f990 	bl	8007c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797c:	e00a      	b.n	8007994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f98c 	bl	8007c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007984:	e006      	b.n	8007994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f988 	bl	8007c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007992:	e170      	b.n	8007c76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007994:	bf00      	nop
    return;
 8007996:	e16e      	b.n	8007c76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799c:	2b01      	cmp	r3, #1
 800799e:	f040 814a 	bne.w	8007c36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a6:	f003 0310 	and.w	r3, r3, #16
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8143 	beq.w	8007c36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 813c 	beq.w	8007c36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079be:	2300      	movs	r3, #0
 80079c0:	60bb      	str	r3, [r7, #8]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60bb      	str	r3, [r7, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	f040 80b4 	bne.w	8007b4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8140 	beq.w	8007c7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a02:	429a      	cmp	r2, r3
 8007a04:	f080 8139 	bcs.w	8007c7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1a:	f000 8088 	beq.w	8007b2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	330c      	adds	r3, #12
 8007a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1d9      	bne.n	8007a1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3314      	adds	r3, #20
 8007a70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3314      	adds	r3, #20
 8007a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e1      	bne.n	8007a6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3314      	adds	r3, #20
 8007aac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3314      	adds	r3, #20
 8007ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007aca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007acc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e3      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	330c      	adds	r3, #12
 8007af2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007afe:	f023 0310 	bic.w	r3, r3, #16
 8007b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b10:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b18:	e841 2300 	strex	r3, r2, [r1]
 8007b1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e3      	bne.n	8007aec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fb ff49 	bl	80039c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8b6 	bl	8007cb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b44:	e099      	b.n	8007c7a <HAL_UART_IRQHandler+0x50e>
 8007b46:	bf00      	nop
 8007b48:	08007ee7 	.word	0x08007ee7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 808b 	beq.w	8007c7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8086 	beq.w	8007c7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	330c      	adds	r3, #12
 8007b78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	330c      	adds	r3, #12
 8007b92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b96:	647a      	str	r2, [r7, #68]	; 0x44
 8007b98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e3      	bne.n	8007b72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3314      	adds	r3, #20
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	f023 0301 	bic.w	r3, r3, #1
 8007bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3314      	adds	r3, #20
 8007bca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bce:	633a      	str	r2, [r7, #48]	; 0x30
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e3      	bne.n	8007baa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	330c      	adds	r3, #12
 8007bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0310 	bic.w	r3, r3, #16
 8007c06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	330c      	adds	r3, #12
 8007c10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c14:	61fa      	str	r2, [r7, #28]
 8007c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	69b9      	ldr	r1, [r7, #24]
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	e841 2300 	strex	r3, r2, [r1]
 8007c20:	617b      	str	r3, [r7, #20]
   return(result);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1e3      	bne.n	8007bf0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f83e 	bl	8007cb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c34:	e023      	b.n	8007c7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d009      	beq.n	8007c56 <HAL_UART_IRQHandler+0x4ea>
 8007c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f95d 	bl	8007f0e <UART_Transmit_IT>
    return;
 8007c54:	e014      	b.n	8007c80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00e      	beq.n	8007c80 <HAL_UART_IRQHandler+0x514>
 8007c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d008      	beq.n	8007c80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f99d 	bl	8007fae <UART_EndTransmit_IT>
    return;
 8007c74:	e004      	b.n	8007c80 <HAL_UART_IRQHandler+0x514>
    return;
 8007c76:	bf00      	nop
 8007c78:	e002      	b.n	8007c80 <HAL_UART_IRQHandler+0x514>
      return;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <HAL_UART_IRQHandler+0x514>
      return;
 8007c7e:	bf00      	nop
  }
}
 8007c80:	37e8      	adds	r7, #232	; 0xe8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop

08007c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b090      	sub	sp, #64	; 0x40
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cd8:	e050      	b.n	8007d7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce0:	d04c      	beq.n	8007d7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d007      	beq.n	8007cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ce8:	f7fb fc22 	bl	8003530 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d241      	bcs.n	8007d7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	330c      	adds	r3, #12
 8007cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	330c      	adds	r3, #12
 8007d16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d18:	637a      	str	r2, [r7, #52]	; 0x34
 8007d1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e5      	bne.n	8007cf8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3314      	adds	r3, #20
 8007d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	e853 3f00 	ldrex	r3, [r3]
 8007d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f023 0301 	bic.w	r3, r3, #1
 8007d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3314      	adds	r3, #20
 8007d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d4c:	623a      	str	r2, [r7, #32]
 8007d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d50:	69f9      	ldr	r1, [r7, #28]
 8007d52:	6a3a      	ldr	r2, [r7, #32]
 8007d54:	e841 2300 	strex	r3, r2, [r1]
 8007d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e5      	bne.n	8007d2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e00f      	b.n	8007d9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4013      	ands	r3, r2
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	bf0c      	ite	eq
 8007d8c:	2301      	moveq	r3, #1
 8007d8e:	2300      	movne	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	461a      	mov	r2, r3
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d09f      	beq.n	8007cda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3740      	adds	r7, #64	; 0x40
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	88fa      	ldrh	r2, [r7, #6]
 8007dbc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2222      	movs	r2, #34	; 0x22
 8007dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d007      	beq.n	8007df2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007df0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695a      	ldr	r2, [r3, #20]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f042 0201 	orr.w	r2, r2, #1
 8007e00:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f042 0220 	orr.w	r2, r2, #32
 8007e10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b095      	sub	sp, #84	; 0x54
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	330c      	adds	r3, #12
 8007e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	330c      	adds	r3, #12
 8007e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e48:	643a      	str	r2, [r7, #64]	; 0x40
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e5      	bne.n	8007e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3314      	adds	r3, #20
 8007e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f023 0301 	bic.w	r3, r3, #1
 8007e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3314      	adds	r3, #20
 8007e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e5      	bne.n	8007e5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d119      	bne.n	8007ecc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f023 0310 	bic.w	r3, r3, #16
 8007eae:	647b      	str	r3, [r7, #68]	; 0x44
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	330c      	adds	r3, #12
 8007eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eb8:	61ba      	str	r2, [r7, #24]
 8007eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	6979      	ldr	r1, [r7, #20]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e5      	bne.n	8007e98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007eda:	bf00      	nop
 8007edc:	3754      	adds	r7, #84	; 0x54
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff fecb 	bl	8007c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f06:	bf00      	nop
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b21      	cmp	r3, #33	; 0x21
 8007f20:	d13e      	bne.n	8007fa0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2a:	d114      	bne.n	8007f56 <UART_Transmit_IT+0x48>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d110      	bne.n	8007f56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	1c9a      	adds	r2, r3, #2
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	621a      	str	r2, [r3, #32]
 8007f54:	e008      	b.n	8007f68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	1c59      	adds	r1, r3, #1
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6211      	str	r1, [r2, #32]
 8007f60:	781a      	ldrb	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	4619      	mov	r1, r3
 8007f76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10f      	bne.n	8007f9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e000      	b.n	8007fa2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007fa0:	2302      	movs	r3, #2
  }
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2220      	movs	r2, #32
 8007fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7ff fe5a 	bl	8007c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b08c      	sub	sp, #48	; 0x30
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b22      	cmp	r3, #34	; 0x22
 8007ff0:	f040 80ab 	bne.w	800814a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffc:	d117      	bne.n	800802e <UART_Receive_IT+0x50>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d113      	bne.n	800802e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008006:	2300      	movs	r3, #0
 8008008:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	b29b      	uxth	r3, r3
 8008018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801c:	b29a      	uxth	r2, r3
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008026:	1c9a      	adds	r2, r3, #2
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	629a      	str	r2, [r3, #40]	; 0x28
 800802c:	e026      	b.n	800807c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008034:	2300      	movs	r3, #0
 8008036:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008040:	d007      	beq.n	8008052 <UART_Receive_IT+0x74>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10a      	bne.n	8008060 <UART_Receive_IT+0x82>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d106      	bne.n	8008060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	b2da      	uxtb	r2, r3
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e008      	b.n	8008072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800806c:	b2da      	uxtb	r2, r3
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008080:	b29b      	uxth	r3, r3
 8008082:	3b01      	subs	r3, #1
 8008084:	b29b      	uxth	r3, r3
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	4619      	mov	r1, r3
 800808a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800808c:	2b00      	cmp	r3, #0
 800808e:	d15a      	bne.n	8008146 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0220 	bic.w	r2, r2, #32
 800809e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	695a      	ldr	r2, [r3, #20]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0201 	bic.w	r2, r2, #1
 80080be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d135      	bne.n	800813c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	330c      	adds	r3, #12
 80080dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	613b      	str	r3, [r7, #16]
   return(result);
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f023 0310 	bic.w	r3, r3, #16
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	330c      	adds	r3, #12
 80080f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f6:	623a      	str	r2, [r7, #32]
 80080f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	69f9      	ldr	r1, [r7, #28]
 80080fc:	6a3a      	ldr	r2, [r7, #32]
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	61bb      	str	r3, [r7, #24]
   return(result);
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e5      	bne.n	80080d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0310 	and.w	r3, r3, #16
 8008114:	2b10      	cmp	r3, #16
 8008116:	d10a      	bne.n	800812e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7ff fdbb 	bl	8007cb0 <HAL_UARTEx_RxEventCallback>
 800813a:	e002      	b.n	8008142 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7f9 fc8b 	bl	8001a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e002      	b.n	800814c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	e000      	b.n	800814c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800814a:	2302      	movs	r3, #2
  }
}
 800814c:	4618      	mov	r0, r3
 800814e:	3730      	adds	r7, #48	; 0x30
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008158:	b0c0      	sub	sp, #256	; 0x100
 800815a:	af00      	add	r7, sp, #0
 800815c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008170:	68d9      	ldr	r1, [r3, #12]
 8008172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	ea40 0301 	orr.w	r3, r0, r1
 800817c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800817e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	431a      	orrs	r2, r3
 800818c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	431a      	orrs	r2, r3
 8008194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	4313      	orrs	r3, r2
 800819c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80081ac:	f021 010c 	bic.w	r1, r1, #12
 80081b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081ba:	430b      	orrs	r3, r1
 80081bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80081ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ce:	6999      	ldr	r1, [r3, #24]
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	ea40 0301 	orr.w	r3, r0, r1
 80081da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	4b8f      	ldr	r3, [pc, #572]	; (8008420 <UART_SetConfig+0x2cc>)
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d005      	beq.n	80081f4 <UART_SetConfig+0xa0>
 80081e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	4b8d      	ldr	r3, [pc, #564]	; (8008424 <UART_SetConfig+0x2d0>)
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d104      	bne.n	80081fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081f4:	f7fd fc9a 	bl	8005b2c <HAL_RCC_GetPCLK2Freq>
 80081f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80081fc:	e003      	b.n	8008206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081fe:	f7fd fc81 	bl	8005b04 <HAL_RCC_GetPCLK1Freq>
 8008202:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008210:	f040 810c 	bne.w	800842c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008218:	2200      	movs	r2, #0
 800821a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800821e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008226:	4622      	mov	r2, r4
 8008228:	462b      	mov	r3, r5
 800822a:	1891      	adds	r1, r2, r2
 800822c:	65b9      	str	r1, [r7, #88]	; 0x58
 800822e:	415b      	adcs	r3, r3
 8008230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008236:	4621      	mov	r1, r4
 8008238:	eb12 0801 	adds.w	r8, r2, r1
 800823c:	4629      	mov	r1, r5
 800823e:	eb43 0901 	adc.w	r9, r3, r1
 8008242:	f04f 0200 	mov.w	r2, #0
 8008246:	f04f 0300 	mov.w	r3, #0
 800824a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800824e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008256:	4690      	mov	r8, r2
 8008258:	4699      	mov	r9, r3
 800825a:	4623      	mov	r3, r4
 800825c:	eb18 0303 	adds.w	r3, r8, r3
 8008260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008264:	462b      	mov	r3, r5
 8008266:	eb49 0303 	adc.w	r3, r9, r3
 800826a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800826e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800827a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800827e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008282:	460b      	mov	r3, r1
 8008284:	18db      	adds	r3, r3, r3
 8008286:	653b      	str	r3, [r7, #80]	; 0x50
 8008288:	4613      	mov	r3, r2
 800828a:	eb42 0303 	adc.w	r3, r2, r3
 800828e:	657b      	str	r3, [r7, #84]	; 0x54
 8008290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008298:	f7f8 fc9e 	bl	8000bd8 <__aeabi_uldivmod>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4b61      	ldr	r3, [pc, #388]	; (8008428 <UART_SetConfig+0x2d4>)
 80082a2:	fba3 2302 	umull	r2, r3, r3, r2
 80082a6:	095b      	lsrs	r3, r3, #5
 80082a8:	011c      	lsls	r4, r3, #4
 80082aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80082b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80082bc:	4642      	mov	r2, r8
 80082be:	464b      	mov	r3, r9
 80082c0:	1891      	adds	r1, r2, r2
 80082c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80082c4:	415b      	adcs	r3, r3
 80082c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80082cc:	4641      	mov	r1, r8
 80082ce:	eb12 0a01 	adds.w	sl, r2, r1
 80082d2:	4649      	mov	r1, r9
 80082d4:	eb43 0b01 	adc.w	fp, r3, r1
 80082d8:	f04f 0200 	mov.w	r2, #0
 80082dc:	f04f 0300 	mov.w	r3, #0
 80082e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082ec:	4692      	mov	sl, r2
 80082ee:	469b      	mov	fp, r3
 80082f0:	4643      	mov	r3, r8
 80082f2:	eb1a 0303 	adds.w	r3, sl, r3
 80082f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082fa:	464b      	mov	r3, r9
 80082fc:	eb4b 0303 	adc.w	r3, fp, r3
 8008300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008310:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008318:	460b      	mov	r3, r1
 800831a:	18db      	adds	r3, r3, r3
 800831c:	643b      	str	r3, [r7, #64]	; 0x40
 800831e:	4613      	mov	r3, r2
 8008320:	eb42 0303 	adc.w	r3, r2, r3
 8008324:	647b      	str	r3, [r7, #68]	; 0x44
 8008326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800832a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800832e:	f7f8 fc53 	bl	8000bd8 <__aeabi_uldivmod>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4611      	mov	r1, r2
 8008338:	4b3b      	ldr	r3, [pc, #236]	; (8008428 <UART_SetConfig+0x2d4>)
 800833a:	fba3 2301 	umull	r2, r3, r3, r1
 800833e:	095b      	lsrs	r3, r3, #5
 8008340:	2264      	movs	r2, #100	; 0x64
 8008342:	fb02 f303 	mul.w	r3, r2, r3
 8008346:	1acb      	subs	r3, r1, r3
 8008348:	00db      	lsls	r3, r3, #3
 800834a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800834e:	4b36      	ldr	r3, [pc, #216]	; (8008428 <UART_SetConfig+0x2d4>)
 8008350:	fba3 2302 	umull	r2, r3, r3, r2
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800835c:	441c      	add	r4, r3
 800835e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008362:	2200      	movs	r2, #0
 8008364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008368:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800836c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008370:	4642      	mov	r2, r8
 8008372:	464b      	mov	r3, r9
 8008374:	1891      	adds	r1, r2, r2
 8008376:	63b9      	str	r1, [r7, #56]	; 0x38
 8008378:	415b      	adcs	r3, r3
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800837c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008380:	4641      	mov	r1, r8
 8008382:	1851      	adds	r1, r2, r1
 8008384:	6339      	str	r1, [r7, #48]	; 0x30
 8008386:	4649      	mov	r1, r9
 8008388:	414b      	adcs	r3, r1
 800838a:	637b      	str	r3, [r7, #52]	; 0x34
 800838c:	f04f 0200 	mov.w	r2, #0
 8008390:	f04f 0300 	mov.w	r3, #0
 8008394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008398:	4659      	mov	r1, fp
 800839a:	00cb      	lsls	r3, r1, #3
 800839c:	4651      	mov	r1, sl
 800839e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083a2:	4651      	mov	r1, sl
 80083a4:	00ca      	lsls	r2, r1, #3
 80083a6:	4610      	mov	r0, r2
 80083a8:	4619      	mov	r1, r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	4642      	mov	r2, r8
 80083ae:	189b      	adds	r3, r3, r2
 80083b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083b4:	464b      	mov	r3, r9
 80083b6:	460a      	mov	r2, r1
 80083b8:	eb42 0303 	adc.w	r3, r2, r3
 80083bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80083d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80083d4:	460b      	mov	r3, r1
 80083d6:	18db      	adds	r3, r3, r3
 80083d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80083da:	4613      	mov	r3, r2
 80083dc:	eb42 0303 	adc.w	r3, r2, r3
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80083ea:	f7f8 fbf5 	bl	8000bd8 <__aeabi_uldivmod>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4b0d      	ldr	r3, [pc, #52]	; (8008428 <UART_SetConfig+0x2d4>)
 80083f4:	fba3 1302 	umull	r1, r3, r3, r2
 80083f8:	095b      	lsrs	r3, r3, #5
 80083fa:	2164      	movs	r1, #100	; 0x64
 80083fc:	fb01 f303 	mul.w	r3, r1, r3
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	3332      	adds	r3, #50	; 0x32
 8008406:	4a08      	ldr	r2, [pc, #32]	; (8008428 <UART_SetConfig+0x2d4>)
 8008408:	fba2 2303 	umull	r2, r3, r2, r3
 800840c:	095b      	lsrs	r3, r3, #5
 800840e:	f003 0207 	and.w	r2, r3, #7
 8008412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4422      	add	r2, r4
 800841a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800841c:	e105      	b.n	800862a <UART_SetConfig+0x4d6>
 800841e:	bf00      	nop
 8008420:	40011000 	.word	0x40011000
 8008424:	40011400 	.word	0x40011400
 8008428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800842c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008430:	2200      	movs	r2, #0
 8008432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800843a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800843e:	4642      	mov	r2, r8
 8008440:	464b      	mov	r3, r9
 8008442:	1891      	adds	r1, r2, r2
 8008444:	6239      	str	r1, [r7, #32]
 8008446:	415b      	adcs	r3, r3
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
 800844a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800844e:	4641      	mov	r1, r8
 8008450:	1854      	adds	r4, r2, r1
 8008452:	4649      	mov	r1, r9
 8008454:	eb43 0501 	adc.w	r5, r3, r1
 8008458:	f04f 0200 	mov.w	r2, #0
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	00eb      	lsls	r3, r5, #3
 8008462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008466:	00e2      	lsls	r2, r4, #3
 8008468:	4614      	mov	r4, r2
 800846a:	461d      	mov	r5, r3
 800846c:	4643      	mov	r3, r8
 800846e:	18e3      	adds	r3, r4, r3
 8008470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008474:	464b      	mov	r3, r9
 8008476:	eb45 0303 	adc.w	r3, r5, r3
 800847a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800847e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800848a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800848e:	f04f 0200 	mov.w	r2, #0
 8008492:	f04f 0300 	mov.w	r3, #0
 8008496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800849a:	4629      	mov	r1, r5
 800849c:	008b      	lsls	r3, r1, #2
 800849e:	4621      	mov	r1, r4
 80084a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084a4:	4621      	mov	r1, r4
 80084a6:	008a      	lsls	r2, r1, #2
 80084a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80084ac:	f7f8 fb94 	bl	8000bd8 <__aeabi_uldivmod>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4b60      	ldr	r3, [pc, #384]	; (8008638 <UART_SetConfig+0x4e4>)
 80084b6:	fba3 2302 	umull	r2, r3, r3, r2
 80084ba:	095b      	lsrs	r3, r3, #5
 80084bc:	011c      	lsls	r4, r3, #4
 80084be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80084cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80084d0:	4642      	mov	r2, r8
 80084d2:	464b      	mov	r3, r9
 80084d4:	1891      	adds	r1, r2, r2
 80084d6:	61b9      	str	r1, [r7, #24]
 80084d8:	415b      	adcs	r3, r3
 80084da:	61fb      	str	r3, [r7, #28]
 80084dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084e0:	4641      	mov	r1, r8
 80084e2:	1851      	adds	r1, r2, r1
 80084e4:	6139      	str	r1, [r7, #16]
 80084e6:	4649      	mov	r1, r9
 80084e8:	414b      	adcs	r3, r1
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	f04f 0200 	mov.w	r2, #0
 80084f0:	f04f 0300 	mov.w	r3, #0
 80084f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084f8:	4659      	mov	r1, fp
 80084fa:	00cb      	lsls	r3, r1, #3
 80084fc:	4651      	mov	r1, sl
 80084fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008502:	4651      	mov	r1, sl
 8008504:	00ca      	lsls	r2, r1, #3
 8008506:	4610      	mov	r0, r2
 8008508:	4619      	mov	r1, r3
 800850a:	4603      	mov	r3, r0
 800850c:	4642      	mov	r2, r8
 800850e:	189b      	adds	r3, r3, r2
 8008510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008514:	464b      	mov	r3, r9
 8008516:	460a      	mov	r2, r1
 8008518:	eb42 0303 	adc.w	r3, r2, r3
 800851c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	67bb      	str	r3, [r7, #120]	; 0x78
 800852a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800852c:	f04f 0200 	mov.w	r2, #0
 8008530:	f04f 0300 	mov.w	r3, #0
 8008534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008538:	4649      	mov	r1, r9
 800853a:	008b      	lsls	r3, r1, #2
 800853c:	4641      	mov	r1, r8
 800853e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008542:	4641      	mov	r1, r8
 8008544:	008a      	lsls	r2, r1, #2
 8008546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800854a:	f7f8 fb45 	bl	8000bd8 <__aeabi_uldivmod>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4b39      	ldr	r3, [pc, #228]	; (8008638 <UART_SetConfig+0x4e4>)
 8008554:	fba3 1302 	umull	r1, r3, r3, r2
 8008558:	095b      	lsrs	r3, r3, #5
 800855a:	2164      	movs	r1, #100	; 0x64
 800855c:	fb01 f303 	mul.w	r3, r1, r3
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	3332      	adds	r3, #50	; 0x32
 8008566:	4a34      	ldr	r2, [pc, #208]	; (8008638 <UART_SetConfig+0x4e4>)
 8008568:	fba2 2303 	umull	r2, r3, r2, r3
 800856c:	095b      	lsrs	r3, r3, #5
 800856e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008572:	441c      	add	r4, r3
 8008574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008578:	2200      	movs	r2, #0
 800857a:	673b      	str	r3, [r7, #112]	; 0x70
 800857c:	677a      	str	r2, [r7, #116]	; 0x74
 800857e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008582:	4642      	mov	r2, r8
 8008584:	464b      	mov	r3, r9
 8008586:	1891      	adds	r1, r2, r2
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	415b      	adcs	r3, r3
 800858c:	60fb      	str	r3, [r7, #12]
 800858e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008592:	4641      	mov	r1, r8
 8008594:	1851      	adds	r1, r2, r1
 8008596:	6039      	str	r1, [r7, #0]
 8008598:	4649      	mov	r1, r9
 800859a:	414b      	adcs	r3, r1
 800859c:	607b      	str	r3, [r7, #4]
 800859e:	f04f 0200 	mov.w	r2, #0
 80085a2:	f04f 0300 	mov.w	r3, #0
 80085a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085aa:	4659      	mov	r1, fp
 80085ac:	00cb      	lsls	r3, r1, #3
 80085ae:	4651      	mov	r1, sl
 80085b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085b4:	4651      	mov	r1, sl
 80085b6:	00ca      	lsls	r2, r1, #3
 80085b8:	4610      	mov	r0, r2
 80085ba:	4619      	mov	r1, r3
 80085bc:	4603      	mov	r3, r0
 80085be:	4642      	mov	r2, r8
 80085c0:	189b      	adds	r3, r3, r2
 80085c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80085c4:	464b      	mov	r3, r9
 80085c6:	460a      	mov	r2, r1
 80085c8:	eb42 0303 	adc.w	r3, r2, r3
 80085cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	663b      	str	r3, [r7, #96]	; 0x60
 80085d8:	667a      	str	r2, [r7, #100]	; 0x64
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80085e6:	4649      	mov	r1, r9
 80085e8:	008b      	lsls	r3, r1, #2
 80085ea:	4641      	mov	r1, r8
 80085ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085f0:	4641      	mov	r1, r8
 80085f2:	008a      	lsls	r2, r1, #2
 80085f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80085f8:	f7f8 faee 	bl	8000bd8 <__aeabi_uldivmod>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4b0d      	ldr	r3, [pc, #52]	; (8008638 <UART_SetConfig+0x4e4>)
 8008602:	fba3 1302 	umull	r1, r3, r3, r2
 8008606:	095b      	lsrs	r3, r3, #5
 8008608:	2164      	movs	r1, #100	; 0x64
 800860a:	fb01 f303 	mul.w	r3, r1, r3
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	3332      	adds	r3, #50	; 0x32
 8008614:	4a08      	ldr	r2, [pc, #32]	; (8008638 <UART_SetConfig+0x4e4>)
 8008616:	fba2 2303 	umull	r2, r3, r2, r3
 800861a:	095b      	lsrs	r3, r3, #5
 800861c:	f003 020f 	and.w	r2, r3, #15
 8008620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4422      	add	r2, r4
 8008628:	609a      	str	r2, [r3, #8]
}
 800862a:	bf00      	nop
 800862c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008630:	46bd      	mov	sp, r7
 8008632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008636:	bf00      	nop
 8008638:	51eb851f 	.word	0x51eb851f

0800863c <atoi>:
 800863c:	220a      	movs	r2, #10
 800863e:	2100      	movs	r1, #0
 8008640:	f000 beda 	b.w	80093f8 <strtol>

08008644 <__errno>:
 8008644:	4b01      	ldr	r3, [pc, #4]	; (800864c <__errno+0x8>)
 8008646:	6818      	ldr	r0, [r3, #0]
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	200000a4 	.word	0x200000a4

08008650 <__libc_init_array>:
 8008650:	b570      	push	{r4, r5, r6, lr}
 8008652:	4d0d      	ldr	r5, [pc, #52]	; (8008688 <__libc_init_array+0x38>)
 8008654:	4c0d      	ldr	r4, [pc, #52]	; (800868c <__libc_init_array+0x3c>)
 8008656:	1b64      	subs	r4, r4, r5
 8008658:	10a4      	asrs	r4, r4, #2
 800865a:	2600      	movs	r6, #0
 800865c:	42a6      	cmp	r6, r4
 800865e:	d109      	bne.n	8008674 <__libc_init_array+0x24>
 8008660:	4d0b      	ldr	r5, [pc, #44]	; (8008690 <__libc_init_array+0x40>)
 8008662:	4c0c      	ldr	r4, [pc, #48]	; (8008694 <__libc_init_array+0x44>)
 8008664:	f003 ff4c 	bl	800c500 <_init>
 8008668:	1b64      	subs	r4, r4, r5
 800866a:	10a4      	asrs	r4, r4, #2
 800866c:	2600      	movs	r6, #0
 800866e:	42a6      	cmp	r6, r4
 8008670:	d105      	bne.n	800867e <__libc_init_array+0x2e>
 8008672:	bd70      	pop	{r4, r5, r6, pc}
 8008674:	f855 3b04 	ldr.w	r3, [r5], #4
 8008678:	4798      	blx	r3
 800867a:	3601      	adds	r6, #1
 800867c:	e7ee      	b.n	800865c <__libc_init_array+0xc>
 800867e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008682:	4798      	blx	r3
 8008684:	3601      	adds	r6, #1
 8008686:	e7f2      	b.n	800866e <__libc_init_array+0x1e>
 8008688:	0800d108 	.word	0x0800d108
 800868c:	0800d108 	.word	0x0800d108
 8008690:	0800d108 	.word	0x0800d108
 8008694:	0800d10c 	.word	0x0800d10c

08008698 <malloc>:
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <malloc+0xc>)
 800869a:	4601      	mov	r1, r0
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	f000 b87f 	b.w	80087a0 <_malloc_r>
 80086a2:	bf00      	nop
 80086a4:	200000a4 	.word	0x200000a4

080086a8 <free>:
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <free+0xc>)
 80086aa:	4601      	mov	r1, r0
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	f000 b80b 	b.w	80086c8 <_free_r>
 80086b2:	bf00      	nop
 80086b4:	200000a4 	.word	0x200000a4

080086b8 <memset>:
 80086b8:	4402      	add	r2, r0
 80086ba:	4603      	mov	r3, r0
 80086bc:	4293      	cmp	r3, r2
 80086be:	d100      	bne.n	80086c2 <memset+0xa>
 80086c0:	4770      	bx	lr
 80086c2:	f803 1b01 	strb.w	r1, [r3], #1
 80086c6:	e7f9      	b.n	80086bc <memset+0x4>

080086c8 <_free_r>:
 80086c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ca:	2900      	cmp	r1, #0
 80086cc:	d044      	beq.n	8008758 <_free_r+0x90>
 80086ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086d2:	9001      	str	r0, [sp, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f1a1 0404 	sub.w	r4, r1, #4
 80086da:	bfb8      	it	lt
 80086dc:	18e4      	addlt	r4, r4, r3
 80086de:	f001 fd55 	bl	800a18c <__malloc_lock>
 80086e2:	4a1e      	ldr	r2, [pc, #120]	; (800875c <_free_r+0x94>)
 80086e4:	9801      	ldr	r0, [sp, #4]
 80086e6:	6813      	ldr	r3, [r2, #0]
 80086e8:	b933      	cbnz	r3, 80086f8 <_free_r+0x30>
 80086ea:	6063      	str	r3, [r4, #4]
 80086ec:	6014      	str	r4, [r2, #0]
 80086ee:	b003      	add	sp, #12
 80086f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086f4:	f001 bd50 	b.w	800a198 <__malloc_unlock>
 80086f8:	42a3      	cmp	r3, r4
 80086fa:	d908      	bls.n	800870e <_free_r+0x46>
 80086fc:	6825      	ldr	r5, [r4, #0]
 80086fe:	1961      	adds	r1, r4, r5
 8008700:	428b      	cmp	r3, r1
 8008702:	bf01      	itttt	eq
 8008704:	6819      	ldreq	r1, [r3, #0]
 8008706:	685b      	ldreq	r3, [r3, #4]
 8008708:	1949      	addeq	r1, r1, r5
 800870a:	6021      	streq	r1, [r4, #0]
 800870c:	e7ed      	b.n	80086ea <_free_r+0x22>
 800870e:	461a      	mov	r2, r3
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	b10b      	cbz	r3, 8008718 <_free_r+0x50>
 8008714:	42a3      	cmp	r3, r4
 8008716:	d9fa      	bls.n	800870e <_free_r+0x46>
 8008718:	6811      	ldr	r1, [r2, #0]
 800871a:	1855      	adds	r5, r2, r1
 800871c:	42a5      	cmp	r5, r4
 800871e:	d10b      	bne.n	8008738 <_free_r+0x70>
 8008720:	6824      	ldr	r4, [r4, #0]
 8008722:	4421      	add	r1, r4
 8008724:	1854      	adds	r4, r2, r1
 8008726:	42a3      	cmp	r3, r4
 8008728:	6011      	str	r1, [r2, #0]
 800872a:	d1e0      	bne.n	80086ee <_free_r+0x26>
 800872c:	681c      	ldr	r4, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	6053      	str	r3, [r2, #4]
 8008732:	4421      	add	r1, r4
 8008734:	6011      	str	r1, [r2, #0]
 8008736:	e7da      	b.n	80086ee <_free_r+0x26>
 8008738:	d902      	bls.n	8008740 <_free_r+0x78>
 800873a:	230c      	movs	r3, #12
 800873c:	6003      	str	r3, [r0, #0]
 800873e:	e7d6      	b.n	80086ee <_free_r+0x26>
 8008740:	6825      	ldr	r5, [r4, #0]
 8008742:	1961      	adds	r1, r4, r5
 8008744:	428b      	cmp	r3, r1
 8008746:	bf04      	itt	eq
 8008748:	6819      	ldreq	r1, [r3, #0]
 800874a:	685b      	ldreq	r3, [r3, #4]
 800874c:	6063      	str	r3, [r4, #4]
 800874e:	bf04      	itt	eq
 8008750:	1949      	addeq	r1, r1, r5
 8008752:	6021      	streq	r1, [r4, #0]
 8008754:	6054      	str	r4, [r2, #4]
 8008756:	e7ca      	b.n	80086ee <_free_r+0x26>
 8008758:	b003      	add	sp, #12
 800875a:	bd30      	pop	{r4, r5, pc}
 800875c:	20000538 	.word	0x20000538

08008760 <sbrk_aligned>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	4e0e      	ldr	r6, [pc, #56]	; (800879c <sbrk_aligned+0x3c>)
 8008764:	460c      	mov	r4, r1
 8008766:	6831      	ldr	r1, [r6, #0]
 8008768:	4605      	mov	r5, r0
 800876a:	b911      	cbnz	r1, 8008772 <sbrk_aligned+0x12>
 800876c:	f000 fcf6 	bl	800915c <_sbrk_r>
 8008770:	6030      	str	r0, [r6, #0]
 8008772:	4621      	mov	r1, r4
 8008774:	4628      	mov	r0, r5
 8008776:	f000 fcf1 	bl	800915c <_sbrk_r>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	d00a      	beq.n	8008794 <sbrk_aligned+0x34>
 800877e:	1cc4      	adds	r4, r0, #3
 8008780:	f024 0403 	bic.w	r4, r4, #3
 8008784:	42a0      	cmp	r0, r4
 8008786:	d007      	beq.n	8008798 <sbrk_aligned+0x38>
 8008788:	1a21      	subs	r1, r4, r0
 800878a:	4628      	mov	r0, r5
 800878c:	f000 fce6 	bl	800915c <_sbrk_r>
 8008790:	3001      	adds	r0, #1
 8008792:	d101      	bne.n	8008798 <sbrk_aligned+0x38>
 8008794:	f04f 34ff 	mov.w	r4, #4294967295
 8008798:	4620      	mov	r0, r4
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	2000053c 	.word	0x2000053c

080087a0 <_malloc_r>:
 80087a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a4:	1ccd      	adds	r5, r1, #3
 80087a6:	f025 0503 	bic.w	r5, r5, #3
 80087aa:	3508      	adds	r5, #8
 80087ac:	2d0c      	cmp	r5, #12
 80087ae:	bf38      	it	cc
 80087b0:	250c      	movcc	r5, #12
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	4607      	mov	r7, r0
 80087b6:	db01      	blt.n	80087bc <_malloc_r+0x1c>
 80087b8:	42a9      	cmp	r1, r5
 80087ba:	d905      	bls.n	80087c8 <_malloc_r+0x28>
 80087bc:	230c      	movs	r3, #12
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	2600      	movs	r6, #0
 80087c2:	4630      	mov	r0, r6
 80087c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c8:	4e2e      	ldr	r6, [pc, #184]	; (8008884 <_malloc_r+0xe4>)
 80087ca:	f001 fcdf 	bl	800a18c <__malloc_lock>
 80087ce:	6833      	ldr	r3, [r6, #0]
 80087d0:	461c      	mov	r4, r3
 80087d2:	bb34      	cbnz	r4, 8008822 <_malloc_r+0x82>
 80087d4:	4629      	mov	r1, r5
 80087d6:	4638      	mov	r0, r7
 80087d8:	f7ff ffc2 	bl	8008760 <sbrk_aligned>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	4604      	mov	r4, r0
 80087e0:	d14d      	bne.n	800887e <_malloc_r+0xde>
 80087e2:	6834      	ldr	r4, [r6, #0]
 80087e4:	4626      	mov	r6, r4
 80087e6:	2e00      	cmp	r6, #0
 80087e8:	d140      	bne.n	800886c <_malloc_r+0xcc>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	4631      	mov	r1, r6
 80087ee:	4638      	mov	r0, r7
 80087f0:	eb04 0803 	add.w	r8, r4, r3
 80087f4:	f000 fcb2 	bl	800915c <_sbrk_r>
 80087f8:	4580      	cmp	r8, r0
 80087fa:	d13a      	bne.n	8008872 <_malloc_r+0xd2>
 80087fc:	6821      	ldr	r1, [r4, #0]
 80087fe:	3503      	adds	r5, #3
 8008800:	1a6d      	subs	r5, r5, r1
 8008802:	f025 0503 	bic.w	r5, r5, #3
 8008806:	3508      	adds	r5, #8
 8008808:	2d0c      	cmp	r5, #12
 800880a:	bf38      	it	cc
 800880c:	250c      	movcc	r5, #12
 800880e:	4629      	mov	r1, r5
 8008810:	4638      	mov	r0, r7
 8008812:	f7ff ffa5 	bl	8008760 <sbrk_aligned>
 8008816:	3001      	adds	r0, #1
 8008818:	d02b      	beq.n	8008872 <_malloc_r+0xd2>
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	442b      	add	r3, r5
 800881e:	6023      	str	r3, [r4, #0]
 8008820:	e00e      	b.n	8008840 <_malloc_r+0xa0>
 8008822:	6822      	ldr	r2, [r4, #0]
 8008824:	1b52      	subs	r2, r2, r5
 8008826:	d41e      	bmi.n	8008866 <_malloc_r+0xc6>
 8008828:	2a0b      	cmp	r2, #11
 800882a:	d916      	bls.n	800885a <_malloc_r+0xba>
 800882c:	1961      	adds	r1, r4, r5
 800882e:	42a3      	cmp	r3, r4
 8008830:	6025      	str	r5, [r4, #0]
 8008832:	bf18      	it	ne
 8008834:	6059      	strne	r1, [r3, #4]
 8008836:	6863      	ldr	r3, [r4, #4]
 8008838:	bf08      	it	eq
 800883a:	6031      	streq	r1, [r6, #0]
 800883c:	5162      	str	r2, [r4, r5]
 800883e:	604b      	str	r3, [r1, #4]
 8008840:	4638      	mov	r0, r7
 8008842:	f104 060b 	add.w	r6, r4, #11
 8008846:	f001 fca7 	bl	800a198 <__malloc_unlock>
 800884a:	f026 0607 	bic.w	r6, r6, #7
 800884e:	1d23      	adds	r3, r4, #4
 8008850:	1af2      	subs	r2, r6, r3
 8008852:	d0b6      	beq.n	80087c2 <_malloc_r+0x22>
 8008854:	1b9b      	subs	r3, r3, r6
 8008856:	50a3      	str	r3, [r4, r2]
 8008858:	e7b3      	b.n	80087c2 <_malloc_r+0x22>
 800885a:	6862      	ldr	r2, [r4, #4]
 800885c:	42a3      	cmp	r3, r4
 800885e:	bf0c      	ite	eq
 8008860:	6032      	streq	r2, [r6, #0]
 8008862:	605a      	strne	r2, [r3, #4]
 8008864:	e7ec      	b.n	8008840 <_malloc_r+0xa0>
 8008866:	4623      	mov	r3, r4
 8008868:	6864      	ldr	r4, [r4, #4]
 800886a:	e7b2      	b.n	80087d2 <_malloc_r+0x32>
 800886c:	4634      	mov	r4, r6
 800886e:	6876      	ldr	r6, [r6, #4]
 8008870:	e7b9      	b.n	80087e6 <_malloc_r+0x46>
 8008872:	230c      	movs	r3, #12
 8008874:	603b      	str	r3, [r7, #0]
 8008876:	4638      	mov	r0, r7
 8008878:	f001 fc8e 	bl	800a198 <__malloc_unlock>
 800887c:	e7a1      	b.n	80087c2 <_malloc_r+0x22>
 800887e:	6025      	str	r5, [r4, #0]
 8008880:	e7de      	b.n	8008840 <_malloc_r+0xa0>
 8008882:	bf00      	nop
 8008884:	20000538 	.word	0x20000538

08008888 <__cvt>:
 8008888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800888c:	ec55 4b10 	vmov	r4, r5, d0
 8008890:	2d00      	cmp	r5, #0
 8008892:	460e      	mov	r6, r1
 8008894:	4619      	mov	r1, r3
 8008896:	462b      	mov	r3, r5
 8008898:	bfbb      	ittet	lt
 800889a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800889e:	461d      	movlt	r5, r3
 80088a0:	2300      	movge	r3, #0
 80088a2:	232d      	movlt	r3, #45	; 0x2d
 80088a4:	700b      	strb	r3, [r1, #0]
 80088a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088ac:	4691      	mov	r9, r2
 80088ae:	f023 0820 	bic.w	r8, r3, #32
 80088b2:	bfbc      	itt	lt
 80088b4:	4622      	movlt	r2, r4
 80088b6:	4614      	movlt	r4, r2
 80088b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088bc:	d005      	beq.n	80088ca <__cvt+0x42>
 80088be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088c2:	d100      	bne.n	80088c6 <__cvt+0x3e>
 80088c4:	3601      	adds	r6, #1
 80088c6:	2102      	movs	r1, #2
 80088c8:	e000      	b.n	80088cc <__cvt+0x44>
 80088ca:	2103      	movs	r1, #3
 80088cc:	ab03      	add	r3, sp, #12
 80088ce:	9301      	str	r3, [sp, #4]
 80088d0:	ab02      	add	r3, sp, #8
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	ec45 4b10 	vmov	d0, r4, r5
 80088d8:	4653      	mov	r3, sl
 80088da:	4632      	mov	r2, r6
 80088dc:	f000 fe44 	bl	8009568 <_dtoa_r>
 80088e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088e4:	4607      	mov	r7, r0
 80088e6:	d102      	bne.n	80088ee <__cvt+0x66>
 80088e8:	f019 0f01 	tst.w	r9, #1
 80088ec:	d022      	beq.n	8008934 <__cvt+0xac>
 80088ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088f2:	eb07 0906 	add.w	r9, r7, r6
 80088f6:	d110      	bne.n	800891a <__cvt+0x92>
 80088f8:	783b      	ldrb	r3, [r7, #0]
 80088fa:	2b30      	cmp	r3, #48	; 0x30
 80088fc:	d10a      	bne.n	8008914 <__cvt+0x8c>
 80088fe:	2200      	movs	r2, #0
 8008900:	2300      	movs	r3, #0
 8008902:	4620      	mov	r0, r4
 8008904:	4629      	mov	r1, r5
 8008906:	f7f8 f8f7 	bl	8000af8 <__aeabi_dcmpeq>
 800890a:	b918      	cbnz	r0, 8008914 <__cvt+0x8c>
 800890c:	f1c6 0601 	rsb	r6, r6, #1
 8008910:	f8ca 6000 	str.w	r6, [sl]
 8008914:	f8da 3000 	ldr.w	r3, [sl]
 8008918:	4499      	add	r9, r3
 800891a:	2200      	movs	r2, #0
 800891c:	2300      	movs	r3, #0
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f8 f8e9 	bl	8000af8 <__aeabi_dcmpeq>
 8008926:	b108      	cbz	r0, 800892c <__cvt+0xa4>
 8008928:	f8cd 900c 	str.w	r9, [sp, #12]
 800892c:	2230      	movs	r2, #48	; 0x30
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	454b      	cmp	r3, r9
 8008932:	d307      	bcc.n	8008944 <__cvt+0xbc>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008938:	1bdb      	subs	r3, r3, r7
 800893a:	4638      	mov	r0, r7
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	b004      	add	sp, #16
 8008940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008944:	1c59      	adds	r1, r3, #1
 8008946:	9103      	str	r1, [sp, #12]
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	e7f0      	b.n	800892e <__cvt+0xa6>

0800894c <__exponent>:
 800894c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800894e:	4603      	mov	r3, r0
 8008950:	2900      	cmp	r1, #0
 8008952:	bfb8      	it	lt
 8008954:	4249      	neglt	r1, r1
 8008956:	f803 2b02 	strb.w	r2, [r3], #2
 800895a:	bfb4      	ite	lt
 800895c:	222d      	movlt	r2, #45	; 0x2d
 800895e:	222b      	movge	r2, #43	; 0x2b
 8008960:	2909      	cmp	r1, #9
 8008962:	7042      	strb	r2, [r0, #1]
 8008964:	dd2a      	ble.n	80089bc <__exponent+0x70>
 8008966:	f10d 0407 	add.w	r4, sp, #7
 800896a:	46a4      	mov	ip, r4
 800896c:	270a      	movs	r7, #10
 800896e:	46a6      	mov	lr, r4
 8008970:	460a      	mov	r2, r1
 8008972:	fb91 f6f7 	sdiv	r6, r1, r7
 8008976:	fb07 1516 	mls	r5, r7, r6, r1
 800897a:	3530      	adds	r5, #48	; 0x30
 800897c:	2a63      	cmp	r2, #99	; 0x63
 800897e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008982:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008986:	4631      	mov	r1, r6
 8008988:	dcf1      	bgt.n	800896e <__exponent+0x22>
 800898a:	3130      	adds	r1, #48	; 0x30
 800898c:	f1ae 0502 	sub.w	r5, lr, #2
 8008990:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008994:	1c44      	adds	r4, r0, #1
 8008996:	4629      	mov	r1, r5
 8008998:	4561      	cmp	r1, ip
 800899a:	d30a      	bcc.n	80089b2 <__exponent+0x66>
 800899c:	f10d 0209 	add.w	r2, sp, #9
 80089a0:	eba2 020e 	sub.w	r2, r2, lr
 80089a4:	4565      	cmp	r5, ip
 80089a6:	bf88      	it	hi
 80089a8:	2200      	movhi	r2, #0
 80089aa:	4413      	add	r3, r2
 80089ac:	1a18      	subs	r0, r3, r0
 80089ae:	b003      	add	sp, #12
 80089b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089ba:	e7ed      	b.n	8008998 <__exponent+0x4c>
 80089bc:	2330      	movs	r3, #48	; 0x30
 80089be:	3130      	adds	r1, #48	; 0x30
 80089c0:	7083      	strb	r3, [r0, #2]
 80089c2:	70c1      	strb	r1, [r0, #3]
 80089c4:	1d03      	adds	r3, r0, #4
 80089c6:	e7f1      	b.n	80089ac <__exponent+0x60>

080089c8 <_printf_float>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	ed2d 8b02 	vpush	{d8}
 80089d0:	b08d      	sub	sp, #52	; 0x34
 80089d2:	460c      	mov	r4, r1
 80089d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80089d8:	4616      	mov	r6, r2
 80089da:	461f      	mov	r7, r3
 80089dc:	4605      	mov	r5, r0
 80089de:	f001 fbb1 	bl	800a144 <_localeconv_r>
 80089e2:	f8d0 a000 	ldr.w	sl, [r0]
 80089e6:	4650      	mov	r0, sl
 80089e8:	f7f7 fc04 	bl	80001f4 <strlen>
 80089ec:	2300      	movs	r3, #0
 80089ee:	930a      	str	r3, [sp, #40]	; 0x28
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	9305      	str	r3, [sp, #20]
 80089f4:	f8d8 3000 	ldr.w	r3, [r8]
 80089f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80089fc:	3307      	adds	r3, #7
 80089fe:	f023 0307 	bic.w	r3, r3, #7
 8008a02:	f103 0208 	add.w	r2, r3, #8
 8008a06:	f8c8 2000 	str.w	r2, [r8]
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a1a:	9307      	str	r3, [sp, #28]
 8008a1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a20:	ee08 0a10 	vmov	s16, r0
 8008a24:	4b9f      	ldr	r3, [pc, #636]	; (8008ca4 <_printf_float+0x2dc>)
 8008a26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2e:	f7f8 f895 	bl	8000b5c <__aeabi_dcmpun>
 8008a32:	bb88      	cbnz	r0, 8008a98 <_printf_float+0xd0>
 8008a34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a38:	4b9a      	ldr	r3, [pc, #616]	; (8008ca4 <_printf_float+0x2dc>)
 8008a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3e:	f7f8 f86f 	bl	8000b20 <__aeabi_dcmple>
 8008a42:	bb48      	cbnz	r0, 8008a98 <_printf_float+0xd0>
 8008a44:	2200      	movs	r2, #0
 8008a46:	2300      	movs	r3, #0
 8008a48:	4640      	mov	r0, r8
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	f7f8 f85e 	bl	8000b0c <__aeabi_dcmplt>
 8008a50:	b110      	cbz	r0, 8008a58 <_printf_float+0x90>
 8008a52:	232d      	movs	r3, #45	; 0x2d
 8008a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a58:	4b93      	ldr	r3, [pc, #588]	; (8008ca8 <_printf_float+0x2e0>)
 8008a5a:	4894      	ldr	r0, [pc, #592]	; (8008cac <_printf_float+0x2e4>)
 8008a5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a60:	bf94      	ite	ls
 8008a62:	4698      	movls	r8, r3
 8008a64:	4680      	movhi	r8, r0
 8008a66:	2303      	movs	r3, #3
 8008a68:	6123      	str	r3, [r4, #16]
 8008a6a:	9b05      	ldr	r3, [sp, #20]
 8008a6c:	f023 0204 	bic.w	r2, r3, #4
 8008a70:	6022      	str	r2, [r4, #0]
 8008a72:	f04f 0900 	mov.w	r9, #0
 8008a76:	9700      	str	r7, [sp, #0]
 8008a78:	4633      	mov	r3, r6
 8008a7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 f9d8 	bl	8008e34 <_printf_common>
 8008a84:	3001      	adds	r0, #1
 8008a86:	f040 8090 	bne.w	8008baa <_printf_float+0x1e2>
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8e:	b00d      	add	sp, #52	; 0x34
 8008a90:	ecbd 8b02 	vpop	{d8}
 8008a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a98:	4642      	mov	r2, r8
 8008a9a:	464b      	mov	r3, r9
 8008a9c:	4640      	mov	r0, r8
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	f7f8 f85c 	bl	8000b5c <__aeabi_dcmpun>
 8008aa4:	b140      	cbz	r0, 8008ab8 <_printf_float+0xf0>
 8008aa6:	464b      	mov	r3, r9
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	bfbc      	itt	lt
 8008aac:	232d      	movlt	r3, #45	; 0x2d
 8008aae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ab2:	487f      	ldr	r0, [pc, #508]	; (8008cb0 <_printf_float+0x2e8>)
 8008ab4:	4b7f      	ldr	r3, [pc, #508]	; (8008cb4 <_printf_float+0x2ec>)
 8008ab6:	e7d1      	b.n	8008a5c <_printf_float+0x94>
 8008ab8:	6863      	ldr	r3, [r4, #4]
 8008aba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008abe:	9206      	str	r2, [sp, #24]
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	d13f      	bne.n	8008b44 <_printf_float+0x17c>
 8008ac4:	2306      	movs	r3, #6
 8008ac6:	6063      	str	r3, [r4, #4]
 8008ac8:	9b05      	ldr	r3, [sp, #20]
 8008aca:	6861      	ldr	r1, [r4, #4]
 8008acc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	9303      	str	r3, [sp, #12]
 8008ad4:	ab0a      	add	r3, sp, #40	; 0x28
 8008ad6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008ada:	ab09      	add	r3, sp, #36	; 0x24
 8008adc:	ec49 8b10 	vmov	d0, r8, r9
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	6022      	str	r2, [r4, #0]
 8008ae4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f7ff fecd 	bl	8008888 <__cvt>
 8008aee:	9b06      	ldr	r3, [sp, #24]
 8008af0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008af2:	2b47      	cmp	r3, #71	; 0x47
 8008af4:	4680      	mov	r8, r0
 8008af6:	d108      	bne.n	8008b0a <_printf_float+0x142>
 8008af8:	1cc8      	adds	r0, r1, #3
 8008afa:	db02      	blt.n	8008b02 <_printf_float+0x13a>
 8008afc:	6863      	ldr	r3, [r4, #4]
 8008afe:	4299      	cmp	r1, r3
 8008b00:	dd41      	ble.n	8008b86 <_printf_float+0x1be>
 8008b02:	f1ab 0b02 	sub.w	fp, fp, #2
 8008b06:	fa5f fb8b 	uxtb.w	fp, fp
 8008b0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b0e:	d820      	bhi.n	8008b52 <_printf_float+0x18a>
 8008b10:	3901      	subs	r1, #1
 8008b12:	465a      	mov	r2, fp
 8008b14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b18:	9109      	str	r1, [sp, #36]	; 0x24
 8008b1a:	f7ff ff17 	bl	800894c <__exponent>
 8008b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b20:	1813      	adds	r3, r2, r0
 8008b22:	2a01      	cmp	r2, #1
 8008b24:	4681      	mov	r9, r0
 8008b26:	6123      	str	r3, [r4, #16]
 8008b28:	dc02      	bgt.n	8008b30 <_printf_float+0x168>
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	07d2      	lsls	r2, r2, #31
 8008b2e:	d501      	bpl.n	8008b34 <_printf_float+0x16c>
 8008b30:	3301      	adds	r3, #1
 8008b32:	6123      	str	r3, [r4, #16]
 8008b34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d09c      	beq.n	8008a76 <_printf_float+0xae>
 8008b3c:	232d      	movs	r3, #45	; 0x2d
 8008b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b42:	e798      	b.n	8008a76 <_printf_float+0xae>
 8008b44:	9a06      	ldr	r2, [sp, #24]
 8008b46:	2a47      	cmp	r2, #71	; 0x47
 8008b48:	d1be      	bne.n	8008ac8 <_printf_float+0x100>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1bc      	bne.n	8008ac8 <_printf_float+0x100>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e7b9      	b.n	8008ac6 <_printf_float+0xfe>
 8008b52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b56:	d118      	bne.n	8008b8a <_printf_float+0x1c2>
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	6863      	ldr	r3, [r4, #4]
 8008b5c:	dd0b      	ble.n	8008b76 <_printf_float+0x1ae>
 8008b5e:	6121      	str	r1, [r4, #16]
 8008b60:	b913      	cbnz	r3, 8008b68 <_printf_float+0x1a0>
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	07d0      	lsls	r0, r2, #31
 8008b66:	d502      	bpl.n	8008b6e <_printf_float+0x1a6>
 8008b68:	3301      	adds	r3, #1
 8008b6a:	440b      	add	r3, r1
 8008b6c:	6123      	str	r3, [r4, #16]
 8008b6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b70:	f04f 0900 	mov.w	r9, #0
 8008b74:	e7de      	b.n	8008b34 <_printf_float+0x16c>
 8008b76:	b913      	cbnz	r3, 8008b7e <_printf_float+0x1b6>
 8008b78:	6822      	ldr	r2, [r4, #0]
 8008b7a:	07d2      	lsls	r2, r2, #31
 8008b7c:	d501      	bpl.n	8008b82 <_printf_float+0x1ba>
 8008b7e:	3302      	adds	r3, #2
 8008b80:	e7f4      	b.n	8008b6c <_printf_float+0x1a4>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e7f2      	b.n	8008b6c <_printf_float+0x1a4>
 8008b86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b8c:	4299      	cmp	r1, r3
 8008b8e:	db05      	blt.n	8008b9c <_printf_float+0x1d4>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	6121      	str	r1, [r4, #16]
 8008b94:	07d8      	lsls	r0, r3, #31
 8008b96:	d5ea      	bpl.n	8008b6e <_printf_float+0x1a6>
 8008b98:	1c4b      	adds	r3, r1, #1
 8008b9a:	e7e7      	b.n	8008b6c <_printf_float+0x1a4>
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	bfd4      	ite	le
 8008ba0:	f1c1 0202 	rsble	r2, r1, #2
 8008ba4:	2201      	movgt	r2, #1
 8008ba6:	4413      	add	r3, r2
 8008ba8:	e7e0      	b.n	8008b6c <_printf_float+0x1a4>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	055a      	lsls	r2, r3, #21
 8008bae:	d407      	bmi.n	8008bc0 <_printf_float+0x1f8>
 8008bb0:	6923      	ldr	r3, [r4, #16]
 8008bb2:	4642      	mov	r2, r8
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b8      	blx	r7
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d12c      	bne.n	8008c18 <_printf_float+0x250>
 8008bbe:	e764      	b.n	8008a8a <_printf_float+0xc2>
 8008bc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bc4:	f240 80e0 	bls.w	8008d88 <_printf_float+0x3c0>
 8008bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f7f7 ff92 	bl	8000af8 <__aeabi_dcmpeq>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d034      	beq.n	8008c42 <_printf_float+0x27a>
 8008bd8:	4a37      	ldr	r2, [pc, #220]	; (8008cb8 <_printf_float+0x2f0>)
 8008bda:	2301      	movs	r3, #1
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f af51 	beq.w	8008a8a <_printf_float+0xc2>
 8008be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bec:	429a      	cmp	r2, r3
 8008bee:	db02      	blt.n	8008bf6 <_printf_float+0x22e>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	07d8      	lsls	r0, r3, #31
 8008bf4:	d510      	bpl.n	8008c18 <_printf_float+0x250>
 8008bf6:	ee18 3a10 	vmov	r3, s16
 8008bfa:	4652      	mov	r2, sl
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	4628      	mov	r0, r5
 8008c00:	47b8      	blx	r7
 8008c02:	3001      	adds	r0, #1
 8008c04:	f43f af41 	beq.w	8008a8a <_printf_float+0xc2>
 8008c08:	f04f 0800 	mov.w	r8, #0
 8008c0c:	f104 091a 	add.w	r9, r4, #26
 8008c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c12:	3b01      	subs	r3, #1
 8008c14:	4543      	cmp	r3, r8
 8008c16:	dc09      	bgt.n	8008c2c <_printf_float+0x264>
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	079b      	lsls	r3, r3, #30
 8008c1c:	f100 8105 	bmi.w	8008e2a <_printf_float+0x462>
 8008c20:	68e0      	ldr	r0, [r4, #12]
 8008c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c24:	4298      	cmp	r0, r3
 8008c26:	bfb8      	it	lt
 8008c28:	4618      	movlt	r0, r3
 8008c2a:	e730      	b.n	8008a8e <_printf_float+0xc6>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	464a      	mov	r2, r9
 8008c30:	4631      	mov	r1, r6
 8008c32:	4628      	mov	r0, r5
 8008c34:	47b8      	blx	r7
 8008c36:	3001      	adds	r0, #1
 8008c38:	f43f af27 	beq.w	8008a8a <_printf_float+0xc2>
 8008c3c:	f108 0801 	add.w	r8, r8, #1
 8008c40:	e7e6      	b.n	8008c10 <_printf_float+0x248>
 8008c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dc39      	bgt.n	8008cbc <_printf_float+0x2f4>
 8008c48:	4a1b      	ldr	r2, [pc, #108]	; (8008cb8 <_printf_float+0x2f0>)
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	4628      	mov	r0, r5
 8008c50:	47b8      	blx	r7
 8008c52:	3001      	adds	r0, #1
 8008c54:	f43f af19 	beq.w	8008a8a <_printf_float+0xc2>
 8008c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	d102      	bne.n	8008c66 <_printf_float+0x29e>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	07d9      	lsls	r1, r3, #31
 8008c64:	d5d8      	bpl.n	8008c18 <_printf_float+0x250>
 8008c66:	ee18 3a10 	vmov	r3, s16
 8008c6a:	4652      	mov	r2, sl
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4628      	mov	r0, r5
 8008c70:	47b8      	blx	r7
 8008c72:	3001      	adds	r0, #1
 8008c74:	f43f af09 	beq.w	8008a8a <_printf_float+0xc2>
 8008c78:	f04f 0900 	mov.w	r9, #0
 8008c7c:	f104 0a1a 	add.w	sl, r4, #26
 8008c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c82:	425b      	negs	r3, r3
 8008c84:	454b      	cmp	r3, r9
 8008c86:	dc01      	bgt.n	8008c8c <_printf_float+0x2c4>
 8008c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8a:	e792      	b.n	8008bb2 <_printf_float+0x1ea>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	4652      	mov	r2, sl
 8008c90:	4631      	mov	r1, r6
 8008c92:	4628      	mov	r0, r5
 8008c94:	47b8      	blx	r7
 8008c96:	3001      	adds	r0, #1
 8008c98:	f43f aef7 	beq.w	8008a8a <_printf_float+0xc2>
 8008c9c:	f109 0901 	add.w	r9, r9, #1
 8008ca0:	e7ee      	b.n	8008c80 <_printf_float+0x2b8>
 8008ca2:	bf00      	nop
 8008ca4:	7fefffff 	.word	0x7fefffff
 8008ca8:	0800cca0 	.word	0x0800cca0
 8008cac:	0800cca4 	.word	0x0800cca4
 8008cb0:	0800ccac 	.word	0x0800ccac
 8008cb4:	0800cca8 	.word	0x0800cca8
 8008cb8:	0800cfd1 	.word	0x0800cfd1
 8008cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	bfa8      	it	ge
 8008cc4:	461a      	movge	r2, r3
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	4691      	mov	r9, r2
 8008cca:	dc37      	bgt.n	8008d3c <_printf_float+0x374>
 8008ccc:	f04f 0b00 	mov.w	fp, #0
 8008cd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cd4:	f104 021a 	add.w	r2, r4, #26
 8008cd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	eba3 0309 	sub.w	r3, r3, r9
 8008ce0:	455b      	cmp	r3, fp
 8008ce2:	dc33      	bgt.n	8008d4c <_printf_float+0x384>
 8008ce4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	db3b      	blt.n	8008d64 <_printf_float+0x39c>
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	07da      	lsls	r2, r3, #31
 8008cf0:	d438      	bmi.n	8008d64 <_printf_float+0x39c>
 8008cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf4:	9a05      	ldr	r2, [sp, #20]
 8008cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cf8:	1a9a      	subs	r2, r3, r2
 8008cfa:	eba3 0901 	sub.w	r9, r3, r1
 8008cfe:	4591      	cmp	r9, r2
 8008d00:	bfa8      	it	ge
 8008d02:	4691      	movge	r9, r2
 8008d04:	f1b9 0f00 	cmp.w	r9, #0
 8008d08:	dc35      	bgt.n	8008d76 <_printf_float+0x3ae>
 8008d0a:	f04f 0800 	mov.w	r8, #0
 8008d0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d12:	f104 0a1a 	add.w	sl, r4, #26
 8008d16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d1a:	1a9b      	subs	r3, r3, r2
 8008d1c:	eba3 0309 	sub.w	r3, r3, r9
 8008d20:	4543      	cmp	r3, r8
 8008d22:	f77f af79 	ble.w	8008c18 <_printf_float+0x250>
 8008d26:	2301      	movs	r3, #1
 8008d28:	4652      	mov	r2, sl
 8008d2a:	4631      	mov	r1, r6
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	47b8      	blx	r7
 8008d30:	3001      	adds	r0, #1
 8008d32:	f43f aeaa 	beq.w	8008a8a <_printf_float+0xc2>
 8008d36:	f108 0801 	add.w	r8, r8, #1
 8008d3a:	e7ec      	b.n	8008d16 <_printf_float+0x34e>
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4642      	mov	r2, r8
 8008d42:	4628      	mov	r0, r5
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	d1c0      	bne.n	8008ccc <_printf_float+0x304>
 8008d4a:	e69e      	b.n	8008a8a <_printf_float+0xc2>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4628      	mov	r0, r5
 8008d52:	9205      	str	r2, [sp, #20]
 8008d54:	47b8      	blx	r7
 8008d56:	3001      	adds	r0, #1
 8008d58:	f43f ae97 	beq.w	8008a8a <_printf_float+0xc2>
 8008d5c:	9a05      	ldr	r2, [sp, #20]
 8008d5e:	f10b 0b01 	add.w	fp, fp, #1
 8008d62:	e7b9      	b.n	8008cd8 <_printf_float+0x310>
 8008d64:	ee18 3a10 	vmov	r3, s16
 8008d68:	4652      	mov	r2, sl
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	47b8      	blx	r7
 8008d70:	3001      	adds	r0, #1
 8008d72:	d1be      	bne.n	8008cf2 <_printf_float+0x32a>
 8008d74:	e689      	b.n	8008a8a <_printf_float+0xc2>
 8008d76:	9a05      	ldr	r2, [sp, #20]
 8008d78:	464b      	mov	r3, r9
 8008d7a:	4442      	add	r2, r8
 8008d7c:	4631      	mov	r1, r6
 8008d7e:	4628      	mov	r0, r5
 8008d80:	47b8      	blx	r7
 8008d82:	3001      	adds	r0, #1
 8008d84:	d1c1      	bne.n	8008d0a <_printf_float+0x342>
 8008d86:	e680      	b.n	8008a8a <_printf_float+0xc2>
 8008d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d8a:	2a01      	cmp	r2, #1
 8008d8c:	dc01      	bgt.n	8008d92 <_printf_float+0x3ca>
 8008d8e:	07db      	lsls	r3, r3, #31
 8008d90:	d538      	bpl.n	8008e04 <_printf_float+0x43c>
 8008d92:	2301      	movs	r3, #1
 8008d94:	4642      	mov	r2, r8
 8008d96:	4631      	mov	r1, r6
 8008d98:	4628      	mov	r0, r5
 8008d9a:	47b8      	blx	r7
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	f43f ae74 	beq.w	8008a8a <_printf_float+0xc2>
 8008da2:	ee18 3a10 	vmov	r3, s16
 8008da6:	4652      	mov	r2, sl
 8008da8:	4631      	mov	r1, r6
 8008daa:	4628      	mov	r0, r5
 8008dac:	47b8      	blx	r7
 8008dae:	3001      	adds	r0, #1
 8008db0:	f43f ae6b 	beq.w	8008a8a <_printf_float+0xc2>
 8008db4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008db8:	2200      	movs	r2, #0
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f7f7 fe9c 	bl	8000af8 <__aeabi_dcmpeq>
 8008dc0:	b9d8      	cbnz	r0, 8008dfa <_printf_float+0x432>
 8008dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc4:	f108 0201 	add.w	r2, r8, #1
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d10e      	bne.n	8008df2 <_printf_float+0x42a>
 8008dd4:	e659      	b.n	8008a8a <_printf_float+0xc2>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4652      	mov	r2, sl
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4628      	mov	r0, r5
 8008dde:	47b8      	blx	r7
 8008de0:	3001      	adds	r0, #1
 8008de2:	f43f ae52 	beq.w	8008a8a <_printf_float+0xc2>
 8008de6:	f108 0801 	add.w	r8, r8, #1
 8008dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dec:	3b01      	subs	r3, #1
 8008dee:	4543      	cmp	r3, r8
 8008df0:	dcf1      	bgt.n	8008dd6 <_printf_float+0x40e>
 8008df2:	464b      	mov	r3, r9
 8008df4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008df8:	e6dc      	b.n	8008bb4 <_printf_float+0x1ec>
 8008dfa:	f04f 0800 	mov.w	r8, #0
 8008dfe:	f104 0a1a 	add.w	sl, r4, #26
 8008e02:	e7f2      	b.n	8008dea <_printf_float+0x422>
 8008e04:	2301      	movs	r3, #1
 8008e06:	4642      	mov	r2, r8
 8008e08:	e7df      	b.n	8008dca <_printf_float+0x402>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	464a      	mov	r2, r9
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4628      	mov	r0, r5
 8008e12:	47b8      	blx	r7
 8008e14:	3001      	adds	r0, #1
 8008e16:	f43f ae38 	beq.w	8008a8a <_printf_float+0xc2>
 8008e1a:	f108 0801 	add.w	r8, r8, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	4543      	cmp	r3, r8
 8008e26:	dcf0      	bgt.n	8008e0a <_printf_float+0x442>
 8008e28:	e6fa      	b.n	8008c20 <_printf_float+0x258>
 8008e2a:	f04f 0800 	mov.w	r8, #0
 8008e2e:	f104 0919 	add.w	r9, r4, #25
 8008e32:	e7f4      	b.n	8008e1e <_printf_float+0x456>

08008e34 <_printf_common>:
 8008e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	4616      	mov	r6, r2
 8008e3a:	4699      	mov	r9, r3
 8008e3c:	688a      	ldr	r2, [r1, #8]
 8008e3e:	690b      	ldr	r3, [r1, #16]
 8008e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e44:	4293      	cmp	r3, r2
 8008e46:	bfb8      	it	lt
 8008e48:	4613      	movlt	r3, r2
 8008e4a:	6033      	str	r3, [r6, #0]
 8008e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e50:	4607      	mov	r7, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	b10a      	cbz	r2, 8008e5a <_printf_common+0x26>
 8008e56:	3301      	adds	r3, #1
 8008e58:	6033      	str	r3, [r6, #0]
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	0699      	lsls	r1, r3, #26
 8008e5e:	bf42      	ittt	mi
 8008e60:	6833      	ldrmi	r3, [r6, #0]
 8008e62:	3302      	addmi	r3, #2
 8008e64:	6033      	strmi	r3, [r6, #0]
 8008e66:	6825      	ldr	r5, [r4, #0]
 8008e68:	f015 0506 	ands.w	r5, r5, #6
 8008e6c:	d106      	bne.n	8008e7c <_printf_common+0x48>
 8008e6e:	f104 0a19 	add.w	sl, r4, #25
 8008e72:	68e3      	ldr	r3, [r4, #12]
 8008e74:	6832      	ldr	r2, [r6, #0]
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	42ab      	cmp	r3, r5
 8008e7a:	dc26      	bgt.n	8008eca <_printf_common+0x96>
 8008e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e80:	1e13      	subs	r3, r2, #0
 8008e82:	6822      	ldr	r2, [r4, #0]
 8008e84:	bf18      	it	ne
 8008e86:	2301      	movne	r3, #1
 8008e88:	0692      	lsls	r2, r2, #26
 8008e8a:	d42b      	bmi.n	8008ee4 <_printf_common+0xb0>
 8008e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e90:	4649      	mov	r1, r9
 8008e92:	4638      	mov	r0, r7
 8008e94:	47c0      	blx	r8
 8008e96:	3001      	adds	r0, #1
 8008e98:	d01e      	beq.n	8008ed8 <_printf_common+0xa4>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	68e5      	ldr	r5, [r4, #12]
 8008e9e:	6832      	ldr	r2, [r6, #0]
 8008ea0:	f003 0306 	and.w	r3, r3, #6
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	bf08      	it	eq
 8008ea8:	1aad      	subeq	r5, r5, r2
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	6922      	ldr	r2, [r4, #16]
 8008eae:	bf0c      	ite	eq
 8008eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb4:	2500      	movne	r5, #0
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	bfc4      	itt	gt
 8008eba:	1a9b      	subgt	r3, r3, r2
 8008ebc:	18ed      	addgt	r5, r5, r3
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	341a      	adds	r4, #26
 8008ec2:	42b5      	cmp	r5, r6
 8008ec4:	d11a      	bne.n	8008efc <_printf_common+0xc8>
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e008      	b.n	8008edc <_printf_common+0xa8>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	4652      	mov	r2, sl
 8008ece:	4649      	mov	r1, r9
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	47c0      	blx	r8
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d103      	bne.n	8008ee0 <_printf_common+0xac>
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	e7c6      	b.n	8008e72 <_printf_common+0x3e>
 8008ee4:	18e1      	adds	r1, r4, r3
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	2030      	movs	r0, #48	; 0x30
 8008eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eee:	4422      	add	r2, r4
 8008ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ef8:	3302      	adds	r3, #2
 8008efa:	e7c7      	b.n	8008e8c <_printf_common+0x58>
 8008efc:	2301      	movs	r3, #1
 8008efe:	4622      	mov	r2, r4
 8008f00:	4649      	mov	r1, r9
 8008f02:	4638      	mov	r0, r7
 8008f04:	47c0      	blx	r8
 8008f06:	3001      	adds	r0, #1
 8008f08:	d0e6      	beq.n	8008ed8 <_printf_common+0xa4>
 8008f0a:	3601      	adds	r6, #1
 8008f0c:	e7d9      	b.n	8008ec2 <_printf_common+0x8e>
	...

08008f10 <_printf_i>:
 8008f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f14:	7e0f      	ldrb	r7, [r1, #24]
 8008f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f18:	2f78      	cmp	r7, #120	; 0x78
 8008f1a:	4691      	mov	r9, r2
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	469a      	mov	sl, r3
 8008f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f26:	d807      	bhi.n	8008f38 <_printf_i+0x28>
 8008f28:	2f62      	cmp	r7, #98	; 0x62
 8008f2a:	d80a      	bhi.n	8008f42 <_printf_i+0x32>
 8008f2c:	2f00      	cmp	r7, #0
 8008f2e:	f000 80d8 	beq.w	80090e2 <_printf_i+0x1d2>
 8008f32:	2f58      	cmp	r7, #88	; 0x58
 8008f34:	f000 80a3 	beq.w	800907e <_printf_i+0x16e>
 8008f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f40:	e03a      	b.n	8008fb8 <_printf_i+0xa8>
 8008f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f46:	2b15      	cmp	r3, #21
 8008f48:	d8f6      	bhi.n	8008f38 <_printf_i+0x28>
 8008f4a:	a101      	add	r1, pc, #4	; (adr r1, 8008f50 <_printf_i+0x40>)
 8008f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f50:	08008fa9 	.word	0x08008fa9
 8008f54:	08008fbd 	.word	0x08008fbd
 8008f58:	08008f39 	.word	0x08008f39
 8008f5c:	08008f39 	.word	0x08008f39
 8008f60:	08008f39 	.word	0x08008f39
 8008f64:	08008f39 	.word	0x08008f39
 8008f68:	08008fbd 	.word	0x08008fbd
 8008f6c:	08008f39 	.word	0x08008f39
 8008f70:	08008f39 	.word	0x08008f39
 8008f74:	08008f39 	.word	0x08008f39
 8008f78:	08008f39 	.word	0x08008f39
 8008f7c:	080090c9 	.word	0x080090c9
 8008f80:	08008fed 	.word	0x08008fed
 8008f84:	080090ab 	.word	0x080090ab
 8008f88:	08008f39 	.word	0x08008f39
 8008f8c:	08008f39 	.word	0x08008f39
 8008f90:	080090eb 	.word	0x080090eb
 8008f94:	08008f39 	.word	0x08008f39
 8008f98:	08008fed 	.word	0x08008fed
 8008f9c:	08008f39 	.word	0x08008f39
 8008fa0:	08008f39 	.word	0x08008f39
 8008fa4:	080090b3 	.word	0x080090b3
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	1d1a      	adds	r2, r3, #4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	602a      	str	r2, [r5, #0]
 8008fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e0a3      	b.n	8009104 <_printf_i+0x1f4>
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	6829      	ldr	r1, [r5, #0]
 8008fc0:	0606      	lsls	r6, r0, #24
 8008fc2:	f101 0304 	add.w	r3, r1, #4
 8008fc6:	d50a      	bpl.n	8008fde <_printf_i+0xce>
 8008fc8:	680e      	ldr	r6, [r1, #0]
 8008fca:	602b      	str	r3, [r5, #0]
 8008fcc:	2e00      	cmp	r6, #0
 8008fce:	da03      	bge.n	8008fd8 <_printf_i+0xc8>
 8008fd0:	232d      	movs	r3, #45	; 0x2d
 8008fd2:	4276      	negs	r6, r6
 8008fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd8:	485e      	ldr	r0, [pc, #376]	; (8009154 <_printf_i+0x244>)
 8008fda:	230a      	movs	r3, #10
 8008fdc:	e019      	b.n	8009012 <_printf_i+0x102>
 8008fde:	680e      	ldr	r6, [r1, #0]
 8008fe0:	602b      	str	r3, [r5, #0]
 8008fe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fe6:	bf18      	it	ne
 8008fe8:	b236      	sxthne	r6, r6
 8008fea:	e7ef      	b.n	8008fcc <_printf_i+0xbc>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	6820      	ldr	r0, [r4, #0]
 8008ff0:	1d19      	adds	r1, r3, #4
 8008ff2:	6029      	str	r1, [r5, #0]
 8008ff4:	0601      	lsls	r1, r0, #24
 8008ff6:	d501      	bpl.n	8008ffc <_printf_i+0xec>
 8008ff8:	681e      	ldr	r6, [r3, #0]
 8008ffa:	e002      	b.n	8009002 <_printf_i+0xf2>
 8008ffc:	0646      	lsls	r6, r0, #25
 8008ffe:	d5fb      	bpl.n	8008ff8 <_printf_i+0xe8>
 8009000:	881e      	ldrh	r6, [r3, #0]
 8009002:	4854      	ldr	r0, [pc, #336]	; (8009154 <_printf_i+0x244>)
 8009004:	2f6f      	cmp	r7, #111	; 0x6f
 8009006:	bf0c      	ite	eq
 8009008:	2308      	moveq	r3, #8
 800900a:	230a      	movne	r3, #10
 800900c:	2100      	movs	r1, #0
 800900e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009012:	6865      	ldr	r5, [r4, #4]
 8009014:	60a5      	str	r5, [r4, #8]
 8009016:	2d00      	cmp	r5, #0
 8009018:	bfa2      	ittt	ge
 800901a:	6821      	ldrge	r1, [r4, #0]
 800901c:	f021 0104 	bicge.w	r1, r1, #4
 8009020:	6021      	strge	r1, [r4, #0]
 8009022:	b90e      	cbnz	r6, 8009028 <_printf_i+0x118>
 8009024:	2d00      	cmp	r5, #0
 8009026:	d04d      	beq.n	80090c4 <_printf_i+0x1b4>
 8009028:	4615      	mov	r5, r2
 800902a:	fbb6 f1f3 	udiv	r1, r6, r3
 800902e:	fb03 6711 	mls	r7, r3, r1, r6
 8009032:	5dc7      	ldrb	r7, [r0, r7]
 8009034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009038:	4637      	mov	r7, r6
 800903a:	42bb      	cmp	r3, r7
 800903c:	460e      	mov	r6, r1
 800903e:	d9f4      	bls.n	800902a <_printf_i+0x11a>
 8009040:	2b08      	cmp	r3, #8
 8009042:	d10b      	bne.n	800905c <_printf_i+0x14c>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	07de      	lsls	r6, r3, #31
 8009048:	d508      	bpl.n	800905c <_printf_i+0x14c>
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	6861      	ldr	r1, [r4, #4]
 800904e:	4299      	cmp	r1, r3
 8009050:	bfde      	ittt	le
 8009052:	2330      	movle	r3, #48	; 0x30
 8009054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009058:	f105 35ff 	addle.w	r5, r5, #4294967295
 800905c:	1b52      	subs	r2, r2, r5
 800905e:	6122      	str	r2, [r4, #16]
 8009060:	f8cd a000 	str.w	sl, [sp]
 8009064:	464b      	mov	r3, r9
 8009066:	aa03      	add	r2, sp, #12
 8009068:	4621      	mov	r1, r4
 800906a:	4640      	mov	r0, r8
 800906c:	f7ff fee2 	bl	8008e34 <_printf_common>
 8009070:	3001      	adds	r0, #1
 8009072:	d14c      	bne.n	800910e <_printf_i+0x1fe>
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
 8009078:	b004      	add	sp, #16
 800907a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907e:	4835      	ldr	r0, [pc, #212]	; (8009154 <_printf_i+0x244>)
 8009080:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009084:	6829      	ldr	r1, [r5, #0]
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	f851 6b04 	ldr.w	r6, [r1], #4
 800908c:	6029      	str	r1, [r5, #0]
 800908e:	061d      	lsls	r5, r3, #24
 8009090:	d514      	bpl.n	80090bc <_printf_i+0x1ac>
 8009092:	07df      	lsls	r7, r3, #31
 8009094:	bf44      	itt	mi
 8009096:	f043 0320 	orrmi.w	r3, r3, #32
 800909a:	6023      	strmi	r3, [r4, #0]
 800909c:	b91e      	cbnz	r6, 80090a6 <_printf_i+0x196>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	f023 0320 	bic.w	r3, r3, #32
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	2310      	movs	r3, #16
 80090a8:	e7b0      	b.n	800900c <_printf_i+0xfc>
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	f043 0320 	orr.w	r3, r3, #32
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	2378      	movs	r3, #120	; 0x78
 80090b4:	4828      	ldr	r0, [pc, #160]	; (8009158 <_printf_i+0x248>)
 80090b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090ba:	e7e3      	b.n	8009084 <_printf_i+0x174>
 80090bc:	0659      	lsls	r1, r3, #25
 80090be:	bf48      	it	mi
 80090c0:	b2b6      	uxthmi	r6, r6
 80090c2:	e7e6      	b.n	8009092 <_printf_i+0x182>
 80090c4:	4615      	mov	r5, r2
 80090c6:	e7bb      	b.n	8009040 <_printf_i+0x130>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	6826      	ldr	r6, [r4, #0]
 80090cc:	6961      	ldr	r1, [r4, #20]
 80090ce:	1d18      	adds	r0, r3, #4
 80090d0:	6028      	str	r0, [r5, #0]
 80090d2:	0635      	lsls	r5, r6, #24
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	d501      	bpl.n	80090dc <_printf_i+0x1cc>
 80090d8:	6019      	str	r1, [r3, #0]
 80090da:	e002      	b.n	80090e2 <_printf_i+0x1d2>
 80090dc:	0670      	lsls	r0, r6, #25
 80090de:	d5fb      	bpl.n	80090d8 <_printf_i+0x1c8>
 80090e0:	8019      	strh	r1, [r3, #0]
 80090e2:	2300      	movs	r3, #0
 80090e4:	6123      	str	r3, [r4, #16]
 80090e6:	4615      	mov	r5, r2
 80090e8:	e7ba      	b.n	8009060 <_printf_i+0x150>
 80090ea:	682b      	ldr	r3, [r5, #0]
 80090ec:	1d1a      	adds	r2, r3, #4
 80090ee:	602a      	str	r2, [r5, #0]
 80090f0:	681d      	ldr	r5, [r3, #0]
 80090f2:	6862      	ldr	r2, [r4, #4]
 80090f4:	2100      	movs	r1, #0
 80090f6:	4628      	mov	r0, r5
 80090f8:	f7f7 f88a 	bl	8000210 <memchr>
 80090fc:	b108      	cbz	r0, 8009102 <_printf_i+0x1f2>
 80090fe:	1b40      	subs	r0, r0, r5
 8009100:	6060      	str	r0, [r4, #4]
 8009102:	6863      	ldr	r3, [r4, #4]
 8009104:	6123      	str	r3, [r4, #16]
 8009106:	2300      	movs	r3, #0
 8009108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800910c:	e7a8      	b.n	8009060 <_printf_i+0x150>
 800910e:	6923      	ldr	r3, [r4, #16]
 8009110:	462a      	mov	r2, r5
 8009112:	4649      	mov	r1, r9
 8009114:	4640      	mov	r0, r8
 8009116:	47d0      	blx	sl
 8009118:	3001      	adds	r0, #1
 800911a:	d0ab      	beq.n	8009074 <_printf_i+0x164>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	079b      	lsls	r3, r3, #30
 8009120:	d413      	bmi.n	800914a <_printf_i+0x23a>
 8009122:	68e0      	ldr	r0, [r4, #12]
 8009124:	9b03      	ldr	r3, [sp, #12]
 8009126:	4298      	cmp	r0, r3
 8009128:	bfb8      	it	lt
 800912a:	4618      	movlt	r0, r3
 800912c:	e7a4      	b.n	8009078 <_printf_i+0x168>
 800912e:	2301      	movs	r3, #1
 8009130:	4632      	mov	r2, r6
 8009132:	4649      	mov	r1, r9
 8009134:	4640      	mov	r0, r8
 8009136:	47d0      	blx	sl
 8009138:	3001      	adds	r0, #1
 800913a:	d09b      	beq.n	8009074 <_printf_i+0x164>
 800913c:	3501      	adds	r5, #1
 800913e:	68e3      	ldr	r3, [r4, #12]
 8009140:	9903      	ldr	r1, [sp, #12]
 8009142:	1a5b      	subs	r3, r3, r1
 8009144:	42ab      	cmp	r3, r5
 8009146:	dcf2      	bgt.n	800912e <_printf_i+0x21e>
 8009148:	e7eb      	b.n	8009122 <_printf_i+0x212>
 800914a:	2500      	movs	r5, #0
 800914c:	f104 0619 	add.w	r6, r4, #25
 8009150:	e7f5      	b.n	800913e <_printf_i+0x22e>
 8009152:	bf00      	nop
 8009154:	0800ccb0 	.word	0x0800ccb0
 8009158:	0800ccc1 	.word	0x0800ccc1

0800915c <_sbrk_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d06      	ldr	r5, [pc, #24]	; (8009178 <_sbrk_r+0x1c>)
 8009160:	2300      	movs	r3, #0
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	602b      	str	r3, [r5, #0]
 8009168:	f7f9 fc6a 	bl	8002a40 <_sbrk>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_sbrk_r+0x1a>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_sbrk_r+0x1a>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	20000540 	.word	0x20000540

0800917c <siprintf>:
 800917c:	b40e      	push	{r1, r2, r3}
 800917e:	b500      	push	{lr}
 8009180:	b09c      	sub	sp, #112	; 0x70
 8009182:	ab1d      	add	r3, sp, #116	; 0x74
 8009184:	9002      	str	r0, [sp, #8]
 8009186:	9006      	str	r0, [sp, #24]
 8009188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800918c:	4809      	ldr	r0, [pc, #36]	; (80091b4 <siprintf+0x38>)
 800918e:	9107      	str	r1, [sp, #28]
 8009190:	9104      	str	r1, [sp, #16]
 8009192:	4909      	ldr	r1, [pc, #36]	; (80091b8 <siprintf+0x3c>)
 8009194:	f853 2b04 	ldr.w	r2, [r3], #4
 8009198:	9105      	str	r1, [sp, #20]
 800919a:	6800      	ldr	r0, [r0, #0]
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	a902      	add	r1, sp, #8
 80091a0:	f001 fbf6 	bl	800a990 <_svfiprintf_r>
 80091a4:	9b02      	ldr	r3, [sp, #8]
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	b01c      	add	sp, #112	; 0x70
 80091ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80091b0:	b003      	add	sp, #12
 80091b2:	4770      	bx	lr
 80091b4:	200000a4 	.word	0x200000a4
 80091b8:	ffff0208 	.word	0xffff0208

080091bc <siscanf>:
 80091bc:	b40e      	push	{r1, r2, r3}
 80091be:	b510      	push	{r4, lr}
 80091c0:	b09f      	sub	sp, #124	; 0x7c
 80091c2:	ac21      	add	r4, sp, #132	; 0x84
 80091c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80091c8:	f854 2b04 	ldr.w	r2, [r4], #4
 80091cc:	9201      	str	r2, [sp, #4]
 80091ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80091d2:	9004      	str	r0, [sp, #16]
 80091d4:	9008      	str	r0, [sp, #32]
 80091d6:	f7f7 f80d 	bl	80001f4 <strlen>
 80091da:	4b0c      	ldr	r3, [pc, #48]	; (800920c <siscanf+0x50>)
 80091dc:	9005      	str	r0, [sp, #20]
 80091de:	9009      	str	r0, [sp, #36]	; 0x24
 80091e0:	930d      	str	r3, [sp, #52]	; 0x34
 80091e2:	480b      	ldr	r0, [pc, #44]	; (8009210 <siscanf+0x54>)
 80091e4:	9a01      	ldr	r2, [sp, #4]
 80091e6:	6800      	ldr	r0, [r0, #0]
 80091e8:	9403      	str	r4, [sp, #12]
 80091ea:	2300      	movs	r3, #0
 80091ec:	9311      	str	r3, [sp, #68]	; 0x44
 80091ee:	9316      	str	r3, [sp, #88]	; 0x58
 80091f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80091f8:	a904      	add	r1, sp, #16
 80091fa:	4623      	mov	r3, r4
 80091fc:	f001 fd22 	bl	800ac44 <__ssvfiscanf_r>
 8009200:	b01f      	add	sp, #124	; 0x7c
 8009202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009206:	b003      	add	sp, #12
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	08009237 	.word	0x08009237
 8009210:	200000a4 	.word	0x200000a4

08009214 <__sread>:
 8009214:	b510      	push	{r4, lr}
 8009216:	460c      	mov	r4, r1
 8009218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800921c:	f001 ffdc 	bl	800b1d8 <_read_r>
 8009220:	2800      	cmp	r0, #0
 8009222:	bfab      	itete	ge
 8009224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009226:	89a3      	ldrhlt	r3, [r4, #12]
 8009228:	181b      	addge	r3, r3, r0
 800922a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800922e:	bfac      	ite	ge
 8009230:	6563      	strge	r3, [r4, #84]	; 0x54
 8009232:	81a3      	strhlt	r3, [r4, #12]
 8009234:	bd10      	pop	{r4, pc}

08009236 <__seofread>:
 8009236:	2000      	movs	r0, #0
 8009238:	4770      	bx	lr

0800923a <__swrite>:
 800923a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800923e:	461f      	mov	r7, r3
 8009240:	898b      	ldrh	r3, [r1, #12]
 8009242:	05db      	lsls	r3, r3, #23
 8009244:	4605      	mov	r5, r0
 8009246:	460c      	mov	r4, r1
 8009248:	4616      	mov	r6, r2
 800924a:	d505      	bpl.n	8009258 <__swrite+0x1e>
 800924c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009250:	2302      	movs	r3, #2
 8009252:	2200      	movs	r2, #0
 8009254:	f000 ff7a 	bl	800a14c <_lseek_r>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800925e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009262:	81a3      	strh	r3, [r4, #12]
 8009264:	4632      	mov	r2, r6
 8009266:	463b      	mov	r3, r7
 8009268:	4628      	mov	r0, r5
 800926a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800926e:	f000 b8cd 	b.w	800940c <_write_r>

08009272 <__sseek>:
 8009272:	b510      	push	{r4, lr}
 8009274:	460c      	mov	r4, r1
 8009276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927a:	f000 ff67 	bl	800a14c <_lseek_r>
 800927e:	1c43      	adds	r3, r0, #1
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	bf15      	itete	ne
 8009284:	6560      	strne	r0, [r4, #84]	; 0x54
 8009286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800928a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800928e:	81a3      	strheq	r3, [r4, #12]
 8009290:	bf18      	it	ne
 8009292:	81a3      	strhne	r3, [r4, #12]
 8009294:	bd10      	pop	{r4, pc}

08009296 <__sclose>:
 8009296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800929a:	f000 b8c9 	b.w	8009430 <_close_r>

0800929e <strchr>:
 800929e:	b2c9      	uxtb	r1, r1
 80092a0:	4603      	mov	r3, r0
 80092a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092a6:	b11a      	cbz	r2, 80092b0 <strchr+0x12>
 80092a8:	428a      	cmp	r2, r1
 80092aa:	d1f9      	bne.n	80092a0 <strchr+0x2>
 80092ac:	4618      	mov	r0, r3
 80092ae:	4770      	bx	lr
 80092b0:	2900      	cmp	r1, #0
 80092b2:	bf18      	it	ne
 80092b4:	2300      	movne	r3, #0
 80092b6:	e7f9      	b.n	80092ac <strchr+0xe>

080092b8 <strcpy>:
 80092b8:	4603      	mov	r3, r0
 80092ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092be:	f803 2b01 	strb.w	r2, [r3], #1
 80092c2:	2a00      	cmp	r2, #0
 80092c4:	d1f9      	bne.n	80092ba <strcpy+0x2>
 80092c6:	4770      	bx	lr

080092c8 <strncmp>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	b17a      	cbz	r2, 80092ec <strncmp+0x24>
 80092cc:	4603      	mov	r3, r0
 80092ce:	3901      	subs	r1, #1
 80092d0:	1884      	adds	r4, r0, r2
 80092d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80092da:	4290      	cmp	r0, r2
 80092dc:	d101      	bne.n	80092e2 <strncmp+0x1a>
 80092de:	42a3      	cmp	r3, r4
 80092e0:	d101      	bne.n	80092e6 <strncmp+0x1e>
 80092e2:	1a80      	subs	r0, r0, r2
 80092e4:	bd10      	pop	{r4, pc}
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d1f3      	bne.n	80092d2 <strncmp+0xa>
 80092ea:	e7fa      	b.n	80092e2 <strncmp+0x1a>
 80092ec:	4610      	mov	r0, r2
 80092ee:	e7f9      	b.n	80092e4 <strncmp+0x1c>

080092f0 <_strtol_l.constprop.0>:
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f6:	d001      	beq.n	80092fc <_strtol_l.constprop.0+0xc>
 80092f8:	2b24      	cmp	r3, #36	; 0x24
 80092fa:	d906      	bls.n	800930a <_strtol_l.constprop.0+0x1a>
 80092fc:	f7ff f9a2 	bl	8008644 <__errno>
 8009300:	2316      	movs	r3, #22
 8009302:	6003      	str	r3, [r0, #0]
 8009304:	2000      	movs	r0, #0
 8009306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800930a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80093f0 <_strtol_l.constprop.0+0x100>
 800930e:	460d      	mov	r5, r1
 8009310:	462e      	mov	r6, r5
 8009312:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009316:	f814 700c 	ldrb.w	r7, [r4, ip]
 800931a:	f017 0708 	ands.w	r7, r7, #8
 800931e:	d1f7      	bne.n	8009310 <_strtol_l.constprop.0+0x20>
 8009320:	2c2d      	cmp	r4, #45	; 0x2d
 8009322:	d132      	bne.n	800938a <_strtol_l.constprop.0+0x9a>
 8009324:	782c      	ldrb	r4, [r5, #0]
 8009326:	2701      	movs	r7, #1
 8009328:	1cb5      	adds	r5, r6, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d05b      	beq.n	80093e6 <_strtol_l.constprop.0+0xf6>
 800932e:	2b10      	cmp	r3, #16
 8009330:	d109      	bne.n	8009346 <_strtol_l.constprop.0+0x56>
 8009332:	2c30      	cmp	r4, #48	; 0x30
 8009334:	d107      	bne.n	8009346 <_strtol_l.constprop.0+0x56>
 8009336:	782c      	ldrb	r4, [r5, #0]
 8009338:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800933c:	2c58      	cmp	r4, #88	; 0x58
 800933e:	d14d      	bne.n	80093dc <_strtol_l.constprop.0+0xec>
 8009340:	786c      	ldrb	r4, [r5, #1]
 8009342:	2310      	movs	r3, #16
 8009344:	3502      	adds	r5, #2
 8009346:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800934a:	f108 38ff 	add.w	r8, r8, #4294967295
 800934e:	f04f 0c00 	mov.w	ip, #0
 8009352:	fbb8 f9f3 	udiv	r9, r8, r3
 8009356:	4666      	mov	r6, ip
 8009358:	fb03 8a19 	mls	sl, r3, r9, r8
 800935c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009360:	f1be 0f09 	cmp.w	lr, #9
 8009364:	d816      	bhi.n	8009394 <_strtol_l.constprop.0+0xa4>
 8009366:	4674      	mov	r4, lr
 8009368:	42a3      	cmp	r3, r4
 800936a:	dd24      	ble.n	80093b6 <_strtol_l.constprop.0+0xc6>
 800936c:	f1bc 0f00 	cmp.w	ip, #0
 8009370:	db1e      	blt.n	80093b0 <_strtol_l.constprop.0+0xc0>
 8009372:	45b1      	cmp	r9, r6
 8009374:	d31c      	bcc.n	80093b0 <_strtol_l.constprop.0+0xc0>
 8009376:	d101      	bne.n	800937c <_strtol_l.constprop.0+0x8c>
 8009378:	45a2      	cmp	sl, r4
 800937a:	db19      	blt.n	80093b0 <_strtol_l.constprop.0+0xc0>
 800937c:	fb06 4603 	mla	r6, r6, r3, r4
 8009380:	f04f 0c01 	mov.w	ip, #1
 8009384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009388:	e7e8      	b.n	800935c <_strtol_l.constprop.0+0x6c>
 800938a:	2c2b      	cmp	r4, #43	; 0x2b
 800938c:	bf04      	itt	eq
 800938e:	782c      	ldrbeq	r4, [r5, #0]
 8009390:	1cb5      	addeq	r5, r6, #2
 8009392:	e7ca      	b.n	800932a <_strtol_l.constprop.0+0x3a>
 8009394:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009398:	f1be 0f19 	cmp.w	lr, #25
 800939c:	d801      	bhi.n	80093a2 <_strtol_l.constprop.0+0xb2>
 800939e:	3c37      	subs	r4, #55	; 0x37
 80093a0:	e7e2      	b.n	8009368 <_strtol_l.constprop.0+0x78>
 80093a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80093a6:	f1be 0f19 	cmp.w	lr, #25
 80093aa:	d804      	bhi.n	80093b6 <_strtol_l.constprop.0+0xc6>
 80093ac:	3c57      	subs	r4, #87	; 0x57
 80093ae:	e7db      	b.n	8009368 <_strtol_l.constprop.0+0x78>
 80093b0:	f04f 3cff 	mov.w	ip, #4294967295
 80093b4:	e7e6      	b.n	8009384 <_strtol_l.constprop.0+0x94>
 80093b6:	f1bc 0f00 	cmp.w	ip, #0
 80093ba:	da05      	bge.n	80093c8 <_strtol_l.constprop.0+0xd8>
 80093bc:	2322      	movs	r3, #34	; 0x22
 80093be:	6003      	str	r3, [r0, #0]
 80093c0:	4646      	mov	r6, r8
 80093c2:	b942      	cbnz	r2, 80093d6 <_strtol_l.constprop.0+0xe6>
 80093c4:	4630      	mov	r0, r6
 80093c6:	e79e      	b.n	8009306 <_strtol_l.constprop.0+0x16>
 80093c8:	b107      	cbz	r7, 80093cc <_strtol_l.constprop.0+0xdc>
 80093ca:	4276      	negs	r6, r6
 80093cc:	2a00      	cmp	r2, #0
 80093ce:	d0f9      	beq.n	80093c4 <_strtol_l.constprop.0+0xd4>
 80093d0:	f1bc 0f00 	cmp.w	ip, #0
 80093d4:	d000      	beq.n	80093d8 <_strtol_l.constprop.0+0xe8>
 80093d6:	1e69      	subs	r1, r5, #1
 80093d8:	6011      	str	r1, [r2, #0]
 80093da:	e7f3      	b.n	80093c4 <_strtol_l.constprop.0+0xd4>
 80093dc:	2430      	movs	r4, #48	; 0x30
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1b1      	bne.n	8009346 <_strtol_l.constprop.0+0x56>
 80093e2:	2308      	movs	r3, #8
 80093e4:	e7af      	b.n	8009346 <_strtol_l.constprop.0+0x56>
 80093e6:	2c30      	cmp	r4, #48	; 0x30
 80093e8:	d0a5      	beq.n	8009336 <_strtol_l.constprop.0+0x46>
 80093ea:	230a      	movs	r3, #10
 80093ec:	e7ab      	b.n	8009346 <_strtol_l.constprop.0+0x56>
 80093ee:	bf00      	nop
 80093f0:	0800ccd3 	.word	0x0800ccd3

080093f4 <_strtol_r>:
 80093f4:	f7ff bf7c 	b.w	80092f0 <_strtol_l.constprop.0>

080093f8 <strtol>:
 80093f8:	4613      	mov	r3, r2
 80093fa:	460a      	mov	r2, r1
 80093fc:	4601      	mov	r1, r0
 80093fe:	4802      	ldr	r0, [pc, #8]	; (8009408 <strtol+0x10>)
 8009400:	6800      	ldr	r0, [r0, #0]
 8009402:	f7ff bf75 	b.w	80092f0 <_strtol_l.constprop.0>
 8009406:	bf00      	nop
 8009408:	200000a4 	.word	0x200000a4

0800940c <_write_r>:
 800940c:	b538      	push	{r3, r4, r5, lr}
 800940e:	4d07      	ldr	r5, [pc, #28]	; (800942c <_write_r+0x20>)
 8009410:	4604      	mov	r4, r0
 8009412:	4608      	mov	r0, r1
 8009414:	4611      	mov	r1, r2
 8009416:	2200      	movs	r2, #0
 8009418:	602a      	str	r2, [r5, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	f7f9 fabf 	bl	800299e <_write>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_write_r+0x1e>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_write_r+0x1e>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000540 	.word	0x20000540

08009430 <_close_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d06      	ldr	r5, [pc, #24]	; (800944c <_close_r+0x1c>)
 8009434:	2300      	movs	r3, #0
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	602b      	str	r3, [r5, #0]
 800943c:	f7f9 facb 	bl	80029d6 <_close>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_close_r+0x1a>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_close_r+0x1a>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20000540 	.word	0x20000540

08009450 <quorem>:
 8009450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	6903      	ldr	r3, [r0, #16]
 8009456:	690c      	ldr	r4, [r1, #16]
 8009458:	42a3      	cmp	r3, r4
 800945a:	4607      	mov	r7, r0
 800945c:	f2c0 8081 	blt.w	8009562 <quorem+0x112>
 8009460:	3c01      	subs	r4, #1
 8009462:	f101 0814 	add.w	r8, r1, #20
 8009466:	f100 0514 	add.w	r5, r0, #20
 800946a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009478:	3301      	adds	r3, #1
 800947a:	429a      	cmp	r2, r3
 800947c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009480:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009484:	fbb2 f6f3 	udiv	r6, r2, r3
 8009488:	d331      	bcc.n	80094ee <quorem+0x9e>
 800948a:	f04f 0e00 	mov.w	lr, #0
 800948e:	4640      	mov	r0, r8
 8009490:	46ac      	mov	ip, r5
 8009492:	46f2      	mov	sl, lr
 8009494:	f850 2b04 	ldr.w	r2, [r0], #4
 8009498:	b293      	uxth	r3, r2
 800949a:	fb06 e303 	mla	r3, r6, r3, lr
 800949e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	ebaa 0303 	sub.w	r3, sl, r3
 80094a8:	f8dc a000 	ldr.w	sl, [ip]
 80094ac:	0c12      	lsrs	r2, r2, #16
 80094ae:	fa13 f38a 	uxtah	r3, r3, sl
 80094b2:	fb06 e202 	mla	r2, r6, r2, lr
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	9b00      	ldr	r3, [sp, #0]
 80094ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094be:	b292      	uxth	r2, r2
 80094c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80094c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80094cc:	4581      	cmp	r9, r0
 80094ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094d2:	f84c 3b04 	str.w	r3, [ip], #4
 80094d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094da:	d2db      	bcs.n	8009494 <quorem+0x44>
 80094dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80094e0:	b92b      	cbnz	r3, 80094ee <quorem+0x9e>
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	3b04      	subs	r3, #4
 80094e6:	429d      	cmp	r5, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	d32e      	bcc.n	800954a <quorem+0xfa>
 80094ec:	613c      	str	r4, [r7, #16]
 80094ee:	4638      	mov	r0, r7
 80094f0:	f001 f8da 	bl	800a6a8 <__mcmp>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	db24      	blt.n	8009542 <quorem+0xf2>
 80094f8:	3601      	adds	r6, #1
 80094fa:	4628      	mov	r0, r5
 80094fc:	f04f 0c00 	mov.w	ip, #0
 8009500:	f858 2b04 	ldr.w	r2, [r8], #4
 8009504:	f8d0 e000 	ldr.w	lr, [r0]
 8009508:	b293      	uxth	r3, r2
 800950a:	ebac 0303 	sub.w	r3, ip, r3
 800950e:	0c12      	lsrs	r2, r2, #16
 8009510:	fa13 f38e 	uxtah	r3, r3, lr
 8009514:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009518:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800951c:	b29b      	uxth	r3, r3
 800951e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009522:	45c1      	cmp	r9, r8
 8009524:	f840 3b04 	str.w	r3, [r0], #4
 8009528:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800952c:	d2e8      	bcs.n	8009500 <quorem+0xb0>
 800952e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009536:	b922      	cbnz	r2, 8009542 <quorem+0xf2>
 8009538:	3b04      	subs	r3, #4
 800953a:	429d      	cmp	r5, r3
 800953c:	461a      	mov	r2, r3
 800953e:	d30a      	bcc.n	8009556 <quorem+0x106>
 8009540:	613c      	str	r4, [r7, #16]
 8009542:	4630      	mov	r0, r6
 8009544:	b003      	add	sp, #12
 8009546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954a:	6812      	ldr	r2, [r2, #0]
 800954c:	3b04      	subs	r3, #4
 800954e:	2a00      	cmp	r2, #0
 8009550:	d1cc      	bne.n	80094ec <quorem+0x9c>
 8009552:	3c01      	subs	r4, #1
 8009554:	e7c7      	b.n	80094e6 <quorem+0x96>
 8009556:	6812      	ldr	r2, [r2, #0]
 8009558:	3b04      	subs	r3, #4
 800955a:	2a00      	cmp	r2, #0
 800955c:	d1f0      	bne.n	8009540 <quorem+0xf0>
 800955e:	3c01      	subs	r4, #1
 8009560:	e7eb      	b.n	800953a <quorem+0xea>
 8009562:	2000      	movs	r0, #0
 8009564:	e7ee      	b.n	8009544 <quorem+0xf4>
	...

08009568 <_dtoa_r>:
 8009568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	ed2d 8b04 	vpush	{d8-d9}
 8009570:	ec57 6b10 	vmov	r6, r7, d0
 8009574:	b093      	sub	sp, #76	; 0x4c
 8009576:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009578:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800957c:	9106      	str	r1, [sp, #24]
 800957e:	ee10 aa10 	vmov	sl, s0
 8009582:	4604      	mov	r4, r0
 8009584:	9209      	str	r2, [sp, #36]	; 0x24
 8009586:	930c      	str	r3, [sp, #48]	; 0x30
 8009588:	46bb      	mov	fp, r7
 800958a:	b975      	cbnz	r5, 80095aa <_dtoa_r+0x42>
 800958c:	2010      	movs	r0, #16
 800958e:	f7ff f883 	bl	8008698 <malloc>
 8009592:	4602      	mov	r2, r0
 8009594:	6260      	str	r0, [r4, #36]	; 0x24
 8009596:	b920      	cbnz	r0, 80095a2 <_dtoa_r+0x3a>
 8009598:	4ba7      	ldr	r3, [pc, #668]	; (8009838 <_dtoa_r+0x2d0>)
 800959a:	21ea      	movs	r1, #234	; 0xea
 800959c:	48a7      	ldr	r0, [pc, #668]	; (800983c <_dtoa_r+0x2d4>)
 800959e:	f001 ff13 	bl	800b3c8 <__assert_func>
 80095a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095a6:	6005      	str	r5, [r0, #0]
 80095a8:	60c5      	str	r5, [r0, #12]
 80095aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095ac:	6819      	ldr	r1, [r3, #0]
 80095ae:	b151      	cbz	r1, 80095c6 <_dtoa_r+0x5e>
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	604a      	str	r2, [r1, #4]
 80095b4:	2301      	movs	r3, #1
 80095b6:	4093      	lsls	r3, r2
 80095b8:	608b      	str	r3, [r1, #8]
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 fe32 	bl	800a224 <_Bfree>
 80095c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	1e3b      	subs	r3, r7, #0
 80095c8:	bfaa      	itet	ge
 80095ca:	2300      	movge	r3, #0
 80095cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80095d0:	f8c8 3000 	strge.w	r3, [r8]
 80095d4:	4b9a      	ldr	r3, [pc, #616]	; (8009840 <_dtoa_r+0x2d8>)
 80095d6:	bfbc      	itt	lt
 80095d8:	2201      	movlt	r2, #1
 80095da:	f8c8 2000 	strlt.w	r2, [r8]
 80095de:	ea33 030b 	bics.w	r3, r3, fp
 80095e2:	d11b      	bne.n	800961c <_dtoa_r+0xb4>
 80095e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095f0:	4333      	orrs	r3, r6
 80095f2:	f000 8592 	beq.w	800a11a <_dtoa_r+0xbb2>
 80095f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f8:	b963      	cbnz	r3, 8009614 <_dtoa_r+0xac>
 80095fa:	4b92      	ldr	r3, [pc, #584]	; (8009844 <_dtoa_r+0x2dc>)
 80095fc:	e022      	b.n	8009644 <_dtoa_r+0xdc>
 80095fe:	4b92      	ldr	r3, [pc, #584]	; (8009848 <_dtoa_r+0x2e0>)
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	3308      	adds	r3, #8
 8009604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	9801      	ldr	r0, [sp, #4]
 800960a:	b013      	add	sp, #76	; 0x4c
 800960c:	ecbd 8b04 	vpop	{d8-d9}
 8009610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009614:	4b8b      	ldr	r3, [pc, #556]	; (8009844 <_dtoa_r+0x2dc>)
 8009616:	9301      	str	r3, [sp, #4]
 8009618:	3303      	adds	r3, #3
 800961a:	e7f3      	b.n	8009604 <_dtoa_r+0x9c>
 800961c:	2200      	movs	r2, #0
 800961e:	2300      	movs	r3, #0
 8009620:	4650      	mov	r0, sl
 8009622:	4659      	mov	r1, fp
 8009624:	f7f7 fa68 	bl	8000af8 <__aeabi_dcmpeq>
 8009628:	ec4b ab19 	vmov	d9, sl, fp
 800962c:	4680      	mov	r8, r0
 800962e:	b158      	cbz	r0, 8009648 <_dtoa_r+0xe0>
 8009630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009632:	2301      	movs	r3, #1
 8009634:	6013      	str	r3, [r2, #0]
 8009636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 856b 	beq.w	800a114 <_dtoa_r+0xbac>
 800963e:	4883      	ldr	r0, [pc, #524]	; (800984c <_dtoa_r+0x2e4>)
 8009640:	6018      	str	r0, [r3, #0]
 8009642:	1e43      	subs	r3, r0, #1
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	e7df      	b.n	8009608 <_dtoa_r+0xa0>
 8009648:	ec4b ab10 	vmov	d0, sl, fp
 800964c:	aa10      	add	r2, sp, #64	; 0x40
 800964e:	a911      	add	r1, sp, #68	; 0x44
 8009650:	4620      	mov	r0, r4
 8009652:	f001 f8cf 	bl	800a7f4 <__d2b>
 8009656:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800965a:	ee08 0a10 	vmov	s16, r0
 800965e:	2d00      	cmp	r5, #0
 8009660:	f000 8084 	beq.w	800976c <_dtoa_r+0x204>
 8009664:	ee19 3a90 	vmov	r3, s19
 8009668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800966c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009670:	4656      	mov	r6, sl
 8009672:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009676:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800967a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800967e:	4b74      	ldr	r3, [pc, #464]	; (8009850 <_dtoa_r+0x2e8>)
 8009680:	2200      	movs	r2, #0
 8009682:	4630      	mov	r0, r6
 8009684:	4639      	mov	r1, r7
 8009686:	f7f6 fe17 	bl	80002b8 <__aeabi_dsub>
 800968a:	a365      	add	r3, pc, #404	; (adr r3, 8009820 <_dtoa_r+0x2b8>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f7f6 ffca 	bl	8000628 <__aeabi_dmul>
 8009694:	a364      	add	r3, pc, #400	; (adr r3, 8009828 <_dtoa_r+0x2c0>)
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	f7f6 fe0f 	bl	80002bc <__adddf3>
 800969e:	4606      	mov	r6, r0
 80096a0:	4628      	mov	r0, r5
 80096a2:	460f      	mov	r7, r1
 80096a4:	f7f6 ff56 	bl	8000554 <__aeabi_i2d>
 80096a8:	a361      	add	r3, pc, #388	; (adr r3, 8009830 <_dtoa_r+0x2c8>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 ffbb 	bl	8000628 <__aeabi_dmul>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4630      	mov	r0, r6
 80096b8:	4639      	mov	r1, r7
 80096ba:	f7f6 fdff 	bl	80002bc <__adddf3>
 80096be:	4606      	mov	r6, r0
 80096c0:	460f      	mov	r7, r1
 80096c2:	f7f7 fa61 	bl	8000b88 <__aeabi_d2iz>
 80096c6:	2200      	movs	r2, #0
 80096c8:	9000      	str	r0, [sp, #0]
 80096ca:	2300      	movs	r3, #0
 80096cc:	4630      	mov	r0, r6
 80096ce:	4639      	mov	r1, r7
 80096d0:	f7f7 fa1c 	bl	8000b0c <__aeabi_dcmplt>
 80096d4:	b150      	cbz	r0, 80096ec <_dtoa_r+0x184>
 80096d6:	9800      	ldr	r0, [sp, #0]
 80096d8:	f7f6 ff3c 	bl	8000554 <__aeabi_i2d>
 80096dc:	4632      	mov	r2, r6
 80096de:	463b      	mov	r3, r7
 80096e0:	f7f7 fa0a 	bl	8000af8 <__aeabi_dcmpeq>
 80096e4:	b910      	cbnz	r0, 80096ec <_dtoa_r+0x184>
 80096e6:	9b00      	ldr	r3, [sp, #0]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	9b00      	ldr	r3, [sp, #0]
 80096ee:	2b16      	cmp	r3, #22
 80096f0:	d85a      	bhi.n	80097a8 <_dtoa_r+0x240>
 80096f2:	9a00      	ldr	r2, [sp, #0]
 80096f4:	4b57      	ldr	r3, [pc, #348]	; (8009854 <_dtoa_r+0x2ec>)
 80096f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	ec51 0b19 	vmov	r0, r1, d9
 8009702:	f7f7 fa03 	bl	8000b0c <__aeabi_dcmplt>
 8009706:	2800      	cmp	r0, #0
 8009708:	d050      	beq.n	80097ac <_dtoa_r+0x244>
 800970a:	9b00      	ldr	r3, [sp, #0]
 800970c:	3b01      	subs	r3, #1
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	2300      	movs	r3, #0
 8009712:	930b      	str	r3, [sp, #44]	; 0x2c
 8009714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009716:	1b5d      	subs	r5, r3, r5
 8009718:	1e6b      	subs	r3, r5, #1
 800971a:	9305      	str	r3, [sp, #20]
 800971c:	bf45      	ittet	mi
 800971e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009722:	9304      	strmi	r3, [sp, #16]
 8009724:	2300      	movpl	r3, #0
 8009726:	2300      	movmi	r3, #0
 8009728:	bf4c      	ite	mi
 800972a:	9305      	strmi	r3, [sp, #20]
 800972c:	9304      	strpl	r3, [sp, #16]
 800972e:	9b00      	ldr	r3, [sp, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	db3d      	blt.n	80097b0 <_dtoa_r+0x248>
 8009734:	9b05      	ldr	r3, [sp, #20]
 8009736:	9a00      	ldr	r2, [sp, #0]
 8009738:	920a      	str	r2, [sp, #40]	; 0x28
 800973a:	4413      	add	r3, r2
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	2300      	movs	r3, #0
 8009740:	9307      	str	r3, [sp, #28]
 8009742:	9b06      	ldr	r3, [sp, #24]
 8009744:	2b09      	cmp	r3, #9
 8009746:	f200 8089 	bhi.w	800985c <_dtoa_r+0x2f4>
 800974a:	2b05      	cmp	r3, #5
 800974c:	bfc4      	itt	gt
 800974e:	3b04      	subgt	r3, #4
 8009750:	9306      	strgt	r3, [sp, #24]
 8009752:	9b06      	ldr	r3, [sp, #24]
 8009754:	f1a3 0302 	sub.w	r3, r3, #2
 8009758:	bfcc      	ite	gt
 800975a:	2500      	movgt	r5, #0
 800975c:	2501      	movle	r5, #1
 800975e:	2b03      	cmp	r3, #3
 8009760:	f200 8087 	bhi.w	8009872 <_dtoa_r+0x30a>
 8009764:	e8df f003 	tbb	[pc, r3]
 8009768:	59383a2d 	.word	0x59383a2d
 800976c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009770:	441d      	add	r5, r3
 8009772:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009776:	2b20      	cmp	r3, #32
 8009778:	bfc1      	itttt	gt
 800977a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800977e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009782:	fa0b f303 	lslgt.w	r3, fp, r3
 8009786:	fa26 f000 	lsrgt.w	r0, r6, r0
 800978a:	bfda      	itte	le
 800978c:	f1c3 0320 	rsble	r3, r3, #32
 8009790:	fa06 f003 	lslle.w	r0, r6, r3
 8009794:	4318      	orrgt	r0, r3
 8009796:	f7f6 fecd 	bl	8000534 <__aeabi_ui2d>
 800979a:	2301      	movs	r3, #1
 800979c:	4606      	mov	r6, r0
 800979e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80097a2:	3d01      	subs	r5, #1
 80097a4:	930e      	str	r3, [sp, #56]	; 0x38
 80097a6:	e76a      	b.n	800967e <_dtoa_r+0x116>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e7b2      	b.n	8009712 <_dtoa_r+0x1aa>
 80097ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80097ae:	e7b1      	b.n	8009714 <_dtoa_r+0x1ac>
 80097b0:	9b04      	ldr	r3, [sp, #16]
 80097b2:	9a00      	ldr	r2, [sp, #0]
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	9304      	str	r3, [sp, #16]
 80097b8:	4253      	negs	r3, r2
 80097ba:	9307      	str	r3, [sp, #28]
 80097bc:	2300      	movs	r3, #0
 80097be:	930a      	str	r3, [sp, #40]	; 0x28
 80097c0:	e7bf      	b.n	8009742 <_dtoa_r+0x1da>
 80097c2:	2300      	movs	r3, #0
 80097c4:	9308      	str	r3, [sp, #32]
 80097c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	dc55      	bgt.n	8009878 <_dtoa_r+0x310>
 80097cc:	2301      	movs	r3, #1
 80097ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097d2:	461a      	mov	r2, r3
 80097d4:	9209      	str	r2, [sp, #36]	; 0x24
 80097d6:	e00c      	b.n	80097f2 <_dtoa_r+0x28a>
 80097d8:	2301      	movs	r3, #1
 80097da:	e7f3      	b.n	80097c4 <_dtoa_r+0x25c>
 80097dc:	2300      	movs	r3, #0
 80097de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e0:	9308      	str	r3, [sp, #32]
 80097e2:	9b00      	ldr	r3, [sp, #0]
 80097e4:	4413      	add	r3, r2
 80097e6:	9302      	str	r3, [sp, #8]
 80097e8:	3301      	adds	r3, #1
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	9303      	str	r3, [sp, #12]
 80097ee:	bfb8      	it	lt
 80097f0:	2301      	movlt	r3, #1
 80097f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80097f4:	2200      	movs	r2, #0
 80097f6:	6042      	str	r2, [r0, #4]
 80097f8:	2204      	movs	r2, #4
 80097fa:	f102 0614 	add.w	r6, r2, #20
 80097fe:	429e      	cmp	r6, r3
 8009800:	6841      	ldr	r1, [r0, #4]
 8009802:	d93d      	bls.n	8009880 <_dtoa_r+0x318>
 8009804:	4620      	mov	r0, r4
 8009806:	f000 fccd 	bl	800a1a4 <_Balloc>
 800980a:	9001      	str	r0, [sp, #4]
 800980c:	2800      	cmp	r0, #0
 800980e:	d13b      	bne.n	8009888 <_dtoa_r+0x320>
 8009810:	4b11      	ldr	r3, [pc, #68]	; (8009858 <_dtoa_r+0x2f0>)
 8009812:	4602      	mov	r2, r0
 8009814:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009818:	e6c0      	b.n	800959c <_dtoa_r+0x34>
 800981a:	2301      	movs	r3, #1
 800981c:	e7df      	b.n	80097de <_dtoa_r+0x276>
 800981e:	bf00      	nop
 8009820:	636f4361 	.word	0x636f4361
 8009824:	3fd287a7 	.word	0x3fd287a7
 8009828:	8b60c8b3 	.word	0x8b60c8b3
 800982c:	3fc68a28 	.word	0x3fc68a28
 8009830:	509f79fb 	.word	0x509f79fb
 8009834:	3fd34413 	.word	0x3fd34413
 8009838:	0800cde0 	.word	0x0800cde0
 800983c:	0800cdf7 	.word	0x0800cdf7
 8009840:	7ff00000 	.word	0x7ff00000
 8009844:	0800cddc 	.word	0x0800cddc
 8009848:	0800cdd3 	.word	0x0800cdd3
 800984c:	0800cfd2 	.word	0x0800cfd2
 8009850:	3ff80000 	.word	0x3ff80000
 8009854:	0800cee8 	.word	0x0800cee8
 8009858:	0800ce52 	.word	0x0800ce52
 800985c:	2501      	movs	r5, #1
 800985e:	2300      	movs	r3, #0
 8009860:	9306      	str	r3, [sp, #24]
 8009862:	9508      	str	r5, [sp, #32]
 8009864:	f04f 33ff 	mov.w	r3, #4294967295
 8009868:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800986c:	2200      	movs	r2, #0
 800986e:	2312      	movs	r3, #18
 8009870:	e7b0      	b.n	80097d4 <_dtoa_r+0x26c>
 8009872:	2301      	movs	r3, #1
 8009874:	9308      	str	r3, [sp, #32]
 8009876:	e7f5      	b.n	8009864 <_dtoa_r+0x2fc>
 8009878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800987e:	e7b8      	b.n	80097f2 <_dtoa_r+0x28a>
 8009880:	3101      	adds	r1, #1
 8009882:	6041      	str	r1, [r0, #4]
 8009884:	0052      	lsls	r2, r2, #1
 8009886:	e7b8      	b.n	80097fa <_dtoa_r+0x292>
 8009888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800988a:	9a01      	ldr	r2, [sp, #4]
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	9b03      	ldr	r3, [sp, #12]
 8009890:	2b0e      	cmp	r3, #14
 8009892:	f200 809d 	bhi.w	80099d0 <_dtoa_r+0x468>
 8009896:	2d00      	cmp	r5, #0
 8009898:	f000 809a 	beq.w	80099d0 <_dtoa_r+0x468>
 800989c:	9b00      	ldr	r3, [sp, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dd32      	ble.n	8009908 <_dtoa_r+0x3a0>
 80098a2:	4ab7      	ldr	r2, [pc, #732]	; (8009b80 <_dtoa_r+0x618>)
 80098a4:	f003 030f 	and.w	r3, r3, #15
 80098a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098b0:	9b00      	ldr	r3, [sp, #0]
 80098b2:	05d8      	lsls	r0, r3, #23
 80098b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80098b8:	d516      	bpl.n	80098e8 <_dtoa_r+0x380>
 80098ba:	4bb2      	ldr	r3, [pc, #712]	; (8009b84 <_dtoa_r+0x61c>)
 80098bc:	ec51 0b19 	vmov	r0, r1, d9
 80098c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098c4:	f7f6 ffda 	bl	800087c <__aeabi_ddiv>
 80098c8:	f007 070f 	and.w	r7, r7, #15
 80098cc:	4682      	mov	sl, r0
 80098ce:	468b      	mov	fp, r1
 80098d0:	2503      	movs	r5, #3
 80098d2:	4eac      	ldr	r6, [pc, #688]	; (8009b84 <_dtoa_r+0x61c>)
 80098d4:	b957      	cbnz	r7, 80098ec <_dtoa_r+0x384>
 80098d6:	4642      	mov	r2, r8
 80098d8:	464b      	mov	r3, r9
 80098da:	4650      	mov	r0, sl
 80098dc:	4659      	mov	r1, fp
 80098de:	f7f6 ffcd 	bl	800087c <__aeabi_ddiv>
 80098e2:	4682      	mov	sl, r0
 80098e4:	468b      	mov	fp, r1
 80098e6:	e028      	b.n	800993a <_dtoa_r+0x3d2>
 80098e8:	2502      	movs	r5, #2
 80098ea:	e7f2      	b.n	80098d2 <_dtoa_r+0x36a>
 80098ec:	07f9      	lsls	r1, r7, #31
 80098ee:	d508      	bpl.n	8009902 <_dtoa_r+0x39a>
 80098f0:	4640      	mov	r0, r8
 80098f2:	4649      	mov	r1, r9
 80098f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098f8:	f7f6 fe96 	bl	8000628 <__aeabi_dmul>
 80098fc:	3501      	adds	r5, #1
 80098fe:	4680      	mov	r8, r0
 8009900:	4689      	mov	r9, r1
 8009902:	107f      	asrs	r7, r7, #1
 8009904:	3608      	adds	r6, #8
 8009906:	e7e5      	b.n	80098d4 <_dtoa_r+0x36c>
 8009908:	f000 809b 	beq.w	8009a42 <_dtoa_r+0x4da>
 800990c:	9b00      	ldr	r3, [sp, #0]
 800990e:	4f9d      	ldr	r7, [pc, #628]	; (8009b84 <_dtoa_r+0x61c>)
 8009910:	425e      	negs	r6, r3
 8009912:	4b9b      	ldr	r3, [pc, #620]	; (8009b80 <_dtoa_r+0x618>)
 8009914:	f006 020f 	and.w	r2, r6, #15
 8009918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	ec51 0b19 	vmov	r0, r1, d9
 8009924:	f7f6 fe80 	bl	8000628 <__aeabi_dmul>
 8009928:	1136      	asrs	r6, r6, #4
 800992a:	4682      	mov	sl, r0
 800992c:	468b      	mov	fp, r1
 800992e:	2300      	movs	r3, #0
 8009930:	2502      	movs	r5, #2
 8009932:	2e00      	cmp	r6, #0
 8009934:	d17a      	bne.n	8009a2c <_dtoa_r+0x4c4>
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1d3      	bne.n	80098e2 <_dtoa_r+0x37a>
 800993a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 8082 	beq.w	8009a46 <_dtoa_r+0x4de>
 8009942:	4b91      	ldr	r3, [pc, #580]	; (8009b88 <_dtoa_r+0x620>)
 8009944:	2200      	movs	r2, #0
 8009946:	4650      	mov	r0, sl
 8009948:	4659      	mov	r1, fp
 800994a:	f7f7 f8df 	bl	8000b0c <__aeabi_dcmplt>
 800994e:	2800      	cmp	r0, #0
 8009950:	d079      	beq.n	8009a46 <_dtoa_r+0x4de>
 8009952:	9b03      	ldr	r3, [sp, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d076      	beq.n	8009a46 <_dtoa_r+0x4de>
 8009958:	9b02      	ldr	r3, [sp, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	dd36      	ble.n	80099cc <_dtoa_r+0x464>
 800995e:	9b00      	ldr	r3, [sp, #0]
 8009960:	4650      	mov	r0, sl
 8009962:	4659      	mov	r1, fp
 8009964:	1e5f      	subs	r7, r3, #1
 8009966:	2200      	movs	r2, #0
 8009968:	4b88      	ldr	r3, [pc, #544]	; (8009b8c <_dtoa_r+0x624>)
 800996a:	f7f6 fe5d 	bl	8000628 <__aeabi_dmul>
 800996e:	9e02      	ldr	r6, [sp, #8]
 8009970:	4682      	mov	sl, r0
 8009972:	468b      	mov	fp, r1
 8009974:	3501      	adds	r5, #1
 8009976:	4628      	mov	r0, r5
 8009978:	f7f6 fdec 	bl	8000554 <__aeabi_i2d>
 800997c:	4652      	mov	r2, sl
 800997e:	465b      	mov	r3, fp
 8009980:	f7f6 fe52 	bl	8000628 <__aeabi_dmul>
 8009984:	4b82      	ldr	r3, [pc, #520]	; (8009b90 <_dtoa_r+0x628>)
 8009986:	2200      	movs	r2, #0
 8009988:	f7f6 fc98 	bl	80002bc <__adddf3>
 800998c:	46d0      	mov	r8, sl
 800998e:	46d9      	mov	r9, fp
 8009990:	4682      	mov	sl, r0
 8009992:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009996:	2e00      	cmp	r6, #0
 8009998:	d158      	bne.n	8009a4c <_dtoa_r+0x4e4>
 800999a:	4b7e      	ldr	r3, [pc, #504]	; (8009b94 <_dtoa_r+0x62c>)
 800999c:	2200      	movs	r2, #0
 800999e:	4640      	mov	r0, r8
 80099a0:	4649      	mov	r1, r9
 80099a2:	f7f6 fc89 	bl	80002b8 <__aeabi_dsub>
 80099a6:	4652      	mov	r2, sl
 80099a8:	465b      	mov	r3, fp
 80099aa:	4680      	mov	r8, r0
 80099ac:	4689      	mov	r9, r1
 80099ae:	f7f7 f8cb 	bl	8000b48 <__aeabi_dcmpgt>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f040 8295 	bne.w	8009ee2 <_dtoa_r+0x97a>
 80099b8:	4652      	mov	r2, sl
 80099ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	f7f7 f8a3 	bl	8000b0c <__aeabi_dcmplt>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	f040 8289 	bne.w	8009ede <_dtoa_r+0x976>
 80099cc:	ec5b ab19 	vmov	sl, fp, d9
 80099d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f2c0 8148 	blt.w	8009c68 <_dtoa_r+0x700>
 80099d8:	9a00      	ldr	r2, [sp, #0]
 80099da:	2a0e      	cmp	r2, #14
 80099dc:	f300 8144 	bgt.w	8009c68 <_dtoa_r+0x700>
 80099e0:	4b67      	ldr	r3, [pc, #412]	; (8009b80 <_dtoa_r+0x618>)
 80099e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f280 80d5 	bge.w	8009b9c <_dtoa_r+0x634>
 80099f2:	9b03      	ldr	r3, [sp, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f300 80d1 	bgt.w	8009b9c <_dtoa_r+0x634>
 80099fa:	f040 826f 	bne.w	8009edc <_dtoa_r+0x974>
 80099fe:	4b65      	ldr	r3, [pc, #404]	; (8009b94 <_dtoa_r+0x62c>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	4640      	mov	r0, r8
 8009a04:	4649      	mov	r1, r9
 8009a06:	f7f6 fe0f 	bl	8000628 <__aeabi_dmul>
 8009a0a:	4652      	mov	r2, sl
 8009a0c:	465b      	mov	r3, fp
 8009a0e:	f7f7 f891 	bl	8000b34 <__aeabi_dcmpge>
 8009a12:	9e03      	ldr	r6, [sp, #12]
 8009a14:	4637      	mov	r7, r6
 8009a16:	2800      	cmp	r0, #0
 8009a18:	f040 8245 	bne.w	8009ea6 <_dtoa_r+0x93e>
 8009a1c:	9d01      	ldr	r5, [sp, #4]
 8009a1e:	2331      	movs	r3, #49	; 0x31
 8009a20:	f805 3b01 	strb.w	r3, [r5], #1
 8009a24:	9b00      	ldr	r3, [sp, #0]
 8009a26:	3301      	adds	r3, #1
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	e240      	b.n	8009eae <_dtoa_r+0x946>
 8009a2c:	07f2      	lsls	r2, r6, #31
 8009a2e:	d505      	bpl.n	8009a3c <_dtoa_r+0x4d4>
 8009a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a34:	f7f6 fdf8 	bl	8000628 <__aeabi_dmul>
 8009a38:	3501      	adds	r5, #1
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	1076      	asrs	r6, r6, #1
 8009a3e:	3708      	adds	r7, #8
 8009a40:	e777      	b.n	8009932 <_dtoa_r+0x3ca>
 8009a42:	2502      	movs	r5, #2
 8009a44:	e779      	b.n	800993a <_dtoa_r+0x3d2>
 8009a46:	9f00      	ldr	r7, [sp, #0]
 8009a48:	9e03      	ldr	r6, [sp, #12]
 8009a4a:	e794      	b.n	8009976 <_dtoa_r+0x40e>
 8009a4c:	9901      	ldr	r1, [sp, #4]
 8009a4e:	4b4c      	ldr	r3, [pc, #304]	; (8009b80 <_dtoa_r+0x618>)
 8009a50:	4431      	add	r1, r6
 8009a52:	910d      	str	r1, [sp, #52]	; 0x34
 8009a54:	9908      	ldr	r1, [sp, #32]
 8009a56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a5e:	2900      	cmp	r1, #0
 8009a60:	d043      	beq.n	8009aea <_dtoa_r+0x582>
 8009a62:	494d      	ldr	r1, [pc, #308]	; (8009b98 <_dtoa_r+0x630>)
 8009a64:	2000      	movs	r0, #0
 8009a66:	f7f6 ff09 	bl	800087c <__aeabi_ddiv>
 8009a6a:	4652      	mov	r2, sl
 8009a6c:	465b      	mov	r3, fp
 8009a6e:	f7f6 fc23 	bl	80002b8 <__aeabi_dsub>
 8009a72:	9d01      	ldr	r5, [sp, #4]
 8009a74:	4682      	mov	sl, r0
 8009a76:	468b      	mov	fp, r1
 8009a78:	4649      	mov	r1, r9
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	f7f7 f884 	bl	8000b88 <__aeabi_d2iz>
 8009a80:	4606      	mov	r6, r0
 8009a82:	f7f6 fd67 	bl	8000554 <__aeabi_i2d>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4640      	mov	r0, r8
 8009a8c:	4649      	mov	r1, r9
 8009a8e:	f7f6 fc13 	bl	80002b8 <__aeabi_dsub>
 8009a92:	3630      	adds	r6, #48	; 0x30
 8009a94:	f805 6b01 	strb.w	r6, [r5], #1
 8009a98:	4652      	mov	r2, sl
 8009a9a:	465b      	mov	r3, fp
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	4689      	mov	r9, r1
 8009aa0:	f7f7 f834 	bl	8000b0c <__aeabi_dcmplt>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d163      	bne.n	8009b70 <_dtoa_r+0x608>
 8009aa8:	4642      	mov	r2, r8
 8009aaa:	464b      	mov	r3, r9
 8009aac:	4936      	ldr	r1, [pc, #216]	; (8009b88 <_dtoa_r+0x620>)
 8009aae:	2000      	movs	r0, #0
 8009ab0:	f7f6 fc02 	bl	80002b8 <__aeabi_dsub>
 8009ab4:	4652      	mov	r2, sl
 8009ab6:	465b      	mov	r3, fp
 8009ab8:	f7f7 f828 	bl	8000b0c <__aeabi_dcmplt>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	f040 80b5 	bne.w	8009c2c <_dtoa_r+0x6c4>
 8009ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ac4:	429d      	cmp	r5, r3
 8009ac6:	d081      	beq.n	80099cc <_dtoa_r+0x464>
 8009ac8:	4b30      	ldr	r3, [pc, #192]	; (8009b8c <_dtoa_r+0x624>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	4650      	mov	r0, sl
 8009ace:	4659      	mov	r1, fp
 8009ad0:	f7f6 fdaa 	bl	8000628 <__aeabi_dmul>
 8009ad4:	4b2d      	ldr	r3, [pc, #180]	; (8009b8c <_dtoa_r+0x624>)
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	468b      	mov	fp, r1
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f7f6 fda2 	bl	8000628 <__aeabi_dmul>
 8009ae4:	4680      	mov	r8, r0
 8009ae6:	4689      	mov	r9, r1
 8009ae8:	e7c6      	b.n	8009a78 <_dtoa_r+0x510>
 8009aea:	4650      	mov	r0, sl
 8009aec:	4659      	mov	r1, fp
 8009aee:	f7f6 fd9b 	bl	8000628 <__aeabi_dmul>
 8009af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009af4:	9d01      	ldr	r5, [sp, #4]
 8009af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009af8:	4682      	mov	sl, r0
 8009afa:	468b      	mov	fp, r1
 8009afc:	4649      	mov	r1, r9
 8009afe:	4640      	mov	r0, r8
 8009b00:	f7f7 f842 	bl	8000b88 <__aeabi_d2iz>
 8009b04:	4606      	mov	r6, r0
 8009b06:	f7f6 fd25 	bl	8000554 <__aeabi_i2d>
 8009b0a:	3630      	adds	r6, #48	; 0x30
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4640      	mov	r0, r8
 8009b12:	4649      	mov	r1, r9
 8009b14:	f7f6 fbd0 	bl	80002b8 <__aeabi_dsub>
 8009b18:	f805 6b01 	strb.w	r6, [r5], #1
 8009b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b1e:	429d      	cmp	r5, r3
 8009b20:	4680      	mov	r8, r0
 8009b22:	4689      	mov	r9, r1
 8009b24:	f04f 0200 	mov.w	r2, #0
 8009b28:	d124      	bne.n	8009b74 <_dtoa_r+0x60c>
 8009b2a:	4b1b      	ldr	r3, [pc, #108]	; (8009b98 <_dtoa_r+0x630>)
 8009b2c:	4650      	mov	r0, sl
 8009b2e:	4659      	mov	r1, fp
 8009b30:	f7f6 fbc4 	bl	80002bc <__adddf3>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4640      	mov	r0, r8
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	f7f7 f804 	bl	8000b48 <__aeabi_dcmpgt>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d173      	bne.n	8009c2c <_dtoa_r+0x6c4>
 8009b44:	4652      	mov	r2, sl
 8009b46:	465b      	mov	r3, fp
 8009b48:	4913      	ldr	r1, [pc, #76]	; (8009b98 <_dtoa_r+0x630>)
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	f7f6 fbb4 	bl	80002b8 <__aeabi_dsub>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4640      	mov	r0, r8
 8009b56:	4649      	mov	r1, r9
 8009b58:	f7f6 ffd8 	bl	8000b0c <__aeabi_dcmplt>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	f43f af35 	beq.w	80099cc <_dtoa_r+0x464>
 8009b62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b64:	1e6b      	subs	r3, r5, #1
 8009b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b6c:	2b30      	cmp	r3, #48	; 0x30
 8009b6e:	d0f8      	beq.n	8009b62 <_dtoa_r+0x5fa>
 8009b70:	9700      	str	r7, [sp, #0]
 8009b72:	e049      	b.n	8009c08 <_dtoa_r+0x6a0>
 8009b74:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <_dtoa_r+0x624>)
 8009b76:	f7f6 fd57 	bl	8000628 <__aeabi_dmul>
 8009b7a:	4680      	mov	r8, r0
 8009b7c:	4689      	mov	r9, r1
 8009b7e:	e7bd      	b.n	8009afc <_dtoa_r+0x594>
 8009b80:	0800cee8 	.word	0x0800cee8
 8009b84:	0800cec0 	.word	0x0800cec0
 8009b88:	3ff00000 	.word	0x3ff00000
 8009b8c:	40240000 	.word	0x40240000
 8009b90:	401c0000 	.word	0x401c0000
 8009b94:	40140000 	.word	0x40140000
 8009b98:	3fe00000 	.word	0x3fe00000
 8009b9c:	9d01      	ldr	r5, [sp, #4]
 8009b9e:	4656      	mov	r6, sl
 8009ba0:	465f      	mov	r7, fp
 8009ba2:	4642      	mov	r2, r8
 8009ba4:	464b      	mov	r3, r9
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 fe67 	bl	800087c <__aeabi_ddiv>
 8009bae:	f7f6 ffeb 	bl	8000b88 <__aeabi_d2iz>
 8009bb2:	4682      	mov	sl, r0
 8009bb4:	f7f6 fcce 	bl	8000554 <__aeabi_i2d>
 8009bb8:	4642      	mov	r2, r8
 8009bba:	464b      	mov	r3, r9
 8009bbc:	f7f6 fd34 	bl	8000628 <__aeabi_dmul>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009bcc:	f7f6 fb74 	bl	80002b8 <__aeabi_dsub>
 8009bd0:	f805 6b01 	strb.w	r6, [r5], #1
 8009bd4:	9e01      	ldr	r6, [sp, #4]
 8009bd6:	9f03      	ldr	r7, [sp, #12]
 8009bd8:	1bae      	subs	r6, r5, r6
 8009bda:	42b7      	cmp	r7, r6
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	d135      	bne.n	8009c4e <_dtoa_r+0x6e6>
 8009be2:	f7f6 fb6b 	bl	80002bc <__adddf3>
 8009be6:	4642      	mov	r2, r8
 8009be8:	464b      	mov	r3, r9
 8009bea:	4606      	mov	r6, r0
 8009bec:	460f      	mov	r7, r1
 8009bee:	f7f6 ffab 	bl	8000b48 <__aeabi_dcmpgt>
 8009bf2:	b9d0      	cbnz	r0, 8009c2a <_dtoa_r+0x6c2>
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f6 ff7c 	bl	8000af8 <__aeabi_dcmpeq>
 8009c00:	b110      	cbz	r0, 8009c08 <_dtoa_r+0x6a0>
 8009c02:	f01a 0f01 	tst.w	sl, #1
 8009c06:	d110      	bne.n	8009c2a <_dtoa_r+0x6c2>
 8009c08:	4620      	mov	r0, r4
 8009c0a:	ee18 1a10 	vmov	r1, s16
 8009c0e:	f000 fb09 	bl	800a224 <_Bfree>
 8009c12:	2300      	movs	r3, #0
 8009c14:	9800      	ldr	r0, [sp, #0]
 8009c16:	702b      	strb	r3, [r5, #0]
 8009c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	6018      	str	r0, [r3, #0]
 8009c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f43f acf1 	beq.w	8009608 <_dtoa_r+0xa0>
 8009c26:	601d      	str	r5, [r3, #0]
 8009c28:	e4ee      	b.n	8009608 <_dtoa_r+0xa0>
 8009c2a:	9f00      	ldr	r7, [sp, #0]
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	461d      	mov	r5, r3
 8009c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c34:	2a39      	cmp	r2, #57	; 0x39
 8009c36:	d106      	bne.n	8009c46 <_dtoa_r+0x6de>
 8009c38:	9a01      	ldr	r2, [sp, #4]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d1f7      	bne.n	8009c2e <_dtoa_r+0x6c6>
 8009c3e:	9901      	ldr	r1, [sp, #4]
 8009c40:	2230      	movs	r2, #48	; 0x30
 8009c42:	3701      	adds	r7, #1
 8009c44:	700a      	strb	r2, [r1, #0]
 8009c46:	781a      	ldrb	r2, [r3, #0]
 8009c48:	3201      	adds	r2, #1
 8009c4a:	701a      	strb	r2, [r3, #0]
 8009c4c:	e790      	b.n	8009b70 <_dtoa_r+0x608>
 8009c4e:	4ba6      	ldr	r3, [pc, #664]	; (8009ee8 <_dtoa_r+0x980>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	f7f6 fce9 	bl	8000628 <__aeabi_dmul>
 8009c56:	2200      	movs	r2, #0
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	460f      	mov	r7, r1
 8009c5e:	f7f6 ff4b 	bl	8000af8 <__aeabi_dcmpeq>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d09d      	beq.n	8009ba2 <_dtoa_r+0x63a>
 8009c66:	e7cf      	b.n	8009c08 <_dtoa_r+0x6a0>
 8009c68:	9a08      	ldr	r2, [sp, #32]
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	f000 80d7 	beq.w	8009e1e <_dtoa_r+0x8b6>
 8009c70:	9a06      	ldr	r2, [sp, #24]
 8009c72:	2a01      	cmp	r2, #1
 8009c74:	f300 80ba 	bgt.w	8009dec <_dtoa_r+0x884>
 8009c78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	f000 80b2 	beq.w	8009de4 <_dtoa_r+0x87c>
 8009c80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c84:	9e07      	ldr	r6, [sp, #28]
 8009c86:	9d04      	ldr	r5, [sp, #16]
 8009c88:	9a04      	ldr	r2, [sp, #16]
 8009c8a:	441a      	add	r2, r3
 8009c8c:	9204      	str	r2, [sp, #16]
 8009c8e:	9a05      	ldr	r2, [sp, #20]
 8009c90:	2101      	movs	r1, #1
 8009c92:	441a      	add	r2, r3
 8009c94:	4620      	mov	r0, r4
 8009c96:	9205      	str	r2, [sp, #20]
 8009c98:	f000 fb7c 	bl	800a394 <__i2b>
 8009c9c:	4607      	mov	r7, r0
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	dd0c      	ble.n	8009cbc <_dtoa_r+0x754>
 8009ca2:	9b05      	ldr	r3, [sp, #20]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	dd09      	ble.n	8009cbc <_dtoa_r+0x754>
 8009ca8:	42ab      	cmp	r3, r5
 8009caa:	9a04      	ldr	r2, [sp, #16]
 8009cac:	bfa8      	it	ge
 8009cae:	462b      	movge	r3, r5
 8009cb0:	1ad2      	subs	r2, r2, r3
 8009cb2:	9204      	str	r2, [sp, #16]
 8009cb4:	9a05      	ldr	r2, [sp, #20]
 8009cb6:	1aed      	subs	r5, r5, r3
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	9305      	str	r3, [sp, #20]
 8009cbc:	9b07      	ldr	r3, [sp, #28]
 8009cbe:	b31b      	cbz	r3, 8009d08 <_dtoa_r+0x7a0>
 8009cc0:	9b08      	ldr	r3, [sp, #32]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 80af 	beq.w	8009e26 <_dtoa_r+0x8be>
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	dd13      	ble.n	8009cf4 <_dtoa_r+0x78c>
 8009ccc:	4639      	mov	r1, r7
 8009cce:	4632      	mov	r2, r6
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f000 fc1f 	bl	800a514 <__pow5mult>
 8009cd6:	ee18 2a10 	vmov	r2, s16
 8009cda:	4601      	mov	r1, r0
 8009cdc:	4607      	mov	r7, r0
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f000 fb6e 	bl	800a3c0 <__multiply>
 8009ce4:	ee18 1a10 	vmov	r1, s16
 8009ce8:	4680      	mov	r8, r0
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 fa9a 	bl	800a224 <_Bfree>
 8009cf0:	ee08 8a10 	vmov	s16, r8
 8009cf4:	9b07      	ldr	r3, [sp, #28]
 8009cf6:	1b9a      	subs	r2, r3, r6
 8009cf8:	d006      	beq.n	8009d08 <_dtoa_r+0x7a0>
 8009cfa:	ee18 1a10 	vmov	r1, s16
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f000 fc08 	bl	800a514 <__pow5mult>
 8009d04:	ee08 0a10 	vmov	s16, r0
 8009d08:	2101      	movs	r1, #1
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 fb42 	bl	800a394 <__i2b>
 8009d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	4606      	mov	r6, r0
 8009d16:	f340 8088 	ble.w	8009e2a <_dtoa_r+0x8c2>
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	4601      	mov	r1, r0
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f000 fbf8 	bl	800a514 <__pow5mult>
 8009d24:	9b06      	ldr	r3, [sp, #24]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	4606      	mov	r6, r0
 8009d2a:	f340 8081 	ble.w	8009e30 <_dtoa_r+0x8c8>
 8009d2e:	f04f 0800 	mov.w	r8, #0
 8009d32:	6933      	ldr	r3, [r6, #16]
 8009d34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d38:	6918      	ldr	r0, [r3, #16]
 8009d3a:	f000 fadb 	bl	800a2f4 <__hi0bits>
 8009d3e:	f1c0 0020 	rsb	r0, r0, #32
 8009d42:	9b05      	ldr	r3, [sp, #20]
 8009d44:	4418      	add	r0, r3
 8009d46:	f010 001f 	ands.w	r0, r0, #31
 8009d4a:	f000 8092 	beq.w	8009e72 <_dtoa_r+0x90a>
 8009d4e:	f1c0 0320 	rsb	r3, r0, #32
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	f340 808a 	ble.w	8009e6c <_dtoa_r+0x904>
 8009d58:	f1c0 001c 	rsb	r0, r0, #28
 8009d5c:	9b04      	ldr	r3, [sp, #16]
 8009d5e:	4403      	add	r3, r0
 8009d60:	9304      	str	r3, [sp, #16]
 8009d62:	9b05      	ldr	r3, [sp, #20]
 8009d64:	4403      	add	r3, r0
 8009d66:	4405      	add	r5, r0
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	9b04      	ldr	r3, [sp, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dd07      	ble.n	8009d80 <_dtoa_r+0x818>
 8009d70:	ee18 1a10 	vmov	r1, s16
 8009d74:	461a      	mov	r2, r3
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 fc26 	bl	800a5c8 <__lshift>
 8009d7c:	ee08 0a10 	vmov	s16, r0
 8009d80:	9b05      	ldr	r3, [sp, #20]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	dd05      	ble.n	8009d92 <_dtoa_r+0x82a>
 8009d86:	4631      	mov	r1, r6
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f000 fc1c 	bl	800a5c8 <__lshift>
 8009d90:	4606      	mov	r6, r0
 8009d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d06e      	beq.n	8009e76 <_dtoa_r+0x90e>
 8009d98:	ee18 0a10 	vmov	r0, s16
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	f000 fc83 	bl	800a6a8 <__mcmp>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	da67      	bge.n	8009e76 <_dtoa_r+0x90e>
 8009da6:	9b00      	ldr	r3, [sp, #0]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	ee18 1a10 	vmov	r1, s16
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	220a      	movs	r2, #10
 8009db2:	2300      	movs	r3, #0
 8009db4:	4620      	mov	r0, r4
 8009db6:	f000 fa57 	bl	800a268 <__multadd>
 8009dba:	9b08      	ldr	r3, [sp, #32]
 8009dbc:	ee08 0a10 	vmov	s16, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 81b1 	beq.w	800a128 <_dtoa_r+0xbc0>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4639      	mov	r1, r7
 8009dca:	220a      	movs	r2, #10
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fa4b 	bl	800a268 <__multadd>
 8009dd2:	9b02      	ldr	r3, [sp, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	f300 808e 	bgt.w	8009ef8 <_dtoa_r+0x990>
 8009ddc:	9b06      	ldr	r3, [sp, #24]
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	dc51      	bgt.n	8009e86 <_dtoa_r+0x91e>
 8009de2:	e089      	b.n	8009ef8 <_dtoa_r+0x990>
 8009de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009de6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009dea:	e74b      	b.n	8009c84 <_dtoa_r+0x71c>
 8009dec:	9b03      	ldr	r3, [sp, #12]
 8009dee:	1e5e      	subs	r6, r3, #1
 8009df0:	9b07      	ldr	r3, [sp, #28]
 8009df2:	42b3      	cmp	r3, r6
 8009df4:	bfbf      	itttt	lt
 8009df6:	9b07      	ldrlt	r3, [sp, #28]
 8009df8:	9607      	strlt	r6, [sp, #28]
 8009dfa:	1af2      	sublt	r2, r6, r3
 8009dfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009dfe:	bfb6      	itet	lt
 8009e00:	189b      	addlt	r3, r3, r2
 8009e02:	1b9e      	subge	r6, r3, r6
 8009e04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	bfb8      	it	lt
 8009e0a:	2600      	movlt	r6, #0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	bfb7      	itett	lt
 8009e10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009e14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009e18:	1a9d      	sublt	r5, r3, r2
 8009e1a:	2300      	movlt	r3, #0
 8009e1c:	e734      	b.n	8009c88 <_dtoa_r+0x720>
 8009e1e:	9e07      	ldr	r6, [sp, #28]
 8009e20:	9d04      	ldr	r5, [sp, #16]
 8009e22:	9f08      	ldr	r7, [sp, #32]
 8009e24:	e73b      	b.n	8009c9e <_dtoa_r+0x736>
 8009e26:	9a07      	ldr	r2, [sp, #28]
 8009e28:	e767      	b.n	8009cfa <_dtoa_r+0x792>
 8009e2a:	9b06      	ldr	r3, [sp, #24]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	dc18      	bgt.n	8009e62 <_dtoa_r+0x8fa>
 8009e30:	f1ba 0f00 	cmp.w	sl, #0
 8009e34:	d115      	bne.n	8009e62 <_dtoa_r+0x8fa>
 8009e36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e3a:	b993      	cbnz	r3, 8009e62 <_dtoa_r+0x8fa>
 8009e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e40:	0d1b      	lsrs	r3, r3, #20
 8009e42:	051b      	lsls	r3, r3, #20
 8009e44:	b183      	cbz	r3, 8009e68 <_dtoa_r+0x900>
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	9b05      	ldr	r3, [sp, #20]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	9305      	str	r3, [sp, #20]
 8009e52:	f04f 0801 	mov.w	r8, #1
 8009e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f47f af6a 	bne.w	8009d32 <_dtoa_r+0x7ca>
 8009e5e:	2001      	movs	r0, #1
 8009e60:	e76f      	b.n	8009d42 <_dtoa_r+0x7da>
 8009e62:	f04f 0800 	mov.w	r8, #0
 8009e66:	e7f6      	b.n	8009e56 <_dtoa_r+0x8ee>
 8009e68:	4698      	mov	r8, r3
 8009e6a:	e7f4      	b.n	8009e56 <_dtoa_r+0x8ee>
 8009e6c:	f43f af7d 	beq.w	8009d6a <_dtoa_r+0x802>
 8009e70:	4618      	mov	r0, r3
 8009e72:	301c      	adds	r0, #28
 8009e74:	e772      	b.n	8009d5c <_dtoa_r+0x7f4>
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc37      	bgt.n	8009eec <_dtoa_r+0x984>
 8009e7c:	9b06      	ldr	r3, [sp, #24]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	dd34      	ble.n	8009eec <_dtoa_r+0x984>
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	9302      	str	r3, [sp, #8]
 8009e86:	9b02      	ldr	r3, [sp, #8]
 8009e88:	b96b      	cbnz	r3, 8009ea6 <_dtoa_r+0x93e>
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	2205      	movs	r2, #5
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f000 f9ea 	bl	800a268 <__multadd>
 8009e94:	4601      	mov	r1, r0
 8009e96:	4606      	mov	r6, r0
 8009e98:	ee18 0a10 	vmov	r0, s16
 8009e9c:	f000 fc04 	bl	800a6a8 <__mcmp>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f73f adbb 	bgt.w	8009a1c <_dtoa_r+0x4b4>
 8009ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea8:	9d01      	ldr	r5, [sp, #4]
 8009eaa:	43db      	mvns	r3, r3
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	f04f 0800 	mov.w	r8, #0
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 f9b5 	bl	800a224 <_Bfree>
 8009eba:	2f00      	cmp	r7, #0
 8009ebc:	f43f aea4 	beq.w	8009c08 <_dtoa_r+0x6a0>
 8009ec0:	f1b8 0f00 	cmp.w	r8, #0
 8009ec4:	d005      	beq.n	8009ed2 <_dtoa_r+0x96a>
 8009ec6:	45b8      	cmp	r8, r7
 8009ec8:	d003      	beq.n	8009ed2 <_dtoa_r+0x96a>
 8009eca:	4641      	mov	r1, r8
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f000 f9a9 	bl	800a224 <_Bfree>
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 f9a5 	bl	800a224 <_Bfree>
 8009eda:	e695      	b.n	8009c08 <_dtoa_r+0x6a0>
 8009edc:	2600      	movs	r6, #0
 8009ede:	4637      	mov	r7, r6
 8009ee0:	e7e1      	b.n	8009ea6 <_dtoa_r+0x93e>
 8009ee2:	9700      	str	r7, [sp, #0]
 8009ee4:	4637      	mov	r7, r6
 8009ee6:	e599      	b.n	8009a1c <_dtoa_r+0x4b4>
 8009ee8:	40240000 	.word	0x40240000
 8009eec:	9b08      	ldr	r3, [sp, #32]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 80ca 	beq.w	800a088 <_dtoa_r+0xb20>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	9302      	str	r3, [sp, #8]
 8009ef8:	2d00      	cmp	r5, #0
 8009efa:	dd05      	ble.n	8009f08 <_dtoa_r+0x9a0>
 8009efc:	4639      	mov	r1, r7
 8009efe:	462a      	mov	r2, r5
 8009f00:	4620      	mov	r0, r4
 8009f02:	f000 fb61 	bl	800a5c8 <__lshift>
 8009f06:	4607      	mov	r7, r0
 8009f08:	f1b8 0f00 	cmp.w	r8, #0
 8009f0c:	d05b      	beq.n	8009fc6 <_dtoa_r+0xa5e>
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 f947 	bl	800a1a4 <_Balloc>
 8009f16:	4605      	mov	r5, r0
 8009f18:	b928      	cbnz	r0, 8009f26 <_dtoa_r+0x9be>
 8009f1a:	4b87      	ldr	r3, [pc, #540]	; (800a138 <_dtoa_r+0xbd0>)
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f22:	f7ff bb3b 	b.w	800959c <_dtoa_r+0x34>
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	3202      	adds	r2, #2
 8009f2a:	0092      	lsls	r2, r2, #2
 8009f2c:	f107 010c 	add.w	r1, r7, #12
 8009f30:	300c      	adds	r0, #12
 8009f32:	f000 f91d 	bl	800a170 <memcpy>
 8009f36:	2201      	movs	r2, #1
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fb44 	bl	800a5c8 <__lshift>
 8009f40:	9b01      	ldr	r3, [sp, #4]
 8009f42:	f103 0901 	add.w	r9, r3, #1
 8009f46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	9305      	str	r3, [sp, #20]
 8009f4e:	f00a 0301 	and.w	r3, sl, #1
 8009f52:	46b8      	mov	r8, r7
 8009f54:	9304      	str	r3, [sp, #16]
 8009f56:	4607      	mov	r7, r0
 8009f58:	4631      	mov	r1, r6
 8009f5a:	ee18 0a10 	vmov	r0, s16
 8009f5e:	f7ff fa77 	bl	8009450 <quorem>
 8009f62:	4641      	mov	r1, r8
 8009f64:	9002      	str	r0, [sp, #8]
 8009f66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f6a:	ee18 0a10 	vmov	r0, s16
 8009f6e:	f000 fb9b 	bl	800a6a8 <__mcmp>
 8009f72:	463a      	mov	r2, r7
 8009f74:	9003      	str	r0, [sp, #12]
 8009f76:	4631      	mov	r1, r6
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 fbb1 	bl	800a6e0 <__mdiff>
 8009f7e:	68c2      	ldr	r2, [r0, #12]
 8009f80:	f109 3bff 	add.w	fp, r9, #4294967295
 8009f84:	4605      	mov	r5, r0
 8009f86:	bb02      	cbnz	r2, 8009fca <_dtoa_r+0xa62>
 8009f88:	4601      	mov	r1, r0
 8009f8a:	ee18 0a10 	vmov	r0, s16
 8009f8e:	f000 fb8b 	bl	800a6a8 <__mcmp>
 8009f92:	4602      	mov	r2, r0
 8009f94:	4629      	mov	r1, r5
 8009f96:	4620      	mov	r0, r4
 8009f98:	9207      	str	r2, [sp, #28]
 8009f9a:	f000 f943 	bl	800a224 <_Bfree>
 8009f9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009fa2:	ea43 0102 	orr.w	r1, r3, r2
 8009fa6:	9b04      	ldr	r3, [sp, #16]
 8009fa8:	430b      	orrs	r3, r1
 8009faa:	464d      	mov	r5, r9
 8009fac:	d10f      	bne.n	8009fce <_dtoa_r+0xa66>
 8009fae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009fb2:	d02a      	beq.n	800a00a <_dtoa_r+0xaa2>
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dd02      	ble.n	8009fc0 <_dtoa_r+0xa58>
 8009fba:	9b02      	ldr	r3, [sp, #8]
 8009fbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009fc0:	f88b a000 	strb.w	sl, [fp]
 8009fc4:	e775      	b.n	8009eb2 <_dtoa_r+0x94a>
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	e7ba      	b.n	8009f40 <_dtoa_r+0x9d8>
 8009fca:	2201      	movs	r2, #1
 8009fcc:	e7e2      	b.n	8009f94 <_dtoa_r+0xa2c>
 8009fce:	9b03      	ldr	r3, [sp, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	db04      	blt.n	8009fde <_dtoa_r+0xa76>
 8009fd4:	9906      	ldr	r1, [sp, #24]
 8009fd6:	430b      	orrs	r3, r1
 8009fd8:	9904      	ldr	r1, [sp, #16]
 8009fda:	430b      	orrs	r3, r1
 8009fdc:	d122      	bne.n	800a024 <_dtoa_r+0xabc>
 8009fde:	2a00      	cmp	r2, #0
 8009fe0:	ddee      	ble.n	8009fc0 <_dtoa_r+0xa58>
 8009fe2:	ee18 1a10 	vmov	r1, s16
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 faed 	bl	800a5c8 <__lshift>
 8009fee:	4631      	mov	r1, r6
 8009ff0:	ee08 0a10 	vmov	s16, r0
 8009ff4:	f000 fb58 	bl	800a6a8 <__mcmp>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	dc03      	bgt.n	800a004 <_dtoa_r+0xa9c>
 8009ffc:	d1e0      	bne.n	8009fc0 <_dtoa_r+0xa58>
 8009ffe:	f01a 0f01 	tst.w	sl, #1
 800a002:	d0dd      	beq.n	8009fc0 <_dtoa_r+0xa58>
 800a004:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a008:	d1d7      	bne.n	8009fba <_dtoa_r+0xa52>
 800a00a:	2339      	movs	r3, #57	; 0x39
 800a00c:	f88b 3000 	strb.w	r3, [fp]
 800a010:	462b      	mov	r3, r5
 800a012:	461d      	mov	r5, r3
 800a014:	3b01      	subs	r3, #1
 800a016:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a01a:	2a39      	cmp	r2, #57	; 0x39
 800a01c:	d071      	beq.n	800a102 <_dtoa_r+0xb9a>
 800a01e:	3201      	adds	r2, #1
 800a020:	701a      	strb	r2, [r3, #0]
 800a022:	e746      	b.n	8009eb2 <_dtoa_r+0x94a>
 800a024:	2a00      	cmp	r2, #0
 800a026:	dd07      	ble.n	800a038 <_dtoa_r+0xad0>
 800a028:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a02c:	d0ed      	beq.n	800a00a <_dtoa_r+0xaa2>
 800a02e:	f10a 0301 	add.w	r3, sl, #1
 800a032:	f88b 3000 	strb.w	r3, [fp]
 800a036:	e73c      	b.n	8009eb2 <_dtoa_r+0x94a>
 800a038:	9b05      	ldr	r3, [sp, #20]
 800a03a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a03e:	4599      	cmp	r9, r3
 800a040:	d047      	beq.n	800a0d2 <_dtoa_r+0xb6a>
 800a042:	ee18 1a10 	vmov	r1, s16
 800a046:	2300      	movs	r3, #0
 800a048:	220a      	movs	r2, #10
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 f90c 	bl	800a268 <__multadd>
 800a050:	45b8      	cmp	r8, r7
 800a052:	ee08 0a10 	vmov	s16, r0
 800a056:	f04f 0300 	mov.w	r3, #0
 800a05a:	f04f 020a 	mov.w	r2, #10
 800a05e:	4641      	mov	r1, r8
 800a060:	4620      	mov	r0, r4
 800a062:	d106      	bne.n	800a072 <_dtoa_r+0xb0a>
 800a064:	f000 f900 	bl	800a268 <__multadd>
 800a068:	4680      	mov	r8, r0
 800a06a:	4607      	mov	r7, r0
 800a06c:	f109 0901 	add.w	r9, r9, #1
 800a070:	e772      	b.n	8009f58 <_dtoa_r+0x9f0>
 800a072:	f000 f8f9 	bl	800a268 <__multadd>
 800a076:	4639      	mov	r1, r7
 800a078:	4680      	mov	r8, r0
 800a07a:	2300      	movs	r3, #0
 800a07c:	220a      	movs	r2, #10
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 f8f2 	bl	800a268 <__multadd>
 800a084:	4607      	mov	r7, r0
 800a086:	e7f1      	b.n	800a06c <_dtoa_r+0xb04>
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	9302      	str	r3, [sp, #8]
 800a08c:	9d01      	ldr	r5, [sp, #4]
 800a08e:	ee18 0a10 	vmov	r0, s16
 800a092:	4631      	mov	r1, r6
 800a094:	f7ff f9dc 	bl	8009450 <quorem>
 800a098:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a09c:	9b01      	ldr	r3, [sp, #4]
 800a09e:	f805 ab01 	strb.w	sl, [r5], #1
 800a0a2:	1aea      	subs	r2, r5, r3
 800a0a4:	9b02      	ldr	r3, [sp, #8]
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	dd09      	ble.n	800a0be <_dtoa_r+0xb56>
 800a0aa:	ee18 1a10 	vmov	r1, s16
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	220a      	movs	r2, #10
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 f8d8 	bl	800a268 <__multadd>
 800a0b8:	ee08 0a10 	vmov	s16, r0
 800a0bc:	e7e7      	b.n	800a08e <_dtoa_r+0xb26>
 800a0be:	9b02      	ldr	r3, [sp, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	bfc8      	it	gt
 800a0c4:	461d      	movgt	r5, r3
 800a0c6:	9b01      	ldr	r3, [sp, #4]
 800a0c8:	bfd8      	it	le
 800a0ca:	2501      	movle	r5, #1
 800a0cc:	441d      	add	r5, r3
 800a0ce:	f04f 0800 	mov.w	r8, #0
 800a0d2:	ee18 1a10 	vmov	r1, s16
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f000 fa75 	bl	800a5c8 <__lshift>
 800a0de:	4631      	mov	r1, r6
 800a0e0:	ee08 0a10 	vmov	s16, r0
 800a0e4:	f000 fae0 	bl	800a6a8 <__mcmp>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	dc91      	bgt.n	800a010 <_dtoa_r+0xaa8>
 800a0ec:	d102      	bne.n	800a0f4 <_dtoa_r+0xb8c>
 800a0ee:	f01a 0f01 	tst.w	sl, #1
 800a0f2:	d18d      	bne.n	800a010 <_dtoa_r+0xaa8>
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	461d      	mov	r5, r3
 800a0f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0fc:	2a30      	cmp	r2, #48	; 0x30
 800a0fe:	d0fa      	beq.n	800a0f6 <_dtoa_r+0xb8e>
 800a100:	e6d7      	b.n	8009eb2 <_dtoa_r+0x94a>
 800a102:	9a01      	ldr	r2, [sp, #4]
 800a104:	429a      	cmp	r2, r3
 800a106:	d184      	bne.n	800a012 <_dtoa_r+0xaaa>
 800a108:	9b00      	ldr	r3, [sp, #0]
 800a10a:	3301      	adds	r3, #1
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	2331      	movs	r3, #49	; 0x31
 800a110:	7013      	strb	r3, [r2, #0]
 800a112:	e6ce      	b.n	8009eb2 <_dtoa_r+0x94a>
 800a114:	4b09      	ldr	r3, [pc, #36]	; (800a13c <_dtoa_r+0xbd4>)
 800a116:	f7ff ba95 	b.w	8009644 <_dtoa_r+0xdc>
 800a11a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f47f aa6e 	bne.w	80095fe <_dtoa_r+0x96>
 800a122:	4b07      	ldr	r3, [pc, #28]	; (800a140 <_dtoa_r+0xbd8>)
 800a124:	f7ff ba8e 	b.w	8009644 <_dtoa_r+0xdc>
 800a128:	9b02      	ldr	r3, [sp, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	dcae      	bgt.n	800a08c <_dtoa_r+0xb24>
 800a12e:	9b06      	ldr	r3, [sp, #24]
 800a130:	2b02      	cmp	r3, #2
 800a132:	f73f aea8 	bgt.w	8009e86 <_dtoa_r+0x91e>
 800a136:	e7a9      	b.n	800a08c <_dtoa_r+0xb24>
 800a138:	0800ce52 	.word	0x0800ce52
 800a13c:	0800cfd1 	.word	0x0800cfd1
 800a140:	0800cdd3 	.word	0x0800cdd3

0800a144 <_localeconv_r>:
 800a144:	4800      	ldr	r0, [pc, #0]	; (800a148 <_localeconv_r+0x4>)
 800a146:	4770      	bx	lr
 800a148:	200001f8 	.word	0x200001f8

0800a14c <_lseek_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d07      	ldr	r5, [pc, #28]	; (800a16c <_lseek_r+0x20>)
 800a150:	4604      	mov	r4, r0
 800a152:	4608      	mov	r0, r1
 800a154:	4611      	mov	r1, r2
 800a156:	2200      	movs	r2, #0
 800a158:	602a      	str	r2, [r5, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	f7f8 fc62 	bl	8002a24 <_lseek>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d102      	bne.n	800a16a <_lseek_r+0x1e>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	b103      	cbz	r3, 800a16a <_lseek_r+0x1e>
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	20000540 	.word	0x20000540

0800a170 <memcpy>:
 800a170:	440a      	add	r2, r1
 800a172:	4291      	cmp	r1, r2
 800a174:	f100 33ff 	add.w	r3, r0, #4294967295
 800a178:	d100      	bne.n	800a17c <memcpy+0xc>
 800a17a:	4770      	bx	lr
 800a17c:	b510      	push	{r4, lr}
 800a17e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a182:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a186:	4291      	cmp	r1, r2
 800a188:	d1f9      	bne.n	800a17e <memcpy+0xe>
 800a18a:	bd10      	pop	{r4, pc}

0800a18c <__malloc_lock>:
 800a18c:	4801      	ldr	r0, [pc, #4]	; (800a194 <__malloc_lock+0x8>)
 800a18e:	f001 bb03 	b.w	800b798 <__retarget_lock_acquire_recursive>
 800a192:	bf00      	nop
 800a194:	20000544 	.word	0x20000544

0800a198 <__malloc_unlock>:
 800a198:	4801      	ldr	r0, [pc, #4]	; (800a1a0 <__malloc_unlock+0x8>)
 800a19a:	f001 bafe 	b.w	800b79a <__retarget_lock_release_recursive>
 800a19e:	bf00      	nop
 800a1a0:	20000544 	.word	0x20000544

0800a1a4 <_Balloc>:
 800a1a4:	b570      	push	{r4, r5, r6, lr}
 800a1a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	460d      	mov	r5, r1
 800a1ac:	b976      	cbnz	r6, 800a1cc <_Balloc+0x28>
 800a1ae:	2010      	movs	r0, #16
 800a1b0:	f7fe fa72 	bl	8008698 <malloc>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6260      	str	r0, [r4, #36]	; 0x24
 800a1b8:	b920      	cbnz	r0, 800a1c4 <_Balloc+0x20>
 800a1ba:	4b18      	ldr	r3, [pc, #96]	; (800a21c <_Balloc+0x78>)
 800a1bc:	4818      	ldr	r0, [pc, #96]	; (800a220 <_Balloc+0x7c>)
 800a1be:	2166      	movs	r1, #102	; 0x66
 800a1c0:	f001 f902 	bl	800b3c8 <__assert_func>
 800a1c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1c8:	6006      	str	r6, [r0, #0]
 800a1ca:	60c6      	str	r6, [r0, #12]
 800a1cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1ce:	68f3      	ldr	r3, [r6, #12]
 800a1d0:	b183      	cbz	r3, 800a1f4 <_Balloc+0x50>
 800a1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1da:	b9b8      	cbnz	r0, 800a20c <_Balloc+0x68>
 800a1dc:	2101      	movs	r1, #1
 800a1de:	fa01 f605 	lsl.w	r6, r1, r5
 800a1e2:	1d72      	adds	r2, r6, #5
 800a1e4:	0092      	lsls	r2, r2, #2
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f000 fb60 	bl	800a8ac <_calloc_r>
 800a1ec:	b160      	cbz	r0, 800a208 <_Balloc+0x64>
 800a1ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1f2:	e00e      	b.n	800a212 <_Balloc+0x6e>
 800a1f4:	2221      	movs	r2, #33	; 0x21
 800a1f6:	2104      	movs	r1, #4
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 fb57 	bl	800a8ac <_calloc_r>
 800a1fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a200:	60f0      	str	r0, [r6, #12]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e4      	bne.n	800a1d2 <_Balloc+0x2e>
 800a208:	2000      	movs	r0, #0
 800a20a:	bd70      	pop	{r4, r5, r6, pc}
 800a20c:	6802      	ldr	r2, [r0, #0]
 800a20e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a212:	2300      	movs	r3, #0
 800a214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a218:	e7f7      	b.n	800a20a <_Balloc+0x66>
 800a21a:	bf00      	nop
 800a21c:	0800cde0 	.word	0x0800cde0
 800a220:	0800ce63 	.word	0x0800ce63

0800a224 <_Bfree>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a228:	4605      	mov	r5, r0
 800a22a:	460c      	mov	r4, r1
 800a22c:	b976      	cbnz	r6, 800a24c <_Bfree+0x28>
 800a22e:	2010      	movs	r0, #16
 800a230:	f7fe fa32 	bl	8008698 <malloc>
 800a234:	4602      	mov	r2, r0
 800a236:	6268      	str	r0, [r5, #36]	; 0x24
 800a238:	b920      	cbnz	r0, 800a244 <_Bfree+0x20>
 800a23a:	4b09      	ldr	r3, [pc, #36]	; (800a260 <_Bfree+0x3c>)
 800a23c:	4809      	ldr	r0, [pc, #36]	; (800a264 <_Bfree+0x40>)
 800a23e:	218a      	movs	r1, #138	; 0x8a
 800a240:	f001 f8c2 	bl	800b3c8 <__assert_func>
 800a244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a248:	6006      	str	r6, [r0, #0]
 800a24a:	60c6      	str	r6, [r0, #12]
 800a24c:	b13c      	cbz	r4, 800a25e <_Bfree+0x3a>
 800a24e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a250:	6862      	ldr	r2, [r4, #4]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a258:	6021      	str	r1, [r4, #0]
 800a25a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a25e:	bd70      	pop	{r4, r5, r6, pc}
 800a260:	0800cde0 	.word	0x0800cde0
 800a264:	0800ce63 	.word	0x0800ce63

0800a268 <__multadd>:
 800a268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26c:	690d      	ldr	r5, [r1, #16]
 800a26e:	4607      	mov	r7, r0
 800a270:	460c      	mov	r4, r1
 800a272:	461e      	mov	r6, r3
 800a274:	f101 0c14 	add.w	ip, r1, #20
 800a278:	2000      	movs	r0, #0
 800a27a:	f8dc 3000 	ldr.w	r3, [ip]
 800a27e:	b299      	uxth	r1, r3
 800a280:	fb02 6101 	mla	r1, r2, r1, r6
 800a284:	0c1e      	lsrs	r6, r3, #16
 800a286:	0c0b      	lsrs	r3, r1, #16
 800a288:	fb02 3306 	mla	r3, r2, r6, r3
 800a28c:	b289      	uxth	r1, r1
 800a28e:	3001      	adds	r0, #1
 800a290:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a294:	4285      	cmp	r5, r0
 800a296:	f84c 1b04 	str.w	r1, [ip], #4
 800a29a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a29e:	dcec      	bgt.n	800a27a <__multadd+0x12>
 800a2a0:	b30e      	cbz	r6, 800a2e6 <__multadd+0x7e>
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	42ab      	cmp	r3, r5
 800a2a6:	dc19      	bgt.n	800a2dc <__multadd+0x74>
 800a2a8:	6861      	ldr	r1, [r4, #4]
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	3101      	adds	r1, #1
 800a2ae:	f7ff ff79 	bl	800a1a4 <_Balloc>
 800a2b2:	4680      	mov	r8, r0
 800a2b4:	b928      	cbnz	r0, 800a2c2 <__multadd+0x5a>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <__multadd+0x84>)
 800a2ba:	480d      	ldr	r0, [pc, #52]	; (800a2f0 <__multadd+0x88>)
 800a2bc:	21b5      	movs	r1, #181	; 0xb5
 800a2be:	f001 f883 	bl	800b3c8 <__assert_func>
 800a2c2:	6922      	ldr	r2, [r4, #16]
 800a2c4:	3202      	adds	r2, #2
 800a2c6:	f104 010c 	add.w	r1, r4, #12
 800a2ca:	0092      	lsls	r2, r2, #2
 800a2cc:	300c      	adds	r0, #12
 800a2ce:	f7ff ff4f 	bl	800a170 <memcpy>
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7ff ffa5 	bl	800a224 <_Bfree>
 800a2da:	4644      	mov	r4, r8
 800a2dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2e0:	3501      	adds	r5, #1
 800a2e2:	615e      	str	r6, [r3, #20]
 800a2e4:	6125      	str	r5, [r4, #16]
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ec:	0800ce52 	.word	0x0800ce52
 800a2f0:	0800ce63 	.word	0x0800ce63

0800a2f4 <__hi0bits>:
 800a2f4:	0c03      	lsrs	r3, r0, #16
 800a2f6:	041b      	lsls	r3, r3, #16
 800a2f8:	b9d3      	cbnz	r3, 800a330 <__hi0bits+0x3c>
 800a2fa:	0400      	lsls	r0, r0, #16
 800a2fc:	2310      	movs	r3, #16
 800a2fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a302:	bf04      	itt	eq
 800a304:	0200      	lsleq	r0, r0, #8
 800a306:	3308      	addeq	r3, #8
 800a308:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a30c:	bf04      	itt	eq
 800a30e:	0100      	lsleq	r0, r0, #4
 800a310:	3304      	addeq	r3, #4
 800a312:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a316:	bf04      	itt	eq
 800a318:	0080      	lsleq	r0, r0, #2
 800a31a:	3302      	addeq	r3, #2
 800a31c:	2800      	cmp	r0, #0
 800a31e:	db05      	blt.n	800a32c <__hi0bits+0x38>
 800a320:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a324:	f103 0301 	add.w	r3, r3, #1
 800a328:	bf08      	it	eq
 800a32a:	2320      	moveq	r3, #32
 800a32c:	4618      	mov	r0, r3
 800a32e:	4770      	bx	lr
 800a330:	2300      	movs	r3, #0
 800a332:	e7e4      	b.n	800a2fe <__hi0bits+0xa>

0800a334 <__lo0bits>:
 800a334:	6803      	ldr	r3, [r0, #0]
 800a336:	f013 0207 	ands.w	r2, r3, #7
 800a33a:	4601      	mov	r1, r0
 800a33c:	d00b      	beq.n	800a356 <__lo0bits+0x22>
 800a33e:	07da      	lsls	r2, r3, #31
 800a340:	d423      	bmi.n	800a38a <__lo0bits+0x56>
 800a342:	0798      	lsls	r0, r3, #30
 800a344:	bf49      	itett	mi
 800a346:	085b      	lsrmi	r3, r3, #1
 800a348:	089b      	lsrpl	r3, r3, #2
 800a34a:	2001      	movmi	r0, #1
 800a34c:	600b      	strmi	r3, [r1, #0]
 800a34e:	bf5c      	itt	pl
 800a350:	600b      	strpl	r3, [r1, #0]
 800a352:	2002      	movpl	r0, #2
 800a354:	4770      	bx	lr
 800a356:	b298      	uxth	r0, r3
 800a358:	b9a8      	cbnz	r0, 800a386 <__lo0bits+0x52>
 800a35a:	0c1b      	lsrs	r3, r3, #16
 800a35c:	2010      	movs	r0, #16
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	b90a      	cbnz	r2, 800a366 <__lo0bits+0x32>
 800a362:	3008      	adds	r0, #8
 800a364:	0a1b      	lsrs	r3, r3, #8
 800a366:	071a      	lsls	r2, r3, #28
 800a368:	bf04      	itt	eq
 800a36a:	091b      	lsreq	r3, r3, #4
 800a36c:	3004      	addeq	r0, #4
 800a36e:	079a      	lsls	r2, r3, #30
 800a370:	bf04      	itt	eq
 800a372:	089b      	lsreq	r3, r3, #2
 800a374:	3002      	addeq	r0, #2
 800a376:	07da      	lsls	r2, r3, #31
 800a378:	d403      	bmi.n	800a382 <__lo0bits+0x4e>
 800a37a:	085b      	lsrs	r3, r3, #1
 800a37c:	f100 0001 	add.w	r0, r0, #1
 800a380:	d005      	beq.n	800a38e <__lo0bits+0x5a>
 800a382:	600b      	str	r3, [r1, #0]
 800a384:	4770      	bx	lr
 800a386:	4610      	mov	r0, r2
 800a388:	e7e9      	b.n	800a35e <__lo0bits+0x2a>
 800a38a:	2000      	movs	r0, #0
 800a38c:	4770      	bx	lr
 800a38e:	2020      	movs	r0, #32
 800a390:	4770      	bx	lr
	...

0800a394 <__i2b>:
 800a394:	b510      	push	{r4, lr}
 800a396:	460c      	mov	r4, r1
 800a398:	2101      	movs	r1, #1
 800a39a:	f7ff ff03 	bl	800a1a4 <_Balloc>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	b928      	cbnz	r0, 800a3ae <__i2b+0x1a>
 800a3a2:	4b05      	ldr	r3, [pc, #20]	; (800a3b8 <__i2b+0x24>)
 800a3a4:	4805      	ldr	r0, [pc, #20]	; (800a3bc <__i2b+0x28>)
 800a3a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3aa:	f001 f80d 	bl	800b3c8 <__assert_func>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	6144      	str	r4, [r0, #20]
 800a3b2:	6103      	str	r3, [r0, #16]
 800a3b4:	bd10      	pop	{r4, pc}
 800a3b6:	bf00      	nop
 800a3b8:	0800ce52 	.word	0x0800ce52
 800a3bc:	0800ce63 	.word	0x0800ce63

0800a3c0 <__multiply>:
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	4691      	mov	r9, r2
 800a3c6:	690a      	ldr	r2, [r1, #16]
 800a3c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	bfb8      	it	lt
 800a3d0:	460b      	movlt	r3, r1
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	bfbc      	itt	lt
 800a3d6:	464c      	movlt	r4, r9
 800a3d8:	4699      	movlt	r9, r3
 800a3da:	6927      	ldr	r7, [r4, #16]
 800a3dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3e0:	68a3      	ldr	r3, [r4, #8]
 800a3e2:	6861      	ldr	r1, [r4, #4]
 800a3e4:	eb07 060a 	add.w	r6, r7, sl
 800a3e8:	42b3      	cmp	r3, r6
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	bfb8      	it	lt
 800a3ee:	3101      	addlt	r1, #1
 800a3f0:	f7ff fed8 	bl	800a1a4 <_Balloc>
 800a3f4:	b930      	cbnz	r0, 800a404 <__multiply+0x44>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	4b44      	ldr	r3, [pc, #272]	; (800a50c <__multiply+0x14c>)
 800a3fa:	4845      	ldr	r0, [pc, #276]	; (800a510 <__multiply+0x150>)
 800a3fc:	f240 115d 	movw	r1, #349	; 0x15d
 800a400:	f000 ffe2 	bl	800b3c8 <__assert_func>
 800a404:	f100 0514 	add.w	r5, r0, #20
 800a408:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a40c:	462b      	mov	r3, r5
 800a40e:	2200      	movs	r2, #0
 800a410:	4543      	cmp	r3, r8
 800a412:	d321      	bcc.n	800a458 <__multiply+0x98>
 800a414:	f104 0314 	add.w	r3, r4, #20
 800a418:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a41c:	f109 0314 	add.w	r3, r9, #20
 800a420:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a424:	9202      	str	r2, [sp, #8]
 800a426:	1b3a      	subs	r2, r7, r4
 800a428:	3a15      	subs	r2, #21
 800a42a:	f022 0203 	bic.w	r2, r2, #3
 800a42e:	3204      	adds	r2, #4
 800a430:	f104 0115 	add.w	r1, r4, #21
 800a434:	428f      	cmp	r7, r1
 800a436:	bf38      	it	cc
 800a438:	2204      	movcc	r2, #4
 800a43a:	9201      	str	r2, [sp, #4]
 800a43c:	9a02      	ldr	r2, [sp, #8]
 800a43e:	9303      	str	r3, [sp, #12]
 800a440:	429a      	cmp	r2, r3
 800a442:	d80c      	bhi.n	800a45e <__multiply+0x9e>
 800a444:	2e00      	cmp	r6, #0
 800a446:	dd03      	ble.n	800a450 <__multiply+0x90>
 800a448:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d05a      	beq.n	800a506 <__multiply+0x146>
 800a450:	6106      	str	r6, [r0, #16]
 800a452:	b005      	add	sp, #20
 800a454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a458:	f843 2b04 	str.w	r2, [r3], #4
 800a45c:	e7d8      	b.n	800a410 <__multiply+0x50>
 800a45e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a462:	f1ba 0f00 	cmp.w	sl, #0
 800a466:	d024      	beq.n	800a4b2 <__multiply+0xf2>
 800a468:	f104 0e14 	add.w	lr, r4, #20
 800a46c:	46a9      	mov	r9, r5
 800a46e:	f04f 0c00 	mov.w	ip, #0
 800a472:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a476:	f8d9 1000 	ldr.w	r1, [r9]
 800a47a:	fa1f fb82 	uxth.w	fp, r2
 800a47e:	b289      	uxth	r1, r1
 800a480:	fb0a 110b 	mla	r1, sl, fp, r1
 800a484:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a488:	f8d9 2000 	ldr.w	r2, [r9]
 800a48c:	4461      	add	r1, ip
 800a48e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a492:	fb0a c20b 	mla	r2, sl, fp, ip
 800a496:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a49a:	b289      	uxth	r1, r1
 800a49c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4a0:	4577      	cmp	r7, lr
 800a4a2:	f849 1b04 	str.w	r1, [r9], #4
 800a4a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4aa:	d8e2      	bhi.n	800a472 <__multiply+0xb2>
 800a4ac:	9a01      	ldr	r2, [sp, #4]
 800a4ae:	f845 c002 	str.w	ip, [r5, r2]
 800a4b2:	9a03      	ldr	r2, [sp, #12]
 800a4b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	f1b9 0f00 	cmp.w	r9, #0
 800a4be:	d020      	beq.n	800a502 <__multiply+0x142>
 800a4c0:	6829      	ldr	r1, [r5, #0]
 800a4c2:	f104 0c14 	add.w	ip, r4, #20
 800a4c6:	46ae      	mov	lr, r5
 800a4c8:	f04f 0a00 	mov.w	sl, #0
 800a4cc:	f8bc b000 	ldrh.w	fp, [ip]
 800a4d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4d4:	fb09 220b 	mla	r2, r9, fp, r2
 800a4d8:	4492      	add	sl, r2
 800a4da:	b289      	uxth	r1, r1
 800a4dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4e0:	f84e 1b04 	str.w	r1, [lr], #4
 800a4e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4e8:	f8be 1000 	ldrh.w	r1, [lr]
 800a4ec:	0c12      	lsrs	r2, r2, #16
 800a4ee:	fb09 1102 	mla	r1, r9, r2, r1
 800a4f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4f6:	4567      	cmp	r7, ip
 800a4f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4fc:	d8e6      	bhi.n	800a4cc <__multiply+0x10c>
 800a4fe:	9a01      	ldr	r2, [sp, #4]
 800a500:	50a9      	str	r1, [r5, r2]
 800a502:	3504      	adds	r5, #4
 800a504:	e79a      	b.n	800a43c <__multiply+0x7c>
 800a506:	3e01      	subs	r6, #1
 800a508:	e79c      	b.n	800a444 <__multiply+0x84>
 800a50a:	bf00      	nop
 800a50c:	0800ce52 	.word	0x0800ce52
 800a510:	0800ce63 	.word	0x0800ce63

0800a514 <__pow5mult>:
 800a514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a518:	4615      	mov	r5, r2
 800a51a:	f012 0203 	ands.w	r2, r2, #3
 800a51e:	4606      	mov	r6, r0
 800a520:	460f      	mov	r7, r1
 800a522:	d007      	beq.n	800a534 <__pow5mult+0x20>
 800a524:	4c25      	ldr	r4, [pc, #148]	; (800a5bc <__pow5mult+0xa8>)
 800a526:	3a01      	subs	r2, #1
 800a528:	2300      	movs	r3, #0
 800a52a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a52e:	f7ff fe9b 	bl	800a268 <__multadd>
 800a532:	4607      	mov	r7, r0
 800a534:	10ad      	asrs	r5, r5, #2
 800a536:	d03d      	beq.n	800a5b4 <__pow5mult+0xa0>
 800a538:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a53a:	b97c      	cbnz	r4, 800a55c <__pow5mult+0x48>
 800a53c:	2010      	movs	r0, #16
 800a53e:	f7fe f8ab 	bl	8008698 <malloc>
 800a542:	4602      	mov	r2, r0
 800a544:	6270      	str	r0, [r6, #36]	; 0x24
 800a546:	b928      	cbnz	r0, 800a554 <__pow5mult+0x40>
 800a548:	4b1d      	ldr	r3, [pc, #116]	; (800a5c0 <__pow5mult+0xac>)
 800a54a:	481e      	ldr	r0, [pc, #120]	; (800a5c4 <__pow5mult+0xb0>)
 800a54c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a550:	f000 ff3a 	bl	800b3c8 <__assert_func>
 800a554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a558:	6004      	str	r4, [r0, #0]
 800a55a:	60c4      	str	r4, [r0, #12]
 800a55c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a564:	b94c      	cbnz	r4, 800a57a <__pow5mult+0x66>
 800a566:	f240 2171 	movw	r1, #625	; 0x271
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7ff ff12 	bl	800a394 <__i2b>
 800a570:	2300      	movs	r3, #0
 800a572:	f8c8 0008 	str.w	r0, [r8, #8]
 800a576:	4604      	mov	r4, r0
 800a578:	6003      	str	r3, [r0, #0]
 800a57a:	f04f 0900 	mov.w	r9, #0
 800a57e:	07eb      	lsls	r3, r5, #31
 800a580:	d50a      	bpl.n	800a598 <__pow5mult+0x84>
 800a582:	4639      	mov	r1, r7
 800a584:	4622      	mov	r2, r4
 800a586:	4630      	mov	r0, r6
 800a588:	f7ff ff1a 	bl	800a3c0 <__multiply>
 800a58c:	4639      	mov	r1, r7
 800a58e:	4680      	mov	r8, r0
 800a590:	4630      	mov	r0, r6
 800a592:	f7ff fe47 	bl	800a224 <_Bfree>
 800a596:	4647      	mov	r7, r8
 800a598:	106d      	asrs	r5, r5, #1
 800a59a:	d00b      	beq.n	800a5b4 <__pow5mult+0xa0>
 800a59c:	6820      	ldr	r0, [r4, #0]
 800a59e:	b938      	cbnz	r0, 800a5b0 <__pow5mult+0x9c>
 800a5a0:	4622      	mov	r2, r4
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f7ff ff0b 	bl	800a3c0 <__multiply>
 800a5aa:	6020      	str	r0, [r4, #0]
 800a5ac:	f8c0 9000 	str.w	r9, [r0]
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	e7e4      	b.n	800a57e <__pow5mult+0x6a>
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ba:	bf00      	nop
 800a5bc:	0800cfb0 	.word	0x0800cfb0
 800a5c0:	0800cde0 	.word	0x0800cde0
 800a5c4:	0800ce63 	.word	0x0800ce63

0800a5c8 <__lshift>:
 800a5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	6849      	ldr	r1, [r1, #4]
 800a5d0:	6923      	ldr	r3, [r4, #16]
 800a5d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5d6:	68a3      	ldr	r3, [r4, #8]
 800a5d8:	4607      	mov	r7, r0
 800a5da:	4691      	mov	r9, r2
 800a5dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5e0:	f108 0601 	add.w	r6, r8, #1
 800a5e4:	42b3      	cmp	r3, r6
 800a5e6:	db0b      	blt.n	800a600 <__lshift+0x38>
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f7ff fddb 	bl	800a1a4 <_Balloc>
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	b948      	cbnz	r0, 800a606 <__lshift+0x3e>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	4b2a      	ldr	r3, [pc, #168]	; (800a6a0 <__lshift+0xd8>)
 800a5f6:	482b      	ldr	r0, [pc, #172]	; (800a6a4 <__lshift+0xdc>)
 800a5f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5fc:	f000 fee4 	bl	800b3c8 <__assert_func>
 800a600:	3101      	adds	r1, #1
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	e7ee      	b.n	800a5e4 <__lshift+0x1c>
 800a606:	2300      	movs	r3, #0
 800a608:	f100 0114 	add.w	r1, r0, #20
 800a60c:	f100 0210 	add.w	r2, r0, #16
 800a610:	4618      	mov	r0, r3
 800a612:	4553      	cmp	r3, sl
 800a614:	db37      	blt.n	800a686 <__lshift+0xbe>
 800a616:	6920      	ldr	r0, [r4, #16]
 800a618:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a61c:	f104 0314 	add.w	r3, r4, #20
 800a620:	f019 091f 	ands.w	r9, r9, #31
 800a624:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a628:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a62c:	d02f      	beq.n	800a68e <__lshift+0xc6>
 800a62e:	f1c9 0e20 	rsb	lr, r9, #32
 800a632:	468a      	mov	sl, r1
 800a634:	f04f 0c00 	mov.w	ip, #0
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	fa02 f209 	lsl.w	r2, r2, r9
 800a63e:	ea42 020c 	orr.w	r2, r2, ip
 800a642:	f84a 2b04 	str.w	r2, [sl], #4
 800a646:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64a:	4298      	cmp	r0, r3
 800a64c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a650:	d8f2      	bhi.n	800a638 <__lshift+0x70>
 800a652:	1b03      	subs	r3, r0, r4
 800a654:	3b15      	subs	r3, #21
 800a656:	f023 0303 	bic.w	r3, r3, #3
 800a65a:	3304      	adds	r3, #4
 800a65c:	f104 0215 	add.w	r2, r4, #21
 800a660:	4290      	cmp	r0, r2
 800a662:	bf38      	it	cc
 800a664:	2304      	movcc	r3, #4
 800a666:	f841 c003 	str.w	ip, [r1, r3]
 800a66a:	f1bc 0f00 	cmp.w	ip, #0
 800a66e:	d001      	beq.n	800a674 <__lshift+0xac>
 800a670:	f108 0602 	add.w	r6, r8, #2
 800a674:	3e01      	subs	r6, #1
 800a676:	4638      	mov	r0, r7
 800a678:	612e      	str	r6, [r5, #16]
 800a67a:	4621      	mov	r1, r4
 800a67c:	f7ff fdd2 	bl	800a224 <_Bfree>
 800a680:	4628      	mov	r0, r5
 800a682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a686:	f842 0f04 	str.w	r0, [r2, #4]!
 800a68a:	3301      	adds	r3, #1
 800a68c:	e7c1      	b.n	800a612 <__lshift+0x4a>
 800a68e:	3904      	subs	r1, #4
 800a690:	f853 2b04 	ldr.w	r2, [r3], #4
 800a694:	f841 2f04 	str.w	r2, [r1, #4]!
 800a698:	4298      	cmp	r0, r3
 800a69a:	d8f9      	bhi.n	800a690 <__lshift+0xc8>
 800a69c:	e7ea      	b.n	800a674 <__lshift+0xac>
 800a69e:	bf00      	nop
 800a6a0:	0800ce52 	.word	0x0800ce52
 800a6a4:	0800ce63 	.word	0x0800ce63

0800a6a8 <__mcmp>:
 800a6a8:	b530      	push	{r4, r5, lr}
 800a6aa:	6902      	ldr	r2, [r0, #16]
 800a6ac:	690c      	ldr	r4, [r1, #16]
 800a6ae:	1b12      	subs	r2, r2, r4
 800a6b0:	d10e      	bne.n	800a6d0 <__mcmp+0x28>
 800a6b2:	f100 0314 	add.w	r3, r0, #20
 800a6b6:	3114      	adds	r1, #20
 800a6b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6c8:	42a5      	cmp	r5, r4
 800a6ca:	d003      	beq.n	800a6d4 <__mcmp+0x2c>
 800a6cc:	d305      	bcc.n	800a6da <__mcmp+0x32>
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	bd30      	pop	{r4, r5, pc}
 800a6d4:	4283      	cmp	r3, r0
 800a6d6:	d3f3      	bcc.n	800a6c0 <__mcmp+0x18>
 800a6d8:	e7fa      	b.n	800a6d0 <__mcmp+0x28>
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295
 800a6de:	e7f7      	b.n	800a6d0 <__mcmp+0x28>

0800a6e0 <__mdiff>:
 800a6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	4690      	mov	r8, r2
 800a6ee:	f7ff ffdb 	bl	800a6a8 <__mcmp>
 800a6f2:	1e05      	subs	r5, r0, #0
 800a6f4:	d110      	bne.n	800a718 <__mdiff+0x38>
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	f7ff fd53 	bl	800a1a4 <_Balloc>
 800a6fe:	b930      	cbnz	r0, 800a70e <__mdiff+0x2e>
 800a700:	4b3a      	ldr	r3, [pc, #232]	; (800a7ec <__mdiff+0x10c>)
 800a702:	4602      	mov	r2, r0
 800a704:	f240 2132 	movw	r1, #562	; 0x232
 800a708:	4839      	ldr	r0, [pc, #228]	; (800a7f0 <__mdiff+0x110>)
 800a70a:	f000 fe5d 	bl	800b3c8 <__assert_func>
 800a70e:	2301      	movs	r3, #1
 800a710:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	bfa4      	itt	ge
 800a71a:	4643      	movge	r3, r8
 800a71c:	46a0      	movge	r8, r4
 800a71e:	4630      	mov	r0, r6
 800a720:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a724:	bfa6      	itte	ge
 800a726:	461c      	movge	r4, r3
 800a728:	2500      	movge	r5, #0
 800a72a:	2501      	movlt	r5, #1
 800a72c:	f7ff fd3a 	bl	800a1a4 <_Balloc>
 800a730:	b920      	cbnz	r0, 800a73c <__mdiff+0x5c>
 800a732:	4b2e      	ldr	r3, [pc, #184]	; (800a7ec <__mdiff+0x10c>)
 800a734:	4602      	mov	r2, r0
 800a736:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a73a:	e7e5      	b.n	800a708 <__mdiff+0x28>
 800a73c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a740:	6926      	ldr	r6, [r4, #16]
 800a742:	60c5      	str	r5, [r0, #12]
 800a744:	f104 0914 	add.w	r9, r4, #20
 800a748:	f108 0514 	add.w	r5, r8, #20
 800a74c:	f100 0e14 	add.w	lr, r0, #20
 800a750:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a754:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a758:	f108 0210 	add.w	r2, r8, #16
 800a75c:	46f2      	mov	sl, lr
 800a75e:	2100      	movs	r1, #0
 800a760:	f859 3b04 	ldr.w	r3, [r9], #4
 800a764:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a768:	fa1f f883 	uxth.w	r8, r3
 800a76c:	fa11 f18b 	uxtah	r1, r1, fp
 800a770:	0c1b      	lsrs	r3, r3, #16
 800a772:	eba1 0808 	sub.w	r8, r1, r8
 800a776:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a77a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a77e:	fa1f f888 	uxth.w	r8, r8
 800a782:	1419      	asrs	r1, r3, #16
 800a784:	454e      	cmp	r6, r9
 800a786:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a78a:	f84a 3b04 	str.w	r3, [sl], #4
 800a78e:	d8e7      	bhi.n	800a760 <__mdiff+0x80>
 800a790:	1b33      	subs	r3, r6, r4
 800a792:	3b15      	subs	r3, #21
 800a794:	f023 0303 	bic.w	r3, r3, #3
 800a798:	3304      	adds	r3, #4
 800a79a:	3415      	adds	r4, #21
 800a79c:	42a6      	cmp	r6, r4
 800a79e:	bf38      	it	cc
 800a7a0:	2304      	movcc	r3, #4
 800a7a2:	441d      	add	r5, r3
 800a7a4:	4473      	add	r3, lr
 800a7a6:	469e      	mov	lr, r3
 800a7a8:	462e      	mov	r6, r5
 800a7aa:	4566      	cmp	r6, ip
 800a7ac:	d30e      	bcc.n	800a7cc <__mdiff+0xec>
 800a7ae:	f10c 0203 	add.w	r2, ip, #3
 800a7b2:	1b52      	subs	r2, r2, r5
 800a7b4:	f022 0203 	bic.w	r2, r2, #3
 800a7b8:	3d03      	subs	r5, #3
 800a7ba:	45ac      	cmp	ip, r5
 800a7bc:	bf38      	it	cc
 800a7be:	2200      	movcc	r2, #0
 800a7c0:	441a      	add	r2, r3
 800a7c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7c6:	b17b      	cbz	r3, 800a7e8 <__mdiff+0x108>
 800a7c8:	6107      	str	r7, [r0, #16]
 800a7ca:	e7a3      	b.n	800a714 <__mdiff+0x34>
 800a7cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7d0:	fa11 f288 	uxtah	r2, r1, r8
 800a7d4:	1414      	asrs	r4, r2, #16
 800a7d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7da:	b292      	uxth	r2, r2
 800a7dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7e0:	f84e 2b04 	str.w	r2, [lr], #4
 800a7e4:	1421      	asrs	r1, r4, #16
 800a7e6:	e7e0      	b.n	800a7aa <__mdiff+0xca>
 800a7e8:	3f01      	subs	r7, #1
 800a7ea:	e7ea      	b.n	800a7c2 <__mdiff+0xe2>
 800a7ec:	0800ce52 	.word	0x0800ce52
 800a7f0:	0800ce63 	.word	0x0800ce63

0800a7f4 <__d2b>:
 800a7f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7f8:	4689      	mov	r9, r1
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	ec57 6b10 	vmov	r6, r7, d0
 800a800:	4690      	mov	r8, r2
 800a802:	f7ff fccf 	bl	800a1a4 <_Balloc>
 800a806:	4604      	mov	r4, r0
 800a808:	b930      	cbnz	r0, 800a818 <__d2b+0x24>
 800a80a:	4602      	mov	r2, r0
 800a80c:	4b25      	ldr	r3, [pc, #148]	; (800a8a4 <__d2b+0xb0>)
 800a80e:	4826      	ldr	r0, [pc, #152]	; (800a8a8 <__d2b+0xb4>)
 800a810:	f240 310a 	movw	r1, #778	; 0x30a
 800a814:	f000 fdd8 	bl	800b3c8 <__assert_func>
 800a818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a81c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a820:	bb35      	cbnz	r5, 800a870 <__d2b+0x7c>
 800a822:	2e00      	cmp	r6, #0
 800a824:	9301      	str	r3, [sp, #4]
 800a826:	d028      	beq.n	800a87a <__d2b+0x86>
 800a828:	4668      	mov	r0, sp
 800a82a:	9600      	str	r6, [sp, #0]
 800a82c:	f7ff fd82 	bl	800a334 <__lo0bits>
 800a830:	9900      	ldr	r1, [sp, #0]
 800a832:	b300      	cbz	r0, 800a876 <__d2b+0x82>
 800a834:	9a01      	ldr	r2, [sp, #4]
 800a836:	f1c0 0320 	rsb	r3, r0, #32
 800a83a:	fa02 f303 	lsl.w	r3, r2, r3
 800a83e:	430b      	orrs	r3, r1
 800a840:	40c2      	lsrs	r2, r0
 800a842:	6163      	str	r3, [r4, #20]
 800a844:	9201      	str	r2, [sp, #4]
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	61a3      	str	r3, [r4, #24]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	bf14      	ite	ne
 800a84e:	2202      	movne	r2, #2
 800a850:	2201      	moveq	r2, #1
 800a852:	6122      	str	r2, [r4, #16]
 800a854:	b1d5      	cbz	r5, 800a88c <__d2b+0x98>
 800a856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a85a:	4405      	add	r5, r0
 800a85c:	f8c9 5000 	str.w	r5, [r9]
 800a860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a864:	f8c8 0000 	str.w	r0, [r8]
 800a868:	4620      	mov	r0, r4
 800a86a:	b003      	add	sp, #12
 800a86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a874:	e7d5      	b.n	800a822 <__d2b+0x2e>
 800a876:	6161      	str	r1, [r4, #20]
 800a878:	e7e5      	b.n	800a846 <__d2b+0x52>
 800a87a:	a801      	add	r0, sp, #4
 800a87c:	f7ff fd5a 	bl	800a334 <__lo0bits>
 800a880:	9b01      	ldr	r3, [sp, #4]
 800a882:	6163      	str	r3, [r4, #20]
 800a884:	2201      	movs	r2, #1
 800a886:	6122      	str	r2, [r4, #16]
 800a888:	3020      	adds	r0, #32
 800a88a:	e7e3      	b.n	800a854 <__d2b+0x60>
 800a88c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a894:	f8c9 0000 	str.w	r0, [r9]
 800a898:	6918      	ldr	r0, [r3, #16]
 800a89a:	f7ff fd2b 	bl	800a2f4 <__hi0bits>
 800a89e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8a2:	e7df      	b.n	800a864 <__d2b+0x70>
 800a8a4:	0800ce52 	.word	0x0800ce52
 800a8a8:	0800ce63 	.word	0x0800ce63

0800a8ac <_calloc_r>:
 800a8ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ae:	fba1 2402 	umull	r2, r4, r1, r2
 800a8b2:	b94c      	cbnz	r4, 800a8c8 <_calloc_r+0x1c>
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	9201      	str	r2, [sp, #4]
 800a8b8:	f7fd ff72 	bl	80087a0 <_malloc_r>
 800a8bc:	9a01      	ldr	r2, [sp, #4]
 800a8be:	4605      	mov	r5, r0
 800a8c0:	b930      	cbnz	r0, 800a8d0 <_calloc_r+0x24>
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	b003      	add	sp, #12
 800a8c6:	bd30      	pop	{r4, r5, pc}
 800a8c8:	220c      	movs	r2, #12
 800a8ca:	6002      	str	r2, [r0, #0]
 800a8cc:	2500      	movs	r5, #0
 800a8ce:	e7f8      	b.n	800a8c2 <_calloc_r+0x16>
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f7fd fef1 	bl	80086b8 <memset>
 800a8d6:	e7f4      	b.n	800a8c2 <_calloc_r+0x16>

0800a8d8 <__ssputs_r>:
 800a8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8dc:	688e      	ldr	r6, [r1, #8]
 800a8de:	429e      	cmp	r6, r3
 800a8e0:	4682      	mov	sl, r0
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	4690      	mov	r8, r2
 800a8e6:	461f      	mov	r7, r3
 800a8e8:	d838      	bhi.n	800a95c <__ssputs_r+0x84>
 800a8ea:	898a      	ldrh	r2, [r1, #12]
 800a8ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8f0:	d032      	beq.n	800a958 <__ssputs_r+0x80>
 800a8f2:	6825      	ldr	r5, [r4, #0]
 800a8f4:	6909      	ldr	r1, [r1, #16]
 800a8f6:	eba5 0901 	sub.w	r9, r5, r1
 800a8fa:	6965      	ldr	r5, [r4, #20]
 800a8fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a904:	3301      	adds	r3, #1
 800a906:	444b      	add	r3, r9
 800a908:	106d      	asrs	r5, r5, #1
 800a90a:	429d      	cmp	r5, r3
 800a90c:	bf38      	it	cc
 800a90e:	461d      	movcc	r5, r3
 800a910:	0553      	lsls	r3, r2, #21
 800a912:	d531      	bpl.n	800a978 <__ssputs_r+0xa0>
 800a914:	4629      	mov	r1, r5
 800a916:	f7fd ff43 	bl	80087a0 <_malloc_r>
 800a91a:	4606      	mov	r6, r0
 800a91c:	b950      	cbnz	r0, 800a934 <__ssputs_r+0x5c>
 800a91e:	230c      	movs	r3, #12
 800a920:	f8ca 3000 	str.w	r3, [sl]
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a92a:	81a3      	strh	r3, [r4, #12]
 800a92c:	f04f 30ff 	mov.w	r0, #4294967295
 800a930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a934:	6921      	ldr	r1, [r4, #16]
 800a936:	464a      	mov	r2, r9
 800a938:	f7ff fc1a 	bl	800a170 <memcpy>
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	6126      	str	r6, [r4, #16]
 800a94a:	6165      	str	r5, [r4, #20]
 800a94c:	444e      	add	r6, r9
 800a94e:	eba5 0509 	sub.w	r5, r5, r9
 800a952:	6026      	str	r6, [r4, #0]
 800a954:	60a5      	str	r5, [r4, #8]
 800a956:	463e      	mov	r6, r7
 800a958:	42be      	cmp	r6, r7
 800a95a:	d900      	bls.n	800a95e <__ssputs_r+0x86>
 800a95c:	463e      	mov	r6, r7
 800a95e:	6820      	ldr	r0, [r4, #0]
 800a960:	4632      	mov	r2, r6
 800a962:	4641      	mov	r1, r8
 800a964:	f000 ff2c 	bl	800b7c0 <memmove>
 800a968:	68a3      	ldr	r3, [r4, #8]
 800a96a:	1b9b      	subs	r3, r3, r6
 800a96c:	60a3      	str	r3, [r4, #8]
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	4433      	add	r3, r6
 800a972:	6023      	str	r3, [r4, #0]
 800a974:	2000      	movs	r0, #0
 800a976:	e7db      	b.n	800a930 <__ssputs_r+0x58>
 800a978:	462a      	mov	r2, r5
 800a97a:	f000 ff3b 	bl	800b7f4 <_realloc_r>
 800a97e:	4606      	mov	r6, r0
 800a980:	2800      	cmp	r0, #0
 800a982:	d1e1      	bne.n	800a948 <__ssputs_r+0x70>
 800a984:	6921      	ldr	r1, [r4, #16]
 800a986:	4650      	mov	r0, sl
 800a988:	f7fd fe9e 	bl	80086c8 <_free_r>
 800a98c:	e7c7      	b.n	800a91e <__ssputs_r+0x46>
	...

0800a990 <_svfiprintf_r>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	4698      	mov	r8, r3
 800a996:	898b      	ldrh	r3, [r1, #12]
 800a998:	061b      	lsls	r3, r3, #24
 800a99a:	b09d      	sub	sp, #116	; 0x74
 800a99c:	4607      	mov	r7, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	d50e      	bpl.n	800a9c2 <_svfiprintf_r+0x32>
 800a9a4:	690b      	ldr	r3, [r1, #16]
 800a9a6:	b963      	cbnz	r3, 800a9c2 <_svfiprintf_r+0x32>
 800a9a8:	2140      	movs	r1, #64	; 0x40
 800a9aa:	f7fd fef9 	bl	80087a0 <_malloc_r>
 800a9ae:	6028      	str	r0, [r5, #0]
 800a9b0:	6128      	str	r0, [r5, #16]
 800a9b2:	b920      	cbnz	r0, 800a9be <_svfiprintf_r+0x2e>
 800a9b4:	230c      	movs	r3, #12
 800a9b6:	603b      	str	r3, [r7, #0]
 800a9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9bc:	e0d1      	b.n	800ab62 <_svfiprintf_r+0x1d2>
 800a9be:	2340      	movs	r3, #64	; 0x40
 800a9c0:	616b      	str	r3, [r5, #20]
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c6:	2320      	movs	r3, #32
 800a9c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9d0:	2330      	movs	r3, #48	; 0x30
 800a9d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab7c <_svfiprintf_r+0x1ec>
 800a9d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9da:	f04f 0901 	mov.w	r9, #1
 800a9de:	4623      	mov	r3, r4
 800a9e0:	469a      	mov	sl, r3
 800a9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9e6:	b10a      	cbz	r2, 800a9ec <_svfiprintf_r+0x5c>
 800a9e8:	2a25      	cmp	r2, #37	; 0x25
 800a9ea:	d1f9      	bne.n	800a9e0 <_svfiprintf_r+0x50>
 800a9ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a9f0:	d00b      	beq.n	800aa0a <_svfiprintf_r+0x7a>
 800a9f2:	465b      	mov	r3, fp
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	f7ff ff6d 	bl	800a8d8 <__ssputs_r>
 800a9fe:	3001      	adds	r0, #1
 800aa00:	f000 80aa 	beq.w	800ab58 <_svfiprintf_r+0x1c8>
 800aa04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa06:	445a      	add	r2, fp
 800aa08:	9209      	str	r2, [sp, #36]	; 0x24
 800aa0a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 80a2 	beq.w	800ab58 <_svfiprintf_r+0x1c8>
 800aa14:	2300      	movs	r3, #0
 800aa16:	f04f 32ff 	mov.w	r2, #4294967295
 800aa1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa1e:	f10a 0a01 	add.w	sl, sl, #1
 800aa22:	9304      	str	r3, [sp, #16]
 800aa24:	9307      	str	r3, [sp, #28]
 800aa26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa2a:	931a      	str	r3, [sp, #104]	; 0x68
 800aa2c:	4654      	mov	r4, sl
 800aa2e:	2205      	movs	r2, #5
 800aa30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa34:	4851      	ldr	r0, [pc, #324]	; (800ab7c <_svfiprintf_r+0x1ec>)
 800aa36:	f7f5 fbeb 	bl	8000210 <memchr>
 800aa3a:	9a04      	ldr	r2, [sp, #16]
 800aa3c:	b9d8      	cbnz	r0, 800aa76 <_svfiprintf_r+0xe6>
 800aa3e:	06d0      	lsls	r0, r2, #27
 800aa40:	bf44      	itt	mi
 800aa42:	2320      	movmi	r3, #32
 800aa44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa48:	0711      	lsls	r1, r2, #28
 800aa4a:	bf44      	itt	mi
 800aa4c:	232b      	movmi	r3, #43	; 0x2b
 800aa4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa52:	f89a 3000 	ldrb.w	r3, [sl]
 800aa56:	2b2a      	cmp	r3, #42	; 0x2a
 800aa58:	d015      	beq.n	800aa86 <_svfiprintf_r+0xf6>
 800aa5a:	9a07      	ldr	r2, [sp, #28]
 800aa5c:	4654      	mov	r4, sl
 800aa5e:	2000      	movs	r0, #0
 800aa60:	f04f 0c0a 	mov.w	ip, #10
 800aa64:	4621      	mov	r1, r4
 800aa66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa6a:	3b30      	subs	r3, #48	; 0x30
 800aa6c:	2b09      	cmp	r3, #9
 800aa6e:	d94e      	bls.n	800ab0e <_svfiprintf_r+0x17e>
 800aa70:	b1b0      	cbz	r0, 800aaa0 <_svfiprintf_r+0x110>
 800aa72:	9207      	str	r2, [sp, #28]
 800aa74:	e014      	b.n	800aaa0 <_svfiprintf_r+0x110>
 800aa76:	eba0 0308 	sub.w	r3, r0, r8
 800aa7a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	9304      	str	r3, [sp, #16]
 800aa82:	46a2      	mov	sl, r4
 800aa84:	e7d2      	b.n	800aa2c <_svfiprintf_r+0x9c>
 800aa86:	9b03      	ldr	r3, [sp, #12]
 800aa88:	1d19      	adds	r1, r3, #4
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	9103      	str	r1, [sp, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	bfbb      	ittet	lt
 800aa92:	425b      	neglt	r3, r3
 800aa94:	f042 0202 	orrlt.w	r2, r2, #2
 800aa98:	9307      	strge	r3, [sp, #28]
 800aa9a:	9307      	strlt	r3, [sp, #28]
 800aa9c:	bfb8      	it	lt
 800aa9e:	9204      	strlt	r2, [sp, #16]
 800aaa0:	7823      	ldrb	r3, [r4, #0]
 800aaa2:	2b2e      	cmp	r3, #46	; 0x2e
 800aaa4:	d10c      	bne.n	800aac0 <_svfiprintf_r+0x130>
 800aaa6:	7863      	ldrb	r3, [r4, #1]
 800aaa8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaaa:	d135      	bne.n	800ab18 <_svfiprintf_r+0x188>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	1d1a      	adds	r2, r3, #4
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	9203      	str	r2, [sp, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	bfb8      	it	lt
 800aab8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aabc:	3402      	adds	r4, #2
 800aabe:	9305      	str	r3, [sp, #20]
 800aac0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab8c <_svfiprintf_r+0x1fc>
 800aac4:	7821      	ldrb	r1, [r4, #0]
 800aac6:	2203      	movs	r2, #3
 800aac8:	4650      	mov	r0, sl
 800aaca:	f7f5 fba1 	bl	8000210 <memchr>
 800aace:	b140      	cbz	r0, 800aae2 <_svfiprintf_r+0x152>
 800aad0:	2340      	movs	r3, #64	; 0x40
 800aad2:	eba0 000a 	sub.w	r0, r0, sl
 800aad6:	fa03 f000 	lsl.w	r0, r3, r0
 800aada:	9b04      	ldr	r3, [sp, #16]
 800aadc:	4303      	orrs	r3, r0
 800aade:	3401      	adds	r4, #1
 800aae0:	9304      	str	r3, [sp, #16]
 800aae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae6:	4826      	ldr	r0, [pc, #152]	; (800ab80 <_svfiprintf_r+0x1f0>)
 800aae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaec:	2206      	movs	r2, #6
 800aaee:	f7f5 fb8f 	bl	8000210 <memchr>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d038      	beq.n	800ab68 <_svfiprintf_r+0x1d8>
 800aaf6:	4b23      	ldr	r3, [pc, #140]	; (800ab84 <_svfiprintf_r+0x1f4>)
 800aaf8:	bb1b      	cbnz	r3, 800ab42 <_svfiprintf_r+0x1b2>
 800aafa:	9b03      	ldr	r3, [sp, #12]
 800aafc:	3307      	adds	r3, #7
 800aafe:	f023 0307 	bic.w	r3, r3, #7
 800ab02:	3308      	adds	r3, #8
 800ab04:	9303      	str	r3, [sp, #12]
 800ab06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab08:	4433      	add	r3, r6
 800ab0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab0c:	e767      	b.n	800a9de <_svfiprintf_r+0x4e>
 800ab0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab12:	460c      	mov	r4, r1
 800ab14:	2001      	movs	r0, #1
 800ab16:	e7a5      	b.n	800aa64 <_svfiprintf_r+0xd4>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	3401      	adds	r4, #1
 800ab1c:	9305      	str	r3, [sp, #20]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	f04f 0c0a 	mov.w	ip, #10
 800ab24:	4620      	mov	r0, r4
 800ab26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab2a:	3a30      	subs	r2, #48	; 0x30
 800ab2c:	2a09      	cmp	r2, #9
 800ab2e:	d903      	bls.n	800ab38 <_svfiprintf_r+0x1a8>
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d0c5      	beq.n	800aac0 <_svfiprintf_r+0x130>
 800ab34:	9105      	str	r1, [sp, #20]
 800ab36:	e7c3      	b.n	800aac0 <_svfiprintf_r+0x130>
 800ab38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e7f0      	b.n	800ab24 <_svfiprintf_r+0x194>
 800ab42:	ab03      	add	r3, sp, #12
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	462a      	mov	r2, r5
 800ab48:	4b0f      	ldr	r3, [pc, #60]	; (800ab88 <_svfiprintf_r+0x1f8>)
 800ab4a:	a904      	add	r1, sp, #16
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	f7fd ff3b 	bl	80089c8 <_printf_float>
 800ab52:	1c42      	adds	r2, r0, #1
 800ab54:	4606      	mov	r6, r0
 800ab56:	d1d6      	bne.n	800ab06 <_svfiprintf_r+0x176>
 800ab58:	89ab      	ldrh	r3, [r5, #12]
 800ab5a:	065b      	lsls	r3, r3, #25
 800ab5c:	f53f af2c 	bmi.w	800a9b8 <_svfiprintf_r+0x28>
 800ab60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab62:	b01d      	add	sp, #116	; 0x74
 800ab64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab68:	ab03      	add	r3, sp, #12
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	462a      	mov	r2, r5
 800ab6e:	4b06      	ldr	r3, [pc, #24]	; (800ab88 <_svfiprintf_r+0x1f8>)
 800ab70:	a904      	add	r1, sp, #16
 800ab72:	4638      	mov	r0, r7
 800ab74:	f7fe f9cc 	bl	8008f10 <_printf_i>
 800ab78:	e7eb      	b.n	800ab52 <_svfiprintf_r+0x1c2>
 800ab7a:	bf00      	nop
 800ab7c:	0800cfbc 	.word	0x0800cfbc
 800ab80:	0800cfc6 	.word	0x0800cfc6
 800ab84:	080089c9 	.word	0x080089c9
 800ab88:	0800a8d9 	.word	0x0800a8d9
 800ab8c:	0800cfc2 	.word	0x0800cfc2

0800ab90 <_sungetc_r>:
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	1c4b      	adds	r3, r1, #1
 800ab94:	4614      	mov	r4, r2
 800ab96:	d103      	bne.n	800aba0 <_sungetc_r+0x10>
 800ab98:	f04f 35ff 	mov.w	r5, #4294967295
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	8993      	ldrh	r3, [r2, #12]
 800aba2:	f023 0320 	bic.w	r3, r3, #32
 800aba6:	8193      	strh	r3, [r2, #12]
 800aba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abaa:	6852      	ldr	r2, [r2, #4]
 800abac:	b2cd      	uxtb	r5, r1
 800abae:	b18b      	cbz	r3, 800abd4 <_sungetc_r+0x44>
 800abb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800abb2:	4293      	cmp	r3, r2
 800abb4:	dd08      	ble.n	800abc8 <_sungetc_r+0x38>
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	1e5a      	subs	r2, r3, #1
 800abba:	6022      	str	r2, [r4, #0]
 800abbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800abc0:	6863      	ldr	r3, [r4, #4]
 800abc2:	3301      	adds	r3, #1
 800abc4:	6063      	str	r3, [r4, #4]
 800abc6:	e7e9      	b.n	800ab9c <_sungetc_r+0xc>
 800abc8:	4621      	mov	r1, r4
 800abca:	f000 fbc3 	bl	800b354 <__submore>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d0f1      	beq.n	800abb6 <_sungetc_r+0x26>
 800abd2:	e7e1      	b.n	800ab98 <_sungetc_r+0x8>
 800abd4:	6921      	ldr	r1, [r4, #16]
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	b151      	cbz	r1, 800abf0 <_sungetc_r+0x60>
 800abda:	4299      	cmp	r1, r3
 800abdc:	d208      	bcs.n	800abf0 <_sungetc_r+0x60>
 800abde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800abe2:	42a9      	cmp	r1, r5
 800abe4:	d104      	bne.n	800abf0 <_sungetc_r+0x60>
 800abe6:	3b01      	subs	r3, #1
 800abe8:	3201      	adds	r2, #1
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	6062      	str	r2, [r4, #4]
 800abee:	e7d5      	b.n	800ab9c <_sungetc_r+0xc>
 800abf0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800abf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abf8:	6363      	str	r3, [r4, #52]	; 0x34
 800abfa:	2303      	movs	r3, #3
 800abfc:	63a3      	str	r3, [r4, #56]	; 0x38
 800abfe:	4623      	mov	r3, r4
 800ac00:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	2301      	movs	r3, #1
 800ac08:	e7dc      	b.n	800abc4 <_sungetc_r+0x34>

0800ac0a <__ssrefill_r>:
 800ac0a:	b510      	push	{r4, lr}
 800ac0c:	460c      	mov	r4, r1
 800ac0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ac10:	b169      	cbz	r1, 800ac2e <__ssrefill_r+0x24>
 800ac12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac16:	4299      	cmp	r1, r3
 800ac18:	d001      	beq.n	800ac1e <__ssrefill_r+0x14>
 800ac1a:	f7fd fd55 	bl	80086c8 <_free_r>
 800ac1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac20:	6063      	str	r3, [r4, #4]
 800ac22:	2000      	movs	r0, #0
 800ac24:	6360      	str	r0, [r4, #52]	; 0x34
 800ac26:	b113      	cbz	r3, 800ac2e <__ssrefill_r+0x24>
 800ac28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ac2a:	6023      	str	r3, [r4, #0]
 800ac2c:	bd10      	pop	{r4, pc}
 800ac2e:	6923      	ldr	r3, [r4, #16]
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	2300      	movs	r3, #0
 800ac34:	6063      	str	r3, [r4, #4]
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	f043 0320 	orr.w	r3, r3, #32
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac42:	e7f3      	b.n	800ac2c <__ssrefill_r+0x22>

0800ac44 <__ssvfiscanf_r>:
 800ac44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	460c      	mov	r4, r1
 800ac4a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ac4e:	2100      	movs	r1, #0
 800ac50:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ac54:	49a6      	ldr	r1, [pc, #664]	; (800aef0 <__ssvfiscanf_r+0x2ac>)
 800ac56:	91a0      	str	r1, [sp, #640]	; 0x280
 800ac58:	f10d 0804 	add.w	r8, sp, #4
 800ac5c:	49a5      	ldr	r1, [pc, #660]	; (800aef4 <__ssvfiscanf_r+0x2b0>)
 800ac5e:	4fa6      	ldr	r7, [pc, #664]	; (800aef8 <__ssvfiscanf_r+0x2b4>)
 800ac60:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800aefc <__ssvfiscanf_r+0x2b8>
 800ac64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ac68:	4606      	mov	r6, r0
 800ac6a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	7813      	ldrb	r3, [r2, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 815a 	beq.w	800af2a <__ssvfiscanf_r+0x2e6>
 800ac76:	5dd9      	ldrb	r1, [r3, r7]
 800ac78:	f011 0108 	ands.w	r1, r1, #8
 800ac7c:	f102 0501 	add.w	r5, r2, #1
 800ac80:	d019      	beq.n	800acb6 <__ssvfiscanf_r+0x72>
 800ac82:	6863      	ldr	r3, [r4, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	dd0f      	ble.n	800aca8 <__ssvfiscanf_r+0x64>
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	781a      	ldrb	r2, [r3, #0]
 800ac8c:	5cba      	ldrb	r2, [r7, r2]
 800ac8e:	0712      	lsls	r2, r2, #28
 800ac90:	d401      	bmi.n	800ac96 <__ssvfiscanf_r+0x52>
 800ac92:	462a      	mov	r2, r5
 800ac94:	e7eb      	b.n	800ac6e <__ssvfiscanf_r+0x2a>
 800ac96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ac98:	3201      	adds	r2, #1
 800ac9a:	9245      	str	r2, [sp, #276]	; 0x114
 800ac9c:	6862      	ldr	r2, [r4, #4]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	3a01      	subs	r2, #1
 800aca2:	6062      	str	r2, [r4, #4]
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	e7ec      	b.n	800ac82 <__ssvfiscanf_r+0x3e>
 800aca8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800acaa:	4621      	mov	r1, r4
 800acac:	4630      	mov	r0, r6
 800acae:	4798      	blx	r3
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d0e9      	beq.n	800ac88 <__ssvfiscanf_r+0x44>
 800acb4:	e7ed      	b.n	800ac92 <__ssvfiscanf_r+0x4e>
 800acb6:	2b25      	cmp	r3, #37	; 0x25
 800acb8:	d012      	beq.n	800ace0 <__ssvfiscanf_r+0x9c>
 800acba:	469a      	mov	sl, r3
 800acbc:	6863      	ldr	r3, [r4, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f340 8091 	ble.w	800ade6 <__ssvfiscanf_r+0x1a2>
 800acc4:	6822      	ldr	r2, [r4, #0]
 800acc6:	7813      	ldrb	r3, [r2, #0]
 800acc8:	4553      	cmp	r3, sl
 800acca:	f040 812e 	bne.w	800af2a <__ssvfiscanf_r+0x2e6>
 800acce:	6863      	ldr	r3, [r4, #4]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	6063      	str	r3, [r4, #4]
 800acd4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800acd6:	3201      	adds	r2, #1
 800acd8:	3301      	adds	r3, #1
 800acda:	6022      	str	r2, [r4, #0]
 800acdc:	9345      	str	r3, [sp, #276]	; 0x114
 800acde:	e7d8      	b.n	800ac92 <__ssvfiscanf_r+0x4e>
 800ace0:	9141      	str	r1, [sp, #260]	; 0x104
 800ace2:	9143      	str	r1, [sp, #268]	; 0x10c
 800ace4:	7853      	ldrb	r3, [r2, #1]
 800ace6:	2b2a      	cmp	r3, #42	; 0x2a
 800ace8:	bf02      	ittt	eq
 800acea:	2310      	moveq	r3, #16
 800acec:	1c95      	addeq	r5, r2, #2
 800acee:	9341      	streq	r3, [sp, #260]	; 0x104
 800acf0:	220a      	movs	r2, #10
 800acf2:	46aa      	mov	sl, r5
 800acf4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800acf8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800acfc:	2b09      	cmp	r3, #9
 800acfe:	d91d      	bls.n	800ad3c <__ssvfiscanf_r+0xf8>
 800ad00:	487e      	ldr	r0, [pc, #504]	; (800aefc <__ssvfiscanf_r+0x2b8>)
 800ad02:	2203      	movs	r2, #3
 800ad04:	f7f5 fa84 	bl	8000210 <memchr>
 800ad08:	b140      	cbz	r0, 800ad1c <__ssvfiscanf_r+0xd8>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	eba0 0009 	sub.w	r0, r0, r9
 800ad10:	fa03 f000 	lsl.w	r0, r3, r0
 800ad14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ad16:	4318      	orrs	r0, r3
 800ad18:	9041      	str	r0, [sp, #260]	; 0x104
 800ad1a:	4655      	mov	r5, sl
 800ad1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad20:	2b78      	cmp	r3, #120	; 0x78
 800ad22:	d806      	bhi.n	800ad32 <__ssvfiscanf_r+0xee>
 800ad24:	2b57      	cmp	r3, #87	; 0x57
 800ad26:	d810      	bhi.n	800ad4a <__ssvfiscanf_r+0x106>
 800ad28:	2b25      	cmp	r3, #37	; 0x25
 800ad2a:	d0c6      	beq.n	800acba <__ssvfiscanf_r+0x76>
 800ad2c:	d856      	bhi.n	800addc <__ssvfiscanf_r+0x198>
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d064      	beq.n	800adfc <__ssvfiscanf_r+0x1b8>
 800ad32:	2303      	movs	r3, #3
 800ad34:	9347      	str	r3, [sp, #284]	; 0x11c
 800ad36:	230a      	movs	r3, #10
 800ad38:	9342      	str	r3, [sp, #264]	; 0x108
 800ad3a:	e071      	b.n	800ae20 <__ssvfiscanf_r+0x1dc>
 800ad3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ad3e:	fb02 1103 	mla	r1, r2, r3, r1
 800ad42:	3930      	subs	r1, #48	; 0x30
 800ad44:	9143      	str	r1, [sp, #268]	; 0x10c
 800ad46:	4655      	mov	r5, sl
 800ad48:	e7d3      	b.n	800acf2 <__ssvfiscanf_r+0xae>
 800ad4a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ad4e:	2a20      	cmp	r2, #32
 800ad50:	d8ef      	bhi.n	800ad32 <__ssvfiscanf_r+0xee>
 800ad52:	a101      	add	r1, pc, #4	; (adr r1, 800ad58 <__ssvfiscanf_r+0x114>)
 800ad54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad58:	0800ae0b 	.word	0x0800ae0b
 800ad5c:	0800ad33 	.word	0x0800ad33
 800ad60:	0800ad33 	.word	0x0800ad33
 800ad64:	0800ae69 	.word	0x0800ae69
 800ad68:	0800ad33 	.word	0x0800ad33
 800ad6c:	0800ad33 	.word	0x0800ad33
 800ad70:	0800ad33 	.word	0x0800ad33
 800ad74:	0800ad33 	.word	0x0800ad33
 800ad78:	0800ad33 	.word	0x0800ad33
 800ad7c:	0800ad33 	.word	0x0800ad33
 800ad80:	0800ad33 	.word	0x0800ad33
 800ad84:	0800ae7f 	.word	0x0800ae7f
 800ad88:	0800ae55 	.word	0x0800ae55
 800ad8c:	0800ade3 	.word	0x0800ade3
 800ad90:	0800ade3 	.word	0x0800ade3
 800ad94:	0800ade3 	.word	0x0800ade3
 800ad98:	0800ad33 	.word	0x0800ad33
 800ad9c:	0800ae59 	.word	0x0800ae59
 800ada0:	0800ad33 	.word	0x0800ad33
 800ada4:	0800ad33 	.word	0x0800ad33
 800ada8:	0800ad33 	.word	0x0800ad33
 800adac:	0800ad33 	.word	0x0800ad33
 800adb0:	0800ae8f 	.word	0x0800ae8f
 800adb4:	0800ae61 	.word	0x0800ae61
 800adb8:	0800ae03 	.word	0x0800ae03
 800adbc:	0800ad33 	.word	0x0800ad33
 800adc0:	0800ad33 	.word	0x0800ad33
 800adc4:	0800ae8b 	.word	0x0800ae8b
 800adc8:	0800ad33 	.word	0x0800ad33
 800adcc:	0800ae55 	.word	0x0800ae55
 800add0:	0800ad33 	.word	0x0800ad33
 800add4:	0800ad33 	.word	0x0800ad33
 800add8:	0800ae0b 	.word	0x0800ae0b
 800addc:	3b45      	subs	r3, #69	; 0x45
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d8a7      	bhi.n	800ad32 <__ssvfiscanf_r+0xee>
 800ade2:	2305      	movs	r3, #5
 800ade4:	e01b      	b.n	800ae1e <__ssvfiscanf_r+0x1da>
 800ade6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ade8:	4621      	mov	r1, r4
 800adea:	4630      	mov	r0, r6
 800adec:	4798      	blx	r3
 800adee:	2800      	cmp	r0, #0
 800adf0:	f43f af68 	beq.w	800acc4 <__ssvfiscanf_r+0x80>
 800adf4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800adf6:	2800      	cmp	r0, #0
 800adf8:	f040 808d 	bne.w	800af16 <__ssvfiscanf_r+0x2d2>
 800adfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ae00:	e08f      	b.n	800af22 <__ssvfiscanf_r+0x2de>
 800ae02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ae04:	f042 0220 	orr.w	r2, r2, #32
 800ae08:	9241      	str	r2, [sp, #260]	; 0x104
 800ae0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ae0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae10:	9241      	str	r2, [sp, #260]	; 0x104
 800ae12:	2210      	movs	r2, #16
 800ae14:	2b6f      	cmp	r3, #111	; 0x6f
 800ae16:	9242      	str	r2, [sp, #264]	; 0x108
 800ae18:	bf34      	ite	cc
 800ae1a:	2303      	movcc	r3, #3
 800ae1c:	2304      	movcs	r3, #4
 800ae1e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ae20:	6863      	ldr	r3, [r4, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dd42      	ble.n	800aeac <__ssvfiscanf_r+0x268>
 800ae26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae28:	0659      	lsls	r1, r3, #25
 800ae2a:	d404      	bmi.n	800ae36 <__ssvfiscanf_r+0x1f2>
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	781a      	ldrb	r2, [r3, #0]
 800ae30:	5cba      	ldrb	r2, [r7, r2]
 800ae32:	0712      	lsls	r2, r2, #28
 800ae34:	d441      	bmi.n	800aeba <__ssvfiscanf_r+0x276>
 800ae36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	dc50      	bgt.n	800aede <__ssvfiscanf_r+0x29a>
 800ae3c:	466b      	mov	r3, sp
 800ae3e:	4622      	mov	r2, r4
 800ae40:	a941      	add	r1, sp, #260	; 0x104
 800ae42:	4630      	mov	r0, r6
 800ae44:	f000 f876 	bl	800af34 <_scanf_chars>
 800ae48:	2801      	cmp	r0, #1
 800ae4a:	d06e      	beq.n	800af2a <__ssvfiscanf_r+0x2e6>
 800ae4c:	2802      	cmp	r0, #2
 800ae4e:	f47f af20 	bne.w	800ac92 <__ssvfiscanf_r+0x4e>
 800ae52:	e7cf      	b.n	800adf4 <__ssvfiscanf_r+0x1b0>
 800ae54:	220a      	movs	r2, #10
 800ae56:	e7dd      	b.n	800ae14 <__ssvfiscanf_r+0x1d0>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	9342      	str	r3, [sp, #264]	; 0x108
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e7de      	b.n	800ae1e <__ssvfiscanf_r+0x1da>
 800ae60:	2308      	movs	r3, #8
 800ae62:	9342      	str	r3, [sp, #264]	; 0x108
 800ae64:	2304      	movs	r3, #4
 800ae66:	e7da      	b.n	800ae1e <__ssvfiscanf_r+0x1da>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	f000 f9c6 	bl	800b1fc <__sccl>
 800ae70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae76:	9341      	str	r3, [sp, #260]	; 0x104
 800ae78:	4605      	mov	r5, r0
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e7cf      	b.n	800ae1e <__ssvfiscanf_r+0x1da>
 800ae7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae84:	9341      	str	r3, [sp, #260]	; 0x104
 800ae86:	2300      	movs	r3, #0
 800ae88:	e7c9      	b.n	800ae1e <__ssvfiscanf_r+0x1da>
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	e7c7      	b.n	800ae1e <__ssvfiscanf_r+0x1da>
 800ae8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ae90:	06c3      	lsls	r3, r0, #27
 800ae92:	f53f aefe 	bmi.w	800ac92 <__ssvfiscanf_r+0x4e>
 800ae96:	9b00      	ldr	r3, [sp, #0]
 800ae98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae9a:	1d19      	adds	r1, r3, #4
 800ae9c:	9100      	str	r1, [sp, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f010 0f01 	tst.w	r0, #1
 800aea4:	bf14      	ite	ne
 800aea6:	801a      	strhne	r2, [r3, #0]
 800aea8:	601a      	streq	r2, [r3, #0]
 800aeaa:	e6f2      	b.n	800ac92 <__ssvfiscanf_r+0x4e>
 800aeac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aeae:	4621      	mov	r1, r4
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	4798      	blx	r3
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d0b6      	beq.n	800ae26 <__ssvfiscanf_r+0x1e2>
 800aeb8:	e79c      	b.n	800adf4 <__ssvfiscanf_r+0x1b0>
 800aeba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aebc:	3201      	adds	r2, #1
 800aebe:	9245      	str	r2, [sp, #276]	; 0x114
 800aec0:	6862      	ldr	r2, [r4, #4]
 800aec2:	3a01      	subs	r2, #1
 800aec4:	2a00      	cmp	r2, #0
 800aec6:	6062      	str	r2, [r4, #4]
 800aec8:	dd02      	ble.n	800aed0 <__ssvfiscanf_r+0x28c>
 800aeca:	3301      	adds	r3, #1
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	e7ad      	b.n	800ae2c <__ssvfiscanf_r+0x1e8>
 800aed0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aed2:	4621      	mov	r1, r4
 800aed4:	4630      	mov	r0, r6
 800aed6:	4798      	blx	r3
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d0a7      	beq.n	800ae2c <__ssvfiscanf_r+0x1e8>
 800aedc:	e78a      	b.n	800adf4 <__ssvfiscanf_r+0x1b0>
 800aede:	2b04      	cmp	r3, #4
 800aee0:	dc0e      	bgt.n	800af00 <__ssvfiscanf_r+0x2bc>
 800aee2:	466b      	mov	r3, sp
 800aee4:	4622      	mov	r2, r4
 800aee6:	a941      	add	r1, sp, #260	; 0x104
 800aee8:	4630      	mov	r0, r6
 800aeea:	f000 f87d 	bl	800afe8 <_scanf_i>
 800aeee:	e7ab      	b.n	800ae48 <__ssvfiscanf_r+0x204>
 800aef0:	0800ab91 	.word	0x0800ab91
 800aef4:	0800ac0b 	.word	0x0800ac0b
 800aef8:	0800ccd3 	.word	0x0800ccd3
 800aefc:	0800cfc2 	.word	0x0800cfc2
 800af00:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <__ssvfiscanf_r+0x2ec>)
 800af02:	2b00      	cmp	r3, #0
 800af04:	f43f aec5 	beq.w	800ac92 <__ssvfiscanf_r+0x4e>
 800af08:	466b      	mov	r3, sp
 800af0a:	4622      	mov	r2, r4
 800af0c:	a941      	add	r1, sp, #260	; 0x104
 800af0e:	4630      	mov	r0, r6
 800af10:	f3af 8000 	nop.w
 800af14:	e798      	b.n	800ae48 <__ssvfiscanf_r+0x204>
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	f013 0f40 	tst.w	r3, #64	; 0x40
 800af1c:	bf18      	it	ne
 800af1e:	f04f 30ff 	movne.w	r0, #4294967295
 800af22:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800af26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800af2c:	e7f9      	b.n	800af22 <__ssvfiscanf_r+0x2de>
 800af2e:	bf00      	nop
 800af30:	00000000 	.word	0x00000000

0800af34 <_scanf_chars>:
 800af34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af38:	4615      	mov	r5, r2
 800af3a:	688a      	ldr	r2, [r1, #8]
 800af3c:	4680      	mov	r8, r0
 800af3e:	460c      	mov	r4, r1
 800af40:	b932      	cbnz	r2, 800af50 <_scanf_chars+0x1c>
 800af42:	698a      	ldr	r2, [r1, #24]
 800af44:	2a00      	cmp	r2, #0
 800af46:	bf0c      	ite	eq
 800af48:	2201      	moveq	r2, #1
 800af4a:	f04f 32ff 	movne.w	r2, #4294967295
 800af4e:	608a      	str	r2, [r1, #8]
 800af50:	6822      	ldr	r2, [r4, #0]
 800af52:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800afe4 <_scanf_chars+0xb0>
 800af56:	06d1      	lsls	r1, r2, #27
 800af58:	bf5f      	itttt	pl
 800af5a:	681a      	ldrpl	r2, [r3, #0]
 800af5c:	1d11      	addpl	r1, r2, #4
 800af5e:	6019      	strpl	r1, [r3, #0]
 800af60:	6816      	ldrpl	r6, [r2, #0]
 800af62:	2700      	movs	r7, #0
 800af64:	69a0      	ldr	r0, [r4, #24]
 800af66:	b188      	cbz	r0, 800af8c <_scanf_chars+0x58>
 800af68:	2801      	cmp	r0, #1
 800af6a:	d107      	bne.n	800af7c <_scanf_chars+0x48>
 800af6c:	682a      	ldr	r2, [r5, #0]
 800af6e:	7811      	ldrb	r1, [r2, #0]
 800af70:	6962      	ldr	r2, [r4, #20]
 800af72:	5c52      	ldrb	r2, [r2, r1]
 800af74:	b952      	cbnz	r2, 800af8c <_scanf_chars+0x58>
 800af76:	2f00      	cmp	r7, #0
 800af78:	d031      	beq.n	800afde <_scanf_chars+0xaa>
 800af7a:	e022      	b.n	800afc2 <_scanf_chars+0x8e>
 800af7c:	2802      	cmp	r0, #2
 800af7e:	d120      	bne.n	800afc2 <_scanf_chars+0x8e>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f813 3009 	ldrb.w	r3, [r3, r9]
 800af88:	071b      	lsls	r3, r3, #28
 800af8a:	d41a      	bmi.n	800afc2 <_scanf_chars+0x8e>
 800af8c:	6823      	ldr	r3, [r4, #0]
 800af8e:	06da      	lsls	r2, r3, #27
 800af90:	bf5e      	ittt	pl
 800af92:	682b      	ldrpl	r3, [r5, #0]
 800af94:	781b      	ldrbpl	r3, [r3, #0]
 800af96:	f806 3b01 	strbpl.w	r3, [r6], #1
 800af9a:	682a      	ldr	r2, [r5, #0]
 800af9c:	686b      	ldr	r3, [r5, #4]
 800af9e:	3201      	adds	r2, #1
 800afa0:	602a      	str	r2, [r5, #0]
 800afa2:	68a2      	ldr	r2, [r4, #8]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	3a01      	subs	r2, #1
 800afa8:	606b      	str	r3, [r5, #4]
 800afaa:	3701      	adds	r7, #1
 800afac:	60a2      	str	r2, [r4, #8]
 800afae:	b142      	cbz	r2, 800afc2 <_scanf_chars+0x8e>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dcd7      	bgt.n	800af64 <_scanf_chars+0x30>
 800afb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800afb8:	4629      	mov	r1, r5
 800afba:	4640      	mov	r0, r8
 800afbc:	4798      	blx	r3
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d0d0      	beq.n	800af64 <_scanf_chars+0x30>
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	f013 0310 	ands.w	r3, r3, #16
 800afc8:	d105      	bne.n	800afd6 <_scanf_chars+0xa2>
 800afca:	68e2      	ldr	r2, [r4, #12]
 800afcc:	3201      	adds	r2, #1
 800afce:	60e2      	str	r2, [r4, #12]
 800afd0:	69a2      	ldr	r2, [r4, #24]
 800afd2:	b102      	cbz	r2, 800afd6 <_scanf_chars+0xa2>
 800afd4:	7033      	strb	r3, [r6, #0]
 800afd6:	6923      	ldr	r3, [r4, #16]
 800afd8:	443b      	add	r3, r7
 800afda:	6123      	str	r3, [r4, #16]
 800afdc:	2000      	movs	r0, #0
 800afde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe2:	bf00      	nop
 800afe4:	0800ccd3 	.word	0x0800ccd3

0800afe8 <_scanf_i>:
 800afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afec:	4698      	mov	r8, r3
 800afee:	4b76      	ldr	r3, [pc, #472]	; (800b1c8 <_scanf_i+0x1e0>)
 800aff0:	460c      	mov	r4, r1
 800aff2:	4682      	mov	sl, r0
 800aff4:	4616      	mov	r6, r2
 800aff6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800affa:	b087      	sub	sp, #28
 800affc:	ab03      	add	r3, sp, #12
 800affe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b002:	4b72      	ldr	r3, [pc, #456]	; (800b1cc <_scanf_i+0x1e4>)
 800b004:	69a1      	ldr	r1, [r4, #24]
 800b006:	4a72      	ldr	r2, [pc, #456]	; (800b1d0 <_scanf_i+0x1e8>)
 800b008:	2903      	cmp	r1, #3
 800b00a:	bf18      	it	ne
 800b00c:	461a      	movne	r2, r3
 800b00e:	68a3      	ldr	r3, [r4, #8]
 800b010:	9201      	str	r2, [sp, #4]
 800b012:	1e5a      	subs	r2, r3, #1
 800b014:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b018:	bf88      	it	hi
 800b01a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b01e:	4627      	mov	r7, r4
 800b020:	bf82      	ittt	hi
 800b022:	eb03 0905 	addhi.w	r9, r3, r5
 800b026:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b02a:	60a3      	strhi	r3, [r4, #8]
 800b02c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b030:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b034:	bf98      	it	ls
 800b036:	f04f 0900 	movls.w	r9, #0
 800b03a:	6023      	str	r3, [r4, #0]
 800b03c:	463d      	mov	r5, r7
 800b03e:	f04f 0b00 	mov.w	fp, #0
 800b042:	6831      	ldr	r1, [r6, #0]
 800b044:	ab03      	add	r3, sp, #12
 800b046:	7809      	ldrb	r1, [r1, #0]
 800b048:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b04c:	2202      	movs	r2, #2
 800b04e:	f7f5 f8df 	bl	8000210 <memchr>
 800b052:	b328      	cbz	r0, 800b0a0 <_scanf_i+0xb8>
 800b054:	f1bb 0f01 	cmp.w	fp, #1
 800b058:	d159      	bne.n	800b10e <_scanf_i+0x126>
 800b05a:	6862      	ldr	r2, [r4, #4]
 800b05c:	b92a      	cbnz	r2, 800b06a <_scanf_i+0x82>
 800b05e:	6822      	ldr	r2, [r4, #0]
 800b060:	2308      	movs	r3, #8
 800b062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b066:	6063      	str	r3, [r4, #4]
 800b068:	6022      	str	r2, [r4, #0]
 800b06a:	6822      	ldr	r2, [r4, #0]
 800b06c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b070:	6022      	str	r2, [r4, #0]
 800b072:	68a2      	ldr	r2, [r4, #8]
 800b074:	1e51      	subs	r1, r2, #1
 800b076:	60a1      	str	r1, [r4, #8]
 800b078:	b192      	cbz	r2, 800b0a0 <_scanf_i+0xb8>
 800b07a:	6832      	ldr	r2, [r6, #0]
 800b07c:	1c51      	adds	r1, r2, #1
 800b07e:	6031      	str	r1, [r6, #0]
 800b080:	7812      	ldrb	r2, [r2, #0]
 800b082:	f805 2b01 	strb.w	r2, [r5], #1
 800b086:	6872      	ldr	r2, [r6, #4]
 800b088:	3a01      	subs	r2, #1
 800b08a:	2a00      	cmp	r2, #0
 800b08c:	6072      	str	r2, [r6, #4]
 800b08e:	dc07      	bgt.n	800b0a0 <_scanf_i+0xb8>
 800b090:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b094:	4631      	mov	r1, r6
 800b096:	4650      	mov	r0, sl
 800b098:	4790      	blx	r2
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f040 8085 	bne.w	800b1aa <_scanf_i+0x1c2>
 800b0a0:	f10b 0b01 	add.w	fp, fp, #1
 800b0a4:	f1bb 0f03 	cmp.w	fp, #3
 800b0a8:	d1cb      	bne.n	800b042 <_scanf_i+0x5a>
 800b0aa:	6863      	ldr	r3, [r4, #4]
 800b0ac:	b90b      	cbnz	r3, 800b0b2 <_scanf_i+0xca>
 800b0ae:	230a      	movs	r3, #10
 800b0b0:	6063      	str	r3, [r4, #4]
 800b0b2:	6863      	ldr	r3, [r4, #4]
 800b0b4:	4947      	ldr	r1, [pc, #284]	; (800b1d4 <_scanf_i+0x1ec>)
 800b0b6:	6960      	ldr	r0, [r4, #20]
 800b0b8:	1ac9      	subs	r1, r1, r3
 800b0ba:	f000 f89f 	bl	800b1fc <__sccl>
 800b0be:	f04f 0b00 	mov.w	fp, #0
 800b0c2:	68a3      	ldr	r3, [r4, #8]
 800b0c4:	6822      	ldr	r2, [r4, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d03d      	beq.n	800b146 <_scanf_i+0x15e>
 800b0ca:	6831      	ldr	r1, [r6, #0]
 800b0cc:	6960      	ldr	r0, [r4, #20]
 800b0ce:	f891 c000 	ldrb.w	ip, [r1]
 800b0d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d035      	beq.n	800b146 <_scanf_i+0x15e>
 800b0da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b0de:	d124      	bne.n	800b12a <_scanf_i+0x142>
 800b0e0:	0510      	lsls	r0, r2, #20
 800b0e2:	d522      	bpl.n	800b12a <_scanf_i+0x142>
 800b0e4:	f10b 0b01 	add.w	fp, fp, #1
 800b0e8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ec:	d003      	beq.n	800b0f6 <_scanf_i+0x10e>
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b0f4:	60a3      	str	r3, [r4, #8]
 800b0f6:	6873      	ldr	r3, [r6, #4]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	6073      	str	r3, [r6, #4]
 800b0fe:	dd1b      	ble.n	800b138 <_scanf_i+0x150>
 800b100:	6833      	ldr	r3, [r6, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	6033      	str	r3, [r6, #0]
 800b106:	68a3      	ldr	r3, [r4, #8]
 800b108:	3b01      	subs	r3, #1
 800b10a:	60a3      	str	r3, [r4, #8]
 800b10c:	e7d9      	b.n	800b0c2 <_scanf_i+0xda>
 800b10e:	f1bb 0f02 	cmp.w	fp, #2
 800b112:	d1ae      	bne.n	800b072 <_scanf_i+0x8a>
 800b114:	6822      	ldr	r2, [r4, #0]
 800b116:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b11a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b11e:	d1bf      	bne.n	800b0a0 <_scanf_i+0xb8>
 800b120:	2310      	movs	r3, #16
 800b122:	6063      	str	r3, [r4, #4]
 800b124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b128:	e7a2      	b.n	800b070 <_scanf_i+0x88>
 800b12a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b12e:	6022      	str	r2, [r4, #0]
 800b130:	780b      	ldrb	r3, [r1, #0]
 800b132:	f805 3b01 	strb.w	r3, [r5], #1
 800b136:	e7de      	b.n	800b0f6 <_scanf_i+0x10e>
 800b138:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b13c:	4631      	mov	r1, r6
 800b13e:	4650      	mov	r0, sl
 800b140:	4798      	blx	r3
 800b142:	2800      	cmp	r0, #0
 800b144:	d0df      	beq.n	800b106 <_scanf_i+0x11e>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	05db      	lsls	r3, r3, #23
 800b14a:	d50d      	bpl.n	800b168 <_scanf_i+0x180>
 800b14c:	42bd      	cmp	r5, r7
 800b14e:	d909      	bls.n	800b164 <_scanf_i+0x17c>
 800b150:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b158:	4632      	mov	r2, r6
 800b15a:	4650      	mov	r0, sl
 800b15c:	4798      	blx	r3
 800b15e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b162:	464d      	mov	r5, r9
 800b164:	42bd      	cmp	r5, r7
 800b166:	d02d      	beq.n	800b1c4 <_scanf_i+0x1dc>
 800b168:	6822      	ldr	r2, [r4, #0]
 800b16a:	f012 0210 	ands.w	r2, r2, #16
 800b16e:	d113      	bne.n	800b198 <_scanf_i+0x1b0>
 800b170:	702a      	strb	r2, [r5, #0]
 800b172:	6863      	ldr	r3, [r4, #4]
 800b174:	9e01      	ldr	r6, [sp, #4]
 800b176:	4639      	mov	r1, r7
 800b178:	4650      	mov	r0, sl
 800b17a:	47b0      	blx	r6
 800b17c:	6821      	ldr	r1, [r4, #0]
 800b17e:	f8d8 3000 	ldr.w	r3, [r8]
 800b182:	f011 0f20 	tst.w	r1, #32
 800b186:	d013      	beq.n	800b1b0 <_scanf_i+0x1c8>
 800b188:	1d1a      	adds	r2, r3, #4
 800b18a:	f8c8 2000 	str.w	r2, [r8]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6018      	str	r0, [r3, #0]
 800b192:	68e3      	ldr	r3, [r4, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	60e3      	str	r3, [r4, #12]
 800b198:	1bed      	subs	r5, r5, r7
 800b19a:	44ab      	add	fp, r5
 800b19c:	6925      	ldr	r5, [r4, #16]
 800b19e:	445d      	add	r5, fp
 800b1a0:	6125      	str	r5, [r4, #16]
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	b007      	add	sp, #28
 800b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1aa:	f04f 0b00 	mov.w	fp, #0
 800b1ae:	e7ca      	b.n	800b146 <_scanf_i+0x15e>
 800b1b0:	1d1a      	adds	r2, r3, #4
 800b1b2:	f8c8 2000 	str.w	r2, [r8]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f011 0f01 	tst.w	r1, #1
 800b1bc:	bf14      	ite	ne
 800b1be:	8018      	strhne	r0, [r3, #0]
 800b1c0:	6018      	streq	r0, [r3, #0]
 800b1c2:	e7e6      	b.n	800b192 <_scanf_i+0x1aa>
 800b1c4:	2001      	movs	r0, #1
 800b1c6:	e7ed      	b.n	800b1a4 <_scanf_i+0x1bc>
 800b1c8:	0800c90c 	.word	0x0800c90c
 800b1cc:	0800b351 	.word	0x0800b351
 800b1d0:	080093f5 	.word	0x080093f5
 800b1d4:	0800cfe6 	.word	0x0800cfe6

0800b1d8 <_read_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4d07      	ldr	r5, [pc, #28]	; (800b1f8 <_read_r+0x20>)
 800b1dc:	4604      	mov	r4, r0
 800b1de:	4608      	mov	r0, r1
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	602a      	str	r2, [r5, #0]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	f7f7 fbbc 	bl	8002964 <_read>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	d102      	bne.n	800b1f6 <_read_r+0x1e>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	b103      	cbz	r3, 800b1f6 <_read_r+0x1e>
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	20000540 	.word	0x20000540

0800b1fc <__sccl>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	780b      	ldrb	r3, [r1, #0]
 800b200:	4604      	mov	r4, r0
 800b202:	2b5e      	cmp	r3, #94	; 0x5e
 800b204:	bf0b      	itete	eq
 800b206:	784b      	ldrbeq	r3, [r1, #1]
 800b208:	1c48      	addne	r0, r1, #1
 800b20a:	1c88      	addeq	r0, r1, #2
 800b20c:	2200      	movne	r2, #0
 800b20e:	bf08      	it	eq
 800b210:	2201      	moveq	r2, #1
 800b212:	1e61      	subs	r1, r4, #1
 800b214:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b218:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b21c:	42a9      	cmp	r1, r5
 800b21e:	d1fb      	bne.n	800b218 <__sccl+0x1c>
 800b220:	b90b      	cbnz	r3, 800b226 <__sccl+0x2a>
 800b222:	3801      	subs	r0, #1
 800b224:	bd70      	pop	{r4, r5, r6, pc}
 800b226:	f082 0201 	eor.w	r2, r2, #1
 800b22a:	54e2      	strb	r2, [r4, r3]
 800b22c:	4605      	mov	r5, r0
 800b22e:	4628      	mov	r0, r5
 800b230:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b234:	292d      	cmp	r1, #45	; 0x2d
 800b236:	d006      	beq.n	800b246 <__sccl+0x4a>
 800b238:	295d      	cmp	r1, #93	; 0x5d
 800b23a:	d0f3      	beq.n	800b224 <__sccl+0x28>
 800b23c:	b909      	cbnz	r1, 800b242 <__sccl+0x46>
 800b23e:	4628      	mov	r0, r5
 800b240:	e7f0      	b.n	800b224 <__sccl+0x28>
 800b242:	460b      	mov	r3, r1
 800b244:	e7f1      	b.n	800b22a <__sccl+0x2e>
 800b246:	786e      	ldrb	r6, [r5, #1]
 800b248:	2e5d      	cmp	r6, #93	; 0x5d
 800b24a:	d0fa      	beq.n	800b242 <__sccl+0x46>
 800b24c:	42b3      	cmp	r3, r6
 800b24e:	dcf8      	bgt.n	800b242 <__sccl+0x46>
 800b250:	3502      	adds	r5, #2
 800b252:	4619      	mov	r1, r3
 800b254:	3101      	adds	r1, #1
 800b256:	428e      	cmp	r6, r1
 800b258:	5462      	strb	r2, [r4, r1]
 800b25a:	dcfb      	bgt.n	800b254 <__sccl+0x58>
 800b25c:	1af1      	subs	r1, r6, r3
 800b25e:	3901      	subs	r1, #1
 800b260:	1c58      	adds	r0, r3, #1
 800b262:	42b3      	cmp	r3, r6
 800b264:	bfa8      	it	ge
 800b266:	2100      	movge	r1, #0
 800b268:	1843      	adds	r3, r0, r1
 800b26a:	e7e0      	b.n	800b22e <__sccl+0x32>

0800b26c <_strtoul_l.constprop.0>:
 800b26c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b270:	4f36      	ldr	r7, [pc, #216]	; (800b34c <_strtoul_l.constprop.0+0xe0>)
 800b272:	4686      	mov	lr, r0
 800b274:	460d      	mov	r5, r1
 800b276:	4628      	mov	r0, r5
 800b278:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b27c:	5de6      	ldrb	r6, [r4, r7]
 800b27e:	f016 0608 	ands.w	r6, r6, #8
 800b282:	d1f8      	bne.n	800b276 <_strtoul_l.constprop.0+0xa>
 800b284:	2c2d      	cmp	r4, #45	; 0x2d
 800b286:	d12f      	bne.n	800b2e8 <_strtoul_l.constprop.0+0x7c>
 800b288:	782c      	ldrb	r4, [r5, #0]
 800b28a:	2601      	movs	r6, #1
 800b28c:	1c85      	adds	r5, r0, #2
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d057      	beq.n	800b342 <_strtoul_l.constprop.0+0xd6>
 800b292:	2b10      	cmp	r3, #16
 800b294:	d109      	bne.n	800b2aa <_strtoul_l.constprop.0+0x3e>
 800b296:	2c30      	cmp	r4, #48	; 0x30
 800b298:	d107      	bne.n	800b2aa <_strtoul_l.constprop.0+0x3e>
 800b29a:	7828      	ldrb	r0, [r5, #0]
 800b29c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b2a0:	2858      	cmp	r0, #88	; 0x58
 800b2a2:	d149      	bne.n	800b338 <_strtoul_l.constprop.0+0xcc>
 800b2a4:	786c      	ldrb	r4, [r5, #1]
 800b2a6:	2310      	movs	r3, #16
 800b2a8:	3502      	adds	r5, #2
 800b2aa:	f04f 38ff 	mov.w	r8, #4294967295
 800b2ae:	2700      	movs	r7, #0
 800b2b0:	fbb8 f8f3 	udiv	r8, r8, r3
 800b2b4:	fb03 f908 	mul.w	r9, r3, r8
 800b2b8:	ea6f 0909 	mvn.w	r9, r9
 800b2bc:	4638      	mov	r0, r7
 800b2be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b2c2:	f1bc 0f09 	cmp.w	ip, #9
 800b2c6:	d814      	bhi.n	800b2f2 <_strtoul_l.constprop.0+0x86>
 800b2c8:	4664      	mov	r4, ip
 800b2ca:	42a3      	cmp	r3, r4
 800b2cc:	dd22      	ble.n	800b314 <_strtoul_l.constprop.0+0xa8>
 800b2ce:	2f00      	cmp	r7, #0
 800b2d0:	db1d      	blt.n	800b30e <_strtoul_l.constprop.0+0xa2>
 800b2d2:	4580      	cmp	r8, r0
 800b2d4:	d31b      	bcc.n	800b30e <_strtoul_l.constprop.0+0xa2>
 800b2d6:	d101      	bne.n	800b2dc <_strtoul_l.constprop.0+0x70>
 800b2d8:	45a1      	cmp	r9, r4
 800b2da:	db18      	blt.n	800b30e <_strtoul_l.constprop.0+0xa2>
 800b2dc:	fb00 4003 	mla	r0, r0, r3, r4
 800b2e0:	2701      	movs	r7, #1
 800b2e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2e6:	e7ea      	b.n	800b2be <_strtoul_l.constprop.0+0x52>
 800b2e8:	2c2b      	cmp	r4, #43	; 0x2b
 800b2ea:	bf04      	itt	eq
 800b2ec:	782c      	ldrbeq	r4, [r5, #0]
 800b2ee:	1c85      	addeq	r5, r0, #2
 800b2f0:	e7cd      	b.n	800b28e <_strtoul_l.constprop.0+0x22>
 800b2f2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b2f6:	f1bc 0f19 	cmp.w	ip, #25
 800b2fa:	d801      	bhi.n	800b300 <_strtoul_l.constprop.0+0x94>
 800b2fc:	3c37      	subs	r4, #55	; 0x37
 800b2fe:	e7e4      	b.n	800b2ca <_strtoul_l.constprop.0+0x5e>
 800b300:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b304:	f1bc 0f19 	cmp.w	ip, #25
 800b308:	d804      	bhi.n	800b314 <_strtoul_l.constprop.0+0xa8>
 800b30a:	3c57      	subs	r4, #87	; 0x57
 800b30c:	e7dd      	b.n	800b2ca <_strtoul_l.constprop.0+0x5e>
 800b30e:	f04f 37ff 	mov.w	r7, #4294967295
 800b312:	e7e6      	b.n	800b2e2 <_strtoul_l.constprop.0+0x76>
 800b314:	2f00      	cmp	r7, #0
 800b316:	da07      	bge.n	800b328 <_strtoul_l.constprop.0+0xbc>
 800b318:	2322      	movs	r3, #34	; 0x22
 800b31a:	f8ce 3000 	str.w	r3, [lr]
 800b31e:	f04f 30ff 	mov.w	r0, #4294967295
 800b322:	b932      	cbnz	r2, 800b332 <_strtoul_l.constprop.0+0xc6>
 800b324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b328:	b106      	cbz	r6, 800b32c <_strtoul_l.constprop.0+0xc0>
 800b32a:	4240      	negs	r0, r0
 800b32c:	2a00      	cmp	r2, #0
 800b32e:	d0f9      	beq.n	800b324 <_strtoul_l.constprop.0+0xb8>
 800b330:	b107      	cbz	r7, 800b334 <_strtoul_l.constprop.0+0xc8>
 800b332:	1e69      	subs	r1, r5, #1
 800b334:	6011      	str	r1, [r2, #0]
 800b336:	e7f5      	b.n	800b324 <_strtoul_l.constprop.0+0xb8>
 800b338:	2430      	movs	r4, #48	; 0x30
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1b5      	bne.n	800b2aa <_strtoul_l.constprop.0+0x3e>
 800b33e:	2308      	movs	r3, #8
 800b340:	e7b3      	b.n	800b2aa <_strtoul_l.constprop.0+0x3e>
 800b342:	2c30      	cmp	r4, #48	; 0x30
 800b344:	d0a9      	beq.n	800b29a <_strtoul_l.constprop.0+0x2e>
 800b346:	230a      	movs	r3, #10
 800b348:	e7af      	b.n	800b2aa <_strtoul_l.constprop.0+0x3e>
 800b34a:	bf00      	nop
 800b34c:	0800ccd3 	.word	0x0800ccd3

0800b350 <_strtoul_r>:
 800b350:	f7ff bf8c 	b.w	800b26c <_strtoul_l.constprop.0>

0800b354 <__submore>:
 800b354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b358:	460c      	mov	r4, r1
 800b35a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b35c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b360:	4299      	cmp	r1, r3
 800b362:	d11d      	bne.n	800b3a0 <__submore+0x4c>
 800b364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b368:	f7fd fa1a 	bl	80087a0 <_malloc_r>
 800b36c:	b918      	cbnz	r0, 800b376 <__submore+0x22>
 800b36e:	f04f 30ff 	mov.w	r0, #4294967295
 800b372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b37a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b37c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b380:	6360      	str	r0, [r4, #52]	; 0x34
 800b382:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b386:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b38a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b38e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b392:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b396:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b39a:	6020      	str	r0, [r4, #0]
 800b39c:	2000      	movs	r0, #0
 800b39e:	e7e8      	b.n	800b372 <__submore+0x1e>
 800b3a0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b3a2:	0077      	lsls	r7, r6, #1
 800b3a4:	463a      	mov	r2, r7
 800b3a6:	f000 fa25 	bl	800b7f4 <_realloc_r>
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d0de      	beq.n	800b36e <__submore+0x1a>
 800b3b0:	eb00 0806 	add.w	r8, r0, r6
 800b3b4:	4601      	mov	r1, r0
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	f7fe fed9 	bl	800a170 <memcpy>
 800b3be:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b3c2:	f8c4 8000 	str.w	r8, [r4]
 800b3c6:	e7e9      	b.n	800b39c <__submore+0x48>

0800b3c8 <__assert_func>:
 800b3c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3ca:	4614      	mov	r4, r2
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <__assert_func+0x2c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	68d8      	ldr	r0, [r3, #12]
 800b3d6:	b14c      	cbz	r4, 800b3ec <__assert_func+0x24>
 800b3d8:	4b07      	ldr	r3, [pc, #28]	; (800b3f8 <__assert_func+0x30>)
 800b3da:	9100      	str	r1, [sp, #0]
 800b3dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3e0:	4906      	ldr	r1, [pc, #24]	; (800b3fc <__assert_func+0x34>)
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	f000 f9a6 	bl	800b734 <fiprintf>
 800b3e8:	f000 fc5a 	bl	800bca0 <abort>
 800b3ec:	4b04      	ldr	r3, [pc, #16]	; (800b400 <__assert_func+0x38>)
 800b3ee:	461c      	mov	r4, r3
 800b3f0:	e7f3      	b.n	800b3da <__assert_func+0x12>
 800b3f2:	bf00      	nop
 800b3f4:	200000a4 	.word	0x200000a4
 800b3f8:	0800cfe8 	.word	0x0800cfe8
 800b3fc:	0800cff5 	.word	0x0800cff5
 800b400:	0800d023 	.word	0x0800d023

0800b404 <__sflush_r>:
 800b404:	898a      	ldrh	r2, [r1, #12]
 800b406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b40a:	4605      	mov	r5, r0
 800b40c:	0710      	lsls	r0, r2, #28
 800b40e:	460c      	mov	r4, r1
 800b410:	d458      	bmi.n	800b4c4 <__sflush_r+0xc0>
 800b412:	684b      	ldr	r3, [r1, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	dc05      	bgt.n	800b424 <__sflush_r+0x20>
 800b418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	dc02      	bgt.n	800b424 <__sflush_r+0x20>
 800b41e:	2000      	movs	r0, #0
 800b420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b426:	2e00      	cmp	r6, #0
 800b428:	d0f9      	beq.n	800b41e <__sflush_r+0x1a>
 800b42a:	2300      	movs	r3, #0
 800b42c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b430:	682f      	ldr	r7, [r5, #0]
 800b432:	602b      	str	r3, [r5, #0]
 800b434:	d032      	beq.n	800b49c <__sflush_r+0x98>
 800b436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b438:	89a3      	ldrh	r3, [r4, #12]
 800b43a:	075a      	lsls	r2, r3, #29
 800b43c:	d505      	bpl.n	800b44a <__sflush_r+0x46>
 800b43e:	6863      	ldr	r3, [r4, #4]
 800b440:	1ac0      	subs	r0, r0, r3
 800b442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b444:	b10b      	cbz	r3, 800b44a <__sflush_r+0x46>
 800b446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b448:	1ac0      	subs	r0, r0, r3
 800b44a:	2300      	movs	r3, #0
 800b44c:	4602      	mov	r2, r0
 800b44e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b450:	6a21      	ldr	r1, [r4, #32]
 800b452:	4628      	mov	r0, r5
 800b454:	47b0      	blx	r6
 800b456:	1c43      	adds	r3, r0, #1
 800b458:	89a3      	ldrh	r3, [r4, #12]
 800b45a:	d106      	bne.n	800b46a <__sflush_r+0x66>
 800b45c:	6829      	ldr	r1, [r5, #0]
 800b45e:	291d      	cmp	r1, #29
 800b460:	d82c      	bhi.n	800b4bc <__sflush_r+0xb8>
 800b462:	4a2a      	ldr	r2, [pc, #168]	; (800b50c <__sflush_r+0x108>)
 800b464:	40ca      	lsrs	r2, r1
 800b466:	07d6      	lsls	r6, r2, #31
 800b468:	d528      	bpl.n	800b4bc <__sflush_r+0xb8>
 800b46a:	2200      	movs	r2, #0
 800b46c:	6062      	str	r2, [r4, #4]
 800b46e:	04d9      	lsls	r1, r3, #19
 800b470:	6922      	ldr	r2, [r4, #16]
 800b472:	6022      	str	r2, [r4, #0]
 800b474:	d504      	bpl.n	800b480 <__sflush_r+0x7c>
 800b476:	1c42      	adds	r2, r0, #1
 800b478:	d101      	bne.n	800b47e <__sflush_r+0x7a>
 800b47a:	682b      	ldr	r3, [r5, #0]
 800b47c:	b903      	cbnz	r3, 800b480 <__sflush_r+0x7c>
 800b47e:	6560      	str	r0, [r4, #84]	; 0x54
 800b480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b482:	602f      	str	r7, [r5, #0]
 800b484:	2900      	cmp	r1, #0
 800b486:	d0ca      	beq.n	800b41e <__sflush_r+0x1a>
 800b488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b48c:	4299      	cmp	r1, r3
 800b48e:	d002      	beq.n	800b496 <__sflush_r+0x92>
 800b490:	4628      	mov	r0, r5
 800b492:	f7fd f919 	bl	80086c8 <_free_r>
 800b496:	2000      	movs	r0, #0
 800b498:	6360      	str	r0, [r4, #52]	; 0x34
 800b49a:	e7c1      	b.n	800b420 <__sflush_r+0x1c>
 800b49c:	6a21      	ldr	r1, [r4, #32]
 800b49e:	2301      	movs	r3, #1
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	47b0      	blx	r6
 800b4a4:	1c41      	adds	r1, r0, #1
 800b4a6:	d1c7      	bne.n	800b438 <__sflush_r+0x34>
 800b4a8:	682b      	ldr	r3, [r5, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d0c4      	beq.n	800b438 <__sflush_r+0x34>
 800b4ae:	2b1d      	cmp	r3, #29
 800b4b0:	d001      	beq.n	800b4b6 <__sflush_r+0xb2>
 800b4b2:	2b16      	cmp	r3, #22
 800b4b4:	d101      	bne.n	800b4ba <__sflush_r+0xb6>
 800b4b6:	602f      	str	r7, [r5, #0]
 800b4b8:	e7b1      	b.n	800b41e <__sflush_r+0x1a>
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	e7ad      	b.n	800b420 <__sflush_r+0x1c>
 800b4c4:	690f      	ldr	r7, [r1, #16]
 800b4c6:	2f00      	cmp	r7, #0
 800b4c8:	d0a9      	beq.n	800b41e <__sflush_r+0x1a>
 800b4ca:	0793      	lsls	r3, r2, #30
 800b4cc:	680e      	ldr	r6, [r1, #0]
 800b4ce:	bf08      	it	eq
 800b4d0:	694b      	ldreq	r3, [r1, #20]
 800b4d2:	600f      	str	r7, [r1, #0]
 800b4d4:	bf18      	it	ne
 800b4d6:	2300      	movne	r3, #0
 800b4d8:	eba6 0807 	sub.w	r8, r6, r7
 800b4dc:	608b      	str	r3, [r1, #8]
 800b4de:	f1b8 0f00 	cmp.w	r8, #0
 800b4e2:	dd9c      	ble.n	800b41e <__sflush_r+0x1a>
 800b4e4:	6a21      	ldr	r1, [r4, #32]
 800b4e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4e8:	4643      	mov	r3, r8
 800b4ea:	463a      	mov	r2, r7
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	47b0      	blx	r6
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	dc06      	bgt.n	800b502 <__sflush_r+0xfe>
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4fa:	81a3      	strh	r3, [r4, #12]
 800b4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b500:	e78e      	b.n	800b420 <__sflush_r+0x1c>
 800b502:	4407      	add	r7, r0
 800b504:	eba8 0800 	sub.w	r8, r8, r0
 800b508:	e7e9      	b.n	800b4de <__sflush_r+0xda>
 800b50a:	bf00      	nop
 800b50c:	20400001 	.word	0x20400001

0800b510 <_fflush_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	690b      	ldr	r3, [r1, #16]
 800b514:	4605      	mov	r5, r0
 800b516:	460c      	mov	r4, r1
 800b518:	b913      	cbnz	r3, 800b520 <_fflush_r+0x10>
 800b51a:	2500      	movs	r5, #0
 800b51c:	4628      	mov	r0, r5
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	b118      	cbz	r0, 800b52a <_fflush_r+0x1a>
 800b522:	6983      	ldr	r3, [r0, #24]
 800b524:	b90b      	cbnz	r3, 800b52a <_fflush_r+0x1a>
 800b526:	f000 f887 	bl	800b638 <__sinit>
 800b52a:	4b14      	ldr	r3, [pc, #80]	; (800b57c <_fflush_r+0x6c>)
 800b52c:	429c      	cmp	r4, r3
 800b52e:	d11b      	bne.n	800b568 <_fflush_r+0x58>
 800b530:	686c      	ldr	r4, [r5, #4]
 800b532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0ef      	beq.n	800b51a <_fflush_r+0xa>
 800b53a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b53c:	07d0      	lsls	r0, r2, #31
 800b53e:	d404      	bmi.n	800b54a <_fflush_r+0x3a>
 800b540:	0599      	lsls	r1, r3, #22
 800b542:	d402      	bmi.n	800b54a <_fflush_r+0x3a>
 800b544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b546:	f000 f927 	bl	800b798 <__retarget_lock_acquire_recursive>
 800b54a:	4628      	mov	r0, r5
 800b54c:	4621      	mov	r1, r4
 800b54e:	f7ff ff59 	bl	800b404 <__sflush_r>
 800b552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b554:	07da      	lsls	r2, r3, #31
 800b556:	4605      	mov	r5, r0
 800b558:	d4e0      	bmi.n	800b51c <_fflush_r+0xc>
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	059b      	lsls	r3, r3, #22
 800b55e:	d4dd      	bmi.n	800b51c <_fflush_r+0xc>
 800b560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b562:	f000 f91a 	bl	800b79a <__retarget_lock_release_recursive>
 800b566:	e7d9      	b.n	800b51c <_fflush_r+0xc>
 800b568:	4b05      	ldr	r3, [pc, #20]	; (800b580 <_fflush_r+0x70>)
 800b56a:	429c      	cmp	r4, r3
 800b56c:	d101      	bne.n	800b572 <_fflush_r+0x62>
 800b56e:	68ac      	ldr	r4, [r5, #8]
 800b570:	e7df      	b.n	800b532 <_fflush_r+0x22>
 800b572:	4b04      	ldr	r3, [pc, #16]	; (800b584 <_fflush_r+0x74>)
 800b574:	429c      	cmp	r4, r3
 800b576:	bf08      	it	eq
 800b578:	68ec      	ldreq	r4, [r5, #12]
 800b57a:	e7da      	b.n	800b532 <_fflush_r+0x22>
 800b57c:	0800d044 	.word	0x0800d044
 800b580:	0800d064 	.word	0x0800d064
 800b584:	0800d024 	.word	0x0800d024

0800b588 <std>:
 800b588:	2300      	movs	r3, #0
 800b58a:	b510      	push	{r4, lr}
 800b58c:	4604      	mov	r4, r0
 800b58e:	e9c0 3300 	strd	r3, r3, [r0]
 800b592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b596:	6083      	str	r3, [r0, #8]
 800b598:	8181      	strh	r1, [r0, #12]
 800b59a:	6643      	str	r3, [r0, #100]	; 0x64
 800b59c:	81c2      	strh	r2, [r0, #14]
 800b59e:	6183      	str	r3, [r0, #24]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	2208      	movs	r2, #8
 800b5a4:	305c      	adds	r0, #92	; 0x5c
 800b5a6:	f7fd f887 	bl	80086b8 <memset>
 800b5aa:	4b05      	ldr	r3, [pc, #20]	; (800b5c0 <std+0x38>)
 800b5ac:	6263      	str	r3, [r4, #36]	; 0x24
 800b5ae:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <std+0x3c>)
 800b5b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5b2:	4b05      	ldr	r3, [pc, #20]	; (800b5c8 <std+0x40>)
 800b5b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5b6:	4b05      	ldr	r3, [pc, #20]	; (800b5cc <std+0x44>)
 800b5b8:	6224      	str	r4, [r4, #32]
 800b5ba:	6323      	str	r3, [r4, #48]	; 0x30
 800b5bc:	bd10      	pop	{r4, pc}
 800b5be:	bf00      	nop
 800b5c0:	08009215 	.word	0x08009215
 800b5c4:	0800923b 	.word	0x0800923b
 800b5c8:	08009273 	.word	0x08009273
 800b5cc:	08009297 	.word	0x08009297

0800b5d0 <_cleanup_r>:
 800b5d0:	4901      	ldr	r1, [pc, #4]	; (800b5d8 <_cleanup_r+0x8>)
 800b5d2:	f000 b8c1 	b.w	800b758 <_fwalk_reent>
 800b5d6:	bf00      	nop
 800b5d8:	0800b511 	.word	0x0800b511

0800b5dc <__sfmoreglue>:
 800b5dc:	b570      	push	{r4, r5, r6, lr}
 800b5de:	2268      	movs	r2, #104	; 0x68
 800b5e0:	1e4d      	subs	r5, r1, #1
 800b5e2:	4355      	muls	r5, r2
 800b5e4:	460e      	mov	r6, r1
 800b5e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5ea:	f7fd f8d9 	bl	80087a0 <_malloc_r>
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	b140      	cbz	r0, 800b604 <__sfmoreglue+0x28>
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	e9c0 1600 	strd	r1, r6, [r0]
 800b5f8:	300c      	adds	r0, #12
 800b5fa:	60a0      	str	r0, [r4, #8]
 800b5fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b600:	f7fd f85a 	bl	80086b8 <memset>
 800b604:	4620      	mov	r0, r4
 800b606:	bd70      	pop	{r4, r5, r6, pc}

0800b608 <__sfp_lock_acquire>:
 800b608:	4801      	ldr	r0, [pc, #4]	; (800b610 <__sfp_lock_acquire+0x8>)
 800b60a:	f000 b8c5 	b.w	800b798 <__retarget_lock_acquire_recursive>
 800b60e:	bf00      	nop
 800b610:	20000545 	.word	0x20000545

0800b614 <__sfp_lock_release>:
 800b614:	4801      	ldr	r0, [pc, #4]	; (800b61c <__sfp_lock_release+0x8>)
 800b616:	f000 b8c0 	b.w	800b79a <__retarget_lock_release_recursive>
 800b61a:	bf00      	nop
 800b61c:	20000545 	.word	0x20000545

0800b620 <__sinit_lock_acquire>:
 800b620:	4801      	ldr	r0, [pc, #4]	; (800b628 <__sinit_lock_acquire+0x8>)
 800b622:	f000 b8b9 	b.w	800b798 <__retarget_lock_acquire_recursive>
 800b626:	bf00      	nop
 800b628:	20000546 	.word	0x20000546

0800b62c <__sinit_lock_release>:
 800b62c:	4801      	ldr	r0, [pc, #4]	; (800b634 <__sinit_lock_release+0x8>)
 800b62e:	f000 b8b4 	b.w	800b79a <__retarget_lock_release_recursive>
 800b632:	bf00      	nop
 800b634:	20000546 	.word	0x20000546

0800b638 <__sinit>:
 800b638:	b510      	push	{r4, lr}
 800b63a:	4604      	mov	r4, r0
 800b63c:	f7ff fff0 	bl	800b620 <__sinit_lock_acquire>
 800b640:	69a3      	ldr	r3, [r4, #24]
 800b642:	b11b      	cbz	r3, 800b64c <__sinit+0x14>
 800b644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b648:	f7ff bff0 	b.w	800b62c <__sinit_lock_release>
 800b64c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b650:	6523      	str	r3, [r4, #80]	; 0x50
 800b652:	4b13      	ldr	r3, [pc, #76]	; (800b6a0 <__sinit+0x68>)
 800b654:	4a13      	ldr	r2, [pc, #76]	; (800b6a4 <__sinit+0x6c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	62a2      	str	r2, [r4, #40]	; 0x28
 800b65a:	42a3      	cmp	r3, r4
 800b65c:	bf04      	itt	eq
 800b65e:	2301      	moveq	r3, #1
 800b660:	61a3      	streq	r3, [r4, #24]
 800b662:	4620      	mov	r0, r4
 800b664:	f000 f820 	bl	800b6a8 <__sfp>
 800b668:	6060      	str	r0, [r4, #4]
 800b66a:	4620      	mov	r0, r4
 800b66c:	f000 f81c 	bl	800b6a8 <__sfp>
 800b670:	60a0      	str	r0, [r4, #8]
 800b672:	4620      	mov	r0, r4
 800b674:	f000 f818 	bl	800b6a8 <__sfp>
 800b678:	2200      	movs	r2, #0
 800b67a:	60e0      	str	r0, [r4, #12]
 800b67c:	2104      	movs	r1, #4
 800b67e:	6860      	ldr	r0, [r4, #4]
 800b680:	f7ff ff82 	bl	800b588 <std>
 800b684:	68a0      	ldr	r0, [r4, #8]
 800b686:	2201      	movs	r2, #1
 800b688:	2109      	movs	r1, #9
 800b68a:	f7ff ff7d 	bl	800b588 <std>
 800b68e:	68e0      	ldr	r0, [r4, #12]
 800b690:	2202      	movs	r2, #2
 800b692:	2112      	movs	r1, #18
 800b694:	f7ff ff78 	bl	800b588 <std>
 800b698:	2301      	movs	r3, #1
 800b69a:	61a3      	str	r3, [r4, #24]
 800b69c:	e7d2      	b.n	800b644 <__sinit+0xc>
 800b69e:	bf00      	nop
 800b6a0:	0800cc9c 	.word	0x0800cc9c
 800b6a4:	0800b5d1 	.word	0x0800b5d1

0800b6a8 <__sfp>:
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	4607      	mov	r7, r0
 800b6ac:	f7ff ffac 	bl	800b608 <__sfp_lock_acquire>
 800b6b0:	4b1e      	ldr	r3, [pc, #120]	; (800b72c <__sfp+0x84>)
 800b6b2:	681e      	ldr	r6, [r3, #0]
 800b6b4:	69b3      	ldr	r3, [r6, #24]
 800b6b6:	b913      	cbnz	r3, 800b6be <__sfp+0x16>
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f7ff ffbd 	bl	800b638 <__sinit>
 800b6be:	3648      	adds	r6, #72	; 0x48
 800b6c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	d503      	bpl.n	800b6d0 <__sfp+0x28>
 800b6c8:	6833      	ldr	r3, [r6, #0]
 800b6ca:	b30b      	cbz	r3, 800b710 <__sfp+0x68>
 800b6cc:	6836      	ldr	r6, [r6, #0]
 800b6ce:	e7f7      	b.n	800b6c0 <__sfp+0x18>
 800b6d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6d4:	b9d5      	cbnz	r5, 800b70c <__sfp+0x64>
 800b6d6:	4b16      	ldr	r3, [pc, #88]	; (800b730 <__sfp+0x88>)
 800b6d8:	60e3      	str	r3, [r4, #12]
 800b6da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6de:	6665      	str	r5, [r4, #100]	; 0x64
 800b6e0:	f000 f859 	bl	800b796 <__retarget_lock_init_recursive>
 800b6e4:	f7ff ff96 	bl	800b614 <__sfp_lock_release>
 800b6e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6f0:	6025      	str	r5, [r4, #0]
 800b6f2:	61a5      	str	r5, [r4, #24]
 800b6f4:	2208      	movs	r2, #8
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6fc:	f7fc ffdc 	bl	80086b8 <memset>
 800b700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b708:	4620      	mov	r0, r4
 800b70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b70c:	3468      	adds	r4, #104	; 0x68
 800b70e:	e7d9      	b.n	800b6c4 <__sfp+0x1c>
 800b710:	2104      	movs	r1, #4
 800b712:	4638      	mov	r0, r7
 800b714:	f7ff ff62 	bl	800b5dc <__sfmoreglue>
 800b718:	4604      	mov	r4, r0
 800b71a:	6030      	str	r0, [r6, #0]
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d1d5      	bne.n	800b6cc <__sfp+0x24>
 800b720:	f7ff ff78 	bl	800b614 <__sfp_lock_release>
 800b724:	230c      	movs	r3, #12
 800b726:	603b      	str	r3, [r7, #0]
 800b728:	e7ee      	b.n	800b708 <__sfp+0x60>
 800b72a:	bf00      	nop
 800b72c:	0800cc9c 	.word	0x0800cc9c
 800b730:	ffff0001 	.word	0xffff0001

0800b734 <fiprintf>:
 800b734:	b40e      	push	{r1, r2, r3}
 800b736:	b503      	push	{r0, r1, lr}
 800b738:	4601      	mov	r1, r0
 800b73a:	ab03      	add	r3, sp, #12
 800b73c:	4805      	ldr	r0, [pc, #20]	; (800b754 <fiprintf+0x20>)
 800b73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b742:	6800      	ldr	r0, [r0, #0]
 800b744:	9301      	str	r3, [sp, #4]
 800b746:	f000 f8ad 	bl	800b8a4 <_vfiprintf_r>
 800b74a:	b002      	add	sp, #8
 800b74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b750:	b003      	add	sp, #12
 800b752:	4770      	bx	lr
 800b754:	200000a4 	.word	0x200000a4

0800b758 <_fwalk_reent>:
 800b758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b75c:	4606      	mov	r6, r0
 800b75e:	4688      	mov	r8, r1
 800b760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b764:	2700      	movs	r7, #0
 800b766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b76a:	f1b9 0901 	subs.w	r9, r9, #1
 800b76e:	d505      	bpl.n	800b77c <_fwalk_reent+0x24>
 800b770:	6824      	ldr	r4, [r4, #0]
 800b772:	2c00      	cmp	r4, #0
 800b774:	d1f7      	bne.n	800b766 <_fwalk_reent+0xe>
 800b776:	4638      	mov	r0, r7
 800b778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77c:	89ab      	ldrh	r3, [r5, #12]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d907      	bls.n	800b792 <_fwalk_reent+0x3a>
 800b782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b786:	3301      	adds	r3, #1
 800b788:	d003      	beq.n	800b792 <_fwalk_reent+0x3a>
 800b78a:	4629      	mov	r1, r5
 800b78c:	4630      	mov	r0, r6
 800b78e:	47c0      	blx	r8
 800b790:	4307      	orrs	r7, r0
 800b792:	3568      	adds	r5, #104	; 0x68
 800b794:	e7e9      	b.n	800b76a <_fwalk_reent+0x12>

0800b796 <__retarget_lock_init_recursive>:
 800b796:	4770      	bx	lr

0800b798 <__retarget_lock_acquire_recursive>:
 800b798:	4770      	bx	lr

0800b79a <__retarget_lock_release_recursive>:
 800b79a:	4770      	bx	lr

0800b79c <__ascii_mbtowc>:
 800b79c:	b082      	sub	sp, #8
 800b79e:	b901      	cbnz	r1, 800b7a2 <__ascii_mbtowc+0x6>
 800b7a0:	a901      	add	r1, sp, #4
 800b7a2:	b142      	cbz	r2, 800b7b6 <__ascii_mbtowc+0x1a>
 800b7a4:	b14b      	cbz	r3, 800b7ba <__ascii_mbtowc+0x1e>
 800b7a6:	7813      	ldrb	r3, [r2, #0]
 800b7a8:	600b      	str	r3, [r1, #0]
 800b7aa:	7812      	ldrb	r2, [r2, #0]
 800b7ac:	1e10      	subs	r0, r2, #0
 800b7ae:	bf18      	it	ne
 800b7b0:	2001      	movne	r0, #1
 800b7b2:	b002      	add	sp, #8
 800b7b4:	4770      	bx	lr
 800b7b6:	4610      	mov	r0, r2
 800b7b8:	e7fb      	b.n	800b7b2 <__ascii_mbtowc+0x16>
 800b7ba:	f06f 0001 	mvn.w	r0, #1
 800b7be:	e7f8      	b.n	800b7b2 <__ascii_mbtowc+0x16>

0800b7c0 <memmove>:
 800b7c0:	4288      	cmp	r0, r1
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	eb01 0402 	add.w	r4, r1, r2
 800b7c8:	d902      	bls.n	800b7d0 <memmove+0x10>
 800b7ca:	4284      	cmp	r4, r0
 800b7cc:	4623      	mov	r3, r4
 800b7ce:	d807      	bhi.n	800b7e0 <memmove+0x20>
 800b7d0:	1e43      	subs	r3, r0, #1
 800b7d2:	42a1      	cmp	r1, r4
 800b7d4:	d008      	beq.n	800b7e8 <memmove+0x28>
 800b7d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7de:	e7f8      	b.n	800b7d2 <memmove+0x12>
 800b7e0:	4402      	add	r2, r0
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	428a      	cmp	r2, r1
 800b7e6:	d100      	bne.n	800b7ea <memmove+0x2a>
 800b7e8:	bd10      	pop	{r4, pc}
 800b7ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7f2:	e7f7      	b.n	800b7e4 <memmove+0x24>

0800b7f4 <_realloc_r>:
 800b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	4614      	mov	r4, r2
 800b7fc:	460e      	mov	r6, r1
 800b7fe:	b921      	cbnz	r1, 800b80a <_realloc_r+0x16>
 800b800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b804:	4611      	mov	r1, r2
 800b806:	f7fc bfcb 	b.w	80087a0 <_malloc_r>
 800b80a:	b92a      	cbnz	r2, 800b818 <_realloc_r+0x24>
 800b80c:	f7fc ff5c 	bl	80086c8 <_free_r>
 800b810:	4625      	mov	r5, r4
 800b812:	4628      	mov	r0, r5
 800b814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b818:	f000 faae 	bl	800bd78 <_malloc_usable_size_r>
 800b81c:	4284      	cmp	r4, r0
 800b81e:	4607      	mov	r7, r0
 800b820:	d802      	bhi.n	800b828 <_realloc_r+0x34>
 800b822:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b826:	d812      	bhi.n	800b84e <_realloc_r+0x5a>
 800b828:	4621      	mov	r1, r4
 800b82a:	4640      	mov	r0, r8
 800b82c:	f7fc ffb8 	bl	80087a0 <_malloc_r>
 800b830:	4605      	mov	r5, r0
 800b832:	2800      	cmp	r0, #0
 800b834:	d0ed      	beq.n	800b812 <_realloc_r+0x1e>
 800b836:	42bc      	cmp	r4, r7
 800b838:	4622      	mov	r2, r4
 800b83a:	4631      	mov	r1, r6
 800b83c:	bf28      	it	cs
 800b83e:	463a      	movcs	r2, r7
 800b840:	f7fe fc96 	bl	800a170 <memcpy>
 800b844:	4631      	mov	r1, r6
 800b846:	4640      	mov	r0, r8
 800b848:	f7fc ff3e 	bl	80086c8 <_free_r>
 800b84c:	e7e1      	b.n	800b812 <_realloc_r+0x1e>
 800b84e:	4635      	mov	r5, r6
 800b850:	e7df      	b.n	800b812 <_realloc_r+0x1e>

0800b852 <__sfputc_r>:
 800b852:	6893      	ldr	r3, [r2, #8]
 800b854:	3b01      	subs	r3, #1
 800b856:	2b00      	cmp	r3, #0
 800b858:	b410      	push	{r4}
 800b85a:	6093      	str	r3, [r2, #8]
 800b85c:	da08      	bge.n	800b870 <__sfputc_r+0x1e>
 800b85e:	6994      	ldr	r4, [r2, #24]
 800b860:	42a3      	cmp	r3, r4
 800b862:	db01      	blt.n	800b868 <__sfputc_r+0x16>
 800b864:	290a      	cmp	r1, #10
 800b866:	d103      	bne.n	800b870 <__sfputc_r+0x1e>
 800b868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b86c:	f000 b94a 	b.w	800bb04 <__swbuf_r>
 800b870:	6813      	ldr	r3, [r2, #0]
 800b872:	1c58      	adds	r0, r3, #1
 800b874:	6010      	str	r0, [r2, #0]
 800b876:	7019      	strb	r1, [r3, #0]
 800b878:	4608      	mov	r0, r1
 800b87a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <__sfputs_r>:
 800b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b882:	4606      	mov	r6, r0
 800b884:	460f      	mov	r7, r1
 800b886:	4614      	mov	r4, r2
 800b888:	18d5      	adds	r5, r2, r3
 800b88a:	42ac      	cmp	r4, r5
 800b88c:	d101      	bne.n	800b892 <__sfputs_r+0x12>
 800b88e:	2000      	movs	r0, #0
 800b890:	e007      	b.n	800b8a2 <__sfputs_r+0x22>
 800b892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b896:	463a      	mov	r2, r7
 800b898:	4630      	mov	r0, r6
 800b89a:	f7ff ffda 	bl	800b852 <__sfputc_r>
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	d1f3      	bne.n	800b88a <__sfputs_r+0xa>
 800b8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8a4 <_vfiprintf_r>:
 800b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a8:	460d      	mov	r5, r1
 800b8aa:	b09d      	sub	sp, #116	; 0x74
 800b8ac:	4614      	mov	r4, r2
 800b8ae:	4698      	mov	r8, r3
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	b118      	cbz	r0, 800b8bc <_vfiprintf_r+0x18>
 800b8b4:	6983      	ldr	r3, [r0, #24]
 800b8b6:	b90b      	cbnz	r3, 800b8bc <_vfiprintf_r+0x18>
 800b8b8:	f7ff febe 	bl	800b638 <__sinit>
 800b8bc:	4b89      	ldr	r3, [pc, #548]	; (800bae4 <_vfiprintf_r+0x240>)
 800b8be:	429d      	cmp	r5, r3
 800b8c0:	d11b      	bne.n	800b8fa <_vfiprintf_r+0x56>
 800b8c2:	6875      	ldr	r5, [r6, #4]
 800b8c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c6:	07d9      	lsls	r1, r3, #31
 800b8c8:	d405      	bmi.n	800b8d6 <_vfiprintf_r+0x32>
 800b8ca:	89ab      	ldrh	r3, [r5, #12]
 800b8cc:	059a      	lsls	r2, r3, #22
 800b8ce:	d402      	bmi.n	800b8d6 <_vfiprintf_r+0x32>
 800b8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8d2:	f7ff ff61 	bl	800b798 <__retarget_lock_acquire_recursive>
 800b8d6:	89ab      	ldrh	r3, [r5, #12]
 800b8d8:	071b      	lsls	r3, r3, #28
 800b8da:	d501      	bpl.n	800b8e0 <_vfiprintf_r+0x3c>
 800b8dc:	692b      	ldr	r3, [r5, #16]
 800b8de:	b9eb      	cbnz	r3, 800b91c <_vfiprintf_r+0x78>
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	f000 f96e 	bl	800bbc4 <__swsetup_r>
 800b8e8:	b1c0      	cbz	r0, 800b91c <_vfiprintf_r+0x78>
 800b8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ec:	07dc      	lsls	r4, r3, #31
 800b8ee:	d50e      	bpl.n	800b90e <_vfiprintf_r+0x6a>
 800b8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f4:	b01d      	add	sp, #116	; 0x74
 800b8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fa:	4b7b      	ldr	r3, [pc, #492]	; (800bae8 <_vfiprintf_r+0x244>)
 800b8fc:	429d      	cmp	r5, r3
 800b8fe:	d101      	bne.n	800b904 <_vfiprintf_r+0x60>
 800b900:	68b5      	ldr	r5, [r6, #8]
 800b902:	e7df      	b.n	800b8c4 <_vfiprintf_r+0x20>
 800b904:	4b79      	ldr	r3, [pc, #484]	; (800baec <_vfiprintf_r+0x248>)
 800b906:	429d      	cmp	r5, r3
 800b908:	bf08      	it	eq
 800b90a:	68f5      	ldreq	r5, [r6, #12]
 800b90c:	e7da      	b.n	800b8c4 <_vfiprintf_r+0x20>
 800b90e:	89ab      	ldrh	r3, [r5, #12]
 800b910:	0598      	lsls	r0, r3, #22
 800b912:	d4ed      	bmi.n	800b8f0 <_vfiprintf_r+0x4c>
 800b914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b916:	f7ff ff40 	bl	800b79a <__retarget_lock_release_recursive>
 800b91a:	e7e9      	b.n	800b8f0 <_vfiprintf_r+0x4c>
 800b91c:	2300      	movs	r3, #0
 800b91e:	9309      	str	r3, [sp, #36]	; 0x24
 800b920:	2320      	movs	r3, #32
 800b922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b926:	f8cd 800c 	str.w	r8, [sp, #12]
 800b92a:	2330      	movs	r3, #48	; 0x30
 800b92c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800baf0 <_vfiprintf_r+0x24c>
 800b930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b934:	f04f 0901 	mov.w	r9, #1
 800b938:	4623      	mov	r3, r4
 800b93a:	469a      	mov	sl, r3
 800b93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b940:	b10a      	cbz	r2, 800b946 <_vfiprintf_r+0xa2>
 800b942:	2a25      	cmp	r2, #37	; 0x25
 800b944:	d1f9      	bne.n	800b93a <_vfiprintf_r+0x96>
 800b946:	ebba 0b04 	subs.w	fp, sl, r4
 800b94a:	d00b      	beq.n	800b964 <_vfiprintf_r+0xc0>
 800b94c:	465b      	mov	r3, fp
 800b94e:	4622      	mov	r2, r4
 800b950:	4629      	mov	r1, r5
 800b952:	4630      	mov	r0, r6
 800b954:	f7ff ff94 	bl	800b880 <__sfputs_r>
 800b958:	3001      	adds	r0, #1
 800b95a:	f000 80aa 	beq.w	800bab2 <_vfiprintf_r+0x20e>
 800b95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b960:	445a      	add	r2, fp
 800b962:	9209      	str	r2, [sp, #36]	; 0x24
 800b964:	f89a 3000 	ldrb.w	r3, [sl]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 80a2 	beq.w	800bab2 <_vfiprintf_r+0x20e>
 800b96e:	2300      	movs	r3, #0
 800b970:	f04f 32ff 	mov.w	r2, #4294967295
 800b974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b978:	f10a 0a01 	add.w	sl, sl, #1
 800b97c:	9304      	str	r3, [sp, #16]
 800b97e:	9307      	str	r3, [sp, #28]
 800b980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b984:	931a      	str	r3, [sp, #104]	; 0x68
 800b986:	4654      	mov	r4, sl
 800b988:	2205      	movs	r2, #5
 800b98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b98e:	4858      	ldr	r0, [pc, #352]	; (800baf0 <_vfiprintf_r+0x24c>)
 800b990:	f7f4 fc3e 	bl	8000210 <memchr>
 800b994:	9a04      	ldr	r2, [sp, #16]
 800b996:	b9d8      	cbnz	r0, 800b9d0 <_vfiprintf_r+0x12c>
 800b998:	06d1      	lsls	r1, r2, #27
 800b99a:	bf44      	itt	mi
 800b99c:	2320      	movmi	r3, #32
 800b99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9a2:	0713      	lsls	r3, r2, #28
 800b9a4:	bf44      	itt	mi
 800b9a6:	232b      	movmi	r3, #43	; 0x2b
 800b9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9b2:	d015      	beq.n	800b9e0 <_vfiprintf_r+0x13c>
 800b9b4:	9a07      	ldr	r2, [sp, #28]
 800b9b6:	4654      	mov	r4, sl
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	f04f 0c0a 	mov.w	ip, #10
 800b9be:	4621      	mov	r1, r4
 800b9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9c4:	3b30      	subs	r3, #48	; 0x30
 800b9c6:	2b09      	cmp	r3, #9
 800b9c8:	d94e      	bls.n	800ba68 <_vfiprintf_r+0x1c4>
 800b9ca:	b1b0      	cbz	r0, 800b9fa <_vfiprintf_r+0x156>
 800b9cc:	9207      	str	r2, [sp, #28]
 800b9ce:	e014      	b.n	800b9fa <_vfiprintf_r+0x156>
 800b9d0:	eba0 0308 	sub.w	r3, r0, r8
 800b9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	46a2      	mov	sl, r4
 800b9de:	e7d2      	b.n	800b986 <_vfiprintf_r+0xe2>
 800b9e0:	9b03      	ldr	r3, [sp, #12]
 800b9e2:	1d19      	adds	r1, r3, #4
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	9103      	str	r1, [sp, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bfbb      	ittet	lt
 800b9ec:	425b      	neglt	r3, r3
 800b9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b9f2:	9307      	strge	r3, [sp, #28]
 800b9f4:	9307      	strlt	r3, [sp, #28]
 800b9f6:	bfb8      	it	lt
 800b9f8:	9204      	strlt	r2, [sp, #16]
 800b9fa:	7823      	ldrb	r3, [r4, #0]
 800b9fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b9fe:	d10c      	bne.n	800ba1a <_vfiprintf_r+0x176>
 800ba00:	7863      	ldrb	r3, [r4, #1]
 800ba02:	2b2a      	cmp	r3, #42	; 0x2a
 800ba04:	d135      	bne.n	800ba72 <_vfiprintf_r+0x1ce>
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	1d1a      	adds	r2, r3, #4
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	9203      	str	r2, [sp, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	bfb8      	it	lt
 800ba12:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba16:	3402      	adds	r4, #2
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb00 <_vfiprintf_r+0x25c>
 800ba1e:	7821      	ldrb	r1, [r4, #0]
 800ba20:	2203      	movs	r2, #3
 800ba22:	4650      	mov	r0, sl
 800ba24:	f7f4 fbf4 	bl	8000210 <memchr>
 800ba28:	b140      	cbz	r0, 800ba3c <_vfiprintf_r+0x198>
 800ba2a:	2340      	movs	r3, #64	; 0x40
 800ba2c:	eba0 000a 	sub.w	r0, r0, sl
 800ba30:	fa03 f000 	lsl.w	r0, r3, r0
 800ba34:	9b04      	ldr	r3, [sp, #16]
 800ba36:	4303      	orrs	r3, r0
 800ba38:	3401      	adds	r4, #1
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba40:	482c      	ldr	r0, [pc, #176]	; (800baf4 <_vfiprintf_r+0x250>)
 800ba42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba46:	2206      	movs	r2, #6
 800ba48:	f7f4 fbe2 	bl	8000210 <memchr>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d03f      	beq.n	800bad0 <_vfiprintf_r+0x22c>
 800ba50:	4b29      	ldr	r3, [pc, #164]	; (800baf8 <_vfiprintf_r+0x254>)
 800ba52:	bb1b      	cbnz	r3, 800ba9c <_vfiprintf_r+0x1f8>
 800ba54:	9b03      	ldr	r3, [sp, #12]
 800ba56:	3307      	adds	r3, #7
 800ba58:	f023 0307 	bic.w	r3, r3, #7
 800ba5c:	3308      	adds	r3, #8
 800ba5e:	9303      	str	r3, [sp, #12]
 800ba60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba62:	443b      	add	r3, r7
 800ba64:	9309      	str	r3, [sp, #36]	; 0x24
 800ba66:	e767      	b.n	800b938 <_vfiprintf_r+0x94>
 800ba68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	2001      	movs	r0, #1
 800ba70:	e7a5      	b.n	800b9be <_vfiprintf_r+0x11a>
 800ba72:	2300      	movs	r3, #0
 800ba74:	3401      	adds	r4, #1
 800ba76:	9305      	str	r3, [sp, #20]
 800ba78:	4619      	mov	r1, r3
 800ba7a:	f04f 0c0a 	mov.w	ip, #10
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba84:	3a30      	subs	r2, #48	; 0x30
 800ba86:	2a09      	cmp	r2, #9
 800ba88:	d903      	bls.n	800ba92 <_vfiprintf_r+0x1ee>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0c5      	beq.n	800ba1a <_vfiprintf_r+0x176>
 800ba8e:	9105      	str	r1, [sp, #20]
 800ba90:	e7c3      	b.n	800ba1a <_vfiprintf_r+0x176>
 800ba92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba96:	4604      	mov	r4, r0
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e7f0      	b.n	800ba7e <_vfiprintf_r+0x1da>
 800ba9c:	ab03      	add	r3, sp, #12
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	462a      	mov	r2, r5
 800baa2:	4b16      	ldr	r3, [pc, #88]	; (800bafc <_vfiprintf_r+0x258>)
 800baa4:	a904      	add	r1, sp, #16
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7fc ff8e 	bl	80089c8 <_printf_float>
 800baac:	4607      	mov	r7, r0
 800baae:	1c78      	adds	r0, r7, #1
 800bab0:	d1d6      	bne.n	800ba60 <_vfiprintf_r+0x1bc>
 800bab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bab4:	07d9      	lsls	r1, r3, #31
 800bab6:	d405      	bmi.n	800bac4 <_vfiprintf_r+0x220>
 800bab8:	89ab      	ldrh	r3, [r5, #12]
 800baba:	059a      	lsls	r2, r3, #22
 800babc:	d402      	bmi.n	800bac4 <_vfiprintf_r+0x220>
 800babe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bac0:	f7ff fe6b 	bl	800b79a <__retarget_lock_release_recursive>
 800bac4:	89ab      	ldrh	r3, [r5, #12]
 800bac6:	065b      	lsls	r3, r3, #25
 800bac8:	f53f af12 	bmi.w	800b8f0 <_vfiprintf_r+0x4c>
 800bacc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bace:	e711      	b.n	800b8f4 <_vfiprintf_r+0x50>
 800bad0:	ab03      	add	r3, sp, #12
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	462a      	mov	r2, r5
 800bad6:	4b09      	ldr	r3, [pc, #36]	; (800bafc <_vfiprintf_r+0x258>)
 800bad8:	a904      	add	r1, sp, #16
 800bada:	4630      	mov	r0, r6
 800badc:	f7fd fa18 	bl	8008f10 <_printf_i>
 800bae0:	e7e4      	b.n	800baac <_vfiprintf_r+0x208>
 800bae2:	bf00      	nop
 800bae4:	0800d044 	.word	0x0800d044
 800bae8:	0800d064 	.word	0x0800d064
 800baec:	0800d024 	.word	0x0800d024
 800baf0:	0800cfbc 	.word	0x0800cfbc
 800baf4:	0800cfc6 	.word	0x0800cfc6
 800baf8:	080089c9 	.word	0x080089c9
 800bafc:	0800b881 	.word	0x0800b881
 800bb00:	0800cfc2 	.word	0x0800cfc2

0800bb04 <__swbuf_r>:
 800bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb06:	460e      	mov	r6, r1
 800bb08:	4614      	mov	r4, r2
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	b118      	cbz	r0, 800bb16 <__swbuf_r+0x12>
 800bb0e:	6983      	ldr	r3, [r0, #24]
 800bb10:	b90b      	cbnz	r3, 800bb16 <__swbuf_r+0x12>
 800bb12:	f7ff fd91 	bl	800b638 <__sinit>
 800bb16:	4b21      	ldr	r3, [pc, #132]	; (800bb9c <__swbuf_r+0x98>)
 800bb18:	429c      	cmp	r4, r3
 800bb1a:	d12b      	bne.n	800bb74 <__swbuf_r+0x70>
 800bb1c:	686c      	ldr	r4, [r5, #4]
 800bb1e:	69a3      	ldr	r3, [r4, #24]
 800bb20:	60a3      	str	r3, [r4, #8]
 800bb22:	89a3      	ldrh	r3, [r4, #12]
 800bb24:	071a      	lsls	r2, r3, #28
 800bb26:	d52f      	bpl.n	800bb88 <__swbuf_r+0x84>
 800bb28:	6923      	ldr	r3, [r4, #16]
 800bb2a:	b36b      	cbz	r3, 800bb88 <__swbuf_r+0x84>
 800bb2c:	6923      	ldr	r3, [r4, #16]
 800bb2e:	6820      	ldr	r0, [r4, #0]
 800bb30:	1ac0      	subs	r0, r0, r3
 800bb32:	6963      	ldr	r3, [r4, #20]
 800bb34:	b2f6      	uxtb	r6, r6
 800bb36:	4283      	cmp	r3, r0
 800bb38:	4637      	mov	r7, r6
 800bb3a:	dc04      	bgt.n	800bb46 <__swbuf_r+0x42>
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f7ff fce6 	bl	800b510 <_fflush_r>
 800bb44:	bb30      	cbnz	r0, 800bb94 <__swbuf_r+0x90>
 800bb46:	68a3      	ldr	r3, [r4, #8]
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	60a3      	str	r3, [r4, #8]
 800bb4c:	6823      	ldr	r3, [r4, #0]
 800bb4e:	1c5a      	adds	r2, r3, #1
 800bb50:	6022      	str	r2, [r4, #0]
 800bb52:	701e      	strb	r6, [r3, #0]
 800bb54:	6963      	ldr	r3, [r4, #20]
 800bb56:	3001      	adds	r0, #1
 800bb58:	4283      	cmp	r3, r0
 800bb5a:	d004      	beq.n	800bb66 <__swbuf_r+0x62>
 800bb5c:	89a3      	ldrh	r3, [r4, #12]
 800bb5e:	07db      	lsls	r3, r3, #31
 800bb60:	d506      	bpl.n	800bb70 <__swbuf_r+0x6c>
 800bb62:	2e0a      	cmp	r6, #10
 800bb64:	d104      	bne.n	800bb70 <__swbuf_r+0x6c>
 800bb66:	4621      	mov	r1, r4
 800bb68:	4628      	mov	r0, r5
 800bb6a:	f7ff fcd1 	bl	800b510 <_fflush_r>
 800bb6e:	b988      	cbnz	r0, 800bb94 <__swbuf_r+0x90>
 800bb70:	4638      	mov	r0, r7
 800bb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb74:	4b0a      	ldr	r3, [pc, #40]	; (800bba0 <__swbuf_r+0x9c>)
 800bb76:	429c      	cmp	r4, r3
 800bb78:	d101      	bne.n	800bb7e <__swbuf_r+0x7a>
 800bb7a:	68ac      	ldr	r4, [r5, #8]
 800bb7c:	e7cf      	b.n	800bb1e <__swbuf_r+0x1a>
 800bb7e:	4b09      	ldr	r3, [pc, #36]	; (800bba4 <__swbuf_r+0xa0>)
 800bb80:	429c      	cmp	r4, r3
 800bb82:	bf08      	it	eq
 800bb84:	68ec      	ldreq	r4, [r5, #12]
 800bb86:	e7ca      	b.n	800bb1e <__swbuf_r+0x1a>
 800bb88:	4621      	mov	r1, r4
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f000 f81a 	bl	800bbc4 <__swsetup_r>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d0cb      	beq.n	800bb2c <__swbuf_r+0x28>
 800bb94:	f04f 37ff 	mov.w	r7, #4294967295
 800bb98:	e7ea      	b.n	800bb70 <__swbuf_r+0x6c>
 800bb9a:	bf00      	nop
 800bb9c:	0800d044 	.word	0x0800d044
 800bba0:	0800d064 	.word	0x0800d064
 800bba4:	0800d024 	.word	0x0800d024

0800bba8 <__ascii_wctomb>:
 800bba8:	b149      	cbz	r1, 800bbbe <__ascii_wctomb+0x16>
 800bbaa:	2aff      	cmp	r2, #255	; 0xff
 800bbac:	bf85      	ittet	hi
 800bbae:	238a      	movhi	r3, #138	; 0x8a
 800bbb0:	6003      	strhi	r3, [r0, #0]
 800bbb2:	700a      	strbls	r2, [r1, #0]
 800bbb4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbb8:	bf98      	it	ls
 800bbba:	2001      	movls	r0, #1
 800bbbc:	4770      	bx	lr
 800bbbe:	4608      	mov	r0, r1
 800bbc0:	4770      	bx	lr
	...

0800bbc4 <__swsetup_r>:
 800bbc4:	4b32      	ldr	r3, [pc, #200]	; (800bc90 <__swsetup_r+0xcc>)
 800bbc6:	b570      	push	{r4, r5, r6, lr}
 800bbc8:	681d      	ldr	r5, [r3, #0]
 800bbca:	4606      	mov	r6, r0
 800bbcc:	460c      	mov	r4, r1
 800bbce:	b125      	cbz	r5, 800bbda <__swsetup_r+0x16>
 800bbd0:	69ab      	ldr	r3, [r5, #24]
 800bbd2:	b913      	cbnz	r3, 800bbda <__swsetup_r+0x16>
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f7ff fd2f 	bl	800b638 <__sinit>
 800bbda:	4b2e      	ldr	r3, [pc, #184]	; (800bc94 <__swsetup_r+0xd0>)
 800bbdc:	429c      	cmp	r4, r3
 800bbde:	d10f      	bne.n	800bc00 <__swsetup_r+0x3c>
 800bbe0:	686c      	ldr	r4, [r5, #4]
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbe8:	0719      	lsls	r1, r3, #28
 800bbea:	d42c      	bmi.n	800bc46 <__swsetup_r+0x82>
 800bbec:	06dd      	lsls	r5, r3, #27
 800bbee:	d411      	bmi.n	800bc14 <__swsetup_r+0x50>
 800bbf0:	2309      	movs	r3, #9
 800bbf2:	6033      	str	r3, [r6, #0]
 800bbf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbf8:	81a3      	strh	r3, [r4, #12]
 800bbfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfe:	e03e      	b.n	800bc7e <__swsetup_r+0xba>
 800bc00:	4b25      	ldr	r3, [pc, #148]	; (800bc98 <__swsetup_r+0xd4>)
 800bc02:	429c      	cmp	r4, r3
 800bc04:	d101      	bne.n	800bc0a <__swsetup_r+0x46>
 800bc06:	68ac      	ldr	r4, [r5, #8]
 800bc08:	e7eb      	b.n	800bbe2 <__swsetup_r+0x1e>
 800bc0a:	4b24      	ldr	r3, [pc, #144]	; (800bc9c <__swsetup_r+0xd8>)
 800bc0c:	429c      	cmp	r4, r3
 800bc0e:	bf08      	it	eq
 800bc10:	68ec      	ldreq	r4, [r5, #12]
 800bc12:	e7e6      	b.n	800bbe2 <__swsetup_r+0x1e>
 800bc14:	0758      	lsls	r0, r3, #29
 800bc16:	d512      	bpl.n	800bc3e <__swsetup_r+0x7a>
 800bc18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc1a:	b141      	cbz	r1, 800bc2e <__swsetup_r+0x6a>
 800bc1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc20:	4299      	cmp	r1, r3
 800bc22:	d002      	beq.n	800bc2a <__swsetup_r+0x66>
 800bc24:	4630      	mov	r0, r6
 800bc26:	f7fc fd4f 	bl	80086c8 <_free_r>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	6363      	str	r3, [r4, #52]	; 0x34
 800bc2e:	89a3      	ldrh	r3, [r4, #12]
 800bc30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	2300      	movs	r3, #0
 800bc38:	6063      	str	r3, [r4, #4]
 800bc3a:	6923      	ldr	r3, [r4, #16]
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	89a3      	ldrh	r3, [r4, #12]
 800bc40:	f043 0308 	orr.w	r3, r3, #8
 800bc44:	81a3      	strh	r3, [r4, #12]
 800bc46:	6923      	ldr	r3, [r4, #16]
 800bc48:	b94b      	cbnz	r3, 800bc5e <__swsetup_r+0x9a>
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc54:	d003      	beq.n	800bc5e <__swsetup_r+0x9a>
 800bc56:	4621      	mov	r1, r4
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f000 f84d 	bl	800bcf8 <__smakebuf_r>
 800bc5e:	89a0      	ldrh	r0, [r4, #12]
 800bc60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc64:	f010 0301 	ands.w	r3, r0, #1
 800bc68:	d00a      	beq.n	800bc80 <__swsetup_r+0xbc>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60a3      	str	r3, [r4, #8]
 800bc6e:	6963      	ldr	r3, [r4, #20]
 800bc70:	425b      	negs	r3, r3
 800bc72:	61a3      	str	r3, [r4, #24]
 800bc74:	6923      	ldr	r3, [r4, #16]
 800bc76:	b943      	cbnz	r3, 800bc8a <__swsetup_r+0xc6>
 800bc78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc7c:	d1ba      	bne.n	800bbf4 <__swsetup_r+0x30>
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
 800bc80:	0781      	lsls	r1, r0, #30
 800bc82:	bf58      	it	pl
 800bc84:	6963      	ldrpl	r3, [r4, #20]
 800bc86:	60a3      	str	r3, [r4, #8]
 800bc88:	e7f4      	b.n	800bc74 <__swsetup_r+0xb0>
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	e7f7      	b.n	800bc7e <__swsetup_r+0xba>
 800bc8e:	bf00      	nop
 800bc90:	200000a4 	.word	0x200000a4
 800bc94:	0800d044 	.word	0x0800d044
 800bc98:	0800d064 	.word	0x0800d064
 800bc9c:	0800d024 	.word	0x0800d024

0800bca0 <abort>:
 800bca0:	b508      	push	{r3, lr}
 800bca2:	2006      	movs	r0, #6
 800bca4:	f000 f898 	bl	800bdd8 <raise>
 800bca8:	2001      	movs	r0, #1
 800bcaa:	f7f6 fe51 	bl	8002950 <_exit>

0800bcae <__swhatbuf_r>:
 800bcae:	b570      	push	{r4, r5, r6, lr}
 800bcb0:	460e      	mov	r6, r1
 800bcb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb6:	2900      	cmp	r1, #0
 800bcb8:	b096      	sub	sp, #88	; 0x58
 800bcba:	4614      	mov	r4, r2
 800bcbc:	461d      	mov	r5, r3
 800bcbe:	da08      	bge.n	800bcd2 <__swhatbuf_r+0x24>
 800bcc0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	602a      	str	r2, [r5, #0]
 800bcc8:	061a      	lsls	r2, r3, #24
 800bcca:	d410      	bmi.n	800bcee <__swhatbuf_r+0x40>
 800bccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcd0:	e00e      	b.n	800bcf0 <__swhatbuf_r+0x42>
 800bcd2:	466a      	mov	r2, sp
 800bcd4:	f000 f89c 	bl	800be10 <_fstat_r>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	dbf1      	blt.n	800bcc0 <__swhatbuf_r+0x12>
 800bcdc:	9a01      	ldr	r2, [sp, #4]
 800bcde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bce2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bce6:	425a      	negs	r2, r3
 800bce8:	415a      	adcs	r2, r3
 800bcea:	602a      	str	r2, [r5, #0]
 800bcec:	e7ee      	b.n	800bccc <__swhatbuf_r+0x1e>
 800bcee:	2340      	movs	r3, #64	; 0x40
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	6023      	str	r3, [r4, #0]
 800bcf4:	b016      	add	sp, #88	; 0x58
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}

0800bcf8 <__smakebuf_r>:
 800bcf8:	898b      	ldrh	r3, [r1, #12]
 800bcfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcfc:	079d      	lsls	r5, r3, #30
 800bcfe:	4606      	mov	r6, r0
 800bd00:	460c      	mov	r4, r1
 800bd02:	d507      	bpl.n	800bd14 <__smakebuf_r+0x1c>
 800bd04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	6123      	str	r3, [r4, #16]
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	6163      	str	r3, [r4, #20]
 800bd10:	b002      	add	sp, #8
 800bd12:	bd70      	pop	{r4, r5, r6, pc}
 800bd14:	ab01      	add	r3, sp, #4
 800bd16:	466a      	mov	r2, sp
 800bd18:	f7ff ffc9 	bl	800bcae <__swhatbuf_r>
 800bd1c:	9900      	ldr	r1, [sp, #0]
 800bd1e:	4605      	mov	r5, r0
 800bd20:	4630      	mov	r0, r6
 800bd22:	f7fc fd3d 	bl	80087a0 <_malloc_r>
 800bd26:	b948      	cbnz	r0, 800bd3c <__smakebuf_r+0x44>
 800bd28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2c:	059a      	lsls	r2, r3, #22
 800bd2e:	d4ef      	bmi.n	800bd10 <__smakebuf_r+0x18>
 800bd30:	f023 0303 	bic.w	r3, r3, #3
 800bd34:	f043 0302 	orr.w	r3, r3, #2
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	e7e3      	b.n	800bd04 <__smakebuf_r+0xc>
 800bd3c:	4b0d      	ldr	r3, [pc, #52]	; (800bd74 <__smakebuf_r+0x7c>)
 800bd3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	6020      	str	r0, [r4, #0]
 800bd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	9b00      	ldr	r3, [sp, #0]
 800bd4c:	6163      	str	r3, [r4, #20]
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	6120      	str	r0, [r4, #16]
 800bd52:	b15b      	cbz	r3, 800bd6c <__smakebuf_r+0x74>
 800bd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f000 f86b 	bl	800be34 <_isatty_r>
 800bd5e:	b128      	cbz	r0, 800bd6c <__smakebuf_r+0x74>
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	f023 0303 	bic.w	r3, r3, #3
 800bd66:	f043 0301 	orr.w	r3, r3, #1
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	89a0      	ldrh	r0, [r4, #12]
 800bd6e:	4305      	orrs	r5, r0
 800bd70:	81a5      	strh	r5, [r4, #12]
 800bd72:	e7cd      	b.n	800bd10 <__smakebuf_r+0x18>
 800bd74:	0800b5d1 	.word	0x0800b5d1

0800bd78 <_malloc_usable_size_r>:
 800bd78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd7c:	1f18      	subs	r0, r3, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	bfbc      	itt	lt
 800bd82:	580b      	ldrlt	r3, [r1, r0]
 800bd84:	18c0      	addlt	r0, r0, r3
 800bd86:	4770      	bx	lr

0800bd88 <_raise_r>:
 800bd88:	291f      	cmp	r1, #31
 800bd8a:	b538      	push	{r3, r4, r5, lr}
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	460d      	mov	r5, r1
 800bd90:	d904      	bls.n	800bd9c <_raise_r+0x14>
 800bd92:	2316      	movs	r3, #22
 800bd94:	6003      	str	r3, [r0, #0]
 800bd96:	f04f 30ff 	mov.w	r0, #4294967295
 800bd9a:	bd38      	pop	{r3, r4, r5, pc}
 800bd9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd9e:	b112      	cbz	r2, 800bda6 <_raise_r+0x1e>
 800bda0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bda4:	b94b      	cbnz	r3, 800bdba <_raise_r+0x32>
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 f830 	bl	800be0c <_getpid_r>
 800bdac:	462a      	mov	r2, r5
 800bdae:	4601      	mov	r1, r0
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdb6:	f000 b817 	b.w	800bde8 <_kill_r>
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d00a      	beq.n	800bdd4 <_raise_r+0x4c>
 800bdbe:	1c59      	adds	r1, r3, #1
 800bdc0:	d103      	bne.n	800bdca <_raise_r+0x42>
 800bdc2:	2316      	movs	r3, #22
 800bdc4:	6003      	str	r3, [r0, #0]
 800bdc6:	2001      	movs	r0, #1
 800bdc8:	e7e7      	b.n	800bd9a <_raise_r+0x12>
 800bdca:	2400      	movs	r4, #0
 800bdcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	4798      	blx	r3
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	e7e0      	b.n	800bd9a <_raise_r+0x12>

0800bdd8 <raise>:
 800bdd8:	4b02      	ldr	r3, [pc, #8]	; (800bde4 <raise+0xc>)
 800bdda:	4601      	mov	r1, r0
 800bddc:	6818      	ldr	r0, [r3, #0]
 800bdde:	f7ff bfd3 	b.w	800bd88 <_raise_r>
 800bde2:	bf00      	nop
 800bde4:	200000a4 	.word	0x200000a4

0800bde8 <_kill_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d07      	ldr	r5, [pc, #28]	; (800be08 <_kill_r+0x20>)
 800bdec:	2300      	movs	r3, #0
 800bdee:	4604      	mov	r4, r0
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	602b      	str	r3, [r5, #0]
 800bdf6:	f7f6 fd9b 	bl	8002930 <_kill>
 800bdfa:	1c43      	adds	r3, r0, #1
 800bdfc:	d102      	bne.n	800be04 <_kill_r+0x1c>
 800bdfe:	682b      	ldr	r3, [r5, #0]
 800be00:	b103      	cbz	r3, 800be04 <_kill_r+0x1c>
 800be02:	6023      	str	r3, [r4, #0]
 800be04:	bd38      	pop	{r3, r4, r5, pc}
 800be06:	bf00      	nop
 800be08:	20000540 	.word	0x20000540

0800be0c <_getpid_r>:
 800be0c:	f7f6 bd88 	b.w	8002920 <_getpid>

0800be10 <_fstat_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	4d07      	ldr	r5, [pc, #28]	; (800be30 <_fstat_r+0x20>)
 800be14:	2300      	movs	r3, #0
 800be16:	4604      	mov	r4, r0
 800be18:	4608      	mov	r0, r1
 800be1a:	4611      	mov	r1, r2
 800be1c:	602b      	str	r3, [r5, #0]
 800be1e:	f7f6 fde6 	bl	80029ee <_fstat>
 800be22:	1c43      	adds	r3, r0, #1
 800be24:	d102      	bne.n	800be2c <_fstat_r+0x1c>
 800be26:	682b      	ldr	r3, [r5, #0]
 800be28:	b103      	cbz	r3, 800be2c <_fstat_r+0x1c>
 800be2a:	6023      	str	r3, [r4, #0]
 800be2c:	bd38      	pop	{r3, r4, r5, pc}
 800be2e:	bf00      	nop
 800be30:	20000540 	.word	0x20000540

0800be34 <_isatty_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4d06      	ldr	r5, [pc, #24]	; (800be50 <_isatty_r+0x1c>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4604      	mov	r4, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	602b      	str	r3, [r5, #0]
 800be40:	f7f6 fde5 	bl	8002a0e <_isatty>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_isatty_r+0x1a>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_isatty_r+0x1a>
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	20000540 	.word	0x20000540
 800be54:	00000000 	.word	0x00000000

0800be58 <atan>:
 800be58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	ec55 4b10 	vmov	r4, r5, d0
 800be60:	4bc3      	ldr	r3, [pc, #780]	; (800c170 <atan+0x318>)
 800be62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be66:	429e      	cmp	r6, r3
 800be68:	46ab      	mov	fp, r5
 800be6a:	dd18      	ble.n	800be9e <atan+0x46>
 800be6c:	4bc1      	ldr	r3, [pc, #772]	; (800c174 <atan+0x31c>)
 800be6e:	429e      	cmp	r6, r3
 800be70:	dc01      	bgt.n	800be76 <atan+0x1e>
 800be72:	d109      	bne.n	800be88 <atan+0x30>
 800be74:	b144      	cbz	r4, 800be88 <atan+0x30>
 800be76:	4622      	mov	r2, r4
 800be78:	462b      	mov	r3, r5
 800be7a:	4620      	mov	r0, r4
 800be7c:	4629      	mov	r1, r5
 800be7e:	f7f4 fa1d 	bl	80002bc <__adddf3>
 800be82:	4604      	mov	r4, r0
 800be84:	460d      	mov	r5, r1
 800be86:	e006      	b.n	800be96 <atan+0x3e>
 800be88:	f1bb 0f00 	cmp.w	fp, #0
 800be8c:	f300 8131 	bgt.w	800c0f2 <atan+0x29a>
 800be90:	a59b      	add	r5, pc, #620	; (adr r5, 800c100 <atan+0x2a8>)
 800be92:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be96:	ec45 4b10 	vmov	d0, r4, r5
 800be9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9e:	4bb6      	ldr	r3, [pc, #728]	; (800c178 <atan+0x320>)
 800bea0:	429e      	cmp	r6, r3
 800bea2:	dc14      	bgt.n	800bece <atan+0x76>
 800bea4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bea8:	429e      	cmp	r6, r3
 800beaa:	dc0d      	bgt.n	800bec8 <atan+0x70>
 800beac:	a396      	add	r3, pc, #600	; (adr r3, 800c108 <atan+0x2b0>)
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	ee10 0a10 	vmov	r0, s0
 800beb6:	4629      	mov	r1, r5
 800beb8:	f7f4 fa00 	bl	80002bc <__adddf3>
 800bebc:	4baf      	ldr	r3, [pc, #700]	; (800c17c <atan+0x324>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	f7f4 fe42 	bl	8000b48 <__aeabi_dcmpgt>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d1e6      	bne.n	800be96 <atan+0x3e>
 800bec8:	f04f 3aff 	mov.w	sl, #4294967295
 800becc:	e02b      	b.n	800bf26 <atan+0xce>
 800bece:	f000 f963 	bl	800c198 <fabs>
 800bed2:	4bab      	ldr	r3, [pc, #684]	; (800c180 <atan+0x328>)
 800bed4:	429e      	cmp	r6, r3
 800bed6:	ec55 4b10 	vmov	r4, r5, d0
 800beda:	f300 80bf 	bgt.w	800c05c <atan+0x204>
 800bede:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bee2:	429e      	cmp	r6, r3
 800bee4:	f300 80a0 	bgt.w	800c028 <atan+0x1d0>
 800bee8:	ee10 2a10 	vmov	r2, s0
 800beec:	ee10 0a10 	vmov	r0, s0
 800bef0:	462b      	mov	r3, r5
 800bef2:	4629      	mov	r1, r5
 800bef4:	f7f4 f9e2 	bl	80002bc <__adddf3>
 800bef8:	4ba0      	ldr	r3, [pc, #640]	; (800c17c <atan+0x324>)
 800befa:	2200      	movs	r2, #0
 800befc:	f7f4 f9dc 	bl	80002b8 <__aeabi_dsub>
 800bf00:	2200      	movs	r2, #0
 800bf02:	4606      	mov	r6, r0
 800bf04:	460f      	mov	r7, r1
 800bf06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	f7f4 f9d5 	bl	80002bc <__adddf3>
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	4630      	mov	r0, r6
 800bf18:	4639      	mov	r1, r7
 800bf1a:	f7f4 fcaf 	bl	800087c <__aeabi_ddiv>
 800bf1e:	f04f 0a00 	mov.w	sl, #0
 800bf22:	4604      	mov	r4, r0
 800bf24:	460d      	mov	r5, r1
 800bf26:	4622      	mov	r2, r4
 800bf28:	462b      	mov	r3, r5
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	f7f4 fb7b 	bl	8000628 <__aeabi_dmul>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	4680      	mov	r8, r0
 800bf38:	4689      	mov	r9, r1
 800bf3a:	f7f4 fb75 	bl	8000628 <__aeabi_dmul>
 800bf3e:	a374      	add	r3, pc, #464	; (adr r3, 800c110 <atan+0x2b8>)
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	4606      	mov	r6, r0
 800bf46:	460f      	mov	r7, r1
 800bf48:	f7f4 fb6e 	bl	8000628 <__aeabi_dmul>
 800bf4c:	a372      	add	r3, pc, #456	; (adr r3, 800c118 <atan+0x2c0>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	f7f4 f9b3 	bl	80002bc <__adddf3>
 800bf56:	4632      	mov	r2, r6
 800bf58:	463b      	mov	r3, r7
 800bf5a:	f7f4 fb65 	bl	8000628 <__aeabi_dmul>
 800bf5e:	a370      	add	r3, pc, #448	; (adr r3, 800c120 <atan+0x2c8>)
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	f7f4 f9aa 	bl	80002bc <__adddf3>
 800bf68:	4632      	mov	r2, r6
 800bf6a:	463b      	mov	r3, r7
 800bf6c:	f7f4 fb5c 	bl	8000628 <__aeabi_dmul>
 800bf70:	a36d      	add	r3, pc, #436	; (adr r3, 800c128 <atan+0x2d0>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	f7f4 f9a1 	bl	80002bc <__adddf3>
 800bf7a:	4632      	mov	r2, r6
 800bf7c:	463b      	mov	r3, r7
 800bf7e:	f7f4 fb53 	bl	8000628 <__aeabi_dmul>
 800bf82:	a36b      	add	r3, pc, #428	; (adr r3, 800c130 <atan+0x2d8>)
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f7f4 f998 	bl	80002bc <__adddf3>
 800bf8c:	4632      	mov	r2, r6
 800bf8e:	463b      	mov	r3, r7
 800bf90:	f7f4 fb4a 	bl	8000628 <__aeabi_dmul>
 800bf94:	a368      	add	r3, pc, #416	; (adr r3, 800c138 <atan+0x2e0>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 f98f 	bl	80002bc <__adddf3>
 800bf9e:	4642      	mov	r2, r8
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	f7f4 fb41 	bl	8000628 <__aeabi_dmul>
 800bfa6:	a366      	add	r3, pc, #408	; (adr r3, 800c140 <atan+0x2e8>)
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	4680      	mov	r8, r0
 800bfae:	4689      	mov	r9, r1
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	4639      	mov	r1, r7
 800bfb4:	f7f4 fb38 	bl	8000628 <__aeabi_dmul>
 800bfb8:	a363      	add	r3, pc, #396	; (adr r3, 800c148 <atan+0x2f0>)
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	f7f4 f97b 	bl	80002b8 <__aeabi_dsub>
 800bfc2:	4632      	mov	r2, r6
 800bfc4:	463b      	mov	r3, r7
 800bfc6:	f7f4 fb2f 	bl	8000628 <__aeabi_dmul>
 800bfca:	a361      	add	r3, pc, #388	; (adr r3, 800c150 <atan+0x2f8>)
 800bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd0:	f7f4 f972 	bl	80002b8 <__aeabi_dsub>
 800bfd4:	4632      	mov	r2, r6
 800bfd6:	463b      	mov	r3, r7
 800bfd8:	f7f4 fb26 	bl	8000628 <__aeabi_dmul>
 800bfdc:	a35e      	add	r3, pc, #376	; (adr r3, 800c158 <atan+0x300>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	f7f4 f969 	bl	80002b8 <__aeabi_dsub>
 800bfe6:	4632      	mov	r2, r6
 800bfe8:	463b      	mov	r3, r7
 800bfea:	f7f4 fb1d 	bl	8000628 <__aeabi_dmul>
 800bfee:	a35c      	add	r3, pc, #368	; (adr r3, 800c160 <atan+0x308>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	f7f4 f960 	bl	80002b8 <__aeabi_dsub>
 800bff8:	4632      	mov	r2, r6
 800bffa:	463b      	mov	r3, r7
 800bffc:	f7f4 fb14 	bl	8000628 <__aeabi_dmul>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4640      	mov	r0, r8
 800c006:	4649      	mov	r1, r9
 800c008:	f7f4 f958 	bl	80002bc <__adddf3>
 800c00c:	4622      	mov	r2, r4
 800c00e:	462b      	mov	r3, r5
 800c010:	f7f4 fb0a 	bl	8000628 <__aeabi_dmul>
 800c014:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	d14b      	bne.n	800c0b6 <atan+0x25e>
 800c01e:	4620      	mov	r0, r4
 800c020:	4629      	mov	r1, r5
 800c022:	f7f4 f949 	bl	80002b8 <__aeabi_dsub>
 800c026:	e72c      	b.n	800be82 <atan+0x2a>
 800c028:	ee10 0a10 	vmov	r0, s0
 800c02c:	4b53      	ldr	r3, [pc, #332]	; (800c17c <atan+0x324>)
 800c02e:	2200      	movs	r2, #0
 800c030:	4629      	mov	r1, r5
 800c032:	f7f4 f941 	bl	80002b8 <__aeabi_dsub>
 800c036:	4b51      	ldr	r3, [pc, #324]	; (800c17c <atan+0x324>)
 800c038:	4606      	mov	r6, r0
 800c03a:	460f      	mov	r7, r1
 800c03c:	2200      	movs	r2, #0
 800c03e:	4620      	mov	r0, r4
 800c040:	4629      	mov	r1, r5
 800c042:	f7f4 f93b 	bl	80002bc <__adddf3>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4630      	mov	r0, r6
 800c04c:	4639      	mov	r1, r7
 800c04e:	f7f4 fc15 	bl	800087c <__aeabi_ddiv>
 800c052:	f04f 0a01 	mov.w	sl, #1
 800c056:	4604      	mov	r4, r0
 800c058:	460d      	mov	r5, r1
 800c05a:	e764      	b.n	800bf26 <atan+0xce>
 800c05c:	4b49      	ldr	r3, [pc, #292]	; (800c184 <atan+0x32c>)
 800c05e:	429e      	cmp	r6, r3
 800c060:	da1d      	bge.n	800c09e <atan+0x246>
 800c062:	ee10 0a10 	vmov	r0, s0
 800c066:	4b48      	ldr	r3, [pc, #288]	; (800c188 <atan+0x330>)
 800c068:	2200      	movs	r2, #0
 800c06a:	4629      	mov	r1, r5
 800c06c:	f7f4 f924 	bl	80002b8 <__aeabi_dsub>
 800c070:	4b45      	ldr	r3, [pc, #276]	; (800c188 <atan+0x330>)
 800c072:	4606      	mov	r6, r0
 800c074:	460f      	mov	r7, r1
 800c076:	2200      	movs	r2, #0
 800c078:	4620      	mov	r0, r4
 800c07a:	4629      	mov	r1, r5
 800c07c:	f7f4 fad4 	bl	8000628 <__aeabi_dmul>
 800c080:	4b3e      	ldr	r3, [pc, #248]	; (800c17c <atan+0x324>)
 800c082:	2200      	movs	r2, #0
 800c084:	f7f4 f91a 	bl	80002bc <__adddf3>
 800c088:	4602      	mov	r2, r0
 800c08a:	460b      	mov	r3, r1
 800c08c:	4630      	mov	r0, r6
 800c08e:	4639      	mov	r1, r7
 800c090:	f7f4 fbf4 	bl	800087c <__aeabi_ddiv>
 800c094:	f04f 0a02 	mov.w	sl, #2
 800c098:	4604      	mov	r4, r0
 800c09a:	460d      	mov	r5, r1
 800c09c:	e743      	b.n	800bf26 <atan+0xce>
 800c09e:	462b      	mov	r3, r5
 800c0a0:	ee10 2a10 	vmov	r2, s0
 800c0a4:	4939      	ldr	r1, [pc, #228]	; (800c18c <atan+0x334>)
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	f7f4 fbe8 	bl	800087c <__aeabi_ddiv>
 800c0ac:	f04f 0a03 	mov.w	sl, #3
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	460d      	mov	r5, r1
 800c0b4:	e737      	b.n	800bf26 <atan+0xce>
 800c0b6:	4b36      	ldr	r3, [pc, #216]	; (800c190 <atan+0x338>)
 800c0b8:	4e36      	ldr	r6, [pc, #216]	; (800c194 <atan+0x33c>)
 800c0ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c0be:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c0c2:	e9da 2300 	ldrd	r2, r3, [sl]
 800c0c6:	f7f4 f8f7 	bl	80002b8 <__aeabi_dsub>
 800c0ca:	4622      	mov	r2, r4
 800c0cc:	462b      	mov	r3, r5
 800c0ce:	f7f4 f8f3 	bl	80002b8 <__aeabi_dsub>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c0da:	f7f4 f8ed 	bl	80002b8 <__aeabi_dsub>
 800c0de:	f1bb 0f00 	cmp.w	fp, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	460d      	mov	r5, r1
 800c0e6:	f6bf aed6 	bge.w	800be96 <atan+0x3e>
 800c0ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0ee:	461d      	mov	r5, r3
 800c0f0:	e6d1      	b.n	800be96 <atan+0x3e>
 800c0f2:	a51d      	add	r5, pc, #116	; (adr r5, 800c168 <atan+0x310>)
 800c0f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c0f8:	e6cd      	b.n	800be96 <atan+0x3e>
 800c0fa:	bf00      	nop
 800c0fc:	f3af 8000 	nop.w
 800c100:	54442d18 	.word	0x54442d18
 800c104:	bff921fb 	.word	0xbff921fb
 800c108:	8800759c 	.word	0x8800759c
 800c10c:	7e37e43c 	.word	0x7e37e43c
 800c110:	e322da11 	.word	0xe322da11
 800c114:	3f90ad3a 	.word	0x3f90ad3a
 800c118:	24760deb 	.word	0x24760deb
 800c11c:	3fa97b4b 	.word	0x3fa97b4b
 800c120:	a0d03d51 	.word	0xa0d03d51
 800c124:	3fb10d66 	.word	0x3fb10d66
 800c128:	c54c206e 	.word	0xc54c206e
 800c12c:	3fb745cd 	.word	0x3fb745cd
 800c130:	920083ff 	.word	0x920083ff
 800c134:	3fc24924 	.word	0x3fc24924
 800c138:	5555550d 	.word	0x5555550d
 800c13c:	3fd55555 	.word	0x3fd55555
 800c140:	2c6a6c2f 	.word	0x2c6a6c2f
 800c144:	bfa2b444 	.word	0xbfa2b444
 800c148:	52defd9a 	.word	0x52defd9a
 800c14c:	3fadde2d 	.word	0x3fadde2d
 800c150:	af749a6d 	.word	0xaf749a6d
 800c154:	3fb3b0f2 	.word	0x3fb3b0f2
 800c158:	fe231671 	.word	0xfe231671
 800c15c:	3fbc71c6 	.word	0x3fbc71c6
 800c160:	9998ebc4 	.word	0x9998ebc4
 800c164:	3fc99999 	.word	0x3fc99999
 800c168:	54442d18 	.word	0x54442d18
 800c16c:	3ff921fb 	.word	0x3ff921fb
 800c170:	440fffff 	.word	0x440fffff
 800c174:	7ff00000 	.word	0x7ff00000
 800c178:	3fdbffff 	.word	0x3fdbffff
 800c17c:	3ff00000 	.word	0x3ff00000
 800c180:	3ff2ffff 	.word	0x3ff2ffff
 800c184:	40038000 	.word	0x40038000
 800c188:	3ff80000 	.word	0x3ff80000
 800c18c:	bff00000 	.word	0xbff00000
 800c190:	0800d0b0 	.word	0x0800d0b0
 800c194:	0800d090 	.word	0x0800d090

0800c198 <fabs>:
 800c198:	ec51 0b10 	vmov	r0, r1, d0
 800c19c:	ee10 2a10 	vmov	r2, s0
 800c1a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1a4:	ec43 2b10 	vmov	d0, r2, r3
 800c1a8:	4770      	bx	lr

0800c1aa <atan2>:
 800c1aa:	f000 b82d 	b.w	800c208 <__ieee754_atan2>

0800c1ae <sqrt>:
 800c1ae:	b538      	push	{r3, r4, r5, lr}
 800c1b0:	ed2d 8b02 	vpush	{d8}
 800c1b4:	ec55 4b10 	vmov	r4, r5, d0
 800c1b8:	f000 f8f0 	bl	800c39c <__ieee754_sqrt>
 800c1bc:	4622      	mov	r2, r4
 800c1be:	462b      	mov	r3, r5
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	eeb0 8a40 	vmov.f32	s16, s0
 800c1c8:	eef0 8a60 	vmov.f32	s17, s1
 800c1cc:	f7f4 fcc6 	bl	8000b5c <__aeabi_dcmpun>
 800c1d0:	b990      	cbnz	r0, 800c1f8 <sqrt+0x4a>
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	4629      	mov	r1, r5
 800c1da:	f7f4 fc97 	bl	8000b0c <__aeabi_dcmplt>
 800c1de:	b158      	cbz	r0, 800c1f8 <sqrt+0x4a>
 800c1e0:	f7fc fa30 	bl	8008644 <__errno>
 800c1e4:	2321      	movs	r3, #33	; 0x21
 800c1e6:	6003      	str	r3, [r0, #0]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	f7f4 fb44 	bl	800087c <__aeabi_ddiv>
 800c1f4:	ec41 0b18 	vmov	d8, r0, r1
 800c1f8:	eeb0 0a48 	vmov.f32	s0, s16
 800c1fc:	eef0 0a68 	vmov.f32	s1, s17
 800c200:	ecbd 8b02 	vpop	{d8}
 800c204:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c208 <__ieee754_atan2>:
 800c208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c20c:	ec57 6b11 	vmov	r6, r7, d1
 800c210:	4273      	negs	r3, r6
 800c212:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c398 <__ieee754_atan2+0x190>
 800c216:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c21a:	4333      	orrs	r3, r6
 800c21c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c220:	4573      	cmp	r3, lr
 800c222:	ec51 0b10 	vmov	r0, r1, d0
 800c226:	ee11 8a10 	vmov	r8, s2
 800c22a:	d80a      	bhi.n	800c242 <__ieee754_atan2+0x3a>
 800c22c:	4244      	negs	r4, r0
 800c22e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c232:	4304      	orrs	r4, r0
 800c234:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c238:	4574      	cmp	r4, lr
 800c23a:	ee10 9a10 	vmov	r9, s0
 800c23e:	468c      	mov	ip, r1
 800c240:	d907      	bls.n	800c252 <__ieee754_atan2+0x4a>
 800c242:	4632      	mov	r2, r6
 800c244:	463b      	mov	r3, r7
 800c246:	f7f4 f839 	bl	80002bc <__adddf3>
 800c24a:	ec41 0b10 	vmov	d0, r0, r1
 800c24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c252:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c256:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c25a:	4334      	orrs	r4, r6
 800c25c:	d103      	bne.n	800c266 <__ieee754_atan2+0x5e>
 800c25e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c262:	f7ff bdf9 	b.w	800be58 <atan>
 800c266:	17bc      	asrs	r4, r7, #30
 800c268:	f004 0402 	and.w	r4, r4, #2
 800c26c:	ea53 0909 	orrs.w	r9, r3, r9
 800c270:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c274:	d107      	bne.n	800c286 <__ieee754_atan2+0x7e>
 800c276:	2c02      	cmp	r4, #2
 800c278:	d060      	beq.n	800c33c <__ieee754_atan2+0x134>
 800c27a:	2c03      	cmp	r4, #3
 800c27c:	d1e5      	bne.n	800c24a <__ieee754_atan2+0x42>
 800c27e:	a142      	add	r1, pc, #264	; (adr r1, 800c388 <__ieee754_atan2+0x180>)
 800c280:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c284:	e7e1      	b.n	800c24a <__ieee754_atan2+0x42>
 800c286:	ea52 0808 	orrs.w	r8, r2, r8
 800c28a:	d106      	bne.n	800c29a <__ieee754_atan2+0x92>
 800c28c:	f1bc 0f00 	cmp.w	ip, #0
 800c290:	da5f      	bge.n	800c352 <__ieee754_atan2+0x14a>
 800c292:	a13f      	add	r1, pc, #252	; (adr r1, 800c390 <__ieee754_atan2+0x188>)
 800c294:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c298:	e7d7      	b.n	800c24a <__ieee754_atan2+0x42>
 800c29a:	4572      	cmp	r2, lr
 800c29c:	d10f      	bne.n	800c2be <__ieee754_atan2+0xb6>
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	f104 34ff 	add.w	r4, r4, #4294967295
 800c2a4:	d107      	bne.n	800c2b6 <__ieee754_atan2+0xae>
 800c2a6:	2c02      	cmp	r4, #2
 800c2a8:	d84c      	bhi.n	800c344 <__ieee754_atan2+0x13c>
 800c2aa:	4b35      	ldr	r3, [pc, #212]	; (800c380 <__ieee754_atan2+0x178>)
 800c2ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c2b0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c2b4:	e7c9      	b.n	800c24a <__ieee754_atan2+0x42>
 800c2b6:	2c02      	cmp	r4, #2
 800c2b8:	d848      	bhi.n	800c34c <__ieee754_atan2+0x144>
 800c2ba:	4b32      	ldr	r3, [pc, #200]	; (800c384 <__ieee754_atan2+0x17c>)
 800c2bc:	e7f6      	b.n	800c2ac <__ieee754_atan2+0xa4>
 800c2be:	4573      	cmp	r3, lr
 800c2c0:	d0e4      	beq.n	800c28c <__ieee754_atan2+0x84>
 800c2c2:	1a9b      	subs	r3, r3, r2
 800c2c4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c2c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c2cc:	da1e      	bge.n	800c30c <__ieee754_atan2+0x104>
 800c2ce:	2f00      	cmp	r7, #0
 800c2d0:	da01      	bge.n	800c2d6 <__ieee754_atan2+0xce>
 800c2d2:	323c      	adds	r2, #60	; 0x3c
 800c2d4:	db1e      	blt.n	800c314 <__ieee754_atan2+0x10c>
 800c2d6:	4632      	mov	r2, r6
 800c2d8:	463b      	mov	r3, r7
 800c2da:	f7f4 facf 	bl	800087c <__aeabi_ddiv>
 800c2de:	ec41 0b10 	vmov	d0, r0, r1
 800c2e2:	f7ff ff59 	bl	800c198 <fabs>
 800c2e6:	f7ff fdb7 	bl	800be58 <atan>
 800c2ea:	ec51 0b10 	vmov	r0, r1, d0
 800c2ee:	2c01      	cmp	r4, #1
 800c2f0:	d013      	beq.n	800c31a <__ieee754_atan2+0x112>
 800c2f2:	2c02      	cmp	r4, #2
 800c2f4:	d015      	beq.n	800c322 <__ieee754_atan2+0x11a>
 800c2f6:	2c00      	cmp	r4, #0
 800c2f8:	d0a7      	beq.n	800c24a <__ieee754_atan2+0x42>
 800c2fa:	a319      	add	r3, pc, #100	; (adr r3, 800c360 <__ieee754_atan2+0x158>)
 800c2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c300:	f7f3 ffda 	bl	80002b8 <__aeabi_dsub>
 800c304:	a318      	add	r3, pc, #96	; (adr r3, 800c368 <__ieee754_atan2+0x160>)
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	e014      	b.n	800c336 <__ieee754_atan2+0x12e>
 800c30c:	a118      	add	r1, pc, #96	; (adr r1, 800c370 <__ieee754_atan2+0x168>)
 800c30e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c312:	e7ec      	b.n	800c2ee <__ieee754_atan2+0xe6>
 800c314:	2000      	movs	r0, #0
 800c316:	2100      	movs	r1, #0
 800c318:	e7e9      	b.n	800c2ee <__ieee754_atan2+0xe6>
 800c31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c31e:	4619      	mov	r1, r3
 800c320:	e793      	b.n	800c24a <__ieee754_atan2+0x42>
 800c322:	a30f      	add	r3, pc, #60	; (adr r3, 800c360 <__ieee754_atan2+0x158>)
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	f7f3 ffc6 	bl	80002b8 <__aeabi_dsub>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	a10d      	add	r1, pc, #52	; (adr r1, 800c368 <__ieee754_atan2+0x160>)
 800c332:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c336:	f7f3 ffbf 	bl	80002b8 <__aeabi_dsub>
 800c33a:	e786      	b.n	800c24a <__ieee754_atan2+0x42>
 800c33c:	a10a      	add	r1, pc, #40	; (adr r1, 800c368 <__ieee754_atan2+0x160>)
 800c33e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c342:	e782      	b.n	800c24a <__ieee754_atan2+0x42>
 800c344:	a10c      	add	r1, pc, #48	; (adr r1, 800c378 <__ieee754_atan2+0x170>)
 800c346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c34a:	e77e      	b.n	800c24a <__ieee754_atan2+0x42>
 800c34c:	2000      	movs	r0, #0
 800c34e:	2100      	movs	r1, #0
 800c350:	e77b      	b.n	800c24a <__ieee754_atan2+0x42>
 800c352:	a107      	add	r1, pc, #28	; (adr r1, 800c370 <__ieee754_atan2+0x168>)
 800c354:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c358:	e777      	b.n	800c24a <__ieee754_atan2+0x42>
 800c35a:	bf00      	nop
 800c35c:	f3af 8000 	nop.w
 800c360:	33145c07 	.word	0x33145c07
 800c364:	3ca1a626 	.word	0x3ca1a626
 800c368:	54442d18 	.word	0x54442d18
 800c36c:	400921fb 	.word	0x400921fb
 800c370:	54442d18 	.word	0x54442d18
 800c374:	3ff921fb 	.word	0x3ff921fb
 800c378:	54442d18 	.word	0x54442d18
 800c37c:	3fe921fb 	.word	0x3fe921fb
 800c380:	0800d0d0 	.word	0x0800d0d0
 800c384:	0800d0e8 	.word	0x0800d0e8
 800c388:	54442d18 	.word	0x54442d18
 800c38c:	c00921fb 	.word	0xc00921fb
 800c390:	54442d18 	.word	0x54442d18
 800c394:	bff921fb 	.word	0xbff921fb
 800c398:	7ff00000 	.word	0x7ff00000

0800c39c <__ieee754_sqrt>:
 800c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a0:	ec55 4b10 	vmov	r4, r5, d0
 800c3a4:	4e55      	ldr	r6, [pc, #340]	; (800c4fc <__ieee754_sqrt+0x160>)
 800c3a6:	43ae      	bics	r6, r5
 800c3a8:	ee10 0a10 	vmov	r0, s0
 800c3ac:	ee10 3a10 	vmov	r3, s0
 800c3b0:	462a      	mov	r2, r5
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	d110      	bne.n	800c3d8 <__ieee754_sqrt+0x3c>
 800c3b6:	ee10 2a10 	vmov	r2, s0
 800c3ba:	462b      	mov	r3, r5
 800c3bc:	f7f4 f934 	bl	8000628 <__aeabi_dmul>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	f7f3 ff78 	bl	80002bc <__adddf3>
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	460d      	mov	r5, r1
 800c3d0:	ec45 4b10 	vmov	d0, r4, r5
 800c3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d8:	2d00      	cmp	r5, #0
 800c3da:	dc10      	bgt.n	800c3fe <__ieee754_sqrt+0x62>
 800c3dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c3e0:	4330      	orrs	r0, r6
 800c3e2:	d0f5      	beq.n	800c3d0 <__ieee754_sqrt+0x34>
 800c3e4:	b15d      	cbz	r5, 800c3fe <__ieee754_sqrt+0x62>
 800c3e6:	ee10 2a10 	vmov	r2, s0
 800c3ea:	462b      	mov	r3, r5
 800c3ec:	ee10 0a10 	vmov	r0, s0
 800c3f0:	f7f3 ff62 	bl	80002b8 <__aeabi_dsub>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	f7f4 fa40 	bl	800087c <__aeabi_ddiv>
 800c3fc:	e7e6      	b.n	800c3cc <__ieee754_sqrt+0x30>
 800c3fe:	1512      	asrs	r2, r2, #20
 800c400:	d074      	beq.n	800c4ec <__ieee754_sqrt+0x150>
 800c402:	07d4      	lsls	r4, r2, #31
 800c404:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c408:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c40c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c410:	bf5e      	ittt	pl
 800c412:	0fda      	lsrpl	r2, r3, #31
 800c414:	005b      	lslpl	r3, r3, #1
 800c416:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c41a:	2400      	movs	r4, #0
 800c41c:	0fda      	lsrs	r2, r3, #31
 800c41e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c422:	107f      	asrs	r7, r7, #1
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	2516      	movs	r5, #22
 800c428:	4620      	mov	r0, r4
 800c42a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c42e:	1886      	adds	r6, r0, r2
 800c430:	428e      	cmp	r6, r1
 800c432:	bfde      	ittt	le
 800c434:	1b89      	suble	r1, r1, r6
 800c436:	18b0      	addle	r0, r6, r2
 800c438:	18a4      	addle	r4, r4, r2
 800c43a:	0049      	lsls	r1, r1, #1
 800c43c:	3d01      	subs	r5, #1
 800c43e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c442:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c446:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c44a:	d1f0      	bne.n	800c42e <__ieee754_sqrt+0x92>
 800c44c:	462a      	mov	r2, r5
 800c44e:	f04f 0e20 	mov.w	lr, #32
 800c452:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c456:	4281      	cmp	r1, r0
 800c458:	eb06 0c05 	add.w	ip, r6, r5
 800c45c:	dc02      	bgt.n	800c464 <__ieee754_sqrt+0xc8>
 800c45e:	d113      	bne.n	800c488 <__ieee754_sqrt+0xec>
 800c460:	459c      	cmp	ip, r3
 800c462:	d811      	bhi.n	800c488 <__ieee754_sqrt+0xec>
 800c464:	f1bc 0f00 	cmp.w	ip, #0
 800c468:	eb0c 0506 	add.w	r5, ip, r6
 800c46c:	da43      	bge.n	800c4f6 <__ieee754_sqrt+0x15a>
 800c46e:	2d00      	cmp	r5, #0
 800c470:	db41      	blt.n	800c4f6 <__ieee754_sqrt+0x15a>
 800c472:	f100 0801 	add.w	r8, r0, #1
 800c476:	1a09      	subs	r1, r1, r0
 800c478:	459c      	cmp	ip, r3
 800c47a:	bf88      	it	hi
 800c47c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c480:	eba3 030c 	sub.w	r3, r3, ip
 800c484:	4432      	add	r2, r6
 800c486:	4640      	mov	r0, r8
 800c488:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c48c:	f1be 0e01 	subs.w	lr, lr, #1
 800c490:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c494:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c498:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c49c:	d1db      	bne.n	800c456 <__ieee754_sqrt+0xba>
 800c49e:	430b      	orrs	r3, r1
 800c4a0:	d006      	beq.n	800c4b0 <__ieee754_sqrt+0x114>
 800c4a2:	1c50      	adds	r0, r2, #1
 800c4a4:	bf13      	iteet	ne
 800c4a6:	3201      	addne	r2, #1
 800c4a8:	3401      	addeq	r4, #1
 800c4aa:	4672      	moveq	r2, lr
 800c4ac:	f022 0201 	bicne.w	r2, r2, #1
 800c4b0:	1063      	asrs	r3, r4, #1
 800c4b2:	0852      	lsrs	r2, r2, #1
 800c4b4:	07e1      	lsls	r1, r4, #31
 800c4b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c4ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c4be:	bf48      	it	mi
 800c4c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c4c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	e781      	b.n	800c3d0 <__ieee754_sqrt+0x34>
 800c4cc:	0ad9      	lsrs	r1, r3, #11
 800c4ce:	3815      	subs	r0, #21
 800c4d0:	055b      	lsls	r3, r3, #21
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	d0fa      	beq.n	800c4cc <__ieee754_sqrt+0x130>
 800c4d6:	02cd      	lsls	r5, r1, #11
 800c4d8:	d50a      	bpl.n	800c4f0 <__ieee754_sqrt+0x154>
 800c4da:	f1c2 0420 	rsb	r4, r2, #32
 800c4de:	fa23 f404 	lsr.w	r4, r3, r4
 800c4e2:	1e55      	subs	r5, r2, #1
 800c4e4:	4093      	lsls	r3, r2
 800c4e6:	4321      	orrs	r1, r4
 800c4e8:	1b42      	subs	r2, r0, r5
 800c4ea:	e78a      	b.n	800c402 <__ieee754_sqrt+0x66>
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	e7f0      	b.n	800c4d2 <__ieee754_sqrt+0x136>
 800c4f0:	0049      	lsls	r1, r1, #1
 800c4f2:	3201      	adds	r2, #1
 800c4f4:	e7ef      	b.n	800c4d6 <__ieee754_sqrt+0x13a>
 800c4f6:	4680      	mov	r8, r0
 800c4f8:	e7bd      	b.n	800c476 <__ieee754_sqrt+0xda>
 800c4fa:	bf00      	nop
 800c4fc:	7ff00000 	.word	0x7ff00000

0800c500 <_init>:
 800c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c502:	bf00      	nop
 800c504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c506:	bc08      	pop	{r3}
 800c508:	469e      	mov	lr, r3
 800c50a:	4770      	bx	lr

0800c50c <_fini>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	bf00      	nop
 800c510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c512:	bc08      	pop	{r3}
 800c514:	469e      	mov	lr, r3
 800c516:	4770      	bx	lr
