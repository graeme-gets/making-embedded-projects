
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .systemConfig 00000004  0807e800  0807e800  0003e800  2**0
                  ALLOC, READONLY
  2 .text         0000fae0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001808  0800fc80  0800fc80  0001fc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08011488  08011488  000304f4  2**0
                  CONTENTS
  5 .ARM          00000008  08011488  08011488  00021488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08011490  08011490  000304f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08011490  08011490  00021490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08011494  08011494  00021494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000004f4  20000000  08011498  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000820  200004f8  0801198c  000304f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000d18  0801198c  00030d18  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f68d  00000000  00000000  00030524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057e2  00000000  00000000  0004fbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a90  00000000  00000000  00055398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001800  00000000  00000000  00056e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e1ec  00000000  00000000  00058628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002881c  00000000  00000000  00076814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cb97  00000000  00000000  0009f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013bbc7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083c4  00000000  00000000  0013bc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004f8 	.word	0x200004f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fc68 	.word	0x0800fc68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004fc 	.word	0x200004fc
 80001dc:	0800fc68 	.word	0x0800fc68

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_ldivmod>:
 8000bd8:	b97b      	cbnz	r3, 8000bfa <__aeabi_ldivmod+0x22>
 8000bda:	b972      	cbnz	r2, 8000bfa <__aeabi_ldivmod+0x22>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bfbe      	ittt	lt
 8000be0:	2000      	movlt	r0, #0
 8000be2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000be6:	e006      	blt.n	8000bf6 <__aeabi_ldivmod+0x1e>
 8000be8:	bf08      	it	eq
 8000bea:	2800      	cmpeq	r0, #0
 8000bec:	bf1c      	itt	ne
 8000bee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf6:	f000 b9bf 	b.w	8000f78 <__aeabi_idiv0>
 8000bfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c02:	2900      	cmp	r1, #0
 8000c04:	db09      	blt.n	8000c1a <__aeabi_ldivmod+0x42>
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db1a      	blt.n	8000c40 <__aeabi_ldivmod+0x68>
 8000c0a:	f000 f84d 	bl	8000ca8 <__udivmoddi4>
 8000c0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c16:	b004      	add	sp, #16
 8000c18:	4770      	bx	lr
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db1b      	blt.n	8000c5c <__aeabi_ldivmod+0x84>
 8000c24:	f000 f840 	bl	8000ca8 <__udivmoddi4>
 8000c28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c30:	b004      	add	sp, #16
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	4252      	negs	r2, r2
 8000c3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c3e:	4770      	bx	lr
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	f000 f82f 	bl	8000ca8 <__udivmoddi4>
 8000c4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c52:	b004      	add	sp, #16
 8000c54:	4240      	negs	r0, r0
 8000c56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5a:	4770      	bx	lr
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	f000 f821 	bl	8000ca8 <__udivmoddi4>
 8000c66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6e:	b004      	add	sp, #16
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	4613      	mov	r3, r2
 8000f88:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	79fa      	ldrb	r2, [r7, #7]
 8000fa0:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	461a      	mov	r2, r3
 8000fac:	2100      	movs	r1, #0
 8000fae:	f00a fa11 	bl	800b3d4 <memset>
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	70fb      	strb	r3, [r7, #3]
	cbuffer->buffer[cbuffer->write] = data;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	7992      	ldrb	r2, [r2, #6]
 8000fce:	4413      	add	r3, r2
 8000fd0:	78fa      	ldrb	r2, [r7, #3]
 8000fd2:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	799b      	ldrb	r3, [r3, #6]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	b25a      	sxtb	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	791b      	ldrb	r3, [r3, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	757b      	strb	r3, [r7, #21]
	uint8_t length;
	uint8_t read = cbuffer->read;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	795b      	ldrb	r3, [r3, #5]
 800101c:	74bb      	strb	r3, [r7, #18]
	uint8_t ch;
	length = cBuffer_Length(cbuffer);
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f000 f89a 	bl	8001158 <cBuffer_Length>
 8001024:	4603      	mov	r3, r0
 8001026:	753b      	strb	r3, [r7, #20]

	for (i=0; i < length;i++)
 8001028:	2300      	movs	r3, #0
 800102a:	75fb      	strb	r3, [r7, #23]
 800102c:	e012      	b.n	8001054 <cBuffer_GetString+0x54>
	{
		err = cBuffer_Peek(cbuffer, &ch, &read);
 800102e:	f107 0212 	add.w	r2, r7, #18
 8001032:	f107 0311 	add.w	r3, r7, #17
 8001036:	4619      	mov	r1, r3
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f000 f863 	bl	8001104 <cBuffer_Peek>
 800103e:	4603      	mov	r3, r0
 8001040:	757b      	strb	r3, [r7, #21]

		if (ch == '\r') // A string is found - copy it to the outgoing buffer
 8001042:	7c7b      	ldrb	r3, [r7, #17]
 8001044:	2b0d      	cmp	r3, #13
 8001046:	d102      	bne.n	800104e <cBuffer_GetString+0x4e>
		{
			found = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	75bb      	strb	r3, [r7, #22]
			break;
 800104c:	e006      	b.n	800105c <cBuffer_GetString+0x5c>
	for (i=0; i < length;i++)
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	3301      	adds	r3, #1
 8001052:	75fb      	strb	r3, [r7, #23]
 8001054:	7dfa      	ldrb	r2, [r7, #23]
 8001056:	7d3b      	ldrb	r3, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	d3e8      	bcc.n	800102e <cBuffer_GetString+0x2e>
		}
	}
	if (found)
 800105c:	7dbb      	ldrb	r3, [r7, #22]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d020      	beq.n	80010a4 <cBuffer_GetString+0xa4>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, read);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	795b      	ldrb	r3, [r3, #5]
 8001066:	7cba      	ldrb	r2, [r7, #18]
 8001068:	4619      	mov	r1, r3
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 f88d 	bl	800118a <cBuffer_LengthCustom>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8001078:	f107 0313 	add.w	r3, r7, #19
 800107c:	4619      	mov	r1, r3
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 f817 	bl	80010b2 <cBuffer_Read>
 8001084:	4603      	mov	r3, r0
 8001086:	757b      	strb	r3, [r7, #21]
			*string = chr;
 8001088:	7cfa      	ldrb	r2, [r7, #19]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	701a      	strb	r2, [r3, #0]
			string++;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3301      	adds	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
		} while (chr != sTerminator || err != CBUFFER_OK);
 8001094:	7cfb      	ldrb	r3, [r7, #19]
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	429a      	cmp	r2, r3
 800109a:	d1ed      	bne.n	8001078 <cBuffer_GetString+0x78>
 800109c:	7d7b      	ldrb	r3, [r7, #21]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1ea      	bne.n	8001078 <cBuffer_GetString+0x78>
 80010a2:	e001      	b.n	80010a8 <cBuffer_GetString+0xa8>
	}
	else
		err = CBUFFER_NO_STRING;
 80010a4:	2303      	movs	r3, #3
 80010a6:	757b      	strb	r3, [r7, #21]


	return err;
 80010a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f84b 	bl	8001158 <cBuffer_Length>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 80010c8:	2302      	movs	r3, #2
 80010ca:	e017      	b.n	80010fc <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	7952      	ldrb	r2, [r2, #5]
 80010d4:	4413      	add	r3, r2
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	795b      	ldrb	r3, [r3, #5]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	b25a      	sxtb	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	791b      	ldrb	r3, [r3, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4013      	ands	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <cBuffer_Peek>:

CBUFFER_ERR cBuffer_Peek(cBuffer_t* cbuffer,uint8_t* data, uint8_t*read)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	if (cBuffer_Length(cbuffer) == 0)
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 f821 	bl	8001158 <cBuffer_Length>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <cBuffer_Peek+0x1c>
	{
		return CBUFFER_EMPTY;
 800111c:	2302      	movs	r3, #2
 800111e:	e017      	b.n	8001150 <cBuffer_Peek+0x4c>
	}
	*data = cbuffer->buffer[*read];
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	7812      	ldrb	r2, [r2, #0]
 8001128:	4413      	add	r3, r2
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	701a      	strb	r2, [r3, #0]
	*read = ((*read)+1) & (cbuffer->size-1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	b25a      	sxtb	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	b25b      	sxtb	r3, r3
 8001144:	4013      	ands	r3, r2
 8001146:	b25b      	sxtb	r3, r3
 8001148:	b2da      	uxtb	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	701a      	strb	r2, [r3, #0]
	return CBUFFER_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	799a      	ldrb	r2, [r3, #6]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	795b      	ldrb	r3, [r3, #5]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	b25a      	sxtb	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b25b      	sxtb	r3, r3
 8001178:	4013      	ands	r3, r2
 800117a:	b25b      	sxtb	r3, r3
 800117c:	b2db      	uxtb	r3, r3

}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	70fb      	strb	r3, [r7, #3]
 8001196:	4613      	mov	r3, r2
 8001198:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 800119a:	78ba      	ldrb	r2, [r7, #2]
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	b25a      	sxtb	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	791b      	ldrb	r3, [r3, #4]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	4013      	ands	r3, r2
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 80011ca:	2120      	movs	r1, #32
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f00b f966 	bl	800c49e <strchr>
 80011d2:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0 || cmdEnd-buffer != strlen(name))
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <ConsoleCommandMatch+0x2e>
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	461c      	mov	r4, r3
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff f806 	bl	80001f4 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	429c      	cmp	r4, r3
 80011ec:	d00b      	beq.n	8001206 <ConsoleCommandMatch+0x46>
	{
			r =  strcmp(name,buffer) == 0;
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7fe fff5 	bl	80001e0 <strcmp>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e00f      	b.n	8001226 <ConsoleCommandMatch+0x66>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7fe fff4 	bl	80001f4 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f00b f958 	bl	800c4c8 <strncmp>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	60fb      	str	r3, [r7, #12]

	}

	return r;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}

08001230 <ConsoleInit>:


// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001236:	f001 f905 	bl	8002444 <ConsoleIoInit>
	ConsoleIoSendString("Dodeca Timer - A Thousand Projects");
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <ConsoleInit+0x44>)
 800123c:	f001 f93a 	bl	80024b4 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <ConsoleInit+0x48>)
 8001242:	f001 f937 	bl	80024b4 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <ConsoleInit+0x4c>)
 8001248:	f001 f934 	bl	80024b4 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	e007      	b.n	8001262 <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <ConsoleInit+0x50>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3301      	adds	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b63      	cmp	r3, #99	; 0x63
 8001266:	d9f4      	bls.n	8001252 <ConsoleInit+0x22>
	}

}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	0800fc80 	.word	0x0800fc80
 8001278:	0800fca4 	.word	0x0800fca4
 800127c:	0800fca8 	.word	0x0800fca8
 8001280:	20000514 	.word	0x20000514

08001284 <ConsolePrintPrompt>:

void ConsolePrintPrompt()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	ConsoleIoSendString(STR_ENDLINE);
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <ConsolePrintPrompt+0x14>)
 800128a:	f001 f913 	bl	80024b4 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <ConsolePrintPrompt+0x18>)
 8001290:	f001 f910 	bl	80024b4 <ConsoleIoSendString>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	0800fca4 	.word	0x0800fca4
 800129c:	0800fca8 	.word	0x0800fca8

080012a0 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;
	eConsoleError consoleResult;

	consoleResult = ConsoleIoReceive(mReceiveBuffer);
 80012a6:	4841      	ldr	r0, [pc, #260]	; (80013ac <ConsoleProcess+0x10c>)
 80012a8:	f001 f8e4 	bl	8002474 <ConsoleIoReceive>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]

	switch (consoleResult)
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d075      	beq.n	80013a2 <ConsoleProcess+0x102>
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	dc74      	bgt.n	80013a4 <ConsoleProcess+0x104>
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d004      	beq.n	80012c8 <ConsoleProcess+0x28>
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db70      	blt.n	80013a4 <ConsoleProcess+0x104>
 80012c2:	3b01      	subs	r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	e06d      	b.n	80013a4 <ConsoleProcess+0x104>
	{
		case CONSOLE_ERROR:
		case CONSOLE_NO_STRING:
			break;
		case CONSOLE_SUCCESS:
			if ('\0' == mReceiveBuffer[0] )
 80012c8:	4b38      	ldr	r3, [pc, #224]	; (80013ac <ConsoleProcess+0x10c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d106      	bne.n	80012de <ConsoleProcess+0x3e>
			{
				ConsoleIoSendString(STR_ENDLINE);
 80012d0:	4837      	ldr	r0, [pc, #220]	; (80013b0 <ConsoleProcess+0x110>)
 80012d2:	f001 f8ef 	bl	80024b4 <ConsoleIoSendString>
				ConsoleIoSendString(CONSOLE_PROMPT);
 80012d6:	4837      	ldr	r0, [pc, #220]	; (80013b4 <ConsoleProcess+0x114>)
 80012d8:	f001 f8ec 	bl	80024b4 <ConsoleIoSendString>
				return;
 80012dc:	e062      	b.n	80013a4 <ConsoleProcess+0x104>
			}
			commandTable = ConsoleCommandsGetTable();
 80012de:	f001 f889 	bl	80023f4 <ConsoleCommandsGetTable>
 80012e2:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	613b      	str	r3, [r7, #16]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80012ee:	e03a      	b.n	8001366 <ConsoleProcess+0xc6>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	226c      	movs	r2, #108	; 0x6c
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	4413      	add	r3, r2
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	492b      	ldr	r1, [pc, #172]	; (80013ac <ConsoleProcess+0x10c>)
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <ConsoleCommandMatch>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d029      	beq.n	8001360 <ConsoleProcess+0xc0>
				{
					result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	226c      	movs	r2, #108	; 0x6c
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	4413      	add	r3, r2
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4824      	ldr	r0, [pc, #144]	; (80013ac <ConsoleProcess+0x10c>)
 800131c:	4798      	blx	r3
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d018      	beq.n	800135a <ConsoleProcess+0xba>
					{
						ConsoleIoSendString("Error: ");
 8001328:	4823      	ldr	r0, [pc, #140]	; (80013b8 <ConsoleProcess+0x118>)
 800132a:	f001 f8c3 	bl	80024b4 <ConsoleIoSendString>
						ConsoleIoSendString((char*)mReceiveBuffer);
 800132e:	481f      	ldr	r0, [pc, #124]	; (80013ac <ConsoleProcess+0x10c>)
 8001330:	f001 f8c0 	bl	80024b4 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8001334:	481e      	ldr	r0, [pc, #120]	; (80013b0 <ConsoleProcess+0x110>)
 8001336:	f001 f8bd 	bl	80024b4 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800133a:	4820      	ldr	r0, [pc, #128]	; (80013bc <ConsoleProcess+0x11c>)
 800133c:	f001 f8ba 	bl	80024b4 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	226c      	movs	r2, #108	; 0x6c
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	4413      	add	r3, r2
 800134c:	3308      	adds	r3, #8
 800134e:	4618      	mov	r0, r3
 8001350:	f001 f8b0 	bl	80024b4 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8001354:	4816      	ldr	r0, [pc, #88]	; (80013b0 <ConsoleProcess+0x110>)
 8001356:	f001 f8ad 	bl	80024b4 <ConsoleIoSendString>
					}
					found = cmdIndex;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	e002      	b.n	8001366 <ConsoleProcess+0xc6>
				}
				else
				{
					cmdIndex++;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	226c      	movs	r2, #108	; 0x6c
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <ConsoleProcess+0xe0>
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137e:	d0b7      	beq.n	80012f0 <ConsoleProcess+0x50>
				}
			}
			if (found == NOT_FOUND)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001386:	d105      	bne.n	8001394 <ConsoleProcess+0xf4>
			{
				ConsoleIoSendString("Command not found: ");
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <ConsoleProcess+0x120>)
 800138a:	f001 f893 	bl	80024b4 <ConsoleIoSendString>
				ConsoleIoSendString((char*)mReceiveBuffer);
 800138e:	4807      	ldr	r0, [pc, #28]	; (80013ac <ConsoleProcess+0x10c>)
 8001390:	f001 f890 	bl	80024b4 <ConsoleIoSendString>

			}
			ConsoleIoSendString(STR_ENDLINE);
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <ConsoleProcess+0x110>)
 8001396:	f001 f88d 	bl	80024b4 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <ConsoleProcess+0x114>)
 800139c:	f001 f88a 	bl	80024b4 <ConsoleIoSendString>

			break;
 80013a0:	e000      	b.n	80013a4 <ConsoleProcess+0x104>
		case CONSOLE_BUFFER_FULL:

		break;
 80013a2:	bf00      	nop
	}

}
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000514 	.word	0x20000514
 80013b0:	0800fca4 	.word	0x0800fca4
 80013b4:	0800fca8 	.word	0x0800fca8
 80013b8:	0800fcac 	.word	0x0800fcac
 80013bc:	0800fcb4 	.word	0x0800fcb4
 80013c0:	0800fcbc 	.word	0x0800fcbc

080013c4 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	460b      	mov	r3, r1
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80013de:	e00b      	b.n	80013f8 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b20      	cmp	r3, #32
 80013ea:	d102      	bne.n	80013f2 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	3301      	adds	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d002      	beq.n	8001406 <ConsoleParamFindN+0x42>
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b63      	cmp	r3, #99	; 0x63
 8001404:	d9ec      	bls.n	80013e0 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	2b64      	cmp	r3, #100	; 0x64
 800140a:	d102      	bne.n	8001412 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 800140c:	2310      	movs	r3, #16
 800140e:	75fb      	strb	r3, [r7, #23]
 8001410:	e002      	b.n	8001418 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	601a      	str	r2, [r3, #0]
	}
	return result;
 8001418:	7dfb      	ldrb	r3, [r7, #23]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <ConsoleReceiveParamString>:

// Assume the string is the last parameter and the the end is a null
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char* string, uint32_t maxLen)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	460b      	mov	r3, r1
 8001434:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
	eCommandResult_T result;
	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800143a:	f107 0210 	add.w	r2, r7, #16
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	4619      	mov	r1, r3
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff ffbe 	bl	80013c4 <ConsoleParamFindN>
 8001448:	4603      	mov	r3, r0
 800144a:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <ConsoleReceiveParamString+0x30>
		return result;
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	e013      	b.n	800147e <ConsoleReceiveParamString+0x58>



	// Check the length of the string
	if (strlen(&buffer[startIndex]) > maxLen)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe fec9 	bl	80001f4 <strlen>
 8001462:	4602      	mov	r2, r0
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	4293      	cmp	r3, r2
 8001468:	d201      	bcs.n	800146e <ConsoleReceiveParamString+0x48>
	{
		return COMMAND_ERROR;
 800146a:	23ff      	movs	r3, #255	; 0xff
 800146c:	e007      	b.n	800147e <ConsoleReceiveParamString+0x58>
	}

	// set the end of the string to a NULL for string termination
	strcpy(string,&buffer[startIndex]);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	4619      	mov	r1, r3
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f00b f81e 	bl	800c4b8 <strcpy>

	return COMMAND_SUCCESS;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b08a      	sub	sp, #40	; 0x28
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	460b      	mov	r3, r1
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8001498:	f107 021c 	add.w	r2, r7, #28
 800149c:	7afb      	ldrb	r3, [r7, #11]
 800149e:	4619      	mov	r1, r3
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff ff8f 	bl	80013c4 <ConsoleParamFindN>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	4413      	add	r3, r2
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 80014c0:	e011      	b.n	80014e6 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 80014c2:	f107 0214 	add.w	r2, r7, #20
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	4413      	add	r3, r2
 80014ca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80014ce:	701a      	strb	r2, [r3, #0]
		i++;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	3301      	adds	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	4413      	add	r3, r2
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 80014e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 80014ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d002      	beq.n	80014fc <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	d9e2      	bls.n	80014c2 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d102      	bne.n	8001508 <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001502:	2310      	movs	r3, #16
 8001504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8001508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800150c:	2b00      	cmp	r3, #0
 800150e:	d11a      	bne.n	8001546 <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8001510:	f107 0214 	add.w	r2, r7, #20
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	4413      	add	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4618      	mov	r0, r3
 8001522:	f001 ff8d 	bl	8003440 <isNumber>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4618      	mov	r0, r3
 8001532:	f009 fe47 	bl	800b1c4 <atoi>
 8001536:	4603      	mov	r3, r0
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	801a      	strh	r2, [r3, #0]
 800153e:	e002      	b.n	8001546 <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 8001540:	2310      	movs	r3, #16
 8001542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	return result;
 8001546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800154a:	4618      	mov	r0, r3
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b08a      	sub	sp, #40	; 0x28
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	460b      	mov	r3, r1
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8001568:	f107 0218 	add.w	r2, r7, #24
 800156c:	7afb      	ldrb	r3, [r7, #11]
 800156e:	4619      	mov	r1, r3
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff ff27 	bl	80013c4 <ConsoleParamFindN>
 8001576:	4603      	mov	r3, r0
 8001578:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 800157a:	7ffb      	ldrb	r3, [r7, #31]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d12c      	bne.n	80015da <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
 8001584:	e01e      	b.n	80015c4 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10d      	bne.n	80015a8 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	4413      	add	r3, r2
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	f107 0217 	add.w	r2, r7, #23
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f820 	bl	80015e4 <ConsoleUtilHexCharToInt>
 80015a4:	4603      	mov	r3, r0
 80015a6:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d107      	bne.n	80015be <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 80015ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ba:	4413      	add	r3, r2
 80015bc:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	3301      	adds	r3, #1
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d9dd      	bls.n	8001586 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 80015ca:	7ffb      	ldrb	r3, [r7, #31]
 80015cc:	2b11      	cmp	r3, #17
 80015ce:	d101      	bne.n	80015d4 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 80015d0:	2300      	movs	r3, #0
 80015d2:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015d8:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80015da:	7ffb      	ldrb	r3, [r7, #31]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b2f      	cmp	r3, #47	; 0x2f
 80015f8:	d908      	bls.n	800160c <ConsoleUtilHexCharToInt+0x28>
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b39      	cmp	r3, #57	; 0x39
 80015fe:	d805      	bhi.n	800160c <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	3b30      	subs	r3, #48	; 0x30
 8001604:	b2da      	uxtb	r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	e025      	b.n	8001658 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b40      	cmp	r3, #64	; 0x40
 8001610:	d908      	bls.n	8001624 <ConsoleUtilHexCharToInt+0x40>
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b46      	cmp	r3, #70	; 0x46
 8001616:	d805      	bhi.n	8001624 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	3b37      	subs	r3, #55	; 0x37
 800161c:	b2da      	uxtb	r2, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	e019      	b.n	8001658 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	2b60      	cmp	r3, #96	; 0x60
 8001628:	d908      	bls.n	800163c <ConsoleUtilHexCharToInt+0x58>
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b66      	cmp	r3, #102	; 0x66
 800162e:	d805      	bhi.n	800163c <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	3b57      	subs	r3, #87	; 0x57
 8001634:	b2da      	uxtb	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e00d      	b.n	8001658 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	2b0a      	cmp	r3, #10
 8001640:	d105      	bne.n	800164e <ConsoleUtilHexCharToInt+0x6a>
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b0d      	cmp	r3, #13
 8001646:	d102      	bne.n	800164e <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b20      	cmp	r3, #32
 800164c:	d102      	bne.n	8001654 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 800164e:	2311      	movs	r3, #17
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e001      	b.n	8001658 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8001654:	2310      	movs	r3, #16
 8001656:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 ff20 	bl	80024b4 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 ff13 	bl	80024b4 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800168e:	4804      	ldr	r0, [pc, #16]	; (80016a0 <ConsoleSendLine+0x20>)
 8001690:	f000 ff10 	bl	80024b4 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	0800fca4 	.word	0x0800fca4

080016a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016a8:	f3bf 8f4f 	dsb	sy
}
 80016ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <__NVIC_SystemReset+0x24>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016b6:	4904      	ldr	r1, [pc, #16]	; (80016c8 <__NVIC_SystemReset+0x24>)
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_SystemReset+0x28>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016be:	f3bf 8f4f 	dsb	sy
}
 80016c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <__NVIC_SystemReset+0x20>
 80016c8:	e000ed00 	.word	0xe000ed00
 80016cc:	05fa0004 	.word	0x05fa0004

080016d0 <displayDodeca>:




static void displayDodeca(uint8_t id)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b0ac      	sub	sp, #176	; 0xb0
 80016d4:	af04      	add	r7, sp, #16
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	char msg[120];
	char statename[20];
	colour_t *colour;
	dodecaItem_t *dodeca;

	dodeca = dodecaGet(id);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 ffeb 	bl	80026b8 <dodecaGet>
 80016e2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c


	dodecaGetStateName(dodeca->state,statename);
 80016e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 f834 	bl	8002760 <dodecaGetStateName>
	colour = colourFindByCode(dodeca->colour);
 80016f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 feee 	bl	80024e0 <colourFindByCode>
 8001704:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	sprintf(msg,"Dodeca: %i - %s\n\tState: %s\n\tColour: %s\n\tMin Time: %d\n\tMax Time: %d\n",id,dodeca->name,statename, colour->name ,dodeca->minTimeMins,dodeca->maxTimeMins);
 8001708:	79f9      	ldrb	r1, [r7, #7]
 800170a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800170e:	1c5c      	adds	r4, r3, #1
 8001710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001714:	3301      	adds	r3, #1
 8001716:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800171a:	7f12      	ldrb	r2, [r2, #28]
 800171c:	4615      	mov	r5, r2
 800171e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001722:	7f52      	ldrb	r2, [r2, #29]
 8001724:	f107 0020 	add.w	r0, r7, #32
 8001728:	9203      	str	r2, [sp, #12]
 800172a:	9502      	str	r5, [sp, #8]
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4623      	mov	r3, r4
 8001736:	460a      	mov	r2, r1
 8001738:	4905      	ldr	r1, [pc, #20]	; (8001750 <displayDodeca+0x80>)
 800173a:	f00a fe1f 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff9c 	bl	8001680 <ConsoleSendLine>
}
 8001748:	bf00      	nop
 800174a:	37a0      	adds	r7, #160	; 0xa0
 800174c:	46bd      	mov	sp, r7
 800174e:	bdb0      	pop	{r4, r5, r7, pc}
 8001750:	0800fd60 	.word	0x0800fd60

08001754 <ConsoleCommandConfig>:

static eCommandResult_T ConsoleCommandConfig(const char buffer[])
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	setStateControllerMode(STATE_CONT_MODE_CONFIG);
 800175c:	2001      	movs	r0, #1
 800175e:	f003 f823 	bl	80047a8 <setStateControllerMode>
	return COMMAND_SUCCESS;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ConsoleCommandExitConfig>:
static eCommandResult_T ConsoleCommandExitConfig(const char buffer[])
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	setStateControllerMode(STATE_CONT_MODE_RUN);
 8001774:	2000      	movs	r0, #0
 8001776:	f003 f817 	bl	80047a8 <setStateControllerMode>
	return COMMAND_SUCCESS;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <ConsoleCommandReboot>:

static eCommandResult_T ConsoleCommandReboot(const char buffer[])
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	NVIC_SystemReset();
 800178c:	f7ff ff8a 	bl	80016a4 <__NVIC_SystemReset>

08001790 <ConsoleCommandReset>:
	return COMMAND_SUCCESS;
}

static eCommandResult_T ConsoleCommandReset(const char buffer[])
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	ConsoleSendLine("Resetting Configuration to factory default");
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <ConsoleCommandReset+0x28>)
 800179a:	f7ff ff71 	bl	8001680 <ConsoleSendLine>
	dodecaReset();
 800179e:	f000 ff03 	bl	80025a8 <dodecaReset>
	sysConfigSave();
 80017a2:	f003 fb23 	bl	8004dec <sysConfigSave>
	ConsoleSendLine("Done");
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <ConsoleCommandReset+0x2c>)
 80017a8:	f7ff ff6a 	bl	8001680 <ConsoleSendLine>
	return COMMAND_SUCCESS;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	0800fda4 	.word	0x0800fda4
 80017bc:	0800fdd0 	.word	0x0800fdd0

080017c0 <ConsoleCommandDodecaSet>:

static eCommandResult_T ConsoleCommandDodecaSet(const char buffer[])
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b098      	sub	sp, #96	; 0x60
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	// get the Dodeca Id to set
	int16_t dodecaId;
	int16_t value;
	dodecaItem_t *dodeca = 0x0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	65fb      	str	r3, [r7, #92]	; 0x5c
	char msg[50];

		// get the command
		uint32_t cmdIndex;
		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &cmdIndex))
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	461a      	mov	r2, r3
 80017d2:	2101      	movs	r1, #1
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fdf5 	bl	80013c4 <ConsoleParamFindN>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <ConsoleCommandDodecaSet+0x2a>
		{
			ConsoleSendLine("Please supply a command");
 80017e0:	4868      	ldr	r0, [pc, #416]	; (8001984 <ConsoleCommandDodecaSet+0x1c4>)
 80017e2:	f7ff ff4d 	bl	8001680 <ConsoleSendLine>
			return COMMAND_PARAMETER_ERROR;
 80017e6:	2310      	movs	r3, #16
 80017e8:	e0c7      	b.n	800197a <ConsoleCommandDodecaSet+0x1ba>
		}

		dodecaId = detectFaceUp();
 80017ea:	f001 ffab 	bl	8003744 <detectFaceUp>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a


		if (dodecaId< 0)
 80017f4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da04      	bge.n	8001806 <ConsoleCommandDodecaSet+0x46>
		{
			ConsoleSendLine("Face not detected");
 80017fc:	4862      	ldr	r0, [pc, #392]	; (8001988 <ConsoleCommandDodecaSet+0x1c8>)
 80017fe:	f7ff ff3f 	bl	8001680 <ConsoleSendLine>
			return COMMAND_ERROR;
 8001802:	23ff      	movs	r3, #255	; 0xff
 8001804:	e0b9      	b.n	800197a <ConsoleCommandDodecaSet+0x1ba>
		}
		sprintf(msg,"Detected face: %i",dodecaId);
 8001806:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	495f      	ldr	r1, [pc, #380]	; (800198c <ConsoleCommandDodecaSet+0x1cc>)
 8001810:	4618      	mov	r0, r3
 8001812:	f00a fdb3 	bl	800c37c <siprintf>
		ConsoleSendLine(msg);
 8001816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff30 	bl	8001680 <ConsoleSendLine>

		dodeca = dodecaGet(dodecaId);
 8001820:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 ff46 	bl	80026b8 <dodecaGet>
 800182c:	65f8      	str	r0, [r7, #92]	; 0x5c

		char name[DODECA_NAME_MAX];
		int16_t colourId;

		switch (buffer[cmdIndex])
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	3b61      	subs	r3, #97	; 0x61
 8001838:	2b0d      	cmp	r3, #13
 800183a:	f200 8097 	bhi.w	800196c <ConsoleCommandDodecaSet+0x1ac>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <ConsoleCommandDodecaSet+0x84>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	0800187d 	.word	0x0800187d
 8001848:	0800196d 	.word	0x0800196d
 800184c:	080018c7 	.word	0x080018c7
 8001850:	08001885 	.word	0x08001885
 8001854:	0800196d 	.word	0x0800196d
 8001858:	0800196d 	.word	0x0800196d
 800185c:	0800196d 	.word	0x0800196d
 8001860:	0800196d 	.word	0x0800196d
 8001864:	08001941 	.word	0x08001941
 8001868:	0800196d 	.word	0x0800196d
 800186c:	0800196d 	.word	0x0800196d
 8001870:	0800196d 	.word	0x0800196d
 8001874:	08001915 	.word	0x08001915
 8001878:	0800188d 	.word	0x0800188d
		{
		case 'a':
				dodeca->state = DODECA_STATE_STOPPED;
 800187c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800187e:	2203      	movs	r2, #3
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001882:	e073      	b.n	800196c <ConsoleCommandDodecaSet+0x1ac>
		case 'd':
				dodeca->state = DODECA_STATE_NOT_CONFIGURED;
 8001884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001886:	2201      	movs	r2, #1
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800188a:	e06f      	b.n	800196c <ConsoleCommandDodecaSet+0x1ac>
		case 'n':
					// Get the task Name
					ConsoleReceiveParamString(buffer, 3, name,DODECA_NAME_MAX );
 800188c:	f107 020c 	add.w	r2, r7, #12
 8001890:	2314      	movs	r3, #20
 8001892:	2103      	movs	r1, #3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff fdc6 	bl	8001426 <ConsoleReceiveParamString>
					// Check Length
					if (strlen(name)< DODECA_NAME_MAX)
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fca8 	bl	80001f4 <strlen>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b13      	cmp	r3, #19
 80018a8:	d804      	bhi.n	80018b4 <ConsoleCommandDodecaSet+0xf4>
					{
						ConsoleSendLine("Name too short");
 80018aa:	4839      	ldr	r0, [pc, #228]	; (8001990 <ConsoleCommandDodecaSet+0x1d0>)
 80018ac:	f7ff fee8 	bl	8001680 <ConsoleSendLine>
						return COMMAND_PARAMETER_ERROR;
 80018b0:	2310      	movs	r3, #16
 80018b2:	e062      	b.n	800197a <ConsoleCommandDodecaSet+0x1ba>
					}
					strcpy(dodeca->name,name);
 80018b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b6:	3301      	adds	r3, #1
 80018b8:	f107 020c 	add.w	r2, r7, #12
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f00a fdfa 	bl	800c4b8 <strcpy>
					break;
 80018c4:	e052      	b.n	800196c <ConsoleCommandDodecaSet+0x1ac>
		case 'c':
					// get the colour number

					ConsoleReceiveParamInt16(buffer, 3, &colourId);
 80018c6:	f107 030a 	add.w	r3, r7, #10
 80018ca:	461a      	mov	r2, r3
 80018cc:	2103      	movs	r1, #3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fdd9 	bl	8001486 <ConsoleReceiveParamInt16>
					if (colourId > COLOUR_COUNT_MAX)
 80018d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018d8:	2b0e      	cmp	r3, #14
 80018da:	dd04      	ble.n	80018e6 <ConsoleCommandDodecaSet+0x126>
					{
						ConsoleSendLine("Invalid Colour");
 80018dc:	482d      	ldr	r0, [pc, #180]	; (8001994 <ConsoleCommandDodecaSet+0x1d4>)
 80018de:	f7ff fecf 	bl	8001680 <ConsoleSendLine>
						return COMMAND_PARAMETER_ERROR;
 80018e2:	2310      	movs	r3, #16
 80018e4:	e049      	b.n	800197a <ConsoleCommandDodecaSet+0x1ba>
					}

					dodeca->colour = colourFindByid(colourId)->code;
 80018e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fe21 	bl	8002534 <colourFindByid>
 80018f2:	4603      	mov	r3, r0
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018f8:	619a      	str	r2, [r3, #24]

					ConsoleSendString("Colour set : ");
 80018fa:	4827      	ldr	r0, [pc, #156]	; (8001998 <ConsoleCommandDodecaSet+0x1d8>)
 80018fc:	f7ff feb3 	bl	8001666 <ConsoleSendString>
					ConsoleSendLine(colourFindByCode(colourId)->name);
 8001900:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fdeb 	bl	80024e0 <colourFindByCode>
 800190a:	4603      	mov	r3, r0
 800190c:	3301      	adds	r3, #1
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff feb6 	bl	8001680 <ConsoleSendLine>

		case 'm':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001914:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001918:	461a      	mov	r2, r3
 800191a:	2102      	movs	r1, #2
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fdb2 	bl	8001486 <ConsoleReceiveParamInt16>
				if (value <0)
 8001922:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001926:	2b00      	cmp	r3, #0
 8001928:	da04      	bge.n	8001934 <ConsoleCommandDodecaSet+0x174>
				{
					ConsoleSendLine("Invalid Max time");
 800192a:	481c      	ldr	r0, [pc, #112]	; (800199c <ConsoleCommandDodecaSet+0x1dc>)
 800192c:	f7ff fea8 	bl	8001680 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8001930:	2310      	movs	r3, #16
 8001932:	e022      	b.n	800197a <ConsoleCommandDodecaSet+0x1ba>
				}
				dodeca->maxTimeMins = value;
 8001934:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001938:	b2da      	uxtb	r2, r3
 800193a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800193c:	775a      	strb	r2, [r3, #29]
			break;
 800193e:	e015      	b.n	800196c <ConsoleCommandDodecaSet+0x1ac>
		case 'i':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001940:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001944:	461a      	mov	r2, r3
 8001946:	2102      	movs	r1, #2
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fd9c 	bl	8001486 <ConsoleReceiveParamInt16>
				if (value <0)
 800194e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001952:	2b00      	cmp	r3, #0
 8001954:	da04      	bge.n	8001960 <ConsoleCommandDodecaSet+0x1a0>
				{
					ConsoleSendLine("Invalid Min time");
 8001956:	4812      	ldr	r0, [pc, #72]	; (80019a0 <ConsoleCommandDodecaSet+0x1e0>)
 8001958:	f7ff fe92 	bl	8001680 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 800195c:	2310      	movs	r3, #16
 800195e:	e00c      	b.n	800197a <ConsoleCommandDodecaSet+0x1ba>
				}
				dodeca->minTimeMins = value;
 8001960:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001964:	b2da      	uxtb	r2, r3
 8001966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001968:	771a      	strb	r2, [r3, #28]
			break;
 800196a:	bf00      	nop
		}
		// Show the current face info
		displayDodeca(dodecaId);
 800196c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff feac 	bl	80016d0 <displayDodeca>
		return COMMAND_SUCCESS;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3760      	adds	r7, #96	; 0x60
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	0800fdd8 	.word	0x0800fdd8
 8001988:	0800fdf0 	.word	0x0800fdf0
 800198c:	0800fe04 	.word	0x0800fe04
 8001990:	0800fe18 	.word	0x0800fe18
 8001994:	0800fe28 	.word	0x0800fe28
 8001998:	0800fe38 	.word	0x0800fe38
 800199c:	0800fe48 	.word	0x0800fe48
 80019a0:	0800fe5c 	.word	0x0800fe5c

080019a4 <ConsoleCommandDodecaQuery>:

static eCommandResult_T ConsoleCommandDodecaQuery(const char buffer[])
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	uint32_t param1;

		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &param1))
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	461a      	mov	r2, r3
 80019b2:	2101      	movs	r1, #1
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fd05 	bl	80013c4 <ConsoleParamFindN>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00d      	beq.n	80019dc <ConsoleCommandDodecaQuery+0x38>
		{
			// List all tasks
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]
 80019c4:	e006      	b.n	80019d4 <ConsoleCommandDodecaQuery+0x30>
			{
				displayDodeca(f);
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fe81 	bl	80016d0 <displayDodeca>
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	3301      	adds	r3, #1
 80019d2:	75fb      	strb	r3, [r7, #23]
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	2b0b      	cmp	r3, #11
 80019d8:	d9f5      	bls.n	80019c6 <ConsoleCommandDodecaQuery+0x22>
 80019da:	e019      	b.n	8001a10 <ConsoleCommandDodecaQuery+0x6c>
			}
		}
		else
		{
			int16_t taskId;
			ConsoleReceiveParamInt16(buffer, 1, &taskId );
 80019dc:	f107 030e 	add.w	r3, r7, #14
 80019e0:	461a      	mov	r2, r3
 80019e2:	2101      	movs	r1, #1
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fd4e 	bl	8001486 <ConsoleReceiveParamInt16>

			if (taskId < 0 || taskId > DODECA_COUNT_MAX-1)
 80019ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db03      	blt.n	80019fa <ConsoleCommandDodecaQuery+0x56>
 80019f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019f6:	2b0b      	cmp	r3, #11
 80019f8:	dd04      	ble.n	8001a04 <ConsoleCommandDodecaQuery+0x60>
			{
				ConsoleSendLine("Invalid Task number");
 80019fa:	4808      	ldr	r0, [pc, #32]	; (8001a1c <ConsoleCommandDodecaQuery+0x78>)
 80019fc:	f7ff fe40 	bl	8001680 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001a00:	2310      	movs	r3, #16
 8001a02:	e006      	b.n	8001a12 <ConsoleCommandDodecaQuery+0x6e>
			}

			displayDodeca(taskId);
 8001a04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fe60 	bl	80016d0 <displayDodeca>

		}
		return COMMAND_SUCCESS;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	0800fe70 	.word	0x0800fe70

08001a20 <ConsoleCommandSaveConfig>:


static eCommandResult_T ConsoleCommandSaveConfig(const char buffer[])
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	sysConfigSave();
 8001a28:	f003 f9e0 	bl	8004dec <sysConfigSave>
	ConsoleSendLine("Config Saved!");
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <ConsoleCommandSaveConfig+0x1c>)
 8001a2e:	f7ff fe27 	bl	8001680 <ConsoleSendLine>
	return COMMAND_SUCCESS;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	0800fe84 	.word	0x0800fe84

08001a40 <ConsoleCommandFaceUpQuery>:

static eCommandResult_T ConsoleCommandFaceUpQuery(const char buffer[])
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b0a5      	sub	sp, #148	; 0x94
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	6078      	str	r0, [r7, #4]

	uint8_t face;
	char msg[30];

	MPU6050_t data;
	MPU6050ReadStable(&data);
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 f8fd 	bl	8002c4c <MPU6050ReadStable>


	sprintf(msg,"Angle X: %f Y: %f",data.KalmanAngleX, data.KalmanAngleY);
 8001a52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a5a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001a5e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4926      	ldr	r1, [pc, #152]	; (8001b00 <ConsoleCommandFaceUpQuery+0xc0>)
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f00a fc87 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 8001a6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fe04 	bl	8001680 <ConsoleSendLine>

	face = detectFaceUp();
 8001a78:	f001 fe64 	bl	8003744 <detectFaceUp>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (face < FACE_COUNT)
 8001a82:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001a86:	2b0b      	cmp	r3, #11
 8001a88:	d827      	bhi.n	8001ada <ConsoleCommandFaceUpQuery+0x9a>
	{
		sprintf(msg,"Detected face %i is up",face);
 8001a8a:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001a8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a92:	491c      	ldr	r1, [pc, #112]	; (8001b04 <ConsoleCommandFaceUpQuery+0xc4>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00a fc71 	bl	800c37c <siprintf>
		ConsoleSendLine(msg);
 8001a9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fdee 	bl	8001680 <ConsoleSendLine>
		uint32_t rgb_color = hsl_to_rgb((face*30), 255, 127);
 8001aa4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	227f      	movs	r2, #127	; 0x7f
 8001ab4:	21ff      	movs	r1, #255	; 0xff
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 fbe8 	bl	800528c <hsl_to_rgb>
 8001abc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		ledAllOff();
 8001ac0:	f001 fd54 	bl	800356c <ledAllOff>
		ledSetFaceColour(face, rgb_color,0x0,LED_FACE_MODE_NORMAL);
 8001ac4:	f897 0087 	ldrb.w	r0, [r7, #135]	; 0x87
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2200      	movs	r2, #0
 8001acc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001ad0:	f001 fd6c 	bl	80035ac <ledSetFaceColour>
		ledRender();
 8001ad4:	f001 fd61 	bl	800359a <ledRender>
 8001ad8:	e00c      	b.n	8001af4 <ConsoleCommandFaceUpQuery+0xb4>

	}
	else
	{
		sprintf(msg,"** Face NOT detected %i",face);
 8001ada:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001ade:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ae2:	4909      	ldr	r1, [pc, #36]	; (8001b08 <ConsoleCommandFaceUpQuery+0xc8>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00a fc49 	bl	800c37c <siprintf>
		ConsoleSendLine(msg);
 8001aea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fdc6 	bl	8001680 <ConsoleSendLine>





	return COMMAND_SUCCESS;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	378c      	adds	r7, #140	; 0x8c
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	0800fe94 	.word	0x0800fe94
 8001b04:	0800fea8 	.word	0x0800fea8
 8001b08:	0800fec0 	.word	0x0800fec0

08001b0c <ConsoleCommandLEDSet>:

static eCommandResult_T ConsoleCommandLEDSet(const char buffer[])
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	uint32_t startIndex;
	eCommandResult_T result;
	int16_t faceNumber;
	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fc51 	bl	80013c4 <ConsoleParamFindN>
 8001b22:	4603      	mov	r3, r0
 8001b24:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <ConsoleCommandLEDSet+0x24>
		return result;
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	e075      	b.n	8001c1c <ConsoleCommandLEDSet+0x110>

	uint8_t command = buffer[startIndex];
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	75bb      	strb	r3, [r7, #22]
	switch (command)
 8001b3a:	7dbb      	ldrb	r3, [r7, #22]
 8001b3c:	2b6f      	cmp	r3, #111	; 0x6f
 8001b3e:	d062      	beq.n	8001c06 <ConsoleCommandLEDSet+0xfa>
 8001b40:	2b6f      	cmp	r3, #111	; 0x6f
 8001b42:	dc68      	bgt.n	8001c16 <ConsoleCommandLEDSet+0x10a>
 8001b44:	2b64      	cmp	r3, #100	; 0x64
 8001b46:	d063      	beq.n	8001c10 <ConsoleCommandLEDSet+0x104>
 8001b48:	2b66      	cmp	r3, #102	; 0x66
 8001b4a:	d164      	bne.n	8001c16 <ConsoleCommandLEDSet+0x10a>
	{
		case 'f':

			result = ConsoleReceiveParamInt16(buffer, 2, &faceNumber);
 8001b4c:	f107 030e 	add.w	r3, r7, #14
 8001b50:	461a      	mov	r2, r3
 8001b52:	2102      	movs	r1, #2
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fc96 	bl	8001486 <ConsoleReceiveParamInt16>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	75fb      	strb	r3, [r7, #23]
			if (result != COMMAND_SUCCESS)
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <ConsoleCommandLEDSet+0x62>
			{
				ConsoleSendLine("Invalid Face ID");
 8001b64:	482f      	ldr	r0, [pc, #188]	; (8001c24 <ConsoleCommandLEDSet+0x118>)
 8001b66:	f7ff fd8b 	bl	8001680 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	e056      	b.n	8001c1c <ConsoleCommandLEDSet+0x110>
			}

			if (faceNumber >= PIXEL_RINGS)
 8001b6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b72:	2b0b      	cmp	r3, #11
 8001b74:	dd04      	ble.n	8001b80 <ConsoleCommandLEDSet+0x74>
			{
				ConsoleSendLine("Invalid Face ID - Must be Zero Index");
 8001b76:	482c      	ldr	r0, [pc, #176]	; (8001c28 <ConsoleCommandLEDSet+0x11c>)
 8001b78:	f7ff fd82 	bl	8001680 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	e04d      	b.n	8001c1c <ConsoleCommandLEDSet+0x110>
			}


			result = ConsoleParamFindN(buffer,3,&startIndex);
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	461a      	mov	r2, r3
 8001b86:	2103      	movs	r1, #3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fc1b 	bl	80013c4 <ConsoleParamFindN>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	75fb      	strb	r3, [r7, #23]
			uint8_t colour = buffer[startIndex];
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	757b      	strb	r3, [r7, #21]
			if ('r' == colour)
 8001b9c:	7d7b      	ldrb	r3, [r7, #21]
 8001b9e:	2b72      	cmp	r3, #114	; 0x72
 8001ba0:	d10d      	bne.n	8001bbe <ConsoleCommandLEDSet+0xb2>
				ledSetFaceColour(faceNumber,colourFindByid(COLOUR_RED_ID)->code,0x0,LED_FACE_MODE_NORMAL);
 8001ba2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ba6:	b2dc      	uxtb	r4, r3
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f000 fcc3 	bl	8002534 <colourFindByid>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f001 fcf8 	bl	80035ac <ledSetFaceColour>
 8001bbc:	e020      	b.n	8001c00 <ConsoleCommandLEDSet+0xf4>
			else if ('g' == colour)
 8001bbe:	7d7b      	ldrb	r3, [r7, #21]
 8001bc0:	2b67      	cmp	r3, #103	; 0x67
 8001bc2:	d10d      	bne.n	8001be0 <ConsoleCommandLEDSet+0xd4>
				ledSetFaceColour(faceNumber,colourFindByid(COLOUR_GREEN_ID)->code,0x0,LED_FACE_MODE_NORMAL);
 8001bc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bc8:	b2dc      	uxtb	r4, r3
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f000 fcb2 	bl	8002534 <colourFindByid>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	6919      	ldr	r1, [r3, #16]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f001 fce7 	bl	80035ac <ledSetFaceColour>
 8001bde:	e00f      	b.n	8001c00 <ConsoleCommandLEDSet+0xf4>
			else if ('b' == colour)
 8001be0:	7d7b      	ldrb	r3, [r7, #21]
 8001be2:	2b62      	cmp	r3, #98	; 0x62
 8001be4:	d10c      	bne.n	8001c00 <ConsoleCommandLEDSet+0xf4>
				ledSetFaceColour(faceNumber,colourFindByid(COLOUR_BLUE_ID)->code,0x0,LED_FACE_MODE_NORMAL);
 8001be6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bea:	b2dc      	uxtb	r4, r3
 8001bec:	2001      	movs	r0, #1
 8001bee:	f000 fca1 	bl	8002534 <colourFindByid>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6919      	ldr	r1, [r3, #16]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f001 fcd6 	bl	80035ac <ledSetFaceColour>

			ledRender();
 8001c00:	f001 fccb 	bl	800359a <ledRender>

			break;
 8001c04:	e009      	b.n	8001c1a <ConsoleCommandLEDSet+0x10e>
		case 'o':
			ledAllOff();
 8001c06:	f001 fcb1 	bl	800356c <ledAllOff>
			ledRender();
 8001c0a:	f001 fcc6 	bl	800359a <ledRender>
			break;
 8001c0e:	e004      	b.n	8001c1a <ConsoleCommandLEDSet+0x10e>
		case'd':
				ledDance();
 8001c10:	f001 fd49 	bl	80036a6 <ledDance>
			break;
 8001c14:	e001      	b.n	8001c1a <ConsoleCommandLEDSet+0x10e>
		default :
			return CONSOLE_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <ConsoleCommandLEDSet+0x110>
			break;
	}


	return CONSOLE_SUCCESS;
 8001c1a:	2300      	movs	r3, #0

}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	0800fed8 	.word	0x0800fed8
 8001c28:	0800fee8 	.word	0x0800fee8

08001c2c <ConsoleCommandMemTest>:

static eCommandResult_T ConsoleCommandMemTest(const char buffer[])
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
//
//	HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, 1);
//	Temp = (temp0 << 16) | (temp1 << 8) | temp2;
//	sprintf(msg,"Flash Mem Id \t%#02x %#02x %#02x %#02x %#02x %#02x %#02x %#02x ",id[0],id[1],id[2],id[3],id[4],id[5],id[6],id[7]);
//	ConsoleSendLine(msg);
	ConsoleSendLine("Commented out");
 8001c34:	4803      	ldr	r0, [pc, #12]	; (8001c44 <ConsoleCommandMemTest+0x18>)
 8001c36:	f7ff fd23 	bl	8001680 <ConsoleSendLine>
	return CONSOLE_SUCCESS;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	0800ff10 	.word	0x0800ff10

08001c48 <ConsoleCommandCPUQuery>:

static eCommandResult_T ConsoleCommandCPUQuery(const char buffer[])
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

	char msg[30];
	register int SP __asm("r13");


	sprintf(msg,"-- CPU Details --");
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	492b      	ldr	r1, [pc, #172]	; (8001d04 <ConsoleCommandCPUQuery+0xbc>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f00a fb90 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fd0d 	bl	8001680 <ConsoleSendLine>

	sprintf(msg,"Stack Pointer \t\t%#08x",SP);
 8001c66:	466a      	mov	r2, sp
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4926      	ldr	r1, [pc, #152]	; (8001d08 <ConsoleCommandCPUQuery+0xc0>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f00a fb84 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fd01 	bl	8001680 <ConsoleSendLine>

	unsigned int* HP = malloc(1);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f009 fb98 	bl	800b3b4 <malloc>
 8001c84:	4603      	mov	r3, r0
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
	*HP=0xAB;
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	22ab      	movs	r2, #171	; 0xab
 8001c8c:	601a      	str	r2, [r3, #0]

	sprintf(msg,"Heap Pointer \t\t%#08x",(unsigned int)HP-1);
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	1e5a      	subs	r2, r3, #1
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	491d      	ldr	r1, [pc, #116]	; (8001d0c <ConsoleCommandCPUQuery+0xc4>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00a fb6f 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fcec 	bl	8001680 <ConsoleSendLine>
	free(HP);
 8001ca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001caa:	f009 fb8b 	bl	800b3c4 <free>
//	ConsoleSendLine(msg);

//	sprintf(msg,"Un-initialised global variable \t\t%#08x",(unsigned int)&uninitGlobalVar);
//	ConsoleSendLine(msg);

	sprintf(msg,"Const variable \t\t%#08x",(unsigned int)&constVar);
 8001cae:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <ConsoleCommandCPUQuery+0xc8>)
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4917      	ldr	r1, [pc, #92]	; (8001d14 <ConsoleCommandCPUQuery+0xcc>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f00a fb60 	bl	800c37c <siprintf>
		ConsoleSendLine(msg);
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fcdd 	bl	8001680 <ConsoleSendLine>

	sprintf(msg,"Static variable \t\t%#08x",(unsigned int)&staticVar);
 8001cc6:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <ConsoleCommandCPUQuery+0xd0>)
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4913      	ldr	r1, [pc, #76]	; (8001d1c <ConsoleCommandCPUQuery+0xd4>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f00a fb54 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fcd1 	bl	8001680 <ConsoleSendLine>

	sprintf(msg,"Function variable \t\t%#08x",(unsigned int)&funcVar);
 8001cde:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	490e      	ldr	r1, [pc, #56]	; (8001d20 <ConsoleCommandCPUQuery+0xd8>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00a fb47 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fcc4 	bl	8001680 <ConsoleSendLine>

	return CONSOLE_SUCCESS;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3730      	adds	r7, #48	; 0x30
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	0800ff20 	.word	0x0800ff20
 8001d08:	0800ff34 	.word	0x0800ff34
 8001d0c:	0800ff4c 	.word	0x0800ff4c
 8001d10:	080103ec 	.word	0x080103ec
 8001d14:	0800ff64 	.word	0x0800ff64
 8001d18:	20000578 	.word	0x20000578
 8001d1c:	0800ff7c 	.word	0x0800ff7c
 8001d20:	0800ff94 	.word	0x0800ff94

08001d24 <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	461a      	mov	r2, r3
 8001d32:	2101      	movs	r1, #1
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fb45 	bl	80013c4 <ConsoleParamFindN>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 8001d44:	2310      	movs	r3, #16
 8001d46:	e049      	b.n	8001ddc <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	18d0      	adds	r0, r2, r3
 8001d4e:	f107 0114 	add.w	r1, r7, #20
 8001d52:	f107 0218 	add.w	r2, r7, #24
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4921      	ldr	r1, [pc, #132]	; (8001de4 <ConsoleCommandDateSet+0xc0>)
 8001d60:	f00a fb2c 	bl	800c3bc <siscanf>

	if (!IS_RTC_DATE(day) )
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <ConsoleCommandDateSet+0x4c>
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b1f      	cmp	r3, #31
 8001d6e:	d904      	bls.n	8001d7a <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 8001d70:	481d      	ldr	r0, [pc, #116]	; (8001de8 <ConsoleCommandDateSet+0xc4>)
 8001d72:	f7ff fc85 	bl	8001680 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d76:	2310      	movs	r3, #16
 8001d78:	e030      	b.n	8001ddc <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <ConsoleCommandDateSet+0x62>
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d904      	bls.n	8001d90 <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 8001d86:	4819      	ldr	r0, [pc, #100]	; (8001dec <ConsoleCommandDateSet+0xc8>)
 8001d88:	f7ff fc7a 	bl	8001680 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	e025      	b.n	8001ddc <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b63      	cmp	r3, #99	; 0x63
 8001d94:	d904      	bls.n	8001da0 <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8001d96:	4816      	ldr	r0, [pc, #88]	; (8001df0 <ConsoleCommandDateSet+0xcc>)
 8001d98:	f7ff fc72 	bl	8001680 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	e01d      	b.n	8001ddc <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 8001db2:	2307      	movs	r3, #7
 8001db4:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	2200      	movs	r2, #0
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <ConsoleCommandDateSet+0xd0>)
 8001dc0:	f006 fd26 	bl	8008810 <HAL_RTC_SetDate>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d004      	beq.n	8001dd4 <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <ConsoleCommandDateSet+0xd4>)
 8001dcc:	f7ff fc58 	bl	8001680 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	e003      	b.n	8001ddc <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8001dd4:	4809      	ldr	r0, [pc, #36]	; (8001dfc <ConsoleCommandDateSet+0xd8>)
 8001dd6:	f7ff fc53 	bl	8001680 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001dda:	2300      	movs	r3, #0
	}
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	0800ffb0 	.word	0x0800ffb0
 8001de8:	0800ffbc 	.word	0x0800ffbc
 8001dec:	0800ffe0 	.word	0x0800ffe0
 8001df0:	08010004 	.word	0x08010004
 8001df4:	20000640 	.word	0x20000640
 8001df8:	08010028 	.word	0x08010028
 8001dfc:	0801004c 	.word	0x0801004c

08001e00 <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08e      	sub	sp, #56	; 0x38
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2101      	movs	r1, #1
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fad7 	bl	80013c4 <ConsoleParamFindN>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 8001e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 8001e24:	2310      	movs	r3, #16
 8001e26:	e041      	b.n	8001eac <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	18d0      	adds	r0, r2, r3
 8001e2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	491d      	ldr	r1, [pc, #116]	; (8001eb4 <ConsoleCommandTimeSet+0xb4>)
 8001e40:	f00a fabc 	bl	800c3bc <siscanf>

	if (!IS_RTC_MINUTES(min) )
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	2b3b      	cmp	r3, #59	; 0x3b
 8001e48:	d904      	bls.n	8001e54 <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 8001e4a:	481b      	ldr	r0, [pc, #108]	; (8001eb8 <ConsoleCommandTimeSet+0xb8>)
 8001e4c:	f7ff fc18 	bl	8001680 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001e50:	2310      	movs	r3, #16
 8001e52:	e02b      	b.n	8001eac <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2b3b      	cmp	r3, #59	; 0x3b
 8001e58:	d904      	bls.n	8001e64 <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 8001e5a:	4818      	ldr	r0, [pc, #96]	; (8001ebc <ConsoleCommandTimeSet+0xbc>)
 8001e5c:	f7ff fc10 	bl	8001680 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001e60:	2310      	movs	r3, #16
 8001e62:	e023      	b.n	8001eac <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	2b17      	cmp	r3, #23
 8001e68:	d904      	bls.n	8001e74 <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 8001e6a:	4815      	ldr	r0, [pc, #84]	; (8001ec0 <ConsoleCommandTimeSet+0xc0>)
 8001e6c:	f7ff fc08 	bl	8001680 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001e70:	2310      	movs	r3, #16
 8001e72:	e01b      	b.n	8001eac <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001e86:	f107 0308 	add.w	r3, r7, #8
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <ConsoleCommandTimeSet+0xc4>)
 8001e90:	f006 fbc6 	bl	8008620 <HAL_RTC_SetTime>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d004      	beq.n	8001ea4 <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 8001e9a:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <ConsoleCommandTimeSet+0xc8>)
 8001e9c:	f7ff fbf0 	bl	8001680 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	e003      	b.n	8001eac <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Time Set");
 8001ea4:	4809      	ldr	r0, [pc, #36]	; (8001ecc <ConsoleCommandTimeSet+0xcc>)
 8001ea6:	f7ff fbeb 	bl	8001680 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001eaa:	2300      	movs	r3, #0
	}
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3730      	adds	r7, #48	; 0x30
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	08010058 	.word	0x08010058
 8001eb8:	08010064 	.word	0x08010064
 8001ebc:	08010088 	.word	0x08010088
 8001ec0:	080100b0 	.word	0x080100b0
 8001ec4:	20000640 	.word	0x20000640
 8001ec8:	080100d4 	.word	0x080100d4
 8001ecc:	080100f8 	.word	0x080100f8

08001ed0 <ConsoleCommandLipoQuery>:


static eCommandResult_T ConsoleCommandLipoQuery(const char buffer[])
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b090      	sub	sp, #64	; 0x40
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	uint16_t voltage;
	uint16_t temp;
	uint16_t version;
	char msg[50];
	lc709203_getCellVoltage(&voltage);
 8001ed8:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 fafc 	bl	80034da <lc709203_getCellVoltage>
	lc709203_getCellTemp(&temp);
 8001ee2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 fb04 	bl	80034f4 <lc709203_getCellTemp>
	lc709203_getId(&version);
 8001eec:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f001 fb0c 	bl	800350e <lc709203_getId>

	sprintf(msg,"-- Lipo Cell Details --");
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	4922      	ldr	r1, [pc, #136]	; (8001f84 <ConsoleCommandLipoQuery+0xb4>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00a fa3d 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fbba 	bl	8001680 <ConsoleSendLine>

	sprintf(msg,"Monitor Version: %d",version);
 8001f0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	491c      	ldr	r1, [pc, #112]	; (8001f88 <ConsoleCommandLipoQuery+0xb8>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f00a fa30 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fbad 	bl	8001680 <ConsoleSendLine>

	sprintf(msg,"Cell Voltage: %1.4f v",((double)voltage/1000));
 8001f26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb03 	bl	8000534 <__aeabi_ui2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <ConsoleCommandLipoQuery+0xbc>)
 8001f34:	f7fe fca2 	bl	800087c <__aeabi_ddiv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	f107 0008 	add.w	r0, r7, #8
 8001f40:	4913      	ldr	r1, [pc, #76]	; (8001f90 <ConsoleCommandLipoQuery+0xc0>)
 8001f42:	f00a fa1b 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fb98 	bl	8001680 <ConsoleSendLine>

	sprintf(msg,"Cell Temp: %1.2f v",((double)temp/100));
 8001f50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe faee 	bl	8000534 <__aeabi_ui2d>
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <ConsoleCommandLipoQuery+0xc4>)
 8001f5e:	f7fe fc8d 	bl	800087c <__aeabi_ddiv>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	f107 0008 	add.w	r0, r7, #8
 8001f6a:	490b      	ldr	r1, [pc, #44]	; (8001f98 <ConsoleCommandLipoQuery+0xc8>)
 8001f6c:	f00a fa06 	bl	800c37c <siprintf>
	ConsoleSendLine(msg);
 8001f70:	f107 0308 	add.w	r3, r7, #8
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fb83 	bl	8001680 <ConsoleSendLine>



	return COMMAND_SUCCESS;
 8001f7a:	2300      	movs	r3, #0

}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3740      	adds	r7, #64	; 0x40
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	08010104 	.word	0x08010104
 8001f88:	0801011c 	.word	0x0801011c
 8001f8c:	408f4000 	.word	0x408f4000
 8001f90:	08010130 	.word	0x08010130
 8001f94:	40590000 	.word	0x40590000
 8001f98:	08010148 	.word	0x08010148

08001f9c <ConsoleCommandAccelQuery>:
 * @param: Buffer
 * @return: eCommandResult_T
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandAccelQuery(const char buffer[])
{
 8001f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fa0:	b0c3      	sub	sp, #268	; 0x10c
 8001fa2:	af08      	add	r7, sp, #32
 8001fa4:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	char binStr[9];
	MPU6050_t data;
	char msg[100];
	uint32_t paramIndex;
	float rawAveX = 0;
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	float rawAveY = 0;
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float rawAveZ = 0;
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	ConsoleParamFindN(buffer, 1 , &paramIndex);
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff f9fc 	bl	80013c4 <ConsoleParamFindN>

	if (0 == paramIndex)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11a      	bne.n	8002008 <ConsoleCommandAccelQuery+0x6c>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 8001fd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	48bd      	ldr	r0, [pc, #756]	; (80022d0 <ConsoleCommandAccelQuery+0x334>)
 8001fda:	f000 fe55 	bl	8002c88 <MPU6050_Read_All>
		sprintf(msg,"X Angle\t: %f \t\t Y Angle\t: %f\n",data.KalmanAngleX, data.KalmanAngleY);
 8001fde:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001fe2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001fe6:	f107 040c 	add.w	r4, r7, #12
 8001fea:	e9cd 2300 	strd	r2, r3, [sp]
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	49b8      	ldr	r1, [pc, #736]	; (80022d4 <ConsoleCommandAccelQuery+0x338>)
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f00a f9c1 	bl	800c37c <siprintf>
		ConsoleSendLine(msg);
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fb3e 	bl	8001680 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8002004:	2300      	movs	r3, #0
 8002006:	e15d      	b.n	80022c4 <ConsoleCommandAccelQuery+0x328>
	}


	// Read Raw n Times (Param r n where n = number of reads
	switch (buffer[paramIndex])
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	3b67      	subs	r3, #103	; 0x67
 8002012:	2b10      	cmp	r3, #16
 8002014:	d824      	bhi.n	8002060 <ConsoleCommandAccelQuery+0xc4>
 8002016:	a201      	add	r2, pc, #4	; (adr r2, 800201c <ConsoleCommandAccelQuery+0x80>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	0800220f 	.word	0x0800220f
 8002020:	08002061 	.word	0x08002061
 8002024:	08002061 	.word	0x08002061
 8002028:	08002061 	.word	0x08002061
 800202c:	080021bb 	.word	0x080021bb
 8002030:	08002061 	.word	0x08002061
 8002034:	08002061 	.word	0x08002061
 8002038:	08002061 	.word	0x08002061
 800203c:	08002061 	.word	0x08002061
 8002040:	08002061 	.word	0x08002061
 8002044:	08002061 	.word	0x08002061
 8002048:	08002065 	.word	0x08002065
 800204c:	08002061 	.word	0x08002061
 8002050:	08002061 	.word	0x08002061
 8002054:	08002061 	.word	0x08002061
 8002058:	08002061 	.word	0x08002061
 800205c:	0800226d 	.word	0x0800226d
	{
		default:
				return COMMAND_PARAMETER_ERROR;
 8002060:	2310      	movs	r3, #16
 8002062:	e12f      	b.n	80022c4 <ConsoleCommandAccelQuery+0x328>
		case 'r':
				ConsoleReceiveParamInt16(buffer, 2, &n);
 8002064:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002068:	461a      	mov	r2, r3
 800206a:	2102      	movs	r1, #2
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff fa0a 	bl	8001486 <ConsoleReceiveParamInt16>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8002072:	2300      	movs	r3, #0
 8002074:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8002078:	e052      	b.n	8002120 <ConsoleCommandAccelQuery+0x184>
				{
					MPU6050_Read_Accel(&I2C_MPU6050, &data);
 800207a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800207e:	4619      	mov	r1, r3
 8002080:	4893      	ldr	r0, [pc, #588]	; (80022d0 <ConsoleCommandAccelQuery+0x334>)
 8002082:	f000 fd11 	bl	8002aa8 <MPU6050_Read_Accel>
					rawAveX += data.Accel_X_RAW;
 8002086:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002092:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8002096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209a:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
					rawAveY += data.Accel_Y_RAW;
 800209e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020aa:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80020ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b2:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
					rawAveZ += data.Accel_Z_RAW;
 80020b6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80020c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ca:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
					sprintf(msg,"RAW:[X:%5i Y:%5i Z:5%i] G:[X:%2f Y:%2f Z:%2f]",data.Accel_X_RAW, data.Accel_Y_RAW,data.Accel_Z_RAW, data.Ax,data.Ay,data.Az);
 80020ce:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80020d2:	469c      	mov	ip, r3
 80020d4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80020d8:	469e      	mov	lr, r3
 80020da:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80020e4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020e8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80020ec:	f107 060c 	add.w	r6, r7, #12
 80020f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80020f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80020f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4673      	mov	r3, lr
 8002102:	4662      	mov	r2, ip
 8002104:	4974      	ldr	r1, [pc, #464]	; (80022d8 <ConsoleCommandAccelQuery+0x33c>)
 8002106:	4630      	mov	r0, r6
 8002108:	f00a f938 	bl	800c37c <siprintf>
					ConsoleSendLine(msg);
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fab5 	bl	8001680 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8002116:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800211a:	3301      	adds	r3, #1
 800211c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8002120:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002124:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8002128:	4293      	cmp	r3, r2
 800212a:	dba6      	blt.n	800207a <ConsoleCommandAccelQuery+0xde>
				}
				rawAveX = rawAveX/n;
 800212c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002138:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 800213c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002140:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				rawAveY = rawAveY/n;
 8002144:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002150:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 8002154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002158:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				rawAveZ = rawAveZ/n;
 800215c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002168:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 800216c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002170:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
				sprintf(msg,"\nRAW Average :[X:%5f Y:%5f Z:5%f]\n",rawAveX,rawAveY,rawAveZ);
 8002174:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8002178:	f7fe f9fe 	bl	8000578 <__aeabi_f2d>
 800217c:	4680      	mov	r8, r0
 800217e:	4689      	mov	r9, r1
 8002180:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8002184:	f7fe f9f8 	bl	8000578 <__aeabi_f2d>
 8002188:	4604      	mov	r4, r0
 800218a:	460d      	mov	r5, r1
 800218c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002190:	f7fe f9f2 	bl	8000578 <__aeabi_f2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	f107 000c 	add.w	r0, r7, #12
 800219c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021a0:	e9cd 4500 	strd	r4, r5, [sp]
 80021a4:	4642      	mov	r2, r8
 80021a6:	464b      	mov	r3, r9
 80021a8:	494c      	ldr	r1, [pc, #304]	; (80022dc <ConsoleCommandAccelQuery+0x340>)
 80021aa:	f00a f8e7 	bl	800c37c <siprintf>
				ConsoleSendLine(msg);
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fa64 	bl	8001680 <ConsoleSendLine>
				break;
 80021b8:	e083      	b.n	80022c2 <ConsoleCommandAccelQuery+0x326>

		case 'k':
				ConsoleSendLine("--* Kalman Angle *--");
 80021ba:	4849      	ldr	r0, [pc, #292]	; (80022e0 <ConsoleCommandAccelQuery+0x344>)
 80021bc:	f7ff fa60 	bl	8001680 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80021c6:	e00a      	b.n	80021de <ConsoleCommandAccelQuery+0x242>
				{
					MPU6050_Read_All(&I2C_MPU6050, &data);
 80021c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021cc:	4619      	mov	r1, r3
 80021ce:	4840      	ldr	r0, [pc, #256]	; (80022d0 <ConsoleCommandAccelQuery+0x334>)
 80021d0:	f000 fd5a 	bl	8002c88 <MPU6050_Read_All>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 80021d4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80021d8:	3301      	adds	r3, #1
 80021da:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80021de:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80021e2:	2b31      	cmp	r3, #49	; 0x31
 80021e4:	d9f0      	bls.n	80021c8 <ConsoleCommandAccelQuery+0x22c>
				}
				sprintf(msg,"[X:%2f Y:%2f]\n",data.KalmanAngleX, data.KalmanAngleY);
 80021e6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80021ea:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80021ee:	f107 040c 	add.w	r4, r7, #12
 80021f2:	e9cd 2300 	strd	r2, r3, [sp]
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	493a      	ldr	r1, [pc, #232]	; (80022e4 <ConsoleCommandAccelQuery+0x348>)
 80021fc:	4620      	mov	r0, r4
 80021fe:	f00a f8bd 	bl	800c37c <siprintf>
				ConsoleSendLine(msg);
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fa3a 	bl	8001680 <ConsoleSendLine>
			break;
 800220c:	e059      	b.n	80022c2 <ConsoleCommandAccelQuery+0x326>
		case 'g':
			ConsoleReceiveParamHexUint16(buffer, 2, &reg);
 800220e:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 8002212:	461a      	mov	r2, r3
 8002214:	2102      	movs	r1, #2
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff f99b 	bl	8001552 <ConsoleReceiveParamHexUint16>
			regData =  MPU6050_ReadReg(&I2C_MPU6050,reg);
 800221c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002220:	4619      	mov	r1, r3
 8002222:	482b      	ldr	r0, [pc, #172]	; (80022d0 <ConsoleCommandAccelQuery+0x334>)
 8002224:	f000 fce2 	bl	8002bec <MPU6050_ReadReg>
 8002228:	4603      	mov	r3, r0
 800222a:	b29b      	uxth	r3, r3
 800222c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			byteToBin(regData, binStr);
 8002230:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f001 f91c 	bl	800347a <byteToBin>
			sprintf(msg,"Reg [0x%x] = %x, %s",reg,regData,binStr);
 8002242:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002246:	461a      	mov	r2, r3
 8002248:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800224c:	4619      	mov	r1, r3
 800224e:	f107 000c 	add.w	r0, r7, #12
 8002252:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	460b      	mov	r3, r1
 800225a:	4923      	ldr	r1, [pc, #140]	; (80022e8 <ConsoleCommandAccelQuery+0x34c>)
 800225c:	f00a f88e 	bl	800c37c <siprintf>
			ConsoleSendLine(msg);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fa0b 	bl	8001680 <ConsoleSendLine>
		break;
 800226a:	e02a      	b.n	80022c2 <ConsoleCommandAccelQuery+0x326>
		case 'w':
				if (COMMAND_SUCCESS != ConsoleReceiveParamHexUint16(buffer, 2, &reg))
 800226c:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 8002270:	461a      	mov	r2, r3
 8002272:	2102      	movs	r1, #2
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff f96c 	bl	8001552 <ConsoleReceiveParamHexUint16>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d004      	beq.n	800228a <ConsoleCommandAccelQuery+0x2ee>
				{
					ConsoleSendLine("Register missing");
 8002280:	481a      	ldr	r0, [pc, #104]	; (80022ec <ConsoleCommandAccelQuery+0x350>)
 8002282:	f7ff f9fd 	bl	8001680 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8002286:	2310      	movs	r3, #16
 8002288:	e01c      	b.n	80022c4 <ConsoleCommandAccelQuery+0x328>
				};

				if (COMMAND_SUCCESS != ConsoleReceiveParamHexUint16(buffer, 3, &regData))
 800228a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800228e:	461a      	mov	r2, r3
 8002290:	2103      	movs	r1, #3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff f95d 	bl	8001552 <ConsoleReceiveParamHexUint16>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <ConsoleCommandAccelQuery+0x30c>
				{
					ConsoleSendLine("Register Data missing");
 800229e:	4814      	ldr	r0, [pc, #80]	; (80022f0 <ConsoleCommandAccelQuery+0x354>)
 80022a0:	f7ff f9ee 	bl	8001680 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 80022a4:	2310      	movs	r3, #16
 80022a6:	e00d      	b.n	80022c4 <ConsoleCommandAccelQuery+0x328>
				};
				MPU6050_WriteReg(&I2C_MPU6050,reg,regData );
 80022a8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80022ac:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	4806      	ldr	r0, [pc, #24]	; (80022d0 <ConsoleCommandAccelQuery+0x334>)
 80022b6:	f000 fcb1 	bl	8002c1c <MPU6050_WriteReg>

				ConsoleSendLine("done.");
 80022ba:	480e      	ldr	r0, [pc, #56]	; (80022f4 <ConsoleCommandAccelQuery+0x358>)
 80022bc:	f7ff f9e0 	bl	8001680 <ConsoleSendLine>
				break;
 80022c0:	bf00      	nop
	}

	return COMMAND_SUCCESS;
 80022c2:	2300      	movs	r3, #0



}
 80022c4:	4618      	mov	r0, r3
 80022c6:	37ec      	adds	r7, #236	; 0xec
 80022c8:	46bd      	mov	sp, r7
 80022ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022ce:	bf00      	nop
 80022d0:	200005ec 	.word	0x200005ec
 80022d4:	0801015c 	.word	0x0801015c
 80022d8:	0801017c 	.word	0x0801017c
 80022dc:	080101ac 	.word	0x080101ac
 80022e0:	080101d0 	.word	0x080101d0
 80022e4:	080101e8 	.word	0x080101e8
 80022e8:	080101f8 	.word	0x080101f8
 80022ec:	0801020c 	.word	0x0801020c
 80022f0:	08010220 	.word	0x08010220
 80022f4:	08010238 	.word	0x08010238

080022f8 <ConsoleCommandTimeQuery>:


static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	char time[30];
	rtcGetTimeString(time);
 8002300:	f107 0308 	add.w	r3, r7, #8
 8002304:	4618      	mov	r0, r3
 8002306:	f001 faa9 	bl	800385c <rtcGetTimeString>
	ConsoleSendString("Time: ");
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <ConsoleCommandTimeQuery+0x2c>)
 800230c:	f7ff f9ab 	bl	8001666 <ConsoleSendString>
	ConsoleSendString(time);
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f9a6 	bl	8001666 <ConsoleSendString>
	return COMMAND_SUCCESS;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	08010240 	.word	0x08010240

08002328 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	char date[30];
	ConsoleSendString("Date: ");
 8002330:	4808      	ldr	r0, [pc, #32]	; (8002354 <ConsoleCommandDateQuery+0x2c>)
 8002332:	f7ff f998 	bl	8001666 <ConsoleSendString>
	rtcGetDateString(date);
 8002336:	f107 0308 	add.w	r3, r7, #8
 800233a:	4618      	mov	r0, r3
 800233c:	f001 fab4 	bl	80038a8 <rtcGetDateString>
	ConsoleSendString(date);
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f98e 	bl	8001666 <ConsoleSendString>
	return COMMAND_SUCCESS;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3728      	adds	r7, #40	; 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	08010248 	.word	0x08010248

08002358 <ConsoleCommandHelp>:




static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8002360:	2300      	movs	r3, #0
 8002362:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8002364:	2314      	movs	r3, #20
 8002366:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e01c      	b.n	80023a8 <ConsoleCommandHelp+0x50>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <ConsoleCommandHelp+0x64>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	216c      	movs	r1, #108	; 0x6c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f899 	bl	80024b4 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8002382:	480f      	ldr	r0, [pc, #60]	; (80023c0 <ConsoleCommandHelp+0x68>)
 8002384:	f000 f896 	bl	80024b4 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	226c      	movs	r2, #108	; 0x6c
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	3308      	adds	r3, #8
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <ConsoleCommandHelp+0x64>)
 8002394:	4413      	add	r3, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f88c 	bl	80024b4 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 800239c:	4809      	ldr	r0, [pc, #36]	; (80023c4 <ConsoleCommandHelp+0x6c>)
 800239e:	f000 f889 	bl	80024b4 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3301      	adds	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3dd      	bcc.n	800236e <ConsoleCommandHelp+0x16>
	}
	return result;
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	080103f0 	.word	0x080103f0
 80023c0:	08010250 	.word	0x08010250
 80023c4:	08010254 	.word	0x08010254

080023c8 <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <ConsoleCommandVer+0x24>)
 80023d6:	f000 f86d 	bl	80024b4 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <ConsoleCommandVer+0x28>)
 80023dc:	f000 f86a 	bl	80024b4 <ConsoleIoSendString>
	return result;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	08010258 	.word	0x08010258
 80023f0:	08010254 	.word	0x08010254

080023f4 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <ConsoleCommandsGetTable+0x10>)
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	080103f0 	.word	0x080103f0

08002408 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8002410:	2201      	movs	r2, #1
 8002412:	4909      	ldr	r1, [pc, #36]	; (8002438 <HAL_UART_RxCpltCallback+0x30>)
 8002414:	4809      	ldr	r0, [pc, #36]	; (800243c <HAL_UART_RxCpltCallback+0x34>)
 8002416:	f007 ff3c 	bl	800a292 <HAL_UART_Receive_IT>
    }



    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_UART_RxCpltCallback+0x30>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b0a      	cmp	r3, #10
 8002420:	d005      	beq.n	800242e <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_UART_RxCpltCallback+0x30>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <HAL_UART_RxCpltCallback+0x38>)
 800242a:	f7fe fdc6 	bl	8000fba <cBuffer_Write>

    }
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200005c4 	.word	0x200005c4
 800243c:	200007b0 	.word	0x200007b0
 8002440:	200005bc 	.word	0x200005bc

08002444 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	4906      	ldr	r1, [pc, #24]	; (8002464 <ConsoleIoInit+0x20>)
 800244c:	4806      	ldr	r0, [pc, #24]	; (8002468 <ConsoleIoInit+0x24>)
 800244e:	f7fe fd95 	bl	8000f7c <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8002452:	2201      	movs	r2, #1
 8002454:	4905      	ldr	r1, [pc, #20]	; (800246c <ConsoleIoInit+0x28>)
 8002456:	4806      	ldr	r0, [pc, #24]	; (8002470 <ConsoleIoInit+0x2c>)
 8002458:	f007 ff1b 	bl	800a292 <HAL_UART_Receive_IT>

	return CONSOLE_SUCCESS;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000057c 	.word	0x2000057c
 8002468:	200005bc 	.word	0x200005bc
 800246c:	200005c4 	.word	0x200005c4
 8002470:	200007b0 	.word	0x200007b0

08002474 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	uint8_t len;




	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 800247c:	f107 030f 	add.w	r3, r7, #15
 8002480:	220d      	movs	r2, #13
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	480a      	ldr	r0, [pc, #40]	; (80024b0 <ConsoleIoReceive+0x3c>)
 8002486:	f7fe fdbb 	bl	8001000 <cBuffer_GetString>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len-1]  = 0x0; //Terminate String in C Style
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	3b01      	subs	r3, #1
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 ff90 	bl	80033c2 <manageBackSpace>
		return CONSOLE_SUCCESS;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <ConsoleIoReceive+0x34>
	}
	return CONSOLE_NO_STRING;
 80024a6:	2302      	movs	r3, #2

}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200005bc 	.word	0x200005bc

080024b4 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7fd fe99 	bl	80001f4 <strlen>
 80024c2:	4603      	mov	r3, r0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	2364      	movs	r3, #100	; 0x64
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4804      	ldr	r0, [pc, #16]	; (80024dc <ConsoleIoSendString+0x28>)
 80024cc:	f007 fe4f 	bl	800a16e <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200007b0 	.word	0x200007b0

080024e0 <colourFindByCode>:
			{COLOUR_ERROR_ID,"BLACK",0xFA0000}

};

colour_t * colourFindByCode(const uint32_t code)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e016      	b.n	800251c <colourFindByCode+0x3c>
	{
		if (code == colours[i].code)
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	490f      	ldr	r1, [pc, #60]	; (8002530 <colourFindByCode+0x50>)
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	3310      	adds	r3, #16
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d107      	bne.n	8002516 <colourFindByCode+0x36>
		{
			return &colours[i];
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4a07      	ldr	r2, [pc, #28]	; (8002530 <colourFindByCode+0x50>)
 8002512:	4413      	add	r3, r2
 8002514:	e006      	b.n	8002524 <colourFindByCode+0x44>
	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	3301      	adds	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b0d      	cmp	r3, #13
 8002520:	d9e5      	bls.n	80024ee <colourFindByCode+0xe>
		}
	}
	return NULL;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	20000000 	.word	0x20000000

08002534 <colourFindByid>:

	return NULL;
}

colour_t *colourFindByid(const uint8_t id )
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e015      	b.n	8002570 <colourFindByid+0x3c>
	{
		if (id == colours[i].id)
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	490f      	ldr	r1, [pc, #60]	; (8002584 <colourFindByid+0x50>)
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	429a      	cmp	r2, r3
 8002558:	d107      	bne.n	800256a <colourFindByid+0x36>
		{
			return &colours[i];
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4a07      	ldr	r2, [pc, #28]	; (8002584 <colourFindByid+0x50>)
 8002566:	4413      	add	r3, r2
 8002568:	e006      	b.n	8002578 <colourFindByid+0x44>
	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	3301      	adds	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b0d      	cmp	r3, #13
 8002574:	d9e6      	bls.n	8002544 <colourFindByid+0x10>
		}
	}

	return NULL;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	20000000 	.word	0x20000000

08002588 <dodecaInit>:
		}
};


eDodecaErr_t dodecaInit(dodecaItems_t * items)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	dodecaItems = items;
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <dodecaInit+0x1c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
	return DODECA_ERR_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	200005c8 	.word	0x200005c8

080025a8 <dodecaReset>:

eDodecaErr_t dodecaReset()
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<DODECA_COUNT_MAX;i++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	71fb      	strb	r3, [r7, #7]
 80025b2:	e074      	b.n	800269e <dodecaReset+0xf6>
	{
		dodecaItems->items[i].id = i;
 80025b4:	4b3e      	ldr	r3, [pc, #248]	; (80026b0 <dodecaReset+0x108>)
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	79fa      	ldrb	r2, [r7, #7]
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	440b      	add	r3, r1
 80025c4:	79fa      	ldrb	r2, [r7, #7]
 80025c6:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].colour = colourFindByid(defaultDoceca.items[i].colour)->code;
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	493a      	ldr	r1, [pc, #232]	; (80026b4 <dodecaReset+0x10c>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	440b      	add	r3, r1
 80025d6:	3318      	adds	r3, #24
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ffa9 	bl	8002534 <colourFindByid>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a32      	ldr	r2, [pc, #200]	; (80026b0 <dodecaReset+0x108>)
 80025e6:	6810      	ldr	r0, [r2, #0]
 80025e8:	79fa      	ldrb	r2, [r7, #7]
 80025ea:	6919      	ldr	r1, [r3, #16]
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	4403      	add	r3, r0
 80025f6:	3318      	adds	r3, #24
 80025f8:	6019      	str	r1, [r3, #0]
		dodecaItems->items[i].maxTimeMins = defaultDoceca.items[i].maxTimeMins;
 80025fa:	79f9      	ldrb	r1, [r7, #7]
 80025fc:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <dodecaReset+0x108>)
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	4c2c      	ldr	r4, [pc, #176]	; (80026b4 <dodecaReset+0x10c>)
 8002604:	460b      	mov	r3, r1
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	440b      	add	r3, r1
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4423      	add	r3, r4
 800260e:	331d      	adds	r3, #29
 8002610:	7819      	ldrb	r1, [r3, #0]
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	4403      	add	r3, r0
 800261c:	331d      	adds	r3, #29
 800261e:	460a      	mov	r2, r1
 8002620:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].minTimeMins = defaultDoceca.items[i].minTimeMins;
 8002622:	79f9      	ldrb	r1, [r7, #7]
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <dodecaReset+0x108>)
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	4c22      	ldr	r4, [pc, #136]	; (80026b4 <dodecaReset+0x10c>)
 800262c:	460b      	mov	r3, r1
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	440b      	add	r3, r1
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4423      	add	r3, r4
 8002636:	331c      	adds	r3, #28
 8002638:	7819      	ldrb	r1, [r3, #0]
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	4403      	add	r3, r0
 8002644:	331c      	adds	r3, #28
 8002646:	460a      	mov	r2, r1
 8002648:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].state = defaultDoceca.items[i].state;
 800264a:	79f9      	ldrb	r1, [r7, #7]
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <dodecaReset+0x108>)
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	79fa      	ldrb	r2, [r7, #7]
 8002652:	4c18      	ldr	r4, [pc, #96]	; (80026b4 <dodecaReset+0x10c>)
 8002654:	460b      	mov	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	440b      	add	r3, r1
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	4423      	add	r3, r4
 800265e:	3328      	adds	r3, #40	; 0x28
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	4403      	add	r3, r0
 800266c:	3328      	adds	r3, #40	; 0x28
 800266e:	6019      	str	r1, [r3, #0]
		strcpy(dodecaItems->items[i].name,defaultDoceca.items[i].name);
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <dodecaReset+0x108>)
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	79fa      	ldrb	r2, [r7, #7]
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	440b      	add	r3, r1
 8002680:	1c58      	adds	r0, r3, #1
 8002682:	79fa      	ldrb	r2, [r7, #7]
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <dodecaReset+0x10c>)
 800268e:	4413      	add	r3, r2
 8002690:	3301      	adds	r3, #1
 8002692:	4619      	mov	r1, r3
 8002694:	f009 ff10 	bl	800c4b8 <strcpy>
	for (uint8_t i=0;i<DODECA_COUNT_MAX;i++)
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	3301      	adds	r3, #1
 800269c:	71fb      	strb	r3, [r7, #7]
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	2b0b      	cmp	r3, #11
 80026a2:	d987      	bls.n	80025b4 <dodecaReset+0xc>
	}
	return DODECA_ERR_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd90      	pop	{r4, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200005c8 	.word	0x200005c8
 80026b4:	08010c60 	.word	0x08010c60

080026b8 <dodecaGet>:

dodecaItem_t * dodecaGet(uint8_t id)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
	if (id > DODECA_COUNT_MAX )
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	d901      	bls.n	80026cc <dodecaGet+0x14>
	{
		return NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e007      	b.n	80026dc <dodecaGet+0x24>
	}

	return   &dodecaItems->items[id];
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <dodecaGet+0x30>)
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	79fa      	ldrb	r2, [r7, #7]
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	440b      	add	r3, r1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	200005c8 	.word	0x200005c8

080026ec <dodecaStart>:

eDodecaErr_t dodecaStart(uint8_t id)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
	dodecaItem_t * dodeca ;
	dodeca = dodecaGet(id);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ffdd 	bl	80026b8 <dodecaGet>
 80026fe:	60f8      	str	r0, [r7, #12]
	dodeca->state = DODECA_STATE_ACTIVE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2202      	movs	r2, #2
 8002704:	629a      	str	r2, [r3, #40]	; 0x28
	ledSetFaceColour(id, dodeca->colour,0x0,LED_FACE_MODE_NORMAL );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6999      	ldr	r1, [r3, #24]
 800270a:	79f8      	ldrb	r0, [r7, #7]
 800270c:	2300      	movs	r3, #0
 800270e:	2200      	movs	r2, #0
 8002710:	f000 ff4c 	bl	80035ac <ledSetFaceColour>
	ledRender();
 8002714:	f000 ff41 	bl	800359a <ledRender>
	return DODECA_ERR_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <dodecaStop>:

eDodecaErr_t dodecaStop(uint8_t id)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
	dodecaItem_t * dodeca ;
	dodeca = dodecaGet(id);
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ffc2 	bl	80026b8 <dodecaGet>
 8002734:	60f8      	str	r0, [r7, #12]
	dodeca->state = DODECA_STATE_STOPPED;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2203      	movs	r2, #3
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
	ledSetFaceColour(id, colourFindByid(COLOUR_BLACK_ID)->code,0x0,LED_FACE_MODE_NORMAL );
 800273c:	200c      	movs	r0, #12
 800273e:	f7ff fef9 	bl	8002534 <colourFindByid>
 8002742:	4603      	mov	r3, r0
 8002744:	6919      	ldr	r1, [r3, #16]
 8002746:	79f8      	ldrb	r0, [r7, #7]
 8002748:	2300      	movs	r3, #0
 800274a:	2200      	movs	r2, #0
 800274c:	f000 ff2e 	bl	80035ac <ledSetFaceColour>
	ledRender();
 8002750:	f000 ff23 	bl	800359a <ledRender>
	return DODECA_ERR_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <dodecaGetStateName>:
}



eDodecaErr_t dodecaGetStateName(eDodecaState_t state,char* name)
{
 8002760:	b490      	push	{r4, r7}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]

	switch (state)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d016      	beq.n	800279e <dodecaGetStateName+0x3e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d824      	bhi.n	80027c0 <dodecaGetStateName+0x60>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d003      	beq.n	8002784 <dodecaGetStateName+0x24>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d015      	beq.n	80027ae <dodecaGetStateName+0x4e>
 8002782:	e01d      	b.n	80027c0 <dodecaGetStateName+0x60>
	{
		case DODECA_STATE_NOT_CONFIGURED : strcpy(name,"Not Configured"); break;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <dodecaGetStateName+0x80>)
 8002788:	461c      	mov	r4, r3
 800278a:	4613      	mov	r3, r2
 800278c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800278e:	6020      	str	r0, [r4, #0]
 8002790:	6061      	str	r1, [r4, #4]
 8002792:	60a2      	str	r2, [r4, #8]
 8002794:	881a      	ldrh	r2, [r3, #0]
 8002796:	789b      	ldrb	r3, [r3, #2]
 8002798:	81a2      	strh	r2, [r4, #12]
 800279a:	73a3      	strb	r3, [r4, #14]
 800279c:	e01a      	b.n	80027d4 <dodecaGetStateName+0x74>
		case DODECA_STATE_STOPPED : strcpy(name,"Stopped"); break;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	4910      	ldr	r1, [pc, #64]	; (80027e4 <dodecaGetStateName+0x84>)
 80027a2:	461a      	mov	r2, r3
 80027a4:	460b      	mov	r3, r1
 80027a6:	cb03      	ldmia	r3!, {r0, r1}
 80027a8:	6010      	str	r0, [r2, #0]
 80027aa:	6051      	str	r1, [r2, #4]
 80027ac:	e012      	b.n	80027d4 <dodecaGetStateName+0x74>
		case DODECA_STATE_ACTIVE : strcpy(name,"Active"); break;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <dodecaGetStateName+0x88>)
 80027b2:	6810      	ldr	r0, [r2, #0]
 80027b4:	6018      	str	r0, [r3, #0]
 80027b6:	8891      	ldrh	r1, [r2, #4]
 80027b8:	7992      	ldrb	r2, [r2, #6]
 80027ba:	8099      	strh	r1, [r3, #4]
 80027bc:	719a      	strb	r2, [r3, #6]
 80027be:	e009      	b.n	80027d4 <dodecaGetStateName+0x74>
		default: strcpy(name,"undefined"); break;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	490a      	ldr	r1, [pc, #40]	; (80027ec <dodecaGetStateName+0x8c>)
 80027c4:	461a      	mov	r2, r3
 80027c6:	460b      	mov	r3, r1
 80027c8:	cb03      	ldmia	r3!, {r0, r1}
 80027ca:	6010      	str	r0, [r2, #0]
 80027cc:	6051      	str	r1, [r2, #4]
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	8113      	strh	r3, [r2, #8]
 80027d2:	bf00      	nop
	}

	return DODECA_ERR_OK;
 80027d4:	2300      	movs	r3, #0


}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc90      	pop	{r4, r7}
 80027de:	4770      	bx	lr
 80027e0:	08010264 	.word	0x08010264
 80027e4:	08010274 	.word	0x08010274
 80027e8:	0801027c 	.word	0x0801027c
 80027ec:	08010284 	.word	0x08010284

080027f0 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a2e      	ldr	r2, [pc, #184]	; (80028b8 <GetSector+0xc8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d806      	bhi.n	8002812 <GetSector+0x22>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800280a:	d302      	bcc.n	8002812 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e04b      	b.n	80028aa <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a29      	ldr	r2, [pc, #164]	; (80028bc <GetSector+0xcc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d806      	bhi.n	8002828 <GetSector+0x38>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a28      	ldr	r2, [pc, #160]	; (80028c0 <GetSector+0xd0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d302      	bcc.n	8002828 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8002822:	2301      	movs	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	e040      	b.n	80028aa <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a26      	ldr	r2, [pc, #152]	; (80028c4 <GetSector+0xd4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d806      	bhi.n	800283e <GetSector+0x4e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <GetSector+0xd8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d302      	bcc.n	800283e <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8002838:	2302      	movs	r3, #2
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e035      	b.n	80028aa <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a22      	ldr	r2, [pc, #136]	; (80028cc <GetSector+0xdc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d206      	bcs.n	8002854 <GetSector+0x64>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a21      	ldr	r2, [pc, #132]	; (80028d0 <GetSector+0xe0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d302      	bcc.n	8002854 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800284e:	2303      	movs	r3, #3
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e02a      	b.n	80028aa <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <GetSector+0xe4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d206      	bcs.n	800286a <GetSector+0x7a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <GetSector+0xdc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d902      	bls.n	800286a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8002864:	2304      	movs	r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e01f      	b.n	80028aa <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <GetSector+0xe8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d206      	bcs.n	8002880 <GetSector+0x90>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <GetSector+0xe4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d902      	bls.n	8002880 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800287a:	2305      	movs	r3, #5
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	e014      	b.n	80028aa <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a16      	ldr	r2, [pc, #88]	; (80028dc <GetSector+0xec>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d206      	bcs.n	8002896 <GetSector+0xa6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <GetSector+0xe8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d902      	bls.n	8002896 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8002890:	2306      	movs	r3, #6
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e009      	b.n	80028aa <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <GetSector+0xf0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d205      	bcs.n	80028aa <GetSector+0xba>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <GetSector+0xec>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80028a6:	2307      	movs	r3, #7
 80028a8:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80028aa:	68fb      	ldr	r3, [r7, #12]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	08003ffe 	.word	0x08003ffe
 80028bc:	08007ffe 	.word	0x08007ffe
 80028c0:	08004000 	.word	0x08004000
 80028c4:	0800bffe 	.word	0x0800bffe
 80028c8:	08008000 	.word	0x08008000
 80028cc:	0800ffff 	.word	0x0800ffff
 80028d0:	0800c000 	.word	0x0800c000
 80028d4:	0801ffff 	.word	0x0801ffff
 80028d8:	0803ffff 	.word	0x0803ffff
 80028dc:	0805ffff 	.word	0x0805ffff
 80028e0:	0807ffff 	.word	0x0807ffff

080028e4 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, const uint16_t numberofwords)
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80028f6:	f003 fbdb 	bl	80060b0 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff ff78 	bl	80027f0 <GetSector>
 8002900:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 800290e:	69f8      	ldr	r0, [r7, #28]
 8002910:	f7ff ff6e 	bl	80027f0 <GetSector>
 8002914:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <Flash_Write_Data+0xb8>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800291c:	4b1f      	ldr	r3, [pc, #124]	; (800299c <Flash_Write_Data+0xb8>)
 800291e:	2202      	movs	r2, #2
 8002920:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <Flash_Write_Data+0xb8>)
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	3301      	adds	r3, #1
 8002930:	4a1a      	ldr	r2, [pc, #104]	; (800299c <Flash_Write_Data+0xb8>)
 8002932:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	4818      	ldr	r0, [pc, #96]	; (800299c <Flash_Write_Data+0xb8>)
 800293c:	f003 fd36 	bl	80063ac <HAL_FLASHEx_Erase>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01f      	beq.n	8002986 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8002946:	f003 fbe5 	bl	8006114 <HAL_FLASH_GetError>
 800294a:	4603      	mov	r3, r0
 800294c:	e022      	b.n	8002994 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4413      	add	r3, r2
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2200      	movs	r2, #0
 800295a:	461c      	mov	r4, r3
 800295c:	4615      	mov	r5, r2
 800295e:	4622      	mov	r2, r4
 8002960:	462b      	mov	r3, r5
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	2002      	movs	r0, #2
 8002966:	f003 fb4f 	bl	8006008 <HAL_FLASH_Program>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3304      	adds	r3, #4
 8002974:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	3301      	adds	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	e003      	b.n	8002986 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800297e:	f003 fbc9 	bl	8006114 <HAL_FLASH_GetError>
 8002982:	4603      	mov	r3, r0
 8002984:	e006      	b.n	8002994 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	429a      	cmp	r2, r3
 800298c:	dbdf      	blt.n	800294e <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800298e:	f003 fbb1 	bl	80060f4 <HAL_FLASH_Lock>

	   return 0;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3728      	adds	r7, #40	; 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bdb0      	pop	{r4, r5, r7, pc}
 800299c:	200005cc 	.word	0x200005cc

080029a0 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, const uint16_t numberofwords)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
	uint32_t sofar = numberofwords;
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	617b      	str	r3, [r7, #20]
	while (sofar)
 80029b2:	e00c      	b.n	80029ce <Flash_Read_Data+0x2e>
	{
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3304      	adds	r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3304      	adds	r3, #4
 80029c6:	60bb      	str	r3, [r7, #8]
		sofar--;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
	while (sofar)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ef      	bne.n	80029b4 <Flash_Read_Data+0x14>
	}
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_GPIO_EXTI_Callback>:
};



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	80fb      	strh	r3, [r7, #6]

}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <MPU6050_Init>:



uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af04      	add	r7, sp, #16
 80029fe:	6078      	str	r0, [r7, #4]
    uint8_t check;

    // power management register 0X6B we should write all 0's to wake the sensor up


    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002a00:	2364      	movs	r3, #100	; 0x64
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	2301      	movs	r3, #1
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	f107 030e 	add.w	r3, r7, #14
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	2275      	movs	r2, #117	; 0x75
 8002a12:	21d0      	movs	r1, #208	; 0xd0
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f004 fac3 	bl	8006fa0 <HAL_I2C_Mem_Read>


       if (check == 114)  // 0x68 will be returned by the sensor if everything goes well
 8002a1a:	7bbb      	ldrb	r3, [r7, #14]
 8002a1c:	2b72      	cmp	r3, #114	; 0x72
 8002a1e:	d13d      	bne.n	8002a9c <MPU6050_Init+0xa4>
       {
           // power management register 0X6B we should write all 0's to wake the sensor up
           Data = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002a24:	2364      	movs	r3, #100	; 0x64
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	f107 030f 	add.w	r3, r7, #15
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2301      	movs	r3, #1
 8002a34:	226b      	movs	r2, #107	; 0x6b
 8002a36:	21d0      	movs	r1, #208	; 0xd0
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f004 f9b7 	bl	8006dac <HAL_I2C_Mem_Write>

           // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
           Data = 0x07;
 8002a3e:	2307      	movs	r3, #7
 8002a40:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002a42:	2364      	movs	r3, #100	; 0x64
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	2301      	movs	r3, #1
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	f107 030f 	add.w	r3, r7, #15
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2301      	movs	r3, #1
 8002a52:	2219      	movs	r2, #25
 8002a54:	21d0      	movs	r1, #208	; 0xd0
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f004 f9a8 	bl	8006dac <HAL_I2C_Mem_Write>

           // Set accelerometer configuration in ACCEL_CONFIG Register
           // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
           Data = 0x00;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002a60:	2364      	movs	r3, #100	; 0x64
 8002a62:	9302      	str	r3, [sp, #8]
 8002a64:	2301      	movs	r3, #1
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	f107 030f 	add.w	r3, r7, #15
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	221c      	movs	r2, #28
 8002a72:	21d0      	movs	r1, #208	; 0xd0
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f004 f999 	bl	8006dac <HAL_I2C_Mem_Write>

           // Set Gyroscopic configuration in GYRO_CONFIG Register
           // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
           Data = 0x00;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002a7e:	2364      	movs	r3, #100	; 0x64
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	2301      	movs	r3, #1
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	f107 030f 	add.w	r3, r7, #15
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	221b      	movs	r2, #27
 8002a90:	21d0      	movs	r1, #208	; 0xd0
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f004 f98a 	bl	8006dac <HAL_I2C_Mem_Write>
           return 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <MPU6050_Init+0xa6>
       }


    return 1;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af04      	add	r7, sp, #16
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002ab2:	2364      	movs	r3, #100	; 0x64
 8002ab4:	9302      	str	r3, [sp, #8]
 8002ab6:	2306      	movs	r3, #6
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	223b      	movs	r2, #59	; 0x3b
 8002ac4:	21d0      	movs	r1, #208	; 0xd0
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f004 fa6a 	bl	8006fa0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002acc:	7a3b      	ldrb	r3, [r7, #8]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	b21a      	sxth	r2, r3
 8002ad2:	7a7b      	ldrb	r3, [r7, #9]
 8002ad4:	b21b      	sxth	r3, r3
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	b21a      	sxth	r2, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002ade:	7abb      	ldrb	r3, [r7, #10]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	b21a      	sxth	r2, r3
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
 8002ae6:	b21b      	sxth	r3, r3
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b21a      	sxth	r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002af0:	7b3b      	ldrb	r3, [r7, #12]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	b21a      	sxth	r2, r3
 8002af6:	7b7b      	ldrb	r3, [r7, #13]
 8002af8:	b21b      	sxth	r3, r3
 8002afa:	4313      	orrs	r3, r2
 8002afc:	b21a      	sxth	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	809a      	strh	r2, [r3, #4]
   // DataStruct->Accel_X_RAW += CAL_X;
   // DataStruct->Accel_Y_RAW += CAL_Y;
  //  DataStruct->Accel_Z_RAW += CAL_Y;


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fd23 	bl	8000554 <__aeabi_i2d>
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <MPU6050_Read_Accel+0x140>)
 8002b14:	f7fd feb2 	bl	800087c <__aeabi_ddiv>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fd13 	bl	8000554 <__aeabi_i2d>
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <MPU6050_Read_Accel+0x140>)
 8002b34:	f7fd fea2 	bl	800087c <__aeabi_ddiv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fd03 	bl	8000554 <__aeabi_i2d>
 8002b4e:	a322      	add	r3, pc, #136	; (adr r3, 8002bd8 <MPU6050_Read_Accel+0x130>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd fe92 	bl	800087c <__aeabi_ddiv>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	e9c1 2306 	strd	r2, r3, [r1, #24]


    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b68:	a31d      	add	r3, pc, #116	; (adr r3, 8002be0 <MPU6050_Read_Accel+0x138>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f7fd ffcd 	bl	8000b0c <__aeabi_dcmplt>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <MPU6050_Read_Accel+0xde>
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b8c:	a314      	add	r3, pc, #80	; (adr r3, 8002be0 <MPU6050_Read_Accel+0x138>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	f7fd ffbb 	bl	8000b0c <__aeabi_dcmplt>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d006      	beq.n	8002baa <MPU6050_Read_Accel+0x102>
 8002b9c:	6839      	ldr	r1, [r7, #0]
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002bb0:	a30b      	add	r3, pc, #44	; (adr r3, 8002be0 <MPU6050_Read_Accel+0x138>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f7fd ffa9 	bl	8000b0c <__aeabi_dcmplt>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d100      	bne.n	8002bc2 <MPU6050_Read_Accel+0x11a>


}
 8002bc0:	e006      	b.n	8002bd0 <MPU6050_Read_Accel+0x128>
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002bc2:	6839      	ldr	r1, [r7, #0]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	40cc2900 	.word	0x40cc2900
 8002be0:	70a3d70a 	.word	0x70a3d70a
 8002be4:	3fb70a3d 	.word	0x3fb70a3d
 8002be8:	40d00000 	.word	0x40d00000

08002bec <MPU6050_ReadReg>:


uint8_t  MPU6050_ReadReg(I2C_HandleTypeDef *I2Cx,uint16_t reg) // NOTE : Only for 1 Byte Reg at the moment
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af04      	add	r7, sp, #16
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
	uint8_t result;


	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, reg, 1, &result, 1, i2c_timeout);
 8002bf8:	2364      	movs	r3, #100	; 0x64
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	9302      	str	r3, [sp, #8]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	f107 030f 	add.w	r3, r7, #15
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	21d0      	movs	r1, #208	; 0xd0
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f004 f9c7 	bl	8006fa0 <HAL_I2C_Mem_Read>
	return result;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <MPU6050_WriteReg>:

void MPU6050_WriteReg(I2C_HandleTypeDef *I2Cx,uint16_t reg, uint8_t data) // NOTE : Only for 1 Byte Reg at the moment
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af04      	add	r7, sp, #16
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, reg, 1, &data, 1, i2c_timeout);
 8002c2c:	2364      	movs	r3, #100	; 0x64
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	9302      	str	r3, [sp, #8]
 8002c32:	2301      	movs	r3, #1
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	1c7b      	adds	r3, r7, #1
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	21d0      	movs	r1, #208	; 0xd0
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f004 f8b4 	bl	8006dac <HAL_I2C_Mem_Write>

}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <MPU6050ReadStable>:
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}


void MPU6050ReadStable(MPU6050_t *data)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 8002c54:	200a      	movs	r0, #10
 8002c56:	f002 fc51 	bl	80054fc <HAL_Delay>
	for (uint8_t cnt=0;cnt<30;cnt++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	e009      	b.n	8002c74 <MPU6050ReadStable+0x28>
		{
			MPU6050_Read_All(&I2C_MPU6050, data);
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4808      	ldr	r0, [pc, #32]	; (8002c84 <MPU6050ReadStable+0x38>)
 8002c64:	f000 f810 	bl	8002c88 <MPU6050_Read_All>
			HAL_Delay(5);
 8002c68:	2005      	movs	r0, #5
 8002c6a:	f002 fc47 	bl	80054fc <HAL_Delay>
	for (uint8_t cnt=0;cnt<30;cnt++)
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	3301      	adds	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b1d      	cmp	r3, #29
 8002c78:	d9f2      	bls.n	8002c60 <MPU6050ReadStable+0x14>
		}
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200005ec 	.word	0x200005ec

08002c88 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c8c:	b094      	sub	sp, #80	; 0x50
 8002c8e:	af04      	add	r7, sp, #16
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002c94:	2364      	movs	r3, #100	; 0x64
 8002c96:	9302      	str	r3, [sp, #8]
 8002c98:	230e      	movs	r3, #14
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	f107 0308 	add.w	r3, r7, #8
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	223b      	movs	r2, #59	; 0x3b
 8002ca6:	21d0      	movs	r1, #208	; 0xd0
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f004 f979 	bl	8006fa0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002cae:	7a3b      	ldrb	r3, [r7, #8]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	b21a      	sxth	r2, r3
 8002cb4:	7a7b      	ldrb	r3, [r7, #9]
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b21a      	sxth	r2, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002cc0:	7abb      	ldrb	r3, [r7, #10]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b21a      	sxth	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002cd2:	7b3b      	ldrb	r3, [r7, #12]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	b21a      	sxth	r2, r3
 8002cd8:	7b7b      	ldrb	r3, [r7, #13]
 8002cda:	b21b      	sxth	r3, r3
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	b21a      	sxth	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002ce4:	7bbb      	ldrb	r3, [r7, #14]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	b21a      	sxth	r2, r3
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002cf2:	7c3b      	ldrb	r3, [r7, #16]
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	b21a      	sxth	r2, r3
 8002cf8:	7c7b      	ldrb	r3, [r7, #17]
 8002cfa:	b21b      	sxth	r3, r3
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	b21a      	sxth	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002d04:	7cbb      	ldrb	r3, [r7, #18]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	b21a      	sxth	r2, r3
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	b21b      	sxth	r3, r3
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	b21a      	sxth	r2, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002d16:	7d3b      	ldrb	r3, [r7, #20]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	b21a      	sxth	r2, r3
 8002d1c:	7d7b      	ldrb	r3, [r7, #21]
 8002d1e:	b21b      	sxth	r3, r3
 8002d20:	4313      	orrs	r3, r2
 8002d22:	b21a      	sxth	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	849a      	strh	r2, [r3, #36]	; 0x24

    // Callibrate
	DataStruct->Accel_X_RAW += CAL_X;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	b21a      	sxth	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW += CAL_Y;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	b21a      	sxth	r2, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW += CAL_Y;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b21a      	sxth	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	809a      	strh	r2, [r3, #4]


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fbf2 	bl	8000554 <__aeabi_i2d>
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	4bb6      	ldr	r3, [pc, #728]	; (8003050 <MPU6050_Read_All+0x3c8>)
 8002d76:	f7fd fd81 	bl	800087c <__aeabi_ddiv>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	6839      	ldr	r1, [r7, #0]
 8002d80:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fbe2 	bl	8000554 <__aeabi_i2d>
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	4bae      	ldr	r3, [pc, #696]	; (8003050 <MPU6050_Read_All+0x3c8>)
 8002d96:	f7fd fd71 	bl	800087c <__aeabi_ddiv>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	6839      	ldr	r1, [r7, #0]
 8002da0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fbd2 	bl	8000554 <__aeabi_i2d>
 8002db0:	a39f      	add	r3, pc, #636	; (adr r3, 8003030 <MPU6050_Read_All+0x3a8>)
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	f7fd fd61 	bl	800087c <__aeabi_ddiv>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	6839      	ldr	r1, [r7, #0]
 8002dc0:	e9c1 2306 	strd	r2, r3, [r1, #24]





    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002dca:	a39b      	add	r3, pc, #620	; (adr r3, 8003038 <MPU6050_Read_All+0x3b0>)
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f7fd fe9c 	bl	8000b0c <__aeabi_dcmplt>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <MPU6050_Read_All+0x160>
 8002dda:	6839      	ldr	r1, [r7, #0]
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002dee:	a392      	add	r3, pc, #584	; (adr r3, 8003038 <MPU6050_Read_All+0x3b0>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fe8a 	bl	8000b0c <__aeabi_dcmplt>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <MPU6050_Read_All+0x184>
 8002dfe:	6839      	ldr	r1, [r7, #0]
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002e12:	a389      	add	r3, pc, #548	; (adr r3, 8003038 <MPU6050_Read_All+0x3b0>)
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	f7fd fe78 	bl	8000b0c <__aeabi_dcmplt>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <MPU6050_Read_All+0x1a8>
 8002e22:	6839      	ldr	r1, [r7, #0]
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9c1 2306 	strd	r2, r3, [r1, #24]


    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002e30:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e3c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8003054 <MPU6050_Read_All+0x3cc>
 8002e40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e44:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003058 <MPU6050_Read_All+0x3d0>
 8002e48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb7b 	bl	8000554 <__aeabi_i2d>
 8002e5e:	a378      	add	r3, pc, #480	; (adr r3, 8003040 <MPU6050_Read_All+0x3b8>)
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f7fd fd0a 	bl	800087c <__aeabi_ddiv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fb6b 	bl	8000554 <__aeabi_i2d>
 8002e7e:	a370      	add	r3, pc, #448	; (adr r3, 8003040 <MPU6050_Read_All+0x3b8>)
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	f7fd fcfa 	bl	800087c <__aeabi_ddiv>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fb5b 	bl	8000554 <__aeabi_i2d>
 8002e9e:	a368      	add	r3, pc, #416	; (adr r3, 8003040 <MPU6050_Read_All+0x3b8>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd fcea 	bl	800087c <__aeabi_ddiv>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002eb2:	f002 fb17 	bl	80054e4 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b68      	ldr	r3, [pc, #416]	; (800305c <MPU6050_Read_All+0x3d4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fb38 	bl	8000534 <__aeabi_ui2d>
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	4b65      	ldr	r3, [pc, #404]	; (8003060 <MPU6050_Read_All+0x3d8>)
 8002eca:	f7fd fcd7 	bl	800087c <__aeabi_ddiv>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002ed6:	f002 fb05 	bl	80054e4 <HAL_GetTick>
 8002eda:	4603      	mov	r3, r0
 8002edc:	4a5f      	ldr	r2, [pc, #380]	; (800305c <MPU6050_Read_All+0x3d4>)
 8002ede:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eee:	fb03 f202 	mul.w	r2, r3, r2
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fb24 	bl	8000554 <__aeabi_i2d>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	ec43 2b10 	vmov	d0, r2, r3
 8002f14:	f00c fcff 	bl	800f916 <sqrt>
 8002f18:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f28:	f7fd fde6 	bl	8000af8 <__aeabi_dcmpeq>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d11f      	bne.n	8002f72 <MPU6050_Read_All+0x2ea>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fb0b 	bl	8000554 <__aeabi_i2d>
 8002f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f42:	f7fd fc9b 	bl	800087c <__aeabi_ddiv>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	ec43 2b17 	vmov	d7, r2, r3
 8002f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f52:	eef0 0a67 	vmov.f32	s1, s15
 8002f56:	f00c fb33 	bl	800f5c0 <atan>
 8002f5a:	ec51 0b10 	vmov	r0, r1, d0
 8002f5e:	a33a      	add	r3, pc, #232	; (adr r3, 8003048 <MPU6050_Read_All+0x3c0>)
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f7fd fb60 	bl	8000628 <__aeabi_dmul>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002f70:	e005      	b.n	8002f7e <MPU6050_Read_All+0x2f6>
    } else {
        roll = 0.0;
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f84:	425b      	negs	r3, r3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fae4 	bl	8000554 <__aeabi_i2d>
 8002f8c:	4682      	mov	sl, r0
 8002f8e:	468b      	mov	fp, r1
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fadc 	bl	8000554 <__aeabi_i2d>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	ec43 2b11 	vmov	d1, r2, r3
 8002fa4:	ec4b ab10 	vmov	d0, sl, fp
 8002fa8:	f00c fcb3 	bl	800f912 <atan2>
 8002fac:	ec51 0b10 	vmov	r0, r1, d0
 8002fb0:	a325      	add	r3, pc, #148	; (adr r3, 8003048 <MPU6050_Read_All+0x3c0>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	f7fd fb37 	bl	8000628 <__aeabi_dmul>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	4b27      	ldr	r3, [pc, #156]	; (8003064 <MPU6050_Read_All+0x3dc>)
 8002fc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fcc:	f7fd fd9e 	bl	8000b0c <__aeabi_dcmplt>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <MPU6050_Read_All+0x364>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	4b21      	ldr	r3, [pc, #132]	; (8003068 <MPU6050_Read_All+0x3e0>)
 8002fe2:	f7fd fdb1 	bl	8000b48 <__aeabi_dcmpgt>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d114      	bne.n	8003016 <MPU6050_Read_All+0x38e>
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <MPU6050_Read_All+0x3e0>)
 8002ff2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ff6:	f7fd fda7 	bl	8000b48 <__aeabi_dcmpgt>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d037      	beq.n	8003070 <MPU6050_Read_All+0x3e8>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <MPU6050_Read_All+0x3dc>)
 800300c:	f7fd fd7e 	bl	8000b0c <__aeabi_dcmplt>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02c      	beq.n	8003070 <MPU6050_Read_All+0x3e8>
        KalmanY.angle = pitch;
 8003016:	4915      	ldr	r1, [pc, #84]	; (800306c <MPU6050_Read_All+0x3e4>)
 8003018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003020:	6839      	ldr	r1, [r7, #0]
 8003022:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003026:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800302a:	e036      	b.n	800309a <MPU6050_Read_All+0x412>
 800302c:	f3af 8000 	nop.w
 8003030:	00000000 	.word	0x00000000
 8003034:	40cc2900 	.word	0x40cc2900
 8003038:	70a3d70a 	.word	0x70a3d70a
 800303c:	3fb70a3d 	.word	0x3fb70a3d
 8003040:	00000000 	.word	0x00000000
 8003044:	40606000 	.word	0x40606000
 8003048:	1a63c1f8 	.word	0x1a63c1f8
 800304c:	404ca5dc 	.word	0x404ca5dc
 8003050:	40d00000 	.word	0x40d00000
 8003054:	43aa0000 	.word	0x43aa0000
 8003058:	42121eb8 	.word	0x42121eb8
 800305c:	200005e0 	.word	0x200005e0
 8003060:	408f4000 	.word	0x408f4000
 8003064:	c0568000 	.word	0xc0568000
 8003068:	40568000 	.word	0x40568000
 800306c:	20000160 	.word	0x20000160
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003076:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800307a:	eeb0 1a47 	vmov.f32	s2, s14
 800307e:	eef0 1a67 	vmov.f32	s3, s15
 8003082:	ed97 0b06 	vldr	d0, [r7, #24]
 8003086:	481e      	ldr	r0, [pc, #120]	; (8003100 <MPU6050_Read_All+0x478>)
 8003088:	f000 f840 	bl	800310c <Kalman_getAngle>
 800308c:	eeb0 7a40 	vmov.f32	s14, s0
 8003090:	eef0 7a60 	vmov.f32	s15, s1
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80030a0:	4690      	mov	r8, r2
 80030a2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <MPU6050_Read_All+0x47c>)
 80030ac:	4640      	mov	r0, r8
 80030ae:	4649      	mov	r1, r9
 80030b0:	f7fd fd4a 	bl	8000b48 <__aeabi_dcmpgt>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <MPU6050_Read_All+0x444>
        DataStruct->Gx = -DataStruct->Gx;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80030c0:	4614      	mov	r4, r2
 80030c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80030d2:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80030d6:	eeb0 1a47 	vmov.f32	s2, s14
 80030da:	eef0 1a67 	vmov.f32	s3, s15
 80030de:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80030e2:	4809      	ldr	r0, [pc, #36]	; (8003108 <MPU6050_Read_All+0x480>)
 80030e4:	f000 f812 	bl	800310c <Kalman_getAngle>
 80030e8:	eeb0 7a40 	vmov.f32	s14, s0
 80030ec:	eef0 7a60 	vmov.f32	s15, s1
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 80030f6:	bf00      	nop
 80030f8:	3740      	adds	r7, #64	; 0x40
 80030fa:	46bd      	mov	sp, r7
 80030fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003100:	20000160 	.word	0x20000160
 8003104:	40568000 	.word	0x40568000
 8003108:	20000118 	.word	0x20000118

0800310c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800310c:	b5b0      	push	{r4, r5, r7, lr}
 800310e:	b096      	sub	sp, #88	; 0x58
 8003110:	af00      	add	r7, sp, #0
 8003112:	61f8      	str	r0, [r7, #28]
 8003114:	ed87 0b04 	vstr	d0, [r7, #16]
 8003118:	ed87 1b02 	vstr	d1, [r7, #8]
 800311c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003126:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800312a:	f7fd f8c5 	bl	80002b8 <__aeabi_dsub>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800313c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003140:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003144:	f7fd fa70 	bl	8000628 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4620      	mov	r0, r4
 800314e:	4629      	mov	r1, r5
 8003150:	f7fd f8b4 	bl	80002bc <__adddf3>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	69f9      	ldr	r1, [r7, #28]
 800315a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800316a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800316e:	f7fd fa5b 	bl	8000628 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003180:	f7fd f89a 	bl	80002b8 <__aeabi_dsub>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003192:	f7fd f891 	bl	80002b8 <__aeabi_dsub>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a4:	f7fd f88a 	bl	80002bc <__adddf3>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031b4:	f7fd fa38 	bl	8000628 <__aeabi_dmul>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4620      	mov	r0, r4
 80031be:	4629      	mov	r1, r5
 80031c0:	f7fd f87c 	bl	80002bc <__adddf3>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	69f9      	ldr	r1, [r7, #28]
 80031ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80031da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031de:	f7fd fa23 	bl	8000628 <__aeabi_dmul>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4620      	mov	r0, r4
 80031e8:	4629      	mov	r1, r5
 80031ea:	f7fd f865 	bl	80002b8 <__aeabi_dsub>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	69f9      	ldr	r1, [r7, #28]
 80031f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003208:	f7fd fa0e 	bl	8000628 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4620      	mov	r0, r4
 8003212:	4629      	mov	r1, r5
 8003214:	f7fd f850 	bl	80002b8 <__aeabi_dsub>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	69f9      	ldr	r1, [r7, #28]
 800321e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800322e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003232:	f7fd f9f9 	bl	8000628 <__aeabi_dmul>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4620      	mov	r0, r4
 800323c:	4629      	mov	r1, r5
 800323e:	f7fd f83d 	bl	80002bc <__adddf3>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	69f9      	ldr	r1, [r7, #28]
 8003248:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003258:	f7fd f830 	bl	80002bc <__adddf3>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800326a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800326e:	f7fd fb05 	bl	800087c <__aeabi_ddiv>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003280:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003284:	f7fd fafa 	bl	800087c <__aeabi_ddiv>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003296:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800329a:	f7fd f80d 	bl	80002b8 <__aeabi_dsub>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80032ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032b4:	f7fd f9b8 	bl	8000628 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4620      	mov	r0, r4
 80032be:	4629      	mov	r1, r5
 80032c0:	f7fc fffc 	bl	80002bc <__adddf3>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	69f9      	ldr	r1, [r7, #28]
 80032ca:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80032d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032dc:	f7fd f9a4 	bl	8000628 <__aeabi_dmul>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4620      	mov	r0, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	f7fc ffe8 	bl	80002bc <__adddf3>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	69f9      	ldr	r1, [r7, #28]
 80032f2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80032fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003306:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003310:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003318:	f7fd f986 	bl	8000628 <__aeabi_dmul>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4620      	mov	r0, r4
 8003322:	4629      	mov	r1, r5
 8003324:	f7fc ffc8 	bl	80002b8 <__aeabi_dsub>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	69f9      	ldr	r1, [r7, #28]
 800332e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003338:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800333c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003340:	f7fd f972 	bl	8000628 <__aeabi_dmul>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4620      	mov	r0, r4
 800334a:	4629      	mov	r1, r5
 800334c:	f7fc ffb4 	bl	80002b8 <__aeabi_dsub>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	69f9      	ldr	r1, [r7, #28]
 8003356:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003360:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003368:	f7fd f95e 	bl	8000628 <__aeabi_dmul>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4620      	mov	r0, r4
 8003372:	4629      	mov	r1, r5
 8003374:	f7fc ffa0 	bl	80002b8 <__aeabi_dsub>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	69f9      	ldr	r1, [r7, #28]
 800337e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003388:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800338c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003390:	f7fd f94a 	bl	8000628 <__aeabi_dmul>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4620      	mov	r0, r4
 800339a:	4629      	mov	r1, r5
 800339c:	f7fc ff8c 	bl	80002b8 <__aeabi_dsub>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	69f9      	ldr	r1, [r7, #28]
 80033a6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80033b0:	ec43 2b17 	vmov	d7, r2, r3
};
 80033b4:	eeb0 0a47 	vmov.f32	s0, s14
 80033b8:	eef0 0a67 	vmov.f32	s1, s15
 80033bc:	3758      	adds	r7, #88	; 0x58
 80033be:	46bd      	mov	sp, r7
 80033c0:	bdb0      	pop	{r4, r5, r7, pc}

080033c2 <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 80033ce:	217f      	movs	r1, #127	; 0x7f
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f009 f864 	bl	800c49e <strchr>
 80033d6:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 80033d8:	e029      	b.n	800342e <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b7f      	cmp	r3, #127	; 0x7f
 80033e0:	d106      	bne.n	80033f0 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3301      	adds	r3, #1
 80033e6:	4619      	mov	r1, r3
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f009 f865 	bl	800c4b8 <strcpy>
 80033ee:	e019      	b.n	8003424 <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b7f      	cmp	r3, #127	; 0x7f
 80033f6:	d109      	bne.n	800340c <manageBackSpace+0x4a>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3b01      	subs	r3, #1
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	e00b      	b.n	8003424 <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b7f      	cmp	r3, #127	; 0x7f
 8003412:	d107      	bne.n	8003424 <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e5a      	subs	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3301      	adds	r3, #1
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f009 f84a 	bl	800c4b8 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 8003424:	217f      	movs	r1, #127	; 0x7f
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f009 f839 	bl	800c49e <strchr>
 800342c:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1d1      	bne.n	80033da <manageBackSpace+0x18>
		}
}
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 8003448:	e00c      	b.n	8003464 <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b2f      	cmp	r3, #47	; 0x2f
 8003450:	d903      	bls.n	800345a <isNumber+0x1a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b39      	cmp	r3, #57	; 0x39
 8003458:	d901      	bls.n	800345e <isNumber+0x1e>
			return 0;
 800345a:	2300      	movs	r3, #0
 800345c:	e007      	b.n	800346e <isNumber+0x2e>
		string++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3301      	adds	r3, #1
 8003462:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ee      	bne.n	800344a <isNumber+0xa>
	}
	return 1;
 800346c:	2301      	movs	r3, #1
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <byteToBin>:


void byteToBin(uint8_t b, char*text)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	6039      	str	r1, [r7, #0]
 8003484:	71fb      	strb	r3, [r7, #7]
	uint8_t pos;
	for (uint8_t cnt = 0;cnt<8;cnt++)
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	e019      	b.n	80034c0 <byteToBin+0x46>
	{
		pos = 7-cnt;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	73bb      	strb	r3, [r7, #14]
		if (b & 1<< cnt)
 8003494:	79fa      	ldrb	r2, [r7, #7]
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	fa42 f303 	asr.w	r3, r2, r3
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <byteToBin+0x36>
			text[pos] = '1';
 80034a4:	7bbb      	ldrb	r3, [r7, #14]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	4413      	add	r3, r2
 80034aa:	2231      	movs	r2, #49	; 0x31
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e004      	b.n	80034ba <byteToBin+0x40>
		else
			text[pos] = '0';
 80034b0:	7bbb      	ldrb	r3, [r7, #14]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	2230      	movs	r2, #48	; 0x30
 80034b8:	701a      	strb	r2, [r3, #0]
	for (uint8_t cnt = 0;cnt<8;cnt++)
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	3301      	adds	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b07      	cmp	r3, #7
 80034c4:	d9e2      	bls.n	800348c <byteToBin+0x12>

	}
	text[8] = 0x0;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	3308      	adds	r3, #8
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <lc709203_getCellVoltage>:
 * @param: 16bit pointer to value
 * @return: Error Code
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getCellVoltage(uint16_t *voltage)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_VOLTAGE,voltage);
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	2009      	movs	r0, #9
 80034e6:	f000 f81f 	bl	8003528 <lc709203_getRegisterValue>
 80034ea:	4603      	mov	r3, r0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <lc709203_getCellTemp>:

eLC709203_Error_t lc709203_getCellTemp(uint16_t *voltage)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_TEMP,voltage);
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	2008      	movs	r0, #8
 8003500:	f000 f812 	bl	8003528 <lc709203_getRegisterValue>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <lc709203_getId>:

eLC709203_Error_t lc709203_getId(uint16_t *version)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_IC_VERSION,version);
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	2011      	movs	r0, #17
 800351a:	f000 f805 	bl	8003528 <lc709203_getRegisterValue>
 800351e:	4603      	mov	r3, r0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <lc709203_getRegisterValue>:
 * @param: value - a 16 bit pointer to the value to be used
 * @return: Error code foe the function
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getRegisterValue (uint8_t reg,uint16_t *value)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af04      	add	r7, sp, #16
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c1, LC709302_ADRESS, reg, 1, (uint8_t*)value, 2, 100);
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	b29a      	uxth	r2, r3
 8003538:	2364      	movs	r3, #100	; 0x64
 800353a:	9302      	str	r3, [sp, #8]
 800353c:	2302      	movs	r3, #2
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2301      	movs	r3, #1
 8003546:	2116      	movs	r1, #22
 8003548:	4807      	ldr	r0, [pc, #28]	; (8003568 <lc709203_getRegisterValue+0x40>)
 800354a:	f003 fd29 	bl	8006fa0 <HAL_I2C_Mem_Read>
 800354e:	4603      	mov	r3, r0
 8003550:	73fb      	strb	r3, [r7, #15]

	if (result != HAL_OK)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <lc709203_getRegisterValue+0x34>
	{
		return LC798_COMM_ERROR;
 8003558:	2302      	movs	r3, #2
 800355a:	e000      	b.n	800355e <lc709203_getRegisterValue+0x36>
	}
	else
		return LC798_OK;
 800355c:	2301      	movs	r3, #1

}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	200005ec 	.word	0x200005ec

0800356c <ledAllOff>:




void ledAllOff()
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 8003572:	2300      	movs	r3, #0
 8003574:	71fb      	strb	r3, [r7, #7]
 8003576:	e008      	b.n	800358a <ledAllOff+0x1e>
	{
		led_set_RGB(i,0x0,0,0);
 8003578:	79f8      	ldrb	r0, [r7, #7]
 800357a:	2300      	movs	r3, #0
 800357c:	2200      	movs	r2, #0
 800357e:	2100      	movs	r1, #0
 8003580:	f001 fc64 	bl	8004e4c <led_set_RGB>
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	3301      	adds	r3, #1
 8003588:	71fb      	strb	r3, [r7, #7]
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	2b8f      	cmp	r3, #143	; 0x8f
 800358e:	d9f3      	bls.n	8003578 <ledAllOff+0xc>
	}
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <ledRender>:


void ledRender()
{
 800359a:	b580      	push	{r7, lr}
 800359c:	af00      	add	r7, sp, #0
	led_render();
 800359e:	f001 fcbd 	bl	8004f1c <led_render>
	HAL_Delay(10);
 80035a2:	200a      	movs	r0, #10
 80035a4:	f001 ffaa 	bl	80054fc <HAL_Delay>
}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}

080035ac <ledSetFaceColour>:

void ledSetFaceColour(uint8_t face, uint32_t colour, uint32_t colour2,eLedFaceMode_t mode)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	461a      	mov	r2, r3
 80035b8:	4603      	mov	r3, r0
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	4613      	mov	r3, r2
 80035be:	73bb      	strb	r3, [r7, #14]
	uint16_t offset = face * 12;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	0052      	lsls	r2, r2, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	82bb      	strh	r3, [r7, #20]



		for (uint16_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 80035ce:	8abb      	ldrh	r3, [r7, #20]
 80035d0:	82fb      	strh	r3, [r7, #22]
 80035d2:	e05d      	b.n	8003690 <ledSetFaceColour+0xe4>
		{
			if (mode == LED_FACE_MODE_ERROR)
 80035d4:	7bbb      	ldrb	r3, [r7, #14]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d125      	bne.n	8003626 <ledSetFaceColour+0x7a>
			{
				uint32_t errorColour = colourFindByid(COLOUR_ERROR_ID)->code;
 80035da:	200d      	movs	r0, #13
 80035dc:	f7fe ffaa 	bl	8002534 <colourFindByid>
 80035e0:	4603      	mov	r3, r0
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	613b      	str	r3, [r7, #16]
				if ((i+1)%2)
 80035e6:	8afb      	ldrh	r3, [r7, #22]
 80035e8:	3301      	adds	r3, #1
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <ledSetFaceColour+0x60>
					led_set_RGB(i,(colour >> 16) & 0xFF, (colour >> 8) & 0xFF, colour & 0xFF);
 80035f2:	8afb      	ldrh	r3, [r7, #22]
 80035f4:	b2d8      	uxtb	r0, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	b2d9      	uxtb	r1, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f001 fc21 	bl	8004e4c <led_set_RGB>
 800360a:	e03e      	b.n	800368a <ledSetFaceColour+0xde>
				else
					led_set_RGB(i,(errorColour >> 16) & 0xFF, (errorColour >> 8) & 0xFF, errorColour & 0xFF);
 800360c:	8afb      	ldrh	r3, [r7, #22]
 800360e:	b2d8      	uxtb	r0, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	b2d9      	uxtb	r1, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	b2da      	uxtb	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f001 fc14 	bl	8004e4c <led_set_RGB>
 8003624:	e031      	b.n	800368a <ledSetFaceColour+0xde>
			}
			else if (mode == LED_FACE_MODE_NORMAL)
 8003626:	7bbb      	ldrb	r3, [r7, #14]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10c      	bne.n	8003646 <ledSetFaceColour+0x9a>
			{
				led_set_RGB(i,(colour >> 16) & 0xFF, (colour >> 8) & 0xFF, colour & 0xFF);
 800362c:	8afb      	ldrh	r3, [r7, #22]
 800362e:	b2d8      	uxtb	r0, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	b2d9      	uxtb	r1, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f001 fc04 	bl	8004e4c <led_set_RGB>
 8003644:	e021      	b.n	800368a <ledSetFaceColour+0xde>
			}
			else if (mode == LED_FACE_MODE_HALF)
 8003646:	7bbb      	ldrb	r3, [r7, #14]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d11e      	bne.n	800368a <ledSetFaceColour+0xde>
			{

				if ((i+1)%2)
 800364c:	8afb      	ldrh	r3, [r7, #22]
 800364e:	3301      	adds	r3, #1
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00c      	beq.n	8003672 <ledSetFaceColour+0xc6>
					led_set_RGB(i,(colour >> 16) & 0xFF, (colour >> 8) & 0xFF, colour & 0xFF);
 8003658:	8afb      	ldrh	r3, [r7, #22]
 800365a:	b2d8      	uxtb	r0, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	0c1b      	lsrs	r3, r3, #16
 8003660:	b2d9      	uxtb	r1, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	b2da      	uxtb	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f001 fbee 	bl	8004e4c <led_set_RGB>
 8003670:	e00b      	b.n	800368a <ledSetFaceColour+0xde>
				else
					led_set_RGB(i,(colour2 >> 16) & 0xFF, (colour2 >> 8) & 0xFF, colour2 & 0xFF);
 8003672:	8afb      	ldrh	r3, [r7, #22]
 8003674:	b2d8      	uxtb	r0, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	b2d9      	uxtb	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	b2da      	uxtb	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f001 fbe1 	bl	8004e4c <led_set_RGB>
		for (uint16_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 800368a:	8afb      	ldrh	r3, [r7, #22]
 800368c:	3301      	adds	r3, #1
 800368e:	82fb      	strh	r3, [r7, #22]
 8003690:	8abb      	ldrh	r3, [r7, #20]
 8003692:	f103 020b 	add.w	r2, r3, #11
 8003696:	8afb      	ldrh	r3, [r7, #22]
 8003698:	429a      	cmp	r2, r3
 800369a:	da9b      	bge.n	80035d4 <ledSetFaceColour+0x28>
			}
	}


}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <ledDance>:


void ledDance()
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
	int i=0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
	while (i<10){
 80036b0:	e040      	b.n	8003734 <ledDance+0x8e>
	 uint8_t angle = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	72fb      	strb	r3, [r7, #11]
	 const uint8_t angle_difference = 11;
 80036b6:	230b      	movs	r3, #11
 80036b8:	727b      	strb	r3, [r7, #9]
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 80036ba:	2300      	movs	r3, #0
 80036bc:	72bb      	strb	r3, [r7, #10]
 80036be:	e02e      	b.n	800371e <ledDance+0x78>
		  // Calculate color
			 HAL_Delay(100);
 80036c0:	2064      	movs	r0, #100	; 0x64
 80036c2:	f001 ff1b 	bl	80054fc <HAL_Delay>
			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 80036c6:	7aba      	ldrb	r2, [r7, #10]
 80036c8:	7a7b      	ldrb	r3, [r7, #9]
 80036ca:	fb12 f303 	smulbb	r3, r2, r3
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	4413      	add	r3, r2
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	227f      	movs	r2, #127	; 0x7f
 80036d8:	21ff      	movs	r1, #255	; 0xff
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fdd6 	bl	800528c <hsl_to_rgb>
 80036e0:	6078      	str	r0, [r7, #4]
			// Set color
			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	b2d9      	uxtb	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	7ab8      	ldrb	r0, [r7, #10]
 80036f4:	f001 fbaa 	bl	8004e4c <led_set_RGB>
			if (i>1)
 80036f8:	7abb      	ldrb	r3, [r7, #10]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d907      	bls.n	800370e <ledDance+0x68>
				led_set_RGB(i-1, 0,0,0);
 80036fe:	7abb      	ldrb	r3, [r7, #10]
 8003700:	3b01      	subs	r3, #1
 8003702:	b2d8      	uxtb	r0, r3
 8003704:	2300      	movs	r3, #0
 8003706:	2200      	movs	r2, #0
 8003708:	2100      	movs	r1, #0
 800370a:	f001 fb9f 	bl	8004e4c <led_set_RGB>
			++angle;
 800370e:	7afb      	ldrb	r3, [r7, #11]
 8003710:	3301      	adds	r3, #1
 8003712:	72fb      	strb	r3, [r7, #11]
			led_render();
 8003714:	f001 fc02 	bl	8004f1c <led_render>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8003718:	7abb      	ldrb	r3, [r7, #10]
 800371a:	3301      	adds	r3, #1
 800371c:	72bb      	strb	r3, [r7, #10]
 800371e:	7abb      	ldrb	r3, [r7, #10]
 8003720:	2b8f      	cmp	r3, #143	; 0x8f
 8003722:	d9cd      	bls.n	80036c0 <ledDance+0x1a>

		}
	  HAL_Delay(10);
 8003724:	200a      	movs	r0, #10
 8003726:	f001 fee9 	bl	80054fc <HAL_Delay>
		// Write to LED
	  ledAllOff();
 800372a:	f7ff ff1f 	bl	800356c <ledAllOff>
	  i++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3301      	adds	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
	while (i<10){
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b09      	cmp	r3, #9
 8003738:	ddbb      	ble.n	80036b2 <ledDance+0xc>
	}
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <detectFaceUp>:




int8_t detectFaceUp()
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b09c      	sub	sp, #112	; 0x70
 8003748:	af00      	add	r7, sp, #0
	MPU6050_t imuData;

	MPU6050ReadStable(&imuData);
 800374a:	463b      	mov	r3, r7
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fa7d 	bl	8002c4c <MPU6050ReadStable>
	double x = imuData.KalmanAngleX;
 8003752:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003756:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double y = imuData.KalmanAngleY;
 800375a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800375e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	uint8_t face;
	for (face=0; face<FACE_COUNT; face++)
 8003762:	2300      	movs	r3, #0
 8003764:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003768:	e06b      	b.n	8003842 <detectFaceUp+0xfe>
	{
		if ( x > faceTable[face].xRTop && x < faceTable[face].xRBottom && y > faceTable[face].yRTop && y < faceTable[face].yRBottom )
 800376a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800376e:	493a      	ldr	r1, [pc, #232]	; (8003858 <detectFaceUp+0x114>)
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	440b      	add	r3, r1
 800377a:	3302      	adds	r3, #2
 800377c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fc fee7 	bl	8000554 <__aeabi_i2d>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800378e:	f7fd f9db 	bl	8000b48 <__aeabi_dcmpgt>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d04f      	beq.n	8003838 <detectFaceUp+0xf4>
 8003798:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800379c:	492e      	ldr	r1, [pc, #184]	; (8003858 <detectFaceUp+0x114>)
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	440b      	add	r3, r1
 80037a8:	3304      	adds	r3, #4
 80037aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc fed0 	bl	8000554 <__aeabi_i2d>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037bc:	f7fd f9a6 	bl	8000b0c <__aeabi_dcmplt>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d038      	beq.n	8003838 <detectFaceUp+0xf4>
 80037c6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80037ca:	4923      	ldr	r1, [pc, #140]	; (8003858 <detectFaceUp+0x114>)
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	440b      	add	r3, r1
 80037d6:	3306      	adds	r3, #6
 80037d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fc feb9 	bl	8000554 <__aeabi_i2d>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037ea:	f7fd f9ad 	bl	8000b48 <__aeabi_dcmpgt>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d021      	beq.n	8003838 <detectFaceUp+0xf4>
 80037f4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80037f8:	4917      	ldr	r1, [pc, #92]	; (8003858 <detectFaceUp+0x114>)
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	440b      	add	r3, r1
 8003804:	3308      	adds	r3, #8
 8003806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fc fea2 	bl	8000554 <__aeabi_i2d>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003818:	f7fd f978 	bl	8000b0c <__aeabi_dcmplt>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <detectFaceUp+0xf4>
			return faceTable[face].faceId;
 8003822:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003826:	490c      	ldr	r1, [pc, #48]	; (8003858 <detectFaceUp+0x114>)
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	440b      	add	r3, r1
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b25b      	sxtb	r3, r3
 8003836:	e00a      	b.n	800384e <detectFaceUp+0x10a>
	for (face=0; face<FACE_COUNT; face++)
 8003838:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800383c:	3301      	adds	r3, #1
 800383e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003842:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003846:	2b0b      	cmp	r3, #11
 8003848:	d98f      	bls.n	800376a <detectFaceUp+0x26>
	}
	return FACE_NOT_FOUND;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800384e:	4618      	mov	r0, r3
 8003850:	3770      	adds	r7, #112	; 0x70
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200001a8 	.word	0x200001a8

0800385c <rtcGetTimeString>:




void rtcGetTimeString(char* timeString)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af02      	add	r7, sp, #8
 8003862:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003864:	f107 030c 	add.w	r3, r7, #12
 8003868:	2200      	movs	r2, #0
 800386a:	4619      	mov	r1, r3
 800386c:	480c      	ldr	r0, [pc, #48]	; (80038a0 <rtcGetTimeString+0x44>)
 800386e:	f004 ff71 	bl	8008754 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	2200      	movs	r2, #0
 8003878:	4619      	mov	r1, r3
 800387a:	4809      	ldr	r0, [pc, #36]	; (80038a0 <rtcGetTimeString+0x44>)
 800387c:	f005 f84c 	bl	8008918 <HAL_RTC_GetDate>
	sprintf(timeString,"%02d:%02d:%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8003880:	7b3b      	ldrb	r3, [r7, #12]
 8003882:	461a      	mov	r2, r3
 8003884:	7b7b      	ldrb	r3, [r7, #13]
 8003886:	4619      	mov	r1, r3
 8003888:	7bbb      	ldrb	r3, [r7, #14]
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	460b      	mov	r3, r1
 800388e:	4905      	ldr	r1, [pc, #20]	; (80038a4 <rtcGetTimeString+0x48>)
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f008 fd73 	bl	800c37c <siprintf>

}
 8003896:	bf00      	nop
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000640 	.word	0x20000640
 80038a4:	08010290 	.word	0x08010290

080038a8 <rtcGetDateString>:

void rtcGetDateString(char* dateString)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	2200      	movs	r2, #0
 80038b6:	4619      	mov	r1, r3
 80038b8:	4808      	ldr	r0, [pc, #32]	; (80038dc <rtcGetDateString+0x34>)
 80038ba:	f005 f82d 	bl	8008918 <HAL_RTC_GetDate>
	sprintf(dateString,"%02d-%02d-%02d\t",sDate.Date,sDate.Month,sDate.Year);
 80038be:	7bbb      	ldrb	r3, [r7, #14]
 80038c0:	461a      	mov	r2, r3
 80038c2:	7b7b      	ldrb	r3, [r7, #13]
 80038c4:	4619      	mov	r1, r3
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	460b      	mov	r3, r1
 80038cc:	4904      	ldr	r1, [pc, #16]	; (80038e0 <rtcGetDateString+0x38>)
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f008 fd54 	bl	800c37c <siprintf>
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000640 	.word	0x20000640
 80038e0:	080102a4 	.word	0x080102a4

080038e4 <rtcGetTimeStamp>:


time_t rtcGetTimeStamp()
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b092      	sub	sp, #72	; 0x48
 80038e8:	af00      	add	r7, sp, #0
	time_t timeResult;
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&hrtc, &time, FORMAT_BIN);
 80038ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038ee:	2200      	movs	r2, #0
 80038f0:	4619      	mov	r1, r3
 80038f2:	4816      	ldr	r0, [pc, #88]	; (800394c <rtcGetTimeStamp+0x68>)
 80038f4:	f004 ff2e 	bl	8008754 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, FORMAT_BIN);
 80038f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038fc:	2200      	movs	r2, #0
 80038fe:	4619      	mov	r1, r3
 8003900:	4812      	ldr	r0, [pc, #72]	; (800394c <rtcGetTimeStamp+0x68>)
 8003902:	f005 f809 	bl	8008918 <HAL_RTC_GetDate>

	struct tm tm;

	tm.tm_sec =  time.Seconds;
 8003906:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800390a:	607b      	str	r3, [r7, #4]
	tm.tm_min= time.Minutes;
 800390c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003910:	60bb      	str	r3, [r7, #8]
	tm.tm_hour= time.Hours;
 8003912:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003916:	60fb      	str	r3, [r7, #12]
	tm.tm_mday= date.Date;
 8003918:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800391c:	613b      	str	r3, [r7, #16]
	tm.tm_mon= date.Month - 1;
 800391e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003922:	3b01      	subs	r3, #1
 8003924:	617b      	str	r3, [r7, #20]
	tm.tm_year= date.Year + 100;
 8003926:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800392a:	3364      	adds	r3, #100	; 0x64
 800392c:	61bb      	str	r3, [r7, #24]
	tm.tm_isdst= 0;
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	; 0x24

	timeResult = mktime(&tm);
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f007 fe2d 	bl	800b594 <mktime>
 800393a:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	return timeResult;
 800393e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40

}
 8003942:	4610      	mov	r0, r2
 8003944:	4619      	mov	r1, r3
 8003946:	3748      	adds	r7, #72	; 0x48
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000640 	.word	0x20000640

08003950 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <MX_CRC_Init+0x20>)
 8003956:	4a07      	ldr	r2, [pc, #28]	; (8003974 <MX_CRC_Init+0x24>)
 8003958:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800395a:	4805      	ldr	r0, [pc, #20]	; (8003970 <MX_CRC_Init+0x20>)
 800395c:	f001 ff03 	bl	8005766 <HAL_CRC_Init>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003966:	f000 fa99 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	200005e4 	.word	0x200005e4
 8003974:	40023000 	.word	0x40023000

08003978 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <HAL_CRC_MspInit+0x3c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10d      	bne.n	80039a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <HAL_CRC_MspInit+0x40>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <HAL_CRC_MspInit+0x40>)
 8003994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <HAL_CRC_MspInit+0x40>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40023000 	.word	0x40023000
 80039b8:	40023800 	.word	0x40023800

080039bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <MX_DMA_Init+0x3c>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <MX_DMA_Init+0x3c>)
 80039cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <MX_DMA_Init+0x3c>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	2039      	movs	r0, #57	; 0x39
 80039e4:	f001 fe89 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80039e8:	2039      	movs	r0, #57	; 0x39
 80039ea:	f001 fea2 	bl	8005732 <HAL_NVIC_EnableIRQ>

}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	4b3c      	ldr	r3, [pc, #240]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4a3b      	ldr	r2, [pc, #236]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a1c:	f043 0304 	orr.w	r3, r3, #4
 8003a20:	6313      	str	r3, [r2, #48]	; 0x30
 8003a22:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a34      	ldr	r2, [pc, #208]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a2d      	ldr	r2, [pc, #180]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003a82:	2200      	movs	r2, #0
 8003a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a88:	4820      	ldr	r0, [pc, #128]	; (8003b0c <MX_GPIO_Init+0x110>)
 8003a8a:	f003 f819 	bl	8006ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, GPIO_PIN_RESET);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2110      	movs	r1, #16
 8003a92:	481f      	ldr	r0, [pc, #124]	; (8003b10 <MX_GPIO_Init+0x114>)
 8003a94:	f003 f814 	bl	8006ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4816      	ldr	r0, [pc, #88]	; (8003b0c <MX_GPIO_Init+0x110>)
 8003ab2:	f002 fd9d 	bl	80065f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_MEM_CS_Pin;
 8003ab6:	2310      	movs	r3, #16
 8003ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8003ac6:	f107 0314 	add.w	r3, r7, #20
 8003aca:	4619      	mov	r1, r3
 8003acc:	4810      	ldr	r0, [pc, #64]	; (8003b10 <MX_GPIO_Init+0x114>)
 8003ace:	f002 fd8f 	bl	80065f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8003ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ad8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8003ae2:	f107 0314 	add.w	r3, r7, #20
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	480a      	ldr	r0, [pc, #40]	; (8003b14 <MX_GPIO_Init+0x118>)
 8003aea:	f002 fd81 	bl	80065f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003aee:	2200      	movs	r2, #0
 8003af0:	2100      	movs	r1, #0
 8003af2:	2017      	movs	r0, #23
 8003af4:	f001 fe01 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003af8:	2017      	movs	r0, #23
 8003afa:	f001 fe1a 	bl	8005732 <HAL_NVIC_EnableIRQ>

}
 8003afe:	bf00      	nop
 8003b00:	3728      	adds	r7, #40	; 0x28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40020800 	.word	0x40020800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	40020400 	.word	0x40020400

08003b18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b1c:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <MX_I2C1_Init+0x54>)
 8003b1e:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <MX_I2C1_Init+0x58>)
 8003b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <MX_I2C1_Init+0x54>)
 8003b24:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b28:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <MX_I2C1_Init+0x54>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b30:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <MX_I2C1_Init+0x54>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <MX_I2C1_Init+0x54>)
 8003b38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <MX_I2C1_Init+0x54>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <MX_I2C1_Init+0x54>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <MX_I2C1_Init+0x54>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <MX_I2C1_Init+0x54>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b56:	4805      	ldr	r0, [pc, #20]	; (8003b6c <MX_I2C1_Init+0x54>)
 8003b58:	f002 ffe4 	bl	8006b24 <HAL_I2C_Init>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8003b62:	f000 f99b 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200005ec 	.word	0x200005ec
 8003b70:	40005400 	.word	0x40005400

08003b74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	; 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <HAL_I2C_MspInit+0x84>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d12b      	bne.n	8003bee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <HAL_I2C_MspInit+0x88>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <HAL_I2C_MspInit+0x88>)
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_I2C_MspInit+0x88>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bb2:	23c0      	movs	r3, #192	; 0xc0
 8003bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bb6:	2312      	movs	r3, #18
 8003bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bc2:	2304      	movs	r3, #4
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bc6:	f107 0314 	add.w	r3, r7, #20
 8003bca:	4619      	mov	r1, r3
 8003bcc:	480c      	ldr	r0, [pc, #48]	; (8003c00 <HAL_I2C_MspInit+0x8c>)
 8003bce:	f002 fd0f 	bl	80065f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_I2C_MspInit+0x88>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <HAL_I2C_MspInit+0x88>)
 8003bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_I2C_MspInit+0x88>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003bee:	bf00      	nop
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40005400 	.word	0x40005400
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40020400 	.word	0x40020400

08003c04 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <HAL_I2C_MspDeInit+0x38>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10d      	bne.n	8003c32 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_I2C_MspDeInit+0x3c>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_I2C_MspDeInit+0x3c>)
 8003c1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003c22:	2140      	movs	r1, #64	; 0x40
 8003c24:	4807      	ldr	r0, [pc, #28]	; (8003c44 <HAL_I2C_MspDeInit+0x40>)
 8003c26:	f002 fe67 	bl	80068f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003c2a:	2180      	movs	r1, #128	; 0x80
 8003c2c:	4805      	ldr	r0, [pc, #20]	; (8003c44 <HAL_I2C_MspDeInit+0x40>)
 8003c2e:	f002 fe63 	bl	80068f8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40005400 	.word	0x40005400
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40020400 	.word	0x40020400

08003c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08e      	sub	sp, #56	; 0x38
 8003c4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c4e:	f001 fbe3 	bl	8005418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c52:	f000 f8b9 	bl	8003dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c56:	f7ff fed1 	bl	80039fc <MX_GPIO_Init>
  MX_RTC_Init();
 8003c5a:	f000 f925 	bl	8003ea8 <MX_RTC_Init>
  MX_DMA_Init();
 8003c5e:	f7ff fead 	bl	80039bc <MX_DMA_Init>
  MX_I2C1_Init();
 8003c62:	f7ff ff59 	bl	8003b18 <MX_I2C1_Init>
  MX_TIM1_Init();
 8003c66:	f000 fb43 	bl	80042f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003c6a:	f000 fccf 	bl	800460c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8003c6e:	f000 f96d 	bl	8003f4c <MX_SPI1_Init>
  MX_CRC_Init();
 8003c72:	f7ff fe6d 	bl	8003950 <MX_CRC_Init>
  MX_TIM9_Init();
 8003c76:	f000 fbdb 	bl	8004430 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  ledAllOff();
 8003c7a:	f7ff fc77 	bl	800356c <ledAllOff>
  ledRender();
 8003c7e:	f7ff fc8c 	bl	800359a <ledRender>
  sysConfigInit();
 8003c82:	f001 f849 	bl	8004d18 <sysConfigInit>
  systemConfig_t * config = systemConfigGet();
 8003c86:	f001 f85f 	bl	8004d48 <systemConfigGet>
 8003c8a:	6378      	str	r0, [r7, #52]	; 0x34
  dodecaItems_t *dodecaItems = &config->configItems.dodecaConfig;
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30

  dodecaInit(dodecaItems);
 8003c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c92:	f7fe fc79 	bl	8002588 <dodecaInit>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
*/

  ConsoleInit();
 8003c96:	f7fd facb 	bl	8001230 <ConsoleInit>


  if (SYS_CONFIG_BAD_DATA == sysConfigRead())
 8003c9a:	f001 f88d 	bl	8004db8 <sysConfigRead>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d106      	bne.n	8003cb2 <main+0x6a>
  {
	  ConsoleSendLine("*** CONFIG INVALID ***\nResetting to default");
 8003ca4:	4841      	ldr	r0, [pc, #260]	; (8003dac <main+0x164>)
 8003ca6:	f7fd fceb 	bl	8001680 <ConsoleSendLine>
	  dodecaReset();
 8003caa:	f7fe fc7d 	bl	80025a8 <dodecaReset>
	  sysConfigSave();
 8003cae:	f001 f89d 	bl	8004dec <sysConfigSave>
  }



  HAL_Delay(100);
 8003cb2:	2064      	movs	r0, #100	; 0x64
 8003cb4:	f001 fc22 	bl	80054fc <HAL_Delay>
  while(1 == MPU6050_Init(&hi2c1) )
 8003cb8:	e038      	b.n	8003d2c <main+0xe4>
  {
	  ConsoleSendString("** ERROR Initialising MNP6050!\n");
 8003cba:	483d      	ldr	r0, [pc, #244]	; (8003db0 <main+0x168>)
 8003cbc:	f7fd fcd3 	bl	8001666 <ConsoleSendString>
	  hi2c1.Instance->CR1 &= ~(I2C_CR1_PE);
 8003cc0:	4b3c      	ldr	r3, [pc, #240]	; (8003db4 <main+0x16c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <main+0x16c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

	  HAL_I2C_MspDeInit(&hi2c1);
 8003cd0:	4838      	ldr	r0, [pc, #224]	; (8003db4 <main+0x16c>)
 8003cd2:	f7ff ff97 	bl	8003c04 <HAL_I2C_MspDeInit>
	  hi2c1.Instance->SR2 &=~(I2C_SR2_BUSY);
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <main+0x16c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <main+0x16c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0202 	bic.w	r2, r2, #2
 8003ce4:	619a      	str	r2, [r3, #24]

	  GPIO_InitTypeDef GPIO_Init;
	  GPIO_Init.Pin = GPIO_PIN_7;
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	603b      	str	r3, [r7, #0]
	  GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8003cea:	2301      	movs	r3, #1
 8003cec:	607b      	str	r3, [r7, #4]
	  GPIO_Init.Pull = GPIO_PULLUP;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]
	  GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8003cf6:	463b      	mov	r3, r7
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	482f      	ldr	r0, [pc, #188]	; (8003db8 <main+0x170>)
 8003cfc:	f002 fc78 	bl	80065f0 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003d00:	2201      	movs	r2, #1
 8003d02:	2180      	movs	r1, #128	; 0x80
 8003d04:	482c      	ldr	r0, [pc, #176]	; (8003db8 <main+0x170>)
 8003d06:	f002 fedb 	bl	8006ac0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	482a      	ldr	r0, [pc, #168]	; (8003db8 <main+0x170>)
 8003d10:	f002 fed6 	bl	8006ac0 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8003d14:	2032      	movs	r0, #50	; 0x32
 8003d16:	f001 fbf1 	bl	80054fc <HAL_Delay>
	  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	4826      	ldr	r0, [pc, #152]	; (8003db8 <main+0x170>)
 8003d1e:	f002 fdeb 	bl	80068f8 <HAL_GPIO_DeInit>
	  MX_I2C1_Init();
 8003d22:	f7ff fef9 	bl	8003b18 <MX_I2C1_Init>

	  //__HAL_RCC_GPIOB_CLK_ENABLE();
	  HAL_Delay(100);
 8003d26:	2064      	movs	r0, #100	; 0x64
 8003d28:	f001 fbe8 	bl	80054fc <HAL_Delay>
  while(1 == MPU6050_Init(&hi2c1) )
 8003d2c:	4821      	ldr	r0, [pc, #132]	; (8003db4 <main+0x16c>)
 8003d2e:	f7fe fe63 	bl	80029f8 <MPU6050_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d0c0      	beq.n	8003cba <main+0x72>

  }
  // run the Accel To get initial angle ready. Seems to need to be run a numerb of times for the karman angle to settle???

  detectFaceUp(); // Just to start the cals off
 8003d38:	f7ff fd04 	bl	8003744 <detectFaceUp>

  ConsoleSendString("MPU6050 Initialised\n");
 8003d3c:	481f      	ldr	r0, [pc, #124]	; (8003dbc <main+0x174>)
 8003d3e:	f7fd fc92 	bl	8001666 <ConsoleSendString>

  //HAL_TIM_Base_Start_IT(&htim9);
  ConsolePrintPrompt();
 8003d42:	f7fd fa9f 	bl	8001284 <ConsolePrintPrompt>

  time_t tm1;
  time_t tm2;

  tm1 = rtcGetTimeStamp();
 8003d46:	f7ff fdcd 	bl	80038e4 <rtcGetTimeStamp>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  HAL_Delay(1000);
 8003d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d56:	f001 fbd1 	bl	80054fc <HAL_Delay>
  tm2 = rtcGetTimeStamp();
 8003d5a:	f7ff fdc3 	bl	80038e4 <rtcGetTimeStamp>
 8003d5e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28


  struct tm *tm;
  tm = gmtime(&tm1);
 8003d62:	f107 0318 	add.w	r3, r7, #24
 8003d66:	4618      	mov	r0, r3
 8003d68:	f007 fa36 	bl	800b1d8 <gmtime>
 8003d6c:	6278      	str	r0, [r7, #36]	; 0x24



  RTC_DateTypeDef date;
    HAL_RTC_GetDate(&hrtc, &date,RTC_FORMAT_BIN);
 8003d6e:	f107 0314 	add.w	r3, r7, #20
 8003d72:	2200      	movs	r2, #0
 8003d74:	4619      	mov	r1, r3
 8003d76:	4812      	ldr	r0, [pc, #72]	; (8003dc0 <main+0x178>)
 8003d78:	f004 fdce 	bl	8008918 <HAL_RTC_GetDate>
    if (date.Year < 22)
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	2b15      	cmp	r3, #21
 8003d80:	d806      	bhi.n	8003d90 <main+0x148>
    {
    	ConsoleSendLine("**** DATE & TIME NOT SET ******\n\n");
 8003d82:	4810      	ldr	r0, [pc, #64]	; (8003dc4 <main+0x17c>)
 8003d84:	f7fd fc7c 	bl	8001680 <ConsoleSendLine>
    	stateContollerInit(STATE_CONFIG);
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f000 fd1d 	bl	80047c8 <stateContollerInit>
 8003d8e:	e002      	b.n	8003d96 <main+0x14e>
    }
    else
  	  stateContollerInit(STATE_BEGIN);
 8003d90:	2008      	movs	r0, #8
 8003d92:	f000 fd19 	bl	80047c8 <stateContollerInit>

    ledAllOff();
 8003d96:	f7ff fbe9 	bl	800356c <ledAllOff>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 8003d9a:	f7fd fa81 	bl	80012a0 <ConsoleProcess>
	  stateController();
 8003d9e:	f000 fd6d 	bl	800487c <stateController>
		sprintf(msg,"Detected face %i is up",face);
		ConsoleSendLine(msg);
	}

	*/
	 HAL_Delay(200);
 8003da2:	20c8      	movs	r0, #200	; 0xc8
 8003da4:	f001 fbaa 	bl	80054fc <HAL_Delay>
	  ConsoleProcess();
 8003da8:	e7f7      	b.n	8003d9a <main+0x152>
 8003daa:	bf00      	nop
 8003dac:	080102b4 	.word	0x080102b4
 8003db0:	080102e0 	.word	0x080102e0
 8003db4:	200005ec 	.word	0x200005ec
 8003db8:	40020400 	.word	0x40020400
 8003dbc:	08010300 	.word	0x08010300
 8003dc0:	20000640 	.word	0x20000640
 8003dc4:	08010318 	.word	0x08010318

08003dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b094      	sub	sp, #80	; 0x50
 8003dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dce:	f107 0320 	add.w	r3, r7, #32
 8003dd2:	2230      	movs	r2, #48	; 0x30
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f007 fafc 	bl	800b3d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <SystemClock_Config+0xcc>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <SystemClock_Config+0xcc>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <SystemClock_Config+0xcc>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <SystemClock_Config+0xd0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <SystemClock_Config+0xd0>)
 8003e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <SystemClock_Config+0xd0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003e24:	2305      	movs	r3, #5
 8003e26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e32:	2302      	movs	r3, #2
 8003e34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003e40:	2360      	movs	r3, #96	; 0x60
 8003e42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e44:	2302      	movs	r3, #2
 8003e46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e48:	2304      	movs	r3, #4
 8003e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e4c:	f107 0320 	add.w	r3, r7, #32
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 fe27 	bl	8007aa4 <HAL_RCC_OscConfig>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003e5c:	f000 f81e 	bl	8003e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e60:	230f      	movs	r3, #15
 8003e62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e64:	2302      	movs	r3, #2
 8003e66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	2103      	movs	r1, #3
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f004 f889 	bl	8007f94 <HAL_RCC_ClockConfig>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003e88:	f000 f808 	bl	8003e9c <Error_Handler>
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	3750      	adds	r7, #80	; 0x50
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40007000 	.word	0x40007000

08003e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ea0:	b672      	cpsid	i
}
 8003ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ea4:	e7fe      	b.n	8003ea4 <Error_Handler+0x8>
	...

08003ea8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <MX_RTC_Init+0x44>)
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <MX_RTC_Init+0x48>)
 8003eb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <MX_RTC_Init+0x44>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <MX_RTC_Init+0x44>)
 8003eba:	227f      	movs	r2, #127	; 0x7f
 8003ebc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <MX_RTC_Init+0x44>)
 8003ec0:	22ff      	movs	r2, #255	; 0xff
 8003ec2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <MX_RTC_Init+0x44>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <MX_RTC_Init+0x44>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <MX_RTC_Init+0x44>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ed6:	4805      	ldr	r0, [pc, #20]	; (8003eec <MX_RTC_Init+0x44>)
 8003ed8:	f004 fb2c 	bl	8008534 <HAL_RTC_Init>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003ee2:	f7ff ffdb 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000640 	.word	0x20000640
 8003ef0:	40002800 	.word	0x40002800

08003ef4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003efc:	f107 0308 	add.w	r3, r7, #8
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
 8003f0c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a0c      	ldr	r2, [pc, #48]	; (8003f44 <HAL_RTC_MspInit+0x50>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d111      	bne.n	8003f3c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f20:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	4618      	mov	r0, r3
 8003f28:	f004 fa14 	bl	8008354 <HAL_RCCEx_PeriphCLKConfig>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003f32:	f7ff ffb3 	bl	8003e9c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <HAL_RTC_MspInit+0x54>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40002800 	.word	0x40002800
 8003f48:	42470e3c 	.word	0x42470e3c

08003f4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003f50:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f52:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <MX_SPI1_Init+0x68>)
 8003f54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f70:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f76:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f90:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f98:	220a      	movs	r2, #10
 8003f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f9c:	4804      	ldr	r0, [pc, #16]	; (8003fb0 <MX_SPI1_Init+0x64>)
 8003f9e:	f004 fdc7 	bl	8008b30 <HAL_SPI_Init>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003fa8:	f7ff ff78 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000660 	.word	0x20000660
 8003fb4:	40013000 	.word	0x40013000

08003fb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	609a      	str	r2, [r3, #8]
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <HAL_SPI_MspInit+0x84>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d12b      	bne.n	8004032 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	4b18      	ldr	r3, [pc, #96]	; (8004040 <HAL_SPI_MspInit+0x88>)
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	4a17      	ldr	r2, [pc, #92]	; (8004040 <HAL_SPI_MspInit+0x88>)
 8003fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <HAL_SPI_MspInit+0x88>)
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_SPI_MspInit+0x88>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	4a10      	ldr	r2, [pc, #64]	; (8004040 <HAL_SPI_MspInit+0x88>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6313      	str	r3, [r2, #48]	; 0x30
 8004006:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <HAL_SPI_MspInit+0x88>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_MEM_SCK_Pin|SPI_MEM_MISO_Pin|SPI_MEM_MOSI_Pin;
 8004012:	23e0      	movs	r3, #224	; 0xe0
 8004014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004016:	2302      	movs	r3, #2
 8004018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401e:	2303      	movs	r3, #3
 8004020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004022:	2305      	movs	r3, #5
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004026:	f107 0314 	add.w	r3, r7, #20
 800402a:	4619      	mov	r1, r3
 800402c:	4805      	ldr	r0, [pc, #20]	; (8004044 <HAL_SPI_MspInit+0x8c>)
 800402e:	f002 fadf 	bl	80065f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004032:	bf00      	nop
 8004034:	3728      	adds	r7, #40	; 0x28
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40013000 	.word	0x40013000
 8004040:	40023800 	.word	0x40023800
 8004044:	40020000 	.word	0x40020000

08004048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <HAL_MspInit+0x4c>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <HAL_MspInit+0x4c>)
 8004058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800405c:	6453      	str	r3, [r2, #68]	; 0x44
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <HAL_MspInit+0x4c>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004066:	607b      	str	r3, [r7, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <HAL_MspInit+0x4c>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	4a08      	ldr	r2, [pc, #32]	; (8004094 <HAL_MspInit+0x4c>)
 8004074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004078:	6413      	str	r3, [r2, #64]	; 0x40
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_MspInit+0x4c>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40023800 	.word	0x40023800

08004098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800409c:	e7fe      	b.n	800409c <NMI_Handler+0x4>

0800409e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040a2:	e7fe      	b.n	80040a2 <HardFault_Handler+0x4>

080040a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a8:	e7fe      	b.n	80040a8 <MemManage_Handler+0x4>

080040aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ae:	e7fe      	b.n	80040ae <BusFault_Handler+0x4>

080040b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b4:	e7fe      	b.n	80040b4 <UsageFault_Handler+0x4>

080040b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e4:	f001 f9ea 	bl	80054bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040e8:	bf00      	nop
 80040ea:	bd80      	pop	{r7, pc}

080040ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 80040f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040f4:	f002 fcfe 	bl	8006af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80040f8:	bf00      	nop
 80040fa:	bd80      	pop	{r7, pc}

080040fc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004100:	4803      	ldr	r0, [pc, #12]	; (8004110 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004102:	f005 f8bd 	bl	8009280 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004106:	4803      	ldr	r0, [pc, #12]	; (8004114 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004108:	f005 f8ba 	bl	8009280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}
 8004110:	200006c0 	.word	0x200006c0
 8004114:	20000708 	.word	0x20000708

08004118 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <USART1_IRQHandler+0x10>)
 800411e:	f006 f8e9 	bl	800a2f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200007b0 	.word	0x200007b0

0800412c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004130:	4802      	ldr	r0, [pc, #8]	; (800413c <DMA2_Stream1_IRQHandler+0x10>)
 8004132:	f001 fcff 	bl	8005b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000750 	.word	0x20000750

08004140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
	return 1;
 8004144:	2301      	movs	r3, #1
}
 8004146:	4618      	mov	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_kill>:

int _kill(int pid, int sig)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800415a:	f007 f837 	bl	800b1cc <__errno>
 800415e:	4603      	mov	r3, r0
 8004160:	2216      	movs	r2, #22
 8004162:	601a      	str	r2, [r3, #0]
	return -1;
 8004164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <_exit>:

void _exit (int status)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004178:	f04f 31ff 	mov.w	r1, #4294967295
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ffe7 	bl	8004150 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004182:	e7fe      	b.n	8004182 <_exit+0x12>

08004184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e00a      	b.n	80041ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004196:	f3af 8000 	nop.w
 800419a:	4601      	mov	r1, r0
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	60ba      	str	r2, [r7, #8]
 80041a2:	b2ca      	uxtb	r2, r1
 80041a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3301      	adds	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	dbf0      	blt.n	8004196 <_read+0x12>
	}

return len;
 80041b4:	687b      	ldr	r3, [r7, #4]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	e009      	b.n	80041e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	60ba      	str	r2, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	3301      	adds	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	dbf1      	blt.n	80041d0 <_write+0x12>
	}
	return len;
 80041ec:	687b      	ldr	r3, [r7, #4]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <_close>:

int _close(int file)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
	return -1;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800421e:	605a      	str	r2, [r3, #4]
	return 0;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <_isatty>:

int _isatty(int file)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
	return 1;
 8004236:	2301      	movs	r3, #1
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
	return 0;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <_sbrk+0x5c>)
 800426a:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <_sbrk+0x60>)
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <_sbrk+0x64>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <_sbrk+0x64>)
 800427e:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <_sbrk+0x68>)
 8004280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <_sbrk+0x64>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	429a      	cmp	r2, r3
 800428e:	d207      	bcs.n	80042a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004290:	f006 ff9c 	bl	800b1cc <__errno>
 8004294:	4603      	mov	r3, r0
 8004296:	220c      	movs	r2, #12
 8004298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	e009      	b.n	80042b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <_sbrk+0x64>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <_sbrk+0x64>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <_sbrk+0x64>)
 80042b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042b2:	68fb      	ldr	r3, [r7, #12]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20020000 	.word	0x20020000
 80042c0:	00000400 	.word	0x00000400
 80042c4:	200006bc 	.word	0x200006bc
 80042c8:	20000d18 	.word	0x20000d18

080042cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <SystemInit+0x20>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	4a05      	ldr	r2, [pc, #20]	; (80042ec <SystemInit+0x20>)
 80042d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b096      	sub	sp, #88	; 0x58
 80042f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004304:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800430e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	609a      	str	r2, [r3, #8]
 800431a:	60da      	str	r2, [r3, #12]
 800431c:	611a      	str	r2, [r3, #16]
 800431e:	615a      	str	r2, [r3, #20]
 8004320:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	2220      	movs	r2, #32
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f007 f853 	bl	800b3d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800432e:	4b3e      	ldr	r3, [pc, #248]	; (8004428 <MX_TIM1_Init+0x138>)
 8004330:	4a3e      	ldr	r2, [pc, #248]	; (800442c <MX_TIM1_Init+0x13c>)
 8004332:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004334:	4b3c      	ldr	r3, [pc, #240]	; (8004428 <MX_TIM1_Init+0x138>)
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800433a:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <MX_TIM1_Init+0x138>)
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 8004340:	4b39      	ldr	r3, [pc, #228]	; (8004428 <MX_TIM1_Init+0x138>)
 8004342:	227c      	movs	r2, #124	; 0x7c
 8004344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004346:	4b38      	ldr	r3, [pc, #224]	; (8004428 <MX_TIM1_Init+0x138>)
 8004348:	2200      	movs	r2, #0
 800434a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800434c:	4b36      	ldr	r3, [pc, #216]	; (8004428 <MX_TIM1_Init+0x138>)
 800434e:	2200      	movs	r2, #0
 8004350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004352:	4b35      	ldr	r3, [pc, #212]	; (8004428 <MX_TIM1_Init+0x138>)
 8004354:	2200      	movs	r2, #0
 8004356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004358:	4833      	ldr	r0, [pc, #204]	; (8004428 <MX_TIM1_Init+0x138>)
 800435a:	f004 fc72 	bl	8008c42 <HAL_TIM_Base_Init>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004364:	f7ff fd9a 	bl	8003e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800436e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004372:	4619      	mov	r1, r3
 8004374:	482c      	ldr	r0, [pc, #176]	; (8004428 <MX_TIM1_Init+0x138>)
 8004376:	f005 f94d 	bl	8009614 <HAL_TIM_ConfigClockSource>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8004380:	f7ff fd8c 	bl	8003e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004384:	4828      	ldr	r0, [pc, #160]	; (8004428 <MX_TIM1_Init+0x138>)
 8004386:	f004 fcab 	bl	8008ce0 <HAL_TIM_PWM_Init>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004390:	f7ff fd84 	bl	8003e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004394:	2300      	movs	r3, #0
 8004396:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004398:	2300      	movs	r3, #0
 800439a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800439c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043a0:	4619      	mov	r1, r3
 80043a2:	4821      	ldr	r0, [pc, #132]	; (8004428 <MX_TIM1_Init+0x138>)
 80043a4:	f005 fdc2 	bl	8009f2c <HAL_TIMEx_MasterConfigSynchronization>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80043ae:	f7ff fd75 	bl	8003e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043b2:	2360      	movs	r3, #96	; 0x60
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043ba:	2300      	movs	r3, #0
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043be:	2300      	movs	r3, #0
 80043c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043c6:	2300      	movs	r3, #0
 80043c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d2:	2200      	movs	r2, #0
 80043d4:	4619      	mov	r1, r3
 80043d6:	4814      	ldr	r0, [pc, #80]	; (8004428 <MX_TIM1_Init+0x138>)
 80043d8:	f005 f85a 	bl	8009490 <HAL_TIM_PWM_ConfigChannel>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80043e2:	f7ff fd5b 	bl	8003e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004400:	2300      	movs	r3, #0
 8004402:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4807      	ldr	r0, [pc, #28]	; (8004428 <MX_TIM1_Init+0x138>)
 800440a:	f005 fdfd 	bl	800a008 <HAL_TIMEx_ConfigBreakDeadTime>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004414:	f7ff fd42 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004418:	4803      	ldr	r0, [pc, #12]	; (8004428 <MX_TIM1_Init+0x138>)
 800441a:	f000 f8bd 	bl	8004598 <HAL_TIM_MspPostInit>

}
 800441e:	bf00      	nop
 8004420:	3758      	adds	r7, #88	; 0x58
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200006c0 	.word	0x200006c0
 800442c:	40010000 	.word	0x40010000

08004430 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004436:	463b      	mov	r3, r7
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <MX_TIM9_Init+0x6c>)
 8004444:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <MX_TIM9_Init+0x70>)
 8004446:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <MX_TIM9_Init+0x6c>)
 800444a:	f242 720f 	movw	r2, #9999	; 0x270f
 800444e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004450:	4b12      	ldr	r3, [pc, #72]	; (800449c <MX_TIM9_Init+0x6c>)
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 40000-1;
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <MX_TIM9_Init+0x6c>)
 8004458:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800445c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <MX_TIM9_Init+0x6c>)
 8004460:	2200      	movs	r2, #0
 8004462:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004464:	4b0d      	ldr	r3, [pc, #52]	; (800449c <MX_TIM9_Init+0x6c>)
 8004466:	2200      	movs	r2, #0
 8004468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800446a:	480c      	ldr	r0, [pc, #48]	; (800449c <MX_TIM9_Init+0x6c>)
 800446c:	f004 fbe9 	bl	8008c42 <HAL_TIM_Base_Init>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8004476:	f7ff fd11 	bl	8003e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800447a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800447e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004480:	463b      	mov	r3, r7
 8004482:	4619      	mov	r1, r3
 8004484:	4805      	ldr	r0, [pc, #20]	; (800449c <MX_TIM9_Init+0x6c>)
 8004486:	f005 f8c5 	bl	8009614 <HAL_TIM_ConfigClockSource>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8004490:	f7ff fd04 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000708 	.word	0x20000708
 80044a0:	40014000 	.word	0x40014000

080044a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a34      	ldr	r2, [pc, #208]	; (8004584 <HAL_TIM_Base_MspInit+0xe0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d147      	bne.n	8004546 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	4b33      	ldr	r3, [pc, #204]	; (8004588 <HAL_TIM_Base_MspInit+0xe4>)
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	4a32      	ldr	r2, [pc, #200]	; (8004588 <HAL_TIM_Base_MspInit+0xe4>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6453      	str	r3, [r2, #68]	; 0x44
 80044c6:	4b30      	ldr	r3, [pc, #192]	; (8004588 <HAL_TIM_Base_MspInit+0xe4>)
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80044d2:	4b2e      	ldr	r3, [pc, #184]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 80044d4:	4a2e      	ldr	r2, [pc, #184]	; (8004590 <HAL_TIM_Base_MspInit+0xec>)
 80044d6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80044d8:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 80044da:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80044de:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044e0:	4b2a      	ldr	r3, [pc, #168]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 80044e2:	2240      	movs	r2, #64	; 0x40
 80044e4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80044e6:	4b29      	ldr	r3, [pc, #164]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 80044ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80044f4:	4b25      	ldr	r3, [pc, #148]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 80044f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044fa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80044fc:	4b23      	ldr	r3, [pc, #140]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 80044fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004502:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8004504:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 8004506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800450a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800450c:	4b1f      	ldr	r3, [pc, #124]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 800450e:	2200      	movs	r2, #0
 8004510:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004512:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 8004514:	2200      	movs	r2, #0
 8004516:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004518:	481c      	ldr	r0, [pc, #112]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 800451a:	f001 f973 	bl	8005804 <HAL_DMA_Init>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8004524:	f7ff fcba 	bl	8003e9c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 800452c:	625a      	str	r2, [r3, #36]	; 0x24
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <HAL_TIM_Base_MspInit+0xe8>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004534:	2200      	movs	r2, #0
 8004536:	2100      	movs	r1, #0
 8004538:	2018      	movs	r0, #24
 800453a:	f001 f8de 	bl	80056fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800453e:	2018      	movs	r0, #24
 8004540:	f001 f8f7 	bl	8005732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8004544:	e01a      	b.n	800457c <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM9)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <HAL_TIM_Base_MspInit+0xf0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d115      	bne.n	800457c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004550:	2300      	movs	r3, #0
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_TIM_Base_MspInit+0xe4>)
 8004556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004558:	4a0b      	ldr	r2, [pc, #44]	; (8004588 <HAL_TIM_Base_MspInit+0xe4>)
 800455a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455e:	6453      	str	r3, [r2, #68]	; 0x44
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_TIM_Base_MspInit+0xe4>)
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800456c:	2200      	movs	r2, #0
 800456e:	2100      	movs	r1, #0
 8004570:	2018      	movs	r0, #24
 8004572:	f001 f8c2 	bl	80056fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004576:	2018      	movs	r0, #24
 8004578:	f001 f8db 	bl	8005732 <HAL_NVIC_EnableIRQ>
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40010000 	.word	0x40010000
 8004588:	40023800 	.word	0x40023800
 800458c:	20000750 	.word	0x20000750
 8004590:	40026428 	.word	0x40026428
 8004594:	40014000 	.word	0x40014000

08004598 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_TIM_MspPostInit+0x68>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d11e      	bne.n	80045f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_TIM_MspPostInit+0x6c>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <HAL_TIM_MspPostInit+0x6c>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ca:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <HAL_TIM_MspPostInit+0x6c>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 80045d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045dc:	2302      	movs	r3, #2
 80045de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045e8:	2301      	movs	r3, #1
 80045ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	4619      	mov	r1, r3
 80045f2:	4805      	ldr	r0, [pc, #20]	; (8004608 <HAL_TIM_MspPostInit+0x70>)
 80045f4:	f001 fffc 	bl	80065f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80045f8:	bf00      	nop
 80045fa:	3720      	adds	r7, #32
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40010000 	.word	0x40010000
 8004604:	40023800 	.word	0x40023800
 8004608:	40020000 	.word	0x40020000

0800460c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004610:	4b11      	ldr	r3, [pc, #68]	; (8004658 <MX_USART1_UART_Init+0x4c>)
 8004612:	4a12      	ldr	r2, [pc, #72]	; (800465c <MX_USART1_UART_Init+0x50>)
 8004614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <MX_USART1_UART_Init+0x4c>)
 8004618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800461c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800461e:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <MX_USART1_UART_Init+0x4c>)
 8004620:	2200      	movs	r2, #0
 8004622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <MX_USART1_UART_Init+0x4c>)
 8004626:	2200      	movs	r2, #0
 8004628:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <MX_USART1_UART_Init+0x4c>)
 800462c:	2200      	movs	r2, #0
 800462e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <MX_USART1_UART_Init+0x4c>)
 8004632:	220c      	movs	r2, #12
 8004634:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <MX_USART1_UART_Init+0x4c>)
 8004638:	2200      	movs	r2, #0
 800463a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <MX_USART1_UART_Init+0x4c>)
 800463e:	2200      	movs	r2, #0
 8004640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004642:	4805      	ldr	r0, [pc, #20]	; (8004658 <MX_USART1_UART_Init+0x4c>)
 8004644:	f005 fd46 	bl	800a0d4 <HAL_UART_Init>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800464e:	f7ff fc25 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200007b0 	.word	0x200007b0
 800465c:	40011000 	.word	0x40011000

08004660 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <HAL_UART_MspInit+0x94>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d134      	bne.n	80046ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <HAL_UART_MspInit+0x98>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	4a1b      	ldr	r2, [pc, #108]	; (80046f8 <HAL_UART_MspInit+0x98>)
 800468c:	f043 0310 	orr.w	r3, r3, #16
 8004690:	6453      	str	r3, [r2, #68]	; 0x44
 8004692:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <HAL_UART_MspInit+0x98>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <HAL_UART_MspInit+0x98>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <HAL_UART_MspInit+0x98>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6313      	str	r3, [r2, #48]	; 0x30
 80046ae:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <HAL_UART_MspInit+0x98>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80046ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80046be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c8:	2303      	movs	r3, #3
 80046ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046cc:	2307      	movs	r3, #7
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	4619      	mov	r1, r3
 80046d6:	4809      	ldr	r0, [pc, #36]	; (80046fc <HAL_UART_MspInit+0x9c>)
 80046d8:	f001 ff8a 	bl	80065f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80046dc:	2200      	movs	r2, #0
 80046de:	2100      	movs	r1, #0
 80046e0:	2025      	movs	r0, #37	; 0x25
 80046e2:	f001 f80a 	bl	80056fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046e6:	2025      	movs	r0, #37	; 0x25
 80046e8:	f001 f823 	bl	8005732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80046ec:	bf00      	nop
 80046ee:	3728      	adds	r7, #40	; 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40011000 	.word	0x40011000
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40020000 	.word	0x40020000

08004700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8004700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004738 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004704:	480d      	ldr	r0, [pc, #52]	; (800473c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004706:	490e      	ldr	r1, [pc, #56]	; (8004740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004708:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800470a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800470c:	e002      	b.n	8004714 <LoopCopyDataInit>

0800470e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800470e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004712:	3304      	adds	r3, #4

08004714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004718:	d3f9      	bcc.n	800470e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800471a:	4a0b      	ldr	r2, [pc, #44]	; (8004748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800471c:	4c0b      	ldr	r4, [pc, #44]	; (800474c <LoopFillZerobss+0x26>)
  movs r3, #0
 800471e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004720:	e001      	b.n	8004726 <LoopFillZerobss>

08004722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004724:	3204      	adds	r2, #4

08004726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004728:	d3fb      	bcc.n	8004722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800472a:	f7ff fdcf 	bl	80042cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800472e:	f006 fe1d 	bl	800b36c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004732:	f7ff fa89 	bl	8003c48 <main>
  bx  lr    
 8004736:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8004738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800473c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004740:	200004f4 	.word	0x200004f4
  ldr r2, =_sidata
 8004744:	08011498 	.word	0x08011498
  ldr r2, =_sbss
 8004748:	200004f8 	.word	0x200004f8
  ldr r4, =_ebss
 800474c:	20000d18 	.word	0x20000d18

08004750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004750:	e7fe      	b.n	8004750 <ADC_IRQHandler>
	...

08004754 <findState>:
static void displayState();



static stateControl_t *findState(const eState_t state)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	71fb      	strb	r3, [r7, #7]
	eState_t stateLoop = 0xff;
 800475e:	23ff      	movs	r3, #255	; 0xff
 8004760:	73bb      	strb	r3, [r7, #14]
	uint8_t cnt = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
	while (STATE_NULL != stateLoop)
 8004766:	e00f      	b.n	8004788 <findState+0x34>
	{
		if (state == stateTable[cnt].state)
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <findState+0x50>)
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	4413      	add	r3, r2
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	79fa      	ldrb	r2, [r7, #7]
 8004774:	429a      	cmp	r2, r3
 8004776:	d104      	bne.n	8004782 <findState+0x2e>
			return &stateTable[cnt];
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <findState+0x50>)
 800477e:	4413      	add	r3, r2
 8004780:	e009      	b.n	8004796 <findState+0x42>
		cnt++;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	3301      	adds	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
	while (STATE_NULL != stateLoop)
 8004788:	7bbb      	ldrb	r3, [r7, #14]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1ec      	bne.n	8004768 <findState+0x14>
	}
	return &stateTable[cnt];
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <findState+0x50>)
 8004794:	4413      	add	r3, r2
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000228 	.word	0x20000228

080047a8 <setStateControllerMode>:

void setStateControllerMode(eStateControllerMode_t mode)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	71fb      	strb	r3, [r7, #7]
	stateControllerMode = mode;
 80047b2:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <setStateControllerMode+0x1c>)
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	7013      	strb	r3, [r2, #0]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20000801 	.word	0x20000801

080047c8 <stateContollerInit>:


void stateContollerInit(eState_t state)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
	if (state == STATE_CONFIG)
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d106      	bne.n	80047e6 <stateContollerInit+0x1e>
	{
		stateControllerMode = STATE_CONT_MODE_CONFIG;
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <stateContollerInit+0x50>)
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
		lastState = STATE_NULL;
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <stateContollerInit+0x54>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	e002      	b.n	80047ec <stateContollerInit+0x24>
	}else
	{
		stateControllerMode  = STATE_CONT_MODE_RUN;
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <stateContollerInit+0x50>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
	}
	currentDodeca = dodecaGet(DODECA_STOP_FACE);
 80047ec:	200b      	movs	r0, #11
 80047ee:	f7fd ff63 	bl	80026b8 <dodecaGet>
 80047f2:	4603      	mov	r3, r0
 80047f4:	4a0a      	ldr	r2, [pc, #40]	; (8004820 <stateContollerInit+0x58>)
 80047f6:	6013      	str	r3, [r2, #0]
	currentDodeca->state = DODECA_STATE_STOPPED;
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <stateContollerInit+0x58>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2203      	movs	r2, #3
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28
	currentState = findState(state);
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff ffa6 	bl	8004754 <findState>
 8004808:	4603      	mov	r3, r0
 800480a:	4a06      	ldr	r2, [pc, #24]	; (8004824 <stateContollerInit+0x5c>)
 800480c:	6013      	str	r3, [r2, #0]
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000801 	.word	0x20000801
 800481c:	200007f5 	.word	0x200007f5
 8004820:	20000804 	.word	0x20000804
 8004824:	200007f8 	.word	0x200007f8

08004828 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
	{

	}
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <displayState>:




static void displayState()
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
	if (oldState == currentState->state) return;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <displayState+0x34>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	781a      	ldrb	r2, [r3, #0]
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <displayState+0x38>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d00e      	beq.n	800486c <displayState+0x30>
	oldState = currentState->state;
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <displayState+0x34>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <displayState+0x38>)
 8004856:	701a      	strb	r2, [r3, #0]
	ConsoleSendString("State :-> ");
 8004858:	4807      	ldr	r0, [pc, #28]	; (8004878 <displayState+0x3c>)
 800485a:	f7fc ff04 	bl	8001666 <ConsoleSendString>
	ConsoleSendLine(currentState->debugName);
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <displayState+0x34>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4618      	mov	r0, r3
 8004866:	f7fc ff0b 	bl	8001680 <ConsoleSendLine>
 800486a:	e000      	b.n	800486e <displayState+0x32>
	if (oldState == currentState->state) return;
 800486c:	bf00      	nop
}
 800486e:	bd80      	pop	{r7, pc}
 8004870:	200007f8 	.word	0x200007f8
 8004874:	20000852 	.word	0x20000852
 8004878:	08010398 	.word	0x08010398

0800487c <stateController>:


void stateController()
{
 800487c:	b5b0      	push	{r4, r5, r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af02      	add	r7, sp, #8



	switch (currentState->state)
 8004882:	4ba1      	ldr	r3, [pc, #644]	; (8004b08 <stateController+0x28c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	f200 8236 	bhi.w	8004cfa <stateController+0x47e>
 800488e:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <stateController+0x18>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	08004cef 	.word	0x08004cef
 8004898:	080049a3 	.word	0x080049a3
 800489c:	080049d9 	.word	0x080049d9
 80048a0:	08004cbd 	.word	0x08004cbd
 80048a4:	08004ad9 	.word	0x08004ad9
 80048a8:	08004a13 	.word	0x08004a13
 80048ac:	08004cb1 	.word	0x08004cb1
 80048b0:	08004c4f 	.word	0x08004c4f
 80048b4:	080048b9 	.word	0x080048b9
	{
	case STATE_BEGIN:
			lastState = STATE_BEGIN;
 80048b8:	4b94      	ldr	r3, [pc, #592]	; (8004b0c <stateController+0x290>)
 80048ba:	2208      	movs	r2, #8
 80048bc:	701a      	strb	r2, [r3, #0]
			displayState();
 80048be:	f7ff ffbd 	bl	800483c <displayState>
			if (STATE_CONT_MODE_CONFIG ==  stateControllerMode)
 80048c2:	4b93      	ldr	r3, [pc, #588]	; (8004b10 <stateController+0x294>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d109      	bne.n	80048de <stateController+0x62>
			{
				currentState = findState(STATE_CONFIG);
 80048ca:	2001      	movs	r0, #1
 80048cc:	f7ff ff42 	bl	8004754 <findState>
 80048d0:	4603      	mov	r3, r0
 80048d2:	4a8d      	ldr	r2, [pc, #564]	; (8004b08 <stateController+0x28c>)
 80048d4:	6013      	str	r3, [r2, #0]
				breakState(STATE_BEGIN);
 80048d6:	4b8d      	ldr	r3, [pc, #564]	; (8004b0c <stateController+0x290>)
 80048d8:	2208      	movs	r2, #8
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	e20d      	b.n	8004cfa <stateController+0x47e>
			}
			currentFaceUp = detectFaceUp();
 80048de:	f7fe ff31 	bl	8003744 <detectFaceUp>
 80048e2:	4603      	mov	r3, r0
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4b8b      	ldr	r3, [pc, #556]	; (8004b14 <stateController+0x298>)
 80048e8:	701a      	strb	r2, [r3, #0]
			if (0xff == currentFaceUp )
 80048ea:	4b8a      	ldr	r3, [pc, #552]	; (8004b14 <stateController+0x298>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2bff      	cmp	r3, #255	; 0xff
 80048f0:	d113      	bne.n	800491a <stateController+0x9e>
			{
				// TODO Set Error reason
				currentState = findState(currentState->error);
 80048f2:	4b85      	ldr	r3, [pc, #532]	; (8004b08 <stateController+0x28c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	7b5b      	ldrb	r3, [r3, #13]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ff2b 	bl	8004754 <findState>
 80048fe:	4603      	mov	r3, r0
 8004900:	4a81      	ldr	r2, [pc, #516]	; (8004b08 <stateController+0x28c>)
 8004902:	6013      	str	r3, [r2, #0]
				errorFlags |= STATE_CONTROLLER_ERROR_FACE_DETECT_FAIL;
 8004904:	4b84      	ldr	r3, [pc, #528]	; (8004b18 <stateController+0x29c>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4b82      	ldr	r3, [pc, #520]	; (8004b18 <stateController+0x29c>)
 8004910:	701a      	strb	r2, [r3, #0]
				breakState(STATE_BEGIN);;
 8004912:	4b7e      	ldr	r3, [pc, #504]	; (8004b0c <stateController+0x290>)
 8004914:	2208      	movs	r2, #8
 8004916:	701a      	strb	r2, [r3, #0]
 8004918:	e1ef      	b.n	8004cfa <stateController+0x47e>
			}
			currentDodeca = dodecaGet(currentFaceUp);
 800491a:	4b7e      	ldr	r3, [pc, #504]	; (8004b14 <stateController+0x298>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd feca 	bl	80026b8 <dodecaGet>
 8004924:	4603      	mov	r3, r0
 8004926:	4a7d      	ldr	r2, [pc, #500]	; (8004b1c <stateController+0x2a0>)
 8004928:	6013      	str	r3, [r2, #0]
			if (DODECA_STATE_NOT_CONFIGURED == currentDodeca->state)
 800492a:	4b7c      	ldr	r3, [pc, #496]	; (8004b1c <stateController+0x2a0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	2b01      	cmp	r3, #1
 8004932:	d109      	bne.n	8004948 <stateController+0xcc>
			{
				// TODO Set Error reason
				currentState = findState(currentState->error);
 8004934:	4b74      	ldr	r3, [pc, #464]	; (8004b08 <stateController+0x28c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	7b5b      	ldrb	r3, [r3, #13]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff ff0a 	bl	8004754 <findState>
 8004940:	4603      	mov	r3, r0
 8004942:	4a71      	ldr	r2, [pc, #452]	; (8004b08 <stateController+0x28c>)
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e028      	b.n	800499a <stateController+0x11e>
			}
			else 				{
				currentDodeca = dodecaGet(currentFaceUp);
 8004948:	4b72      	ldr	r3, [pc, #456]	; (8004b14 <stateController+0x298>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f7fd feb3 	bl	80026b8 <dodecaGet>
 8004952:	4603      	mov	r3, r0
 8004954:	4a71      	ldr	r2, [pc, #452]	; (8004b1c <stateController+0x2a0>)
 8004956:	6013      	str	r3, [r2, #0]
				currentDodeca->state = DODECA_STATE_STOPPED;
 8004958:	4b70      	ldr	r3, [pc, #448]	; (8004b1c <stateController+0x2a0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2203      	movs	r2, #3
 800495e:	629a      	str	r2, [r3, #40]	; 0x28
				currentState = findState(currentState->done);
 8004960:	4b69      	ldr	r3, [pc, #420]	; (8004b08 <stateController+0x28c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	7b1b      	ldrb	r3, [r3, #12]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fef4 	bl	8004754 <findState>
 800496c:	4603      	mov	r3, r0
 800496e:	4a66      	ldr	r2, [pc, #408]	; (8004b08 <stateController+0x28c>)
 8004970:	6013      	str	r3, [r2, #0]
				ledSetFaceColour(currentDodeca->id, colourFindByid(COLOUR_RED_ID)->code,colourFindByid(COLOUR_WHITE_ID)->code,LED_FACE_MODE_HALF);
 8004972:	4b6a      	ldr	r3, [pc, #424]	; (8004b1c <stateController+0x2a0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	781c      	ldrb	r4, [r3, #0]
 8004978:	2000      	movs	r0, #0
 800497a:	f7fd fddb 	bl	8002534 <colourFindByid>
 800497e:	4603      	mov	r3, r0
 8004980:	691d      	ldr	r5, [r3, #16]
 8004982:	2009      	movs	r0, #9
 8004984:	f7fd fdd6 	bl	8002534 <colourFindByid>
 8004988:	4603      	mov	r3, r0
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	2302      	movs	r3, #2
 800498e:	4629      	mov	r1, r5
 8004990:	4620      	mov	r0, r4
 8004992:	f7fe fe0b 	bl	80035ac <ledSetFaceColour>
				ledRender();
 8004996:	f7fe fe00 	bl	800359a <ledRender>
			}

			breakState(STATE_BEGIN);;
 800499a:	4b5c      	ldr	r3, [pc, #368]	; (8004b0c <stateController+0x290>)
 800499c:	2208      	movs	r2, #8
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e1ab      	b.n	8004cfa <stateController+0x47e>

	case STATE_CONFIG:
		displayState();
 80049a2:	f7ff ff4b 	bl	800483c <displayState>
		if (STATE_CONT_MODE_RUN ==  stateControllerMode)
 80049a6:	4b5a      	ldr	r3, [pc, #360]	; (8004b10 <stateController+0x294>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d110      	bne.n	80049d0 <stateController+0x154>
		{
			if (lastState == STATE_NULL)
 80049ae:	4b57      	ldr	r3, [pc, #348]	; (8004b0c <stateController+0x290>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <stateController+0x148>
				currentState = findState(STATE_BEGIN);
 80049b6:	2008      	movs	r0, #8
 80049b8:	f7ff fecc 	bl	8004754 <findState>
 80049bc:	4603      	mov	r3, r0
 80049be:	4a52      	ldr	r2, [pc, #328]	; (8004b08 <stateController+0x28c>)
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e005      	b.n	80049d0 <stateController+0x154>
			else
				currentState = findState(STATE_IDLE);
 80049c4:	2002      	movs	r0, #2
 80049c6:	f7ff fec5 	bl	8004754 <findState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	4a4e      	ldr	r2, [pc, #312]	; (8004b08 <stateController+0x28c>)
 80049ce:	6013      	str	r3, [r2, #0]
		}
		breakState(STATE_CONFIG);
 80049d0:	4b4e      	ldr	r3, [pc, #312]	; (8004b0c <stateController+0x290>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	e190      	b.n	8004cfa <stateController+0x47e>
	case STATE_IDLE:
		lastState = STATE_IDLE;
 80049d8:	4b4c      	ldr	r3, [pc, #304]	; (8004b0c <stateController+0x290>)
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]
			displayState();
 80049de:	f7ff ff2d 	bl	800483c <displayState>
			if (STATE_CONT_MODE_CONFIG ==  stateControllerMode)
 80049e2:	4b4b      	ldr	r3, [pc, #300]	; (8004b10 <stateController+0x294>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d106      	bne.n	80049f8 <stateController+0x17c>
				currentState = findState(STATE_CONFIG);
 80049ea:	2001      	movs	r0, #1
 80049ec:	f7ff feb2 	bl	8004754 <findState>
 80049f0:	4603      	mov	r3, r0
 80049f2:	4a45      	ldr	r2, [pc, #276]	; (8004b08 <stateController+0x28c>)
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e008      	b.n	8004a0a <stateController+0x18e>
			else
				currentState = findState(currentState->done);
 80049f8:	4b43      	ldr	r3, [pc, #268]	; (8004b08 <stateController+0x28c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	7b1b      	ldrb	r3, [r3, #12]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff fea8 	bl	8004754 <findState>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4a40      	ldr	r2, [pc, #256]	; (8004b08 <stateController+0x28c>)
 8004a08:	6013      	str	r3, [r2, #0]
		breakState(STATE_IDLE);
 8004a0a:	4b40      	ldr	r3, [pc, #256]	; (8004b0c <stateController+0x290>)
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e173      	b.n	8004cfa <stateController+0x47e>
	case STATE_CHECK_OREN:

			displayState();
 8004a12:	f7ff ff13 	bl	800483c <displayState>
			detectedFace = detectFaceUp();
 8004a16:	f7fe fe95 	bl	8003744 <detectFaceUp>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4b40      	ldr	r3, [pc, #256]	; (8004b20 <stateController+0x2a4>)
 8004a20:	701a      	strb	r2, [r3, #0]
			if (detectedFace == 0xff)
 8004a22:	4b3f      	ldr	r3, [pc, #252]	; (8004b20 <stateController+0x2a4>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2bff      	cmp	r3, #255	; 0xff
 8004a28:	d116      	bne.n	8004a58 <stateController+0x1dc>
			{
				ConsoleSendLine("ERROR - Face not detected");
 8004a2a:	483e      	ldr	r0, [pc, #248]	; (8004b24 <stateController+0x2a8>)
 8004a2c:	f7fc fe28 	bl	8001680 <ConsoleSendLine>
				currentState =  findState(currentState->error);
 8004a30:	4b35      	ldr	r3, [pc, #212]	; (8004b08 <stateController+0x28c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	7b5b      	ldrb	r3, [r3, #13]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fe8c 	bl	8004754 <findState>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	4a32      	ldr	r2, [pc, #200]	; (8004b08 <stateController+0x28c>)
 8004a40:	6013      	str	r3, [r2, #0]
				errorFlags |= STATE_CONTROLLER_ERROR_FACE_DETECT_FAIL;
 8004a42:	4b35      	ldr	r3, [pc, #212]	; (8004b18 <stateController+0x29c>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <stateController+0x29c>)
 8004a4e:	701a      	strb	r2, [r3, #0]

				breakState(STATE_CHECK_OREN);
 8004a50:	4b2e      	ldr	r3, [pc, #184]	; (8004b0c <stateController+0x290>)
 8004a52:	2205      	movs	r2, #5
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	e150      	b.n	8004cfa <stateController+0x47e>
			}

			newDodecaDetected = dodecaGet(detectedFace);
 8004a58:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <stateController+0x2a4>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fd fe2b 	bl	80026b8 <dodecaGet>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4a30      	ldr	r2, [pc, #192]	; (8004b28 <stateController+0x2ac>)
 8004a66:	6013      	str	r3, [r2, #0]
			sprintf(msg,"Current: [%i] %s, New [%i] %s",currentDodeca->id,currentDodeca->name,newDodecaDetected->id,newDodecaDetected->name);
 8004a68:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <stateController+0x2a0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	4b2a      	ldr	r3, [pc, #168]	; (8004b1c <stateController+0x2a0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <stateController+0x2ac>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <stateController+0x2ac>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	9100      	str	r1, [sp, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	4927      	ldr	r1, [pc, #156]	; (8004b2c <stateController+0x2b0>)
 8004a8e:	4828      	ldr	r0, [pc, #160]	; (8004b30 <stateController+0x2b4>)
 8004a90:	f007 fc74 	bl	800c37c <siprintf>
			ConsoleSendLine(msg);
 8004a94:	4826      	ldr	r0, [pc, #152]	; (8004b30 <stateController+0x2b4>)
 8004a96:	f7fc fdf3 	bl	8001680 <ConsoleSendLine>


			if (newDodecaDetected->id == currentDodeca->id) // If its the same face then exit
 8004a9a:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <stateController+0x2ac>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	781a      	ldrb	r2, [r3, #0]
 8004aa0:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <stateController+0x2a0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d109      	bne.n	8004abe <stateController+0x242>
			{
				currentState =  findState(currentState->done);
 8004aaa:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <stateController+0x28c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	7b1b      	ldrb	r3, [r3, #12]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fe4f 	bl	8004754 <findState>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <stateController+0x28c>)
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	e008      	b.n	8004ad0 <stateController+0x254>

			}
			else
			{
				currentState = findState(currentState->newFaceDetect);
 8004abe:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <stateController+0x28c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	7a1b      	ldrb	r3, [r3, #8]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fe45 	bl	8004754 <findState>
 8004aca:	4603      	mov	r3, r0
 8004acc:	4a0e      	ldr	r2, [pc, #56]	; (8004b08 <stateController+0x28c>)
 8004ace:	6013      	str	r3, [r2, #0]
			}
			breakState(STATE_CHECK_OREN);
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <stateController+0x290>)
 8004ad2:	2205      	movs	r2, #5
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	e110      	b.n	8004cfa <stateController+0x47e>

	case STATE_CHANGE_TASK: // Chnage Task only happens if there is a Valid new face
		displayState();
 8004ad8:	f7ff feb0 	bl	800483c <displayState>
		currentState = findState(currentState->done);
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <stateController+0x28c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	7b1b      	ldrb	r3, [r3, #12]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff fe36 	bl	8004754 <findState>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <stateController+0x28c>)
 8004aec:	6013      	str	r3, [r2, #0]

		// Deal with the Current Dodeca

		if (currentDodeca->state == DODECA_STATE_ACTIVE)
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <stateController+0x2a0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d11d      	bne.n	8004b34 <stateController+0x2b8>
		{
			dodecaStop(currentDodeca->id);
 8004af8:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <stateController+0x2a0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd fe0f 	bl	8002722 <dodecaStop>
 8004b04:	e054      	b.n	8004bb0 <stateController+0x334>
 8004b06:	bf00      	nop
 8004b08:	200007f8 	.word	0x200007f8
 8004b0c:	200007f5 	.word	0x200007f5
 8004b10:	20000801 	.word	0x20000801
 8004b14:	20000808 	.word	0x20000808
 8004b18:	200007f4 	.word	0x200007f4
 8004b1c:	20000804 	.word	0x20000804
 8004b20:	20000800 	.word	0x20000800
 8004b24:	080103a4 	.word	0x080103a4
 8004b28:	200007fc 	.word	0x200007fc
 8004b2c:	080103c0 	.word	0x080103c0
 8004b30:	2000080c 	.word	0x2000080c
		}
		else if (currentDodeca->state == DODECA_STATE_NOT_CONFIGURED)
 8004b34:	4b72      	ldr	r3, [pc, #456]	; (8004d00 <stateController+0x484>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10f      	bne.n	8004b5e <stateController+0x2e2>
		{
			ledSetFaceColour(currentDodeca->id, colourFindByid(COLOUR_BLACK_ID)->code, 0x0,LED_FACE_MODE_NORMAL);
 8004b3e:	4b70      	ldr	r3, [pc, #448]	; (8004d00 <stateController+0x484>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	781c      	ldrb	r4, [r3, #0]
 8004b44:	200c      	movs	r0, #12
 8004b46:	f7fd fcf5 	bl	8002534 <colourFindByid>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	6919      	ldr	r1, [r3, #16]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	2200      	movs	r2, #0
 8004b52:	4620      	mov	r0, r4
 8004b54:	f7fe fd2a 	bl	80035ac <ledSetFaceColour>
			ledRender();
 8004b58:	f7fe fd1f 	bl	800359a <ledRender>
 8004b5c:	e028      	b.n	8004bb0 <stateController+0x334>
		}
		else if (currentDodeca->state == DODECA_STATE_STOPPED)
 8004b5e:	4b68      	ldr	r3, [pc, #416]	; (8004d00 <stateController+0x484>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d10f      	bne.n	8004b88 <stateController+0x30c>
		{
			ledSetFaceColour(currentDodeca->id, colourFindByid(COLOUR_BLACK_ID)->code,0x0, LED_FACE_MODE_NORMAL);
 8004b68:	4b65      	ldr	r3, [pc, #404]	; (8004d00 <stateController+0x484>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	781c      	ldrb	r4, [r3, #0]
 8004b6e:	200c      	movs	r0, #12
 8004b70:	f7fd fce0 	bl	8002534 <colourFindByid>
 8004b74:	4603      	mov	r3, r0
 8004b76:	6919      	ldr	r1, [r3, #16]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f7fe fd15 	bl	80035ac <ledSetFaceColour>
			ledRender();
 8004b82:	f7fe fd0a 	bl	800359a <ledRender>
 8004b86:	e013      	b.n	8004bb0 <stateController+0x334>
		}
		else if (currentDodeca->state == DODECA_STATE_ERROR)
 8004b88:	4b5d      	ldr	r3, [pc, #372]	; (8004d00 <stateController+0x484>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10e      	bne.n	8004bb0 <stateController+0x334>
		{
			ledSetFaceColour(currentDodeca->id, colourFindByid(COLOUR_BLACK_ID)->code,0x0, LED_FACE_MODE_NORMAL);
 8004b92:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <stateController+0x484>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	781c      	ldrb	r4, [r3, #0]
 8004b98:	200c      	movs	r0, #12
 8004b9a:	f7fd fccb 	bl	8002534 <colourFindByid>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	6919      	ldr	r1, [r3, #16]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f7fe fd00 	bl	80035ac <ledSetFaceColour>
			ledRender();
 8004bac:	f7fe fcf5 	bl	800359a <ledRender>
		}
		// Change the current Dodeca for the new Dodeca
		currentDodeca = newDodecaDetected;
 8004bb0:	4b54      	ldr	r3, [pc, #336]	; (8004d04 <stateController+0x488>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a52      	ldr	r2, [pc, #328]	; (8004d00 <stateController+0x484>)
 8004bb6:	6013      	str	r3, [r2, #0]
		// Now deal with the new DoDeca

		if (currentDodeca->id == DODECA_STOP_FACE)
 8004bb8:	4b51      	ldr	r3, [pc, #324]	; (8004d00 <stateController+0x484>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b0b      	cmp	r3, #11
 8004bc0:	d112      	bne.n	8004be8 <stateController+0x36c>
		{
			ledSetFaceColour(currentDodeca->id, currentDodeca->colour, colourFindByid(COLOUR_BLACK_ID)->code, LED_FACE_MODE_HALF);
 8004bc2:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <stateController+0x484>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	781c      	ldrb	r4, [r3, #0]
 8004bc8:	4b4d      	ldr	r3, [pc, #308]	; (8004d00 <stateController+0x484>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699d      	ldr	r5, [r3, #24]
 8004bce:	200c      	movs	r0, #12
 8004bd0:	f7fd fcb0 	bl	8002534 <colourFindByid>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	2302      	movs	r3, #2
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f7fe fce5 	bl	80035ac <ledSetFaceColour>
			ledRender();
 8004be2:	f7fe fcda 	bl	800359a <ledRender>
 8004be6:	e02e      	b.n	8004c46 <stateController+0x3ca>
		}
		else if (currentDodeca->state == DODECA_STATE_STOPPED)
 8004be8:	4b45      	ldr	r3, [pc, #276]	; (8004d00 <stateController+0x484>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d106      	bne.n	8004c00 <stateController+0x384>
		{
			dodecaStart(currentDodeca->id);
 8004bf2:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <stateController+0x484>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fd fd77 	bl	80026ec <dodecaStart>
 8004bfe:	e022      	b.n	8004c46 <stateController+0x3ca>

		}
		else if (currentDodeca->state == DODECA_STATE_NOT_CONFIGURED)
 8004c00:	4b3f      	ldr	r3, [pc, #252]	; (8004d00 <stateController+0x484>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10c      	bne.n	8004c24 <stateController+0x3a8>
		{
			ledSetFaceColour(currentDodeca->id, currentDodeca->colour,0x0, LED_FACE_MODE_ERROR);
 8004c0a:	4b3d      	ldr	r3, [pc, #244]	; (8004d00 <stateController+0x484>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	7818      	ldrb	r0, [r3, #0]
 8004c10:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <stateController+0x484>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	2301      	movs	r3, #1
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f7fe fcc7 	bl	80035ac <ledSetFaceColour>
			ledRender();
 8004c1e:	f7fe fcbc 	bl	800359a <ledRender>
 8004c22:	e010      	b.n	8004c46 <stateController+0x3ca>
		}
		else if (currentDodeca->state == DODECA_STATE_ERROR)
 8004c24:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <stateController+0x484>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <stateController+0x3ca>
		{
			ledSetFaceColour(currentDodeca->id, currentDodeca->colour,0x0, LED_FACE_MODE_ERROR);
 8004c2e:	4b34      	ldr	r3, [pc, #208]	; (8004d00 <stateController+0x484>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	7818      	ldrb	r0, [r3, #0]
 8004c34:	4b32      	ldr	r3, [pc, #200]	; (8004d00 <stateController+0x484>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6999      	ldr	r1, [r3, #24]
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f7fe fcb5 	bl	80035ac <ledSetFaceColour>
			ledRender();
 8004c42:	f7fe fcaa 	bl	800359a <ledRender>
		}

		breakState(STATE_CHANGE_TASK);
 8004c46:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <stateController+0x48c>)
 8004c48:	2204      	movs	r2, #4
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e055      	b.n	8004cfa <stateController+0x47e>
	case STATE_ERROR:
			displayState();
 8004c4e:	f7ff fdf5 	bl	800483c <displayState>
			currentState = findState(currentState->done);
 8004c52:	4b2e      	ldr	r3, [pc, #184]	; (8004d0c <stateController+0x490>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	7b1b      	ldrb	r3, [r3, #12]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fd7b 	bl	8004754 <findState>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <stateController+0x490>)
 8004c62:	6013      	str	r3, [r2, #0]
			if (STATE_CONTROLLER_ERROR_FACE_DETECT_FAIL && errorFlags )
 8004c64:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <stateController+0x494>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d011      	beq.n	8004c90 <stateController+0x414>
			{
				errorFlags &= ~ STATE_CONTROLLER_ERROR_FACE_DETECT_FAIL; // Clear the error flag
 8004c6c:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <stateController+0x494>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <stateController+0x494>)
 8004c78:	701a      	strb	r2, [r3, #0]
				if (STATE_BEGIN == lastState)
 8004c7a:	4b23      	ldr	r3, [pc, #140]	; (8004d08 <stateController+0x48c>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d112      	bne.n	8004ca8 <stateController+0x42c>
				{
					currentState = findState(STATE_BEGIN);
 8004c82:	2008      	movs	r0, #8
 8004c84:	f7ff fd66 	bl	8004754 <findState>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <stateController+0x490>)
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e00b      	b.n	8004ca8 <stateController+0x42c>
				}
			}
			else
			{
				ledSetFaceColour(currentDodeca->id,currentDodeca->colour,0x0,LED_FACE_MODE_ERROR);
 8004c90:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <stateController+0x484>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	7818      	ldrb	r0, [r3, #0]
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <stateController+0x484>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6999      	ldr	r1, [r3, #24]
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f7fe fc84 	bl	80035ac <ledSetFaceColour>
				ledRender();
 8004ca4:	f7fe fc79 	bl	800359a <ledRender>
			}
			breakState(STATE_ERROR);
 8004ca8:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <stateController+0x48c>)
 8004caa:	2207      	movs	r2, #7
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e024      	b.n	8004cfa <stateController+0x47e>
	case STATE_BATTERY_TEST:

			displayState();
 8004cb0:	f7ff fdc4 	bl	800483c <displayState>
			breakState(STATE_ERROR);
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <stateController+0x48c>)
 8004cb6:	2207      	movs	r2, #7
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e01e      	b.n	8004cfa <stateController+0x47e>

	case STATE_SLEEP:
			displayState();
 8004cbc:	f7ff fdbe 	bl	800483c <displayState>
			currentState = findState(currentState->done);
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <stateController+0x490>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	7b1b      	ldrb	r3, [r3, #12]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fd44 	bl	8004754 <findState>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4a0f      	ldr	r2, [pc, #60]	; (8004d0c <stateController+0x490>)
 8004cd0:	6013      	str	r3, [r2, #0]
			// TODO : Goto Sleep
			if (STATE_CONT_MODE_CONFIG ==  stateControllerMode)
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <stateController+0x498>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d105      	bne.n	8004ce6 <stateController+0x46a>
			{
				currentState = findState(STATE_CONFIG);
 8004cda:	2001      	movs	r0, #1
 8004cdc:	f7ff fd3a 	bl	8004754 <findState>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <stateController+0x490>)
 8004ce4:	6013      	str	r3, [r2, #0]
			}
			breakState(STATE_SLEEP);
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <stateController+0x48c>)
 8004ce8:	2203      	movs	r2, #3
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	e005      	b.n	8004cfa <stateController+0x47e>
	case STATE_NULL:

		displayState();
 8004cee:	f7ff fda5 	bl	800483c <displayState>
		breakState(STATE_NULL);
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <stateController+0x48c>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	bf00      	nop
	}


}
 8004cfa:	bf00      	nop
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8004d00:	20000804 	.word	0x20000804
 8004d04:	200007fc 	.word	0x200007fc
 8004d08:	200007f5 	.word	0x200007f5
 8004d0c:	200007f8 	.word	0x200007f8
 8004d10:	200007f4 	.word	0x200007f4
 8004d14:	20000801 	.word	0x20000801

08004d18 <sysConfigInit>:
static uint16_t SYS_CONFIG_SIZE_DODEC;



void sysConfigInit()
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
	SYS_CONFIG_SIZE = sizeof(systemConfig.configItems)/4;
 8004d1c:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <sysConfigInit+0x24>)
 8004d1e:	2290      	movs	r2, #144	; 0x90
 8004d20:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_ALL_SIZE = sizeof(systemConfig)/4;
 8004d22:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <sysConfigInit+0x28>)
 8004d24:	2292      	movs	r2, #146	; 0x92
 8004d26:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_SIZE_DODEC = sizeof(systemConfig.configItems.dodecaConfig);
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <sysConfigInit+0x2c>)
 8004d2a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8004d2e:	801a      	strh	r2, [r3, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000aa0 	.word	0x20000aa0
 8004d40:	20000aa2 	.word	0x20000aa2
 8004d44:	20000aa4 	.word	0x20000aa4

08004d48 <systemConfigGet>:

systemConfig_t *systemConfigGet()
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
	return &systemConfig;
 8004d4c:	4b02      	ldr	r3, [pc, #8]	; (8004d58 <systemConfigGet+0x10>)
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	20000858 	.word	0x20000858

08004d5c <sysConfigValidateConfig>:

static eSYSConfig_t sysConfigValidateConfig()
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 8004d62:	f000 f813 	bl	8004d8c <sysConfigCalcChecksum>
 8004d66:	6078      	str	r0, [r7, #4]
	uint32_t crcRO = systemConfigRO->checksum;
 8004d68:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <sysConfigValidateConfig+0x2c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8004d70:	603b      	str	r3, [r7, #0]
	if (crc == crcRO)
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d101      	bne.n	8004d7e <sysConfigValidateConfig+0x22>
		return SYS_CONFIG_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <sysConfigValidateConfig+0x24>
	else
		return SYS_CONFIG_BAD_CHECKSUM;
 8004d7e:	2301      	movs	r3, #1
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	200002b8 	.word	0x200002b8

08004d8c <sysConfigCalcChecksum>:

uint32_t sysConfigCalcChecksum()
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
	uint32_t crc;
	crc =  HAL_CRC_Calculate(&hcrc,  (uint32_t*)&systemConfig.configItems, SYS_CONFIG_SIZE);
 8004d92:	4b06      	ldr	r3, [pc, #24]	; (8004dac <sysConfigCalcChecksum+0x20>)
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	4905      	ldr	r1, [pc, #20]	; (8004db0 <sysConfigCalcChecksum+0x24>)
 8004d9a:	4806      	ldr	r0, [pc, #24]	; (8004db4 <sysConfigCalcChecksum+0x28>)
 8004d9c:	f000 fcff 	bl	800579e <HAL_CRC_Calculate>
 8004da0:	6078      	str	r0, [r7, #4]
	return crc;
 8004da2:	687b      	ldr	r3, [r7, #4]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000aa0 	.word	0x20000aa0
 8004db0:	20000858 	.word	0x20000858
 8004db4:	200005e4 	.word	0x200005e4

08004db8 <sysConfigRead>:




eSYSConfig_t sysConfigRead()
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
	Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,SYS_CONFIG_ALL_SIZE );
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <sysConfigRead+0x28>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a08      	ldr	r2, [pc, #32]	; (8004de4 <sysConfigRead+0x2c>)
 8004dc2:	8812      	ldrh	r2, [r2, #0]
 8004dc4:	4908      	ldr	r1, [pc, #32]	; (8004de8 <sysConfigRead+0x30>)
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fd fdea 	bl	80029a0 <Flash_Read_Data>
	//Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,5 );
	if (SYS_CONFIG_BAD_CHECKSUM == sysConfigValidateConfig())
 8004dcc:	f7ff ffc6 	bl	8004d5c <sysConfigValidateConfig>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <sysConfigRead+0x22>
		return SYS_CONFIG_BAD_DATA;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e000      	b.n	8004ddc <sysConfigRead+0x24>
	else
		return SYS_CONFIG_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	08010eb8 	.word	0x08010eb8
 8004de4:	20000aa2 	.word	0x20000aa2
 8004de8:	20000858 	.word	0x20000858

08004dec <sysConfigSave>:

void sysConfigSave()
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 8004df2:	f7ff ffcb 	bl	8004d8c <sysConfigCalcChecksum>
 8004df6:	6078      	str	r0, [r7, #4]
	systemConfig.checksum = crc;
 8004df8:	4a07      	ldr	r2, [pc, #28]	; (8004e18 <sysConfigSave+0x2c>)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240

	Flash_Write_Data(SYSTEM_CONFIG_ADDRESS, (uint32_t *)&systemConfig, SYS_CONFIG_ALL_SIZE);
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <sysConfigSave+0x30>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a06      	ldr	r2, [pc, #24]	; (8004e20 <sysConfigSave+0x34>)
 8004e06:	8812      	ldrh	r2, [r2, #0]
 8004e08:	4903      	ldr	r1, [pc, #12]	; (8004e18 <sysConfigSave+0x2c>)
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fd fd6a 	bl	80028e4 <Flash_Write_Data>
	//TODO: Handle a Confug Save Error - Hard Fault!
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20000858 	.word	0x20000858
 8004e1c:	08010eb8 	.word	0x08010eb8
 8004e20:	20000aa2 	.word	0x20000aa2

08004e24 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	460a      	mov	r2, r1
 8004e2e:	71fb      	strb	r3, [r7, #7]
 8004e30:	4613      	mov	r3, r2
 8004e32:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	79ba      	ldrb	r2, [r7, #6]
 8004e38:	fb02 f303 	mul.w	r3, r2, r3
 8004e3c:	121b      	asrs	r3, r3, #8
 8004e3e:	b2db      	uxtb	r3, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	71fb      	strb	r3, [r7, #7]
 8004e5e:	4603      	mov	r3, r0
 8004e60:	71bb      	strb	r3, [r7, #6]
 8004e62:	460b      	mov	r3, r1
 8004e64:	717b      	strb	r3, [r7, #5]
 8004e66:	4613      	mov	r3, r2
 8004e68:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 8004e6a:	79bb      	ldrb	r3, [r7, #6]
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e74:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004f14 <led_set_RGB+0xc8>
 8004e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e80:	edc7 7a00 	vstr	s15, [r7]
 8004e84:	783b      	ldrb	r3, [r7, #0]
 8004e86:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 8004e88:	797b      	ldrb	r3, [r7, #5]
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e92:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004f14 <led_set_RGB+0xc8>
 8004e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e9e:	edc7 7a00 	vstr	s15, [r7]
 8004ea2:	783b      	ldrb	r3, [r7, #0]
 8004ea4:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 8004ea6:	793b      	ldrb	r3, [r7, #4]
 8004ea8:	ee07 3a90 	vmov	s15, r3
 8004eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004f14 <led_set_RGB+0xc8>
 8004eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ebc:	edc7 7a00 	vstr	s15, [r7]
 8004ec0:	783b      	ldrb	r3, [r7, #0]
 8004ec2:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8004ec4:	79fa      	ldrb	r2, [r7, #7]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	189c      	adds	r4, r3, r2
 8004ecc:	797b      	ldrb	r3, [r7, #5]
 8004ece:	21b0      	movs	r1, #176	; 0xb0
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff ffa7 	bl	8004e24 <scale8>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <led_set_RGB+0xcc>)
 8004edc:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8004ede:	79fa      	ldrb	r2, [r7, #7]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	490b      	ldr	r1, [pc, #44]	; (8004f18 <led_set_RGB+0xcc>)
 8004eea:	79ba      	ldrb	r2, [r7, #6]
 8004eec:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8004eee:	79fa      	ldrb	r2, [r7, #7]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	1c9c      	adds	r4, r3, #2
 8004ef8:	793b      	ldrb	r3, [r7, #4]
 8004efa:	21f0      	movs	r1, #240	; 0xf0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff ff91 	bl	8004e24 <scale8>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461a      	mov	r2, r3
 8004f06:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <led_set_RGB+0xcc>)
 8004f08:	551a      	strb	r2, [r3, r4]

}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd90      	pop	{r4, r7, pc}
 8004f12:	bf00      	nop
 8004f14:	3e99999a 	.word	0x3e99999a
 8004f18:	20000aa8 	.word	0x20000aa8

08004f1c <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 8004f22:	4b50      	ldr	r3, [pc, #320]	; (8005064 <led_render+0x148>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d105      	bne.n	8004f36 <led_render+0x1a>
 8004f2a:	4b4f      	ldr	r3, [pc, #316]	; (8005068 <led_render+0x14c>)
 8004f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d015      	beq.n	8004f62 <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	71fb      	strb	r3, [r7, #7]
 8004f3a:	e007      	b.n	8004f4c <led_render+0x30>
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	4a4b      	ldr	r2, [pc, #300]	; (800506c <led_render+0x150>)
 8004f40:	2100      	movs	r1, #0
 8004f42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	71fb      	strb	r3, [r7, #7]
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	2b2f      	cmp	r3, #47	; 0x2f
 8004f50:	d9f4      	bls.n	8004f3c <led_render+0x20>
    wr_buf_p = 0;
 8004f52:	4b44      	ldr	r3, [pc, #272]	; (8005064 <led_render+0x148>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4845      	ldr	r0, [pc, #276]	; (8005070 <led_render+0x154>)
 8004f5c:	f004 f8ca 	bl	80090f4 <HAL_TIM_PWM_Stop_DMA>
    return;
 8004f60:	e07c      	b.n	800505c <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8004f62:	2300      	movs	r3, #0
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	e06d      	b.n	8005044 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8004f68:	4b42      	ldr	r3, [pc, #264]	; (8005074 <led_render+0x158>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	dd01      	ble.n	8004f80 <led_render+0x64>
 8004f7c:	2150      	movs	r1, #80	; 0x50
 8004f7e:	e000      	b.n	8004f82 <led_render+0x66>
 8004f80:	2128      	movs	r1, #40	; 0x28
 8004f82:	4a3a      	ldr	r2, [pc, #232]	; (800506c <led_render+0x150>)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8004f8a:	4b3a      	ldr	r3, [pc, #232]	; (8005074 <led_render+0x158>)
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	dd01      	ble.n	8004fa2 <led_render+0x86>
 8004f9e:	2150      	movs	r1, #80	; 0x50
 8004fa0:	e000      	b.n	8004fa4 <led_render+0x88>
 8004fa2:	2128      	movs	r1, #40	; 0x28
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	4a30      	ldr	r2, [pc, #192]	; (800506c <led_render+0x150>)
 8004faa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8004fae:	4b31      	ldr	r3, [pc, #196]	; (8005074 <led_render+0x158>)
 8004fb0:	789b      	ldrb	r3, [r3, #2]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	dd01      	ble.n	8004fc6 <led_render+0xaa>
 8004fc2:	2150      	movs	r1, #80	; 0x50
 8004fc4:	e000      	b.n	8004fc8 <led_render+0xac>
 8004fc6:	2128      	movs	r1, #40	; 0x28
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	3310      	adds	r3, #16
 8004fcc:	4a27      	ldr	r2, [pc, #156]	; (800506c <led_render+0x150>)
 8004fce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8004fd2:	4b28      	ldr	r3, [pc, #160]	; (8005074 <led_render+0x158>)
 8004fd4:	78db      	ldrb	r3, [r3, #3]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	dd01      	ble.n	8004fea <led_render+0xce>
 8004fe6:	2150      	movs	r1, #80	; 0x50
 8004fe8:	e000      	b.n	8004fec <led_render+0xd0>
 8004fea:	2128      	movs	r1, #40	; 0x28
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	3318      	adds	r3, #24
 8004ff0:	4a1e      	ldr	r2, [pc, #120]	; (800506c <led_render+0x150>)
 8004ff2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8004ff6:	4b1f      	ldr	r3, [pc, #124]	; (8005074 <led_render+0x158>)
 8004ff8:	791b      	ldrb	r3, [r3, #4]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b00      	cmp	r3, #0
 8005008:	dd01      	ble.n	800500e <led_render+0xf2>
 800500a:	2150      	movs	r1, #80	; 0x50
 800500c:	e000      	b.n	8005010 <led_render+0xf4>
 800500e:	2128      	movs	r1, #40	; 0x28
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	3320      	adds	r3, #32
 8005014:	4a15      	ldr	r2, [pc, #84]	; (800506c <led_render+0x150>)
 8005016:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 800501a:	4b16      	ldr	r3, [pc, #88]	; (8005074 <led_render+0x158>)
 800501c:	795b      	ldrb	r3, [r3, #5]
 800501e:	461a      	mov	r2, r3
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b00      	cmp	r3, #0
 800502c:	dd01      	ble.n	8005032 <led_render+0x116>
 800502e:	2150      	movs	r1, #80	; 0x50
 8005030:	e000      	b.n	8005034 <led_render+0x118>
 8005032:	2128      	movs	r1, #40	; 0x28
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	3328      	adds	r3, #40	; 0x28
 8005038:	4a0c      	ldr	r2, [pc, #48]	; (800506c <led_render+0x150>)
 800503a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	3301      	adds	r3, #1
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b07      	cmp	r3, #7
 8005048:	d98e      	bls.n	8004f68 <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 800504a:	2330      	movs	r3, #48	; 0x30
 800504c:	4a07      	ldr	r2, [pc, #28]	; (800506c <led_render+0x150>)
 800504e:	2100      	movs	r1, #0
 8005050:	4807      	ldr	r0, [pc, #28]	; (8005070 <led_render+0x154>)
 8005052:	f003 fe9f 	bl	8008d94 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8005056:	4b03      	ldr	r3, [pc, #12]	; (8005064 <led_render+0x148>)
 8005058:	2202      	movs	r2, #2
 800505a:	601a      	str	r2, [r3, #0]
}
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000cb8 	.word	0x20000cb8
 8005068:	20000750 	.word	0x20000750
 800506c:	20000c58 	.word	0x20000c58
 8005070:	200006c0 	.word	0x200006c0
 8005074:	20000aa8 	.word	0x20000aa8

08005078 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8005080:	4b3a      	ldr	r3, [pc, #232]	; (800516c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b8f      	cmp	r3, #143	; 0x8f
 8005086:	d854      	bhi.n	8005132 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e048      	b.n	8005120 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800508e:	4b37      	ldr	r3, [pc, #220]	; (800516c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4413      	add	r3, r2
 8005098:	4a35      	ldr	r2, [pc, #212]	; (8005170 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800509a:	5cd3      	ldrb	r3, [r2, r3]
 800509c:	461a      	mov	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dd01      	ble.n	80050b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 80050ac:	2150      	movs	r1, #80	; 0x50
 80050ae:	e000      	b.n	80050b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 80050b0:	2128      	movs	r1, #40	; 0x28
 80050b2:	4a30      	ldr	r2, [pc, #192]	; (8005174 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80050ba:	4b2c      	ldr	r3, [pc, #176]	; (800516c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4613      	mov	r3, r2
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	4413      	add	r3, r2
 80050c4:	3301      	adds	r3, #1
 80050c6:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80050c8:	5cd3      	ldrb	r3, [r2, r3]
 80050ca:	461a      	mov	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	dd01      	ble.n	80050de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 80050da:	2150      	movs	r1, #80	; 0x50
 80050dc:	e000      	b.n	80050e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 80050de:	2128      	movs	r1, #40	; 0x28
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3308      	adds	r3, #8
 80050e4:	4a23      	ldr	r2, [pc, #140]	; (8005174 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80050e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4613      	mov	r3, r2
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4413      	add	r3, r2
 80050f4:	3302      	adds	r3, #2
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80050f8:	5cd3      	ldrb	r3, [r2, r3]
 80050fa:	461a      	mov	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b00      	cmp	r3, #0
 8005108:	dd01      	ble.n	800510e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 800510a:	2150      	movs	r1, #80	; 0x50
 800510c:	e000      	b.n	8005110 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800510e:	2128      	movs	r1, #40	; 0x28
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3310      	adds	r3, #16
 8005114:	4a17      	ldr	r2, [pc, #92]	; (8005174 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8005116:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3301      	adds	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b07      	cmp	r3, #7
 8005124:	d9b3      	bls.n	800508e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	4a0f      	ldr	r2, [pc, #60]	; (800516c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800512e:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8005130:	e016      	b.n	8005160 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8005132:	4b0e      	ldr	r3, [pc, #56]	; (800516c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b91      	cmp	r3, #145	; 0x91
 8005138:	d812      	bhi.n	8005160 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	72fb      	strb	r3, [r7, #11]
 800513e:	e007      	b.n	8005150 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 8005140:	7afb      	ldrb	r3, [r7, #11]
 8005142:	4a0c      	ldr	r2, [pc, #48]	; (8005174 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8005144:	2100      	movs	r1, #0
 8005146:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800514a:	7afb      	ldrb	r3, [r7, #11]
 800514c:	3301      	adds	r3, #1
 800514e:	72fb      	strb	r3, [r7, #11]
 8005150:	7afb      	ldrb	r3, [r7, #11]
 8005152:	2b17      	cmp	r3, #23
 8005154:	d9f4      	bls.n	8005140 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	4a03      	ldr	r2, [pc, #12]	; (800516c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800515e:	6013      	str	r3, [r2, #0]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	20000cb8 	.word	0x20000cb8
 8005170:	20000aa8 	.word	0x20000aa8
 8005174:	20000c58 	.word	0x20000c58

08005178 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8005180:	4b3e      	ldr	r3, [pc, #248]	; (800527c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b8f      	cmp	r3, #143	; 0x8f
 8005186:	d855      	bhi.n	8005234 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	e049      	b.n	8005222 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800518e:	4b3b      	ldr	r3, [pc, #236]	; (800527c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	4413      	add	r3, r2
 8005198:	4a39      	ldr	r2, [pc, #228]	; (8005280 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800519a:	5cd3      	ldrb	r3, [r2, r3]
 800519c:	461a      	mov	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	dd01      	ble.n	80051b0 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 80051ac:	2150      	movs	r1, #80	; 0x50
 80051ae:	e000      	b.n	80051b2 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 80051b0:	2128      	movs	r1, #40	; 0x28
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3318      	adds	r3, #24
 80051b6:	4a33      	ldr	r2, [pc, #204]	; (8005284 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80051b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80051bc:	4b2f      	ldr	r3, [pc, #188]	; (800527c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	3301      	adds	r3, #1
 80051c8:	4a2d      	ldr	r2, [pc, #180]	; (8005280 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80051ca:	5cd3      	ldrb	r3, [r2, r3]
 80051cc:	461a      	mov	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dd01      	ble.n	80051e0 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 80051dc:	2150      	movs	r1, #80	; 0x50
 80051de:	e000      	b.n	80051e2 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 80051e0:	2128      	movs	r1, #40	; 0x28
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3320      	adds	r3, #32
 80051e6:	4a27      	ldr	r2, [pc, #156]	; (8005284 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80051e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80051ec:	4b23      	ldr	r3, [pc, #140]	; (800527c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4413      	add	r3, r2
 80051f6:	3302      	adds	r3, #2
 80051f8:	4a21      	ldr	r2, [pc, #132]	; (8005280 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80051fa:	5cd3      	ldrb	r3, [r2, r3]
 80051fc:	461a      	mov	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	dd01      	ble.n	8005210 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 800520c:	2150      	movs	r1, #80	; 0x50
 800520e:	e000      	b.n	8005212 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8005210:	2128      	movs	r1, #40	; 0x28
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3328      	adds	r3, #40	; 0x28
 8005216:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8005218:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b07      	cmp	r3, #7
 8005226:	d9b2      	bls.n	800518e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3301      	adds	r3, #1
 800522e:	4a13      	ldr	r2, [pc, #76]	; (800527c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005230:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 8005232:	e01e      	b.n	8005272 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8005234:	4b11      	ldr	r3, [pc, #68]	; (800527c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b91      	cmp	r3, #145	; 0x91
 800523a:	d813      	bhi.n	8005264 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 800523c:	2318      	movs	r3, #24
 800523e:	72fb      	strb	r3, [r7, #11]
 8005240:	e007      	b.n	8005252 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 8005242:	7afb      	ldrb	r3, [r7, #11]
 8005244:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8005246:	2100      	movs	r1, #0
 8005248:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800524c:	7afb      	ldrb	r3, [r7, #11]
 800524e:	3301      	adds	r3, #1
 8005250:	72fb      	strb	r3, [r7, #11]
 8005252:	7afb      	ldrb	r3, [r7, #11]
 8005254:	2b2f      	cmp	r3, #47	; 0x2f
 8005256:	d9f4      	bls.n	8005242 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	4a07      	ldr	r2, [pc, #28]	; (800527c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005260:	6013      	str	r3, [r2, #0]
}
 8005262:	e006      	b.n	8005272 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800526a:	2100      	movs	r1, #0
 800526c:	4806      	ldr	r0, [pc, #24]	; (8005288 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 800526e:	f003 ff41 	bl	80090f4 <HAL_TIM_PWM_Stop_DMA>
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000cb8 	.word	0x20000cb8
 8005280:	20000aa8 	.word	0x20000aa8
 8005284:	20000c58 	.word	0x20000c58
 8005288:	200006c0 	.word	0x200006c0

0800528c <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
 8005296:	460b      	mov	r3, r1
 8005298:	71bb      	strb	r3, [r7, #6]
 800529a:	4613      	mov	r3, r2
 800529c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 800529e:	797b      	ldrb	r3, [r7, #5]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <hsl_to_rgb+0x1c>
 80052a4:	2300      	movs	r3, #0
 80052a6:	e0b1      	b.n	800540c <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 80052a8:	797b      	ldrb	r3, [r7, #5]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3301      	adds	r3, #1
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 80052b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	db09      	blt.n	80052ce <hsl_to_rgb+0x42>
 80052ba:	89bb      	ldrh	r3, [r7, #12]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	79ba      	ldrb	r2, [r7, #6]
 80052c2:	fb02 f303 	mul.w	r3, r2, r3
 80052c6:	121b      	asrs	r3, r3, #8
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	74fb      	strb	r3, [r7, #19]
 80052cc:	e00a      	b.n	80052e4 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80052ce:	89bb      	ldrh	r3, [r7, #12]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80052d8:	79ba      	ldrb	r2, [r7, #6]
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	121b      	asrs	r3, r3, #8
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	0052      	lsls	r2, r2, #1
 80052ec:	4413      	add	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80052f4:	897b      	ldrh	r3, [r7, #10]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80052fc:	7d3b      	ldrb	r3, [r7, #20]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	b29b      	uxth	r3, r3
 8005302:	3301      	adds	r3, #1
 8005304:	b29b      	uxth	r3, r3
 8005306:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8005308:	897b      	ldrh	r3, [r7, #10]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <hsl_to_rgb+0x9c>
 8005314:	89fb      	ldrh	r3, [r7, #14]
 8005316:	b29b      	uxth	r3, r3
 8005318:	7cfa      	ldrb	r2, [r7, #19]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	fb02 f303 	mul.w	r3, r2, r3
 8005320:	121b      	asrs	r3, r3, #8
 8005322:	b2db      	uxtb	r3, r3
 8005324:	74bb      	strb	r3, [r7, #18]
 8005326:	e00a      	b.n	800533e <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8005328:	89fb      	ldrh	r3, [r7, #14]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005330:	7cfa      	ldrb	r2, [r7, #19]
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	fb02 f303 	mul.w	r3, r2, r3
 8005338:	121b      	asrs	r3, r3, #8
 800533a:	b2db      	uxtb	r3, r3
 800533c:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800533e:	7cfb      	ldrb	r3, [r7, #19]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	b2db      	uxtb	r3, r3
 8005346:	797a      	ldrb	r2, [r7, #5]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800534e:	897b      	ldrh	r3, [r7, #10]
 8005350:	b29b      	uxth	r3, r3
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b04      	cmp	r3, #4
 8005358:	d839      	bhi.n	80053ce <hsl_to_rgb+0x142>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <hsl_to_rgb+0xd4>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005375 	.word	0x08005375
 8005364:	08005387 	.word	0x08005387
 8005368:	08005399 	.word	0x08005399
 800536c:	080053ab 	.word	0x080053ab
 8005370:	080053bd 	.word	0x080053bd
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	75fb      	strb	r3, [r7, #23]
 800537a:	7cbb      	ldrb	r3, [r7, #18]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	75bb      	strb	r3, [r7, #22]
 8005380:	2300      	movs	r3, #0
 8005382:	757b      	strb	r3, [r7, #21]
 8005384:	e02c      	b.n	80053e0 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8005386:	7cbb      	ldrb	r3, [r7, #18]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	75fb      	strb	r3, [r7, #23]
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	75bb      	strb	r3, [r7, #22]
 8005392:	2300      	movs	r3, #0
 8005394:	757b      	strb	r3, [r7, #21]
 8005396:	e023      	b.n	80053e0 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8005398:	2300      	movs	r3, #0
 800539a:	75fb      	strb	r3, [r7, #23]
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	75bb      	strb	r3, [r7, #22]
 80053a2:	7cbb      	ldrb	r3, [r7, #18]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	757b      	strb	r3, [r7, #21]
 80053a8:	e01a      	b.n	80053e0 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]
 80053ae:	7cbb      	ldrb	r3, [r7, #18]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	75bb      	strb	r3, [r7, #22]
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	757b      	strb	r3, [r7, #21]
 80053ba:	e011      	b.n	80053e0 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 80053bc:	7cbb      	ldrb	r3, [r7, #18]
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	75fb      	strb	r3, [r7, #23]
 80053c2:	2300      	movs	r3, #0
 80053c4:	75bb      	strb	r3, [r7, #22]
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	757b      	strb	r3, [r7, #21]
 80053cc:	e008      	b.n	80053e0 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80053ce:	7cfb      	ldrb	r3, [r7, #19]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	75fb      	strb	r3, [r7, #23]
 80053d4:	2300      	movs	r3, #0
 80053d6:	75bb      	strb	r3, [r7, #22]
 80053d8:	7cbb      	ldrb	r3, [r7, #18]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	757b      	strb	r3, [r7, #21]
 80053de:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	7c7b      	ldrb	r3, [r7, #17]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	4413      	add	r3, r2
 80053ec:	041a      	lsls	r2, r3, #16
 80053ee:	7dbb      	ldrb	r3, [r7, #22]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	4619      	mov	r1, r3
 80053f4:	7c7b      	ldrb	r3, [r7, #17]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	440b      	add	r3, r1
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	431a      	orrs	r2, r3
 80053fe:	7d7b      	ldrb	r3, [r7, #21]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	4619      	mov	r1, r3
 8005404:	7c7b      	ldrb	r3, [r7, #17]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	440b      	add	r3, r1
 800540a:	4313      	orrs	r3, r2
}
 800540c:	4618      	mov	r0, r3
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800541c:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <HAL_Init+0x40>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <HAL_Init+0x40>)
 8005422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_Init+0x40>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <HAL_Init+0x40>)
 800542e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005434:	4b08      	ldr	r3, [pc, #32]	; (8005458 <HAL_Init+0x40>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a07      	ldr	r2, [pc, #28]	; (8005458 <HAL_Init+0x40>)
 800543a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005440:	2003      	movs	r0, #3
 8005442:	f000 f94f 	bl	80056e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005446:	200f      	movs	r0, #15
 8005448:	f000 f808 	bl	800545c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800544c:	f7fe fdfc 	bl	8004048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40023c00 	.word	0x40023c00

0800545c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005464:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <HAL_InitTick+0x54>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <HAL_InitTick+0x58>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	4619      	mov	r1, r3
 800546e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005472:	fbb3 f3f1 	udiv	r3, r3, r1
 8005476:	fbb2 f3f3 	udiv	r3, r2, r3
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f967 	bl	800574e <HAL_SYSTICK_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e00e      	b.n	80054a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b0f      	cmp	r3, #15
 800548e:	d80a      	bhi.n	80054a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005490:	2200      	movs	r2, #0
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	f000 f92f 	bl	80056fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800549c:	4a06      	ldr	r2, [pc, #24]	; (80054b8 <HAL_InitTick+0x5c>)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e000      	b.n	80054a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000224 	.word	0x20000224
 80054b4:	200002c0 	.word	0x200002c0
 80054b8:	200002bc 	.word	0x200002bc

080054bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <HAL_IncTick+0x20>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <HAL_IncTick+0x24>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4413      	add	r3, r2
 80054cc:	4a04      	ldr	r2, [pc, #16]	; (80054e0 <HAL_IncTick+0x24>)
 80054ce:	6013      	str	r3, [r2, #0]
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	200002c0 	.word	0x200002c0
 80054e0:	20000cbc 	.word	0x20000cbc

080054e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return uwTick;
 80054e8:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <HAL_GetTick+0x14>)
 80054ea:	681b      	ldr	r3, [r3, #0]

}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000cbc 	.word	0x20000cbc

080054fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005504:	f7ff ffee 	bl	80054e4 <HAL_GetTick>
 8005508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d005      	beq.n	8005522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005516:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <HAL_Delay+0x44>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005522:	bf00      	nop
 8005524:	f7ff ffde 	bl	80054e4 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	429a      	cmp	r2, r3
 8005532:	d8f7      	bhi.n	8005524 <HAL_Delay+0x28>
  {
  }
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	200002c0 	.word	0x200002c0

08005544 <__NVIC_SetPriorityGrouping>:
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <__NVIC_SetPriorityGrouping+0x44>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005560:	4013      	ands	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800556c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005576:	4a04      	ldr	r2, [pc, #16]	; (8005588 <__NVIC_SetPriorityGrouping+0x44>)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	60d3      	str	r3, [r2, #12]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <__NVIC_GetPriorityGrouping>:
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005590:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	0a1b      	lsrs	r3, r3, #8
 8005596:	f003 0307 	and.w	r3, r3, #7
}
 800559a:	4618      	mov	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	e000ed00 	.word	0xe000ed00

080055a8 <__NVIC_EnableIRQ>:
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	db0b      	blt.n	80055d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	f003 021f 	and.w	r2, r3, #31
 80055c0:	4907      	ldr	r1, [pc, #28]	; (80055e0 <__NVIC_EnableIRQ+0x38>)
 80055c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	2001      	movs	r0, #1
 80055ca:	fa00 f202 	lsl.w	r2, r0, r2
 80055ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	e000e100 	.word	0xe000e100

080055e4 <__NVIC_SetPriority>:
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	6039      	str	r1, [r7, #0]
 80055ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	db0a      	blt.n	800560e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	490c      	ldr	r1, [pc, #48]	; (8005630 <__NVIC_SetPriority+0x4c>)
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	0112      	lsls	r2, r2, #4
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	440b      	add	r3, r1
 8005608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800560c:	e00a      	b.n	8005624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	4908      	ldr	r1, [pc, #32]	; (8005634 <__NVIC_SetPriority+0x50>)
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	3b04      	subs	r3, #4
 800561c:	0112      	lsls	r2, r2, #4
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	440b      	add	r3, r1
 8005622:	761a      	strb	r2, [r3, #24]
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	e000e100 	.word	0xe000e100
 8005634:	e000ed00 	.word	0xe000ed00

08005638 <NVIC_EncodePriority>:
{
 8005638:	b480      	push	{r7}
 800563a:	b089      	sub	sp, #36	; 0x24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f1c3 0307 	rsb	r3, r3, #7
 8005652:	2b04      	cmp	r3, #4
 8005654:	bf28      	it	cs
 8005656:	2304      	movcs	r3, #4
 8005658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3304      	adds	r3, #4
 800565e:	2b06      	cmp	r3, #6
 8005660:	d902      	bls.n	8005668 <NVIC_EncodePriority+0x30>
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	3b03      	subs	r3, #3
 8005666:	e000      	b.n	800566a <NVIC_EncodePriority+0x32>
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800566c:	f04f 32ff 	mov.w	r2, #4294967295
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43da      	mvns	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	401a      	ands	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005680:	f04f 31ff 	mov.w	r1, #4294967295
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	fa01 f303 	lsl.w	r3, r1, r3
 800568a:	43d9      	mvns	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005690:	4313      	orrs	r3, r2
}
 8005692:	4618      	mov	r0, r3
 8005694:	3724      	adds	r7, #36	; 0x24
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056b0:	d301      	bcc.n	80056b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056b2:	2301      	movs	r3, #1
 80056b4:	e00f      	b.n	80056d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056b6:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <SysTick_Config+0x40>)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056be:	210f      	movs	r1, #15
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	f7ff ff8e 	bl	80055e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <SysTick_Config+0x40>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056ce:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <SysTick_Config+0x40>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	e000e010 	.word	0xe000e010

080056e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff ff29 	bl	8005544 <__NVIC_SetPriorityGrouping>
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	4603      	mov	r3, r0
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800570c:	f7ff ff3e 	bl	800558c <__NVIC_GetPriorityGrouping>
 8005710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	6978      	ldr	r0, [r7, #20]
 8005718:	f7ff ff8e 	bl	8005638 <NVIC_EncodePriority>
 800571c:	4602      	mov	r2, r0
 800571e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005722:	4611      	mov	r1, r2
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff ff5d 	bl	80055e4 <__NVIC_SetPriority>
}
 800572a:	bf00      	nop
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	4603      	mov	r3, r0
 800573a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800573c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff ff31 	bl	80055a8 <__NVIC_EnableIRQ>
}
 8005746:	bf00      	nop
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff ffa2 	bl	80056a0 <SysTick_Config>
 800575c:	4603      	mov	r3, r0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e00e      	b.n	8005796 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	795b      	ldrb	r3, [r3, #5]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d105      	bne.n	800578e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7fe f8f5 	bl	8003978 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800579e:	b480      	push	{r7}
 80057a0:	b087      	sub	sp, #28
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2202      	movs	r2, #2
 80057b2:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	e00a      	b.n	80057e0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	3301      	adds	r3, #1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d3f0      	bcc.n	80057ca <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80057f6:	693b      	ldr	r3, [r7, #16]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005810:	f7ff fe68 	bl	80054e4 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e099      	b.n	8005954 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005840:	e00f      	b.n	8005862 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005842:	f7ff fe4f 	bl	80054e4 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b05      	cmp	r3, #5
 800584e:	d908      	bls.n	8005862 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2203      	movs	r2, #3
 800585a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e078      	b.n	8005954 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e8      	bne.n	8005842 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4b38      	ldr	r3, [pc, #224]	; (800595c <HAL_DMA_Init+0x158>)
 800587c:	4013      	ands	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800588e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d107      	bne.n	80058cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	4313      	orrs	r3, r2
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f023 0307 	bic.w	r3, r3, #7
 80058e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d117      	bne.n	8005926 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00e      	beq.n	8005926 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fb01 	bl	8005f10 <DMA_CheckFifoParam>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2240      	movs	r2, #64	; 0x40
 8005918:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005922:	2301      	movs	r3, #1
 8005924:	e016      	b.n	8005954 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fab8 	bl	8005ea4 <DMA_CalcBaseAndBitshift>
 8005934:	4603      	mov	r3, r0
 8005936:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593c:	223f      	movs	r2, #63	; 0x3f
 800593e:	409a      	lsls	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	f010803f 	.word	0xf010803f

08005960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_DMA_Start_IT+0x26>
 8005982:	2302      	movs	r3, #2
 8005984:	e040      	b.n	8005a08 <HAL_DMA_Start_IT+0xa8>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d12f      	bne.n	80059fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2202      	movs	r2, #2
 800599e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 fa4a 	bl	8005e48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b8:	223f      	movs	r2, #63	; 0x3f
 80059ba:	409a      	lsls	r2, r3
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0216 	orr.w	r2, r2, #22
 80059ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0208 	orr.w	r2, r2, #8
 80059e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e005      	b.n	8005a06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a02:	2302      	movs	r3, #2
 8005a04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a1e:	f7ff fd61 	bl	80054e4 <HAL_GetTick>
 8005a22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d008      	beq.n	8005a42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e052      	b.n	8005ae8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0216 	bic.w	r2, r2, #22
 8005a50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695a      	ldr	r2, [r3, #20]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <HAL_DMA_Abort+0x62>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0208 	bic.w	r2, r2, #8
 8005a80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a92:	e013      	b.n	8005abc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a94:	f7ff fd26 	bl	80054e4 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	d90c      	bls.n	8005abc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2203      	movs	r2, #3
 8005aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e015      	b.n	8005ae8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e4      	bne.n	8005a94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ace:	223f      	movs	r2, #63	; 0x3f
 8005ad0:	409a      	lsls	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d004      	beq.n	8005b0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2280      	movs	r2, #128	; 0x80
 8005b08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e00c      	b.n	8005b28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2205      	movs	r2, #5
 8005b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0201 	bic.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b40:	4b8e      	ldr	r3, [pc, #568]	; (8005d7c <HAL_DMA_IRQHandler+0x248>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a8e      	ldr	r2, [pc, #568]	; (8005d80 <HAL_DMA_IRQHandler+0x24c>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	0a9b      	lsrs	r3, r3, #10
 8005b4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5e:	2208      	movs	r2, #8
 8005b60:	409a      	lsls	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4013      	ands	r3, r2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01a      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d013      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0204 	bic.w	r2, r2, #4
 8005b86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	f043 0201 	orr.w	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	409a      	lsls	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d012      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00b      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	409a      	lsls	r2, r3
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	f043 0202 	orr.w	r2, r3, #2
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bda:	2204      	movs	r2, #4
 8005bdc:	409a      	lsls	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4013      	ands	r3, r2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d012      	beq.n	8005c0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00b      	beq.n	8005c0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	409a      	lsls	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c04:	f043 0204 	orr.w	r2, r3, #4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c10:	2210      	movs	r2, #16
 8005c12:	409a      	lsls	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4013      	ands	r3, r2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d043      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d03c      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2e:	2210      	movs	r2, #16
 8005c30:	409a      	lsls	r2, r3
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d018      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d108      	bne.n	8005c64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d024      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
 8005c62:	e01f      	b.n	8005ca4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01b      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
 8005c74:	e016      	b.n	8005ca4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d107      	bne.n	8005c94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0208 	bic.w	r2, r2, #8
 8005c92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca8:	2220      	movs	r2, #32
 8005caa:	409a      	lsls	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 808f 	beq.w	8005dd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8087 	beq.w	8005dd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	2220      	movs	r2, #32
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d136      	bne.n	8005d4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0216 	bic.w	r2, r2, #22
 8005cec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695a      	ldr	r2, [r3, #20]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <HAL_DMA_IRQHandler+0x1da>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0208 	bic.w	r2, r2, #8
 8005d1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d22:	223f      	movs	r2, #63	; 0x3f
 8005d24:	409a      	lsls	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d07e      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
        }
        return;
 8005d4a:	e079      	b.n	8005e40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01d      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10d      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d031      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
 8005d78:	e02c      	b.n	8005dd4 <HAL_DMA_IRQHandler+0x2a0>
 8005d7a:	bf00      	nop
 8005d7c:	20000224 	.word	0x20000224
 8005d80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d023      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
 8005d94:	e01e      	b.n	8005dd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10f      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0210 	bic.w	r2, r2, #16
 8005db2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d032      	beq.n	8005e42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d022      	beq.n	8005e2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2205      	movs	r2, #5
 8005dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d307      	bcc.n	8005e1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f2      	bne.n	8005e00 <HAL_DMA_IRQHandler+0x2cc>
 8005e1a:	e000      	b.n	8005e1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
 8005e3e:	e000      	b.n	8005e42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e40:	bf00      	nop
    }
  }
}
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d108      	bne.n	8005e88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e86:	e007      	b.n	8005e98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	60da      	str	r2, [r3, #12]
}
 8005e98:	bf00      	nop
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	3b10      	subs	r3, #16
 8005eb4:	4a14      	ldr	r2, [pc, #80]	; (8005f08 <DMA_CalcBaseAndBitshift+0x64>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	091b      	lsrs	r3, r3, #4
 8005ebc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ebe:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <DMA_CalcBaseAndBitshift+0x68>)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d909      	bls.n	8005ee6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	1d1a      	adds	r2, r3, #4
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	659a      	str	r2, [r3, #88]	; 0x58
 8005ee4:	e007      	b.n	8005ef6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	aaaaaaab 	.word	0xaaaaaaab
 8005f0c:	08010ebc 	.word	0x08010ebc

08005f10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d11f      	bne.n	8005f6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d856      	bhi.n	8005fde <DMA_CheckFifoParam+0xce>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <DMA_CheckFifoParam+0x28>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005f49 	.word	0x08005f49
 8005f3c:	08005f5b 	.word	0x08005f5b
 8005f40:	08005f49 	.word	0x08005f49
 8005f44:	08005fdf 	.word	0x08005fdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d046      	beq.n	8005fe2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f58:	e043      	b.n	8005fe2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f62:	d140      	bne.n	8005fe6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f68:	e03d      	b.n	8005fe6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f72:	d121      	bne.n	8005fb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d837      	bhi.n	8005fea <DMA_CheckFifoParam+0xda>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <DMA_CheckFifoParam+0x70>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005f91 	.word	0x08005f91
 8005f84:	08005f97 	.word	0x08005f97
 8005f88:	08005f91 	.word	0x08005f91
 8005f8c:	08005fa9 	.word	0x08005fa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
      break;
 8005f94:	e030      	b.n	8005ff8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d025      	beq.n	8005fee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa6:	e022      	b.n	8005fee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fb0:	d11f      	bne.n	8005ff2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fb6:	e01c      	b.n	8005ff2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d903      	bls.n	8005fc6 <DMA_CheckFifoParam+0xb6>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d003      	beq.n	8005fcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005fc4:	e018      	b.n	8005ff8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fca:	e015      	b.n	8005ff8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00e      	beq.n	8005ff6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
      break;
 8005fdc:	e00b      	b.n	8005ff6 <DMA_CheckFifoParam+0xe6>
      break;
 8005fde:	bf00      	nop
 8005fe0:	e00a      	b.n	8005ff8 <DMA_CheckFifoParam+0xe8>
      break;
 8005fe2:	bf00      	nop
 8005fe4:	e008      	b.n	8005ff8 <DMA_CheckFifoParam+0xe8>
      break;
 8005fe6:	bf00      	nop
 8005fe8:	e006      	b.n	8005ff8 <DMA_CheckFifoParam+0xe8>
      break;
 8005fea:	bf00      	nop
 8005fec:	e004      	b.n	8005ff8 <DMA_CheckFifoParam+0xe8>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ff6:	bf00      	nop
    }
  } 
  
  return status; 
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop

08006008 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800601a:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <HAL_FLASH_Program+0xa0>)
 800601c:	7e1b      	ldrb	r3, [r3, #24]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_FLASH_Program+0x1e>
 8006022:	2302      	movs	r3, #2
 8006024:	e03b      	b.n	800609e <HAL_FLASH_Program+0x96>
 8006026:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <HAL_FLASH_Program+0xa0>)
 8006028:	2201      	movs	r2, #1
 800602a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800602c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006030:	f000 f87c 	bl	800612c <FLASH_WaitForLastOperation>
 8006034:	4603      	mov	r3, r0
 8006036:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d12b      	bne.n	8006096 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006044:	783b      	ldrb	r3, [r7, #0]
 8006046:	4619      	mov	r1, r3
 8006048:	68b8      	ldr	r0, [r7, #8]
 800604a:	f000 f927 	bl	800629c <FLASH_Program_Byte>
 800604e:	e016      	b.n	800607e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d105      	bne.n	8006062 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006056:	883b      	ldrh	r3, [r7, #0]
 8006058:	4619      	mov	r1, r3
 800605a:	68b8      	ldr	r0, [r7, #8]
 800605c:	f000 f8fa 	bl	8006254 <FLASH_Program_HalfWord>
 8006060:	e00d      	b.n	800607e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d105      	bne.n	8006074 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	68b8      	ldr	r0, [r7, #8]
 800606e:	f000 f8cf 	bl	8006210 <FLASH_Program_Word>
 8006072:	e004      	b.n	800607e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006078:	68b8      	ldr	r0, [r7, #8]
 800607a:	f000 f897 	bl	80061ac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800607e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006082:	f000 f853 	bl	800612c <FLASH_WaitForLastOperation>
 8006086:	4603      	mov	r3, r0
 8006088:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800608a:	4b08      	ldr	r3, [pc, #32]	; (80060ac <HAL_FLASH_Program+0xa4>)
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	4a07      	ldr	r2, [pc, #28]	; (80060ac <HAL_FLASH_Program+0xa4>)
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006096:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <HAL_FLASH_Program+0xa0>)
 8006098:	2200      	movs	r2, #0
 800609a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000cc0 	.word	0x20000cc0
 80060ac:	40023c00 	.word	0x40023c00

080060b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80060ba:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_FLASH_Unlock+0x38>)
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	da0b      	bge.n	80060da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80060c2:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <HAL_FLASH_Unlock+0x38>)
 80060c4:	4a09      	ldr	r2, [pc, #36]	; (80060ec <HAL_FLASH_Unlock+0x3c>)
 80060c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80060c8:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <HAL_FLASH_Unlock+0x38>)
 80060ca:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <HAL_FLASH_Unlock+0x40>)
 80060cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80060ce:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <HAL_FLASH_Unlock+0x38>)
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da01      	bge.n	80060da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80060da:	79fb      	ldrb	r3, [r7, #7]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40023c00 	.word	0x40023c00
 80060ec:	45670123 	.word	0x45670123
 80060f0:	cdef89ab 	.word	0xcdef89ab

080060f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80060f8:	4b05      	ldr	r3, [pc, #20]	; (8006110 <HAL_FLASH_Lock+0x1c>)
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	4a04      	ldr	r2, [pc, #16]	; (8006110 <HAL_FLASH_Lock+0x1c>)
 80060fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006102:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40023c00 	.word	0x40023c00

08006114 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006118:	4b03      	ldr	r3, [pc, #12]	; (8006128 <HAL_FLASH_GetError+0x14>)
 800611a:	69db      	ldr	r3, [r3, #28]
}  
 800611c:	4618      	mov	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000cc0 	.word	0x20000cc0

0800612c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006138:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <FLASH_WaitForLastOperation+0x78>)
 800613a:	2200      	movs	r2, #0
 800613c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800613e:	f7ff f9d1 	bl	80054e4 <HAL_GetTick>
 8006142:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006144:	e010      	b.n	8006168 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d00c      	beq.n	8006168 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <FLASH_WaitForLastOperation+0x38>
 8006154:	f7ff f9c6 	bl	80054e4 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	429a      	cmp	r2, r3
 8006162:	d201      	bcs.n	8006168 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e019      	b.n	800619c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006168:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <FLASH_WaitForLastOperation+0x7c>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e8      	bne.n	8006146 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006174:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <FLASH_WaitForLastOperation+0x7c>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006180:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <FLASH_WaitForLastOperation+0x7c>)
 8006182:	2201      	movs	r2, #1
 8006184:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006186:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <FLASH_WaitForLastOperation+0x7c>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006192:	f000 f8a5 	bl	80062e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800619a:	2300      	movs	r3, #0
  
}  
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20000cc0 	.word	0x20000cc0
 80061a8:	40023c00 	.word	0x40023c00

080061ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061b8:	4b14      	ldr	r3, [pc, #80]	; (800620c <FLASH_Program_DoubleWord+0x60>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	4a13      	ldr	r2, [pc, #76]	; (800620c <FLASH_Program_DoubleWord+0x60>)
 80061be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80061c4:	4b11      	ldr	r3, [pc, #68]	; (800620c <FLASH_Program_DoubleWord+0x60>)
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	4a10      	ldr	r2, [pc, #64]	; (800620c <FLASH_Program_DoubleWord+0x60>)
 80061ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80061ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061d0:	4b0e      	ldr	r3, [pc, #56]	; (800620c <FLASH_Program_DoubleWord+0x60>)
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	4a0d      	ldr	r2, [pc, #52]	; (800620c <FLASH_Program_DoubleWord+0x60>)
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80061e2:	f3bf 8f6f 	isb	sy
}
 80061e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80061e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	000a      	movs	r2, r1
 80061f6:	2300      	movs	r3, #0
 80061f8:	68f9      	ldr	r1, [r7, #12]
 80061fa:	3104      	adds	r1, #4
 80061fc:	4613      	mov	r3, r2
 80061fe:	600b      	str	r3, [r1, #0]
}
 8006200:	bf00      	nop
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40023c00 	.word	0x40023c00

08006210 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800621a:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <FLASH_Program_Word+0x40>)
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	4a0c      	ldr	r2, [pc, #48]	; (8006250 <FLASH_Program_Word+0x40>)
 8006220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006224:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <FLASH_Program_Word+0x40>)
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	4a09      	ldr	r2, [pc, #36]	; (8006250 <FLASH_Program_Word+0x40>)
 800622c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006230:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006232:	4b07      	ldr	r3, [pc, #28]	; (8006250 <FLASH_Program_Word+0x40>)
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	4a06      	ldr	r2, [pc, #24]	; (8006250 <FLASH_Program_Word+0x40>)
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	601a      	str	r2, [r3, #0]
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40023c00 	.word	0x40023c00

08006254 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006260:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <FLASH_Program_HalfWord+0x44>)
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	4a0c      	ldr	r2, [pc, #48]	; (8006298 <FLASH_Program_HalfWord+0x44>)
 8006266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <FLASH_Program_HalfWord+0x44>)
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	4a09      	ldr	r2, [pc, #36]	; (8006298 <FLASH_Program_HalfWord+0x44>)
 8006272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <FLASH_Program_HalfWord+0x44>)
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	4a06      	ldr	r2, [pc, #24]	; (8006298 <FLASH_Program_HalfWord+0x44>)
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	887a      	ldrh	r2, [r7, #2]
 8006288:	801a      	strh	r2, [r3, #0]
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40023c00 	.word	0x40023c00

0800629c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <FLASH_Program_Byte+0x40>)
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	4a0b      	ldr	r2, [pc, #44]	; (80062dc <FLASH_Program_Byte+0x40>)
 80062ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <FLASH_Program_Byte+0x40>)
 80062b6:	4a09      	ldr	r2, [pc, #36]	; (80062dc <FLASH_Program_Byte+0x40>)
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80062bc:	4b07      	ldr	r3, [pc, #28]	; (80062dc <FLASH_Program_Byte+0x40>)
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	4a06      	ldr	r2, [pc, #24]	; (80062dc <FLASH_Program_Byte+0x40>)
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	701a      	strb	r2, [r3, #0]
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40023c00 	.word	0x40023c00

080062e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80062e4:	4b2f      	ldr	r3, [pc, #188]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80062f0:	4b2d      	ldr	r3, [pc, #180]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f043 0310 	orr.w	r3, r3, #16
 80062f8:	4a2b      	ldr	r2, [pc, #172]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 80062fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80062fc:	4b29      	ldr	r3, [pc, #164]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 80062fe:	2210      	movs	r2, #16
 8006300:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006302:	4b28      	ldr	r3, [pc, #160]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d008      	beq.n	8006320 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800630e:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f043 0308 	orr.w	r3, r3, #8
 8006316:	4a24      	ldr	r2, [pc, #144]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 8006318:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800631a:	4b22      	ldr	r3, [pc, #136]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 800631c:	2220      	movs	r2, #32
 800631e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006320:	4b20      	ldr	r3, [pc, #128]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800632c:	4b1e      	ldr	r3, [pc, #120]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f043 0304 	orr.w	r3, r3, #4
 8006334:	4a1c      	ldr	r2, [pc, #112]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 8006336:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006338:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 800633a:	2240      	movs	r2, #64	; 0x40
 800633c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800633e:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006346:	2b00      	cmp	r3, #0
 8006348:	d008      	beq.n	800635c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800634a:	4b17      	ldr	r3, [pc, #92]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f043 0302 	orr.w	r3, r3, #2
 8006352:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 8006354:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006356:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 8006358:	2280      	movs	r2, #128	; 0x80
 800635a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800635c:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006368:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	4a0d      	ldr	r2, [pc, #52]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 8006372:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 8006376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800637a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006388:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	f043 0320 	orr.w	r3, r3, #32
 8006390:	4a05      	ldr	r2, [pc, #20]	; (80063a8 <FLASH_SetErrorCode+0xc8>)
 8006392:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <FLASH_SetErrorCode+0xc4>)
 8006396:	2202      	movs	r2, #2
 8006398:	60da      	str	r2, [r3, #12]
  }
}
 800639a:	bf00      	nop
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40023c00 	.word	0x40023c00
 80063a8:	20000cc0 	.word	0x20000cc0

080063ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80063be:	4b31      	ldr	r3, [pc, #196]	; (8006484 <HAL_FLASHEx_Erase+0xd8>)
 80063c0:	7e1b      	ldrb	r3, [r3, #24]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_FLASHEx_Erase+0x1e>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e058      	b.n	800647c <HAL_FLASHEx_Erase+0xd0>
 80063ca:	4b2e      	ldr	r3, [pc, #184]	; (8006484 <HAL_FLASHEx_Erase+0xd8>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063d4:	f7ff feaa 	bl	800612c <FLASH_WaitForLastOperation>
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d148      	bne.n	8006474 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	f04f 32ff 	mov.w	r2, #4294967295
 80063e8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d115      	bne.n	800641e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f000 f844 	bl	800648c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006404:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006408:	f7ff fe90 	bl	800612c <FLASH_WaitForLastOperation>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006410:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <HAL_FLASHEx_Erase+0xdc>)
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <HAL_FLASHEx_Erase+0xdc>)
 8006416:	f023 0304 	bic.w	r3, r3, #4
 800641a:	6113      	str	r3, [r2, #16]
 800641c:	e028      	b.n	8006470 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	60bb      	str	r3, [r7, #8]
 8006424:	e01c      	b.n	8006460 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	4619      	mov	r1, r3
 800642e:	68b8      	ldr	r0, [r7, #8]
 8006430:	f000 f850 	bl	80064d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006434:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006438:	f7ff fe78 	bl	800612c <FLASH_WaitForLastOperation>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006440:	4b11      	ldr	r3, [pc, #68]	; (8006488 <HAL_FLASHEx_Erase+0xdc>)
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	4a10      	ldr	r2, [pc, #64]	; (8006488 <HAL_FLASHEx_Erase+0xdc>)
 8006446:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800644a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	601a      	str	r2, [r3, #0]
          break;
 8006458:	e00a      	b.n	8006470 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	3301      	adds	r3, #1
 800645e:	60bb      	str	r3, [r7, #8]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	4413      	add	r3, r2
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	429a      	cmp	r2, r3
 800646e:	d3da      	bcc.n	8006426 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006470:	f000 f878 	bl	8006564 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006474:	4b03      	ldr	r3, [pc, #12]	; (8006484 <HAL_FLASHEx_Erase+0xd8>)
 8006476:	2200      	movs	r2, #0
 8006478:	761a      	strb	r2, [r3, #24]

  return status;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000cc0 	.word	0x20000cc0
 8006488:	40023c00 	.word	0x40023c00

0800648c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	6039      	str	r1, [r7, #0]
 8006496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <FLASH_MassErase+0x44>)
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <FLASH_MassErase+0x44>)
 800649e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80064a4:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <FLASH_MassErase+0x44>)
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <FLASH_MassErase+0x44>)
 80064aa:	f043 0304 	orr.w	r3, r3, #4
 80064ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <FLASH_MassErase+0x44>)
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	4313      	orrs	r3, r2
 80064ba:	4a05      	ldr	r2, [pc, #20]	; (80064d0 <FLASH_MassErase+0x44>)
 80064bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c0:	6113      	str	r3, [r2, #16]
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40023c00 	.word	0x40023c00

080064d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e010      	b.n	8006512 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d103      	bne.n	80064fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80064f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e009      	b.n	8006512 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d103      	bne.n	800650c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e002      	b.n	8006512 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800650c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006510:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006512:	4b13      	ldr	r3, [pc, #76]	; (8006560 <FLASH_Erase_Sector+0x8c>)
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	4a12      	ldr	r2, [pc, #72]	; (8006560 <FLASH_Erase_Sector+0x8c>)
 8006518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <FLASH_Erase_Sector+0x8c>)
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	490f      	ldr	r1, [pc, #60]	; (8006560 <FLASH_Erase_Sector+0x8c>)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800652a:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <FLASH_Erase_Sector+0x8c>)
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <FLASH_Erase_Sector+0x8c>)
 8006530:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006534:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006536:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <FLASH_Erase_Sector+0x8c>)
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	4313      	orrs	r3, r2
 8006540:	4a07      	ldr	r2, [pc, #28]	; (8006560 <FLASH_Erase_Sector+0x8c>)
 8006542:	f043 0302 	orr.w	r3, r3, #2
 8006546:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006548:	4b05      	ldr	r3, [pc, #20]	; (8006560 <FLASH_Erase_Sector+0x8c>)
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	4a04      	ldr	r2, [pc, #16]	; (8006560 <FLASH_Erase_Sector+0x8c>)
 800654e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006552:	6113      	str	r3, [r2, #16]
}
 8006554:	bf00      	nop
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	40023c00 	.word	0x40023c00

08006564 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006568:	4b20      	ldr	r3, [pc, #128]	; (80065ec <FLASH_FlushCaches+0x88>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006570:	2b00      	cmp	r3, #0
 8006572:	d017      	beq.n	80065a4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006574:	4b1d      	ldr	r3, [pc, #116]	; (80065ec <FLASH_FlushCaches+0x88>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1c      	ldr	r2, [pc, #112]	; (80065ec <FLASH_FlushCaches+0x88>)
 800657a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800657e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006580:	4b1a      	ldr	r3, [pc, #104]	; (80065ec <FLASH_FlushCaches+0x88>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a19      	ldr	r2, [pc, #100]	; (80065ec <FLASH_FlushCaches+0x88>)
 8006586:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	4b17      	ldr	r3, [pc, #92]	; (80065ec <FLASH_FlushCaches+0x88>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a16      	ldr	r2, [pc, #88]	; (80065ec <FLASH_FlushCaches+0x88>)
 8006592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006596:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006598:	4b14      	ldr	r3, [pc, #80]	; (80065ec <FLASH_FlushCaches+0x88>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a13      	ldr	r2, [pc, #76]	; (80065ec <FLASH_FlushCaches+0x88>)
 800659e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80065a4:	4b11      	ldr	r3, [pc, #68]	; (80065ec <FLASH_FlushCaches+0x88>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d017      	beq.n	80065e0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80065b0:	4b0e      	ldr	r3, [pc, #56]	; (80065ec <FLASH_FlushCaches+0x88>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a0d      	ldr	r2, [pc, #52]	; (80065ec <FLASH_FlushCaches+0x88>)
 80065b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80065bc:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <FLASH_FlushCaches+0x88>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <FLASH_FlushCaches+0x88>)
 80065c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	4b08      	ldr	r3, [pc, #32]	; (80065ec <FLASH_FlushCaches+0x88>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a07      	ldr	r2, [pc, #28]	; (80065ec <FLASH_FlushCaches+0x88>)
 80065ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <FLASH_FlushCaches+0x88>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a04      	ldr	r2, [pc, #16]	; (80065ec <FLASH_FlushCaches+0x88>)
 80065da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065de:	6013      	str	r3, [r2, #0]
  }
}
 80065e0:	bf00      	nop
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40023c00 	.word	0x40023c00

080065f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b089      	sub	sp, #36	; 0x24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065fe:	2300      	movs	r3, #0
 8006600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006602:	2300      	movs	r3, #0
 8006604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	e159      	b.n	80068c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800660c:	2201      	movs	r2, #1
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4013      	ands	r3, r2
 800661e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	429a      	cmp	r2, r3
 8006626:	f040 8148 	bne.w	80068ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	2b01      	cmp	r3, #1
 8006634:	d005      	beq.n	8006642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800663e:	2b02      	cmp	r3, #2
 8006640:	d130      	bne.n	80066a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	2203      	movs	r2, #3
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	43db      	mvns	r3, r3
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	4013      	ands	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4313      	orrs	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006678:	2201      	movs	r2, #1
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	43db      	mvns	r3, r3
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	4013      	ands	r3, r2
 8006686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	091b      	lsrs	r3, r3, #4
 800668e:	f003 0201 	and.w	r2, r3, #1
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	4313      	orrs	r3, r2
 800669c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d017      	beq.n	80066e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	2203      	movs	r2, #3
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	4013      	ands	r3, r2
 80066c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d123      	bne.n	8006734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	08da      	lsrs	r2, r3, #3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3208      	adds	r2, #8
 80066f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	220f      	movs	r2, #15
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	43db      	mvns	r3, r3
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4013      	ands	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	4313      	orrs	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	08da      	lsrs	r2, r3, #3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3208      	adds	r2, #8
 800672e:	69b9      	ldr	r1, [r7, #24]
 8006730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	2203      	movs	r2, #3
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	43db      	mvns	r3, r3
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	4013      	ands	r3, r2
 800674a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f003 0203 	and.w	r2, r3, #3
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	4313      	orrs	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80a2 	beq.w	80068ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	4b57      	ldr	r3, [pc, #348]	; (80068d8 <HAL_GPIO_Init+0x2e8>)
 800677c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677e:	4a56      	ldr	r2, [pc, #344]	; (80068d8 <HAL_GPIO_Init+0x2e8>)
 8006780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006784:	6453      	str	r3, [r2, #68]	; 0x44
 8006786:	4b54      	ldr	r3, [pc, #336]	; (80068d8 <HAL_GPIO_Init+0x2e8>)
 8006788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006792:	4a52      	ldr	r2, [pc, #328]	; (80068dc <HAL_GPIO_Init+0x2ec>)
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	089b      	lsrs	r3, r3, #2
 8006798:	3302      	adds	r3, #2
 800679a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800679e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	220f      	movs	r2, #15
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a49      	ldr	r2, [pc, #292]	; (80068e0 <HAL_GPIO_Init+0x2f0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d019      	beq.n	80067f2 <HAL_GPIO_Init+0x202>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a48      	ldr	r2, [pc, #288]	; (80068e4 <HAL_GPIO_Init+0x2f4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d013      	beq.n	80067ee <HAL_GPIO_Init+0x1fe>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a47      	ldr	r2, [pc, #284]	; (80068e8 <HAL_GPIO_Init+0x2f8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00d      	beq.n	80067ea <HAL_GPIO_Init+0x1fa>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a46      	ldr	r2, [pc, #280]	; (80068ec <HAL_GPIO_Init+0x2fc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d007      	beq.n	80067e6 <HAL_GPIO_Init+0x1f6>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a45      	ldr	r2, [pc, #276]	; (80068f0 <HAL_GPIO_Init+0x300>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d101      	bne.n	80067e2 <HAL_GPIO_Init+0x1f2>
 80067de:	2304      	movs	r3, #4
 80067e0:	e008      	b.n	80067f4 <HAL_GPIO_Init+0x204>
 80067e2:	2307      	movs	r3, #7
 80067e4:	e006      	b.n	80067f4 <HAL_GPIO_Init+0x204>
 80067e6:	2303      	movs	r3, #3
 80067e8:	e004      	b.n	80067f4 <HAL_GPIO_Init+0x204>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e002      	b.n	80067f4 <HAL_GPIO_Init+0x204>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <HAL_GPIO_Init+0x204>
 80067f2:	2300      	movs	r3, #0
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	f002 0203 	and.w	r2, r2, #3
 80067fa:	0092      	lsls	r2, r2, #2
 80067fc:	4093      	lsls	r3, r2
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	4313      	orrs	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006804:	4935      	ldr	r1, [pc, #212]	; (80068dc <HAL_GPIO_Init+0x2ec>)
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	089b      	lsrs	r3, r3, #2
 800680a:	3302      	adds	r3, #2
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006812:	4b38      	ldr	r3, [pc, #224]	; (80068f4 <HAL_GPIO_Init+0x304>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006836:	4a2f      	ldr	r2, [pc, #188]	; (80068f4 <HAL_GPIO_Init+0x304>)
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800683c:	4b2d      	ldr	r3, [pc, #180]	; (80068f4 <HAL_GPIO_Init+0x304>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	43db      	mvns	r3, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006860:	4a24      	ldr	r2, [pc, #144]	; (80068f4 <HAL_GPIO_Init+0x304>)
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006866:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <HAL_GPIO_Init+0x304>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	43db      	mvns	r3, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4013      	ands	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800688a:	4a1a      	ldr	r2, [pc, #104]	; (80068f4 <HAL_GPIO_Init+0x304>)
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006890:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <HAL_GPIO_Init+0x304>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	43db      	mvns	r3, r3
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	4013      	ands	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068b4:	4a0f      	ldr	r2, [pc, #60]	; (80068f4 <HAL_GPIO_Init+0x304>)
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	3301      	adds	r3, #1
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	2b0f      	cmp	r3, #15
 80068c4:	f67f aea2 	bls.w	800660c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	3724      	adds	r7, #36	; 0x24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40013800 	.word	0x40013800
 80068e0:	40020000 	.word	0x40020000
 80068e4:	40020400 	.word	0x40020400
 80068e8:	40020800 	.word	0x40020800
 80068ec:	40020c00 	.word	0x40020c00
 80068f0:	40021000 	.word	0x40021000
 80068f4:	40013c00 	.word	0x40013c00

080068f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006902:	2300      	movs	r3, #0
 8006904:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	e0bb      	b.n	8006a8c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006914:	2201      	movs	r2, #1
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4013      	ands	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	429a      	cmp	r2, r3
 800692c:	f040 80ab 	bne.w	8006a86 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006930:	4a5c      	ldr	r2, [pc, #368]	; (8006aa4 <HAL_GPIO_DeInit+0x1ac>)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	089b      	lsrs	r3, r3, #2
 8006936:	3302      	adds	r3, #2
 8006938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800693c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f003 0303 	and.w	r3, r3, #3
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	220f      	movs	r2, #15
 8006948:	fa02 f303 	lsl.w	r3, r2, r3
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	4013      	ands	r3, r2
 8006950:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a54      	ldr	r2, [pc, #336]	; (8006aa8 <HAL_GPIO_DeInit+0x1b0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d019      	beq.n	800698e <HAL_GPIO_DeInit+0x96>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a53      	ldr	r2, [pc, #332]	; (8006aac <HAL_GPIO_DeInit+0x1b4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <HAL_GPIO_DeInit+0x92>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a52      	ldr	r2, [pc, #328]	; (8006ab0 <HAL_GPIO_DeInit+0x1b8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00d      	beq.n	8006986 <HAL_GPIO_DeInit+0x8e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a51      	ldr	r2, [pc, #324]	; (8006ab4 <HAL_GPIO_DeInit+0x1bc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <HAL_GPIO_DeInit+0x8a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a50      	ldr	r2, [pc, #320]	; (8006ab8 <HAL_GPIO_DeInit+0x1c0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d101      	bne.n	800697e <HAL_GPIO_DeInit+0x86>
 800697a:	2304      	movs	r3, #4
 800697c:	e008      	b.n	8006990 <HAL_GPIO_DeInit+0x98>
 800697e:	2307      	movs	r3, #7
 8006980:	e006      	b.n	8006990 <HAL_GPIO_DeInit+0x98>
 8006982:	2303      	movs	r3, #3
 8006984:	e004      	b.n	8006990 <HAL_GPIO_DeInit+0x98>
 8006986:	2302      	movs	r3, #2
 8006988:	e002      	b.n	8006990 <HAL_GPIO_DeInit+0x98>
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <HAL_GPIO_DeInit+0x98>
 800698e:	2300      	movs	r3, #0
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	f002 0203 	and.w	r2, r2, #3
 8006996:	0092      	lsls	r2, r2, #2
 8006998:	4093      	lsls	r3, r2
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	429a      	cmp	r2, r3
 800699e:	d132      	bne.n	8006a06 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80069a0:	4b46      	ldr	r3, [pc, #280]	; (8006abc <HAL_GPIO_DeInit+0x1c4>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	43db      	mvns	r3, r3
 80069a8:	4944      	ldr	r1, [pc, #272]	; (8006abc <HAL_GPIO_DeInit+0x1c4>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80069ae:	4b43      	ldr	r3, [pc, #268]	; (8006abc <HAL_GPIO_DeInit+0x1c4>)
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	43db      	mvns	r3, r3
 80069b6:	4941      	ldr	r1, [pc, #260]	; (8006abc <HAL_GPIO_DeInit+0x1c4>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80069bc:	4b3f      	ldr	r3, [pc, #252]	; (8006abc <HAL_GPIO_DeInit+0x1c4>)
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	43db      	mvns	r3, r3
 80069c4:	493d      	ldr	r1, [pc, #244]	; (8006abc <HAL_GPIO_DeInit+0x1c4>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80069ca:	4b3c      	ldr	r3, [pc, #240]	; (8006abc <HAL_GPIO_DeInit+0x1c4>)
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	43db      	mvns	r3, r3
 80069d2:	493a      	ldr	r1, [pc, #232]	; (8006abc <HAL_GPIO_DeInit+0x1c4>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	220f      	movs	r2, #15
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80069e8:	4a2e      	ldr	r2, [pc, #184]	; (8006aa4 <HAL_GPIO_DeInit+0x1ac>)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	089b      	lsrs	r3, r3, #2
 80069ee:	3302      	adds	r3, #2
 80069f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	43da      	mvns	r2, r3
 80069f8:	482a      	ldr	r0, [pc, #168]	; (8006aa4 <HAL_GPIO_DeInit+0x1ac>)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	089b      	lsrs	r3, r3, #2
 80069fe:	400a      	ands	r2, r1
 8006a00:	3302      	adds	r3, #2
 8006a02:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	2103      	movs	r1, #3
 8006a10:	fa01 f303 	lsl.w	r3, r1, r3
 8006a14:	43db      	mvns	r3, r3
 8006a16:	401a      	ands	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	08da      	lsrs	r2, r3, #3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3208      	adds	r2, #8
 8006a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	220f      	movs	r2, #15
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	43db      	mvns	r3, r3
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	08d2      	lsrs	r2, r2, #3
 8006a3c:	4019      	ands	r1, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3208      	adds	r2, #8
 8006a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	2103      	movs	r1, #3
 8006a50:	fa01 f303 	lsl.w	r3, r1, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	401a      	ands	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	2101      	movs	r1, #1
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	fa01 f303 	lsl.w	r3, r1, r3
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	2103      	movs	r1, #3
 8006a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7e:	43db      	mvns	r3, r3
 8006a80:	401a      	ands	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2b0f      	cmp	r3, #15
 8006a90:	f67f af40 	bls.w	8006914 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40013800 	.word	0x40013800
 8006aa8:	40020000 	.word	0x40020000
 8006aac:	40020400 	.word	0x40020400
 8006ab0:	40020800 	.word	0x40020800
 8006ab4:	40020c00 	.word	0x40020c00
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	40013c00 	.word	0x40013c00

08006ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	807b      	strh	r3, [r7, #2]
 8006acc:	4613      	mov	r3, r2
 8006ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ad0:	787b      	ldrb	r3, [r7, #1]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ad6:	887a      	ldrh	r2, [r7, #2]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006adc:	e003      	b.n	8006ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ade:	887b      	ldrh	r3, [r7, #2]
 8006ae0:	041a      	lsls	r2, r3, #16
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	619a      	str	r2, [r3, #24]
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
	...

08006af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006afe:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b00:	695a      	ldr	r2, [r3, #20]
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	4013      	ands	r3, r2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d006      	beq.n	8006b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b0a:	4a05      	ldr	r2, [pc, #20]	; (8006b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b0c:	88fb      	ldrh	r3, [r7, #6]
 8006b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fb ff65 	bl	80029e2 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40013c00 	.word	0x40013c00

08006b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e12b      	b.n	8006d8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fd f812 	bl	8003b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2224      	movs	r2, #36	; 0x24
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0201 	bic.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b88:	f001 fbbc 	bl	8008304 <HAL_RCC_GetPCLK1Freq>
 8006b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	4a81      	ldr	r2, [pc, #516]	; (8006d98 <HAL_I2C_Init+0x274>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d807      	bhi.n	8006ba8 <HAL_I2C_Init+0x84>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4a80      	ldr	r2, [pc, #512]	; (8006d9c <HAL_I2C_Init+0x278>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bf94      	ite	ls
 8006ba0:	2301      	movls	r3, #1
 8006ba2:	2300      	movhi	r3, #0
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	e006      	b.n	8006bb6 <HAL_I2C_Init+0x92>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4a7d      	ldr	r2, [pc, #500]	; (8006da0 <HAL_I2C_Init+0x27c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	bf94      	ite	ls
 8006bb0:	2301      	movls	r3, #1
 8006bb2:	2300      	movhi	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e0e7      	b.n	8006d8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4a78      	ldr	r2, [pc, #480]	; (8006da4 <HAL_I2C_Init+0x280>)
 8006bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc6:	0c9b      	lsrs	r3, r3, #18
 8006bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	4a6a      	ldr	r2, [pc, #424]	; (8006d98 <HAL_I2C_Init+0x274>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d802      	bhi.n	8006bf8 <HAL_I2C_Init+0xd4>
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	e009      	b.n	8006c0c <HAL_I2C_Init+0xe8>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006bfe:	fb02 f303 	mul.w	r3, r2, r3
 8006c02:	4a69      	ldr	r2, [pc, #420]	; (8006da8 <HAL_I2C_Init+0x284>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	099b      	lsrs	r3, r3, #6
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006c1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	495c      	ldr	r1, [pc, #368]	; (8006d98 <HAL_I2C_Init+0x274>)
 8006c28:	428b      	cmp	r3, r1
 8006c2a:	d819      	bhi.n	8006c60 <HAL_I2C_Init+0x13c>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	1e59      	subs	r1, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c3a:	1c59      	adds	r1, r3, #1
 8006c3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c40:	400b      	ands	r3, r1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <HAL_I2C_Init+0x138>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	1e59      	subs	r1, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c54:	3301      	adds	r3, #1
 8006c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c5a:	e051      	b.n	8006d00 <HAL_I2C_Init+0x1dc>
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	e04f      	b.n	8006d00 <HAL_I2C_Init+0x1dc>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d111      	bne.n	8006c8c <HAL_I2C_Init+0x168>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	1e58      	subs	r0, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6859      	ldr	r1, [r3, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	440b      	add	r3, r1
 8006c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bf0c      	ite	eq
 8006c84:	2301      	moveq	r3, #1
 8006c86:	2300      	movne	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	e012      	b.n	8006cb2 <HAL_I2C_Init+0x18e>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	1e58      	subs	r0, r3, #1
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6859      	ldr	r1, [r3, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	0099      	lsls	r1, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bf0c      	ite	eq
 8006cac:	2301      	moveq	r3, #1
 8006cae:	2300      	movne	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <HAL_I2C_Init+0x196>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e022      	b.n	8006d00 <HAL_I2C_Init+0x1dc>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_I2C_Init+0x1bc>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1e58      	subs	r0, r3, #1
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6859      	ldr	r1, [r3, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	440b      	add	r3, r1
 8006cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cde:	e00f      	b.n	8006d00 <HAL_I2C_Init+0x1dc>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	1e58      	subs	r0, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6859      	ldr	r1, [r3, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	0099      	lsls	r1, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	6809      	ldr	r1, [r1, #0]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69da      	ldr	r2, [r3, #28]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006d2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6911      	ldr	r1, [r2, #16]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68d2      	ldr	r2, [r2, #12]
 8006d3a:	4311      	orrs	r1, r2
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6812      	ldr	r2, [r2, #0]
 8006d40:	430b      	orrs	r3, r1
 8006d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695a      	ldr	r2, [r3, #20]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0201 	orr.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	000186a0 	.word	0x000186a0
 8006d9c:	001e847f 	.word	0x001e847f
 8006da0:	003d08ff 	.word	0x003d08ff
 8006da4:	431bde83 	.word	0x431bde83
 8006da8:	10624dd3 	.word	0x10624dd3

08006dac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	4608      	mov	r0, r1
 8006db6:	4611      	mov	r1, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	817b      	strh	r3, [r7, #10]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	813b      	strh	r3, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dc6:	f7fe fb8d 	bl	80054e4 <HAL_GetTick>
 8006dca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	f040 80d9 	bne.w	8006f8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	2319      	movs	r3, #25
 8006de0:	2201      	movs	r2, #1
 8006de2:	496d      	ldr	r1, [pc, #436]	; (8006f98 <HAL_I2C_Mem_Write+0x1ec>)
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fc7f 	bl	80076e8 <I2C_WaitOnFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006df0:	2302      	movs	r3, #2
 8006df2:	e0cc      	b.n	8006f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_I2C_Mem_Write+0x56>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e0c5      	b.n	8006f8e <HAL_I2C_Mem_Write+0x1e2>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d007      	beq.n	8006e28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2221      	movs	r2, #33	; 0x21
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2240      	movs	r2, #64	; 0x40
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a3a      	ldr	r2, [r7, #32]
 8006e52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4a4d      	ldr	r2, [pc, #308]	; (8006f9c <HAL_I2C_Mem_Write+0x1f0>)
 8006e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e6a:	88f8      	ldrh	r0, [r7, #6]
 8006e6c:	893a      	ldrh	r2, [r7, #8]
 8006e6e:	8979      	ldrh	r1, [r7, #10]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4603      	mov	r3, r0
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 fab6 	bl	80073ec <I2C_RequestMemoryWrite>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d052      	beq.n	8006f2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e081      	b.n	8006f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fd00 	bl	8007894 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00d      	beq.n	8006eb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d107      	bne.n	8006eb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e06b      	b.n	8006f8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d11b      	bne.n	8006f2c <HAL_I2C_Mem_Write+0x180>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d017      	beq.n	8006f2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	781a      	ldrb	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1aa      	bne.n	8006e8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 fcec 	bl	8007916 <I2C_WaitOnBTFFlagUntilTimeout>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00d      	beq.n	8006f60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d107      	bne.n	8006f5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e016      	b.n	8006f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e000      	b.n	8006f8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006f8c:	2302      	movs	r3, #2
  }
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	00100002 	.word	0x00100002
 8006f9c:	ffff0000 	.word	0xffff0000

08006fa0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08c      	sub	sp, #48	; 0x30
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	4603      	mov	r3, r0
 8006fb0:	817b      	strh	r3, [r7, #10]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	813b      	strh	r3, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fba:	f7fe fa93 	bl	80054e4 <HAL_GetTick>
 8006fbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	f040 8208 	bne.w	80073de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	2319      	movs	r3, #25
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	497b      	ldr	r1, [pc, #492]	; (80071c4 <HAL_I2C_Mem_Read+0x224>)
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fb85 	bl	80076e8 <I2C_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e1fb      	b.n	80073e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <HAL_I2C_Mem_Read+0x56>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e1f4      	b.n	80073e0 <HAL_I2C_Mem_Read+0x440>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b01      	cmp	r3, #1
 800700a:	d007      	beq.n	800701c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800702a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2222      	movs	r2, #34	; 0x22
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2240      	movs	r2, #64	; 0x40
 8007038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800704c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4a5b      	ldr	r2, [pc, #364]	; (80071c8 <HAL_I2C_Mem_Read+0x228>)
 800705c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800705e:	88f8      	ldrh	r0, [r7, #6]
 8007060:	893a      	ldrh	r2, [r7, #8]
 8007062:	8979      	ldrh	r1, [r7, #10]
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	4603      	mov	r3, r0
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fa52 	bl	8007518 <I2C_RequestMemoryRead>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e1b0      	b.n	80073e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007082:	2b00      	cmp	r3, #0
 8007084:	d113      	bne.n	80070ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007086:	2300      	movs	r3, #0
 8007088:	623b      	str	r3, [r7, #32]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	623b      	str	r3, [r7, #32]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	623b      	str	r3, [r7, #32]
 800709a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e184      	b.n	80073b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d11b      	bne.n	80070ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070c6:	2300      	movs	r3, #0
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	61fb      	str	r3, [r7, #28]
 80070da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	e164      	b.n	80073b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d11b      	bne.n	800712e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007104:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007114:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007116:	2300      	movs	r3, #0
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	61bb      	str	r3, [r7, #24]
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	e144      	b.n	80073b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007144:	e138      	b.n	80073b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714a:	2b03      	cmp	r3, #3
 800714c:	f200 80f1 	bhi.w	8007332 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007154:	2b01      	cmp	r3, #1
 8007156:	d123      	bne.n	80071a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 fc1b 	bl	8007998 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e139      	b.n	80073e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800719e:	e10b      	b.n	80073b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d14e      	bne.n	8007246 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	2200      	movs	r2, #0
 80071b0:	4906      	ldr	r1, [pc, #24]	; (80071cc <HAL_I2C_Mem_Read+0x22c>)
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fa98 	bl	80076e8 <I2C_WaitOnFlagUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e10e      	b.n	80073e0 <HAL_I2C_Mem_Read+0x440>
 80071c2:	bf00      	nop
 80071c4:	00100002 	.word	0x00100002
 80071c8:	ffff0000 	.word	0xffff0000
 80071cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691a      	ldr	r2, [r3, #16]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	b2d2      	uxtb	r2, r2
 800721e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800722e:	3b01      	subs	r3, #1
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007244:	e0b8      	b.n	80073b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	2200      	movs	r2, #0
 800724e:	4966      	ldr	r1, [pc, #408]	; (80073e8 <HAL_I2C_Mem_Read+0x448>)
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 fa49 	bl	80076e8 <I2C_WaitOnFlagUntilTimeout>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e0bf      	b.n	80073e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800726e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	691a      	ldr	r2, [r3, #16]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	2200      	movs	r2, #0
 80072aa:	494f      	ldr	r1, [pc, #316]	; (80073e8 <HAL_I2C_Mem_Read+0x448>)
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fa1b 	bl	80076e8 <I2C_WaitOnFlagUntilTimeout>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e091      	b.n	80073e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	3b01      	subs	r3, #1
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691a      	ldr	r2, [r3, #16]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731a:	3b01      	subs	r3, #1
 800731c:	b29a      	uxth	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007326:	b29b      	uxth	r3, r3
 8007328:	3b01      	subs	r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007330:	e042      	b.n	80073b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007334:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 fb2e 	bl	8007998 <I2C_WaitOnRXNEFlagUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e04c      	b.n	80073e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b04      	cmp	r3, #4
 8007384:	d118      	bne.n	80073b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	691a      	ldr	r2, [r3, #16]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	b2d2      	uxtb	r2, r2
 8007392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f47f aec2 	bne.w	8007146 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	e000      	b.n	80073e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80073de:	2302      	movs	r3, #2
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3728      	adds	r7, #40	; 0x28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	00010004 	.word	0x00010004

080073ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4603      	mov	r3, r0
 80073fc:	817b      	strh	r3, [r7, #10]
 80073fe:	460b      	mov	r3, r1
 8007400:	813b      	strh	r3, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	2200      	movs	r2, #0
 800741e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f960 	bl	80076e8 <I2C_WaitOnFlagUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00d      	beq.n	800744a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743c:	d103      	bne.n	8007446 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007444:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e05f      	b.n	800750a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800744a:	897b      	ldrh	r3, [r7, #10]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007458:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	6a3a      	ldr	r2, [r7, #32]
 800745e:	492d      	ldr	r1, [pc, #180]	; (8007514 <I2C_RequestMemoryWrite+0x128>)
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f998 	bl	8007796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e04c      	b.n	800750a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007488:	6a39      	ldr	r1, [r7, #32]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fa02 	bl	8007894 <I2C_WaitOnTXEFlagUntilTimeout>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00d      	beq.n	80074b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	2b04      	cmp	r3, #4
 800749c:	d107      	bne.n	80074ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e02b      	b.n	800750a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d105      	bne.n	80074c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074b8:	893b      	ldrh	r3, [r7, #8]
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	611a      	str	r2, [r3, #16]
 80074c2:	e021      	b.n	8007508 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074c4:	893b      	ldrh	r3, [r7, #8]
 80074c6:	0a1b      	lsrs	r3, r3, #8
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d4:	6a39      	ldr	r1, [r7, #32]
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 f9dc 	bl	8007894 <I2C_WaitOnTXEFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00d      	beq.n	80074fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d107      	bne.n	80074fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e005      	b.n	800750a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074fe:	893b      	ldrh	r3, [r7, #8]
 8007500:	b2da      	uxtb	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	00010002 	.word	0x00010002

08007518 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	4608      	mov	r0, r1
 8007522:	4611      	mov	r1, r2
 8007524:	461a      	mov	r2, r3
 8007526:	4603      	mov	r3, r0
 8007528:	817b      	strh	r3, [r7, #10]
 800752a:	460b      	mov	r3, r1
 800752c:	813b      	strh	r3, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007540:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	2200      	movs	r2, #0
 800755a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 f8c2 	bl	80076e8 <I2C_WaitOnFlagUntilTimeout>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00d      	beq.n	8007586 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007578:	d103      	bne.n	8007582 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007580:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e0aa      	b.n	80076dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007586:	897b      	ldrh	r3, [r7, #10]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	461a      	mov	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007594:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	6a3a      	ldr	r2, [r7, #32]
 800759a:	4952      	ldr	r1, [pc, #328]	; (80076e4 <I2C_RequestMemoryRead+0x1cc>)
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f8fa 	bl	8007796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e097      	b.n	80076dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c4:	6a39      	ldr	r1, [r7, #32]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f964 	bl	8007894 <I2C_WaitOnTXEFlagUntilTimeout>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00d      	beq.n	80075ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d107      	bne.n	80075ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e076      	b.n	80076dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d105      	bne.n	8007600 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075f4:	893b      	ldrh	r3, [r7, #8]
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	611a      	str	r2, [r3, #16]
 80075fe:	e021      	b.n	8007644 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007600:	893b      	ldrh	r3, [r7, #8]
 8007602:	0a1b      	lsrs	r3, r3, #8
 8007604:	b29b      	uxth	r3, r3
 8007606:	b2da      	uxtb	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800760e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007610:	6a39      	ldr	r1, [r7, #32]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f93e 	bl	8007894 <I2C_WaitOnTXEFlagUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00d      	beq.n	800763a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	2b04      	cmp	r3, #4
 8007624:	d107      	bne.n	8007636 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007634:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e050      	b.n	80076dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800763a:	893b      	ldrh	r3, [r7, #8]
 800763c:	b2da      	uxtb	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007646:	6a39      	ldr	r1, [r7, #32]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f923 	bl	8007894 <I2C_WaitOnTXEFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00d      	beq.n	8007670 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	2b04      	cmp	r3, #4
 800765a:	d107      	bne.n	800766c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800766a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e035      	b.n	80076dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800767e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	2200      	movs	r2, #0
 8007688:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f82b 	bl	80076e8 <I2C_WaitOnFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00d      	beq.n	80076b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a6:	d103      	bne.n	80076b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e013      	b.n	80076dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80076b4:	897b      	ldrh	r3, [r7, #10]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f043 0301 	orr.w	r3, r3, #1
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	6a3a      	ldr	r2, [r7, #32]
 80076c8:	4906      	ldr	r1, [pc, #24]	; (80076e4 <I2C_RequestMemoryRead+0x1cc>)
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f863 	bl	8007796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	00010002 	.word	0x00010002

080076e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	603b      	str	r3, [r7, #0]
 80076f4:	4613      	mov	r3, r2
 80076f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076f8:	e025      	b.n	8007746 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007700:	d021      	beq.n	8007746 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007702:	f7fd feef 	bl	80054e4 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d302      	bcc.n	8007718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d116      	bne.n	8007746 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2220      	movs	r2, #32
 8007722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	f043 0220 	orr.w	r2, r3, #32
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e023      	b.n	800778e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	0c1b      	lsrs	r3, r3, #16
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b01      	cmp	r3, #1
 800774e:	d10d      	bne.n	800776c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	43da      	mvns	r2, r3
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	4013      	ands	r3, r2
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf0c      	ite	eq
 8007762:	2301      	moveq	r3, #1
 8007764:	2300      	movne	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	461a      	mov	r2, r3
 800776a:	e00c      	b.n	8007786 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	43da      	mvns	r2, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4013      	ands	r3, r2
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	bf0c      	ite	eq
 800777e:	2301      	moveq	r3, #1
 8007780:	2300      	movne	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	461a      	mov	r2, r3
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	429a      	cmp	r2, r3
 800778a:	d0b6      	beq.n	80076fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
 80077a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80077a4:	e051      	b.n	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b4:	d123      	bne.n	80077fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2220      	movs	r2, #32
 80077da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	f043 0204 	orr.w	r2, r3, #4
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e046      	b.n	800788c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d021      	beq.n	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007806:	f7fd fe6d 	bl	80054e4 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d116      	bne.n	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2220      	movs	r2, #32
 8007826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f043 0220 	orr.w	r2, r3, #32
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e020      	b.n	800788c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	0c1b      	lsrs	r3, r3, #16
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b01      	cmp	r3, #1
 8007852:	d10c      	bne.n	800786e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	43da      	mvns	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4013      	ands	r3, r2
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	bf14      	ite	ne
 8007866:	2301      	movne	r3, #1
 8007868:	2300      	moveq	r3, #0
 800786a:	b2db      	uxtb	r3, r3
 800786c:	e00b      	b.n	8007886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	43da      	mvns	r2, r3
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4013      	ands	r3, r2
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	bf14      	ite	ne
 8007880:	2301      	movne	r3, #1
 8007882:	2300      	moveq	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d18d      	bne.n	80077a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078a0:	e02d      	b.n	80078fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 f8ce 	bl	8007a44 <I2C_IsAcknowledgeFailed>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e02d      	b.n	800790e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b8:	d021      	beq.n	80078fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ba:	f7fd fe13 	bl	80054e4 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d302      	bcc.n	80078d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d116      	bne.n	80078fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2220      	movs	r2, #32
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	f043 0220 	orr.w	r2, r3, #32
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e007      	b.n	800790e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007908:	2b80      	cmp	r3, #128	; 0x80
 800790a:	d1ca      	bne.n	80078a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007922:	e02d      	b.n	8007980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f88d 	bl	8007a44 <I2C_IsAcknowledgeFailed>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e02d      	b.n	8007990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d021      	beq.n	8007980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800793c:	f7fd fdd2 	bl	80054e4 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	429a      	cmp	r2, r3
 800794a:	d302      	bcc.n	8007952 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d116      	bne.n	8007980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	f043 0220 	orr.w	r2, r3, #32
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e007      	b.n	8007990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b04      	cmp	r3, #4
 800798c:	d1ca      	bne.n	8007924 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079a4:	e042      	b.n	8007a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	f003 0310 	and.w	r3, r3, #16
 80079b0:	2b10      	cmp	r3, #16
 80079b2:	d119      	bne.n	80079e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f06f 0210 	mvn.w	r2, #16
 80079bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e029      	b.n	8007a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e8:	f7fd fd7c 	bl	80054e4 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d302      	bcc.n	80079fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d116      	bne.n	8007a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a18:	f043 0220 	orr.w	r2, r3, #32
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e007      	b.n	8007a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a36:	2b40      	cmp	r3, #64	; 0x40
 8007a38:	d1b5      	bne.n	80079a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a5a:	d11b      	bne.n	8007a94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	f043 0204 	orr.w	r2, r3, #4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e000      	b.n	8007a96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e267      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d075      	beq.n	8007bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ac2:	4b88      	ldr	r3, [pc, #544]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 030c 	and.w	r3, r3, #12
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d00c      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ace:	4b85      	ldr	r3, [pc, #532]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d112      	bne.n	8007b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ada:	4b82      	ldr	r3, [pc, #520]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ae6:	d10b      	bne.n	8007b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ae8:	4b7e      	ldr	r3, [pc, #504]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d05b      	beq.n	8007bac <HAL_RCC_OscConfig+0x108>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d157      	bne.n	8007bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e242      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b08:	d106      	bne.n	8007b18 <HAL_RCC_OscConfig+0x74>
 8007b0a:	4b76      	ldr	r3, [pc, #472]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a75      	ldr	r2, [pc, #468]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	e01d      	b.n	8007b54 <HAL_RCC_OscConfig+0xb0>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b20:	d10c      	bne.n	8007b3c <HAL_RCC_OscConfig+0x98>
 8007b22:	4b70      	ldr	r3, [pc, #448]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a6f      	ldr	r2, [pc, #444]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	4b6d      	ldr	r3, [pc, #436]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a6c      	ldr	r2, [pc, #432]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e00b      	b.n	8007b54 <HAL_RCC_OscConfig+0xb0>
 8007b3c:	4b69      	ldr	r3, [pc, #420]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a68      	ldr	r2, [pc, #416]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	4b66      	ldr	r3, [pc, #408]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a65      	ldr	r2, [pc, #404]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d013      	beq.n	8007b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b5c:	f7fd fcc2 	bl	80054e4 <HAL_GetTick>
 8007b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b62:	e008      	b.n	8007b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b64:	f7fd fcbe 	bl	80054e4 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b64      	cmp	r3, #100	; 0x64
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e207      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b76:	4b5b      	ldr	r3, [pc, #364]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0f0      	beq.n	8007b64 <HAL_RCC_OscConfig+0xc0>
 8007b82:	e014      	b.n	8007bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b84:	f7fd fcae 	bl	80054e4 <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b8c:	f7fd fcaa 	bl	80054e4 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b64      	cmp	r3, #100	; 0x64
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e1f3      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b9e:	4b51      	ldr	r3, [pc, #324]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1f0      	bne.n	8007b8c <HAL_RCC_OscConfig+0xe8>
 8007baa:	e000      	b.n	8007bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d063      	beq.n	8007c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bba:	4b4a      	ldr	r3, [pc, #296]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 030c 	and.w	r3, r3, #12
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bc6:	4b47      	ldr	r3, [pc, #284]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bce:	2b08      	cmp	r3, #8
 8007bd0:	d11c      	bne.n	8007c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bd2:	4b44      	ldr	r3, [pc, #272]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d116      	bne.n	8007c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bde:	4b41      	ldr	r3, [pc, #260]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x152>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d001      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e1c7      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bf6:	4b3b      	ldr	r3, [pc, #236]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	4937      	ldr	r1, [pc, #220]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c0a:	e03a      	b.n	8007c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d020      	beq.n	8007c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c14:	4b34      	ldr	r3, [pc, #208]	; (8007ce8 <HAL_RCC_OscConfig+0x244>)
 8007c16:	2201      	movs	r2, #1
 8007c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1a:	f7fd fc63 	bl	80054e4 <HAL_GetTick>
 8007c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c20:	e008      	b.n	8007c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c22:	f7fd fc5f 	bl	80054e4 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d901      	bls.n	8007c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e1a8      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c34:	4b2b      	ldr	r3, [pc, #172]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0f0      	beq.n	8007c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c40:	4b28      	ldr	r3, [pc, #160]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	4925      	ldr	r1, [pc, #148]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	600b      	str	r3, [r1, #0]
 8007c54:	e015      	b.n	8007c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c56:	4b24      	ldr	r3, [pc, #144]	; (8007ce8 <HAL_RCC_OscConfig+0x244>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7fd fc42 	bl	80054e4 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c64:	f7fd fc3e 	bl	80054e4 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e187      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c76:	4b1b      	ldr	r3, [pc, #108]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f0      	bne.n	8007c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d036      	beq.n	8007cfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d016      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c96:	4b15      	ldr	r3, [pc, #84]	; (8007cec <HAL_RCC_OscConfig+0x248>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c9c:	f7fd fc22 	bl	80054e4 <HAL_GetTick>
 8007ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ca2:	e008      	b.n	8007cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ca4:	f7fd fc1e 	bl	80054e4 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e167      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <HAL_RCC_OscConfig+0x240>)
 8007cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0f0      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x200>
 8007cc2:	e01b      	b.n	8007cfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <HAL_RCC_OscConfig+0x248>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cca:	f7fd fc0b 	bl	80054e4 <HAL_GetTick>
 8007cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cd0:	e00e      	b.n	8007cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cd2:	f7fd fc07 	bl	80054e4 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d907      	bls.n	8007cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e150      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
 8007ce4:	40023800 	.word	0x40023800
 8007ce8:	42470000 	.word	0x42470000
 8007cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cf0:	4b88      	ldr	r3, [pc, #544]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1ea      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 8097 	beq.w	8007e38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d0e:	4b81      	ldr	r3, [pc, #516]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10f      	bne.n	8007d3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60bb      	str	r3, [r7, #8]
 8007d1e:	4b7d      	ldr	r3, [pc, #500]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	4a7c      	ldr	r2, [pc, #496]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d28:	6413      	str	r3, [r2, #64]	; 0x40
 8007d2a:	4b7a      	ldr	r3, [pc, #488]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d32:	60bb      	str	r3, [r7, #8]
 8007d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d36:	2301      	movs	r3, #1
 8007d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d3a:	4b77      	ldr	r3, [pc, #476]	; (8007f18 <HAL_RCC_OscConfig+0x474>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d118      	bne.n	8007d78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d46:	4b74      	ldr	r3, [pc, #464]	; (8007f18 <HAL_RCC_OscConfig+0x474>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a73      	ldr	r2, [pc, #460]	; (8007f18 <HAL_RCC_OscConfig+0x474>)
 8007d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d52:	f7fd fbc7 	bl	80054e4 <HAL_GetTick>
 8007d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d58:	e008      	b.n	8007d6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d5a:	f7fd fbc3 	bl	80054e4 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d901      	bls.n	8007d6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e10c      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d6c:	4b6a      	ldr	r3, [pc, #424]	; (8007f18 <HAL_RCC_OscConfig+0x474>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0f0      	beq.n	8007d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d106      	bne.n	8007d8e <HAL_RCC_OscConfig+0x2ea>
 8007d80:	4b64      	ldr	r3, [pc, #400]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d84:	4a63      	ldr	r2, [pc, #396]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d8c:	e01c      	b.n	8007dc8 <HAL_RCC_OscConfig+0x324>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	d10c      	bne.n	8007db0 <HAL_RCC_OscConfig+0x30c>
 8007d96:	4b5f      	ldr	r3, [pc, #380]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9a:	4a5e      	ldr	r2, [pc, #376]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007d9c:	f043 0304 	orr.w	r3, r3, #4
 8007da0:	6713      	str	r3, [r2, #112]	; 0x70
 8007da2:	4b5c      	ldr	r3, [pc, #368]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da6:	4a5b      	ldr	r2, [pc, #364]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007da8:	f043 0301 	orr.w	r3, r3, #1
 8007dac:	6713      	str	r3, [r2, #112]	; 0x70
 8007dae:	e00b      	b.n	8007dc8 <HAL_RCC_OscConfig+0x324>
 8007db0:	4b58      	ldr	r3, [pc, #352]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db4:	4a57      	ldr	r2, [pc, #348]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	6713      	str	r3, [r2, #112]	; 0x70
 8007dbc:	4b55      	ldr	r3, [pc, #340]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc0:	4a54      	ldr	r2, [pc, #336]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007dc2:	f023 0304 	bic.w	r3, r3, #4
 8007dc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d015      	beq.n	8007dfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd0:	f7fd fb88 	bl	80054e4 <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dd6:	e00a      	b.n	8007dee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dd8:	f7fd fb84 	bl	80054e4 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d901      	bls.n	8007dee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e0cb      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dee:	4b49      	ldr	r3, [pc, #292]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d0ee      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x334>
 8007dfa:	e014      	b.n	8007e26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dfc:	f7fd fb72 	bl	80054e4 <HAL_GetTick>
 8007e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e02:	e00a      	b.n	8007e1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e04:	f7fd fb6e 	bl	80054e4 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d901      	bls.n	8007e1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e0b5      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e1a:	4b3e      	ldr	r3, [pc, #248]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1ee      	bne.n	8007e04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d105      	bne.n	8007e38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e2c:	4b39      	ldr	r3, [pc, #228]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e30:	4a38      	ldr	r2, [pc, #224]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 80a1 	beq.w	8007f84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e42:	4b34      	ldr	r3, [pc, #208]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 030c 	and.w	r3, r3, #12
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d05c      	beq.n	8007f08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d141      	bne.n	8007eda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e56:	4b31      	ldr	r3, [pc, #196]	; (8007f1c <HAL_RCC_OscConfig+0x478>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e5c:	f7fd fb42 	bl	80054e4 <HAL_GetTick>
 8007e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e64:	f7fd fb3e 	bl	80054e4 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e087      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e76:	4b27      	ldr	r3, [pc, #156]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f0      	bne.n	8007e64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	69da      	ldr	r2, [r3, #28]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	019b      	lsls	r3, r3, #6
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	085b      	lsrs	r3, r3, #1
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	041b      	lsls	r3, r3, #16
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	061b      	lsls	r3, r3, #24
 8007ea6:	491b      	ldr	r1, [pc, #108]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007eac:	4b1b      	ldr	r3, [pc, #108]	; (8007f1c <HAL_RCC_OscConfig+0x478>)
 8007eae:	2201      	movs	r2, #1
 8007eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eb2:	f7fd fb17 	bl	80054e4 <HAL_GetTick>
 8007eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eb8:	e008      	b.n	8007ecc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007eba:	f7fd fb13 	bl	80054e4 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d901      	bls.n	8007ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e05c      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ecc:	4b11      	ldr	r3, [pc, #68]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0f0      	beq.n	8007eba <HAL_RCC_OscConfig+0x416>
 8007ed8:	e054      	b.n	8007f84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eda:	4b10      	ldr	r3, [pc, #64]	; (8007f1c <HAL_RCC_OscConfig+0x478>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ee0:	f7fd fb00 	bl	80054e4 <HAL_GetTick>
 8007ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ee8:	f7fd fafc 	bl	80054e4 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e045      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <HAL_RCC_OscConfig+0x470>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f0      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x444>
 8007f06:	e03d      	b.n	8007f84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d107      	bne.n	8007f20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e038      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
 8007f14:	40023800 	.word	0x40023800
 8007f18:	40007000 	.word	0x40007000
 8007f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f20:	4b1b      	ldr	r3, [pc, #108]	; (8007f90 <HAL_RCC_OscConfig+0x4ec>)
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d028      	beq.n	8007f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d121      	bne.n	8007f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d11a      	bne.n	8007f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f50:	4013      	ands	r3, r2
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d111      	bne.n	8007f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d107      	bne.n	8007f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d001      	beq.n	8007f84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e000      	b.n	8007f86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40023800 	.word	0x40023800

08007f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e0cc      	b.n	8008142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fa8:	4b68      	ldr	r3, [pc, #416]	; (800814c <HAL_RCC_ClockConfig+0x1b8>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d90c      	bls.n	8007fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fb6:	4b65      	ldr	r3, [pc, #404]	; (800814c <HAL_RCC_ClockConfig+0x1b8>)
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	b2d2      	uxtb	r2, r2
 8007fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fbe:	4b63      	ldr	r3, [pc, #396]	; (800814c <HAL_RCC_ClockConfig+0x1b8>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d001      	beq.n	8007fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0b8      	b.n	8008142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d020      	beq.n	800801e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fe8:	4b59      	ldr	r3, [pc, #356]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4a58      	ldr	r2, [pc, #352]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8007fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0308 	and.w	r3, r3, #8
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008000:	4b53      	ldr	r3, [pc, #332]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	4a52      	ldr	r2, [pc, #328]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8008006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800800a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800800c:	4b50      	ldr	r3, [pc, #320]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	494d      	ldr	r1, [pc, #308]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 800801a:	4313      	orrs	r3, r2
 800801c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d044      	beq.n	80080b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d107      	bne.n	8008042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008032:	4b47      	ldr	r3, [pc, #284]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d119      	bne.n	8008072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e07f      	b.n	8008142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	2b02      	cmp	r3, #2
 8008048:	d003      	beq.n	8008052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800804e:	2b03      	cmp	r3, #3
 8008050:	d107      	bne.n	8008062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008052:	4b3f      	ldr	r3, [pc, #252]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e06f      	b.n	8008142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008062:	4b3b      	ldr	r3, [pc, #236]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e067      	b.n	8008142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008072:	4b37      	ldr	r3, [pc, #220]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f023 0203 	bic.w	r2, r3, #3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	4934      	ldr	r1, [pc, #208]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8008080:	4313      	orrs	r3, r2
 8008082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008084:	f7fd fa2e 	bl	80054e4 <HAL_GetTick>
 8008088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800808a:	e00a      	b.n	80080a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800808c:	f7fd fa2a 	bl	80054e4 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	f241 3288 	movw	r2, #5000	; 0x1388
 800809a:	4293      	cmp	r3, r2
 800809c:	d901      	bls.n	80080a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e04f      	b.n	8008142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a2:	4b2b      	ldr	r3, [pc, #172]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 020c 	and.w	r2, r3, #12
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d1eb      	bne.n	800808c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080b4:	4b25      	ldr	r3, [pc, #148]	; (800814c <HAL_RCC_ClockConfig+0x1b8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0307 	and.w	r3, r3, #7
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d20c      	bcs.n	80080dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080c2:	4b22      	ldr	r3, [pc, #136]	; (800814c <HAL_RCC_ClockConfig+0x1b8>)
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	b2d2      	uxtb	r2, r2
 80080c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ca:	4b20      	ldr	r3, [pc, #128]	; (800814c <HAL_RCC_ClockConfig+0x1b8>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d001      	beq.n	80080dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e032      	b.n	8008142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d008      	beq.n	80080fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080e8:	4b19      	ldr	r3, [pc, #100]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	4916      	ldr	r1, [pc, #88]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008106:	4b12      	ldr	r3, [pc, #72]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	490e      	ldr	r1, [pc, #56]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8008116:	4313      	orrs	r3, r2
 8008118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800811a:	f000 f821 	bl	8008160 <HAL_RCC_GetSysClockFreq>
 800811e:	4602      	mov	r2, r0
 8008120:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <HAL_RCC_ClockConfig+0x1bc>)
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	091b      	lsrs	r3, r3, #4
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	490a      	ldr	r1, [pc, #40]	; (8008154 <HAL_RCC_ClockConfig+0x1c0>)
 800812c:	5ccb      	ldrb	r3, [r1, r3]
 800812e:	fa22 f303 	lsr.w	r3, r2, r3
 8008132:	4a09      	ldr	r2, [pc, #36]	; (8008158 <HAL_RCC_ClockConfig+0x1c4>)
 8008134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008136:	4b09      	ldr	r3, [pc, #36]	; (800815c <HAL_RCC_ClockConfig+0x1c8>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4618      	mov	r0, r3
 800813c:	f7fd f98e 	bl	800545c <HAL_InitTick>

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	40023c00 	.word	0x40023c00
 8008150:	40023800 	.word	0x40023800
 8008154:	08010ea0 	.word	0x08010ea0
 8008158:	20000224 	.word	0x20000224
 800815c:	200002bc 	.word	0x200002bc

08008160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008164:	b090      	sub	sp, #64	; 0x40
 8008166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	637b      	str	r3, [r7, #52]	; 0x34
 800816c:	2300      	movs	r3, #0
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008170:	2300      	movs	r3, #0
 8008172:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008178:	4b59      	ldr	r3, [pc, #356]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f003 030c 	and.w	r3, r3, #12
 8008180:	2b08      	cmp	r3, #8
 8008182:	d00d      	beq.n	80081a0 <HAL_RCC_GetSysClockFreq+0x40>
 8008184:	2b08      	cmp	r3, #8
 8008186:	f200 80a1 	bhi.w	80082cc <HAL_RCC_GetSysClockFreq+0x16c>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <HAL_RCC_GetSysClockFreq+0x34>
 800818e:	2b04      	cmp	r3, #4
 8008190:	d003      	beq.n	800819a <HAL_RCC_GetSysClockFreq+0x3a>
 8008192:	e09b      	b.n	80082cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008194:	4b53      	ldr	r3, [pc, #332]	; (80082e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008196:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008198:	e09b      	b.n	80082d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800819a:	4b53      	ldr	r3, [pc, #332]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800819c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800819e:	e098      	b.n	80082d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081a0:	4b4f      	ldr	r3, [pc, #316]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081aa:	4b4d      	ldr	r3, [pc, #308]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d028      	beq.n	8008208 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081b6:	4b4a      	ldr	r3, [pc, #296]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	099b      	lsrs	r3, r3, #6
 80081bc:	2200      	movs	r2, #0
 80081be:	623b      	str	r3, [r7, #32]
 80081c0:	627a      	str	r2, [r7, #36]	; 0x24
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80081c8:	2100      	movs	r1, #0
 80081ca:	4b47      	ldr	r3, [pc, #284]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80081cc:	fb03 f201 	mul.w	r2, r3, r1
 80081d0:	2300      	movs	r3, #0
 80081d2:	fb00 f303 	mul.w	r3, r0, r3
 80081d6:	4413      	add	r3, r2
 80081d8:	4a43      	ldr	r2, [pc, #268]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80081da:	fba0 1202 	umull	r1, r2, r0, r2
 80081de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081e0:	460a      	mov	r2, r1
 80081e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80081e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081e6:	4413      	add	r3, r2
 80081e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ec:	2200      	movs	r2, #0
 80081ee:	61bb      	str	r3, [r7, #24]
 80081f0:	61fa      	str	r2, [r7, #28]
 80081f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80081fa:	f7f8 fd3d 	bl	8000c78 <__aeabi_uldivmod>
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	4613      	mov	r3, r2
 8008204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008206:	e053      	b.n	80082b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008208:	4b35      	ldr	r3, [pc, #212]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	099b      	lsrs	r3, r3, #6
 800820e:	2200      	movs	r2, #0
 8008210:	613b      	str	r3, [r7, #16]
 8008212:	617a      	str	r2, [r7, #20]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800821a:	f04f 0b00 	mov.w	fp, #0
 800821e:	4652      	mov	r2, sl
 8008220:	465b      	mov	r3, fp
 8008222:	f04f 0000 	mov.w	r0, #0
 8008226:	f04f 0100 	mov.w	r1, #0
 800822a:	0159      	lsls	r1, r3, #5
 800822c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008230:	0150      	lsls	r0, r2, #5
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	ebb2 080a 	subs.w	r8, r2, sl
 800823a:	eb63 090b 	sbc.w	r9, r3, fp
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800824a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800824e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008252:	ebb2 0408 	subs.w	r4, r2, r8
 8008256:	eb63 0509 	sbc.w	r5, r3, r9
 800825a:	f04f 0200 	mov.w	r2, #0
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	00eb      	lsls	r3, r5, #3
 8008264:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008268:	00e2      	lsls	r2, r4, #3
 800826a:	4614      	mov	r4, r2
 800826c:	461d      	mov	r5, r3
 800826e:	eb14 030a 	adds.w	r3, r4, sl
 8008272:	603b      	str	r3, [r7, #0]
 8008274:	eb45 030b 	adc.w	r3, r5, fp
 8008278:	607b      	str	r3, [r7, #4]
 800827a:	f04f 0200 	mov.w	r2, #0
 800827e:	f04f 0300 	mov.w	r3, #0
 8008282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008286:	4629      	mov	r1, r5
 8008288:	028b      	lsls	r3, r1, #10
 800828a:	4621      	mov	r1, r4
 800828c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008290:	4621      	mov	r1, r4
 8008292:	028a      	lsls	r2, r1, #10
 8008294:	4610      	mov	r0, r2
 8008296:	4619      	mov	r1, r3
 8008298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829a:	2200      	movs	r2, #0
 800829c:	60bb      	str	r3, [r7, #8]
 800829e:	60fa      	str	r2, [r7, #12]
 80082a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082a4:	f7f8 fce8 	bl	8000c78 <__aeabi_uldivmod>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4613      	mov	r3, r2
 80082ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082b0:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	0c1b      	lsrs	r3, r3, #16
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	3301      	adds	r3, #1
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80082c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80082ca:	e002      	b.n	80082d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082cc:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80082ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80082d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3740      	adds	r7, #64	; 0x40
 80082d8:	46bd      	mov	sp, r7
 80082da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082de:	bf00      	nop
 80082e0:	40023800 	.word	0x40023800
 80082e4:	00f42400 	.word	0x00f42400
 80082e8:	017d7840 	.word	0x017d7840

080082ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082f0:	4b03      	ldr	r3, [pc, #12]	; (8008300 <HAL_RCC_GetHCLKFreq+0x14>)
 80082f2:	681b      	ldr	r3, [r3, #0]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	20000224 	.word	0x20000224

08008304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008308:	f7ff fff0 	bl	80082ec <HAL_RCC_GetHCLKFreq>
 800830c:	4602      	mov	r2, r0
 800830e:	4b05      	ldr	r3, [pc, #20]	; (8008324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	0a9b      	lsrs	r3, r3, #10
 8008314:	f003 0307 	and.w	r3, r3, #7
 8008318:	4903      	ldr	r1, [pc, #12]	; (8008328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800831a:	5ccb      	ldrb	r3, [r1, r3]
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008320:	4618      	mov	r0, r3
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40023800 	.word	0x40023800
 8008328:	08010eb0 	.word	0x08010eb0

0800832c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008330:	f7ff ffdc 	bl	80082ec <HAL_RCC_GetHCLKFreq>
 8008334:	4602      	mov	r2, r0
 8008336:	4b05      	ldr	r3, [pc, #20]	; (800834c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	0b5b      	lsrs	r3, r3, #13
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	4903      	ldr	r1, [pc, #12]	; (8008350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008342:	5ccb      	ldrb	r3, [r1, r3]
 8008344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008348:	4618      	mov	r0, r3
 800834a:	bd80      	pop	{r7, pc}
 800834c:	40023800 	.word	0x40023800
 8008350:	08010eb0 	.word	0x08010eb0

08008354 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	d105      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008378:	2b00      	cmp	r3, #0
 800837a:	d038      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800837c:	4b68      	ldr	r3, [pc, #416]	; (8008520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008382:	f7fd f8af 	bl	80054e4 <HAL_GetTick>
 8008386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008388:	e008      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800838a:	f7fd f8ab 	bl	80054e4 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	d901      	bls.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e0bd      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800839c:	4b61      	ldr	r3, [pc, #388]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1f0      	bne.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	019b      	lsls	r3, r3, #6
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	071b      	lsls	r3, r3, #28
 80083ba:	495a      	ldr	r1, [pc, #360]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80083c2:	4b57      	ldr	r3, [pc, #348]	; (8008520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80083c4:	2201      	movs	r2, #1
 80083c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083c8:	f7fd f88c 	bl	80054e4 <HAL_GetTick>
 80083cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083ce:	e008      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80083d0:	f7fd f888 	bl	80054e4 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e09a      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083e2:	4b50      	ldr	r3, [pc, #320]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0f0      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8083 	beq.w	8008502 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	4b48      	ldr	r3, [pc, #288]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008404:	4a47      	ldr	r2, [pc, #284]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800840a:	6413      	str	r3, [r2, #64]	; 0x40
 800840c:	4b45      	ldr	r3, [pc, #276]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008418:	4b43      	ldr	r3, [pc, #268]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a42      	ldr	r2, [pc, #264]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800841e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008422:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008424:	f7fd f85e 	bl	80054e4 <HAL_GetTick>
 8008428:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800842a:	e008      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800842c:	f7fd f85a 	bl	80054e4 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	2b02      	cmp	r3, #2
 8008438:	d901      	bls.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e06c      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800843e:	4b3a      	ldr	r3, [pc, #232]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008446:	2b00      	cmp	r3, #0
 8008448:	d0f0      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800844a:	4b36      	ldr	r3, [pc, #216]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008452:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d02f      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	429a      	cmp	r2, r3
 8008466:	d028      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008468:	4b2e      	ldr	r3, [pc, #184]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008470:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008472:	4b2e      	ldr	r3, [pc, #184]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008474:	2201      	movs	r2, #1
 8008476:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008478:	4b2c      	ldr	r3, [pc, #176]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800847e:	4a29      	ldr	r2, [pc, #164]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008484:	4b27      	ldr	r3, [pc, #156]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b01      	cmp	r3, #1
 800848e:	d114      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008490:	f7fd f828 	bl	80054e4 <HAL_GetTick>
 8008494:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008496:	e00a      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008498:	f7fd f824 	bl	80054e4 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d901      	bls.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e034      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084ae:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0ee      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084c6:	d10d      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80084c8:	4b16      	ldr	r3, [pc, #88]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80084d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084dc:	4911      	ldr	r1, [pc, #68]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	608b      	str	r3, [r1, #8]
 80084e2:	e005      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80084e4:	4b0f      	ldr	r3, [pc, #60]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	4a0e      	ldr	r2, [pc, #56]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084ee:	6093      	str	r3, [r2, #8]
 80084f0:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084fc:	4909      	ldr	r1, [pc, #36]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0308 	and.w	r3, r3, #8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7d1a      	ldrb	r2, [r3, #20]
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008514:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	42470068 	.word	0x42470068
 8008524:	40023800 	.word	0x40023800
 8008528:	40007000 	.word	0x40007000
 800852c:	42470e40 	.word	0x42470e40
 8008530:	424711e0 	.word	0x424711e0

08008534 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e066      	b.n	8008618 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	7f5b      	ldrb	r3, [r3, #29]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d105      	bne.n	8008560 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7fb fcca 	bl	8003ef4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	22ca      	movs	r2, #202	; 0xca
 800856c:	625a      	str	r2, [r3, #36]	; 0x24
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2253      	movs	r2, #83	; 0x53
 8008574:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa45 	bl	8008a06 <RTC_EnterInitMode>
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d12c      	bne.n	80085e0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008598:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6899      	ldr	r1, [r3, #8]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	431a      	orrs	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	431a      	orrs	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	68d2      	ldr	r2, [r2, #12]
 80085c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6919      	ldr	r1, [r3, #16]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	041a      	lsls	r2, r3, #16
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa4c 	bl	8008a74 <RTC_ExitInitMode>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d113      	bne.n	800860e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085f4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699a      	ldr	r2, [r3, #24]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	22ff      	movs	r2, #255	; 0xff
 8008614:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008616:	7bfb      	ldrb	r3, [r7, #15]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008620:	b590      	push	{r4, r7, lr}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	7f1b      	ldrb	r3, [r3, #28]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d101      	bne.n	800863c <HAL_RTC_SetTime+0x1c>
 8008638:	2302      	movs	r3, #2
 800863a:	e087      	b.n	800874c <HAL_RTC_SetTime+0x12c>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2202      	movs	r2, #2
 8008646:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d126      	bne.n	800869c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d102      	bne.n	8008662 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2200      	movs	r2, #0
 8008660:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fa29 	bl	8008abe <RTC_ByteToBcd2>
 800866c:	4603      	mov	r3, r0
 800866e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fa22 	bl	8008abe <RTC_ByteToBcd2>
 800867a:	4603      	mov	r3, r0
 800867c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800867e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	789b      	ldrb	r3, [r3, #2]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fa1a 	bl	8008abe <RTC_ByteToBcd2>
 800868a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800868c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	78db      	ldrb	r3, [r3, #3]
 8008694:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	e018      	b.n	80086ce <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d102      	bne.n	80086b0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2200      	movs	r2, #0
 80086ae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80086bc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80086c2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	78db      	ldrb	r3, [r3, #3]
 80086c8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	22ca      	movs	r2, #202	; 0xca
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2253      	movs	r2, #83	; 0x53
 80086dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 f991 	bl	8008a06 <RTC_EnterInitMode>
 80086e4:	4603      	mov	r3, r0
 80086e6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80086e8:	7cfb      	ldrb	r3, [r7, #19]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d120      	bne.n	8008730 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80086f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80086fc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800870c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6899      	ldr	r1, [r3, #8]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	431a      	orrs	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 f9a4 	bl	8008a74 <RTC_ExitInitMode>
 800872c:	4603      	mov	r3, r0
 800872e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008730:	7cfb      	ldrb	r3, [r7, #19]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d102      	bne.n	800873c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	22ff      	movs	r2, #255	; 0xff
 8008742:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	771a      	strb	r2, [r3, #28]

  return status;
 800874a:	7cfb      	ldrb	r3, [r7, #19]
}
 800874c:	4618      	mov	r0, r3
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	bd90      	pop	{r4, r7, pc}

08008754 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008786:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800878a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	0c1b      	lsrs	r3, r3, #16
 8008790:	b2db      	uxtb	r3, r3
 8008792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008796:	b2da      	uxtb	r2, r3
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	0a1b      	lsrs	r3, r3, #8
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	0d9b      	lsrs	r3, r3, #22
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d11a      	bne.n	8008806 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 f98f 	bl	8008af8 <RTC_Bcd2ToByte>
 80087da:	4603      	mov	r3, r0
 80087dc:	461a      	mov	r2, r3
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f986 	bl	8008af8 <RTC_Bcd2ToByte>
 80087ec:	4603      	mov	r3, r0
 80087ee:	461a      	mov	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	789b      	ldrb	r3, [r3, #2]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 f97d 	bl	8008af8 <RTC_Bcd2ToByte>
 80087fe:	4603      	mov	r3, r0
 8008800:	461a      	mov	r2, r3
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008810:	b590      	push	{r4, r7, lr}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	7f1b      	ldrb	r3, [r3, #28]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d101      	bne.n	800882c <HAL_RTC_SetDate+0x1c>
 8008828:	2302      	movs	r3, #2
 800882a:	e071      	b.n	8008910 <HAL_RTC_SetDate+0x100>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2202      	movs	r2, #2
 8008836:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10e      	bne.n	800885c <HAL_RTC_SetDate+0x4c>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	785b      	ldrb	r3, [r3, #1]
 8008842:	f003 0310 	and.w	r3, r3, #16
 8008846:	2b00      	cmp	r3, #0
 8008848:	d008      	beq.n	800885c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	785b      	ldrb	r3, [r3, #1]
 800884e:	f023 0310 	bic.w	r3, r3, #16
 8008852:	b2db      	uxtb	r3, r3
 8008854:	330a      	adds	r3, #10
 8008856:	b2da      	uxtb	r2, r3
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d11c      	bne.n	800889c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	78db      	ldrb	r3, [r3, #3]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f929 	bl	8008abe <RTC_ByteToBcd2>
 800886c:	4603      	mov	r3, r0
 800886e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	785b      	ldrb	r3, [r3, #1]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 f922 	bl	8008abe <RTC_ByteToBcd2>
 800887a:	4603      	mov	r3, r0
 800887c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800887e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	789b      	ldrb	r3, [r3, #2]
 8008884:	4618      	mov	r0, r3
 8008886:	f000 f91a 	bl	8008abe <RTC_ByteToBcd2>
 800888a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800888c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008896:	4313      	orrs	r3, r2
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	e00e      	b.n	80088ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	78db      	ldrb	r3, [r3, #3]
 80088a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	785b      	ldrb	r3, [r3, #1]
 80088a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80088a8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80088ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	22ca      	movs	r2, #202	; 0xca
 80088c0:	625a      	str	r2, [r3, #36]	; 0x24
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2253      	movs	r2, #83	; 0x53
 80088c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 f89b 	bl	8008a06 <RTC_EnterInitMode>
 80088d0:	4603      	mov	r3, r0
 80088d2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80088d4:	7cfb      	ldrb	r3, [r7, #19]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10c      	bne.n	80088f4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80088e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80088e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 f8c2 	bl	8008a74 <RTC_ExitInitMode>
 80088f0:	4603      	mov	r3, r0
 80088f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80088f4:	7cfb      	ldrb	r3, [r7, #19]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	22ff      	movs	r2, #255	; 0xff
 8008906:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	771a      	strb	r2, [r3, #28]

  return status;
 800890e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008910:	4618      	mov	r0, r3
 8008912:	371c      	adds	r7, #28
 8008914:	46bd      	mov	sp, r7
 8008916:	bd90      	pop	{r4, r7, pc}

08008918 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008932:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008936:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	0c1b      	lsrs	r3, r3, #16
 800893c:	b2da      	uxtb	r2, r3
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	0a1b      	lsrs	r3, r3, #8
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	b2da      	uxtb	r2, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800895a:	b2da      	uxtb	r2, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	0b5b      	lsrs	r3, r3, #13
 8008964:	b2db      	uxtb	r3, r3
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	b2da      	uxtb	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d11a      	bne.n	80089ac <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	78db      	ldrb	r3, [r3, #3]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 f8bc 	bl	8008af8 <RTC_Bcd2ToByte>
 8008980:	4603      	mov	r3, r0
 8008982:	461a      	mov	r2, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	785b      	ldrb	r3, [r3, #1]
 800898c:	4618      	mov	r0, r3
 800898e:	f000 f8b3 	bl	8008af8 <RTC_Bcd2ToByte>
 8008992:	4603      	mov	r3, r0
 8008994:	461a      	mov	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	789b      	ldrb	r3, [r3, #2]
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 f8aa 	bl	8008af8 <RTC_Bcd2ToByte>
 80089a4:	4603      	mov	r3, r0
 80089a6:	461a      	mov	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089be:	2300      	movs	r3, #0
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68da      	ldr	r2, [r3, #12]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089d0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089d2:	f7fc fd87 	bl	80054e4 <HAL_GetTick>
 80089d6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089d8:	e009      	b.n	80089ee <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80089da:	f7fc fd83 	bl	80054e4 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089e8:	d901      	bls.n	80089ee <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e007      	b.n	80089fe <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f003 0320 	and.w	r3, r3, #32
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0ee      	beq.n	80089da <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d122      	bne.n	8008a6a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a32:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a34:	f7fc fd56 	bl	80054e4 <HAL_GetTick>
 8008a38:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a3a:	e00c      	b.n	8008a56 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a3c:	f7fc fd52 	bl	80054e4 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a4a:	d904      	bls.n	8008a56 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2204      	movs	r2, #4
 8008a50:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d102      	bne.n	8008a6a <RTC_EnterInitMode+0x64>
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d1e8      	bne.n	8008a3c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a8e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7ff ff89 	bl	80089b6 <HAL_RTC_WaitForSynchro>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d004      	beq.n	8008ab4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2204      	movs	r2, #4
 8008aae:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008acc:	e005      	b.n	8008ada <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	3b0a      	subs	r3, #10
 8008ad8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2b09      	cmp	r3, #9
 8008ade:	d8f6      	bhi.n	8008ace <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	b2db      	uxtb	r3, r3
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	091b      	lsrs	r3, r3, #4
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	0092      	lsls	r2, r2, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	4413      	add	r3, r2
 8008b22:	b2db      	uxtb	r3, r3
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e07b      	b.n	8008c3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d108      	bne.n	8008b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b52:	d009      	beq.n	8008b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	61da      	str	r2, [r3, #28]
 8008b5a:	e005      	b.n	8008b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7fb fa18 	bl	8003fb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008be2:	431a      	orrs	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bec:	ea42 0103 	orr.w	r1, r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	0c1b      	lsrs	r3, r3, #16
 8008c06:	f003 0104 	and.w	r1, r3, #4
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	f003 0210 	and.w	r2, r3, #16
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	69da      	ldr	r2, [r3, #28]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e041      	b.n	8008cd8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d106      	bne.n	8008c6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fb fc1b 	bl	80044a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2202      	movs	r2, #2
 8008c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4610      	mov	r0, r2
 8008c82:	f000 fe87 	bl	8009994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e041      	b.n	8008d76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d106      	bne.n	8008d0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f839 	bl	8008d7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f000 fe38 	bl	8009994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
	...

08008d94 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d109      	bne.n	8008dc0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	bf0c      	ite	eq
 8008db8:	2301      	moveq	r3, #1
 8008dba:	2300      	movne	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	e022      	b.n	8008e06 <HAL_TIM_PWM_Start_DMA+0x72>
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d109      	bne.n	8008dda <HAL_TIM_PWM_Start_DMA+0x46>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	bf0c      	ite	eq
 8008dd2:	2301      	moveq	r3, #1
 8008dd4:	2300      	movne	r3, #0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	e015      	b.n	8008e06 <HAL_TIM_PWM_Start_DMA+0x72>
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d109      	bne.n	8008df4 <HAL_TIM_PWM_Start_DMA+0x60>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	bf0c      	ite	eq
 8008dec:	2301      	moveq	r3, #1
 8008dee:	2300      	movne	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	e008      	b.n	8008e06 <HAL_TIM_PWM_Start_DMA+0x72>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	bf0c      	ite	eq
 8008e00:	2301      	moveq	r3, #1
 8008e02:	2300      	movne	r3, #0
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	e15d      	b.n	80090ca <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d109      	bne.n	8008e28 <HAL_TIM_PWM_Start_DMA+0x94>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	bf0c      	ite	eq
 8008e20:	2301      	moveq	r3, #1
 8008e22:	2300      	movne	r3, #0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	e022      	b.n	8008e6e <HAL_TIM_PWM_Start_DMA+0xda>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d109      	bne.n	8008e42 <HAL_TIM_PWM_Start_DMA+0xae>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	bf0c      	ite	eq
 8008e3a:	2301      	moveq	r3, #1
 8008e3c:	2300      	movne	r3, #0
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	e015      	b.n	8008e6e <HAL_TIM_PWM_Start_DMA+0xda>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d109      	bne.n	8008e5c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	bf0c      	ite	eq
 8008e54:	2301      	moveq	r3, #1
 8008e56:	2300      	movne	r3, #0
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	e008      	b.n	8008e6e <HAL_TIM_PWM_Start_DMA+0xda>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	bf0c      	ite	eq
 8008e68:	2301      	moveq	r3, #1
 8008e6a:	2300      	movne	r3, #0
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d024      	beq.n	8008ebc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <HAL_TIM_PWM_Start_DMA+0xee>
 8008e78:	887b      	ldrh	r3, [r7, #2]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e123      	b.n	80090ca <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d104      	bne.n	8008e92 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e90:	e016      	b.n	8008ec0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d104      	bne.n	8008ea2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ea0:	e00e      	b.n	8008ec0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b08      	cmp	r3, #8
 8008ea6:	d104      	bne.n	8008eb2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eb0:	e006      	b.n	8008ec0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008eba:	e001      	b.n	8008ec0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e104      	b.n	80090ca <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2b0c      	cmp	r3, #12
 8008ec4:	f200 80ae 	bhi.w	8009024 <HAL_TIM_PWM_Start_DMA+0x290>
 8008ec8:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ece:	bf00      	nop
 8008ed0:	08008f05 	.word	0x08008f05
 8008ed4:	08009025 	.word	0x08009025
 8008ed8:	08009025 	.word	0x08009025
 8008edc:	08009025 	.word	0x08009025
 8008ee0:	08008f4d 	.word	0x08008f4d
 8008ee4:	08009025 	.word	0x08009025
 8008ee8:	08009025 	.word	0x08009025
 8008eec:	08009025 	.word	0x08009025
 8008ef0:	08008f95 	.word	0x08008f95
 8008ef4:	08009025 	.word	0x08009025
 8008ef8:	08009025 	.word	0x08009025
 8008efc:	08009025 	.word	0x08009025
 8008f00:	08008fdd 	.word	0x08008fdd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	4a72      	ldr	r2, [pc, #456]	; (80090d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008f0a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	4a71      	ldr	r2, [pc, #452]	; (80090d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008f12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	4a70      	ldr	r2, [pc, #448]	; (80090dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8008f1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3334      	adds	r3, #52	; 0x34
 8008f28:	461a      	mov	r2, r3
 8008f2a:	887b      	ldrh	r3, [r7, #2]
 8008f2c:	f7fc fd18 	bl	8005960 <HAL_DMA_Start_IT>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e0c7      	b.n	80090ca <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f48:	60da      	str	r2, [r3, #12]
      break;
 8008f4a:	e06e      	b.n	800902a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f50:	4a60      	ldr	r2, [pc, #384]	; (80090d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008f52:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f58:	4a5f      	ldr	r2, [pc, #380]	; (80090d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008f5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	4a5e      	ldr	r2, [pc, #376]	; (80090dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8008f62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3338      	adds	r3, #56	; 0x38
 8008f70:	461a      	mov	r2, r3
 8008f72:	887b      	ldrh	r3, [r7, #2]
 8008f74:	f7fc fcf4 	bl	8005960 <HAL_DMA_Start_IT>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e0a3      	b.n	80090ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68da      	ldr	r2, [r3, #12]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f90:	60da      	str	r2, [r3, #12]
      break;
 8008f92:	e04a      	b.n	800902a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	4a4e      	ldr	r2, [pc, #312]	; (80090d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008f9a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	4a4d      	ldr	r2, [pc, #308]	; (80090d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008fa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	4a4c      	ldr	r2, [pc, #304]	; (80090dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8008faa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	333c      	adds	r3, #60	; 0x3c
 8008fb8:	461a      	mov	r2, r3
 8008fba:	887b      	ldrh	r3, [r7, #2]
 8008fbc:	f7fc fcd0 	bl	8005960 <HAL_DMA_Start_IT>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e07f      	b.n	80090ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fd8:	60da      	str	r2, [r3, #12]
      break;
 8008fda:	e026      	b.n	800902a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe0:	4a3c      	ldr	r2, [pc, #240]	; (80090d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008fe2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe8:	4a3b      	ldr	r2, [pc, #236]	; (80090d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008fea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff0:	4a3a      	ldr	r2, [pc, #232]	; (80090dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8008ff2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3340      	adds	r3, #64	; 0x40
 8009000:	461a      	mov	r2, r3
 8009002:	887b      	ldrh	r3, [r7, #2]
 8009004:	f7fc fcac 	bl	8005960 <HAL_DMA_Start_IT>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e05b      	b.n	80090ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009020:	60da      	str	r2, [r3, #12]
      break;
 8009022:	e002      	b.n	800902a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	75fb      	strb	r3, [r7, #23]
      break;
 8009028:	bf00      	nop
  }

  if (status == HAL_OK)
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d14b      	bne.n	80090c8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2201      	movs	r2, #1
 8009036:	68b9      	ldr	r1, [r7, #8]
 8009038:	4618      	mov	r0, r3
 800903a:	f000 ff51 	bl	8009ee0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a27      	ldr	r2, [pc, #156]	; (80090e0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d107      	bne.n	8009058 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009056:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a20      	ldr	r2, [pc, #128]	; (80090e0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d018      	beq.n	8009094 <HAL_TIM_PWM_Start_DMA+0x300>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800906a:	d013      	beq.n	8009094 <HAL_TIM_PWM_Start_DMA+0x300>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a1c      	ldr	r2, [pc, #112]	; (80090e4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00e      	beq.n	8009094 <HAL_TIM_PWM_Start_DMA+0x300>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a1b      	ldr	r2, [pc, #108]	; (80090e8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d009      	beq.n	8009094 <HAL_TIM_PWM_Start_DMA+0x300>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a19      	ldr	r2, [pc, #100]	; (80090ec <HAL_TIM_PWM_Start_DMA+0x358>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d004      	beq.n	8009094 <HAL_TIM_PWM_Start_DMA+0x300>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a18      	ldr	r2, [pc, #96]	; (80090f0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d111      	bne.n	80090b8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	2b06      	cmp	r3, #6
 80090a4:	d010      	beq.n	80090c8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 0201 	orr.w	r2, r2, #1
 80090b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b6:	e007      	b.n	80090c8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0201 	orr.w	r2, r2, #1
 80090c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	08009885 	.word	0x08009885
 80090d8:	0800992d 	.word	0x0800992d
 80090dc:	080097f3 	.word	0x080097f3
 80090e0:	40010000 	.word	0x40010000
 80090e4:	40000400 	.word	0x40000400
 80090e8:	40000800 	.word	0x40000800
 80090ec:	40000c00 	.word	0x40000c00
 80090f0:	40014000 	.word	0x40014000

080090f4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b0c      	cmp	r3, #12
 8009106:	d855      	bhi.n	80091b4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8009108:	a201      	add	r2, pc, #4	; (adr r2, 8009110 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	08009145 	.word	0x08009145
 8009114:	080091b5 	.word	0x080091b5
 8009118:	080091b5 	.word	0x080091b5
 800911c:	080091b5 	.word	0x080091b5
 8009120:	08009161 	.word	0x08009161
 8009124:	080091b5 	.word	0x080091b5
 8009128:	080091b5 	.word	0x080091b5
 800912c:	080091b5 	.word	0x080091b5
 8009130:	0800917d 	.word	0x0800917d
 8009134:	080091b5 	.word	0x080091b5
 8009138:	080091b5 	.word	0x080091b5
 800913c:	080091b5 	.word	0x080091b5
 8009140:	08009199 	.word	0x08009199
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009152:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	4618      	mov	r0, r3
 800915a:	f7fc fcc9 	bl	8005af0 <HAL_DMA_Abort_IT>
      break;
 800915e:	e02c      	b.n	80091ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800916e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	4618      	mov	r0, r3
 8009176:	f7fc fcbb 	bl	8005af0 <HAL_DMA_Abort_IT>
      break;
 800917a:	e01e      	b.n	80091ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800918a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	4618      	mov	r0, r3
 8009192:	f7fc fcad 	bl	8005af0 <HAL_DMA_Abort_IT>
      break;
 8009196:	e010      	b.n	80091ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fc fc9f 	bl	8005af0 <HAL_DMA_Abort_IT>
      break;
 80091b2:	e002      	b.n	80091ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	73fb      	strb	r3, [r7, #15]
      break;
 80091b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d157      	bne.n	8009270 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2200      	movs	r2, #0
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fe89 	bl	8009ee0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a2a      	ldr	r2, [pc, #168]	; (800927c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d117      	bne.n	8009208 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6a1a      	ldr	r2, [r3, #32]
 80091de:	f241 1311 	movw	r3, #4369	; 0x1111
 80091e2:	4013      	ands	r3, r2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10f      	bne.n	8009208 <HAL_TIM_PWM_Stop_DMA+0x114>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6a1a      	ldr	r2, [r3, #32]
 80091ee:	f240 4344 	movw	r3, #1092	; 0x444
 80091f2:	4013      	ands	r3, r2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d107      	bne.n	8009208 <HAL_TIM_PWM_Stop_DMA+0x114>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009206:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6a1a      	ldr	r2, [r3, #32]
 800920e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009212:	4013      	ands	r3, r2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10f      	bne.n	8009238 <HAL_TIM_PWM_Stop_DMA+0x144>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6a1a      	ldr	r2, [r3, #32]
 800921e:	f240 4344 	movw	r3, #1092	; 0x444
 8009222:	4013      	ands	r3, r2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d107      	bne.n	8009238 <HAL_TIM_PWM_Stop_DMA+0x144>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0201 	bic.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d104      	bne.n	8009248 <HAL_TIM_PWM_Stop_DMA+0x154>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009246:	e013      	b.n	8009270 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b04      	cmp	r3, #4
 800924c:	d104      	bne.n	8009258 <HAL_TIM_PWM_Stop_DMA+0x164>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009256:	e00b      	b.n	8009270 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b08      	cmp	r3, #8
 800925c:	d104      	bne.n	8009268 <HAL_TIM_PWM_Stop_DMA+0x174>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009266:	e003      	b.n	8009270 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	40010000 	.word	0x40010000

08009280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b02      	cmp	r3, #2
 8009294:	d122      	bne.n	80092dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d11b      	bne.n	80092dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0202 	mvn.w	r2, #2
 80092ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa77 	bl	80097b6 <HAL_TIM_IC_CaptureCallback>
 80092c8:	e005      	b.n	80092d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fa69 	bl	80097a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7fb ff51 	bl	8005178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f003 0304 	and.w	r3, r3, #4
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d122      	bne.n	8009330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f003 0304 	and.w	r3, r3, #4
 80092f4:	2b04      	cmp	r3, #4
 80092f6:	d11b      	bne.n	8009330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f06f 0204 	mvn.w	r2, #4
 8009300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fa4d 	bl	80097b6 <HAL_TIM_IC_CaptureCallback>
 800931c:	e005      	b.n	800932a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa3f 	bl	80097a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7fb ff27 	bl	8005178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f003 0308 	and.w	r3, r3, #8
 800933a:	2b08      	cmp	r3, #8
 800933c:	d122      	bne.n	8009384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b08      	cmp	r3, #8
 800934a:	d11b      	bne.n	8009384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f06f 0208 	mvn.w	r2, #8
 8009354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2204      	movs	r2, #4
 800935a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fa23 	bl	80097b6 <HAL_TIM_IC_CaptureCallback>
 8009370:	e005      	b.n	800937e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa15 	bl	80097a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7fb fefd 	bl	8005178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0310 	and.w	r3, r3, #16
 800938e:	2b10      	cmp	r3, #16
 8009390:	d122      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b10      	cmp	r3, #16
 800939e:	d11b      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0210 	mvn.w	r2, #16
 80093a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2208      	movs	r2, #8
 80093ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f9f9 	bl	80097b6 <HAL_TIM_IC_CaptureCallback>
 80093c4:	e005      	b.n	80093d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f9eb 	bl	80097a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7fb fed3 	bl	8005178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d10e      	bne.n	8009404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d107      	bne.n	8009404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0201 	mvn.w	r2, #1
 80093fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7fb fa12 	bl	8004828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940e:	2b80      	cmp	r3, #128	; 0x80
 8009410:	d10e      	bne.n	8009430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941c:	2b80      	cmp	r3, #128	; 0x80
 800941e:	d107      	bne.n	8009430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fe48 	bl	800a0c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943a:	2b40      	cmp	r3, #64	; 0x40
 800943c:	d10e      	bne.n	800945c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009448:	2b40      	cmp	r3, #64	; 0x40
 800944a:	d107      	bne.n	800945c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f9b7 	bl	80097ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f003 0320 	and.w	r3, r3, #32
 8009466:	2b20      	cmp	r3, #32
 8009468:	d10e      	bne.n	8009488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f003 0320 	and.w	r3, r3, #32
 8009474:	2b20      	cmp	r3, #32
 8009476:	d107      	bne.n	8009488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f06f 0220 	mvn.w	r2, #32
 8009480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fe12 	bl	800a0ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d101      	bne.n	80094ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094aa:	2302      	movs	r3, #2
 80094ac:	e0ae      	b.n	800960c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b0c      	cmp	r3, #12
 80094ba:	f200 809f 	bhi.w	80095fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80094be:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	080094f9 	.word	0x080094f9
 80094c8:	080095fd 	.word	0x080095fd
 80094cc:	080095fd 	.word	0x080095fd
 80094d0:	080095fd 	.word	0x080095fd
 80094d4:	08009539 	.word	0x08009539
 80094d8:	080095fd 	.word	0x080095fd
 80094dc:	080095fd 	.word	0x080095fd
 80094e0:	080095fd 	.word	0x080095fd
 80094e4:	0800957b 	.word	0x0800957b
 80094e8:	080095fd 	.word	0x080095fd
 80094ec:	080095fd 	.word	0x080095fd
 80094f0:	080095fd 	.word	0x080095fd
 80094f4:	080095bb 	.word	0x080095bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68b9      	ldr	r1, [r7, #8]
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fac8 	bl	8009a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699a      	ldr	r2, [r3, #24]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f042 0208 	orr.w	r2, r2, #8
 8009512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	699a      	ldr	r2, [r3, #24]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f022 0204 	bic.w	r2, r2, #4
 8009522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6999      	ldr	r1, [r3, #24]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	691a      	ldr	r2, [r3, #16]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	619a      	str	r2, [r3, #24]
      break;
 8009536:	e064      	b.n	8009602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68b9      	ldr	r1, [r7, #8]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fb0e 	bl	8009b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699a      	ldr	r2, [r3, #24]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	699a      	ldr	r2, [r3, #24]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6999      	ldr	r1, [r3, #24]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	021a      	lsls	r2, r3, #8
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	430a      	orrs	r2, r1
 8009576:	619a      	str	r2, [r3, #24]
      break;
 8009578:	e043      	b.n	8009602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68b9      	ldr	r1, [r7, #8]
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fb59 	bl	8009c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	69da      	ldr	r2, [r3, #28]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f042 0208 	orr.w	r2, r2, #8
 8009594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	69da      	ldr	r2, [r3, #28]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 0204 	bic.w	r2, r2, #4
 80095a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69d9      	ldr	r1, [r3, #28]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	691a      	ldr	r2, [r3, #16]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	61da      	str	r2, [r3, #28]
      break;
 80095b8:	e023      	b.n	8009602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68b9      	ldr	r1, [r7, #8]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 fba3 	bl	8009d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69da      	ldr	r2, [r3, #28]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69d9      	ldr	r1, [r3, #28]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	021a      	lsls	r2, r3, #8
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	61da      	str	r2, [r3, #28]
      break;
 80095fa:	e002      	b.n	8009602 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009600:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009628:	2b01      	cmp	r3, #1
 800962a:	d101      	bne.n	8009630 <HAL_TIM_ConfigClockSource+0x1c>
 800962c:	2302      	movs	r3, #2
 800962e:	e0b4      	b.n	800979a <HAL_TIM_ConfigClockSource+0x186>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800964e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009656:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009668:	d03e      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0xd4>
 800966a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800966e:	f200 8087 	bhi.w	8009780 <HAL_TIM_ConfigClockSource+0x16c>
 8009672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009676:	f000 8086 	beq.w	8009786 <HAL_TIM_ConfigClockSource+0x172>
 800967a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800967e:	d87f      	bhi.n	8009780 <HAL_TIM_ConfigClockSource+0x16c>
 8009680:	2b70      	cmp	r3, #112	; 0x70
 8009682:	d01a      	beq.n	80096ba <HAL_TIM_ConfigClockSource+0xa6>
 8009684:	2b70      	cmp	r3, #112	; 0x70
 8009686:	d87b      	bhi.n	8009780 <HAL_TIM_ConfigClockSource+0x16c>
 8009688:	2b60      	cmp	r3, #96	; 0x60
 800968a:	d050      	beq.n	800972e <HAL_TIM_ConfigClockSource+0x11a>
 800968c:	2b60      	cmp	r3, #96	; 0x60
 800968e:	d877      	bhi.n	8009780 <HAL_TIM_ConfigClockSource+0x16c>
 8009690:	2b50      	cmp	r3, #80	; 0x50
 8009692:	d03c      	beq.n	800970e <HAL_TIM_ConfigClockSource+0xfa>
 8009694:	2b50      	cmp	r3, #80	; 0x50
 8009696:	d873      	bhi.n	8009780 <HAL_TIM_ConfigClockSource+0x16c>
 8009698:	2b40      	cmp	r3, #64	; 0x40
 800969a:	d058      	beq.n	800974e <HAL_TIM_ConfigClockSource+0x13a>
 800969c:	2b40      	cmp	r3, #64	; 0x40
 800969e:	d86f      	bhi.n	8009780 <HAL_TIM_ConfigClockSource+0x16c>
 80096a0:	2b30      	cmp	r3, #48	; 0x30
 80096a2:	d064      	beq.n	800976e <HAL_TIM_ConfigClockSource+0x15a>
 80096a4:	2b30      	cmp	r3, #48	; 0x30
 80096a6:	d86b      	bhi.n	8009780 <HAL_TIM_ConfigClockSource+0x16c>
 80096a8:	2b20      	cmp	r3, #32
 80096aa:	d060      	beq.n	800976e <HAL_TIM_ConfigClockSource+0x15a>
 80096ac:	2b20      	cmp	r3, #32
 80096ae:	d867      	bhi.n	8009780 <HAL_TIM_ConfigClockSource+0x16c>
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d05c      	beq.n	800976e <HAL_TIM_ConfigClockSource+0x15a>
 80096b4:	2b10      	cmp	r3, #16
 80096b6:	d05a      	beq.n	800976e <HAL_TIM_ConfigClockSource+0x15a>
 80096b8:	e062      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6818      	ldr	r0, [r3, #0]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	6899      	ldr	r1, [r3, #8]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f000 fbe9 	bl	8009ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	609a      	str	r2, [r3, #8]
      break;
 80096e6:	e04f      	b.n	8009788 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	6899      	ldr	r1, [r3, #8]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	f000 fbd2 	bl	8009ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689a      	ldr	r2, [r3, #8]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800970a:	609a      	str	r2, [r3, #8]
      break;
 800970c:	e03c      	b.n	8009788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	6859      	ldr	r1, [r3, #4]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	461a      	mov	r2, r3
 800971c:	f000 fb46 	bl	8009dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2150      	movs	r1, #80	; 0x50
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fb9f 	bl	8009e6a <TIM_ITRx_SetConfig>
      break;
 800972c:	e02c      	b.n	8009788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	6859      	ldr	r1, [r3, #4]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	461a      	mov	r2, r3
 800973c:	f000 fb65 	bl	8009e0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2160      	movs	r1, #96	; 0x60
 8009746:	4618      	mov	r0, r3
 8009748:	f000 fb8f 	bl	8009e6a <TIM_ITRx_SetConfig>
      break;
 800974c:	e01c      	b.n	8009788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	6859      	ldr	r1, [r3, #4]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	461a      	mov	r2, r3
 800975c:	f000 fb26 	bl	8009dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2140      	movs	r1, #64	; 0x40
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fb7f 	bl	8009e6a <TIM_ITRx_SetConfig>
      break;
 800976c:	e00c      	b.n	8009788 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4619      	mov	r1, r3
 8009778:	4610      	mov	r0, r2
 800977a:	f000 fb76 	bl	8009e6a <TIM_ITRx_SetConfig>
      break;
 800977e:	e003      	b.n	8009788 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	73fb      	strb	r3, [r7, #15]
      break;
 8009784:	e000      	b.n	8009788 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009798:	7bfb      	ldrb	r3, [r7, #15]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b083      	sub	sp, #12
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097aa:	bf00      	nop
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b083      	sub	sp, #12
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097be:	bf00      	nop
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b083      	sub	sp, #12
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097d2:	bf00      	nop
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80097de:	b480      	push	{r7}
 80097e0:	b083      	sub	sp, #12
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	429a      	cmp	r2, r3
 8009808:	d107      	bne.n	800981a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2201      	movs	r2, #1
 800980e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009818:	e02a      	b.n	8009870 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	429a      	cmp	r2, r3
 8009822:	d107      	bne.n	8009834 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2202      	movs	r2, #2
 8009828:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009832:	e01d      	b.n	8009870 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	429a      	cmp	r2, r3
 800983c:	d107      	bne.n	800984e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2204      	movs	r2, #4
 8009842:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800984c:	e010      	b.n	8009870 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	d107      	bne.n	8009868 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2208      	movs	r2, #8
 800985c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009866:	e003      	b.n	8009870 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7ff ffb4 	bl	80097de <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	771a      	strb	r2, [r3, #28]
}
 800987c:	bf00      	nop
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	429a      	cmp	r2, r3
 800989a:	d10b      	bne.n	80098b4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2201      	movs	r2, #1
 80098a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d136      	bne.n	8009918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b2:	e031      	b.n	8009918 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d10b      	bne.n	80098d6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2202      	movs	r2, #2
 80098c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d125      	bne.n	8009918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098d4:	e020      	b.n	8009918 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d10b      	bne.n	80098f8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2204      	movs	r2, #4
 80098e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d114      	bne.n	8009918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098f6:	e00f      	b.n	8009918 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d10a      	bne.n	8009918 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2208      	movs	r2, #8
 8009906:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d103      	bne.n	8009918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f7fb fc2d 	bl	8005178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	771a      	strb	r2, [r3, #28]
}
 8009924:	bf00      	nop
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009938:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	429a      	cmp	r2, r3
 8009942:	d103      	bne.n	800994c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	771a      	strb	r2, [r3, #28]
 800994a:	e019      	b.n	8009980 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	429a      	cmp	r2, r3
 8009954:	d103      	bne.n	800995e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2202      	movs	r2, #2
 800995a:	771a      	strb	r2, [r3, #28]
 800995c:	e010      	b.n	8009980 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	429a      	cmp	r2, r3
 8009966:	d103      	bne.n	8009970 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2204      	movs	r2, #4
 800996c:	771a      	strb	r2, [r3, #28]
 800996e:	e007      	b.n	8009980 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	429a      	cmp	r2, r3
 8009978:	d102      	bne.n	8009980 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2208      	movs	r2, #8
 800997e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f7fb fb79 	bl	8005078 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	771a      	strb	r2, [r3, #28]
}
 800998c:	bf00      	nop
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a34      	ldr	r2, [pc, #208]	; (8009a78 <TIM_Base_SetConfig+0xe4>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00f      	beq.n	80099cc <TIM_Base_SetConfig+0x38>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b2:	d00b      	beq.n	80099cc <TIM_Base_SetConfig+0x38>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a31      	ldr	r2, [pc, #196]	; (8009a7c <TIM_Base_SetConfig+0xe8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d007      	beq.n	80099cc <TIM_Base_SetConfig+0x38>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a30      	ldr	r2, [pc, #192]	; (8009a80 <TIM_Base_SetConfig+0xec>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d003      	beq.n	80099cc <TIM_Base_SetConfig+0x38>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a2f      	ldr	r2, [pc, #188]	; (8009a84 <TIM_Base_SetConfig+0xf0>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d108      	bne.n	80099de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4313      	orrs	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a25      	ldr	r2, [pc, #148]	; (8009a78 <TIM_Base_SetConfig+0xe4>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d01b      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ec:	d017      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a22      	ldr	r2, [pc, #136]	; (8009a7c <TIM_Base_SetConfig+0xe8>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d013      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a21      	ldr	r2, [pc, #132]	; (8009a80 <TIM_Base_SetConfig+0xec>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d00f      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a20      	ldr	r2, [pc, #128]	; (8009a84 <TIM_Base_SetConfig+0xf0>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d00b      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a1f      	ldr	r2, [pc, #124]	; (8009a88 <TIM_Base_SetConfig+0xf4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d007      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a1e      	ldr	r2, [pc, #120]	; (8009a8c <TIM_Base_SetConfig+0xf8>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d003      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a1d      	ldr	r2, [pc, #116]	; (8009a90 <TIM_Base_SetConfig+0xfc>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d108      	bne.n	8009a30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a08      	ldr	r2, [pc, #32]	; (8009a78 <TIM_Base_SetConfig+0xe4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d103      	bne.n	8009a64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	691a      	ldr	r2, [r3, #16]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	615a      	str	r2, [r3, #20]
}
 8009a6a:	bf00      	nop
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	40010000 	.word	0x40010000
 8009a7c:	40000400 	.word	0x40000400
 8009a80:	40000800 	.word	0x40000800
 8009a84:	40000c00 	.word	0x40000c00
 8009a88:	40014000 	.word	0x40014000
 8009a8c:	40014400 	.word	0x40014400
 8009a90:	40014800 	.word	0x40014800

08009a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f023 0201 	bic.w	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0303 	bic.w	r3, r3, #3
 8009aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f023 0302 	bic.w	r3, r3, #2
 8009adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a1c      	ldr	r2, [pc, #112]	; (8009b5c <TIM_OC1_SetConfig+0xc8>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d10c      	bne.n	8009b0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f023 0308 	bic.w	r3, r3, #8
 8009af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f023 0304 	bic.w	r3, r3, #4
 8009b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a13      	ldr	r2, [pc, #76]	; (8009b5c <TIM_OC1_SetConfig+0xc8>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d111      	bne.n	8009b36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	621a      	str	r2, [r3, #32]
}
 8009b50:	bf00      	nop
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	40010000 	.word	0x40010000

08009b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	f023 0210 	bic.w	r2, r3, #16
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	021b      	lsls	r3, r3, #8
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f023 0320 	bic.w	r3, r3, #32
 8009baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	011b      	lsls	r3, r3, #4
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a1e      	ldr	r2, [pc, #120]	; (8009c34 <TIM_OC2_SetConfig+0xd4>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d10d      	bne.n	8009bdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	011b      	lsls	r3, r3, #4
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a15      	ldr	r2, [pc, #84]	; (8009c34 <TIM_OC2_SetConfig+0xd4>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d113      	bne.n	8009c0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	621a      	str	r2, [r3, #32]
}
 8009c26:	bf00      	nop
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	40010000 	.word	0x40010000

08009c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f023 0303 	bic.w	r3, r3, #3
 8009c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a1d      	ldr	r2, [pc, #116]	; (8009d08 <TIM_OC3_SetConfig+0xd0>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d10d      	bne.n	8009cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a14      	ldr	r2, [pc, #80]	; (8009d08 <TIM_OC3_SetConfig+0xd0>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d113      	bne.n	8009ce2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	011b      	lsls	r3, r3, #4
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	621a      	str	r2, [r3, #32]
}
 8009cfc:	bf00      	nop
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	40010000 	.word	0x40010000

08009d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	021b      	lsls	r3, r3, #8
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	031b      	lsls	r3, r3, #12
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a10      	ldr	r2, [pc, #64]	; (8009da8 <TIM_OC4_SetConfig+0x9c>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d109      	bne.n	8009d80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	019b      	lsls	r3, r3, #6
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	621a      	str	r2, [r3, #32]
}
 8009d9a:	bf00      	nop
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	40010000 	.word	0x40010000

08009dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	f023 0201 	bic.w	r2, r3, #1
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f023 030a 	bic.w	r3, r3, #10
 8009de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	621a      	str	r2, [r3, #32]
}
 8009dfe:	bf00      	nop
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b087      	sub	sp, #28
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	f023 0210 	bic.w	r2, r3, #16
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	031b      	lsls	r3, r3, #12
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	621a      	str	r2, [r3, #32]
}
 8009e5e:	bf00      	nop
 8009e60:	371c      	adds	r7, #28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	f043 0307 	orr.w	r3, r3, #7
 8009e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	609a      	str	r2, [r3, #8]
}
 8009e94:	bf00      	nop
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	021a      	lsls	r2, r3, #8
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	431a      	orrs	r2, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	609a      	str	r2, [r3, #8]
}
 8009ed4:	bf00      	nop
 8009ed6:	371c      	adds	r7, #28
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f003 031f 	and.w	r3, r3, #31
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a1a      	ldr	r2, [r3, #32]
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	43db      	mvns	r3, r3
 8009f02:	401a      	ands	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6a1a      	ldr	r2, [r3, #32]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f003 031f 	and.w	r3, r3, #31
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	fa01 f303 	lsl.w	r3, r1, r3
 8009f18:	431a      	orrs	r2, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	621a      	str	r2, [r3, #32]
}
 8009f1e:	bf00      	nop
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
	...

08009f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d101      	bne.n	8009f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f40:	2302      	movs	r3, #2
 8009f42:	e050      	b.n	8009fe6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a1c      	ldr	r2, [pc, #112]	; (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d018      	beq.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f90:	d013      	beq.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a18      	ldr	r2, [pc, #96]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d00e      	beq.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a16      	ldr	r2, [pc, #88]	; (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d009      	beq.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a15      	ldr	r2, [pc, #84]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d004      	beq.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a13      	ldr	r2, [pc, #76]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d10c      	bne.n	8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	40010000 	.word	0x40010000
 8009ff8:	40000400 	.word	0x40000400
 8009ffc:	40000800 	.word	0x40000800
 800a000:	40000c00 	.word	0x40000c00
 800a004:	40014000 	.word	0x40014000

0800a008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d101      	bne.n	800a024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a020:	2302      	movs	r3, #2
 800a022:	e03d      	b.n	800a0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	4313      	orrs	r3, r2
 800a038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	4313      	orrs	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	4313      	orrs	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4313      	orrs	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	4313      	orrs	r3, r2
 800a070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e03f      	b.n	800a166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d106      	bne.n	800a100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7fa fab0 	bl	8004660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2224      	movs	r2, #36	; 0x24
 800a104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68da      	ldr	r2, [r3, #12]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fddf 	bl	800acdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	691a      	ldr	r2, [r3, #16]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a12c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	695a      	ldr	r2, [r3, #20]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a13c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68da      	ldr	r2, [r3, #12]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a14c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2220      	movs	r2, #32
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2220      	movs	r2, #32
 800a160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b08a      	sub	sp, #40	; 0x28
 800a172:	af02      	add	r7, sp, #8
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	603b      	str	r3, [r7, #0]
 800a17a:	4613      	mov	r3, r2
 800a17c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a17e:	2300      	movs	r3, #0
 800a180:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b20      	cmp	r3, #32
 800a18c:	d17c      	bne.n	800a288 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <HAL_UART_Transmit+0x2c>
 800a194:	88fb      	ldrh	r3, [r7, #6]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e075      	b.n	800a28a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d101      	bne.n	800a1ac <HAL_UART_Transmit+0x3e>
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	e06e      	b.n	800a28a <HAL_UART_Transmit+0x11c>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2221      	movs	r2, #33	; 0x21
 800a1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1c2:	f7fb f98f 	bl	80054e4 <HAL_GetTick>
 800a1c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	88fa      	ldrh	r2, [r7, #6]
 800a1cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	88fa      	ldrh	r2, [r7, #6]
 800a1d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1dc:	d108      	bne.n	800a1f0 <HAL_UART_Transmit+0x82>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d104      	bne.n	800a1f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	61bb      	str	r3, [r7, #24]
 800a1ee:	e003      	b.n	800a1f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a200:	e02a      	b.n	800a258 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2200      	movs	r2, #0
 800a20a:	2180      	movs	r1, #128	; 0x80
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 fb1f 	bl	800a850 <UART_WaitOnFlagUntilTimeout>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e036      	b.n	800a28a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10b      	bne.n	800a23a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	3302      	adds	r3, #2
 800a236:	61bb      	str	r3, [r7, #24]
 800a238:	e007      	b.n	800a24a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	781a      	ldrb	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	3301      	adds	r3, #1
 800a248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a24e:	b29b      	uxth	r3, r3
 800a250:	3b01      	subs	r3, #1
 800a252:	b29a      	uxth	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1cf      	bne.n	800a202 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2200      	movs	r2, #0
 800a26a:	2140      	movs	r1, #64	; 0x40
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f000 faef 	bl	800a850 <UART_WaitOnFlagUntilTimeout>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e006      	b.n	800a28a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2220      	movs	r2, #32
 800a280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	e000      	b.n	800a28a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a288:	2302      	movs	r3, #2
  }
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3720      	adds	r7, #32
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	60f8      	str	r0, [r7, #12]
 800a29a:	60b9      	str	r1, [r7, #8]
 800a29c:	4613      	mov	r3, r2
 800a29e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b20      	cmp	r3, #32
 800a2aa:	d11d      	bne.n	800a2e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_UART_Receive_IT+0x26>
 800a2b2:	88fb      	ldrh	r3, [r7, #6]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e016      	b.n	800a2ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d101      	bne.n	800a2ca <HAL_UART_Receive_IT+0x38>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e00f      	b.n	800a2ea <HAL_UART_Receive_IT+0x58>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a2d8:	88fb      	ldrh	r3, [r7, #6]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 fb24 	bl	800a92c <UART_Start_Receive_IT>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	e000      	b.n	800a2ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a2e8:	2302      	movs	r3, #2
  }
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
	...

0800a2f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b0ba      	sub	sp, #232	; 0xe8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a320:	2300      	movs	r3, #0
 800a322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a32a:	f003 030f 	and.w	r3, r3, #15
 800a32e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10f      	bne.n	800a35a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a33e:	f003 0320 	and.w	r3, r3, #32
 800a342:	2b00      	cmp	r3, #0
 800a344:	d009      	beq.n	800a35a <HAL_UART_IRQHandler+0x66>
 800a346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a34a:	f003 0320 	and.w	r3, r3, #32
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fc07 	bl	800ab66 <UART_Receive_IT>
      return;
 800a358:	e256      	b.n	800a808 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a35a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 80de 	beq.w	800a520 <HAL_UART_IRQHandler+0x22c>
 800a364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d106      	bne.n	800a37e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a374:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 80d1 	beq.w	800a520 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00b      	beq.n	800a3a2 <HAL_UART_IRQHandler+0xae>
 800a38a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	f043 0201 	orr.w	r2, r3, #1
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a3a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3a6:	f003 0304 	and.w	r3, r3, #4
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00b      	beq.n	800a3c6 <HAL_UART_IRQHandler+0xd2>
 800a3ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3be:	f043 0202 	orr.w	r2, r3, #2
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00b      	beq.n	800a3ea <HAL_UART_IRQHandler+0xf6>
 800a3d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d005      	beq.n	800a3ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e2:	f043 0204 	orr.w	r2, r3, #4
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ee:	f003 0308 	and.w	r3, r3, #8
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d011      	beq.n	800a41a <HAL_UART_IRQHandler+0x126>
 800a3f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d105      	bne.n	800a40e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a406:	f003 0301 	and.w	r3, r3, #1
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d005      	beq.n	800a41a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a412:	f043 0208 	orr.w	r2, r3, #8
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f000 81ed 	beq.w	800a7fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a428:	f003 0320 	and.w	r3, r3, #32
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d008      	beq.n	800a442 <HAL_UART_IRQHandler+0x14e>
 800a430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a434:	f003 0320 	and.w	r3, r3, #32
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fb92 	bl	800ab66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44c:	2b40      	cmp	r3, #64	; 0x40
 800a44e:	bf0c      	ite	eq
 800a450:	2301      	moveq	r3, #1
 800a452:	2300      	movne	r3, #0
 800a454:	b2db      	uxtb	r3, r3
 800a456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45e:	f003 0308 	and.w	r3, r3, #8
 800a462:	2b00      	cmp	r3, #0
 800a464:	d103      	bne.n	800a46e <HAL_UART_IRQHandler+0x17a>
 800a466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d04f      	beq.n	800a50e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fa9a 	bl	800a9a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a47e:	2b40      	cmp	r3, #64	; 0x40
 800a480:	d141      	bne.n	800a506 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3314      	adds	r3, #20
 800a488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a490:	e853 3f00 	ldrex	r3, [r3]
 800a494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a49c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3314      	adds	r3, #20
 800a4aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a4ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a4b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a4ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a4be:	e841 2300 	strex	r3, r2, [r1]
 800a4c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a4c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1d9      	bne.n	800a482 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d013      	beq.n	800a4fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4da:	4a7d      	ldr	r2, [pc, #500]	; (800a6d0 <HAL_UART_IRQHandler+0x3dc>)
 800a4dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fb fb04 	bl	8005af0 <HAL_DMA_Abort_IT>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d016      	beq.n	800a51c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4fc:	e00e      	b.n	800a51c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f990 	bl	800a824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a504:	e00a      	b.n	800a51c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f98c 	bl	800a824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a50c:	e006      	b.n	800a51c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f988 	bl	800a824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a51a:	e170      	b.n	800a7fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a51c:	bf00      	nop
    return;
 800a51e:	e16e      	b.n	800a7fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a524:	2b01      	cmp	r3, #1
 800a526:	f040 814a 	bne.w	800a7be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a52a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a52e:	f003 0310 	and.w	r3, r3, #16
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 8143 	beq.w	800a7be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a53c:	f003 0310 	and.w	r3, r3, #16
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 813c 	beq.w	800a7be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a546:	2300      	movs	r3, #0
 800a548:	60bb      	str	r3, [r7, #8]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	60bb      	str	r3, [r7, #8]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	60bb      	str	r3, [r7, #8]
 800a55a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a566:	2b40      	cmp	r3, #64	; 0x40
 800a568:	f040 80b4 	bne.w	800a6d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 8140 	beq.w	800a802 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a58a:	429a      	cmp	r2, r3
 800a58c:	f080 8139 	bcs.w	800a802 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a596:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5a2:	f000 8088 	beq.w	800a6b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	330c      	adds	r3, #12
 800a5ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5b4:	e853 3f00 	ldrex	r3, [r3]
 800a5b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a5bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	330c      	adds	r3, #12
 800a5ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a5d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a5d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a5de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a5e2:	e841 2300 	strex	r3, r2, [r1]
 800a5e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a5ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1d9      	bne.n	800a5a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3314      	adds	r3, #20
 800a5f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a604:	f023 0301 	bic.w	r3, r3, #1
 800a608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3314      	adds	r3, #20
 800a612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a616:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a61a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a61e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a622:	e841 2300 	strex	r3, r2, [r1]
 800a626:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1e1      	bne.n	800a5f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	3314      	adds	r3, #20
 800a634:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a638:	e853 3f00 	ldrex	r3, [r3]
 800a63c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a63e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3314      	adds	r3, #20
 800a64e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a652:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a654:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a658:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e3      	bne.n	800a62e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2220      	movs	r2, #32
 800a66a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	330c      	adds	r3, #12
 800a67a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a67e:	e853 3f00 	ldrex	r3, [r3]
 800a682:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a686:	f023 0310 	bic.w	r3, r3, #16
 800a68a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	330c      	adds	r3, #12
 800a694:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a698:	65ba      	str	r2, [r7, #88]	; 0x58
 800a69a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a69e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e3      	bne.n	800a674 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fb f9ad 	bl	8005a10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f8b6 	bl	800a838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a6cc:	e099      	b.n	800a802 <HAL_UART_IRQHandler+0x50e>
 800a6ce:	bf00      	nop
 800a6d0:	0800aa6f 	.word	0x0800aa6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 808b 	beq.w	800a806 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a6f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 8086 	beq.w	800a806 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	330c      	adds	r3, #12
 800a700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	e853 3f00 	ldrex	r3, [r3]
 800a708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	330c      	adds	r3, #12
 800a71a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a71e:	647a      	str	r2, [r7, #68]	; 0x44
 800a720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a726:	e841 2300 	strex	r3, r2, [r1]
 800a72a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1e3      	bne.n	800a6fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3314      	adds	r3, #20
 800a738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	e853 3f00 	ldrex	r3, [r3]
 800a740:	623b      	str	r3, [r7, #32]
   return(result);
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	f023 0301 	bic.w	r3, r3, #1
 800a748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3314      	adds	r3, #20
 800a752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a756:	633a      	str	r2, [r7, #48]	; 0x30
 800a758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a75e:	e841 2300 	strex	r3, r2, [r1]
 800a762:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1e3      	bne.n	800a732 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	330c      	adds	r3, #12
 800a77e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	e853 3f00 	ldrex	r3, [r3]
 800a786:	60fb      	str	r3, [r7, #12]
   return(result);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f023 0310 	bic.w	r3, r3, #16
 800a78e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	330c      	adds	r3, #12
 800a798:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a79c:	61fa      	str	r2, [r7, #28]
 800a79e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a0:	69b9      	ldr	r1, [r7, #24]
 800a7a2:	69fa      	ldr	r2, [r7, #28]
 800a7a4:	e841 2300 	strex	r3, r2, [r1]
 800a7a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1e3      	bne.n	800a778 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f83e 	bl	800a838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a7bc:	e023      	b.n	800a806 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d009      	beq.n	800a7de <HAL_UART_IRQHandler+0x4ea>
 800a7ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f95d 	bl	800aa96 <UART_Transmit_IT>
    return;
 800a7dc:	e014      	b.n	800a808 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a7de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00e      	beq.n	800a808 <HAL_UART_IRQHandler+0x514>
 800a7ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d008      	beq.n	800a808 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f99d 	bl	800ab36 <UART_EndTransmit_IT>
    return;
 800a7fc:	e004      	b.n	800a808 <HAL_UART_IRQHandler+0x514>
    return;
 800a7fe:	bf00      	nop
 800a800:	e002      	b.n	800a808 <HAL_UART_IRQHandler+0x514>
      return;
 800a802:	bf00      	nop
 800a804:	e000      	b.n	800a808 <HAL_UART_IRQHandler+0x514>
      return;
 800a806:	bf00      	nop
  }
}
 800a808:	37e8      	adds	r7, #232	; 0xe8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop

0800a810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b090      	sub	sp, #64	; 0x40
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	4613      	mov	r3, r2
 800a85e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a860:	e050      	b.n	800a904 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a868:	d04c      	beq.n	800a904 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a86a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d007      	beq.n	800a880 <UART_WaitOnFlagUntilTimeout+0x30>
 800a870:	f7fa fe38 	bl	80054e4 <HAL_GetTick>
 800a874:	4602      	mov	r2, r0
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d241      	bcs.n	800a904 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	330c      	adds	r3, #12
 800a886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	e853 3f00 	ldrex	r3, [r3]
 800a88e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	330c      	adds	r3, #12
 800a89e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8a0:	637a      	str	r2, [r7, #52]	; 0x34
 800a8a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8a8:	e841 2300 	strex	r3, r2, [r1]
 800a8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1e5      	bne.n	800a880 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3314      	adds	r3, #20
 800a8ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	f023 0301 	bic.w	r3, r3, #1
 800a8ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3314      	adds	r3, #20
 800a8d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8d4:	623a      	str	r2, [r7, #32]
 800a8d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d8:	69f9      	ldr	r1, [r7, #28]
 800a8da:	6a3a      	ldr	r2, [r7, #32]
 800a8dc:	e841 2300 	strex	r3, r2, [r1]
 800a8e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1e5      	bne.n	800a8b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e00f      	b.n	800a924 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	4013      	ands	r3, r2
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	429a      	cmp	r2, r3
 800a912:	bf0c      	ite	eq
 800a914:	2301      	moveq	r3, #1
 800a916:	2300      	movne	r3, #0
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	461a      	mov	r2, r3
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d09f      	beq.n	800a862 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3740      	adds	r7, #64	; 0x40
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	4613      	mov	r3, r2
 800a938:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	88fa      	ldrh	r2, [r7, #6]
 800a944:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	88fa      	ldrh	r2, [r7, #6]
 800a94a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2222      	movs	r2, #34	; 0x22
 800a956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d007      	beq.n	800a97a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a978:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	695a      	ldr	r2, [r3, #20]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f042 0201 	orr.w	r2, r2, #1
 800a988:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68da      	ldr	r2, [r3, #12]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f042 0220 	orr.w	r2, r2, #32
 800a998:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b095      	sub	sp, #84	; 0x54
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	330c      	adds	r3, #12
 800a9b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ba:	e853 3f00 	ldrex	r3, [r3]
 800a9be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	330c      	adds	r3, #12
 800a9ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9d0:	643a      	str	r2, [r7, #64]	; 0x40
 800a9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9d8:	e841 2300 	strex	r3, r2, [r1]
 800a9dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e5      	bne.n	800a9b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3314      	adds	r3, #20
 800a9ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	f023 0301 	bic.w	r3, r3, #1
 800a9fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3314      	adds	r3, #20
 800aa02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa04:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa0c:	e841 2300 	strex	r3, r2, [r1]
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e5      	bne.n	800a9e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d119      	bne.n	800aa54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	330c      	adds	r3, #12
 800aa26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	e853 3f00 	ldrex	r3, [r3]
 800aa2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	f023 0310 	bic.w	r3, r3, #16
 800aa36:	647b      	str	r3, [r7, #68]	; 0x44
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	330c      	adds	r3, #12
 800aa3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa40:	61ba      	str	r2, [r7, #24]
 800aa42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa44:	6979      	ldr	r1, [r7, #20]
 800aa46:	69ba      	ldr	r2, [r7, #24]
 800aa48:	e841 2300 	strex	r3, r2, [r1]
 800aa4c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1e5      	bne.n	800aa20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2220      	movs	r2, #32
 800aa58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aa62:	bf00      	nop
 800aa64:	3754      	adds	r7, #84	; 0x54
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b084      	sub	sp, #16
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f7ff fecb 	bl	800a824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa8e:	bf00      	nop
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b21      	cmp	r3, #33	; 0x21
 800aaa8:	d13e      	bne.n	800ab28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aab2:	d114      	bne.n	800aade <UART_Transmit_IT+0x48>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d110      	bne.n	800aade <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aad0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	1c9a      	adds	r2, r3, #2
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	621a      	str	r2, [r3, #32]
 800aadc:	e008      	b.n	800aaf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	1c59      	adds	r1, r3, #1
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	6211      	str	r1, [r2, #32]
 800aae8:	781a      	ldrb	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	4619      	mov	r1, r3
 800aafe:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10f      	bne.n	800ab24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68da      	ldr	r2, [r3, #12]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	e000      	b.n	800ab2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ab28:	2302      	movs	r3, #2
  }
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b082      	sub	sp, #8
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68da      	ldr	r2, [r3, #12]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2220      	movs	r2, #32
 800ab52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7ff fe5a 	bl	800a810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b08c      	sub	sp, #48	; 0x30
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b22      	cmp	r3, #34	; 0x22
 800ab78:	f040 80ab 	bne.w	800acd2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab84:	d117      	bne.n	800abb6 <UART_Receive_IT+0x50>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d113      	bne.n	800abb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abae:	1c9a      	adds	r2, r3, #2
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	629a      	str	r2, [r3, #40]	; 0x28
 800abb4:	e026      	b.n	800ac04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800abbc:	2300      	movs	r3, #0
 800abbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abc8:	d007      	beq.n	800abda <UART_Receive_IT+0x74>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10a      	bne.n	800abe8 <UART_Receive_IT+0x82>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d106      	bne.n	800abe8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	701a      	strb	r2, [r3, #0]
 800abe6:	e008      	b.n	800abfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	4619      	mov	r1, r3
 800ac12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d15a      	bne.n	800acce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68da      	ldr	r2, [r3, #12]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f022 0220 	bic.w	r2, r2, #32
 800ac26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68da      	ldr	r2, [r3, #12]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	695a      	ldr	r2, [r3, #20]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f022 0201 	bic.w	r2, r2, #1
 800ac46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d135      	bne.n	800acc4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	330c      	adds	r3, #12
 800ac64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	e853 3f00 	ldrex	r3, [r3]
 800ac6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f023 0310 	bic.w	r3, r3, #16
 800ac74:	627b      	str	r3, [r7, #36]	; 0x24
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	330c      	adds	r3, #12
 800ac7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac7e:	623a      	str	r2, [r7, #32]
 800ac80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac82:	69f9      	ldr	r1, [r7, #28]
 800ac84:	6a3a      	ldr	r2, [r7, #32]
 800ac86:	e841 2300 	strex	r3, r2, [r1]
 800ac8a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1e5      	bne.n	800ac5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0310 	and.w	r3, r3, #16
 800ac9c:	2b10      	cmp	r3, #16
 800ac9e:	d10a      	bne.n	800acb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aca0:	2300      	movs	r3, #0
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff fdbb 	bl	800a838 <HAL_UARTEx_RxEventCallback>
 800acc2:	e002      	b.n	800acca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7f7 fb9f 	bl	8002408 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	e002      	b.n	800acd4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	e000      	b.n	800acd4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800acd2:	2302      	movs	r3, #2
  }
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3730      	adds	r7, #48	; 0x30
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ace0:	b0c0      	sub	sp, #256	; 0x100
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ace8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800acf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acf8:	68d9      	ldr	r1, [r3, #12]
 800acfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	ea40 0301 	orr.w	r3, r0, r1
 800ad04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad20:	69db      	ldr	r3, [r3, #28]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ad28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ad34:	f021 010c 	bic.w	r1, r1, #12
 800ad38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ad42:	430b      	orrs	r3, r1
 800ad44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	695b      	ldr	r3, [r3, #20]
 800ad4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ad52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad56:	6999      	ldr	r1, [r3, #24]
 800ad58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	ea40 0301 	orr.w	r3, r0, r1
 800ad62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	4b8f      	ldr	r3, [pc, #572]	; (800afa8 <UART_SetConfig+0x2cc>)
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d005      	beq.n	800ad7c <UART_SetConfig+0xa0>
 800ad70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	4b8d      	ldr	r3, [pc, #564]	; (800afac <UART_SetConfig+0x2d0>)
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d104      	bne.n	800ad86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ad7c:	f7fd fad6 	bl	800832c <HAL_RCC_GetPCLK2Freq>
 800ad80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ad84:	e003      	b.n	800ad8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad86:	f7fd fabd 	bl	8008304 <HAL_RCC_GetPCLK1Freq>
 800ad8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad98:	f040 810c 	bne.w	800afb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ada0:	2200      	movs	r2, #0
 800ada2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ada6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800adaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800adae:	4622      	mov	r2, r4
 800adb0:	462b      	mov	r3, r5
 800adb2:	1891      	adds	r1, r2, r2
 800adb4:	65b9      	str	r1, [r7, #88]	; 0x58
 800adb6:	415b      	adcs	r3, r3
 800adb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800adbe:	4621      	mov	r1, r4
 800adc0:	eb12 0801 	adds.w	r8, r2, r1
 800adc4:	4629      	mov	r1, r5
 800adc6:	eb43 0901 	adc.w	r9, r3, r1
 800adca:	f04f 0200 	mov.w	r2, #0
 800adce:	f04f 0300 	mov.w	r3, #0
 800add2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800add6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800adda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800adde:	4690      	mov	r8, r2
 800ade0:	4699      	mov	r9, r3
 800ade2:	4623      	mov	r3, r4
 800ade4:	eb18 0303 	adds.w	r3, r8, r3
 800ade8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800adec:	462b      	mov	r3, r5
 800adee:	eb49 0303 	adc.w	r3, r9, r3
 800adf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800adf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ae06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	18db      	adds	r3, r3, r3
 800ae0e:	653b      	str	r3, [r7, #80]	; 0x50
 800ae10:	4613      	mov	r3, r2
 800ae12:	eb42 0303 	adc.w	r3, r2, r3
 800ae16:	657b      	str	r3, [r7, #84]	; 0x54
 800ae18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ae1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ae20:	f7f5 ff2a 	bl	8000c78 <__aeabi_uldivmod>
 800ae24:	4602      	mov	r2, r0
 800ae26:	460b      	mov	r3, r1
 800ae28:	4b61      	ldr	r3, [pc, #388]	; (800afb0 <UART_SetConfig+0x2d4>)
 800ae2a:	fba3 2302 	umull	r2, r3, r3, r2
 800ae2e:	095b      	lsrs	r3, r3, #5
 800ae30:	011c      	lsls	r4, r3, #4
 800ae32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ae40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ae44:	4642      	mov	r2, r8
 800ae46:	464b      	mov	r3, r9
 800ae48:	1891      	adds	r1, r2, r2
 800ae4a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ae4c:	415b      	adcs	r3, r3
 800ae4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ae54:	4641      	mov	r1, r8
 800ae56:	eb12 0a01 	adds.w	sl, r2, r1
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	eb43 0b01 	adc.w	fp, r3, r1
 800ae60:	f04f 0200 	mov.w	r2, #0
 800ae64:	f04f 0300 	mov.w	r3, #0
 800ae68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ae6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ae70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae74:	4692      	mov	sl, r2
 800ae76:	469b      	mov	fp, r3
 800ae78:	4643      	mov	r3, r8
 800ae7a:	eb1a 0303 	adds.w	r3, sl, r3
 800ae7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae82:	464b      	mov	r3, r9
 800ae84:	eb4b 0303 	adc.w	r3, fp, r3
 800ae88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ae9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aea0:	460b      	mov	r3, r1
 800aea2:	18db      	adds	r3, r3, r3
 800aea4:	643b      	str	r3, [r7, #64]	; 0x40
 800aea6:	4613      	mov	r3, r2
 800aea8:	eb42 0303 	adc.w	r3, r2, r3
 800aeac:	647b      	str	r3, [r7, #68]	; 0x44
 800aeae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aeb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aeb6:	f7f5 fedf 	bl	8000c78 <__aeabi_uldivmod>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4611      	mov	r1, r2
 800aec0:	4b3b      	ldr	r3, [pc, #236]	; (800afb0 <UART_SetConfig+0x2d4>)
 800aec2:	fba3 2301 	umull	r2, r3, r3, r1
 800aec6:	095b      	lsrs	r3, r3, #5
 800aec8:	2264      	movs	r2, #100	; 0x64
 800aeca:	fb02 f303 	mul.w	r3, r2, r3
 800aece:	1acb      	subs	r3, r1, r3
 800aed0:	00db      	lsls	r3, r3, #3
 800aed2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aed6:	4b36      	ldr	r3, [pc, #216]	; (800afb0 <UART_SetConfig+0x2d4>)
 800aed8:	fba3 2302 	umull	r2, r3, r3, r2
 800aedc:	095b      	lsrs	r3, r3, #5
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aee4:	441c      	add	r4, r3
 800aee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aef0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aef4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aef8:	4642      	mov	r2, r8
 800aefa:	464b      	mov	r3, r9
 800aefc:	1891      	adds	r1, r2, r2
 800aefe:	63b9      	str	r1, [r7, #56]	; 0x38
 800af00:	415b      	adcs	r3, r3
 800af02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800af08:	4641      	mov	r1, r8
 800af0a:	1851      	adds	r1, r2, r1
 800af0c:	6339      	str	r1, [r7, #48]	; 0x30
 800af0e:	4649      	mov	r1, r9
 800af10:	414b      	adcs	r3, r1
 800af12:	637b      	str	r3, [r7, #52]	; 0x34
 800af14:	f04f 0200 	mov.w	r2, #0
 800af18:	f04f 0300 	mov.w	r3, #0
 800af1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800af20:	4659      	mov	r1, fp
 800af22:	00cb      	lsls	r3, r1, #3
 800af24:	4651      	mov	r1, sl
 800af26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af2a:	4651      	mov	r1, sl
 800af2c:	00ca      	lsls	r2, r1, #3
 800af2e:	4610      	mov	r0, r2
 800af30:	4619      	mov	r1, r3
 800af32:	4603      	mov	r3, r0
 800af34:	4642      	mov	r2, r8
 800af36:	189b      	adds	r3, r3, r2
 800af38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af3c:	464b      	mov	r3, r9
 800af3e:	460a      	mov	r2, r1
 800af40:	eb42 0303 	adc.w	r3, r2, r3
 800af44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800af54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800af58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800af5c:	460b      	mov	r3, r1
 800af5e:	18db      	adds	r3, r3, r3
 800af60:	62bb      	str	r3, [r7, #40]	; 0x28
 800af62:	4613      	mov	r3, r2
 800af64:	eb42 0303 	adc.w	r3, r2, r3
 800af68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800af6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800af72:	f7f5 fe81 	bl	8000c78 <__aeabi_uldivmod>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <UART_SetConfig+0x2d4>)
 800af7c:	fba3 1302 	umull	r1, r3, r3, r2
 800af80:	095b      	lsrs	r3, r3, #5
 800af82:	2164      	movs	r1, #100	; 0x64
 800af84:	fb01 f303 	mul.w	r3, r1, r3
 800af88:	1ad3      	subs	r3, r2, r3
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	3332      	adds	r3, #50	; 0x32
 800af8e:	4a08      	ldr	r2, [pc, #32]	; (800afb0 <UART_SetConfig+0x2d4>)
 800af90:	fba2 2303 	umull	r2, r3, r2, r3
 800af94:	095b      	lsrs	r3, r3, #5
 800af96:	f003 0207 	and.w	r2, r3, #7
 800af9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4422      	add	r2, r4
 800afa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800afa4:	e105      	b.n	800b1b2 <UART_SetConfig+0x4d6>
 800afa6:	bf00      	nop
 800afa8:	40011000 	.word	0x40011000
 800afac:	40011400 	.word	0x40011400
 800afb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800afb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afb8:	2200      	movs	r2, #0
 800afba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800afbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800afc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800afc6:	4642      	mov	r2, r8
 800afc8:	464b      	mov	r3, r9
 800afca:	1891      	adds	r1, r2, r2
 800afcc:	6239      	str	r1, [r7, #32]
 800afce:	415b      	adcs	r3, r3
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
 800afd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800afd6:	4641      	mov	r1, r8
 800afd8:	1854      	adds	r4, r2, r1
 800afda:	4649      	mov	r1, r9
 800afdc:	eb43 0501 	adc.w	r5, r3, r1
 800afe0:	f04f 0200 	mov.w	r2, #0
 800afe4:	f04f 0300 	mov.w	r3, #0
 800afe8:	00eb      	lsls	r3, r5, #3
 800afea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800afee:	00e2      	lsls	r2, r4, #3
 800aff0:	4614      	mov	r4, r2
 800aff2:	461d      	mov	r5, r3
 800aff4:	4643      	mov	r3, r8
 800aff6:	18e3      	adds	r3, r4, r3
 800aff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800affc:	464b      	mov	r3, r9
 800affe:	eb45 0303 	adc.w	r3, r5, r3
 800b002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b012:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b016:	f04f 0200 	mov.w	r2, #0
 800b01a:	f04f 0300 	mov.w	r3, #0
 800b01e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b022:	4629      	mov	r1, r5
 800b024:	008b      	lsls	r3, r1, #2
 800b026:	4621      	mov	r1, r4
 800b028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b02c:	4621      	mov	r1, r4
 800b02e:	008a      	lsls	r2, r1, #2
 800b030:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b034:	f7f5 fe20 	bl	8000c78 <__aeabi_uldivmod>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4b60      	ldr	r3, [pc, #384]	; (800b1c0 <UART_SetConfig+0x4e4>)
 800b03e:	fba3 2302 	umull	r2, r3, r3, r2
 800b042:	095b      	lsrs	r3, r3, #5
 800b044:	011c      	lsls	r4, r3, #4
 800b046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b050:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b054:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b058:	4642      	mov	r2, r8
 800b05a:	464b      	mov	r3, r9
 800b05c:	1891      	adds	r1, r2, r2
 800b05e:	61b9      	str	r1, [r7, #24]
 800b060:	415b      	adcs	r3, r3
 800b062:	61fb      	str	r3, [r7, #28]
 800b064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b068:	4641      	mov	r1, r8
 800b06a:	1851      	adds	r1, r2, r1
 800b06c:	6139      	str	r1, [r7, #16]
 800b06e:	4649      	mov	r1, r9
 800b070:	414b      	adcs	r3, r1
 800b072:	617b      	str	r3, [r7, #20]
 800b074:	f04f 0200 	mov.w	r2, #0
 800b078:	f04f 0300 	mov.w	r3, #0
 800b07c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b080:	4659      	mov	r1, fp
 800b082:	00cb      	lsls	r3, r1, #3
 800b084:	4651      	mov	r1, sl
 800b086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b08a:	4651      	mov	r1, sl
 800b08c:	00ca      	lsls	r2, r1, #3
 800b08e:	4610      	mov	r0, r2
 800b090:	4619      	mov	r1, r3
 800b092:	4603      	mov	r3, r0
 800b094:	4642      	mov	r2, r8
 800b096:	189b      	adds	r3, r3, r2
 800b098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b09c:	464b      	mov	r3, r9
 800b09e:	460a      	mov	r2, r1
 800b0a0:	eb42 0303 	adc.w	r3, r2, r3
 800b0a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b0b4:	f04f 0200 	mov.w	r2, #0
 800b0b8:	f04f 0300 	mov.w	r3, #0
 800b0bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b0c0:	4649      	mov	r1, r9
 800b0c2:	008b      	lsls	r3, r1, #2
 800b0c4:	4641      	mov	r1, r8
 800b0c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0ca:	4641      	mov	r1, r8
 800b0cc:	008a      	lsls	r2, r1, #2
 800b0ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b0d2:	f7f5 fdd1 	bl	8000c78 <__aeabi_uldivmod>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4b39      	ldr	r3, [pc, #228]	; (800b1c0 <UART_SetConfig+0x4e4>)
 800b0dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b0e0:	095b      	lsrs	r3, r3, #5
 800b0e2:	2164      	movs	r1, #100	; 0x64
 800b0e4:	fb01 f303 	mul.w	r3, r1, r3
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	011b      	lsls	r3, r3, #4
 800b0ec:	3332      	adds	r3, #50	; 0x32
 800b0ee:	4a34      	ldr	r2, [pc, #208]	; (800b1c0 <UART_SetConfig+0x4e4>)
 800b0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f4:	095b      	lsrs	r3, r3, #5
 800b0f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0fa:	441c      	add	r4, r3
 800b0fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b100:	2200      	movs	r2, #0
 800b102:	673b      	str	r3, [r7, #112]	; 0x70
 800b104:	677a      	str	r2, [r7, #116]	; 0x74
 800b106:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b10a:	4642      	mov	r2, r8
 800b10c:	464b      	mov	r3, r9
 800b10e:	1891      	adds	r1, r2, r2
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	415b      	adcs	r3, r3
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b11a:	4641      	mov	r1, r8
 800b11c:	1851      	adds	r1, r2, r1
 800b11e:	6039      	str	r1, [r7, #0]
 800b120:	4649      	mov	r1, r9
 800b122:	414b      	adcs	r3, r1
 800b124:	607b      	str	r3, [r7, #4]
 800b126:	f04f 0200 	mov.w	r2, #0
 800b12a:	f04f 0300 	mov.w	r3, #0
 800b12e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b132:	4659      	mov	r1, fp
 800b134:	00cb      	lsls	r3, r1, #3
 800b136:	4651      	mov	r1, sl
 800b138:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b13c:	4651      	mov	r1, sl
 800b13e:	00ca      	lsls	r2, r1, #3
 800b140:	4610      	mov	r0, r2
 800b142:	4619      	mov	r1, r3
 800b144:	4603      	mov	r3, r0
 800b146:	4642      	mov	r2, r8
 800b148:	189b      	adds	r3, r3, r2
 800b14a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b14c:	464b      	mov	r3, r9
 800b14e:	460a      	mov	r2, r1
 800b150:	eb42 0303 	adc.w	r3, r2, r3
 800b154:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	663b      	str	r3, [r7, #96]	; 0x60
 800b160:	667a      	str	r2, [r7, #100]	; 0x64
 800b162:	f04f 0200 	mov.w	r2, #0
 800b166:	f04f 0300 	mov.w	r3, #0
 800b16a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b16e:	4649      	mov	r1, r9
 800b170:	008b      	lsls	r3, r1, #2
 800b172:	4641      	mov	r1, r8
 800b174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b178:	4641      	mov	r1, r8
 800b17a:	008a      	lsls	r2, r1, #2
 800b17c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b180:	f7f5 fd7a 	bl	8000c78 <__aeabi_uldivmod>
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	4b0d      	ldr	r3, [pc, #52]	; (800b1c0 <UART_SetConfig+0x4e4>)
 800b18a:	fba3 1302 	umull	r1, r3, r3, r2
 800b18e:	095b      	lsrs	r3, r3, #5
 800b190:	2164      	movs	r1, #100	; 0x64
 800b192:	fb01 f303 	mul.w	r3, r1, r3
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	011b      	lsls	r3, r3, #4
 800b19a:	3332      	adds	r3, #50	; 0x32
 800b19c:	4a08      	ldr	r2, [pc, #32]	; (800b1c0 <UART_SetConfig+0x4e4>)
 800b19e:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a2:	095b      	lsrs	r3, r3, #5
 800b1a4:	f003 020f 	and.w	r2, r3, #15
 800b1a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4422      	add	r2, r4
 800b1b0:	609a      	str	r2, [r3, #8]
}
 800b1b2:	bf00      	nop
 800b1b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1be:	bf00      	nop
 800b1c0:	51eb851f 	.word	0x51eb851f

0800b1c4 <atoi>:
 800b1c4:	220a      	movs	r2, #10
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	f001 ba16 	b.w	800c5f8 <strtol>

0800b1cc <__errno>:
 800b1cc:	4b01      	ldr	r3, [pc, #4]	; (800b1d4 <__errno+0x8>)
 800b1ce:	6818      	ldr	r0, [r3, #0]
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	200002c4 	.word	0x200002c4

0800b1d8 <gmtime>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4b0b      	ldr	r3, [pc, #44]	; (800b208 <gmtime+0x30>)
 800b1dc:	681d      	ldr	r5, [r3, #0]
 800b1de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	b953      	cbnz	r3, 800b1fa <gmtime+0x22>
 800b1e4:	2024      	movs	r0, #36	; 0x24
 800b1e6:	f000 f8e5 	bl	800b3b4 <malloc>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	63e8      	str	r0, [r5, #60]	; 0x3c
 800b1ee:	b920      	cbnz	r0, 800b1fa <gmtime+0x22>
 800b1f0:	4b06      	ldr	r3, [pc, #24]	; (800b20c <gmtime+0x34>)
 800b1f2:	4807      	ldr	r0, [pc, #28]	; (800b210 <gmtime+0x38>)
 800b1f4:	2139      	movs	r1, #57	; 0x39
 800b1f6:	f001 fc57 	bl	800caa8 <__assert_func>
 800b1fa:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b202:	f000 b807 	b.w	800b214 <gmtime_r>
 800b206:	bf00      	nop
 800b208:	200002c4 	.word	0x200002c4
 800b20c:	08010ec4 	.word	0x08010ec4
 800b210:	08010edb 	.word	0x08010edb

0800b214 <gmtime_r>:
 800b214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b218:	e9d0 6700 	ldrd	r6, r7, [r0]
 800b21c:	460c      	mov	r4, r1
 800b21e:	4a4f      	ldr	r2, [pc, #316]	; (800b35c <gmtime_r+0x148>)
 800b220:	2300      	movs	r3, #0
 800b222:	4630      	mov	r0, r6
 800b224:	4639      	mov	r1, r7
 800b226:	f7f5 fcd7 	bl	8000bd8 <__aeabi_ldivmod>
 800b22a:	4639      	mov	r1, r7
 800b22c:	4605      	mov	r5, r0
 800b22e:	4a4b      	ldr	r2, [pc, #300]	; (800b35c <gmtime_r+0x148>)
 800b230:	4630      	mov	r0, r6
 800b232:	2300      	movs	r3, #0
 800b234:	f7f5 fcd0 	bl	8000bd8 <__aeabi_ldivmod>
 800b238:	2a00      	cmp	r2, #0
 800b23a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800b23e:	bfb7      	itett	lt
 800b240:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800b244:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800b248:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800b24c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800b250:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800b254:	fbb2 f1f0 	udiv	r1, r2, r0
 800b258:	fb00 2211 	mls	r2, r0, r1, r2
 800b25c:	203c      	movs	r0, #60	; 0x3c
 800b25e:	60a1      	str	r1, [r4, #8]
 800b260:	fbb2 f1f0 	udiv	r1, r2, r0
 800b264:	fb00 2211 	mls	r2, r0, r1, r2
 800b268:	6061      	str	r1, [r4, #4]
 800b26a:	6022      	str	r2, [r4, #0]
 800b26c:	2107      	movs	r1, #7
 800b26e:	1cda      	adds	r2, r3, #3
 800b270:	fb92 f1f1 	sdiv	r1, r2, r1
 800b274:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b278:	1a52      	subs	r2, r2, r1
 800b27a:	bf48      	it	mi
 800b27c:	3207      	addmi	r2, #7
 800b27e:	4d38      	ldr	r5, [pc, #224]	; (800b360 <gmtime_r+0x14c>)
 800b280:	4838      	ldr	r0, [pc, #224]	; (800b364 <gmtime_r+0x150>)
 800b282:	61a2      	str	r2, [r4, #24]
 800b284:	2b00      	cmp	r3, #0
 800b286:	bfb7      	itett	lt
 800b288:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800b28c:	fb93 f5f5 	sdivge	r5, r3, r5
 800b290:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800b294:	fb92 f5f5 	sdivlt	r5, r2, r5
 800b298:	fb00 3005 	mla	r0, r0, r5, r3
 800b29c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800b2a0:	fbb0 f2f2 	udiv	r2, r0, r2
 800b2a4:	4402      	add	r2, r0
 800b2a6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800b2aa:	fbb0 f1f3 	udiv	r1, r0, r3
 800b2ae:	1a52      	subs	r2, r2, r1
 800b2b0:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b2b4:	492c      	ldr	r1, [pc, #176]	; (800b368 <gmtime_r+0x154>)
 800b2b6:	fbb0 f1f1 	udiv	r1, r0, r1
 800b2ba:	2764      	movs	r7, #100	; 0x64
 800b2bc:	1a52      	subs	r2, r2, r1
 800b2be:	fbb2 f1fc 	udiv	r1, r2, ip
 800b2c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2c6:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2ca:	1af3      	subs	r3, r6, r3
 800b2cc:	4403      	add	r3, r0
 800b2ce:	fb0c 3311 	mls	r3, ip, r1, r3
 800b2d2:	2299      	movs	r2, #153	; 0x99
 800b2d4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800b2d8:	f10e 0e02 	add.w	lr, lr, #2
 800b2dc:	f103 0c01 	add.w	ip, r3, #1
 800b2e0:	fbbe f0f2 	udiv	r0, lr, r2
 800b2e4:	4342      	muls	r2, r0
 800b2e6:	3202      	adds	r2, #2
 800b2e8:	f04f 0805 	mov.w	r8, #5
 800b2ec:	fbb2 f2f8 	udiv	r2, r2, r8
 800b2f0:	ebac 0c02 	sub.w	ip, ip, r2
 800b2f4:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800b2f8:	4596      	cmp	lr, r2
 800b2fa:	bf94      	ite	ls
 800b2fc:	2202      	movls	r2, #2
 800b2fe:	f06f 0209 	mvnhi.w	r2, #9
 800b302:	4410      	add	r0, r2
 800b304:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b308:	fb02 1505 	mla	r5, r2, r5, r1
 800b30c:	2801      	cmp	r0, #1
 800b30e:	bf98      	it	ls
 800b310:	3501      	addls	r5, #1
 800b312:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800b316:	d30d      	bcc.n	800b334 <gmtime_r+0x120>
 800b318:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b31c:	61e3      	str	r3, [r4, #28]
 800b31e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800b322:	2300      	movs	r3, #0
 800b324:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800b328:	f8c4 c00c 	str.w	ip, [r4, #12]
 800b32c:	6223      	str	r3, [r4, #32]
 800b32e:	4620      	mov	r0, r4
 800b330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b334:	078a      	lsls	r2, r1, #30
 800b336:	d102      	bne.n	800b33e <gmtime_r+0x12a>
 800b338:	fb07 1616 	mls	r6, r7, r6, r1
 800b33c:	b95e      	cbnz	r6, 800b356 <gmtime_r+0x142>
 800b33e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b342:	fbb1 f6f2 	udiv	r6, r1, r2
 800b346:	fb02 1216 	mls	r2, r2, r6, r1
 800b34a:	fab2 f282 	clz	r2, r2
 800b34e:	0952      	lsrs	r2, r2, #5
 800b350:	333b      	adds	r3, #59	; 0x3b
 800b352:	4413      	add	r3, r2
 800b354:	e7e2      	b.n	800b31c <gmtime_r+0x108>
 800b356:	2201      	movs	r2, #1
 800b358:	e7fa      	b.n	800b350 <gmtime_r+0x13c>
 800b35a:	bf00      	nop
 800b35c:	00015180 	.word	0x00015180
 800b360:	00023ab1 	.word	0x00023ab1
 800b364:	fffdc54f 	.word	0xfffdc54f
 800b368:	00023ab0 	.word	0x00023ab0

0800b36c <__libc_init_array>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	4d0d      	ldr	r5, [pc, #52]	; (800b3a4 <__libc_init_array+0x38>)
 800b370:	4c0d      	ldr	r4, [pc, #52]	; (800b3a8 <__libc_init_array+0x3c>)
 800b372:	1b64      	subs	r4, r4, r5
 800b374:	10a4      	asrs	r4, r4, #2
 800b376:	2600      	movs	r6, #0
 800b378:	42a6      	cmp	r6, r4
 800b37a:	d109      	bne.n	800b390 <__libc_init_array+0x24>
 800b37c:	4d0b      	ldr	r5, [pc, #44]	; (800b3ac <__libc_init_array+0x40>)
 800b37e:	4c0c      	ldr	r4, [pc, #48]	; (800b3b0 <__libc_init_array+0x44>)
 800b380:	f004 fc72 	bl	800fc68 <_init>
 800b384:	1b64      	subs	r4, r4, r5
 800b386:	10a4      	asrs	r4, r4, #2
 800b388:	2600      	movs	r6, #0
 800b38a:	42a6      	cmp	r6, r4
 800b38c:	d105      	bne.n	800b39a <__libc_init_array+0x2e>
 800b38e:	bd70      	pop	{r4, r5, r6, pc}
 800b390:	f855 3b04 	ldr.w	r3, [r5], #4
 800b394:	4798      	blx	r3
 800b396:	3601      	adds	r6, #1
 800b398:	e7ee      	b.n	800b378 <__libc_init_array+0xc>
 800b39a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b39e:	4798      	blx	r3
 800b3a0:	3601      	adds	r6, #1
 800b3a2:	e7f2      	b.n	800b38a <__libc_init_array+0x1e>
 800b3a4:	08011490 	.word	0x08011490
 800b3a8:	08011490 	.word	0x08011490
 800b3ac:	08011490 	.word	0x08011490
 800b3b0:	08011494 	.word	0x08011494

0800b3b4 <malloc>:
 800b3b4:	4b02      	ldr	r3, [pc, #8]	; (800b3c0 <malloc+0xc>)
 800b3b6:	4601      	mov	r1, r0
 800b3b8:	6818      	ldr	r0, [r3, #0]
 800b3ba:	f000 baf1 	b.w	800b9a0 <_malloc_r>
 800b3be:	bf00      	nop
 800b3c0:	200002c4 	.word	0x200002c4

0800b3c4 <free>:
 800b3c4:	4b02      	ldr	r3, [pc, #8]	; (800b3d0 <free+0xc>)
 800b3c6:	4601      	mov	r1, r0
 800b3c8:	6818      	ldr	r0, [r3, #0]
 800b3ca:	f000 ba7d 	b.w	800b8c8 <_free_r>
 800b3ce:	bf00      	nop
 800b3d0:	200002c4 	.word	0x200002c4

0800b3d4 <memset>:
 800b3d4:	4402      	add	r2, r0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d100      	bne.n	800b3de <memset+0xa>
 800b3dc:	4770      	bx	lr
 800b3de:	f803 1b01 	strb.w	r1, [r3], #1
 800b3e2:	e7f9      	b.n	800b3d8 <memset+0x4>

0800b3e4 <validate_structure>:
 800b3e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3e6:	6801      	ldr	r1, [r0, #0]
 800b3e8:	293b      	cmp	r1, #59	; 0x3b
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	d911      	bls.n	800b412 <validate_structure+0x2e>
 800b3ee:	223c      	movs	r2, #60	; 0x3c
 800b3f0:	4668      	mov	r0, sp
 800b3f2:	f001 fb87 	bl	800cb04 <div>
 800b3f6:	9a01      	ldr	r2, [sp, #4]
 800b3f8:	6863      	ldr	r3, [r4, #4]
 800b3fa:	9900      	ldr	r1, [sp, #0]
 800b3fc:	2a00      	cmp	r2, #0
 800b3fe:	440b      	add	r3, r1
 800b400:	6063      	str	r3, [r4, #4]
 800b402:	bfbb      	ittet	lt
 800b404:	323c      	addlt	r2, #60	; 0x3c
 800b406:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b40a:	6022      	strge	r2, [r4, #0]
 800b40c:	6022      	strlt	r2, [r4, #0]
 800b40e:	bfb8      	it	lt
 800b410:	6063      	strlt	r3, [r4, #4]
 800b412:	6861      	ldr	r1, [r4, #4]
 800b414:	293b      	cmp	r1, #59	; 0x3b
 800b416:	d911      	bls.n	800b43c <validate_structure+0x58>
 800b418:	223c      	movs	r2, #60	; 0x3c
 800b41a:	4668      	mov	r0, sp
 800b41c:	f001 fb72 	bl	800cb04 <div>
 800b420:	9a01      	ldr	r2, [sp, #4]
 800b422:	68a3      	ldr	r3, [r4, #8]
 800b424:	9900      	ldr	r1, [sp, #0]
 800b426:	2a00      	cmp	r2, #0
 800b428:	440b      	add	r3, r1
 800b42a:	60a3      	str	r3, [r4, #8]
 800b42c:	bfbb      	ittet	lt
 800b42e:	323c      	addlt	r2, #60	; 0x3c
 800b430:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b434:	6062      	strge	r2, [r4, #4]
 800b436:	6062      	strlt	r2, [r4, #4]
 800b438:	bfb8      	it	lt
 800b43a:	60a3      	strlt	r3, [r4, #8]
 800b43c:	68a1      	ldr	r1, [r4, #8]
 800b43e:	2917      	cmp	r1, #23
 800b440:	d911      	bls.n	800b466 <validate_structure+0x82>
 800b442:	2218      	movs	r2, #24
 800b444:	4668      	mov	r0, sp
 800b446:	f001 fb5d 	bl	800cb04 <div>
 800b44a:	9a01      	ldr	r2, [sp, #4]
 800b44c:	68e3      	ldr	r3, [r4, #12]
 800b44e:	9900      	ldr	r1, [sp, #0]
 800b450:	2a00      	cmp	r2, #0
 800b452:	440b      	add	r3, r1
 800b454:	60e3      	str	r3, [r4, #12]
 800b456:	bfbb      	ittet	lt
 800b458:	3218      	addlt	r2, #24
 800b45a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b45e:	60a2      	strge	r2, [r4, #8]
 800b460:	60a2      	strlt	r2, [r4, #8]
 800b462:	bfb8      	it	lt
 800b464:	60e3      	strlt	r3, [r4, #12]
 800b466:	6921      	ldr	r1, [r4, #16]
 800b468:	290b      	cmp	r1, #11
 800b46a:	d911      	bls.n	800b490 <validate_structure+0xac>
 800b46c:	220c      	movs	r2, #12
 800b46e:	4668      	mov	r0, sp
 800b470:	f001 fb48 	bl	800cb04 <div>
 800b474:	9a01      	ldr	r2, [sp, #4]
 800b476:	6963      	ldr	r3, [r4, #20]
 800b478:	9900      	ldr	r1, [sp, #0]
 800b47a:	2a00      	cmp	r2, #0
 800b47c:	440b      	add	r3, r1
 800b47e:	6163      	str	r3, [r4, #20]
 800b480:	bfbb      	ittet	lt
 800b482:	320c      	addlt	r2, #12
 800b484:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b488:	6122      	strge	r2, [r4, #16]
 800b48a:	6122      	strlt	r2, [r4, #16]
 800b48c:	bfb8      	it	lt
 800b48e:	6163      	strlt	r3, [r4, #20]
 800b490:	6963      	ldr	r3, [r4, #20]
 800b492:	0798      	lsls	r0, r3, #30
 800b494:	d120      	bne.n	800b4d8 <validate_structure+0xf4>
 800b496:	2164      	movs	r1, #100	; 0x64
 800b498:	fb93 f2f1 	sdiv	r2, r3, r1
 800b49c:	fb01 3212 	mls	r2, r1, r2, r3
 800b4a0:	b9e2      	cbnz	r2, 800b4dc <validate_structure+0xf8>
 800b4a2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800b4a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b4aa:	fb93 f1f2 	sdiv	r1, r3, r2
 800b4ae:	fb02 3311 	mls	r3, r2, r1, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	bf14      	ite	ne
 800b4b6:	231c      	movne	r3, #28
 800b4b8:	231d      	moveq	r3, #29
 800b4ba:	68e2      	ldr	r2, [r4, #12]
 800b4bc:	2a00      	cmp	r2, #0
 800b4be:	dc0f      	bgt.n	800b4e0 <validate_structure+0xfc>
 800b4c0:	4f33      	ldr	r7, [pc, #204]	; (800b590 <validate_structure+0x1ac>)
 800b4c2:	260b      	movs	r6, #11
 800b4c4:	2064      	movs	r0, #100	; 0x64
 800b4c6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800b4ca:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b4ce:	f1bc 0f00 	cmp.w	ip, #0
 800b4d2:	dd31      	ble.n	800b538 <validate_structure+0x154>
 800b4d4:	b003      	add	sp, #12
 800b4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4d8:	231c      	movs	r3, #28
 800b4da:	e7ee      	b.n	800b4ba <validate_structure+0xd6>
 800b4dc:	231d      	movs	r3, #29
 800b4de:	e7ec      	b.n	800b4ba <validate_structure+0xd6>
 800b4e0:	4e2b      	ldr	r6, [pc, #172]	; (800b590 <validate_structure+0x1ac>)
 800b4e2:	2700      	movs	r7, #0
 800b4e4:	2064      	movs	r0, #100	; 0x64
 800b4e6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800b4ea:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800b4ee:	2a01      	cmp	r2, #1
 800b4f0:	bf14      	ite	ne
 800b4f2:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800b4f6:	469c      	moveq	ip, r3
 800b4f8:	4561      	cmp	r1, ip
 800b4fa:	ddeb      	ble.n	800b4d4 <validate_structure+0xf0>
 800b4fc:	3201      	adds	r2, #1
 800b4fe:	eba1 010c 	sub.w	r1, r1, ip
 800b502:	2a0c      	cmp	r2, #12
 800b504:	60e1      	str	r1, [r4, #12]
 800b506:	6122      	str	r2, [r4, #16]
 800b508:	d1ef      	bne.n	800b4ea <validate_structure+0x106>
 800b50a:	6963      	ldr	r3, [r4, #20]
 800b50c:	1c5a      	adds	r2, r3, #1
 800b50e:	0791      	lsls	r1, r2, #30
 800b510:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800b514:	d137      	bne.n	800b586 <validate_structure+0x1a2>
 800b516:	fb92 f1f0 	sdiv	r1, r2, r0
 800b51a:	fb00 2211 	mls	r2, r0, r1, r2
 800b51e:	2a00      	cmp	r2, #0
 800b520:	d133      	bne.n	800b58a <validate_structure+0x1a6>
 800b522:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800b526:	fb93 f2f5 	sdiv	r2, r3, r5
 800b52a:	fb05 3312 	mls	r3, r5, r2, r3
 800b52e:	2b00      	cmp	r3, #0
 800b530:	bf14      	ite	ne
 800b532:	231c      	movne	r3, #28
 800b534:	231d      	moveq	r3, #29
 800b536:	e7d8      	b.n	800b4ea <validate_structure+0x106>
 800b538:	6921      	ldr	r1, [r4, #16]
 800b53a:	3901      	subs	r1, #1
 800b53c:	6121      	str	r1, [r4, #16]
 800b53e:	3101      	adds	r1, #1
 800b540:	d114      	bne.n	800b56c <validate_structure+0x188>
 800b542:	6963      	ldr	r3, [r4, #20]
 800b544:	1e5a      	subs	r2, r3, #1
 800b546:	0791      	lsls	r1, r2, #30
 800b548:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800b54c:	d117      	bne.n	800b57e <validate_structure+0x19a>
 800b54e:	fb92 f1f0 	sdiv	r1, r2, r0
 800b552:	fb00 2211 	mls	r2, r0, r1, r2
 800b556:	b9a2      	cbnz	r2, 800b582 <validate_structure+0x19e>
 800b558:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800b55c:	fb93 f2f5 	sdiv	r2, r3, r5
 800b560:	fb05 3312 	mls	r3, r5, r2, r3
 800b564:	2b00      	cmp	r3, #0
 800b566:	bf14      	ite	ne
 800b568:	231c      	movne	r3, #28
 800b56a:	231d      	moveq	r3, #29
 800b56c:	6922      	ldr	r2, [r4, #16]
 800b56e:	2a01      	cmp	r2, #1
 800b570:	bf14      	ite	ne
 800b572:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800b576:	461a      	moveq	r2, r3
 800b578:	4462      	add	r2, ip
 800b57a:	60e2      	str	r2, [r4, #12]
 800b57c:	e7a5      	b.n	800b4ca <validate_structure+0xe6>
 800b57e:	231c      	movs	r3, #28
 800b580:	e7f4      	b.n	800b56c <validate_structure+0x188>
 800b582:	231d      	movs	r3, #29
 800b584:	e7f2      	b.n	800b56c <validate_structure+0x188>
 800b586:	231c      	movs	r3, #28
 800b588:	e7af      	b.n	800b4ea <validate_structure+0x106>
 800b58a:	231d      	movs	r3, #29
 800b58c:	e7ad      	b.n	800b4ea <validate_structure+0x106>
 800b58e:	bf00      	nop
 800b590:	08010f3c 	.word	0x08010f3c

0800b594 <mktime>:
 800b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	b085      	sub	sp, #20
 800b59a:	4607      	mov	r7, r0
 800b59c:	f002 f998 	bl	800d8d0 <__gettzinfo>
 800b5a0:	4681      	mov	r9, r0
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	f7ff ff1e 	bl	800b3e4 <validate_structure>
 800b5a8:	e9d7 4000 	ldrd	r4, r0, [r7]
 800b5ac:	233c      	movs	r3, #60	; 0x3c
 800b5ae:	fb03 4400 	mla	r4, r3, r0, r4
 800b5b2:	68b8      	ldr	r0, [r7, #8]
 800b5b4:	4abc      	ldr	r2, [pc, #752]	; (800b8a8 <mktime+0x314>)
 800b5b6:	697e      	ldr	r6, [r7, #20]
 800b5b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b5bc:	fb03 4400 	mla	r4, r3, r0, r4
 800b5c0:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800b5c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b5c8:	3d01      	subs	r5, #1
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	4415      	add	r5, r2
 800b5ce:	dd11      	ble.n	800b5f4 <mktime+0x60>
 800b5d0:	07b1      	lsls	r1, r6, #30
 800b5d2:	d10f      	bne.n	800b5f4 <mktime+0x60>
 800b5d4:	2264      	movs	r2, #100	; 0x64
 800b5d6:	fb96 f3f2 	sdiv	r3, r6, r2
 800b5da:	fb02 6313 	mls	r3, r2, r3, r6
 800b5de:	b943      	cbnz	r3, 800b5f2 <mktime+0x5e>
 800b5e0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800b5e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b5e8:	fb93 f1f2 	sdiv	r1, r3, r2
 800b5ec:	fb02 3311 	mls	r3, r2, r1, r3
 800b5f0:	b903      	cbnz	r3, 800b5f4 <mktime+0x60>
 800b5f2:	3501      	adds	r5, #1
 800b5f4:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800b5f8:	3310      	adds	r3, #16
 800b5fa:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b5fe:	4293      	cmp	r3, r2
 800b600:	61fd      	str	r5, [r7, #28]
 800b602:	f200 815d 	bhi.w	800b8c0 <mktime+0x32c>
 800b606:	2e46      	cmp	r6, #70	; 0x46
 800b608:	dd71      	ble.n	800b6ee <mktime+0x15a>
 800b60a:	2346      	movs	r3, #70	; 0x46
 800b60c:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b610:	2164      	movs	r1, #100	; 0x64
 800b612:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b616:	079a      	lsls	r2, r3, #30
 800b618:	d163      	bne.n	800b6e2 <mktime+0x14e>
 800b61a:	fb93 f2f1 	sdiv	r2, r3, r1
 800b61e:	fb01 3212 	mls	r2, r1, r2, r3
 800b622:	2a00      	cmp	r2, #0
 800b624:	d160      	bne.n	800b6e8 <mktime+0x154>
 800b626:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800b62a:	fb92 fef0 	sdiv	lr, r2, r0
 800b62e:	fb00 221e 	mls	r2, r0, lr, r2
 800b632:	2a00      	cmp	r2, #0
 800b634:	bf14      	ite	ne
 800b636:	4662      	movne	r2, ip
 800b638:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800b63c:	3301      	adds	r3, #1
 800b63e:	429e      	cmp	r6, r3
 800b640:	4415      	add	r5, r2
 800b642:	d1e8      	bne.n	800b616 <mktime+0x82>
 800b644:	4b99      	ldr	r3, [pc, #612]	; (800b8ac <mktime+0x318>)
 800b646:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800b64a:	fbc5 4803 	smlal	r4, r8, r5, r3
 800b64e:	f001 f887 	bl	800c760 <__tz_lock>
 800b652:	f001 f891 	bl	800c778 <_tzset_unlocked>
 800b656:	4b96      	ldr	r3, [pc, #600]	; (800b8b0 <mktime+0x31c>)
 800b658:	f8d3 b000 	ldr.w	fp, [r3]
 800b65c:	f1bb 0f00 	cmp.w	fp, #0
 800b660:	d039      	beq.n	800b6d6 <mktime+0x142>
 800b662:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800b666:	6978      	ldr	r0, [r7, #20]
 800b668:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b66c:	f1bb 0f01 	cmp.w	fp, #1
 800b670:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800b674:	46da      	mov	sl, fp
 800b676:	bfa8      	it	ge
 800b678:	f04f 0a01 	movge.w	sl, #1
 800b67c:	4283      	cmp	r3, r0
 800b67e:	d178      	bne.n	800b772 <mktime+0x1de>
 800b680:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800b684:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800b688:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800b68c:	1a5b      	subs	r3, r3, r1
 800b68e:	9302      	str	r3, [sp, #8]
 800b690:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800b694:	9303      	str	r3, [sp, #12]
 800b696:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800b69a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	ebb3 0c02 	subs.w	ip, r3, r2
 800b6a4:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800b6a8:	4564      	cmp	r4, ip
 800b6aa:	eb78 0300 	sbcs.w	r3, r8, r0
 800b6ae:	da66      	bge.n	800b77e <mktime+0x1ea>
 800b6b0:	f8d9 3000 	ldr.w	r3, [r9]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d06f      	beq.n	800b798 <mktime+0x204>
 800b6b8:	9b02      	ldr	r3, [sp, #8]
 800b6ba:	429c      	cmp	r4, r3
 800b6bc:	9b03      	ldr	r3, [sp, #12]
 800b6be:	eb78 0303 	sbcs.w	r3, r8, r3
 800b6c2:	db03      	blt.n	800b6cc <mktime+0x138>
 800b6c4:	4564      	cmp	r4, ip
 800b6c6:	eb78 0300 	sbcs.w	r3, r8, r0
 800b6ca:	db6b      	blt.n	800b7a4 <mktime+0x210>
 800b6cc:	f1bb 0f00 	cmp.w	fp, #0
 800b6d0:	f04f 0b00 	mov.w	fp, #0
 800b6d4:	da6b      	bge.n	800b7ae <mktime+0x21a>
 800b6d6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800b6da:	190c      	adds	r4, r1, r4
 800b6dc:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800b6e0:	e0a9      	b.n	800b836 <mktime+0x2a2>
 800b6e2:	f240 126d 	movw	r2, #365	; 0x16d
 800b6e6:	e7a9      	b.n	800b63c <mktime+0xa8>
 800b6e8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800b6ec:	e7a6      	b.n	800b63c <mktime+0xa8>
 800b6ee:	d0a9      	beq.n	800b644 <mktime+0xb0>
 800b6f0:	2345      	movs	r3, #69	; 0x45
 800b6f2:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b6f6:	2164      	movs	r1, #100	; 0x64
 800b6f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b6fc:	e012      	b.n	800b724 <mktime+0x190>
 800b6fe:	bb62      	cbnz	r2, 800b75a <mktime+0x1c6>
 800b700:	fb93 f2f1 	sdiv	r2, r3, r1
 800b704:	fb01 3212 	mls	r2, r1, r2, r3
 800b708:	bb52      	cbnz	r2, 800b760 <mktime+0x1cc>
 800b70a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800b70e:	fb92 fef0 	sdiv	lr, r2, r0
 800b712:	fb00 221e 	mls	r2, r0, lr, r2
 800b716:	2a00      	cmp	r2, #0
 800b718:	bf14      	ite	ne
 800b71a:	4662      	movne	r2, ip
 800b71c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800b720:	1aad      	subs	r5, r5, r2
 800b722:	3b01      	subs	r3, #1
 800b724:	429e      	cmp	r6, r3
 800b726:	f003 0203 	and.w	r2, r3, #3
 800b72a:	dbe8      	blt.n	800b6fe <mktime+0x16a>
 800b72c:	b9da      	cbnz	r2, 800b766 <mktime+0x1d2>
 800b72e:	2264      	movs	r2, #100	; 0x64
 800b730:	fb96 f3f2 	sdiv	r3, r6, r2
 800b734:	fb02 6313 	mls	r3, r2, r3, r6
 800b738:	b9c3      	cbnz	r3, 800b76c <mktime+0x1d8>
 800b73a:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800b73e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b742:	fb93 f1f2 	sdiv	r1, r3, r2
 800b746:	fb02 3311 	mls	r3, r2, r1, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f240 136d 	movw	r3, #365	; 0x16d
 800b750:	bf08      	it	eq
 800b752:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800b756:	1aed      	subs	r5, r5, r3
 800b758:	e774      	b.n	800b644 <mktime+0xb0>
 800b75a:	f240 126d 	movw	r2, #365	; 0x16d
 800b75e:	e7df      	b.n	800b720 <mktime+0x18c>
 800b760:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800b764:	e7dc      	b.n	800b720 <mktime+0x18c>
 800b766:	f240 136d 	movw	r3, #365	; 0x16d
 800b76a:	e7f4      	b.n	800b756 <mktime+0x1c2>
 800b76c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800b770:	e7f1      	b.n	800b756 <mktime+0x1c2>
 800b772:	f000 ff4b 	bl	800c60c <__tzcalc_limits>
 800b776:	2800      	cmp	r0, #0
 800b778:	d182      	bne.n	800b680 <mktime+0xec>
 800b77a:	46d3      	mov	fp, sl
 800b77c:	e050      	b.n	800b820 <mktime+0x28c>
 800b77e:	9b01      	ldr	r3, [sp, #4]
 800b780:	1a5b      	subs	r3, r3, r1
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800b788:	eb6e 0e03 	sbc.w	lr, lr, r3
 800b78c:	9b01      	ldr	r3, [sp, #4]
 800b78e:	429c      	cmp	r4, r3
 800b790:	eb78 030e 	sbcs.w	r3, r8, lr
 800b794:	dbf1      	blt.n	800b77a <mktime+0x1e6>
 800b796:	e78b      	b.n	800b6b0 <mktime+0x11c>
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	429c      	cmp	r4, r3
 800b79c:	9b03      	ldr	r3, [sp, #12]
 800b79e:	eb78 0303 	sbcs.w	r3, r8, r3
 800b7a2:	db8f      	blt.n	800b6c4 <mktime+0x130>
 800b7a4:	f1bb 0f00 	cmp.w	fp, #0
 800b7a8:	db3e      	blt.n	800b828 <mktime+0x294>
 800b7aa:	f04f 0b01 	mov.w	fp, #1
 800b7ae:	ea8a 0a0b 	eor.w	sl, sl, fp
 800b7b2:	f1ba 0f01 	cmp.w	sl, #1
 800b7b6:	d133      	bne.n	800b820 <mktime+0x28c>
 800b7b8:	f1bb 0f00 	cmp.w	fp, #0
 800b7bc:	d04e      	beq.n	800b85c <mktime+0x2c8>
 800b7be:	1a52      	subs	r2, r2, r1
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	1914      	adds	r4, r2, r4
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800b7d2:	f7ff fe07 	bl	800b3e4 <validate_structure>
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	ebb2 020a 	subs.w	r2, r2, sl
 800b7dc:	d020      	beq.n	800b820 <mktime+0x28c>
 800b7de:	2a01      	cmp	r2, #1
 800b7e0:	dc3e      	bgt.n	800b860 <mktime+0x2cc>
 800b7e2:	1c90      	adds	r0, r2, #2
 800b7e4:	bfd8      	it	le
 800b7e6:	2201      	movle	r2, #1
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	18d3      	adds	r3, r2, r3
 800b7ec:	4415      	add	r5, r2
 800b7ee:	d540      	bpl.n	800b872 <mktime+0x2de>
 800b7f0:	1e73      	subs	r3, r6, #1
 800b7f2:	0799      	lsls	r1, r3, #30
 800b7f4:	d137      	bne.n	800b866 <mktime+0x2d2>
 800b7f6:	2264      	movs	r2, #100	; 0x64
 800b7f8:	fb93 f1f2 	sdiv	r1, r3, r2
 800b7fc:	fb02 3311 	mls	r3, r2, r1, r3
 800b800:	bba3      	cbnz	r3, 800b86c <mktime+0x2d8>
 800b802:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b806:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800b80a:	fb96 f2f3 	sdiv	r2, r6, r3
 800b80e:	fb03 6612 	mls	r6, r3, r2, r6
 800b812:	2e00      	cmp	r6, #0
 800b814:	f240 136d 	movw	r3, #365	; 0x16d
 800b818:	bf18      	it	ne
 800b81a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800b81e:	61fb      	str	r3, [r7, #28]
 800b820:	f1bb 0f01 	cmp.w	fp, #1
 800b824:	f47f af57 	bne.w	800b6d6 <mktime+0x142>
 800b828:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800b82c:	190c      	adds	r4, r1, r4
 800b82e:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800b832:	f04f 0b01 	mov.w	fp, #1
 800b836:	f000 ff99 	bl	800c76c <__tz_unlock>
 800b83a:	3504      	adds	r5, #4
 800b83c:	2307      	movs	r3, #7
 800b83e:	fb95 f3f3 	sdiv	r3, r5, r3
 800b842:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b846:	1aed      	subs	r5, r5, r3
 800b848:	bf48      	it	mi
 800b84a:	3507      	addmi	r5, #7
 800b84c:	f8c7 b020 	str.w	fp, [r7, #32]
 800b850:	61bd      	str	r5, [r7, #24]
 800b852:	4620      	mov	r0, r4
 800b854:	4641      	mov	r1, r8
 800b856:	b005      	add	sp, #20
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	1a8a      	subs	r2, r1, r2
 800b85e:	e7af      	b.n	800b7c0 <mktime+0x22c>
 800b860:	f04f 32ff 	mov.w	r2, #4294967295
 800b864:	e7c0      	b.n	800b7e8 <mktime+0x254>
 800b866:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800b86a:	e7d8      	b.n	800b81e <mktime+0x28a>
 800b86c:	f240 136d 	movw	r3, #365	; 0x16d
 800b870:	e7d5      	b.n	800b81e <mktime+0x28a>
 800b872:	07b2      	lsls	r2, r6, #30
 800b874:	d11e      	bne.n	800b8b4 <mktime+0x320>
 800b876:	2164      	movs	r1, #100	; 0x64
 800b878:	fb96 f2f1 	sdiv	r2, r6, r1
 800b87c:	fb01 6212 	mls	r2, r1, r2, r6
 800b880:	b9da      	cbnz	r2, 800b8ba <mktime+0x326>
 800b882:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b886:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800b88a:	fb96 f1f2 	sdiv	r1, r6, r2
 800b88e:	fb02 6611 	mls	r6, r2, r1, r6
 800b892:	2e00      	cmp	r6, #0
 800b894:	f240 126d 	movw	r2, #365	; 0x16d
 800b898:	bf08      	it	eq
 800b89a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	bfa8      	it	ge
 800b8a2:	1a9b      	subge	r3, r3, r2
 800b8a4:	e7bb      	b.n	800b81e <mktime+0x28a>
 800b8a6:	bf00      	nop
 800b8a8:	08010f6c 	.word	0x08010f6c
 800b8ac:	00015180 	.word	0x00015180
 800b8b0:	20000d04 	.word	0x20000d04
 800b8b4:	f240 126d 	movw	r2, #365	; 0x16d
 800b8b8:	e7f1      	b.n	800b89e <mktime+0x30a>
 800b8ba:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800b8be:	e7ee      	b.n	800b89e <mktime+0x30a>
 800b8c0:	f04f 34ff 	mov.w	r4, #4294967295
 800b8c4:	46a0      	mov	r8, r4
 800b8c6:	e7c4      	b.n	800b852 <mktime+0x2be>

0800b8c8 <_free_r>:
 800b8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8ca:	2900      	cmp	r1, #0
 800b8cc:	d044      	beq.n	800b958 <_free_r+0x90>
 800b8ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8d2:	9001      	str	r0, [sp, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b8da:	bfb8      	it	lt
 800b8dc:	18e4      	addlt	r4, r4, r3
 800b8de:	f002 f825 	bl	800d92c <__malloc_lock>
 800b8e2:	4a1e      	ldr	r2, [pc, #120]	; (800b95c <_free_r+0x94>)
 800b8e4:	9801      	ldr	r0, [sp, #4]
 800b8e6:	6813      	ldr	r3, [r2, #0]
 800b8e8:	b933      	cbnz	r3, 800b8f8 <_free_r+0x30>
 800b8ea:	6063      	str	r3, [r4, #4]
 800b8ec:	6014      	str	r4, [r2, #0]
 800b8ee:	b003      	add	sp, #12
 800b8f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8f4:	f002 b820 	b.w	800d938 <__malloc_unlock>
 800b8f8:	42a3      	cmp	r3, r4
 800b8fa:	d908      	bls.n	800b90e <_free_r+0x46>
 800b8fc:	6825      	ldr	r5, [r4, #0]
 800b8fe:	1961      	adds	r1, r4, r5
 800b900:	428b      	cmp	r3, r1
 800b902:	bf01      	itttt	eq
 800b904:	6819      	ldreq	r1, [r3, #0]
 800b906:	685b      	ldreq	r3, [r3, #4]
 800b908:	1949      	addeq	r1, r1, r5
 800b90a:	6021      	streq	r1, [r4, #0]
 800b90c:	e7ed      	b.n	800b8ea <_free_r+0x22>
 800b90e:	461a      	mov	r2, r3
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	b10b      	cbz	r3, 800b918 <_free_r+0x50>
 800b914:	42a3      	cmp	r3, r4
 800b916:	d9fa      	bls.n	800b90e <_free_r+0x46>
 800b918:	6811      	ldr	r1, [r2, #0]
 800b91a:	1855      	adds	r5, r2, r1
 800b91c:	42a5      	cmp	r5, r4
 800b91e:	d10b      	bne.n	800b938 <_free_r+0x70>
 800b920:	6824      	ldr	r4, [r4, #0]
 800b922:	4421      	add	r1, r4
 800b924:	1854      	adds	r4, r2, r1
 800b926:	42a3      	cmp	r3, r4
 800b928:	6011      	str	r1, [r2, #0]
 800b92a:	d1e0      	bne.n	800b8ee <_free_r+0x26>
 800b92c:	681c      	ldr	r4, [r3, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	6053      	str	r3, [r2, #4]
 800b932:	4421      	add	r1, r4
 800b934:	6011      	str	r1, [r2, #0]
 800b936:	e7da      	b.n	800b8ee <_free_r+0x26>
 800b938:	d902      	bls.n	800b940 <_free_r+0x78>
 800b93a:	230c      	movs	r3, #12
 800b93c:	6003      	str	r3, [r0, #0]
 800b93e:	e7d6      	b.n	800b8ee <_free_r+0x26>
 800b940:	6825      	ldr	r5, [r4, #0]
 800b942:	1961      	adds	r1, r4, r5
 800b944:	428b      	cmp	r3, r1
 800b946:	bf04      	itt	eq
 800b948:	6819      	ldreq	r1, [r3, #0]
 800b94a:	685b      	ldreq	r3, [r3, #4]
 800b94c:	6063      	str	r3, [r4, #4]
 800b94e:	bf04      	itt	eq
 800b950:	1949      	addeq	r1, r1, r5
 800b952:	6021      	streq	r1, [r4, #0]
 800b954:	6054      	str	r4, [r2, #4]
 800b956:	e7ca      	b.n	800b8ee <_free_r+0x26>
 800b958:	b003      	add	sp, #12
 800b95a:	bd30      	pop	{r4, r5, pc}
 800b95c:	20000ce0 	.word	0x20000ce0

0800b960 <sbrk_aligned>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	4e0e      	ldr	r6, [pc, #56]	; (800b99c <sbrk_aligned+0x3c>)
 800b964:	460c      	mov	r4, r1
 800b966:	6831      	ldr	r1, [r6, #0]
 800b968:	4605      	mov	r5, r0
 800b96a:	b911      	cbnz	r1, 800b972 <sbrk_aligned+0x12>
 800b96c:	f000 fcf6 	bl	800c35c <_sbrk_r>
 800b970:	6030      	str	r0, [r6, #0]
 800b972:	4621      	mov	r1, r4
 800b974:	4628      	mov	r0, r5
 800b976:	f000 fcf1 	bl	800c35c <_sbrk_r>
 800b97a:	1c43      	adds	r3, r0, #1
 800b97c:	d00a      	beq.n	800b994 <sbrk_aligned+0x34>
 800b97e:	1cc4      	adds	r4, r0, #3
 800b980:	f024 0403 	bic.w	r4, r4, #3
 800b984:	42a0      	cmp	r0, r4
 800b986:	d007      	beq.n	800b998 <sbrk_aligned+0x38>
 800b988:	1a21      	subs	r1, r4, r0
 800b98a:	4628      	mov	r0, r5
 800b98c:	f000 fce6 	bl	800c35c <_sbrk_r>
 800b990:	3001      	adds	r0, #1
 800b992:	d101      	bne.n	800b998 <sbrk_aligned+0x38>
 800b994:	f04f 34ff 	mov.w	r4, #4294967295
 800b998:	4620      	mov	r0, r4
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	20000ce4 	.word	0x20000ce4

0800b9a0 <_malloc_r>:
 800b9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a4:	1ccd      	adds	r5, r1, #3
 800b9a6:	f025 0503 	bic.w	r5, r5, #3
 800b9aa:	3508      	adds	r5, #8
 800b9ac:	2d0c      	cmp	r5, #12
 800b9ae:	bf38      	it	cc
 800b9b0:	250c      	movcc	r5, #12
 800b9b2:	2d00      	cmp	r5, #0
 800b9b4:	4607      	mov	r7, r0
 800b9b6:	db01      	blt.n	800b9bc <_malloc_r+0x1c>
 800b9b8:	42a9      	cmp	r1, r5
 800b9ba:	d905      	bls.n	800b9c8 <_malloc_r+0x28>
 800b9bc:	230c      	movs	r3, #12
 800b9be:	603b      	str	r3, [r7, #0]
 800b9c0:	2600      	movs	r6, #0
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c8:	4e2e      	ldr	r6, [pc, #184]	; (800ba84 <_malloc_r+0xe4>)
 800b9ca:	f001 ffaf 	bl	800d92c <__malloc_lock>
 800b9ce:	6833      	ldr	r3, [r6, #0]
 800b9d0:	461c      	mov	r4, r3
 800b9d2:	bb34      	cbnz	r4, 800ba22 <_malloc_r+0x82>
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	f7ff ffc2 	bl	800b960 <sbrk_aligned>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	4604      	mov	r4, r0
 800b9e0:	d14d      	bne.n	800ba7e <_malloc_r+0xde>
 800b9e2:	6834      	ldr	r4, [r6, #0]
 800b9e4:	4626      	mov	r6, r4
 800b9e6:	2e00      	cmp	r6, #0
 800b9e8:	d140      	bne.n	800ba6c <_malloc_r+0xcc>
 800b9ea:	6823      	ldr	r3, [r4, #0]
 800b9ec:	4631      	mov	r1, r6
 800b9ee:	4638      	mov	r0, r7
 800b9f0:	eb04 0803 	add.w	r8, r4, r3
 800b9f4:	f000 fcb2 	bl	800c35c <_sbrk_r>
 800b9f8:	4580      	cmp	r8, r0
 800b9fa:	d13a      	bne.n	800ba72 <_malloc_r+0xd2>
 800b9fc:	6821      	ldr	r1, [r4, #0]
 800b9fe:	3503      	adds	r5, #3
 800ba00:	1a6d      	subs	r5, r5, r1
 800ba02:	f025 0503 	bic.w	r5, r5, #3
 800ba06:	3508      	adds	r5, #8
 800ba08:	2d0c      	cmp	r5, #12
 800ba0a:	bf38      	it	cc
 800ba0c:	250c      	movcc	r5, #12
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4638      	mov	r0, r7
 800ba12:	f7ff ffa5 	bl	800b960 <sbrk_aligned>
 800ba16:	3001      	adds	r0, #1
 800ba18:	d02b      	beq.n	800ba72 <_malloc_r+0xd2>
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	442b      	add	r3, r5
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	e00e      	b.n	800ba40 <_malloc_r+0xa0>
 800ba22:	6822      	ldr	r2, [r4, #0]
 800ba24:	1b52      	subs	r2, r2, r5
 800ba26:	d41e      	bmi.n	800ba66 <_malloc_r+0xc6>
 800ba28:	2a0b      	cmp	r2, #11
 800ba2a:	d916      	bls.n	800ba5a <_malloc_r+0xba>
 800ba2c:	1961      	adds	r1, r4, r5
 800ba2e:	42a3      	cmp	r3, r4
 800ba30:	6025      	str	r5, [r4, #0]
 800ba32:	bf18      	it	ne
 800ba34:	6059      	strne	r1, [r3, #4]
 800ba36:	6863      	ldr	r3, [r4, #4]
 800ba38:	bf08      	it	eq
 800ba3a:	6031      	streq	r1, [r6, #0]
 800ba3c:	5162      	str	r2, [r4, r5]
 800ba3e:	604b      	str	r3, [r1, #4]
 800ba40:	4638      	mov	r0, r7
 800ba42:	f104 060b 	add.w	r6, r4, #11
 800ba46:	f001 ff77 	bl	800d938 <__malloc_unlock>
 800ba4a:	f026 0607 	bic.w	r6, r6, #7
 800ba4e:	1d23      	adds	r3, r4, #4
 800ba50:	1af2      	subs	r2, r6, r3
 800ba52:	d0b6      	beq.n	800b9c2 <_malloc_r+0x22>
 800ba54:	1b9b      	subs	r3, r3, r6
 800ba56:	50a3      	str	r3, [r4, r2]
 800ba58:	e7b3      	b.n	800b9c2 <_malloc_r+0x22>
 800ba5a:	6862      	ldr	r2, [r4, #4]
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	bf0c      	ite	eq
 800ba60:	6032      	streq	r2, [r6, #0]
 800ba62:	605a      	strne	r2, [r3, #4]
 800ba64:	e7ec      	b.n	800ba40 <_malloc_r+0xa0>
 800ba66:	4623      	mov	r3, r4
 800ba68:	6864      	ldr	r4, [r4, #4]
 800ba6a:	e7b2      	b.n	800b9d2 <_malloc_r+0x32>
 800ba6c:	4634      	mov	r4, r6
 800ba6e:	6876      	ldr	r6, [r6, #4]
 800ba70:	e7b9      	b.n	800b9e6 <_malloc_r+0x46>
 800ba72:	230c      	movs	r3, #12
 800ba74:	603b      	str	r3, [r7, #0]
 800ba76:	4638      	mov	r0, r7
 800ba78:	f001 ff5e 	bl	800d938 <__malloc_unlock>
 800ba7c:	e7a1      	b.n	800b9c2 <_malloc_r+0x22>
 800ba7e:	6025      	str	r5, [r4, #0]
 800ba80:	e7de      	b.n	800ba40 <_malloc_r+0xa0>
 800ba82:	bf00      	nop
 800ba84:	20000ce0 	.word	0x20000ce0

0800ba88 <__cvt>:
 800ba88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba8c:	ec55 4b10 	vmov	r4, r5, d0
 800ba90:	2d00      	cmp	r5, #0
 800ba92:	460e      	mov	r6, r1
 800ba94:	4619      	mov	r1, r3
 800ba96:	462b      	mov	r3, r5
 800ba98:	bfbb      	ittet	lt
 800ba9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ba9e:	461d      	movlt	r5, r3
 800baa0:	2300      	movge	r3, #0
 800baa2:	232d      	movlt	r3, #45	; 0x2d
 800baa4:	700b      	strb	r3, [r1, #0]
 800baa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800baac:	4691      	mov	r9, r2
 800baae:	f023 0820 	bic.w	r8, r3, #32
 800bab2:	bfbc      	itt	lt
 800bab4:	4622      	movlt	r2, r4
 800bab6:	4614      	movlt	r4, r2
 800bab8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800babc:	d005      	beq.n	800baca <__cvt+0x42>
 800babe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bac2:	d100      	bne.n	800bac6 <__cvt+0x3e>
 800bac4:	3601      	adds	r6, #1
 800bac6:	2102      	movs	r1, #2
 800bac8:	e000      	b.n	800bacc <__cvt+0x44>
 800baca:	2103      	movs	r1, #3
 800bacc:	ab03      	add	r3, sp, #12
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	ab02      	add	r3, sp, #8
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	ec45 4b10 	vmov	d0, r4, r5
 800bad8:	4653      	mov	r3, sl
 800bada:	4632      	mov	r2, r6
 800badc:	f001 f8b4 	bl	800cc48 <_dtoa_r>
 800bae0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bae4:	4607      	mov	r7, r0
 800bae6:	d102      	bne.n	800baee <__cvt+0x66>
 800bae8:	f019 0f01 	tst.w	r9, #1
 800baec:	d022      	beq.n	800bb34 <__cvt+0xac>
 800baee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800baf2:	eb07 0906 	add.w	r9, r7, r6
 800baf6:	d110      	bne.n	800bb1a <__cvt+0x92>
 800baf8:	783b      	ldrb	r3, [r7, #0]
 800bafa:	2b30      	cmp	r3, #48	; 0x30
 800bafc:	d10a      	bne.n	800bb14 <__cvt+0x8c>
 800bafe:	2200      	movs	r2, #0
 800bb00:	2300      	movs	r3, #0
 800bb02:	4620      	mov	r0, r4
 800bb04:	4629      	mov	r1, r5
 800bb06:	f7f4 fff7 	bl	8000af8 <__aeabi_dcmpeq>
 800bb0a:	b918      	cbnz	r0, 800bb14 <__cvt+0x8c>
 800bb0c:	f1c6 0601 	rsb	r6, r6, #1
 800bb10:	f8ca 6000 	str.w	r6, [sl]
 800bb14:	f8da 3000 	ldr.w	r3, [sl]
 800bb18:	4499      	add	r9, r3
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	4620      	mov	r0, r4
 800bb20:	4629      	mov	r1, r5
 800bb22:	f7f4 ffe9 	bl	8000af8 <__aeabi_dcmpeq>
 800bb26:	b108      	cbz	r0, 800bb2c <__cvt+0xa4>
 800bb28:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb2c:	2230      	movs	r2, #48	; 0x30
 800bb2e:	9b03      	ldr	r3, [sp, #12]
 800bb30:	454b      	cmp	r3, r9
 800bb32:	d307      	bcc.n	800bb44 <__cvt+0xbc>
 800bb34:	9b03      	ldr	r3, [sp, #12]
 800bb36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb38:	1bdb      	subs	r3, r3, r7
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	b004      	add	sp, #16
 800bb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb44:	1c59      	adds	r1, r3, #1
 800bb46:	9103      	str	r1, [sp, #12]
 800bb48:	701a      	strb	r2, [r3, #0]
 800bb4a:	e7f0      	b.n	800bb2e <__cvt+0xa6>

0800bb4c <__exponent>:
 800bb4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2900      	cmp	r1, #0
 800bb52:	bfb8      	it	lt
 800bb54:	4249      	neglt	r1, r1
 800bb56:	f803 2b02 	strb.w	r2, [r3], #2
 800bb5a:	bfb4      	ite	lt
 800bb5c:	222d      	movlt	r2, #45	; 0x2d
 800bb5e:	222b      	movge	r2, #43	; 0x2b
 800bb60:	2909      	cmp	r1, #9
 800bb62:	7042      	strb	r2, [r0, #1]
 800bb64:	dd2a      	ble.n	800bbbc <__exponent+0x70>
 800bb66:	f10d 0407 	add.w	r4, sp, #7
 800bb6a:	46a4      	mov	ip, r4
 800bb6c:	270a      	movs	r7, #10
 800bb6e:	46a6      	mov	lr, r4
 800bb70:	460a      	mov	r2, r1
 800bb72:	fb91 f6f7 	sdiv	r6, r1, r7
 800bb76:	fb07 1516 	mls	r5, r7, r6, r1
 800bb7a:	3530      	adds	r5, #48	; 0x30
 800bb7c:	2a63      	cmp	r2, #99	; 0x63
 800bb7e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bb86:	4631      	mov	r1, r6
 800bb88:	dcf1      	bgt.n	800bb6e <__exponent+0x22>
 800bb8a:	3130      	adds	r1, #48	; 0x30
 800bb8c:	f1ae 0502 	sub.w	r5, lr, #2
 800bb90:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bb94:	1c44      	adds	r4, r0, #1
 800bb96:	4629      	mov	r1, r5
 800bb98:	4561      	cmp	r1, ip
 800bb9a:	d30a      	bcc.n	800bbb2 <__exponent+0x66>
 800bb9c:	f10d 0209 	add.w	r2, sp, #9
 800bba0:	eba2 020e 	sub.w	r2, r2, lr
 800bba4:	4565      	cmp	r5, ip
 800bba6:	bf88      	it	hi
 800bba8:	2200      	movhi	r2, #0
 800bbaa:	4413      	add	r3, r2
 800bbac:	1a18      	subs	r0, r3, r0
 800bbae:	b003      	add	sp, #12
 800bbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bbba:	e7ed      	b.n	800bb98 <__exponent+0x4c>
 800bbbc:	2330      	movs	r3, #48	; 0x30
 800bbbe:	3130      	adds	r1, #48	; 0x30
 800bbc0:	7083      	strb	r3, [r0, #2]
 800bbc2:	70c1      	strb	r1, [r0, #3]
 800bbc4:	1d03      	adds	r3, r0, #4
 800bbc6:	e7f1      	b.n	800bbac <__exponent+0x60>

0800bbc8 <_printf_float>:
 800bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbcc:	ed2d 8b02 	vpush	{d8}
 800bbd0:	b08d      	sub	sp, #52	; 0x34
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bbd8:	4616      	mov	r6, r2
 800bbda:	461f      	mov	r7, r3
 800bbdc:	4605      	mov	r5, r0
 800bbde:	f001 fe7b 	bl	800d8d8 <_localeconv_r>
 800bbe2:	f8d0 a000 	ldr.w	sl, [r0]
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	f7f4 fb04 	bl	80001f4 <strlen>
 800bbec:	2300      	movs	r3, #0
 800bbee:	930a      	str	r3, [sp, #40]	; 0x28
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	9305      	str	r3, [sp, #20]
 800bbf4:	f8d8 3000 	ldr.w	r3, [r8]
 800bbf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bbfc:	3307      	adds	r3, #7
 800bbfe:	f023 0307 	bic.w	r3, r3, #7
 800bc02:	f103 0208 	add.w	r2, r3, #8
 800bc06:	f8c8 2000 	str.w	r2, [r8]
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bc12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bc16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc1a:	9307      	str	r3, [sp, #28]
 800bc1c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc20:	ee08 0a10 	vmov	s16, r0
 800bc24:	4b9f      	ldr	r3, [pc, #636]	; (800bea4 <_printf_float+0x2dc>)
 800bc26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2e:	f7f4 ff95 	bl	8000b5c <__aeabi_dcmpun>
 800bc32:	bb88      	cbnz	r0, 800bc98 <_printf_float+0xd0>
 800bc34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc38:	4b9a      	ldr	r3, [pc, #616]	; (800bea4 <_printf_float+0x2dc>)
 800bc3a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3e:	f7f4 ff6f 	bl	8000b20 <__aeabi_dcmple>
 800bc42:	bb48      	cbnz	r0, 800bc98 <_printf_float+0xd0>
 800bc44:	2200      	movs	r2, #0
 800bc46:	2300      	movs	r3, #0
 800bc48:	4640      	mov	r0, r8
 800bc4a:	4649      	mov	r1, r9
 800bc4c:	f7f4 ff5e 	bl	8000b0c <__aeabi_dcmplt>
 800bc50:	b110      	cbz	r0, 800bc58 <_printf_float+0x90>
 800bc52:	232d      	movs	r3, #45	; 0x2d
 800bc54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc58:	4b93      	ldr	r3, [pc, #588]	; (800bea8 <_printf_float+0x2e0>)
 800bc5a:	4894      	ldr	r0, [pc, #592]	; (800beac <_printf_float+0x2e4>)
 800bc5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bc60:	bf94      	ite	ls
 800bc62:	4698      	movls	r8, r3
 800bc64:	4680      	movhi	r8, r0
 800bc66:	2303      	movs	r3, #3
 800bc68:	6123      	str	r3, [r4, #16]
 800bc6a:	9b05      	ldr	r3, [sp, #20]
 800bc6c:	f023 0204 	bic.w	r2, r3, #4
 800bc70:	6022      	str	r2, [r4, #0]
 800bc72:	f04f 0900 	mov.w	r9, #0
 800bc76:	9700      	str	r7, [sp, #0]
 800bc78:	4633      	mov	r3, r6
 800bc7a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 f9d8 	bl	800c034 <_printf_common>
 800bc84:	3001      	adds	r0, #1
 800bc86:	f040 8090 	bne.w	800bdaa <_printf_float+0x1e2>
 800bc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8e:	b00d      	add	sp, #52	; 0x34
 800bc90:	ecbd 8b02 	vpop	{d8}
 800bc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc98:	4642      	mov	r2, r8
 800bc9a:	464b      	mov	r3, r9
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	4649      	mov	r1, r9
 800bca0:	f7f4 ff5c 	bl	8000b5c <__aeabi_dcmpun>
 800bca4:	b140      	cbz	r0, 800bcb8 <_printf_float+0xf0>
 800bca6:	464b      	mov	r3, r9
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	bfbc      	itt	lt
 800bcac:	232d      	movlt	r3, #45	; 0x2d
 800bcae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bcb2:	487f      	ldr	r0, [pc, #508]	; (800beb0 <_printf_float+0x2e8>)
 800bcb4:	4b7f      	ldr	r3, [pc, #508]	; (800beb4 <_printf_float+0x2ec>)
 800bcb6:	e7d1      	b.n	800bc5c <_printf_float+0x94>
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bcbe:	9206      	str	r2, [sp, #24]
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	d13f      	bne.n	800bd44 <_printf_float+0x17c>
 800bcc4:	2306      	movs	r3, #6
 800bcc6:	6063      	str	r3, [r4, #4]
 800bcc8:	9b05      	ldr	r3, [sp, #20]
 800bcca:	6861      	ldr	r1, [r4, #4]
 800bccc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	9303      	str	r3, [sp, #12]
 800bcd4:	ab0a      	add	r3, sp, #40	; 0x28
 800bcd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bcda:	ab09      	add	r3, sp, #36	; 0x24
 800bcdc:	ec49 8b10 	vmov	d0, r8, r9
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	6022      	str	r2, [r4, #0]
 800bce4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bce8:	4628      	mov	r0, r5
 800bcea:	f7ff fecd 	bl	800ba88 <__cvt>
 800bcee:	9b06      	ldr	r3, [sp, #24]
 800bcf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcf2:	2b47      	cmp	r3, #71	; 0x47
 800bcf4:	4680      	mov	r8, r0
 800bcf6:	d108      	bne.n	800bd0a <_printf_float+0x142>
 800bcf8:	1cc8      	adds	r0, r1, #3
 800bcfa:	db02      	blt.n	800bd02 <_printf_float+0x13a>
 800bcfc:	6863      	ldr	r3, [r4, #4]
 800bcfe:	4299      	cmp	r1, r3
 800bd00:	dd41      	ble.n	800bd86 <_printf_float+0x1be>
 800bd02:	f1ab 0b02 	sub.w	fp, fp, #2
 800bd06:	fa5f fb8b 	uxtb.w	fp, fp
 800bd0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd0e:	d820      	bhi.n	800bd52 <_printf_float+0x18a>
 800bd10:	3901      	subs	r1, #1
 800bd12:	465a      	mov	r2, fp
 800bd14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd18:	9109      	str	r1, [sp, #36]	; 0x24
 800bd1a:	f7ff ff17 	bl	800bb4c <__exponent>
 800bd1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd20:	1813      	adds	r3, r2, r0
 800bd22:	2a01      	cmp	r2, #1
 800bd24:	4681      	mov	r9, r0
 800bd26:	6123      	str	r3, [r4, #16]
 800bd28:	dc02      	bgt.n	800bd30 <_printf_float+0x168>
 800bd2a:	6822      	ldr	r2, [r4, #0]
 800bd2c:	07d2      	lsls	r2, r2, #31
 800bd2e:	d501      	bpl.n	800bd34 <_printf_float+0x16c>
 800bd30:	3301      	adds	r3, #1
 800bd32:	6123      	str	r3, [r4, #16]
 800bd34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d09c      	beq.n	800bc76 <_printf_float+0xae>
 800bd3c:	232d      	movs	r3, #45	; 0x2d
 800bd3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd42:	e798      	b.n	800bc76 <_printf_float+0xae>
 800bd44:	9a06      	ldr	r2, [sp, #24]
 800bd46:	2a47      	cmp	r2, #71	; 0x47
 800bd48:	d1be      	bne.n	800bcc8 <_printf_float+0x100>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1bc      	bne.n	800bcc8 <_printf_float+0x100>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e7b9      	b.n	800bcc6 <_printf_float+0xfe>
 800bd52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bd56:	d118      	bne.n	800bd8a <_printf_float+0x1c2>
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	6863      	ldr	r3, [r4, #4]
 800bd5c:	dd0b      	ble.n	800bd76 <_printf_float+0x1ae>
 800bd5e:	6121      	str	r1, [r4, #16]
 800bd60:	b913      	cbnz	r3, 800bd68 <_printf_float+0x1a0>
 800bd62:	6822      	ldr	r2, [r4, #0]
 800bd64:	07d0      	lsls	r0, r2, #31
 800bd66:	d502      	bpl.n	800bd6e <_printf_float+0x1a6>
 800bd68:	3301      	adds	r3, #1
 800bd6a:	440b      	add	r3, r1
 800bd6c:	6123      	str	r3, [r4, #16]
 800bd6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bd70:	f04f 0900 	mov.w	r9, #0
 800bd74:	e7de      	b.n	800bd34 <_printf_float+0x16c>
 800bd76:	b913      	cbnz	r3, 800bd7e <_printf_float+0x1b6>
 800bd78:	6822      	ldr	r2, [r4, #0]
 800bd7a:	07d2      	lsls	r2, r2, #31
 800bd7c:	d501      	bpl.n	800bd82 <_printf_float+0x1ba>
 800bd7e:	3302      	adds	r3, #2
 800bd80:	e7f4      	b.n	800bd6c <_printf_float+0x1a4>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e7f2      	b.n	800bd6c <_printf_float+0x1a4>
 800bd86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd8c:	4299      	cmp	r1, r3
 800bd8e:	db05      	blt.n	800bd9c <_printf_float+0x1d4>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	6121      	str	r1, [r4, #16]
 800bd94:	07d8      	lsls	r0, r3, #31
 800bd96:	d5ea      	bpl.n	800bd6e <_printf_float+0x1a6>
 800bd98:	1c4b      	adds	r3, r1, #1
 800bd9a:	e7e7      	b.n	800bd6c <_printf_float+0x1a4>
 800bd9c:	2900      	cmp	r1, #0
 800bd9e:	bfd4      	ite	le
 800bda0:	f1c1 0202 	rsble	r2, r1, #2
 800bda4:	2201      	movgt	r2, #1
 800bda6:	4413      	add	r3, r2
 800bda8:	e7e0      	b.n	800bd6c <_printf_float+0x1a4>
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	055a      	lsls	r2, r3, #21
 800bdae:	d407      	bmi.n	800bdc0 <_printf_float+0x1f8>
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	4642      	mov	r2, r8
 800bdb4:	4631      	mov	r1, r6
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	47b8      	blx	r7
 800bdba:	3001      	adds	r0, #1
 800bdbc:	d12c      	bne.n	800be18 <_printf_float+0x250>
 800bdbe:	e764      	b.n	800bc8a <_printf_float+0xc2>
 800bdc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdc4:	f240 80e0 	bls.w	800bf88 <_printf_float+0x3c0>
 800bdc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdcc:	2200      	movs	r2, #0
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f7f4 fe92 	bl	8000af8 <__aeabi_dcmpeq>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d034      	beq.n	800be42 <_printf_float+0x27a>
 800bdd8:	4a37      	ldr	r2, [pc, #220]	; (800beb8 <_printf_float+0x2f0>)
 800bdda:	2301      	movs	r3, #1
 800bddc:	4631      	mov	r1, r6
 800bdde:	4628      	mov	r0, r5
 800bde0:	47b8      	blx	r7
 800bde2:	3001      	adds	r0, #1
 800bde4:	f43f af51 	beq.w	800bc8a <_printf_float+0xc2>
 800bde8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdec:	429a      	cmp	r2, r3
 800bdee:	db02      	blt.n	800bdf6 <_printf_float+0x22e>
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	07d8      	lsls	r0, r3, #31
 800bdf4:	d510      	bpl.n	800be18 <_printf_float+0x250>
 800bdf6:	ee18 3a10 	vmov	r3, s16
 800bdfa:	4652      	mov	r2, sl
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4628      	mov	r0, r5
 800be00:	47b8      	blx	r7
 800be02:	3001      	adds	r0, #1
 800be04:	f43f af41 	beq.w	800bc8a <_printf_float+0xc2>
 800be08:	f04f 0800 	mov.w	r8, #0
 800be0c:	f104 091a 	add.w	r9, r4, #26
 800be10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be12:	3b01      	subs	r3, #1
 800be14:	4543      	cmp	r3, r8
 800be16:	dc09      	bgt.n	800be2c <_printf_float+0x264>
 800be18:	6823      	ldr	r3, [r4, #0]
 800be1a:	079b      	lsls	r3, r3, #30
 800be1c:	f100 8105 	bmi.w	800c02a <_printf_float+0x462>
 800be20:	68e0      	ldr	r0, [r4, #12]
 800be22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be24:	4298      	cmp	r0, r3
 800be26:	bfb8      	it	lt
 800be28:	4618      	movlt	r0, r3
 800be2a:	e730      	b.n	800bc8e <_printf_float+0xc6>
 800be2c:	2301      	movs	r3, #1
 800be2e:	464a      	mov	r2, r9
 800be30:	4631      	mov	r1, r6
 800be32:	4628      	mov	r0, r5
 800be34:	47b8      	blx	r7
 800be36:	3001      	adds	r0, #1
 800be38:	f43f af27 	beq.w	800bc8a <_printf_float+0xc2>
 800be3c:	f108 0801 	add.w	r8, r8, #1
 800be40:	e7e6      	b.n	800be10 <_printf_float+0x248>
 800be42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be44:	2b00      	cmp	r3, #0
 800be46:	dc39      	bgt.n	800bebc <_printf_float+0x2f4>
 800be48:	4a1b      	ldr	r2, [pc, #108]	; (800beb8 <_printf_float+0x2f0>)
 800be4a:	2301      	movs	r3, #1
 800be4c:	4631      	mov	r1, r6
 800be4e:	4628      	mov	r0, r5
 800be50:	47b8      	blx	r7
 800be52:	3001      	adds	r0, #1
 800be54:	f43f af19 	beq.w	800bc8a <_printf_float+0xc2>
 800be58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be5c:	4313      	orrs	r3, r2
 800be5e:	d102      	bne.n	800be66 <_printf_float+0x29e>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	07d9      	lsls	r1, r3, #31
 800be64:	d5d8      	bpl.n	800be18 <_printf_float+0x250>
 800be66:	ee18 3a10 	vmov	r3, s16
 800be6a:	4652      	mov	r2, sl
 800be6c:	4631      	mov	r1, r6
 800be6e:	4628      	mov	r0, r5
 800be70:	47b8      	blx	r7
 800be72:	3001      	adds	r0, #1
 800be74:	f43f af09 	beq.w	800bc8a <_printf_float+0xc2>
 800be78:	f04f 0900 	mov.w	r9, #0
 800be7c:	f104 0a1a 	add.w	sl, r4, #26
 800be80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be82:	425b      	negs	r3, r3
 800be84:	454b      	cmp	r3, r9
 800be86:	dc01      	bgt.n	800be8c <_printf_float+0x2c4>
 800be88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be8a:	e792      	b.n	800bdb2 <_printf_float+0x1ea>
 800be8c:	2301      	movs	r3, #1
 800be8e:	4652      	mov	r2, sl
 800be90:	4631      	mov	r1, r6
 800be92:	4628      	mov	r0, r5
 800be94:	47b8      	blx	r7
 800be96:	3001      	adds	r0, #1
 800be98:	f43f aef7 	beq.w	800bc8a <_printf_float+0xc2>
 800be9c:	f109 0901 	add.w	r9, r9, #1
 800bea0:	e7ee      	b.n	800be80 <_printf_float+0x2b8>
 800bea2:	bf00      	nop
 800bea4:	7fefffff 	.word	0x7fefffff
 800bea8:	08010f9c 	.word	0x08010f9c
 800beac:	08010fa0 	.word	0x08010fa0
 800beb0:	08010fa8 	.word	0x08010fa8
 800beb4:	08010fa4 	.word	0x08010fa4
 800beb8:	08011391 	.word	0x08011391
 800bebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bec0:	429a      	cmp	r2, r3
 800bec2:	bfa8      	it	ge
 800bec4:	461a      	movge	r2, r3
 800bec6:	2a00      	cmp	r2, #0
 800bec8:	4691      	mov	r9, r2
 800beca:	dc37      	bgt.n	800bf3c <_printf_float+0x374>
 800becc:	f04f 0b00 	mov.w	fp, #0
 800bed0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bed4:	f104 021a 	add.w	r2, r4, #26
 800bed8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800beda:	9305      	str	r3, [sp, #20]
 800bedc:	eba3 0309 	sub.w	r3, r3, r9
 800bee0:	455b      	cmp	r3, fp
 800bee2:	dc33      	bgt.n	800bf4c <_printf_float+0x384>
 800bee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bee8:	429a      	cmp	r2, r3
 800beea:	db3b      	blt.n	800bf64 <_printf_float+0x39c>
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	07da      	lsls	r2, r3, #31
 800bef0:	d438      	bmi.n	800bf64 <_printf_float+0x39c>
 800bef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bef4:	9a05      	ldr	r2, [sp, #20]
 800bef6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bef8:	1a9a      	subs	r2, r3, r2
 800befa:	eba3 0901 	sub.w	r9, r3, r1
 800befe:	4591      	cmp	r9, r2
 800bf00:	bfa8      	it	ge
 800bf02:	4691      	movge	r9, r2
 800bf04:	f1b9 0f00 	cmp.w	r9, #0
 800bf08:	dc35      	bgt.n	800bf76 <_printf_float+0x3ae>
 800bf0a:	f04f 0800 	mov.w	r8, #0
 800bf0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf12:	f104 0a1a 	add.w	sl, r4, #26
 800bf16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf1a:	1a9b      	subs	r3, r3, r2
 800bf1c:	eba3 0309 	sub.w	r3, r3, r9
 800bf20:	4543      	cmp	r3, r8
 800bf22:	f77f af79 	ble.w	800be18 <_printf_float+0x250>
 800bf26:	2301      	movs	r3, #1
 800bf28:	4652      	mov	r2, sl
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	47b8      	blx	r7
 800bf30:	3001      	adds	r0, #1
 800bf32:	f43f aeaa 	beq.w	800bc8a <_printf_float+0xc2>
 800bf36:	f108 0801 	add.w	r8, r8, #1
 800bf3a:	e7ec      	b.n	800bf16 <_printf_float+0x34e>
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4642      	mov	r2, r8
 800bf42:	4628      	mov	r0, r5
 800bf44:	47b8      	blx	r7
 800bf46:	3001      	adds	r0, #1
 800bf48:	d1c0      	bne.n	800becc <_printf_float+0x304>
 800bf4a:	e69e      	b.n	800bc8a <_printf_float+0xc2>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	4631      	mov	r1, r6
 800bf50:	4628      	mov	r0, r5
 800bf52:	9205      	str	r2, [sp, #20]
 800bf54:	47b8      	blx	r7
 800bf56:	3001      	adds	r0, #1
 800bf58:	f43f ae97 	beq.w	800bc8a <_printf_float+0xc2>
 800bf5c:	9a05      	ldr	r2, [sp, #20]
 800bf5e:	f10b 0b01 	add.w	fp, fp, #1
 800bf62:	e7b9      	b.n	800bed8 <_printf_float+0x310>
 800bf64:	ee18 3a10 	vmov	r3, s16
 800bf68:	4652      	mov	r2, sl
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	47b8      	blx	r7
 800bf70:	3001      	adds	r0, #1
 800bf72:	d1be      	bne.n	800bef2 <_printf_float+0x32a>
 800bf74:	e689      	b.n	800bc8a <_printf_float+0xc2>
 800bf76:	9a05      	ldr	r2, [sp, #20]
 800bf78:	464b      	mov	r3, r9
 800bf7a:	4442      	add	r2, r8
 800bf7c:	4631      	mov	r1, r6
 800bf7e:	4628      	mov	r0, r5
 800bf80:	47b8      	blx	r7
 800bf82:	3001      	adds	r0, #1
 800bf84:	d1c1      	bne.n	800bf0a <_printf_float+0x342>
 800bf86:	e680      	b.n	800bc8a <_printf_float+0xc2>
 800bf88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf8a:	2a01      	cmp	r2, #1
 800bf8c:	dc01      	bgt.n	800bf92 <_printf_float+0x3ca>
 800bf8e:	07db      	lsls	r3, r3, #31
 800bf90:	d538      	bpl.n	800c004 <_printf_float+0x43c>
 800bf92:	2301      	movs	r3, #1
 800bf94:	4642      	mov	r2, r8
 800bf96:	4631      	mov	r1, r6
 800bf98:	4628      	mov	r0, r5
 800bf9a:	47b8      	blx	r7
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	f43f ae74 	beq.w	800bc8a <_printf_float+0xc2>
 800bfa2:	ee18 3a10 	vmov	r3, s16
 800bfa6:	4652      	mov	r2, sl
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	4628      	mov	r0, r5
 800bfac:	47b8      	blx	r7
 800bfae:	3001      	adds	r0, #1
 800bfb0:	f43f ae6b 	beq.w	800bc8a <_printf_float+0xc2>
 800bfb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfb8:	2200      	movs	r2, #0
 800bfba:	2300      	movs	r3, #0
 800bfbc:	f7f4 fd9c 	bl	8000af8 <__aeabi_dcmpeq>
 800bfc0:	b9d8      	cbnz	r0, 800bffa <_printf_float+0x432>
 800bfc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc4:	f108 0201 	add.w	r2, r8, #1
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	4631      	mov	r1, r6
 800bfcc:	4628      	mov	r0, r5
 800bfce:	47b8      	blx	r7
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	d10e      	bne.n	800bff2 <_printf_float+0x42a>
 800bfd4:	e659      	b.n	800bc8a <_printf_float+0xc2>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	4652      	mov	r2, sl
 800bfda:	4631      	mov	r1, r6
 800bfdc:	4628      	mov	r0, r5
 800bfde:	47b8      	blx	r7
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	f43f ae52 	beq.w	800bc8a <_printf_float+0xc2>
 800bfe6:	f108 0801 	add.w	r8, r8, #1
 800bfea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfec:	3b01      	subs	r3, #1
 800bfee:	4543      	cmp	r3, r8
 800bff0:	dcf1      	bgt.n	800bfd6 <_printf_float+0x40e>
 800bff2:	464b      	mov	r3, r9
 800bff4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bff8:	e6dc      	b.n	800bdb4 <_printf_float+0x1ec>
 800bffa:	f04f 0800 	mov.w	r8, #0
 800bffe:	f104 0a1a 	add.w	sl, r4, #26
 800c002:	e7f2      	b.n	800bfea <_printf_float+0x422>
 800c004:	2301      	movs	r3, #1
 800c006:	4642      	mov	r2, r8
 800c008:	e7df      	b.n	800bfca <_printf_float+0x402>
 800c00a:	2301      	movs	r3, #1
 800c00c:	464a      	mov	r2, r9
 800c00e:	4631      	mov	r1, r6
 800c010:	4628      	mov	r0, r5
 800c012:	47b8      	blx	r7
 800c014:	3001      	adds	r0, #1
 800c016:	f43f ae38 	beq.w	800bc8a <_printf_float+0xc2>
 800c01a:	f108 0801 	add.w	r8, r8, #1
 800c01e:	68e3      	ldr	r3, [r4, #12]
 800c020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c022:	1a5b      	subs	r3, r3, r1
 800c024:	4543      	cmp	r3, r8
 800c026:	dcf0      	bgt.n	800c00a <_printf_float+0x442>
 800c028:	e6fa      	b.n	800be20 <_printf_float+0x258>
 800c02a:	f04f 0800 	mov.w	r8, #0
 800c02e:	f104 0919 	add.w	r9, r4, #25
 800c032:	e7f4      	b.n	800c01e <_printf_float+0x456>

0800c034 <_printf_common>:
 800c034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c038:	4616      	mov	r6, r2
 800c03a:	4699      	mov	r9, r3
 800c03c:	688a      	ldr	r2, [r1, #8]
 800c03e:	690b      	ldr	r3, [r1, #16]
 800c040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c044:	4293      	cmp	r3, r2
 800c046:	bfb8      	it	lt
 800c048:	4613      	movlt	r3, r2
 800c04a:	6033      	str	r3, [r6, #0]
 800c04c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c050:	4607      	mov	r7, r0
 800c052:	460c      	mov	r4, r1
 800c054:	b10a      	cbz	r2, 800c05a <_printf_common+0x26>
 800c056:	3301      	adds	r3, #1
 800c058:	6033      	str	r3, [r6, #0]
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	0699      	lsls	r1, r3, #26
 800c05e:	bf42      	ittt	mi
 800c060:	6833      	ldrmi	r3, [r6, #0]
 800c062:	3302      	addmi	r3, #2
 800c064:	6033      	strmi	r3, [r6, #0]
 800c066:	6825      	ldr	r5, [r4, #0]
 800c068:	f015 0506 	ands.w	r5, r5, #6
 800c06c:	d106      	bne.n	800c07c <_printf_common+0x48>
 800c06e:	f104 0a19 	add.w	sl, r4, #25
 800c072:	68e3      	ldr	r3, [r4, #12]
 800c074:	6832      	ldr	r2, [r6, #0]
 800c076:	1a9b      	subs	r3, r3, r2
 800c078:	42ab      	cmp	r3, r5
 800c07a:	dc26      	bgt.n	800c0ca <_printf_common+0x96>
 800c07c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c080:	1e13      	subs	r3, r2, #0
 800c082:	6822      	ldr	r2, [r4, #0]
 800c084:	bf18      	it	ne
 800c086:	2301      	movne	r3, #1
 800c088:	0692      	lsls	r2, r2, #26
 800c08a:	d42b      	bmi.n	800c0e4 <_printf_common+0xb0>
 800c08c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c090:	4649      	mov	r1, r9
 800c092:	4638      	mov	r0, r7
 800c094:	47c0      	blx	r8
 800c096:	3001      	adds	r0, #1
 800c098:	d01e      	beq.n	800c0d8 <_printf_common+0xa4>
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	68e5      	ldr	r5, [r4, #12]
 800c09e:	6832      	ldr	r2, [r6, #0]
 800c0a0:	f003 0306 	and.w	r3, r3, #6
 800c0a4:	2b04      	cmp	r3, #4
 800c0a6:	bf08      	it	eq
 800c0a8:	1aad      	subeq	r5, r5, r2
 800c0aa:	68a3      	ldr	r3, [r4, #8]
 800c0ac:	6922      	ldr	r2, [r4, #16]
 800c0ae:	bf0c      	ite	eq
 800c0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0b4:	2500      	movne	r5, #0
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	bfc4      	itt	gt
 800c0ba:	1a9b      	subgt	r3, r3, r2
 800c0bc:	18ed      	addgt	r5, r5, r3
 800c0be:	2600      	movs	r6, #0
 800c0c0:	341a      	adds	r4, #26
 800c0c2:	42b5      	cmp	r5, r6
 800c0c4:	d11a      	bne.n	800c0fc <_printf_common+0xc8>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e008      	b.n	800c0dc <_printf_common+0xa8>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	4652      	mov	r2, sl
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	47c0      	blx	r8
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d103      	bne.n	800c0e0 <_printf_common+0xac>
 800c0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e0:	3501      	adds	r5, #1
 800c0e2:	e7c6      	b.n	800c072 <_printf_common+0x3e>
 800c0e4:	18e1      	adds	r1, r4, r3
 800c0e6:	1c5a      	adds	r2, r3, #1
 800c0e8:	2030      	movs	r0, #48	; 0x30
 800c0ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0ee:	4422      	add	r2, r4
 800c0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0f8:	3302      	adds	r3, #2
 800c0fa:	e7c7      	b.n	800c08c <_printf_common+0x58>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	4622      	mov	r2, r4
 800c100:	4649      	mov	r1, r9
 800c102:	4638      	mov	r0, r7
 800c104:	47c0      	blx	r8
 800c106:	3001      	adds	r0, #1
 800c108:	d0e6      	beq.n	800c0d8 <_printf_common+0xa4>
 800c10a:	3601      	adds	r6, #1
 800c10c:	e7d9      	b.n	800c0c2 <_printf_common+0x8e>
	...

0800c110 <_printf_i>:
 800c110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c114:	7e0f      	ldrb	r7, [r1, #24]
 800c116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c118:	2f78      	cmp	r7, #120	; 0x78
 800c11a:	4691      	mov	r9, r2
 800c11c:	4680      	mov	r8, r0
 800c11e:	460c      	mov	r4, r1
 800c120:	469a      	mov	sl, r3
 800c122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c126:	d807      	bhi.n	800c138 <_printf_i+0x28>
 800c128:	2f62      	cmp	r7, #98	; 0x62
 800c12a:	d80a      	bhi.n	800c142 <_printf_i+0x32>
 800c12c:	2f00      	cmp	r7, #0
 800c12e:	f000 80d8 	beq.w	800c2e2 <_printf_i+0x1d2>
 800c132:	2f58      	cmp	r7, #88	; 0x58
 800c134:	f000 80a3 	beq.w	800c27e <_printf_i+0x16e>
 800c138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c13c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c140:	e03a      	b.n	800c1b8 <_printf_i+0xa8>
 800c142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c146:	2b15      	cmp	r3, #21
 800c148:	d8f6      	bhi.n	800c138 <_printf_i+0x28>
 800c14a:	a101      	add	r1, pc, #4	; (adr r1, 800c150 <_printf_i+0x40>)
 800c14c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c150:	0800c1a9 	.word	0x0800c1a9
 800c154:	0800c1bd 	.word	0x0800c1bd
 800c158:	0800c139 	.word	0x0800c139
 800c15c:	0800c139 	.word	0x0800c139
 800c160:	0800c139 	.word	0x0800c139
 800c164:	0800c139 	.word	0x0800c139
 800c168:	0800c1bd 	.word	0x0800c1bd
 800c16c:	0800c139 	.word	0x0800c139
 800c170:	0800c139 	.word	0x0800c139
 800c174:	0800c139 	.word	0x0800c139
 800c178:	0800c139 	.word	0x0800c139
 800c17c:	0800c2c9 	.word	0x0800c2c9
 800c180:	0800c1ed 	.word	0x0800c1ed
 800c184:	0800c2ab 	.word	0x0800c2ab
 800c188:	0800c139 	.word	0x0800c139
 800c18c:	0800c139 	.word	0x0800c139
 800c190:	0800c2eb 	.word	0x0800c2eb
 800c194:	0800c139 	.word	0x0800c139
 800c198:	0800c1ed 	.word	0x0800c1ed
 800c19c:	0800c139 	.word	0x0800c139
 800c1a0:	0800c139 	.word	0x0800c139
 800c1a4:	0800c2b3 	.word	0x0800c2b3
 800c1a8:	682b      	ldr	r3, [r5, #0]
 800c1aa:	1d1a      	adds	r2, r3, #4
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	602a      	str	r2, [r5, #0]
 800c1b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e0a3      	b.n	800c304 <_printf_i+0x1f4>
 800c1bc:	6820      	ldr	r0, [r4, #0]
 800c1be:	6829      	ldr	r1, [r5, #0]
 800c1c0:	0606      	lsls	r6, r0, #24
 800c1c2:	f101 0304 	add.w	r3, r1, #4
 800c1c6:	d50a      	bpl.n	800c1de <_printf_i+0xce>
 800c1c8:	680e      	ldr	r6, [r1, #0]
 800c1ca:	602b      	str	r3, [r5, #0]
 800c1cc:	2e00      	cmp	r6, #0
 800c1ce:	da03      	bge.n	800c1d8 <_printf_i+0xc8>
 800c1d0:	232d      	movs	r3, #45	; 0x2d
 800c1d2:	4276      	negs	r6, r6
 800c1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1d8:	485e      	ldr	r0, [pc, #376]	; (800c354 <_printf_i+0x244>)
 800c1da:	230a      	movs	r3, #10
 800c1dc:	e019      	b.n	800c212 <_printf_i+0x102>
 800c1de:	680e      	ldr	r6, [r1, #0]
 800c1e0:	602b      	str	r3, [r5, #0]
 800c1e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c1e6:	bf18      	it	ne
 800c1e8:	b236      	sxthne	r6, r6
 800c1ea:	e7ef      	b.n	800c1cc <_printf_i+0xbc>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	6820      	ldr	r0, [r4, #0]
 800c1f0:	1d19      	adds	r1, r3, #4
 800c1f2:	6029      	str	r1, [r5, #0]
 800c1f4:	0601      	lsls	r1, r0, #24
 800c1f6:	d501      	bpl.n	800c1fc <_printf_i+0xec>
 800c1f8:	681e      	ldr	r6, [r3, #0]
 800c1fa:	e002      	b.n	800c202 <_printf_i+0xf2>
 800c1fc:	0646      	lsls	r6, r0, #25
 800c1fe:	d5fb      	bpl.n	800c1f8 <_printf_i+0xe8>
 800c200:	881e      	ldrh	r6, [r3, #0]
 800c202:	4854      	ldr	r0, [pc, #336]	; (800c354 <_printf_i+0x244>)
 800c204:	2f6f      	cmp	r7, #111	; 0x6f
 800c206:	bf0c      	ite	eq
 800c208:	2308      	moveq	r3, #8
 800c20a:	230a      	movne	r3, #10
 800c20c:	2100      	movs	r1, #0
 800c20e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c212:	6865      	ldr	r5, [r4, #4]
 800c214:	60a5      	str	r5, [r4, #8]
 800c216:	2d00      	cmp	r5, #0
 800c218:	bfa2      	ittt	ge
 800c21a:	6821      	ldrge	r1, [r4, #0]
 800c21c:	f021 0104 	bicge.w	r1, r1, #4
 800c220:	6021      	strge	r1, [r4, #0]
 800c222:	b90e      	cbnz	r6, 800c228 <_printf_i+0x118>
 800c224:	2d00      	cmp	r5, #0
 800c226:	d04d      	beq.n	800c2c4 <_printf_i+0x1b4>
 800c228:	4615      	mov	r5, r2
 800c22a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c22e:	fb03 6711 	mls	r7, r3, r1, r6
 800c232:	5dc7      	ldrb	r7, [r0, r7]
 800c234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c238:	4637      	mov	r7, r6
 800c23a:	42bb      	cmp	r3, r7
 800c23c:	460e      	mov	r6, r1
 800c23e:	d9f4      	bls.n	800c22a <_printf_i+0x11a>
 800c240:	2b08      	cmp	r3, #8
 800c242:	d10b      	bne.n	800c25c <_printf_i+0x14c>
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	07de      	lsls	r6, r3, #31
 800c248:	d508      	bpl.n	800c25c <_printf_i+0x14c>
 800c24a:	6923      	ldr	r3, [r4, #16]
 800c24c:	6861      	ldr	r1, [r4, #4]
 800c24e:	4299      	cmp	r1, r3
 800c250:	bfde      	ittt	le
 800c252:	2330      	movle	r3, #48	; 0x30
 800c254:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c25c:	1b52      	subs	r2, r2, r5
 800c25e:	6122      	str	r2, [r4, #16]
 800c260:	f8cd a000 	str.w	sl, [sp]
 800c264:	464b      	mov	r3, r9
 800c266:	aa03      	add	r2, sp, #12
 800c268:	4621      	mov	r1, r4
 800c26a:	4640      	mov	r0, r8
 800c26c:	f7ff fee2 	bl	800c034 <_printf_common>
 800c270:	3001      	adds	r0, #1
 800c272:	d14c      	bne.n	800c30e <_printf_i+0x1fe>
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	b004      	add	sp, #16
 800c27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c27e:	4835      	ldr	r0, [pc, #212]	; (800c354 <_printf_i+0x244>)
 800c280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c284:	6829      	ldr	r1, [r5, #0]
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	f851 6b04 	ldr.w	r6, [r1], #4
 800c28c:	6029      	str	r1, [r5, #0]
 800c28e:	061d      	lsls	r5, r3, #24
 800c290:	d514      	bpl.n	800c2bc <_printf_i+0x1ac>
 800c292:	07df      	lsls	r7, r3, #31
 800c294:	bf44      	itt	mi
 800c296:	f043 0320 	orrmi.w	r3, r3, #32
 800c29a:	6023      	strmi	r3, [r4, #0]
 800c29c:	b91e      	cbnz	r6, 800c2a6 <_printf_i+0x196>
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	f023 0320 	bic.w	r3, r3, #32
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	2310      	movs	r3, #16
 800c2a8:	e7b0      	b.n	800c20c <_printf_i+0xfc>
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	f043 0320 	orr.w	r3, r3, #32
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	2378      	movs	r3, #120	; 0x78
 800c2b4:	4828      	ldr	r0, [pc, #160]	; (800c358 <_printf_i+0x248>)
 800c2b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2ba:	e7e3      	b.n	800c284 <_printf_i+0x174>
 800c2bc:	0659      	lsls	r1, r3, #25
 800c2be:	bf48      	it	mi
 800c2c0:	b2b6      	uxthmi	r6, r6
 800c2c2:	e7e6      	b.n	800c292 <_printf_i+0x182>
 800c2c4:	4615      	mov	r5, r2
 800c2c6:	e7bb      	b.n	800c240 <_printf_i+0x130>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	6826      	ldr	r6, [r4, #0]
 800c2cc:	6961      	ldr	r1, [r4, #20]
 800c2ce:	1d18      	adds	r0, r3, #4
 800c2d0:	6028      	str	r0, [r5, #0]
 800c2d2:	0635      	lsls	r5, r6, #24
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	d501      	bpl.n	800c2dc <_printf_i+0x1cc>
 800c2d8:	6019      	str	r1, [r3, #0]
 800c2da:	e002      	b.n	800c2e2 <_printf_i+0x1d2>
 800c2dc:	0670      	lsls	r0, r6, #25
 800c2de:	d5fb      	bpl.n	800c2d8 <_printf_i+0x1c8>
 800c2e0:	8019      	strh	r1, [r3, #0]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	6123      	str	r3, [r4, #16]
 800c2e6:	4615      	mov	r5, r2
 800c2e8:	e7ba      	b.n	800c260 <_printf_i+0x150>
 800c2ea:	682b      	ldr	r3, [r5, #0]
 800c2ec:	1d1a      	adds	r2, r3, #4
 800c2ee:	602a      	str	r2, [r5, #0]
 800c2f0:	681d      	ldr	r5, [r3, #0]
 800c2f2:	6862      	ldr	r2, [r4, #4]
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f7f3 ff8a 	bl	8000210 <memchr>
 800c2fc:	b108      	cbz	r0, 800c302 <_printf_i+0x1f2>
 800c2fe:	1b40      	subs	r0, r0, r5
 800c300:	6060      	str	r0, [r4, #4]
 800c302:	6863      	ldr	r3, [r4, #4]
 800c304:	6123      	str	r3, [r4, #16]
 800c306:	2300      	movs	r3, #0
 800c308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c30c:	e7a8      	b.n	800c260 <_printf_i+0x150>
 800c30e:	6923      	ldr	r3, [r4, #16]
 800c310:	462a      	mov	r2, r5
 800c312:	4649      	mov	r1, r9
 800c314:	4640      	mov	r0, r8
 800c316:	47d0      	blx	sl
 800c318:	3001      	adds	r0, #1
 800c31a:	d0ab      	beq.n	800c274 <_printf_i+0x164>
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	079b      	lsls	r3, r3, #30
 800c320:	d413      	bmi.n	800c34a <_printf_i+0x23a>
 800c322:	68e0      	ldr	r0, [r4, #12]
 800c324:	9b03      	ldr	r3, [sp, #12]
 800c326:	4298      	cmp	r0, r3
 800c328:	bfb8      	it	lt
 800c32a:	4618      	movlt	r0, r3
 800c32c:	e7a4      	b.n	800c278 <_printf_i+0x168>
 800c32e:	2301      	movs	r3, #1
 800c330:	4632      	mov	r2, r6
 800c332:	4649      	mov	r1, r9
 800c334:	4640      	mov	r0, r8
 800c336:	47d0      	blx	sl
 800c338:	3001      	adds	r0, #1
 800c33a:	d09b      	beq.n	800c274 <_printf_i+0x164>
 800c33c:	3501      	adds	r5, #1
 800c33e:	68e3      	ldr	r3, [r4, #12]
 800c340:	9903      	ldr	r1, [sp, #12]
 800c342:	1a5b      	subs	r3, r3, r1
 800c344:	42ab      	cmp	r3, r5
 800c346:	dcf2      	bgt.n	800c32e <_printf_i+0x21e>
 800c348:	e7eb      	b.n	800c322 <_printf_i+0x212>
 800c34a:	2500      	movs	r5, #0
 800c34c:	f104 0619 	add.w	r6, r4, #25
 800c350:	e7f5      	b.n	800c33e <_printf_i+0x22e>
 800c352:	bf00      	nop
 800c354:	08010fac 	.word	0x08010fac
 800c358:	08010fbd 	.word	0x08010fbd

0800c35c <_sbrk_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	4d06      	ldr	r5, [pc, #24]	; (800c378 <_sbrk_r+0x1c>)
 800c360:	2300      	movs	r3, #0
 800c362:	4604      	mov	r4, r0
 800c364:	4608      	mov	r0, r1
 800c366:	602b      	str	r3, [r5, #0]
 800c368:	f7f7 ff7a 	bl	8004260 <_sbrk>
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	d102      	bne.n	800c376 <_sbrk_r+0x1a>
 800c370:	682b      	ldr	r3, [r5, #0]
 800c372:	b103      	cbz	r3, 800c376 <_sbrk_r+0x1a>
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	bd38      	pop	{r3, r4, r5, pc}
 800c378:	20000d14 	.word	0x20000d14

0800c37c <siprintf>:
 800c37c:	b40e      	push	{r1, r2, r3}
 800c37e:	b500      	push	{lr}
 800c380:	b09c      	sub	sp, #112	; 0x70
 800c382:	ab1d      	add	r3, sp, #116	; 0x74
 800c384:	9002      	str	r0, [sp, #8]
 800c386:	9006      	str	r0, [sp, #24]
 800c388:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c38c:	4809      	ldr	r0, [pc, #36]	; (800c3b4 <siprintf+0x38>)
 800c38e:	9107      	str	r1, [sp, #28]
 800c390:	9104      	str	r1, [sp, #16]
 800c392:	4909      	ldr	r1, [pc, #36]	; (800c3b8 <siprintf+0x3c>)
 800c394:	f853 2b04 	ldr.w	r2, [r3], #4
 800c398:	9105      	str	r1, [sp, #20]
 800c39a:	6800      	ldr	r0, [r0, #0]
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	a902      	add	r1, sp, #8
 800c3a0:	f001 fec6 	bl	800e130 <_svfiprintf_r>
 800c3a4:	9b02      	ldr	r3, [sp, #8]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	701a      	strb	r2, [r3, #0]
 800c3aa:	b01c      	add	sp, #112	; 0x70
 800c3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3b0:	b003      	add	sp, #12
 800c3b2:	4770      	bx	lr
 800c3b4:	200002c4 	.word	0x200002c4
 800c3b8:	ffff0208 	.word	0xffff0208

0800c3bc <siscanf>:
 800c3bc:	b40e      	push	{r1, r2, r3}
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	b09f      	sub	sp, #124	; 0x7c
 800c3c2:	ac21      	add	r4, sp, #132	; 0x84
 800c3c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c3c8:	f854 2b04 	ldr.w	r2, [r4], #4
 800c3cc:	9201      	str	r2, [sp, #4]
 800c3ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c3d2:	9004      	str	r0, [sp, #16]
 800c3d4:	9008      	str	r0, [sp, #32]
 800c3d6:	f7f3 ff0d 	bl	80001f4 <strlen>
 800c3da:	4b0c      	ldr	r3, [pc, #48]	; (800c40c <siscanf+0x50>)
 800c3dc:	9005      	str	r0, [sp, #20]
 800c3de:	9009      	str	r0, [sp, #36]	; 0x24
 800c3e0:	930d      	str	r3, [sp, #52]	; 0x34
 800c3e2:	480b      	ldr	r0, [pc, #44]	; (800c410 <siscanf+0x54>)
 800c3e4:	9a01      	ldr	r2, [sp, #4]
 800c3e6:	6800      	ldr	r0, [r0, #0]
 800c3e8:	9403      	str	r4, [sp, #12]
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	9311      	str	r3, [sp, #68]	; 0x44
 800c3ee:	9316      	str	r3, [sp, #88]	; 0x58
 800c3f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c3f8:	a904      	add	r1, sp, #16
 800c3fa:	4623      	mov	r3, r4
 800c3fc:	f001 fff2 	bl	800e3e4 <__ssvfiscanf_r>
 800c400:	b01f      	add	sp, #124	; 0x7c
 800c402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c406:	b003      	add	sp, #12
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	0800c437 	.word	0x0800c437
 800c410:	200002c4 	.word	0x200002c4

0800c414 <__sread>:
 800c414:	b510      	push	{r4, lr}
 800c416:	460c      	mov	r4, r1
 800c418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41c:	f002 fc06 	bl	800ec2c <_read_r>
 800c420:	2800      	cmp	r0, #0
 800c422:	bfab      	itete	ge
 800c424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c426:	89a3      	ldrhlt	r3, [r4, #12]
 800c428:	181b      	addge	r3, r3, r0
 800c42a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c42e:	bfac      	ite	ge
 800c430:	6563      	strge	r3, [r4, #84]	; 0x54
 800c432:	81a3      	strhlt	r3, [r4, #12]
 800c434:	bd10      	pop	{r4, pc}

0800c436 <__seofread>:
 800c436:	2000      	movs	r0, #0
 800c438:	4770      	bx	lr

0800c43a <__swrite>:
 800c43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c43e:	461f      	mov	r7, r3
 800c440:	898b      	ldrh	r3, [r1, #12]
 800c442:	05db      	lsls	r3, r3, #23
 800c444:	4605      	mov	r5, r0
 800c446:	460c      	mov	r4, r1
 800c448:	4616      	mov	r6, r2
 800c44a:	d505      	bpl.n	800c458 <__swrite+0x1e>
 800c44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c450:	2302      	movs	r3, #2
 800c452:	2200      	movs	r2, #0
 800c454:	f001 fa4a 	bl	800d8ec <_lseek_r>
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c45e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	4632      	mov	r2, r6
 800c466:	463b      	mov	r3, r7
 800c468:	4628      	mov	r0, r5
 800c46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c46e:	f000 bb09 	b.w	800ca84 <_write_r>

0800c472 <__sseek>:
 800c472:	b510      	push	{r4, lr}
 800c474:	460c      	mov	r4, r1
 800c476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c47a:	f001 fa37 	bl	800d8ec <_lseek_r>
 800c47e:	1c43      	adds	r3, r0, #1
 800c480:	89a3      	ldrh	r3, [r4, #12]
 800c482:	bf15      	itete	ne
 800c484:	6560      	strne	r0, [r4, #84]	; 0x54
 800c486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c48a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c48e:	81a3      	strheq	r3, [r4, #12]
 800c490:	bf18      	it	ne
 800c492:	81a3      	strhne	r3, [r4, #12]
 800c494:	bd10      	pop	{r4, pc}

0800c496 <__sclose>:
 800c496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c49a:	f000 bb23 	b.w	800cae4 <_close_r>

0800c49e <strchr>:
 800c49e:	b2c9      	uxtb	r1, r1
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4a6:	b11a      	cbz	r2, 800c4b0 <strchr+0x12>
 800c4a8:	428a      	cmp	r2, r1
 800c4aa:	d1f9      	bne.n	800c4a0 <strchr+0x2>
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	4770      	bx	lr
 800c4b0:	2900      	cmp	r1, #0
 800c4b2:	bf18      	it	ne
 800c4b4:	2300      	movne	r3, #0
 800c4b6:	e7f9      	b.n	800c4ac <strchr+0xe>

0800c4b8 <strcpy>:
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4be:	f803 2b01 	strb.w	r2, [r3], #1
 800c4c2:	2a00      	cmp	r2, #0
 800c4c4:	d1f9      	bne.n	800c4ba <strcpy+0x2>
 800c4c6:	4770      	bx	lr

0800c4c8 <strncmp>:
 800c4c8:	b510      	push	{r4, lr}
 800c4ca:	b17a      	cbz	r2, 800c4ec <strncmp+0x24>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	3901      	subs	r1, #1
 800c4d0:	1884      	adds	r4, r0, r2
 800c4d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c4d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c4da:	4290      	cmp	r0, r2
 800c4dc:	d101      	bne.n	800c4e2 <strncmp+0x1a>
 800c4de:	42a3      	cmp	r3, r4
 800c4e0:	d101      	bne.n	800c4e6 <strncmp+0x1e>
 800c4e2:	1a80      	subs	r0, r0, r2
 800c4e4:	bd10      	pop	{r4, pc}
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d1f3      	bne.n	800c4d2 <strncmp+0xa>
 800c4ea:	e7fa      	b.n	800c4e2 <strncmp+0x1a>
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	e7f9      	b.n	800c4e4 <strncmp+0x1c>

0800c4f0 <_strtol_l.constprop.0>:
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f6:	d001      	beq.n	800c4fc <_strtol_l.constprop.0+0xc>
 800c4f8:	2b24      	cmp	r3, #36	; 0x24
 800c4fa:	d906      	bls.n	800c50a <_strtol_l.constprop.0+0x1a>
 800c4fc:	f7fe fe66 	bl	800b1cc <__errno>
 800c500:	2316      	movs	r3, #22
 800c502:	6003      	str	r3, [r0, #0]
 800c504:	2000      	movs	r0, #0
 800c506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c5f0 <_strtol_l.constprop.0+0x100>
 800c50e:	460d      	mov	r5, r1
 800c510:	462e      	mov	r6, r5
 800c512:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c516:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c51a:	f017 0708 	ands.w	r7, r7, #8
 800c51e:	d1f7      	bne.n	800c510 <_strtol_l.constprop.0+0x20>
 800c520:	2c2d      	cmp	r4, #45	; 0x2d
 800c522:	d132      	bne.n	800c58a <_strtol_l.constprop.0+0x9a>
 800c524:	782c      	ldrb	r4, [r5, #0]
 800c526:	2701      	movs	r7, #1
 800c528:	1cb5      	adds	r5, r6, #2
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d05b      	beq.n	800c5e6 <_strtol_l.constprop.0+0xf6>
 800c52e:	2b10      	cmp	r3, #16
 800c530:	d109      	bne.n	800c546 <_strtol_l.constprop.0+0x56>
 800c532:	2c30      	cmp	r4, #48	; 0x30
 800c534:	d107      	bne.n	800c546 <_strtol_l.constprop.0+0x56>
 800c536:	782c      	ldrb	r4, [r5, #0]
 800c538:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c53c:	2c58      	cmp	r4, #88	; 0x58
 800c53e:	d14d      	bne.n	800c5dc <_strtol_l.constprop.0+0xec>
 800c540:	786c      	ldrb	r4, [r5, #1]
 800c542:	2310      	movs	r3, #16
 800c544:	3502      	adds	r5, #2
 800c546:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c54a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c54e:	f04f 0c00 	mov.w	ip, #0
 800c552:	fbb8 f9f3 	udiv	r9, r8, r3
 800c556:	4666      	mov	r6, ip
 800c558:	fb03 8a19 	mls	sl, r3, r9, r8
 800c55c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c560:	f1be 0f09 	cmp.w	lr, #9
 800c564:	d816      	bhi.n	800c594 <_strtol_l.constprop.0+0xa4>
 800c566:	4674      	mov	r4, lr
 800c568:	42a3      	cmp	r3, r4
 800c56a:	dd24      	ble.n	800c5b6 <_strtol_l.constprop.0+0xc6>
 800c56c:	f1bc 0f00 	cmp.w	ip, #0
 800c570:	db1e      	blt.n	800c5b0 <_strtol_l.constprop.0+0xc0>
 800c572:	45b1      	cmp	r9, r6
 800c574:	d31c      	bcc.n	800c5b0 <_strtol_l.constprop.0+0xc0>
 800c576:	d101      	bne.n	800c57c <_strtol_l.constprop.0+0x8c>
 800c578:	45a2      	cmp	sl, r4
 800c57a:	db19      	blt.n	800c5b0 <_strtol_l.constprop.0+0xc0>
 800c57c:	fb06 4603 	mla	r6, r6, r3, r4
 800c580:	f04f 0c01 	mov.w	ip, #1
 800c584:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c588:	e7e8      	b.n	800c55c <_strtol_l.constprop.0+0x6c>
 800c58a:	2c2b      	cmp	r4, #43	; 0x2b
 800c58c:	bf04      	itt	eq
 800c58e:	782c      	ldrbeq	r4, [r5, #0]
 800c590:	1cb5      	addeq	r5, r6, #2
 800c592:	e7ca      	b.n	800c52a <_strtol_l.constprop.0+0x3a>
 800c594:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c598:	f1be 0f19 	cmp.w	lr, #25
 800c59c:	d801      	bhi.n	800c5a2 <_strtol_l.constprop.0+0xb2>
 800c59e:	3c37      	subs	r4, #55	; 0x37
 800c5a0:	e7e2      	b.n	800c568 <_strtol_l.constprop.0+0x78>
 800c5a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c5a6:	f1be 0f19 	cmp.w	lr, #25
 800c5aa:	d804      	bhi.n	800c5b6 <_strtol_l.constprop.0+0xc6>
 800c5ac:	3c57      	subs	r4, #87	; 0x57
 800c5ae:	e7db      	b.n	800c568 <_strtol_l.constprop.0+0x78>
 800c5b0:	f04f 3cff 	mov.w	ip, #4294967295
 800c5b4:	e7e6      	b.n	800c584 <_strtol_l.constprop.0+0x94>
 800c5b6:	f1bc 0f00 	cmp.w	ip, #0
 800c5ba:	da05      	bge.n	800c5c8 <_strtol_l.constprop.0+0xd8>
 800c5bc:	2322      	movs	r3, #34	; 0x22
 800c5be:	6003      	str	r3, [r0, #0]
 800c5c0:	4646      	mov	r6, r8
 800c5c2:	b942      	cbnz	r2, 800c5d6 <_strtol_l.constprop.0+0xe6>
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	e79e      	b.n	800c506 <_strtol_l.constprop.0+0x16>
 800c5c8:	b107      	cbz	r7, 800c5cc <_strtol_l.constprop.0+0xdc>
 800c5ca:	4276      	negs	r6, r6
 800c5cc:	2a00      	cmp	r2, #0
 800c5ce:	d0f9      	beq.n	800c5c4 <_strtol_l.constprop.0+0xd4>
 800c5d0:	f1bc 0f00 	cmp.w	ip, #0
 800c5d4:	d000      	beq.n	800c5d8 <_strtol_l.constprop.0+0xe8>
 800c5d6:	1e69      	subs	r1, r5, #1
 800c5d8:	6011      	str	r1, [r2, #0]
 800c5da:	e7f3      	b.n	800c5c4 <_strtol_l.constprop.0+0xd4>
 800c5dc:	2430      	movs	r4, #48	; 0x30
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1b1      	bne.n	800c546 <_strtol_l.constprop.0+0x56>
 800c5e2:	2308      	movs	r3, #8
 800c5e4:	e7af      	b.n	800c546 <_strtol_l.constprop.0+0x56>
 800c5e6:	2c30      	cmp	r4, #48	; 0x30
 800c5e8:	d0a5      	beq.n	800c536 <_strtol_l.constprop.0+0x46>
 800c5ea:	230a      	movs	r3, #10
 800c5ec:	e7ab      	b.n	800c546 <_strtol_l.constprop.0+0x56>
 800c5ee:	bf00      	nop
 800c5f0:	08011047 	.word	0x08011047

0800c5f4 <_strtol_r>:
 800c5f4:	f7ff bf7c 	b.w	800c4f0 <_strtol_l.constprop.0>

0800c5f8 <strtol>:
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	460a      	mov	r2, r1
 800c5fc:	4601      	mov	r1, r0
 800c5fe:	4802      	ldr	r0, [pc, #8]	; (800c608 <strtol+0x10>)
 800c600:	6800      	ldr	r0, [r0, #0]
 800c602:	f7ff bf75 	b.w	800c4f0 <_strtol_l.constprop.0>
 800c606:	bf00      	nop
 800c608:	200002c4 	.word	0x200002c4

0800c60c <__tzcalc_limits>:
 800c60c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c610:	4605      	mov	r5, r0
 800c612:	f001 f95d 	bl	800d8d0 <__gettzinfo>
 800c616:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800c61a:	429d      	cmp	r5, r3
 800c61c:	f340 8099 	ble.w	800c752 <__tzcalc_limits+0x146>
 800c620:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800c624:	18ac      	adds	r4, r5, r2
 800c626:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800c62a:	f240 126d 	movw	r2, #365	; 0x16d
 800c62e:	10a4      	asrs	r4, r4, #2
 800c630:	fb02 4403 	mla	r4, r2, r3, r4
 800c634:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800c638:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800c63c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c640:	441c      	add	r4, r3
 800c642:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c646:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800c64a:	fb95 fcf3 	sdiv	ip, r5, r3
 800c64e:	fb03 5c1c 	mls	ip, r3, ip, r5
 800c652:	186a      	adds	r2, r5, r1
 800c654:	fabc f68c 	clz	r6, ip
 800c658:	fbb2 f2f3 	udiv	r2, r2, r3
 800c65c:	f005 0303 	and.w	r3, r5, #3
 800c660:	4414      	add	r4, r2
 800c662:	2264      	movs	r2, #100	; 0x64
 800c664:	6045      	str	r5, [r0, #4]
 800c666:	fb95 f7f2 	sdiv	r7, r5, r2
 800c66a:	0976      	lsrs	r6, r6, #5
 800c66c:	fb02 5717 	mls	r7, r2, r7, r5
 800c670:	4601      	mov	r1, r0
 800c672:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	f04f 0a07 	mov.w	sl, #7
 800c67c:	7a0d      	ldrb	r5, [r1, #8]
 800c67e:	694b      	ldr	r3, [r1, #20]
 800c680:	2d4a      	cmp	r5, #74	; 0x4a
 800c682:	d12d      	bne.n	800c6e0 <__tzcalc_limits+0xd4>
 800c684:	9a00      	ldr	r2, [sp, #0]
 800c686:	eb04 0e03 	add.w	lr, r4, r3
 800c68a:	b902      	cbnz	r2, 800c68e <__tzcalc_limits+0x82>
 800c68c:	b917      	cbnz	r7, 800c694 <__tzcalc_limits+0x88>
 800c68e:	f1bc 0f00 	cmp.w	ip, #0
 800c692:	d123      	bne.n	800c6dc <__tzcalc_limits+0xd0>
 800c694:	2b3b      	cmp	r3, #59	; 0x3b
 800c696:	bfd4      	ite	le
 800c698:	2300      	movle	r3, #0
 800c69a:	2301      	movgt	r3, #1
 800c69c:	4473      	add	r3, lr
 800c69e:	3b01      	subs	r3, #1
 800c6a0:	698d      	ldr	r5, [r1, #24]
 800c6a2:	4a2d      	ldr	r2, [pc, #180]	; (800c758 <__tzcalc_limits+0x14c>)
 800c6a4:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800c6a8:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800c6ac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800c6ae:	18ed      	adds	r5, r5, r3
 800c6b0:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800c6b4:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800c6b8:	3128      	adds	r1, #40	; 0x28
 800c6ba:	458b      	cmp	fp, r1
 800c6bc:	d1de      	bne.n	800c67c <__tzcalc_limits+0x70>
 800c6be:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800c6c2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800c6c6:	428c      	cmp	r4, r1
 800c6c8:	eb72 0303 	sbcs.w	r3, r2, r3
 800c6cc:	bfb4      	ite	lt
 800c6ce:	2301      	movlt	r3, #1
 800c6d0:	2300      	movge	r3, #0
 800c6d2:	6003      	str	r3, [r0, #0]
 800c6d4:	2001      	movs	r0, #1
 800c6d6:	b003      	add	sp, #12
 800c6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6dc:	2300      	movs	r3, #0
 800c6de:	e7dd      	b.n	800c69c <__tzcalc_limits+0x90>
 800c6e0:	2d44      	cmp	r5, #68	; 0x44
 800c6e2:	d101      	bne.n	800c6e8 <__tzcalc_limits+0xdc>
 800c6e4:	4423      	add	r3, r4
 800c6e6:	e7db      	b.n	800c6a0 <__tzcalc_limits+0x94>
 800c6e8:	9a00      	ldr	r2, [sp, #0]
 800c6ea:	bb62      	cbnz	r2, 800c746 <__tzcalc_limits+0x13a>
 800c6ec:	2f00      	cmp	r7, #0
 800c6ee:	bf0c      	ite	eq
 800c6f0:	4635      	moveq	r5, r6
 800c6f2:	2501      	movne	r5, #1
 800c6f4:	68ca      	ldr	r2, [r1, #12]
 800c6f6:	9201      	str	r2, [sp, #4]
 800c6f8:	4a18      	ldr	r2, [pc, #96]	; (800c75c <__tzcalc_limits+0x150>)
 800c6fa:	f04f 0930 	mov.w	r9, #48	; 0x30
 800c6fe:	fb09 2505 	mla	r5, r9, r5, r2
 800c702:	46a6      	mov	lr, r4
 800c704:	f04f 0800 	mov.w	r8, #0
 800c708:	3d04      	subs	r5, #4
 800c70a:	9a01      	ldr	r2, [sp, #4]
 800c70c:	f108 0801 	add.w	r8, r8, #1
 800c710:	4542      	cmp	r2, r8
 800c712:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800c716:	dc18      	bgt.n	800c74a <__tzcalc_limits+0x13e>
 800c718:	f10e 0504 	add.w	r5, lr, #4
 800c71c:	fb95 f8fa 	sdiv	r8, r5, sl
 800c720:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800c724:	eba5 0808 	sub.w	r8, r5, r8
 800c728:	ebb3 0808 	subs.w	r8, r3, r8
 800c72c:	690b      	ldr	r3, [r1, #16]
 800c72e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c732:	bf48      	it	mi
 800c734:	f108 0807 	addmi.w	r8, r8, #7
 800c738:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c73c:	4443      	add	r3, r8
 800c73e:	454b      	cmp	r3, r9
 800c740:	da05      	bge.n	800c74e <__tzcalc_limits+0x142>
 800c742:	4473      	add	r3, lr
 800c744:	e7ac      	b.n	800c6a0 <__tzcalc_limits+0x94>
 800c746:	4635      	mov	r5, r6
 800c748:	e7d4      	b.n	800c6f4 <__tzcalc_limits+0xe8>
 800c74a:	44ce      	add	lr, r9
 800c74c:	e7dd      	b.n	800c70a <__tzcalc_limits+0xfe>
 800c74e:	3b07      	subs	r3, #7
 800c750:	e7f5      	b.n	800c73e <__tzcalc_limits+0x132>
 800c752:	2000      	movs	r0, #0
 800c754:	e7bf      	b.n	800c6d6 <__tzcalc_limits+0xca>
 800c756:	bf00      	nop
 800c758:	00015180 	.word	0x00015180
 800c75c:	080111c0 	.word	0x080111c0

0800c760 <__tz_lock>:
 800c760:	4801      	ldr	r0, [pc, #4]	; (800c768 <__tz_lock+0x8>)
 800c762:	f001 b8be 	b.w	800d8e2 <__retarget_lock_acquire>
 800c766:	bf00      	nop
 800c768:	20000d10 	.word	0x20000d10

0800c76c <__tz_unlock>:
 800c76c:	4801      	ldr	r0, [pc, #4]	; (800c774 <__tz_unlock+0x8>)
 800c76e:	f001 b8ba 	b.w	800d8e6 <__retarget_lock_release>
 800c772:	bf00      	nop
 800c774:	20000d10 	.word	0x20000d10

0800c778 <_tzset_unlocked>:
 800c778:	4b01      	ldr	r3, [pc, #4]	; (800c780 <_tzset_unlocked+0x8>)
 800c77a:	6818      	ldr	r0, [r3, #0]
 800c77c:	f000 b802 	b.w	800c784 <_tzset_unlocked_r>
 800c780:	200002c4 	.word	0x200002c4

0800c784 <_tzset_unlocked_r>:
 800c784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c788:	b08d      	sub	sp, #52	; 0x34
 800c78a:	4607      	mov	r7, r0
 800c78c:	f001 f8a0 	bl	800d8d0 <__gettzinfo>
 800c790:	49b0      	ldr	r1, [pc, #704]	; (800ca54 <_tzset_unlocked_r+0x2d0>)
 800c792:	4eb1      	ldr	r6, [pc, #708]	; (800ca58 <_tzset_unlocked_r+0x2d4>)
 800c794:	4605      	mov	r5, r0
 800c796:	4638      	mov	r0, r7
 800c798:	f001 f892 	bl	800d8c0 <_getenv_r>
 800c79c:	4604      	mov	r4, r0
 800c79e:	b970      	cbnz	r0, 800c7be <_tzset_unlocked_r+0x3a>
 800c7a0:	4bae      	ldr	r3, [pc, #696]	; (800ca5c <_tzset_unlocked_r+0x2d8>)
 800c7a2:	4aaf      	ldr	r2, [pc, #700]	; (800ca60 <_tzset_unlocked_r+0x2dc>)
 800c7a4:	6018      	str	r0, [r3, #0]
 800c7a6:	4baf      	ldr	r3, [pc, #700]	; (800ca64 <_tzset_unlocked_r+0x2e0>)
 800c7a8:	6018      	str	r0, [r3, #0]
 800c7aa:	4baf      	ldr	r3, [pc, #700]	; (800ca68 <_tzset_unlocked_r+0x2e4>)
 800c7ac:	6830      	ldr	r0, [r6, #0]
 800c7ae:	e9c3 2200 	strd	r2, r2, [r3]
 800c7b2:	f7fe fe07 	bl	800b3c4 <free>
 800c7b6:	6034      	str	r4, [r6, #0]
 800c7b8:	b00d      	add	sp, #52	; 0x34
 800c7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7be:	6831      	ldr	r1, [r6, #0]
 800c7c0:	2900      	cmp	r1, #0
 800c7c2:	d162      	bne.n	800c88a <_tzset_unlocked_r+0x106>
 800c7c4:	6830      	ldr	r0, [r6, #0]
 800c7c6:	f7fe fdfd 	bl	800b3c4 <free>
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f7f3 fd12 	bl	80001f4 <strlen>
 800c7d0:	1c41      	adds	r1, r0, #1
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	f7ff f8e4 	bl	800b9a0 <_malloc_r>
 800c7d8:	6030      	str	r0, [r6, #0]
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d15a      	bne.n	800c894 <_tzset_unlocked_r+0x110>
 800c7de:	7823      	ldrb	r3, [r4, #0]
 800c7e0:	4aa2      	ldr	r2, [pc, #648]	; (800ca6c <_tzset_unlocked_r+0x2e8>)
 800c7e2:	49a3      	ldr	r1, [pc, #652]	; (800ca70 <_tzset_unlocked_r+0x2ec>)
 800c7e4:	2b3a      	cmp	r3, #58	; 0x3a
 800c7e6:	bf08      	it	eq
 800c7e8:	3401      	addeq	r4, #1
 800c7ea:	ae0a      	add	r6, sp, #40	; 0x28
 800c7ec:	4633      	mov	r3, r6
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f7ff fde4 	bl	800c3bc <siscanf>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	dddf      	ble.n	800c7b8 <_tzset_unlocked_r+0x34>
 800c7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7fa:	18e7      	adds	r7, r4, r3
 800c7fc:	5ce3      	ldrb	r3, [r4, r3]
 800c7fe:	2b2d      	cmp	r3, #45	; 0x2d
 800c800:	d14c      	bne.n	800c89c <_tzset_unlocked_r+0x118>
 800c802:	3701      	adds	r7, #1
 800c804:	f04f 38ff 	mov.w	r8, #4294967295
 800c808:	f10d 0a20 	add.w	sl, sp, #32
 800c80c:	f10d 0b1e 	add.w	fp, sp, #30
 800c810:	2400      	movs	r4, #0
 800c812:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800c816:	4997      	ldr	r1, [pc, #604]	; (800ca74 <_tzset_unlocked_r+0x2f0>)
 800c818:	9603      	str	r6, [sp, #12]
 800c81a:	f8cd b000 	str.w	fp, [sp]
 800c81e:	4633      	mov	r3, r6
 800c820:	aa07      	add	r2, sp, #28
 800c822:	4638      	mov	r0, r7
 800c824:	f8ad 401e 	strh.w	r4, [sp, #30]
 800c828:	f8ad 4020 	strh.w	r4, [sp, #32]
 800c82c:	f7ff fdc6 	bl	800c3bc <siscanf>
 800c830:	42a0      	cmp	r0, r4
 800c832:	ddc1      	ble.n	800c7b8 <_tzset_unlocked_r+0x34>
 800c834:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c838:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c83c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800ca80 <_tzset_unlocked_r+0x2fc>
 800c840:	213c      	movs	r1, #60	; 0x3c
 800c842:	fb01 3302 	mla	r3, r1, r2, r3
 800c846:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c84a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c84e:	fb01 3302 	mla	r3, r1, r2, r3
 800c852:	fb08 f303 	mul.w	r3, r8, r3
 800c856:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800ca68 <_tzset_unlocked_r+0x2e4>
 800c85a:	62ab      	str	r3, [r5, #40]	; 0x28
 800c85c:	4b83      	ldr	r3, [pc, #524]	; (800ca6c <_tzset_unlocked_r+0x2e8>)
 800c85e:	f8c8 3000 	str.w	r3, [r8]
 800c862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c864:	4982      	ldr	r1, [pc, #520]	; (800ca70 <_tzset_unlocked_r+0x2ec>)
 800c866:	441f      	add	r7, r3
 800c868:	464a      	mov	r2, r9
 800c86a:	4633      	mov	r3, r6
 800c86c:	4638      	mov	r0, r7
 800c86e:	f7ff fda5 	bl	800c3bc <siscanf>
 800c872:	42a0      	cmp	r0, r4
 800c874:	dc18      	bgt.n	800c8a8 <_tzset_unlocked_r+0x124>
 800c876:	f8d8 3000 	ldr.w	r3, [r8]
 800c87a:	f8c8 3004 	str.w	r3, [r8, #4]
 800c87e:	4b77      	ldr	r3, [pc, #476]	; (800ca5c <_tzset_unlocked_r+0x2d8>)
 800c880:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	4b77      	ldr	r3, [pc, #476]	; (800ca64 <_tzset_unlocked_r+0x2e0>)
 800c886:	601c      	str	r4, [r3, #0]
 800c888:	e796      	b.n	800c7b8 <_tzset_unlocked_r+0x34>
 800c88a:	f7f3 fca9 	bl	80001e0 <strcmp>
 800c88e:	2800      	cmp	r0, #0
 800c890:	d198      	bne.n	800c7c4 <_tzset_unlocked_r+0x40>
 800c892:	e791      	b.n	800c7b8 <_tzset_unlocked_r+0x34>
 800c894:	4621      	mov	r1, r4
 800c896:	f7ff fe0f 	bl	800c4b8 <strcpy>
 800c89a:	e7a0      	b.n	800c7de <_tzset_unlocked_r+0x5a>
 800c89c:	2b2b      	cmp	r3, #43	; 0x2b
 800c89e:	bf08      	it	eq
 800c8a0:	3701      	addeq	r7, #1
 800c8a2:	f04f 0801 	mov.w	r8, #1
 800c8a6:	e7af      	b.n	800c808 <_tzset_unlocked_r+0x84>
 800c8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8aa:	f8c8 9004 	str.w	r9, [r8, #4]
 800c8ae:	18fc      	adds	r4, r7, r3
 800c8b0:	5cfb      	ldrb	r3, [r7, r3]
 800c8b2:	2b2d      	cmp	r3, #45	; 0x2d
 800c8b4:	f040 808b 	bne.w	800c9ce <_tzset_unlocked_r+0x24a>
 800c8b8:	3401      	adds	r4, #1
 800c8ba:	f04f 37ff 	mov.w	r7, #4294967295
 800c8be:	2300      	movs	r3, #0
 800c8c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c8c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c8c8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c8cc:	930a      	str	r3, [sp, #40]	; 0x28
 800c8ce:	e9cd a602 	strd	sl, r6, [sp, #8]
 800c8d2:	e9cd b600 	strd	fp, r6, [sp]
 800c8d6:	4967      	ldr	r1, [pc, #412]	; (800ca74 <_tzset_unlocked_r+0x2f0>)
 800c8d8:	4633      	mov	r3, r6
 800c8da:	aa07      	add	r2, sp, #28
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f7ff fd6d 	bl	800c3bc <siscanf>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	dc78      	bgt.n	800c9d8 <_tzset_unlocked_r+0x254>
 800c8e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c8e8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800c8ec:	652b      	str	r3, [r5, #80]	; 0x50
 800c8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8f0:	462f      	mov	r7, r5
 800c8f2:	441c      	add	r4, r3
 800c8f4:	f04f 0900 	mov.w	r9, #0
 800c8f8:	7823      	ldrb	r3, [r4, #0]
 800c8fa:	2b2c      	cmp	r3, #44	; 0x2c
 800c8fc:	bf08      	it	eq
 800c8fe:	3401      	addeq	r4, #1
 800c900:	f894 8000 	ldrb.w	r8, [r4]
 800c904:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800c908:	d178      	bne.n	800c9fc <_tzset_unlocked_r+0x278>
 800c90a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800c90e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800c912:	ab09      	add	r3, sp, #36	; 0x24
 800c914:	9300      	str	r3, [sp, #0]
 800c916:	4958      	ldr	r1, [pc, #352]	; (800ca78 <_tzset_unlocked_r+0x2f4>)
 800c918:	9603      	str	r6, [sp, #12]
 800c91a:	4633      	mov	r3, r6
 800c91c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800c920:	4620      	mov	r0, r4
 800c922:	f7ff fd4b 	bl	800c3bc <siscanf>
 800c926:	2803      	cmp	r0, #3
 800c928:	f47f af46 	bne.w	800c7b8 <_tzset_unlocked_r+0x34>
 800c92c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800c930:	1e4b      	subs	r3, r1, #1
 800c932:	2b0b      	cmp	r3, #11
 800c934:	f63f af40 	bhi.w	800c7b8 <_tzset_unlocked_r+0x34>
 800c938:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800c93c:	1e53      	subs	r3, r2, #1
 800c93e:	2b04      	cmp	r3, #4
 800c940:	f63f af3a 	bhi.w	800c7b8 <_tzset_unlocked_r+0x34>
 800c944:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800c948:	2b06      	cmp	r3, #6
 800c94a:	f63f af35 	bhi.w	800c7b8 <_tzset_unlocked_r+0x34>
 800c94e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800c952:	f887 8008 	strb.w	r8, [r7, #8]
 800c956:	617b      	str	r3, [r7, #20]
 800c958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c95a:	eb04 0803 	add.w	r8, r4, r3
 800c95e:	2302      	movs	r3, #2
 800c960:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c964:	2300      	movs	r3, #0
 800c966:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c96a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c96e:	930a      	str	r3, [sp, #40]	; 0x28
 800c970:	f898 3000 	ldrb.w	r3, [r8]
 800c974:	2b2f      	cmp	r3, #47	; 0x2f
 800c976:	d109      	bne.n	800c98c <_tzset_unlocked_r+0x208>
 800c978:	e9cd a602 	strd	sl, r6, [sp, #8]
 800c97c:	e9cd b600 	strd	fp, r6, [sp]
 800c980:	493e      	ldr	r1, [pc, #248]	; (800ca7c <_tzset_unlocked_r+0x2f8>)
 800c982:	4633      	mov	r3, r6
 800c984:	aa07      	add	r2, sp, #28
 800c986:	4640      	mov	r0, r8
 800c988:	f7ff fd18 	bl	800c3bc <siscanf>
 800c98c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c990:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c994:	213c      	movs	r1, #60	; 0x3c
 800c996:	fb01 3302 	mla	r3, r1, r2, r3
 800c99a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c99e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c9a2:	fb01 3302 	mla	r3, r1, r2, r3
 800c9a6:	61bb      	str	r3, [r7, #24]
 800c9a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c9aa:	3728      	adds	r7, #40	; 0x28
 800c9ac:	4444      	add	r4, r8
 800c9ae:	f1b9 0f00 	cmp.w	r9, #0
 800c9b2:	d020      	beq.n	800c9f6 <_tzset_unlocked_r+0x272>
 800c9b4:	6868      	ldr	r0, [r5, #4]
 800c9b6:	f7ff fe29 	bl	800c60c <__tzcalc_limits>
 800c9ba:	4b28      	ldr	r3, [pc, #160]	; (800ca5c <_tzset_unlocked_r+0x2d8>)
 800c9bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c9be:	601a      	str	r2, [r3, #0]
 800c9c0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c9c2:	1a9b      	subs	r3, r3, r2
 800c9c4:	4a27      	ldr	r2, [pc, #156]	; (800ca64 <_tzset_unlocked_r+0x2e0>)
 800c9c6:	bf18      	it	ne
 800c9c8:	2301      	movne	r3, #1
 800c9ca:	6013      	str	r3, [r2, #0]
 800c9cc:	e6f4      	b.n	800c7b8 <_tzset_unlocked_r+0x34>
 800c9ce:	2b2b      	cmp	r3, #43	; 0x2b
 800c9d0:	bf08      	it	eq
 800c9d2:	3401      	addeq	r4, #1
 800c9d4:	2701      	movs	r7, #1
 800c9d6:	e772      	b.n	800c8be <_tzset_unlocked_r+0x13a>
 800c9d8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c9dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c9e0:	213c      	movs	r1, #60	; 0x3c
 800c9e2:	fb01 3302 	mla	r3, r1, r2, r3
 800c9e6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c9ea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c9ee:	fb01 3302 	mla	r3, r1, r2, r3
 800c9f2:	437b      	muls	r3, r7
 800c9f4:	e77a      	b.n	800c8ec <_tzset_unlocked_r+0x168>
 800c9f6:	f04f 0901 	mov.w	r9, #1
 800c9fa:	e77d      	b.n	800c8f8 <_tzset_unlocked_r+0x174>
 800c9fc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800ca00:	bf06      	itte	eq
 800ca02:	3401      	addeq	r4, #1
 800ca04:	4643      	moveq	r3, r8
 800ca06:	2344      	movne	r3, #68	; 0x44
 800ca08:	220a      	movs	r2, #10
 800ca0a:	a90b      	add	r1, sp, #44	; 0x2c
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	9305      	str	r3, [sp, #20]
 800ca10:	f002 f9ca 	bl	800eda8 <strtoul>
 800ca14:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ca18:	9b05      	ldr	r3, [sp, #20]
 800ca1a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800ca1e:	45a0      	cmp	r8, r4
 800ca20:	d114      	bne.n	800ca4c <_tzset_unlocked_r+0x2c8>
 800ca22:	234d      	movs	r3, #77	; 0x4d
 800ca24:	f1b9 0f00 	cmp.w	r9, #0
 800ca28:	d107      	bne.n	800ca3a <_tzset_unlocked_r+0x2b6>
 800ca2a:	722b      	strb	r3, [r5, #8]
 800ca2c:	2103      	movs	r1, #3
 800ca2e:	2302      	movs	r3, #2
 800ca30:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800ca34:	f8c5 9014 	str.w	r9, [r5, #20]
 800ca38:	e791      	b.n	800c95e <_tzset_unlocked_r+0x1da>
 800ca3a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800ca3e:	220b      	movs	r2, #11
 800ca40:	2301      	movs	r3, #1
 800ca42:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800ca46:	2300      	movs	r3, #0
 800ca48:	63eb      	str	r3, [r5, #60]	; 0x3c
 800ca4a:	e788      	b.n	800c95e <_tzset_unlocked_r+0x1da>
 800ca4c:	b280      	uxth	r0, r0
 800ca4e:	723b      	strb	r3, [r7, #8]
 800ca50:	6178      	str	r0, [r7, #20]
 800ca52:	e784      	b.n	800c95e <_tzset_unlocked_r+0x1da>
 800ca54:	08010fce 	.word	0x08010fce
 800ca58:	20000d00 	.word	0x20000d00
 800ca5c:	20000d08 	.word	0x20000d08
 800ca60:	08010fd1 	.word	0x08010fd1
 800ca64:	20000d04 	.word	0x20000d04
 800ca68:	20000328 	.word	0x20000328
 800ca6c:	20000cf3 	.word	0x20000cf3
 800ca70:	08010fd5 	.word	0x08010fd5
 800ca74:	08010ff8 	.word	0x08010ff8
 800ca78:	08010fe4 	.word	0x08010fe4
 800ca7c:	08010ff7 	.word	0x08010ff7
 800ca80:	20000ce8 	.word	0x20000ce8

0800ca84 <_write_r>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4d07      	ldr	r5, [pc, #28]	; (800caa4 <_write_r+0x20>)
 800ca88:	4604      	mov	r4, r0
 800ca8a:	4608      	mov	r0, r1
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	2200      	movs	r2, #0
 800ca90:	602a      	str	r2, [r5, #0]
 800ca92:	461a      	mov	r2, r3
 800ca94:	f7f7 fb93 	bl	80041be <_write>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_write_r+0x1e>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_write_r+0x1e>
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	20000d14 	.word	0x20000d14

0800caa8 <__assert_func>:
 800caa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caaa:	4614      	mov	r4, r2
 800caac:	461a      	mov	r2, r3
 800caae:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <__assert_func+0x2c>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4605      	mov	r5, r0
 800cab4:	68d8      	ldr	r0, [r3, #12]
 800cab6:	b14c      	cbz	r4, 800cacc <__assert_func+0x24>
 800cab8:	4b07      	ldr	r3, [pc, #28]	; (800cad8 <__assert_func+0x30>)
 800caba:	9100      	str	r1, [sp, #0]
 800cabc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cac0:	4906      	ldr	r1, [pc, #24]	; (800cadc <__assert_func+0x34>)
 800cac2:	462b      	mov	r3, r5
 800cac4:	f000 feae 	bl	800d824 <fiprintf>
 800cac8:	f002 fa72 	bl	800efb0 <abort>
 800cacc:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <__assert_func+0x38>)
 800cace:	461c      	mov	r4, r3
 800cad0:	e7f3      	b.n	800caba <__assert_func+0x12>
 800cad2:	bf00      	nop
 800cad4:	200002c4 	.word	0x200002c4
 800cad8:	0801100a 	.word	0x0801100a
 800cadc:	08011017 	.word	0x08011017
 800cae0:	08011045 	.word	0x08011045

0800cae4 <_close_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	4d06      	ldr	r5, [pc, #24]	; (800cb00 <_close_r+0x1c>)
 800cae8:	2300      	movs	r3, #0
 800caea:	4604      	mov	r4, r0
 800caec:	4608      	mov	r0, r1
 800caee:	602b      	str	r3, [r5, #0]
 800caf0:	f7f7 fb81 	bl	80041f6 <_close>
 800caf4:	1c43      	adds	r3, r0, #1
 800caf6:	d102      	bne.n	800cafe <_close_r+0x1a>
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	b103      	cbz	r3, 800cafe <_close_r+0x1a>
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	bd38      	pop	{r3, r4, r5, pc}
 800cb00:	20000d14 	.word	0x20000d14

0800cb04 <div>:
 800cb04:	2900      	cmp	r1, #0
 800cb06:	b510      	push	{r4, lr}
 800cb08:	fb91 f4f2 	sdiv	r4, r1, r2
 800cb0c:	fb02 1314 	mls	r3, r2, r4, r1
 800cb10:	db06      	blt.n	800cb20 <div+0x1c>
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	da01      	bge.n	800cb1a <div+0x16>
 800cb16:	3401      	adds	r4, #1
 800cb18:	1a9b      	subs	r3, r3, r2
 800cb1a:	e9c0 4300 	strd	r4, r3, [r0]
 800cb1e:	bd10      	pop	{r4, pc}
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	bfc4      	itt	gt
 800cb24:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800cb28:	189b      	addgt	r3, r3, r2
 800cb2a:	e7f6      	b.n	800cb1a <div+0x16>

0800cb2c <quorem>:
 800cb2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb30:	6903      	ldr	r3, [r0, #16]
 800cb32:	690c      	ldr	r4, [r1, #16]
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	4607      	mov	r7, r0
 800cb38:	f2c0 8081 	blt.w	800cc3e <quorem+0x112>
 800cb3c:	3c01      	subs	r4, #1
 800cb3e:	f101 0814 	add.w	r8, r1, #20
 800cb42:	f100 0514 	add.w	r5, r0, #20
 800cb46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb4a:	9301      	str	r3, [sp, #4]
 800cb4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb54:	3301      	adds	r3, #1
 800cb56:	429a      	cmp	r2, r3
 800cb58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb60:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb64:	d331      	bcc.n	800cbca <quorem+0x9e>
 800cb66:	f04f 0e00 	mov.w	lr, #0
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	46ac      	mov	ip, r5
 800cb6e:	46f2      	mov	sl, lr
 800cb70:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb74:	b293      	uxth	r3, r2
 800cb76:	fb06 e303 	mla	r3, r6, r3, lr
 800cb7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	ebaa 0303 	sub.w	r3, sl, r3
 800cb84:	f8dc a000 	ldr.w	sl, [ip]
 800cb88:	0c12      	lsrs	r2, r2, #16
 800cb8a:	fa13 f38a 	uxtah	r3, r3, sl
 800cb8e:	fb06 e202 	mla	r2, r6, r2, lr
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	9b00      	ldr	r3, [sp, #0]
 800cb96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb9a:	b292      	uxth	r2, r2
 800cb9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cba4:	f8bd 3000 	ldrh.w	r3, [sp]
 800cba8:	4581      	cmp	r9, r0
 800cbaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbae:	f84c 3b04 	str.w	r3, [ip], #4
 800cbb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cbb6:	d2db      	bcs.n	800cb70 <quorem+0x44>
 800cbb8:	f855 300b 	ldr.w	r3, [r5, fp]
 800cbbc:	b92b      	cbnz	r3, 800cbca <quorem+0x9e>
 800cbbe:	9b01      	ldr	r3, [sp, #4]
 800cbc0:	3b04      	subs	r3, #4
 800cbc2:	429d      	cmp	r5, r3
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	d32e      	bcc.n	800cc26 <quorem+0xfa>
 800cbc8:	613c      	str	r4, [r7, #16]
 800cbca:	4638      	mov	r0, r7
 800cbcc:	f001 f93c 	bl	800de48 <__mcmp>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	db24      	blt.n	800cc1e <quorem+0xf2>
 800cbd4:	3601      	adds	r6, #1
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f04f 0c00 	mov.w	ip, #0
 800cbdc:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbe0:	f8d0 e000 	ldr.w	lr, [r0]
 800cbe4:	b293      	uxth	r3, r2
 800cbe6:	ebac 0303 	sub.w	r3, ip, r3
 800cbea:	0c12      	lsrs	r2, r2, #16
 800cbec:	fa13 f38e 	uxtah	r3, r3, lr
 800cbf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cbf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbfe:	45c1      	cmp	r9, r8
 800cc00:	f840 3b04 	str.w	r3, [r0], #4
 800cc04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cc08:	d2e8      	bcs.n	800cbdc <quorem+0xb0>
 800cc0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc12:	b922      	cbnz	r2, 800cc1e <quorem+0xf2>
 800cc14:	3b04      	subs	r3, #4
 800cc16:	429d      	cmp	r5, r3
 800cc18:	461a      	mov	r2, r3
 800cc1a:	d30a      	bcc.n	800cc32 <quorem+0x106>
 800cc1c:	613c      	str	r4, [r7, #16]
 800cc1e:	4630      	mov	r0, r6
 800cc20:	b003      	add	sp, #12
 800cc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc26:	6812      	ldr	r2, [r2, #0]
 800cc28:	3b04      	subs	r3, #4
 800cc2a:	2a00      	cmp	r2, #0
 800cc2c:	d1cc      	bne.n	800cbc8 <quorem+0x9c>
 800cc2e:	3c01      	subs	r4, #1
 800cc30:	e7c7      	b.n	800cbc2 <quorem+0x96>
 800cc32:	6812      	ldr	r2, [r2, #0]
 800cc34:	3b04      	subs	r3, #4
 800cc36:	2a00      	cmp	r2, #0
 800cc38:	d1f0      	bne.n	800cc1c <quorem+0xf0>
 800cc3a:	3c01      	subs	r4, #1
 800cc3c:	e7eb      	b.n	800cc16 <quorem+0xea>
 800cc3e:	2000      	movs	r0, #0
 800cc40:	e7ee      	b.n	800cc20 <quorem+0xf4>
 800cc42:	0000      	movs	r0, r0
 800cc44:	0000      	movs	r0, r0
	...

0800cc48 <_dtoa_r>:
 800cc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4c:	ed2d 8b04 	vpush	{d8-d9}
 800cc50:	ec57 6b10 	vmov	r6, r7, d0
 800cc54:	b093      	sub	sp, #76	; 0x4c
 800cc56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc5c:	9106      	str	r1, [sp, #24]
 800cc5e:	ee10 aa10 	vmov	sl, s0
 800cc62:	4604      	mov	r4, r0
 800cc64:	9209      	str	r2, [sp, #36]	; 0x24
 800cc66:	930c      	str	r3, [sp, #48]	; 0x30
 800cc68:	46bb      	mov	fp, r7
 800cc6a:	b975      	cbnz	r5, 800cc8a <_dtoa_r+0x42>
 800cc6c:	2010      	movs	r0, #16
 800cc6e:	f7fe fba1 	bl	800b3b4 <malloc>
 800cc72:	4602      	mov	r2, r0
 800cc74:	6260      	str	r0, [r4, #36]	; 0x24
 800cc76:	b920      	cbnz	r0, 800cc82 <_dtoa_r+0x3a>
 800cc78:	4ba7      	ldr	r3, [pc, #668]	; (800cf18 <_dtoa_r+0x2d0>)
 800cc7a:	21ea      	movs	r1, #234	; 0xea
 800cc7c:	48a7      	ldr	r0, [pc, #668]	; (800cf1c <_dtoa_r+0x2d4>)
 800cc7e:	f7ff ff13 	bl	800caa8 <__assert_func>
 800cc82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc86:	6005      	str	r5, [r0, #0]
 800cc88:	60c5      	str	r5, [r0, #12]
 800cc8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc8c:	6819      	ldr	r1, [r3, #0]
 800cc8e:	b151      	cbz	r1, 800cca6 <_dtoa_r+0x5e>
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	604a      	str	r2, [r1, #4]
 800cc94:	2301      	movs	r3, #1
 800cc96:	4093      	lsls	r3, r2
 800cc98:	608b      	str	r3, [r1, #8]
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f000 fe92 	bl	800d9c4 <_Bfree>
 800cca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	1e3b      	subs	r3, r7, #0
 800cca8:	bfaa      	itet	ge
 800ccaa:	2300      	movge	r3, #0
 800ccac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ccb0:	f8c8 3000 	strge.w	r3, [r8]
 800ccb4:	4b9a      	ldr	r3, [pc, #616]	; (800cf20 <_dtoa_r+0x2d8>)
 800ccb6:	bfbc      	itt	lt
 800ccb8:	2201      	movlt	r2, #1
 800ccba:	f8c8 2000 	strlt.w	r2, [r8]
 800ccbe:	ea33 030b 	bics.w	r3, r3, fp
 800ccc2:	d11b      	bne.n	800ccfc <_dtoa_r+0xb4>
 800ccc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccc6:	f242 730f 	movw	r3, #9999	; 0x270f
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccd0:	4333      	orrs	r3, r6
 800ccd2:	f000 8592 	beq.w	800d7fa <_dtoa_r+0xbb2>
 800ccd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccd8:	b963      	cbnz	r3, 800ccf4 <_dtoa_r+0xac>
 800ccda:	4b92      	ldr	r3, [pc, #584]	; (800cf24 <_dtoa_r+0x2dc>)
 800ccdc:	e022      	b.n	800cd24 <_dtoa_r+0xdc>
 800ccde:	4b92      	ldr	r3, [pc, #584]	; (800cf28 <_dtoa_r+0x2e0>)
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	3308      	adds	r3, #8
 800cce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	9801      	ldr	r0, [sp, #4]
 800ccea:	b013      	add	sp, #76	; 0x4c
 800ccec:	ecbd 8b04 	vpop	{d8-d9}
 800ccf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf4:	4b8b      	ldr	r3, [pc, #556]	; (800cf24 <_dtoa_r+0x2dc>)
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	3303      	adds	r3, #3
 800ccfa:	e7f3      	b.n	800cce4 <_dtoa_r+0x9c>
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	2300      	movs	r3, #0
 800cd00:	4650      	mov	r0, sl
 800cd02:	4659      	mov	r1, fp
 800cd04:	f7f3 fef8 	bl	8000af8 <__aeabi_dcmpeq>
 800cd08:	ec4b ab19 	vmov	d9, sl, fp
 800cd0c:	4680      	mov	r8, r0
 800cd0e:	b158      	cbz	r0, 800cd28 <_dtoa_r+0xe0>
 800cd10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd12:	2301      	movs	r3, #1
 800cd14:	6013      	str	r3, [r2, #0]
 800cd16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f000 856b 	beq.w	800d7f4 <_dtoa_r+0xbac>
 800cd1e:	4883      	ldr	r0, [pc, #524]	; (800cf2c <_dtoa_r+0x2e4>)
 800cd20:	6018      	str	r0, [r3, #0]
 800cd22:	1e43      	subs	r3, r0, #1
 800cd24:	9301      	str	r3, [sp, #4]
 800cd26:	e7df      	b.n	800cce8 <_dtoa_r+0xa0>
 800cd28:	ec4b ab10 	vmov	d0, sl, fp
 800cd2c:	aa10      	add	r2, sp, #64	; 0x40
 800cd2e:	a911      	add	r1, sp, #68	; 0x44
 800cd30:	4620      	mov	r0, r4
 800cd32:	f001 f92f 	bl	800df94 <__d2b>
 800cd36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cd3a:	ee08 0a10 	vmov	s16, r0
 800cd3e:	2d00      	cmp	r5, #0
 800cd40:	f000 8084 	beq.w	800ce4c <_dtoa_r+0x204>
 800cd44:	ee19 3a90 	vmov	r3, s19
 800cd48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cd50:	4656      	mov	r6, sl
 800cd52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cd56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cd5e:	4b74      	ldr	r3, [pc, #464]	; (800cf30 <_dtoa_r+0x2e8>)
 800cd60:	2200      	movs	r2, #0
 800cd62:	4630      	mov	r0, r6
 800cd64:	4639      	mov	r1, r7
 800cd66:	f7f3 faa7 	bl	80002b8 <__aeabi_dsub>
 800cd6a:	a365      	add	r3, pc, #404	; (adr r3, 800cf00 <_dtoa_r+0x2b8>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	f7f3 fc5a 	bl	8000628 <__aeabi_dmul>
 800cd74:	a364      	add	r3, pc, #400	; (adr r3, 800cf08 <_dtoa_r+0x2c0>)
 800cd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7a:	f7f3 fa9f 	bl	80002bc <__adddf3>
 800cd7e:	4606      	mov	r6, r0
 800cd80:	4628      	mov	r0, r5
 800cd82:	460f      	mov	r7, r1
 800cd84:	f7f3 fbe6 	bl	8000554 <__aeabi_i2d>
 800cd88:	a361      	add	r3, pc, #388	; (adr r3, 800cf10 <_dtoa_r+0x2c8>)
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	f7f3 fc4b 	bl	8000628 <__aeabi_dmul>
 800cd92:	4602      	mov	r2, r0
 800cd94:	460b      	mov	r3, r1
 800cd96:	4630      	mov	r0, r6
 800cd98:	4639      	mov	r1, r7
 800cd9a:	f7f3 fa8f 	bl	80002bc <__adddf3>
 800cd9e:	4606      	mov	r6, r0
 800cda0:	460f      	mov	r7, r1
 800cda2:	f7f3 fef1 	bl	8000b88 <__aeabi_d2iz>
 800cda6:	2200      	movs	r2, #0
 800cda8:	9000      	str	r0, [sp, #0]
 800cdaa:	2300      	movs	r3, #0
 800cdac:	4630      	mov	r0, r6
 800cdae:	4639      	mov	r1, r7
 800cdb0:	f7f3 feac 	bl	8000b0c <__aeabi_dcmplt>
 800cdb4:	b150      	cbz	r0, 800cdcc <_dtoa_r+0x184>
 800cdb6:	9800      	ldr	r0, [sp, #0]
 800cdb8:	f7f3 fbcc 	bl	8000554 <__aeabi_i2d>
 800cdbc:	4632      	mov	r2, r6
 800cdbe:	463b      	mov	r3, r7
 800cdc0:	f7f3 fe9a 	bl	8000af8 <__aeabi_dcmpeq>
 800cdc4:	b910      	cbnz	r0, 800cdcc <_dtoa_r+0x184>
 800cdc6:	9b00      	ldr	r3, [sp, #0]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	9b00      	ldr	r3, [sp, #0]
 800cdce:	2b16      	cmp	r3, #22
 800cdd0:	d85a      	bhi.n	800ce88 <_dtoa_r+0x240>
 800cdd2:	9a00      	ldr	r2, [sp, #0]
 800cdd4:	4b57      	ldr	r3, [pc, #348]	; (800cf34 <_dtoa_r+0x2ec>)
 800cdd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	ec51 0b19 	vmov	r0, r1, d9
 800cde2:	f7f3 fe93 	bl	8000b0c <__aeabi_dcmplt>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d050      	beq.n	800ce8c <_dtoa_r+0x244>
 800cdea:	9b00      	ldr	r3, [sp, #0]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdf6:	1b5d      	subs	r5, r3, r5
 800cdf8:	1e6b      	subs	r3, r5, #1
 800cdfa:	9305      	str	r3, [sp, #20]
 800cdfc:	bf45      	ittet	mi
 800cdfe:	f1c5 0301 	rsbmi	r3, r5, #1
 800ce02:	9304      	strmi	r3, [sp, #16]
 800ce04:	2300      	movpl	r3, #0
 800ce06:	2300      	movmi	r3, #0
 800ce08:	bf4c      	ite	mi
 800ce0a:	9305      	strmi	r3, [sp, #20]
 800ce0c:	9304      	strpl	r3, [sp, #16]
 800ce0e:	9b00      	ldr	r3, [sp, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	db3d      	blt.n	800ce90 <_dtoa_r+0x248>
 800ce14:	9b05      	ldr	r3, [sp, #20]
 800ce16:	9a00      	ldr	r2, [sp, #0]
 800ce18:	920a      	str	r2, [sp, #40]	; 0x28
 800ce1a:	4413      	add	r3, r2
 800ce1c:	9305      	str	r3, [sp, #20]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	9307      	str	r3, [sp, #28]
 800ce22:	9b06      	ldr	r3, [sp, #24]
 800ce24:	2b09      	cmp	r3, #9
 800ce26:	f200 8089 	bhi.w	800cf3c <_dtoa_r+0x2f4>
 800ce2a:	2b05      	cmp	r3, #5
 800ce2c:	bfc4      	itt	gt
 800ce2e:	3b04      	subgt	r3, #4
 800ce30:	9306      	strgt	r3, [sp, #24]
 800ce32:	9b06      	ldr	r3, [sp, #24]
 800ce34:	f1a3 0302 	sub.w	r3, r3, #2
 800ce38:	bfcc      	ite	gt
 800ce3a:	2500      	movgt	r5, #0
 800ce3c:	2501      	movle	r5, #1
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	f200 8087 	bhi.w	800cf52 <_dtoa_r+0x30a>
 800ce44:	e8df f003 	tbb	[pc, r3]
 800ce48:	59383a2d 	.word	0x59383a2d
 800ce4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ce50:	441d      	add	r5, r3
 800ce52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce56:	2b20      	cmp	r3, #32
 800ce58:	bfc1      	itttt	gt
 800ce5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ce62:	fa0b f303 	lslgt.w	r3, fp, r3
 800ce66:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ce6a:	bfda      	itte	le
 800ce6c:	f1c3 0320 	rsble	r3, r3, #32
 800ce70:	fa06 f003 	lslle.w	r0, r6, r3
 800ce74:	4318      	orrgt	r0, r3
 800ce76:	f7f3 fb5d 	bl	8000534 <__aeabi_ui2d>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ce82:	3d01      	subs	r5, #1
 800ce84:	930e      	str	r3, [sp, #56]	; 0x38
 800ce86:	e76a      	b.n	800cd5e <_dtoa_r+0x116>
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e7b2      	b.n	800cdf2 <_dtoa_r+0x1aa>
 800ce8c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce8e:	e7b1      	b.n	800cdf4 <_dtoa_r+0x1ac>
 800ce90:	9b04      	ldr	r3, [sp, #16]
 800ce92:	9a00      	ldr	r2, [sp, #0]
 800ce94:	1a9b      	subs	r3, r3, r2
 800ce96:	9304      	str	r3, [sp, #16]
 800ce98:	4253      	negs	r3, r2
 800ce9a:	9307      	str	r3, [sp, #28]
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	930a      	str	r3, [sp, #40]	; 0x28
 800cea0:	e7bf      	b.n	800ce22 <_dtoa_r+0x1da>
 800cea2:	2300      	movs	r3, #0
 800cea4:	9308      	str	r3, [sp, #32]
 800cea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	dc55      	bgt.n	800cf58 <_dtoa_r+0x310>
 800ceac:	2301      	movs	r3, #1
 800ceae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	9209      	str	r2, [sp, #36]	; 0x24
 800ceb6:	e00c      	b.n	800ced2 <_dtoa_r+0x28a>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e7f3      	b.n	800cea4 <_dtoa_r+0x25c>
 800cebc:	2300      	movs	r3, #0
 800cebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cec0:	9308      	str	r3, [sp, #32]
 800cec2:	9b00      	ldr	r3, [sp, #0]
 800cec4:	4413      	add	r3, r2
 800cec6:	9302      	str	r3, [sp, #8]
 800cec8:	3301      	adds	r3, #1
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	9303      	str	r3, [sp, #12]
 800cece:	bfb8      	it	lt
 800ced0:	2301      	movlt	r3, #1
 800ced2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ced4:	2200      	movs	r2, #0
 800ced6:	6042      	str	r2, [r0, #4]
 800ced8:	2204      	movs	r2, #4
 800ceda:	f102 0614 	add.w	r6, r2, #20
 800cede:	429e      	cmp	r6, r3
 800cee0:	6841      	ldr	r1, [r0, #4]
 800cee2:	d93d      	bls.n	800cf60 <_dtoa_r+0x318>
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 fd2d 	bl	800d944 <_Balloc>
 800ceea:	9001      	str	r0, [sp, #4]
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d13b      	bne.n	800cf68 <_dtoa_r+0x320>
 800cef0:	4b11      	ldr	r3, [pc, #68]	; (800cf38 <_dtoa_r+0x2f0>)
 800cef2:	4602      	mov	r2, r0
 800cef4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cef8:	e6c0      	b.n	800cc7c <_dtoa_r+0x34>
 800cefa:	2301      	movs	r3, #1
 800cefc:	e7df      	b.n	800cebe <_dtoa_r+0x276>
 800cefe:	bf00      	nop
 800cf00:	636f4361 	.word	0x636f4361
 800cf04:	3fd287a7 	.word	0x3fd287a7
 800cf08:	8b60c8b3 	.word	0x8b60c8b3
 800cf0c:	3fc68a28 	.word	0x3fc68a28
 800cf10:	509f79fb 	.word	0x509f79fb
 800cf14:	3fd34413 	.word	0x3fd34413
 800cf18:	08010ec4 	.word	0x08010ec4
 800cf1c:	08011154 	.word	0x08011154
 800cf20:	7ff00000 	.word	0x7ff00000
 800cf24:	08011150 	.word	0x08011150
 800cf28:	08011147 	.word	0x08011147
 800cf2c:	08011392 	.word	0x08011392
 800cf30:	3ff80000 	.word	0x3ff80000
 800cf34:	080112a8 	.word	0x080112a8
 800cf38:	080111af 	.word	0x080111af
 800cf3c:	2501      	movs	r5, #1
 800cf3e:	2300      	movs	r3, #0
 800cf40:	9306      	str	r3, [sp, #24]
 800cf42:	9508      	str	r5, [sp, #32]
 800cf44:	f04f 33ff 	mov.w	r3, #4294967295
 800cf48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	2312      	movs	r3, #18
 800cf50:	e7b0      	b.n	800ceb4 <_dtoa_r+0x26c>
 800cf52:	2301      	movs	r3, #1
 800cf54:	9308      	str	r3, [sp, #32]
 800cf56:	e7f5      	b.n	800cf44 <_dtoa_r+0x2fc>
 800cf58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf5e:	e7b8      	b.n	800ced2 <_dtoa_r+0x28a>
 800cf60:	3101      	adds	r1, #1
 800cf62:	6041      	str	r1, [r0, #4]
 800cf64:	0052      	lsls	r2, r2, #1
 800cf66:	e7b8      	b.n	800ceda <_dtoa_r+0x292>
 800cf68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf6a:	9a01      	ldr	r2, [sp, #4]
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	9b03      	ldr	r3, [sp, #12]
 800cf70:	2b0e      	cmp	r3, #14
 800cf72:	f200 809d 	bhi.w	800d0b0 <_dtoa_r+0x468>
 800cf76:	2d00      	cmp	r5, #0
 800cf78:	f000 809a 	beq.w	800d0b0 <_dtoa_r+0x468>
 800cf7c:	9b00      	ldr	r3, [sp, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	dd32      	ble.n	800cfe8 <_dtoa_r+0x3a0>
 800cf82:	4ab7      	ldr	r2, [pc, #732]	; (800d260 <_dtoa_r+0x618>)
 800cf84:	f003 030f 	and.w	r3, r3, #15
 800cf88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf90:	9b00      	ldr	r3, [sp, #0]
 800cf92:	05d8      	lsls	r0, r3, #23
 800cf94:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cf98:	d516      	bpl.n	800cfc8 <_dtoa_r+0x380>
 800cf9a:	4bb2      	ldr	r3, [pc, #712]	; (800d264 <_dtoa_r+0x61c>)
 800cf9c:	ec51 0b19 	vmov	r0, r1, d9
 800cfa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfa4:	f7f3 fc6a 	bl	800087c <__aeabi_ddiv>
 800cfa8:	f007 070f 	and.w	r7, r7, #15
 800cfac:	4682      	mov	sl, r0
 800cfae:	468b      	mov	fp, r1
 800cfb0:	2503      	movs	r5, #3
 800cfb2:	4eac      	ldr	r6, [pc, #688]	; (800d264 <_dtoa_r+0x61c>)
 800cfb4:	b957      	cbnz	r7, 800cfcc <_dtoa_r+0x384>
 800cfb6:	4642      	mov	r2, r8
 800cfb8:	464b      	mov	r3, r9
 800cfba:	4650      	mov	r0, sl
 800cfbc:	4659      	mov	r1, fp
 800cfbe:	f7f3 fc5d 	bl	800087c <__aeabi_ddiv>
 800cfc2:	4682      	mov	sl, r0
 800cfc4:	468b      	mov	fp, r1
 800cfc6:	e028      	b.n	800d01a <_dtoa_r+0x3d2>
 800cfc8:	2502      	movs	r5, #2
 800cfca:	e7f2      	b.n	800cfb2 <_dtoa_r+0x36a>
 800cfcc:	07f9      	lsls	r1, r7, #31
 800cfce:	d508      	bpl.n	800cfe2 <_dtoa_r+0x39a>
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfd8:	f7f3 fb26 	bl	8000628 <__aeabi_dmul>
 800cfdc:	3501      	adds	r5, #1
 800cfde:	4680      	mov	r8, r0
 800cfe0:	4689      	mov	r9, r1
 800cfe2:	107f      	asrs	r7, r7, #1
 800cfe4:	3608      	adds	r6, #8
 800cfe6:	e7e5      	b.n	800cfb4 <_dtoa_r+0x36c>
 800cfe8:	f000 809b 	beq.w	800d122 <_dtoa_r+0x4da>
 800cfec:	9b00      	ldr	r3, [sp, #0]
 800cfee:	4f9d      	ldr	r7, [pc, #628]	; (800d264 <_dtoa_r+0x61c>)
 800cff0:	425e      	negs	r6, r3
 800cff2:	4b9b      	ldr	r3, [pc, #620]	; (800d260 <_dtoa_r+0x618>)
 800cff4:	f006 020f 	and.w	r2, r6, #15
 800cff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d000:	ec51 0b19 	vmov	r0, r1, d9
 800d004:	f7f3 fb10 	bl	8000628 <__aeabi_dmul>
 800d008:	1136      	asrs	r6, r6, #4
 800d00a:	4682      	mov	sl, r0
 800d00c:	468b      	mov	fp, r1
 800d00e:	2300      	movs	r3, #0
 800d010:	2502      	movs	r5, #2
 800d012:	2e00      	cmp	r6, #0
 800d014:	d17a      	bne.n	800d10c <_dtoa_r+0x4c4>
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1d3      	bne.n	800cfc2 <_dtoa_r+0x37a>
 800d01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f000 8082 	beq.w	800d126 <_dtoa_r+0x4de>
 800d022:	4b91      	ldr	r3, [pc, #580]	; (800d268 <_dtoa_r+0x620>)
 800d024:	2200      	movs	r2, #0
 800d026:	4650      	mov	r0, sl
 800d028:	4659      	mov	r1, fp
 800d02a:	f7f3 fd6f 	bl	8000b0c <__aeabi_dcmplt>
 800d02e:	2800      	cmp	r0, #0
 800d030:	d079      	beq.n	800d126 <_dtoa_r+0x4de>
 800d032:	9b03      	ldr	r3, [sp, #12]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d076      	beq.n	800d126 <_dtoa_r+0x4de>
 800d038:	9b02      	ldr	r3, [sp, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	dd36      	ble.n	800d0ac <_dtoa_r+0x464>
 800d03e:	9b00      	ldr	r3, [sp, #0]
 800d040:	4650      	mov	r0, sl
 800d042:	4659      	mov	r1, fp
 800d044:	1e5f      	subs	r7, r3, #1
 800d046:	2200      	movs	r2, #0
 800d048:	4b88      	ldr	r3, [pc, #544]	; (800d26c <_dtoa_r+0x624>)
 800d04a:	f7f3 faed 	bl	8000628 <__aeabi_dmul>
 800d04e:	9e02      	ldr	r6, [sp, #8]
 800d050:	4682      	mov	sl, r0
 800d052:	468b      	mov	fp, r1
 800d054:	3501      	adds	r5, #1
 800d056:	4628      	mov	r0, r5
 800d058:	f7f3 fa7c 	bl	8000554 <__aeabi_i2d>
 800d05c:	4652      	mov	r2, sl
 800d05e:	465b      	mov	r3, fp
 800d060:	f7f3 fae2 	bl	8000628 <__aeabi_dmul>
 800d064:	4b82      	ldr	r3, [pc, #520]	; (800d270 <_dtoa_r+0x628>)
 800d066:	2200      	movs	r2, #0
 800d068:	f7f3 f928 	bl	80002bc <__adddf3>
 800d06c:	46d0      	mov	r8, sl
 800d06e:	46d9      	mov	r9, fp
 800d070:	4682      	mov	sl, r0
 800d072:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d076:	2e00      	cmp	r6, #0
 800d078:	d158      	bne.n	800d12c <_dtoa_r+0x4e4>
 800d07a:	4b7e      	ldr	r3, [pc, #504]	; (800d274 <_dtoa_r+0x62c>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	4640      	mov	r0, r8
 800d080:	4649      	mov	r1, r9
 800d082:	f7f3 f919 	bl	80002b8 <__aeabi_dsub>
 800d086:	4652      	mov	r2, sl
 800d088:	465b      	mov	r3, fp
 800d08a:	4680      	mov	r8, r0
 800d08c:	4689      	mov	r9, r1
 800d08e:	f7f3 fd5b 	bl	8000b48 <__aeabi_dcmpgt>
 800d092:	2800      	cmp	r0, #0
 800d094:	f040 8295 	bne.w	800d5c2 <_dtoa_r+0x97a>
 800d098:	4652      	mov	r2, sl
 800d09a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d09e:	4640      	mov	r0, r8
 800d0a0:	4649      	mov	r1, r9
 800d0a2:	f7f3 fd33 	bl	8000b0c <__aeabi_dcmplt>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	f040 8289 	bne.w	800d5be <_dtoa_r+0x976>
 800d0ac:	ec5b ab19 	vmov	sl, fp, d9
 800d0b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f2c0 8148 	blt.w	800d348 <_dtoa_r+0x700>
 800d0b8:	9a00      	ldr	r2, [sp, #0]
 800d0ba:	2a0e      	cmp	r2, #14
 800d0bc:	f300 8144 	bgt.w	800d348 <_dtoa_r+0x700>
 800d0c0:	4b67      	ldr	r3, [pc, #412]	; (800d260 <_dtoa_r+0x618>)
 800d0c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f280 80d5 	bge.w	800d27c <_dtoa_r+0x634>
 800d0d2:	9b03      	ldr	r3, [sp, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f300 80d1 	bgt.w	800d27c <_dtoa_r+0x634>
 800d0da:	f040 826f 	bne.w	800d5bc <_dtoa_r+0x974>
 800d0de:	4b65      	ldr	r3, [pc, #404]	; (800d274 <_dtoa_r+0x62c>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	4640      	mov	r0, r8
 800d0e4:	4649      	mov	r1, r9
 800d0e6:	f7f3 fa9f 	bl	8000628 <__aeabi_dmul>
 800d0ea:	4652      	mov	r2, sl
 800d0ec:	465b      	mov	r3, fp
 800d0ee:	f7f3 fd21 	bl	8000b34 <__aeabi_dcmpge>
 800d0f2:	9e03      	ldr	r6, [sp, #12]
 800d0f4:	4637      	mov	r7, r6
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	f040 8245 	bne.w	800d586 <_dtoa_r+0x93e>
 800d0fc:	9d01      	ldr	r5, [sp, #4]
 800d0fe:	2331      	movs	r3, #49	; 0x31
 800d100:	f805 3b01 	strb.w	r3, [r5], #1
 800d104:	9b00      	ldr	r3, [sp, #0]
 800d106:	3301      	adds	r3, #1
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	e240      	b.n	800d58e <_dtoa_r+0x946>
 800d10c:	07f2      	lsls	r2, r6, #31
 800d10e:	d505      	bpl.n	800d11c <_dtoa_r+0x4d4>
 800d110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d114:	f7f3 fa88 	bl	8000628 <__aeabi_dmul>
 800d118:	3501      	adds	r5, #1
 800d11a:	2301      	movs	r3, #1
 800d11c:	1076      	asrs	r6, r6, #1
 800d11e:	3708      	adds	r7, #8
 800d120:	e777      	b.n	800d012 <_dtoa_r+0x3ca>
 800d122:	2502      	movs	r5, #2
 800d124:	e779      	b.n	800d01a <_dtoa_r+0x3d2>
 800d126:	9f00      	ldr	r7, [sp, #0]
 800d128:	9e03      	ldr	r6, [sp, #12]
 800d12a:	e794      	b.n	800d056 <_dtoa_r+0x40e>
 800d12c:	9901      	ldr	r1, [sp, #4]
 800d12e:	4b4c      	ldr	r3, [pc, #304]	; (800d260 <_dtoa_r+0x618>)
 800d130:	4431      	add	r1, r6
 800d132:	910d      	str	r1, [sp, #52]	; 0x34
 800d134:	9908      	ldr	r1, [sp, #32]
 800d136:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d13a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d13e:	2900      	cmp	r1, #0
 800d140:	d043      	beq.n	800d1ca <_dtoa_r+0x582>
 800d142:	494d      	ldr	r1, [pc, #308]	; (800d278 <_dtoa_r+0x630>)
 800d144:	2000      	movs	r0, #0
 800d146:	f7f3 fb99 	bl	800087c <__aeabi_ddiv>
 800d14a:	4652      	mov	r2, sl
 800d14c:	465b      	mov	r3, fp
 800d14e:	f7f3 f8b3 	bl	80002b8 <__aeabi_dsub>
 800d152:	9d01      	ldr	r5, [sp, #4]
 800d154:	4682      	mov	sl, r0
 800d156:	468b      	mov	fp, r1
 800d158:	4649      	mov	r1, r9
 800d15a:	4640      	mov	r0, r8
 800d15c:	f7f3 fd14 	bl	8000b88 <__aeabi_d2iz>
 800d160:	4606      	mov	r6, r0
 800d162:	f7f3 f9f7 	bl	8000554 <__aeabi_i2d>
 800d166:	4602      	mov	r2, r0
 800d168:	460b      	mov	r3, r1
 800d16a:	4640      	mov	r0, r8
 800d16c:	4649      	mov	r1, r9
 800d16e:	f7f3 f8a3 	bl	80002b8 <__aeabi_dsub>
 800d172:	3630      	adds	r6, #48	; 0x30
 800d174:	f805 6b01 	strb.w	r6, [r5], #1
 800d178:	4652      	mov	r2, sl
 800d17a:	465b      	mov	r3, fp
 800d17c:	4680      	mov	r8, r0
 800d17e:	4689      	mov	r9, r1
 800d180:	f7f3 fcc4 	bl	8000b0c <__aeabi_dcmplt>
 800d184:	2800      	cmp	r0, #0
 800d186:	d163      	bne.n	800d250 <_dtoa_r+0x608>
 800d188:	4642      	mov	r2, r8
 800d18a:	464b      	mov	r3, r9
 800d18c:	4936      	ldr	r1, [pc, #216]	; (800d268 <_dtoa_r+0x620>)
 800d18e:	2000      	movs	r0, #0
 800d190:	f7f3 f892 	bl	80002b8 <__aeabi_dsub>
 800d194:	4652      	mov	r2, sl
 800d196:	465b      	mov	r3, fp
 800d198:	f7f3 fcb8 	bl	8000b0c <__aeabi_dcmplt>
 800d19c:	2800      	cmp	r0, #0
 800d19e:	f040 80b5 	bne.w	800d30c <_dtoa_r+0x6c4>
 800d1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1a4:	429d      	cmp	r5, r3
 800d1a6:	d081      	beq.n	800d0ac <_dtoa_r+0x464>
 800d1a8:	4b30      	ldr	r3, [pc, #192]	; (800d26c <_dtoa_r+0x624>)
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	4650      	mov	r0, sl
 800d1ae:	4659      	mov	r1, fp
 800d1b0:	f7f3 fa3a 	bl	8000628 <__aeabi_dmul>
 800d1b4:	4b2d      	ldr	r3, [pc, #180]	; (800d26c <_dtoa_r+0x624>)
 800d1b6:	4682      	mov	sl, r0
 800d1b8:	468b      	mov	fp, r1
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	4649      	mov	r1, r9
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f7f3 fa32 	bl	8000628 <__aeabi_dmul>
 800d1c4:	4680      	mov	r8, r0
 800d1c6:	4689      	mov	r9, r1
 800d1c8:	e7c6      	b.n	800d158 <_dtoa_r+0x510>
 800d1ca:	4650      	mov	r0, sl
 800d1cc:	4659      	mov	r1, fp
 800d1ce:	f7f3 fa2b 	bl	8000628 <__aeabi_dmul>
 800d1d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1d4:	9d01      	ldr	r5, [sp, #4]
 800d1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1d8:	4682      	mov	sl, r0
 800d1da:	468b      	mov	fp, r1
 800d1dc:	4649      	mov	r1, r9
 800d1de:	4640      	mov	r0, r8
 800d1e0:	f7f3 fcd2 	bl	8000b88 <__aeabi_d2iz>
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	f7f3 f9b5 	bl	8000554 <__aeabi_i2d>
 800d1ea:	3630      	adds	r6, #48	; 0x30
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4640      	mov	r0, r8
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	f7f3 f860 	bl	80002b8 <__aeabi_dsub>
 800d1f8:	f805 6b01 	strb.w	r6, [r5], #1
 800d1fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1fe:	429d      	cmp	r5, r3
 800d200:	4680      	mov	r8, r0
 800d202:	4689      	mov	r9, r1
 800d204:	f04f 0200 	mov.w	r2, #0
 800d208:	d124      	bne.n	800d254 <_dtoa_r+0x60c>
 800d20a:	4b1b      	ldr	r3, [pc, #108]	; (800d278 <_dtoa_r+0x630>)
 800d20c:	4650      	mov	r0, sl
 800d20e:	4659      	mov	r1, fp
 800d210:	f7f3 f854 	bl	80002bc <__adddf3>
 800d214:	4602      	mov	r2, r0
 800d216:	460b      	mov	r3, r1
 800d218:	4640      	mov	r0, r8
 800d21a:	4649      	mov	r1, r9
 800d21c:	f7f3 fc94 	bl	8000b48 <__aeabi_dcmpgt>
 800d220:	2800      	cmp	r0, #0
 800d222:	d173      	bne.n	800d30c <_dtoa_r+0x6c4>
 800d224:	4652      	mov	r2, sl
 800d226:	465b      	mov	r3, fp
 800d228:	4913      	ldr	r1, [pc, #76]	; (800d278 <_dtoa_r+0x630>)
 800d22a:	2000      	movs	r0, #0
 800d22c:	f7f3 f844 	bl	80002b8 <__aeabi_dsub>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	4640      	mov	r0, r8
 800d236:	4649      	mov	r1, r9
 800d238:	f7f3 fc68 	bl	8000b0c <__aeabi_dcmplt>
 800d23c:	2800      	cmp	r0, #0
 800d23e:	f43f af35 	beq.w	800d0ac <_dtoa_r+0x464>
 800d242:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d244:	1e6b      	subs	r3, r5, #1
 800d246:	930f      	str	r3, [sp, #60]	; 0x3c
 800d248:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d24c:	2b30      	cmp	r3, #48	; 0x30
 800d24e:	d0f8      	beq.n	800d242 <_dtoa_r+0x5fa>
 800d250:	9700      	str	r7, [sp, #0]
 800d252:	e049      	b.n	800d2e8 <_dtoa_r+0x6a0>
 800d254:	4b05      	ldr	r3, [pc, #20]	; (800d26c <_dtoa_r+0x624>)
 800d256:	f7f3 f9e7 	bl	8000628 <__aeabi_dmul>
 800d25a:	4680      	mov	r8, r0
 800d25c:	4689      	mov	r9, r1
 800d25e:	e7bd      	b.n	800d1dc <_dtoa_r+0x594>
 800d260:	080112a8 	.word	0x080112a8
 800d264:	08011280 	.word	0x08011280
 800d268:	3ff00000 	.word	0x3ff00000
 800d26c:	40240000 	.word	0x40240000
 800d270:	401c0000 	.word	0x401c0000
 800d274:	40140000 	.word	0x40140000
 800d278:	3fe00000 	.word	0x3fe00000
 800d27c:	9d01      	ldr	r5, [sp, #4]
 800d27e:	4656      	mov	r6, sl
 800d280:	465f      	mov	r7, fp
 800d282:	4642      	mov	r2, r8
 800d284:	464b      	mov	r3, r9
 800d286:	4630      	mov	r0, r6
 800d288:	4639      	mov	r1, r7
 800d28a:	f7f3 faf7 	bl	800087c <__aeabi_ddiv>
 800d28e:	f7f3 fc7b 	bl	8000b88 <__aeabi_d2iz>
 800d292:	4682      	mov	sl, r0
 800d294:	f7f3 f95e 	bl	8000554 <__aeabi_i2d>
 800d298:	4642      	mov	r2, r8
 800d29a:	464b      	mov	r3, r9
 800d29c:	f7f3 f9c4 	bl	8000628 <__aeabi_dmul>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	4639      	mov	r1, r7
 800d2a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d2ac:	f7f3 f804 	bl	80002b8 <__aeabi_dsub>
 800d2b0:	f805 6b01 	strb.w	r6, [r5], #1
 800d2b4:	9e01      	ldr	r6, [sp, #4]
 800d2b6:	9f03      	ldr	r7, [sp, #12]
 800d2b8:	1bae      	subs	r6, r5, r6
 800d2ba:	42b7      	cmp	r7, r6
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	d135      	bne.n	800d32e <_dtoa_r+0x6e6>
 800d2c2:	f7f2 fffb 	bl	80002bc <__adddf3>
 800d2c6:	4642      	mov	r2, r8
 800d2c8:	464b      	mov	r3, r9
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	460f      	mov	r7, r1
 800d2ce:	f7f3 fc3b 	bl	8000b48 <__aeabi_dcmpgt>
 800d2d2:	b9d0      	cbnz	r0, 800d30a <_dtoa_r+0x6c2>
 800d2d4:	4642      	mov	r2, r8
 800d2d6:	464b      	mov	r3, r9
 800d2d8:	4630      	mov	r0, r6
 800d2da:	4639      	mov	r1, r7
 800d2dc:	f7f3 fc0c 	bl	8000af8 <__aeabi_dcmpeq>
 800d2e0:	b110      	cbz	r0, 800d2e8 <_dtoa_r+0x6a0>
 800d2e2:	f01a 0f01 	tst.w	sl, #1
 800d2e6:	d110      	bne.n	800d30a <_dtoa_r+0x6c2>
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	ee18 1a10 	vmov	r1, s16
 800d2ee:	f000 fb69 	bl	800d9c4 <_Bfree>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	9800      	ldr	r0, [sp, #0]
 800d2f6:	702b      	strb	r3, [r5, #0]
 800d2f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2fa:	3001      	adds	r0, #1
 800d2fc:	6018      	str	r0, [r3, #0]
 800d2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d300:	2b00      	cmp	r3, #0
 800d302:	f43f acf1 	beq.w	800cce8 <_dtoa_r+0xa0>
 800d306:	601d      	str	r5, [r3, #0]
 800d308:	e4ee      	b.n	800cce8 <_dtoa_r+0xa0>
 800d30a:	9f00      	ldr	r7, [sp, #0]
 800d30c:	462b      	mov	r3, r5
 800d30e:	461d      	mov	r5, r3
 800d310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d314:	2a39      	cmp	r2, #57	; 0x39
 800d316:	d106      	bne.n	800d326 <_dtoa_r+0x6de>
 800d318:	9a01      	ldr	r2, [sp, #4]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d1f7      	bne.n	800d30e <_dtoa_r+0x6c6>
 800d31e:	9901      	ldr	r1, [sp, #4]
 800d320:	2230      	movs	r2, #48	; 0x30
 800d322:	3701      	adds	r7, #1
 800d324:	700a      	strb	r2, [r1, #0]
 800d326:	781a      	ldrb	r2, [r3, #0]
 800d328:	3201      	adds	r2, #1
 800d32a:	701a      	strb	r2, [r3, #0]
 800d32c:	e790      	b.n	800d250 <_dtoa_r+0x608>
 800d32e:	4ba6      	ldr	r3, [pc, #664]	; (800d5c8 <_dtoa_r+0x980>)
 800d330:	2200      	movs	r2, #0
 800d332:	f7f3 f979 	bl	8000628 <__aeabi_dmul>
 800d336:	2200      	movs	r2, #0
 800d338:	2300      	movs	r3, #0
 800d33a:	4606      	mov	r6, r0
 800d33c:	460f      	mov	r7, r1
 800d33e:	f7f3 fbdb 	bl	8000af8 <__aeabi_dcmpeq>
 800d342:	2800      	cmp	r0, #0
 800d344:	d09d      	beq.n	800d282 <_dtoa_r+0x63a>
 800d346:	e7cf      	b.n	800d2e8 <_dtoa_r+0x6a0>
 800d348:	9a08      	ldr	r2, [sp, #32]
 800d34a:	2a00      	cmp	r2, #0
 800d34c:	f000 80d7 	beq.w	800d4fe <_dtoa_r+0x8b6>
 800d350:	9a06      	ldr	r2, [sp, #24]
 800d352:	2a01      	cmp	r2, #1
 800d354:	f300 80ba 	bgt.w	800d4cc <_dtoa_r+0x884>
 800d358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d35a:	2a00      	cmp	r2, #0
 800d35c:	f000 80b2 	beq.w	800d4c4 <_dtoa_r+0x87c>
 800d360:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d364:	9e07      	ldr	r6, [sp, #28]
 800d366:	9d04      	ldr	r5, [sp, #16]
 800d368:	9a04      	ldr	r2, [sp, #16]
 800d36a:	441a      	add	r2, r3
 800d36c:	9204      	str	r2, [sp, #16]
 800d36e:	9a05      	ldr	r2, [sp, #20]
 800d370:	2101      	movs	r1, #1
 800d372:	441a      	add	r2, r3
 800d374:	4620      	mov	r0, r4
 800d376:	9205      	str	r2, [sp, #20]
 800d378:	f000 fbdc 	bl	800db34 <__i2b>
 800d37c:	4607      	mov	r7, r0
 800d37e:	2d00      	cmp	r5, #0
 800d380:	dd0c      	ble.n	800d39c <_dtoa_r+0x754>
 800d382:	9b05      	ldr	r3, [sp, #20]
 800d384:	2b00      	cmp	r3, #0
 800d386:	dd09      	ble.n	800d39c <_dtoa_r+0x754>
 800d388:	42ab      	cmp	r3, r5
 800d38a:	9a04      	ldr	r2, [sp, #16]
 800d38c:	bfa8      	it	ge
 800d38e:	462b      	movge	r3, r5
 800d390:	1ad2      	subs	r2, r2, r3
 800d392:	9204      	str	r2, [sp, #16]
 800d394:	9a05      	ldr	r2, [sp, #20]
 800d396:	1aed      	subs	r5, r5, r3
 800d398:	1ad3      	subs	r3, r2, r3
 800d39a:	9305      	str	r3, [sp, #20]
 800d39c:	9b07      	ldr	r3, [sp, #28]
 800d39e:	b31b      	cbz	r3, 800d3e8 <_dtoa_r+0x7a0>
 800d3a0:	9b08      	ldr	r3, [sp, #32]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	f000 80af 	beq.w	800d506 <_dtoa_r+0x8be>
 800d3a8:	2e00      	cmp	r6, #0
 800d3aa:	dd13      	ble.n	800d3d4 <_dtoa_r+0x78c>
 800d3ac:	4639      	mov	r1, r7
 800d3ae:	4632      	mov	r2, r6
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f000 fc7f 	bl	800dcb4 <__pow5mult>
 800d3b6:	ee18 2a10 	vmov	r2, s16
 800d3ba:	4601      	mov	r1, r0
 800d3bc:	4607      	mov	r7, r0
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f000 fbce 	bl	800db60 <__multiply>
 800d3c4:	ee18 1a10 	vmov	r1, s16
 800d3c8:	4680      	mov	r8, r0
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f000 fafa 	bl	800d9c4 <_Bfree>
 800d3d0:	ee08 8a10 	vmov	s16, r8
 800d3d4:	9b07      	ldr	r3, [sp, #28]
 800d3d6:	1b9a      	subs	r2, r3, r6
 800d3d8:	d006      	beq.n	800d3e8 <_dtoa_r+0x7a0>
 800d3da:	ee18 1a10 	vmov	r1, s16
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 fc68 	bl	800dcb4 <__pow5mult>
 800d3e4:	ee08 0a10 	vmov	s16, r0
 800d3e8:	2101      	movs	r1, #1
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f000 fba2 	bl	800db34 <__i2b>
 800d3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	4606      	mov	r6, r0
 800d3f6:	f340 8088 	ble.w	800d50a <_dtoa_r+0x8c2>
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	4601      	mov	r1, r0
 800d3fe:	4620      	mov	r0, r4
 800d400:	f000 fc58 	bl	800dcb4 <__pow5mult>
 800d404:	9b06      	ldr	r3, [sp, #24]
 800d406:	2b01      	cmp	r3, #1
 800d408:	4606      	mov	r6, r0
 800d40a:	f340 8081 	ble.w	800d510 <_dtoa_r+0x8c8>
 800d40e:	f04f 0800 	mov.w	r8, #0
 800d412:	6933      	ldr	r3, [r6, #16]
 800d414:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d418:	6918      	ldr	r0, [r3, #16]
 800d41a:	f000 fb3b 	bl	800da94 <__hi0bits>
 800d41e:	f1c0 0020 	rsb	r0, r0, #32
 800d422:	9b05      	ldr	r3, [sp, #20]
 800d424:	4418      	add	r0, r3
 800d426:	f010 001f 	ands.w	r0, r0, #31
 800d42a:	f000 8092 	beq.w	800d552 <_dtoa_r+0x90a>
 800d42e:	f1c0 0320 	rsb	r3, r0, #32
 800d432:	2b04      	cmp	r3, #4
 800d434:	f340 808a 	ble.w	800d54c <_dtoa_r+0x904>
 800d438:	f1c0 001c 	rsb	r0, r0, #28
 800d43c:	9b04      	ldr	r3, [sp, #16]
 800d43e:	4403      	add	r3, r0
 800d440:	9304      	str	r3, [sp, #16]
 800d442:	9b05      	ldr	r3, [sp, #20]
 800d444:	4403      	add	r3, r0
 800d446:	4405      	add	r5, r0
 800d448:	9305      	str	r3, [sp, #20]
 800d44a:	9b04      	ldr	r3, [sp, #16]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	dd07      	ble.n	800d460 <_dtoa_r+0x818>
 800d450:	ee18 1a10 	vmov	r1, s16
 800d454:	461a      	mov	r2, r3
 800d456:	4620      	mov	r0, r4
 800d458:	f000 fc86 	bl	800dd68 <__lshift>
 800d45c:	ee08 0a10 	vmov	s16, r0
 800d460:	9b05      	ldr	r3, [sp, #20]
 800d462:	2b00      	cmp	r3, #0
 800d464:	dd05      	ble.n	800d472 <_dtoa_r+0x82a>
 800d466:	4631      	mov	r1, r6
 800d468:	461a      	mov	r2, r3
 800d46a:	4620      	mov	r0, r4
 800d46c:	f000 fc7c 	bl	800dd68 <__lshift>
 800d470:	4606      	mov	r6, r0
 800d472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d474:	2b00      	cmp	r3, #0
 800d476:	d06e      	beq.n	800d556 <_dtoa_r+0x90e>
 800d478:	ee18 0a10 	vmov	r0, s16
 800d47c:	4631      	mov	r1, r6
 800d47e:	f000 fce3 	bl	800de48 <__mcmp>
 800d482:	2800      	cmp	r0, #0
 800d484:	da67      	bge.n	800d556 <_dtoa_r+0x90e>
 800d486:	9b00      	ldr	r3, [sp, #0]
 800d488:	3b01      	subs	r3, #1
 800d48a:	ee18 1a10 	vmov	r1, s16
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	220a      	movs	r2, #10
 800d492:	2300      	movs	r3, #0
 800d494:	4620      	mov	r0, r4
 800d496:	f000 fab7 	bl	800da08 <__multadd>
 800d49a:	9b08      	ldr	r3, [sp, #32]
 800d49c:	ee08 0a10 	vmov	s16, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f000 81b1 	beq.w	800d808 <_dtoa_r+0xbc0>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	4639      	mov	r1, r7
 800d4aa:	220a      	movs	r2, #10
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	f000 faab 	bl	800da08 <__multadd>
 800d4b2:	9b02      	ldr	r3, [sp, #8]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	4607      	mov	r7, r0
 800d4b8:	f300 808e 	bgt.w	800d5d8 <_dtoa_r+0x990>
 800d4bc:	9b06      	ldr	r3, [sp, #24]
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	dc51      	bgt.n	800d566 <_dtoa_r+0x91e>
 800d4c2:	e089      	b.n	800d5d8 <_dtoa_r+0x990>
 800d4c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d4c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d4ca:	e74b      	b.n	800d364 <_dtoa_r+0x71c>
 800d4cc:	9b03      	ldr	r3, [sp, #12]
 800d4ce:	1e5e      	subs	r6, r3, #1
 800d4d0:	9b07      	ldr	r3, [sp, #28]
 800d4d2:	42b3      	cmp	r3, r6
 800d4d4:	bfbf      	itttt	lt
 800d4d6:	9b07      	ldrlt	r3, [sp, #28]
 800d4d8:	9607      	strlt	r6, [sp, #28]
 800d4da:	1af2      	sublt	r2, r6, r3
 800d4dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d4de:	bfb6      	itet	lt
 800d4e0:	189b      	addlt	r3, r3, r2
 800d4e2:	1b9e      	subge	r6, r3, r6
 800d4e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d4e6:	9b03      	ldr	r3, [sp, #12]
 800d4e8:	bfb8      	it	lt
 800d4ea:	2600      	movlt	r6, #0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	bfb7      	itett	lt
 800d4f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d4f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d4f8:	1a9d      	sublt	r5, r3, r2
 800d4fa:	2300      	movlt	r3, #0
 800d4fc:	e734      	b.n	800d368 <_dtoa_r+0x720>
 800d4fe:	9e07      	ldr	r6, [sp, #28]
 800d500:	9d04      	ldr	r5, [sp, #16]
 800d502:	9f08      	ldr	r7, [sp, #32]
 800d504:	e73b      	b.n	800d37e <_dtoa_r+0x736>
 800d506:	9a07      	ldr	r2, [sp, #28]
 800d508:	e767      	b.n	800d3da <_dtoa_r+0x792>
 800d50a:	9b06      	ldr	r3, [sp, #24]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	dc18      	bgt.n	800d542 <_dtoa_r+0x8fa>
 800d510:	f1ba 0f00 	cmp.w	sl, #0
 800d514:	d115      	bne.n	800d542 <_dtoa_r+0x8fa>
 800d516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d51a:	b993      	cbnz	r3, 800d542 <_dtoa_r+0x8fa>
 800d51c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d520:	0d1b      	lsrs	r3, r3, #20
 800d522:	051b      	lsls	r3, r3, #20
 800d524:	b183      	cbz	r3, 800d548 <_dtoa_r+0x900>
 800d526:	9b04      	ldr	r3, [sp, #16]
 800d528:	3301      	adds	r3, #1
 800d52a:	9304      	str	r3, [sp, #16]
 800d52c:	9b05      	ldr	r3, [sp, #20]
 800d52e:	3301      	adds	r3, #1
 800d530:	9305      	str	r3, [sp, #20]
 800d532:	f04f 0801 	mov.w	r8, #1
 800d536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f47f af6a 	bne.w	800d412 <_dtoa_r+0x7ca>
 800d53e:	2001      	movs	r0, #1
 800d540:	e76f      	b.n	800d422 <_dtoa_r+0x7da>
 800d542:	f04f 0800 	mov.w	r8, #0
 800d546:	e7f6      	b.n	800d536 <_dtoa_r+0x8ee>
 800d548:	4698      	mov	r8, r3
 800d54a:	e7f4      	b.n	800d536 <_dtoa_r+0x8ee>
 800d54c:	f43f af7d 	beq.w	800d44a <_dtoa_r+0x802>
 800d550:	4618      	mov	r0, r3
 800d552:	301c      	adds	r0, #28
 800d554:	e772      	b.n	800d43c <_dtoa_r+0x7f4>
 800d556:	9b03      	ldr	r3, [sp, #12]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	dc37      	bgt.n	800d5cc <_dtoa_r+0x984>
 800d55c:	9b06      	ldr	r3, [sp, #24]
 800d55e:	2b02      	cmp	r3, #2
 800d560:	dd34      	ble.n	800d5cc <_dtoa_r+0x984>
 800d562:	9b03      	ldr	r3, [sp, #12]
 800d564:	9302      	str	r3, [sp, #8]
 800d566:	9b02      	ldr	r3, [sp, #8]
 800d568:	b96b      	cbnz	r3, 800d586 <_dtoa_r+0x93e>
 800d56a:	4631      	mov	r1, r6
 800d56c:	2205      	movs	r2, #5
 800d56e:	4620      	mov	r0, r4
 800d570:	f000 fa4a 	bl	800da08 <__multadd>
 800d574:	4601      	mov	r1, r0
 800d576:	4606      	mov	r6, r0
 800d578:	ee18 0a10 	vmov	r0, s16
 800d57c:	f000 fc64 	bl	800de48 <__mcmp>
 800d580:	2800      	cmp	r0, #0
 800d582:	f73f adbb 	bgt.w	800d0fc <_dtoa_r+0x4b4>
 800d586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d588:	9d01      	ldr	r5, [sp, #4]
 800d58a:	43db      	mvns	r3, r3
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	f04f 0800 	mov.w	r8, #0
 800d592:	4631      	mov	r1, r6
 800d594:	4620      	mov	r0, r4
 800d596:	f000 fa15 	bl	800d9c4 <_Bfree>
 800d59a:	2f00      	cmp	r7, #0
 800d59c:	f43f aea4 	beq.w	800d2e8 <_dtoa_r+0x6a0>
 800d5a0:	f1b8 0f00 	cmp.w	r8, #0
 800d5a4:	d005      	beq.n	800d5b2 <_dtoa_r+0x96a>
 800d5a6:	45b8      	cmp	r8, r7
 800d5a8:	d003      	beq.n	800d5b2 <_dtoa_r+0x96a>
 800d5aa:	4641      	mov	r1, r8
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f000 fa09 	bl	800d9c4 <_Bfree>
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f000 fa05 	bl	800d9c4 <_Bfree>
 800d5ba:	e695      	b.n	800d2e8 <_dtoa_r+0x6a0>
 800d5bc:	2600      	movs	r6, #0
 800d5be:	4637      	mov	r7, r6
 800d5c0:	e7e1      	b.n	800d586 <_dtoa_r+0x93e>
 800d5c2:	9700      	str	r7, [sp, #0]
 800d5c4:	4637      	mov	r7, r6
 800d5c6:	e599      	b.n	800d0fc <_dtoa_r+0x4b4>
 800d5c8:	40240000 	.word	0x40240000
 800d5cc:	9b08      	ldr	r3, [sp, #32]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f000 80ca 	beq.w	800d768 <_dtoa_r+0xb20>
 800d5d4:	9b03      	ldr	r3, [sp, #12]
 800d5d6:	9302      	str	r3, [sp, #8]
 800d5d8:	2d00      	cmp	r5, #0
 800d5da:	dd05      	ble.n	800d5e8 <_dtoa_r+0x9a0>
 800d5dc:	4639      	mov	r1, r7
 800d5de:	462a      	mov	r2, r5
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f000 fbc1 	bl	800dd68 <__lshift>
 800d5e6:	4607      	mov	r7, r0
 800d5e8:	f1b8 0f00 	cmp.w	r8, #0
 800d5ec:	d05b      	beq.n	800d6a6 <_dtoa_r+0xa5e>
 800d5ee:	6879      	ldr	r1, [r7, #4]
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f000 f9a7 	bl	800d944 <_Balloc>
 800d5f6:	4605      	mov	r5, r0
 800d5f8:	b928      	cbnz	r0, 800d606 <_dtoa_r+0x9be>
 800d5fa:	4b87      	ldr	r3, [pc, #540]	; (800d818 <_dtoa_r+0xbd0>)
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d602:	f7ff bb3b 	b.w	800cc7c <_dtoa_r+0x34>
 800d606:	693a      	ldr	r2, [r7, #16]
 800d608:	3202      	adds	r2, #2
 800d60a:	0092      	lsls	r2, r2, #2
 800d60c:	f107 010c 	add.w	r1, r7, #12
 800d610:	300c      	adds	r0, #12
 800d612:	f000 f97d 	bl	800d910 <memcpy>
 800d616:	2201      	movs	r2, #1
 800d618:	4629      	mov	r1, r5
 800d61a:	4620      	mov	r0, r4
 800d61c:	f000 fba4 	bl	800dd68 <__lshift>
 800d620:	9b01      	ldr	r3, [sp, #4]
 800d622:	f103 0901 	add.w	r9, r3, #1
 800d626:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d62a:	4413      	add	r3, r2
 800d62c:	9305      	str	r3, [sp, #20]
 800d62e:	f00a 0301 	and.w	r3, sl, #1
 800d632:	46b8      	mov	r8, r7
 800d634:	9304      	str	r3, [sp, #16]
 800d636:	4607      	mov	r7, r0
 800d638:	4631      	mov	r1, r6
 800d63a:	ee18 0a10 	vmov	r0, s16
 800d63e:	f7ff fa75 	bl	800cb2c <quorem>
 800d642:	4641      	mov	r1, r8
 800d644:	9002      	str	r0, [sp, #8]
 800d646:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d64a:	ee18 0a10 	vmov	r0, s16
 800d64e:	f000 fbfb 	bl	800de48 <__mcmp>
 800d652:	463a      	mov	r2, r7
 800d654:	9003      	str	r0, [sp, #12]
 800d656:	4631      	mov	r1, r6
 800d658:	4620      	mov	r0, r4
 800d65a:	f000 fc11 	bl	800de80 <__mdiff>
 800d65e:	68c2      	ldr	r2, [r0, #12]
 800d660:	f109 3bff 	add.w	fp, r9, #4294967295
 800d664:	4605      	mov	r5, r0
 800d666:	bb02      	cbnz	r2, 800d6aa <_dtoa_r+0xa62>
 800d668:	4601      	mov	r1, r0
 800d66a:	ee18 0a10 	vmov	r0, s16
 800d66e:	f000 fbeb 	bl	800de48 <__mcmp>
 800d672:	4602      	mov	r2, r0
 800d674:	4629      	mov	r1, r5
 800d676:	4620      	mov	r0, r4
 800d678:	9207      	str	r2, [sp, #28]
 800d67a:	f000 f9a3 	bl	800d9c4 <_Bfree>
 800d67e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d682:	ea43 0102 	orr.w	r1, r3, r2
 800d686:	9b04      	ldr	r3, [sp, #16]
 800d688:	430b      	orrs	r3, r1
 800d68a:	464d      	mov	r5, r9
 800d68c:	d10f      	bne.n	800d6ae <_dtoa_r+0xa66>
 800d68e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d692:	d02a      	beq.n	800d6ea <_dtoa_r+0xaa2>
 800d694:	9b03      	ldr	r3, [sp, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	dd02      	ble.n	800d6a0 <_dtoa_r+0xa58>
 800d69a:	9b02      	ldr	r3, [sp, #8]
 800d69c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d6a0:	f88b a000 	strb.w	sl, [fp]
 800d6a4:	e775      	b.n	800d592 <_dtoa_r+0x94a>
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	e7ba      	b.n	800d620 <_dtoa_r+0x9d8>
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	e7e2      	b.n	800d674 <_dtoa_r+0xa2c>
 800d6ae:	9b03      	ldr	r3, [sp, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	db04      	blt.n	800d6be <_dtoa_r+0xa76>
 800d6b4:	9906      	ldr	r1, [sp, #24]
 800d6b6:	430b      	orrs	r3, r1
 800d6b8:	9904      	ldr	r1, [sp, #16]
 800d6ba:	430b      	orrs	r3, r1
 800d6bc:	d122      	bne.n	800d704 <_dtoa_r+0xabc>
 800d6be:	2a00      	cmp	r2, #0
 800d6c0:	ddee      	ble.n	800d6a0 <_dtoa_r+0xa58>
 800d6c2:	ee18 1a10 	vmov	r1, s16
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f000 fb4d 	bl	800dd68 <__lshift>
 800d6ce:	4631      	mov	r1, r6
 800d6d0:	ee08 0a10 	vmov	s16, r0
 800d6d4:	f000 fbb8 	bl	800de48 <__mcmp>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	dc03      	bgt.n	800d6e4 <_dtoa_r+0xa9c>
 800d6dc:	d1e0      	bne.n	800d6a0 <_dtoa_r+0xa58>
 800d6de:	f01a 0f01 	tst.w	sl, #1
 800d6e2:	d0dd      	beq.n	800d6a0 <_dtoa_r+0xa58>
 800d6e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6e8:	d1d7      	bne.n	800d69a <_dtoa_r+0xa52>
 800d6ea:	2339      	movs	r3, #57	; 0x39
 800d6ec:	f88b 3000 	strb.w	r3, [fp]
 800d6f0:	462b      	mov	r3, r5
 800d6f2:	461d      	mov	r5, r3
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d6fa:	2a39      	cmp	r2, #57	; 0x39
 800d6fc:	d071      	beq.n	800d7e2 <_dtoa_r+0xb9a>
 800d6fe:	3201      	adds	r2, #1
 800d700:	701a      	strb	r2, [r3, #0]
 800d702:	e746      	b.n	800d592 <_dtoa_r+0x94a>
 800d704:	2a00      	cmp	r2, #0
 800d706:	dd07      	ble.n	800d718 <_dtoa_r+0xad0>
 800d708:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d70c:	d0ed      	beq.n	800d6ea <_dtoa_r+0xaa2>
 800d70e:	f10a 0301 	add.w	r3, sl, #1
 800d712:	f88b 3000 	strb.w	r3, [fp]
 800d716:	e73c      	b.n	800d592 <_dtoa_r+0x94a>
 800d718:	9b05      	ldr	r3, [sp, #20]
 800d71a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d71e:	4599      	cmp	r9, r3
 800d720:	d047      	beq.n	800d7b2 <_dtoa_r+0xb6a>
 800d722:	ee18 1a10 	vmov	r1, s16
 800d726:	2300      	movs	r3, #0
 800d728:	220a      	movs	r2, #10
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 f96c 	bl	800da08 <__multadd>
 800d730:	45b8      	cmp	r8, r7
 800d732:	ee08 0a10 	vmov	s16, r0
 800d736:	f04f 0300 	mov.w	r3, #0
 800d73a:	f04f 020a 	mov.w	r2, #10
 800d73e:	4641      	mov	r1, r8
 800d740:	4620      	mov	r0, r4
 800d742:	d106      	bne.n	800d752 <_dtoa_r+0xb0a>
 800d744:	f000 f960 	bl	800da08 <__multadd>
 800d748:	4680      	mov	r8, r0
 800d74a:	4607      	mov	r7, r0
 800d74c:	f109 0901 	add.w	r9, r9, #1
 800d750:	e772      	b.n	800d638 <_dtoa_r+0x9f0>
 800d752:	f000 f959 	bl	800da08 <__multadd>
 800d756:	4639      	mov	r1, r7
 800d758:	4680      	mov	r8, r0
 800d75a:	2300      	movs	r3, #0
 800d75c:	220a      	movs	r2, #10
 800d75e:	4620      	mov	r0, r4
 800d760:	f000 f952 	bl	800da08 <__multadd>
 800d764:	4607      	mov	r7, r0
 800d766:	e7f1      	b.n	800d74c <_dtoa_r+0xb04>
 800d768:	9b03      	ldr	r3, [sp, #12]
 800d76a:	9302      	str	r3, [sp, #8]
 800d76c:	9d01      	ldr	r5, [sp, #4]
 800d76e:	ee18 0a10 	vmov	r0, s16
 800d772:	4631      	mov	r1, r6
 800d774:	f7ff f9da 	bl	800cb2c <quorem>
 800d778:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d77c:	9b01      	ldr	r3, [sp, #4]
 800d77e:	f805 ab01 	strb.w	sl, [r5], #1
 800d782:	1aea      	subs	r2, r5, r3
 800d784:	9b02      	ldr	r3, [sp, #8]
 800d786:	4293      	cmp	r3, r2
 800d788:	dd09      	ble.n	800d79e <_dtoa_r+0xb56>
 800d78a:	ee18 1a10 	vmov	r1, s16
 800d78e:	2300      	movs	r3, #0
 800d790:	220a      	movs	r2, #10
 800d792:	4620      	mov	r0, r4
 800d794:	f000 f938 	bl	800da08 <__multadd>
 800d798:	ee08 0a10 	vmov	s16, r0
 800d79c:	e7e7      	b.n	800d76e <_dtoa_r+0xb26>
 800d79e:	9b02      	ldr	r3, [sp, #8]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	bfc8      	it	gt
 800d7a4:	461d      	movgt	r5, r3
 800d7a6:	9b01      	ldr	r3, [sp, #4]
 800d7a8:	bfd8      	it	le
 800d7aa:	2501      	movle	r5, #1
 800d7ac:	441d      	add	r5, r3
 800d7ae:	f04f 0800 	mov.w	r8, #0
 800d7b2:	ee18 1a10 	vmov	r1, s16
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f000 fad5 	bl	800dd68 <__lshift>
 800d7be:	4631      	mov	r1, r6
 800d7c0:	ee08 0a10 	vmov	s16, r0
 800d7c4:	f000 fb40 	bl	800de48 <__mcmp>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	dc91      	bgt.n	800d6f0 <_dtoa_r+0xaa8>
 800d7cc:	d102      	bne.n	800d7d4 <_dtoa_r+0xb8c>
 800d7ce:	f01a 0f01 	tst.w	sl, #1
 800d7d2:	d18d      	bne.n	800d6f0 <_dtoa_r+0xaa8>
 800d7d4:	462b      	mov	r3, r5
 800d7d6:	461d      	mov	r5, r3
 800d7d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7dc:	2a30      	cmp	r2, #48	; 0x30
 800d7de:	d0fa      	beq.n	800d7d6 <_dtoa_r+0xb8e>
 800d7e0:	e6d7      	b.n	800d592 <_dtoa_r+0x94a>
 800d7e2:	9a01      	ldr	r2, [sp, #4]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d184      	bne.n	800d6f2 <_dtoa_r+0xaaa>
 800d7e8:	9b00      	ldr	r3, [sp, #0]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	2331      	movs	r3, #49	; 0x31
 800d7f0:	7013      	strb	r3, [r2, #0]
 800d7f2:	e6ce      	b.n	800d592 <_dtoa_r+0x94a>
 800d7f4:	4b09      	ldr	r3, [pc, #36]	; (800d81c <_dtoa_r+0xbd4>)
 800d7f6:	f7ff ba95 	b.w	800cd24 <_dtoa_r+0xdc>
 800d7fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f47f aa6e 	bne.w	800ccde <_dtoa_r+0x96>
 800d802:	4b07      	ldr	r3, [pc, #28]	; (800d820 <_dtoa_r+0xbd8>)
 800d804:	f7ff ba8e 	b.w	800cd24 <_dtoa_r+0xdc>
 800d808:	9b02      	ldr	r3, [sp, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	dcae      	bgt.n	800d76c <_dtoa_r+0xb24>
 800d80e:	9b06      	ldr	r3, [sp, #24]
 800d810:	2b02      	cmp	r3, #2
 800d812:	f73f aea8 	bgt.w	800d566 <_dtoa_r+0x91e>
 800d816:	e7a9      	b.n	800d76c <_dtoa_r+0xb24>
 800d818:	080111af 	.word	0x080111af
 800d81c:	08011391 	.word	0x08011391
 800d820:	08011147 	.word	0x08011147

0800d824 <fiprintf>:
 800d824:	b40e      	push	{r1, r2, r3}
 800d826:	b503      	push	{r0, r1, lr}
 800d828:	4601      	mov	r1, r0
 800d82a:	ab03      	add	r3, sp, #12
 800d82c:	4805      	ldr	r0, [pc, #20]	; (800d844 <fiprintf+0x20>)
 800d82e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d832:	6800      	ldr	r0, [r0, #0]
 800d834:	9301      	str	r3, [sp, #4]
 800d836:	f000 ff77 	bl	800e728 <_vfiprintf_r>
 800d83a:	b002      	add	sp, #8
 800d83c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d840:	b003      	add	sp, #12
 800d842:	4770      	bx	lr
 800d844:	200002c4 	.word	0x200002c4

0800d848 <_findenv_r>:
 800d848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800d8bc <_findenv_r+0x74>
 800d850:	4607      	mov	r7, r0
 800d852:	4689      	mov	r9, r1
 800d854:	4616      	mov	r6, r2
 800d856:	f001 fbb3 	bl	800efc0 <__env_lock>
 800d85a:	f8da 4000 	ldr.w	r4, [sl]
 800d85e:	b134      	cbz	r4, 800d86e <_findenv_r+0x26>
 800d860:	464b      	mov	r3, r9
 800d862:	4698      	mov	r8, r3
 800d864:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d868:	b13a      	cbz	r2, 800d87a <_findenv_r+0x32>
 800d86a:	2a3d      	cmp	r2, #61	; 0x3d
 800d86c:	d1f9      	bne.n	800d862 <_findenv_r+0x1a>
 800d86e:	4638      	mov	r0, r7
 800d870:	f001 fbac 	bl	800efcc <__env_unlock>
 800d874:	2000      	movs	r0, #0
 800d876:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87a:	eba8 0809 	sub.w	r8, r8, r9
 800d87e:	46a3      	mov	fp, r4
 800d880:	f854 0b04 	ldr.w	r0, [r4], #4
 800d884:	2800      	cmp	r0, #0
 800d886:	d0f2      	beq.n	800d86e <_findenv_r+0x26>
 800d888:	4642      	mov	r2, r8
 800d88a:	4649      	mov	r1, r9
 800d88c:	f7fe fe1c 	bl	800c4c8 <strncmp>
 800d890:	2800      	cmp	r0, #0
 800d892:	d1f4      	bne.n	800d87e <_findenv_r+0x36>
 800d894:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d898:	eb03 0508 	add.w	r5, r3, r8
 800d89c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d8a0:	2b3d      	cmp	r3, #61	; 0x3d
 800d8a2:	d1ec      	bne.n	800d87e <_findenv_r+0x36>
 800d8a4:	f8da 3000 	ldr.w	r3, [sl]
 800d8a8:	ebab 0303 	sub.w	r3, fp, r3
 800d8ac:	109b      	asrs	r3, r3, #2
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	6033      	str	r3, [r6, #0]
 800d8b2:	f001 fb8b 	bl	800efcc <__env_unlock>
 800d8b6:	1c68      	adds	r0, r5, #1
 800d8b8:	e7dd      	b.n	800d876 <_findenv_r+0x2e>
 800d8ba:	bf00      	nop
 800d8bc:	20000220 	.word	0x20000220

0800d8c0 <_getenv_r>:
 800d8c0:	b507      	push	{r0, r1, r2, lr}
 800d8c2:	aa01      	add	r2, sp, #4
 800d8c4:	f7ff ffc0 	bl	800d848 <_findenv_r>
 800d8c8:	b003      	add	sp, #12
 800d8ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d8d0 <__gettzinfo>:
 800d8d0:	4800      	ldr	r0, [pc, #0]	; (800d8d4 <__gettzinfo+0x4>)
 800d8d2:	4770      	bx	lr
 800d8d4:	20000330 	.word	0x20000330

0800d8d8 <_localeconv_r>:
 800d8d8:	4800      	ldr	r0, [pc, #0]	; (800d8dc <_localeconv_r+0x4>)
 800d8da:	4770      	bx	lr
 800d8dc:	20000478 	.word	0x20000478

0800d8e0 <__retarget_lock_init_recursive>:
 800d8e0:	4770      	bx	lr

0800d8e2 <__retarget_lock_acquire>:
 800d8e2:	4770      	bx	lr

0800d8e4 <__retarget_lock_acquire_recursive>:
 800d8e4:	4770      	bx	lr

0800d8e6 <__retarget_lock_release>:
 800d8e6:	4770      	bx	lr

0800d8e8 <__retarget_lock_release_recursive>:
 800d8e8:	4770      	bx	lr
	...

0800d8ec <_lseek_r>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	4d07      	ldr	r5, [pc, #28]	; (800d90c <_lseek_r+0x20>)
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	4608      	mov	r0, r1
 800d8f4:	4611      	mov	r1, r2
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	602a      	str	r2, [r5, #0]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	f7f6 fca2 	bl	8004244 <_lseek>
 800d900:	1c43      	adds	r3, r0, #1
 800d902:	d102      	bne.n	800d90a <_lseek_r+0x1e>
 800d904:	682b      	ldr	r3, [r5, #0]
 800d906:	b103      	cbz	r3, 800d90a <_lseek_r+0x1e>
 800d908:	6023      	str	r3, [r4, #0]
 800d90a:	bd38      	pop	{r3, r4, r5, pc}
 800d90c:	20000d14 	.word	0x20000d14

0800d910 <memcpy>:
 800d910:	440a      	add	r2, r1
 800d912:	4291      	cmp	r1, r2
 800d914:	f100 33ff 	add.w	r3, r0, #4294967295
 800d918:	d100      	bne.n	800d91c <memcpy+0xc>
 800d91a:	4770      	bx	lr
 800d91c:	b510      	push	{r4, lr}
 800d91e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d922:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d926:	4291      	cmp	r1, r2
 800d928:	d1f9      	bne.n	800d91e <memcpy+0xe>
 800d92a:	bd10      	pop	{r4, pc}

0800d92c <__malloc_lock>:
 800d92c:	4801      	ldr	r0, [pc, #4]	; (800d934 <__malloc_lock+0x8>)
 800d92e:	f7ff bfd9 	b.w	800d8e4 <__retarget_lock_acquire_recursive>
 800d932:	bf00      	nop
 800d934:	20000d0d 	.word	0x20000d0d

0800d938 <__malloc_unlock>:
 800d938:	4801      	ldr	r0, [pc, #4]	; (800d940 <__malloc_unlock+0x8>)
 800d93a:	f7ff bfd5 	b.w	800d8e8 <__retarget_lock_release_recursive>
 800d93e:	bf00      	nop
 800d940:	20000d0d 	.word	0x20000d0d

0800d944 <_Balloc>:
 800d944:	b570      	push	{r4, r5, r6, lr}
 800d946:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d948:	4604      	mov	r4, r0
 800d94a:	460d      	mov	r5, r1
 800d94c:	b976      	cbnz	r6, 800d96c <_Balloc+0x28>
 800d94e:	2010      	movs	r0, #16
 800d950:	f7fd fd30 	bl	800b3b4 <malloc>
 800d954:	4602      	mov	r2, r0
 800d956:	6260      	str	r0, [r4, #36]	; 0x24
 800d958:	b920      	cbnz	r0, 800d964 <_Balloc+0x20>
 800d95a:	4b18      	ldr	r3, [pc, #96]	; (800d9bc <_Balloc+0x78>)
 800d95c:	4818      	ldr	r0, [pc, #96]	; (800d9c0 <_Balloc+0x7c>)
 800d95e:	2166      	movs	r1, #102	; 0x66
 800d960:	f7ff f8a2 	bl	800caa8 <__assert_func>
 800d964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d968:	6006      	str	r6, [r0, #0]
 800d96a:	60c6      	str	r6, [r0, #12]
 800d96c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d96e:	68f3      	ldr	r3, [r6, #12]
 800d970:	b183      	cbz	r3, 800d994 <_Balloc+0x50>
 800d972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d97a:	b9b8      	cbnz	r0, 800d9ac <_Balloc+0x68>
 800d97c:	2101      	movs	r1, #1
 800d97e:	fa01 f605 	lsl.w	r6, r1, r5
 800d982:	1d72      	adds	r2, r6, #5
 800d984:	0092      	lsls	r2, r2, #2
 800d986:	4620      	mov	r0, r4
 800d988:	f000 fb60 	bl	800e04c <_calloc_r>
 800d98c:	b160      	cbz	r0, 800d9a8 <_Balloc+0x64>
 800d98e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d992:	e00e      	b.n	800d9b2 <_Balloc+0x6e>
 800d994:	2221      	movs	r2, #33	; 0x21
 800d996:	2104      	movs	r1, #4
 800d998:	4620      	mov	r0, r4
 800d99a:	f000 fb57 	bl	800e04c <_calloc_r>
 800d99e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9a0:	60f0      	str	r0, [r6, #12]
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1e4      	bne.n	800d972 <_Balloc+0x2e>
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	bd70      	pop	{r4, r5, r6, pc}
 800d9ac:	6802      	ldr	r2, [r0, #0]
 800d9ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d9b8:	e7f7      	b.n	800d9aa <_Balloc+0x66>
 800d9ba:	bf00      	nop
 800d9bc:	08010ec4 	.word	0x08010ec4
 800d9c0:	08011220 	.word	0x08011220

0800d9c4 <_Bfree>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	460c      	mov	r4, r1
 800d9cc:	b976      	cbnz	r6, 800d9ec <_Bfree+0x28>
 800d9ce:	2010      	movs	r0, #16
 800d9d0:	f7fd fcf0 	bl	800b3b4 <malloc>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	6268      	str	r0, [r5, #36]	; 0x24
 800d9d8:	b920      	cbnz	r0, 800d9e4 <_Bfree+0x20>
 800d9da:	4b09      	ldr	r3, [pc, #36]	; (800da00 <_Bfree+0x3c>)
 800d9dc:	4809      	ldr	r0, [pc, #36]	; (800da04 <_Bfree+0x40>)
 800d9de:	218a      	movs	r1, #138	; 0x8a
 800d9e0:	f7ff f862 	bl	800caa8 <__assert_func>
 800d9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9e8:	6006      	str	r6, [r0, #0]
 800d9ea:	60c6      	str	r6, [r0, #12]
 800d9ec:	b13c      	cbz	r4, 800d9fe <_Bfree+0x3a>
 800d9ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d9f0:	6862      	ldr	r2, [r4, #4]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d9f8:	6021      	str	r1, [r4, #0]
 800d9fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	08010ec4 	.word	0x08010ec4
 800da04:	08011220 	.word	0x08011220

0800da08 <__multadd>:
 800da08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da0c:	690d      	ldr	r5, [r1, #16]
 800da0e:	4607      	mov	r7, r0
 800da10:	460c      	mov	r4, r1
 800da12:	461e      	mov	r6, r3
 800da14:	f101 0c14 	add.w	ip, r1, #20
 800da18:	2000      	movs	r0, #0
 800da1a:	f8dc 3000 	ldr.w	r3, [ip]
 800da1e:	b299      	uxth	r1, r3
 800da20:	fb02 6101 	mla	r1, r2, r1, r6
 800da24:	0c1e      	lsrs	r6, r3, #16
 800da26:	0c0b      	lsrs	r3, r1, #16
 800da28:	fb02 3306 	mla	r3, r2, r6, r3
 800da2c:	b289      	uxth	r1, r1
 800da2e:	3001      	adds	r0, #1
 800da30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da34:	4285      	cmp	r5, r0
 800da36:	f84c 1b04 	str.w	r1, [ip], #4
 800da3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da3e:	dcec      	bgt.n	800da1a <__multadd+0x12>
 800da40:	b30e      	cbz	r6, 800da86 <__multadd+0x7e>
 800da42:	68a3      	ldr	r3, [r4, #8]
 800da44:	42ab      	cmp	r3, r5
 800da46:	dc19      	bgt.n	800da7c <__multadd+0x74>
 800da48:	6861      	ldr	r1, [r4, #4]
 800da4a:	4638      	mov	r0, r7
 800da4c:	3101      	adds	r1, #1
 800da4e:	f7ff ff79 	bl	800d944 <_Balloc>
 800da52:	4680      	mov	r8, r0
 800da54:	b928      	cbnz	r0, 800da62 <__multadd+0x5a>
 800da56:	4602      	mov	r2, r0
 800da58:	4b0c      	ldr	r3, [pc, #48]	; (800da8c <__multadd+0x84>)
 800da5a:	480d      	ldr	r0, [pc, #52]	; (800da90 <__multadd+0x88>)
 800da5c:	21b5      	movs	r1, #181	; 0xb5
 800da5e:	f7ff f823 	bl	800caa8 <__assert_func>
 800da62:	6922      	ldr	r2, [r4, #16]
 800da64:	3202      	adds	r2, #2
 800da66:	f104 010c 	add.w	r1, r4, #12
 800da6a:	0092      	lsls	r2, r2, #2
 800da6c:	300c      	adds	r0, #12
 800da6e:	f7ff ff4f 	bl	800d910 <memcpy>
 800da72:	4621      	mov	r1, r4
 800da74:	4638      	mov	r0, r7
 800da76:	f7ff ffa5 	bl	800d9c4 <_Bfree>
 800da7a:	4644      	mov	r4, r8
 800da7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da80:	3501      	adds	r5, #1
 800da82:	615e      	str	r6, [r3, #20]
 800da84:	6125      	str	r5, [r4, #16]
 800da86:	4620      	mov	r0, r4
 800da88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da8c:	080111af 	.word	0x080111af
 800da90:	08011220 	.word	0x08011220

0800da94 <__hi0bits>:
 800da94:	0c03      	lsrs	r3, r0, #16
 800da96:	041b      	lsls	r3, r3, #16
 800da98:	b9d3      	cbnz	r3, 800dad0 <__hi0bits+0x3c>
 800da9a:	0400      	lsls	r0, r0, #16
 800da9c:	2310      	movs	r3, #16
 800da9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800daa2:	bf04      	itt	eq
 800daa4:	0200      	lsleq	r0, r0, #8
 800daa6:	3308      	addeq	r3, #8
 800daa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800daac:	bf04      	itt	eq
 800daae:	0100      	lsleq	r0, r0, #4
 800dab0:	3304      	addeq	r3, #4
 800dab2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dab6:	bf04      	itt	eq
 800dab8:	0080      	lsleq	r0, r0, #2
 800daba:	3302      	addeq	r3, #2
 800dabc:	2800      	cmp	r0, #0
 800dabe:	db05      	blt.n	800dacc <__hi0bits+0x38>
 800dac0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dac4:	f103 0301 	add.w	r3, r3, #1
 800dac8:	bf08      	it	eq
 800daca:	2320      	moveq	r3, #32
 800dacc:	4618      	mov	r0, r3
 800dace:	4770      	bx	lr
 800dad0:	2300      	movs	r3, #0
 800dad2:	e7e4      	b.n	800da9e <__hi0bits+0xa>

0800dad4 <__lo0bits>:
 800dad4:	6803      	ldr	r3, [r0, #0]
 800dad6:	f013 0207 	ands.w	r2, r3, #7
 800dada:	4601      	mov	r1, r0
 800dadc:	d00b      	beq.n	800daf6 <__lo0bits+0x22>
 800dade:	07da      	lsls	r2, r3, #31
 800dae0:	d423      	bmi.n	800db2a <__lo0bits+0x56>
 800dae2:	0798      	lsls	r0, r3, #30
 800dae4:	bf49      	itett	mi
 800dae6:	085b      	lsrmi	r3, r3, #1
 800dae8:	089b      	lsrpl	r3, r3, #2
 800daea:	2001      	movmi	r0, #1
 800daec:	600b      	strmi	r3, [r1, #0]
 800daee:	bf5c      	itt	pl
 800daf0:	600b      	strpl	r3, [r1, #0]
 800daf2:	2002      	movpl	r0, #2
 800daf4:	4770      	bx	lr
 800daf6:	b298      	uxth	r0, r3
 800daf8:	b9a8      	cbnz	r0, 800db26 <__lo0bits+0x52>
 800dafa:	0c1b      	lsrs	r3, r3, #16
 800dafc:	2010      	movs	r0, #16
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	b90a      	cbnz	r2, 800db06 <__lo0bits+0x32>
 800db02:	3008      	adds	r0, #8
 800db04:	0a1b      	lsrs	r3, r3, #8
 800db06:	071a      	lsls	r2, r3, #28
 800db08:	bf04      	itt	eq
 800db0a:	091b      	lsreq	r3, r3, #4
 800db0c:	3004      	addeq	r0, #4
 800db0e:	079a      	lsls	r2, r3, #30
 800db10:	bf04      	itt	eq
 800db12:	089b      	lsreq	r3, r3, #2
 800db14:	3002      	addeq	r0, #2
 800db16:	07da      	lsls	r2, r3, #31
 800db18:	d403      	bmi.n	800db22 <__lo0bits+0x4e>
 800db1a:	085b      	lsrs	r3, r3, #1
 800db1c:	f100 0001 	add.w	r0, r0, #1
 800db20:	d005      	beq.n	800db2e <__lo0bits+0x5a>
 800db22:	600b      	str	r3, [r1, #0]
 800db24:	4770      	bx	lr
 800db26:	4610      	mov	r0, r2
 800db28:	e7e9      	b.n	800dafe <__lo0bits+0x2a>
 800db2a:	2000      	movs	r0, #0
 800db2c:	4770      	bx	lr
 800db2e:	2020      	movs	r0, #32
 800db30:	4770      	bx	lr
	...

0800db34 <__i2b>:
 800db34:	b510      	push	{r4, lr}
 800db36:	460c      	mov	r4, r1
 800db38:	2101      	movs	r1, #1
 800db3a:	f7ff ff03 	bl	800d944 <_Balloc>
 800db3e:	4602      	mov	r2, r0
 800db40:	b928      	cbnz	r0, 800db4e <__i2b+0x1a>
 800db42:	4b05      	ldr	r3, [pc, #20]	; (800db58 <__i2b+0x24>)
 800db44:	4805      	ldr	r0, [pc, #20]	; (800db5c <__i2b+0x28>)
 800db46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800db4a:	f7fe ffad 	bl	800caa8 <__assert_func>
 800db4e:	2301      	movs	r3, #1
 800db50:	6144      	str	r4, [r0, #20]
 800db52:	6103      	str	r3, [r0, #16]
 800db54:	bd10      	pop	{r4, pc}
 800db56:	bf00      	nop
 800db58:	080111af 	.word	0x080111af
 800db5c:	08011220 	.word	0x08011220

0800db60 <__multiply>:
 800db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	4691      	mov	r9, r2
 800db66:	690a      	ldr	r2, [r1, #16]
 800db68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	bfb8      	it	lt
 800db70:	460b      	movlt	r3, r1
 800db72:	460c      	mov	r4, r1
 800db74:	bfbc      	itt	lt
 800db76:	464c      	movlt	r4, r9
 800db78:	4699      	movlt	r9, r3
 800db7a:	6927      	ldr	r7, [r4, #16]
 800db7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db80:	68a3      	ldr	r3, [r4, #8]
 800db82:	6861      	ldr	r1, [r4, #4]
 800db84:	eb07 060a 	add.w	r6, r7, sl
 800db88:	42b3      	cmp	r3, r6
 800db8a:	b085      	sub	sp, #20
 800db8c:	bfb8      	it	lt
 800db8e:	3101      	addlt	r1, #1
 800db90:	f7ff fed8 	bl	800d944 <_Balloc>
 800db94:	b930      	cbnz	r0, 800dba4 <__multiply+0x44>
 800db96:	4602      	mov	r2, r0
 800db98:	4b44      	ldr	r3, [pc, #272]	; (800dcac <__multiply+0x14c>)
 800db9a:	4845      	ldr	r0, [pc, #276]	; (800dcb0 <__multiply+0x150>)
 800db9c:	f240 115d 	movw	r1, #349	; 0x15d
 800dba0:	f7fe ff82 	bl	800caa8 <__assert_func>
 800dba4:	f100 0514 	add.w	r5, r0, #20
 800dba8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dbac:	462b      	mov	r3, r5
 800dbae:	2200      	movs	r2, #0
 800dbb0:	4543      	cmp	r3, r8
 800dbb2:	d321      	bcc.n	800dbf8 <__multiply+0x98>
 800dbb4:	f104 0314 	add.w	r3, r4, #20
 800dbb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dbbc:	f109 0314 	add.w	r3, r9, #20
 800dbc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dbc4:	9202      	str	r2, [sp, #8]
 800dbc6:	1b3a      	subs	r2, r7, r4
 800dbc8:	3a15      	subs	r2, #21
 800dbca:	f022 0203 	bic.w	r2, r2, #3
 800dbce:	3204      	adds	r2, #4
 800dbd0:	f104 0115 	add.w	r1, r4, #21
 800dbd4:	428f      	cmp	r7, r1
 800dbd6:	bf38      	it	cc
 800dbd8:	2204      	movcc	r2, #4
 800dbda:	9201      	str	r2, [sp, #4]
 800dbdc:	9a02      	ldr	r2, [sp, #8]
 800dbde:	9303      	str	r3, [sp, #12]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d80c      	bhi.n	800dbfe <__multiply+0x9e>
 800dbe4:	2e00      	cmp	r6, #0
 800dbe6:	dd03      	ble.n	800dbf0 <__multiply+0x90>
 800dbe8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d05a      	beq.n	800dca6 <__multiply+0x146>
 800dbf0:	6106      	str	r6, [r0, #16]
 800dbf2:	b005      	add	sp, #20
 800dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf8:	f843 2b04 	str.w	r2, [r3], #4
 800dbfc:	e7d8      	b.n	800dbb0 <__multiply+0x50>
 800dbfe:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc02:	f1ba 0f00 	cmp.w	sl, #0
 800dc06:	d024      	beq.n	800dc52 <__multiply+0xf2>
 800dc08:	f104 0e14 	add.w	lr, r4, #20
 800dc0c:	46a9      	mov	r9, r5
 800dc0e:	f04f 0c00 	mov.w	ip, #0
 800dc12:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dc16:	f8d9 1000 	ldr.w	r1, [r9]
 800dc1a:	fa1f fb82 	uxth.w	fp, r2
 800dc1e:	b289      	uxth	r1, r1
 800dc20:	fb0a 110b 	mla	r1, sl, fp, r1
 800dc24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dc28:	f8d9 2000 	ldr.w	r2, [r9]
 800dc2c:	4461      	add	r1, ip
 800dc2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc32:	fb0a c20b 	mla	r2, sl, fp, ip
 800dc36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dc3a:	b289      	uxth	r1, r1
 800dc3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc40:	4577      	cmp	r7, lr
 800dc42:	f849 1b04 	str.w	r1, [r9], #4
 800dc46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc4a:	d8e2      	bhi.n	800dc12 <__multiply+0xb2>
 800dc4c:	9a01      	ldr	r2, [sp, #4]
 800dc4e:	f845 c002 	str.w	ip, [r5, r2]
 800dc52:	9a03      	ldr	r2, [sp, #12]
 800dc54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dc58:	3304      	adds	r3, #4
 800dc5a:	f1b9 0f00 	cmp.w	r9, #0
 800dc5e:	d020      	beq.n	800dca2 <__multiply+0x142>
 800dc60:	6829      	ldr	r1, [r5, #0]
 800dc62:	f104 0c14 	add.w	ip, r4, #20
 800dc66:	46ae      	mov	lr, r5
 800dc68:	f04f 0a00 	mov.w	sl, #0
 800dc6c:	f8bc b000 	ldrh.w	fp, [ip]
 800dc70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dc74:	fb09 220b 	mla	r2, r9, fp, r2
 800dc78:	4492      	add	sl, r2
 800dc7a:	b289      	uxth	r1, r1
 800dc7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dc80:	f84e 1b04 	str.w	r1, [lr], #4
 800dc84:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dc88:	f8be 1000 	ldrh.w	r1, [lr]
 800dc8c:	0c12      	lsrs	r2, r2, #16
 800dc8e:	fb09 1102 	mla	r1, r9, r2, r1
 800dc92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dc96:	4567      	cmp	r7, ip
 800dc98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc9c:	d8e6      	bhi.n	800dc6c <__multiply+0x10c>
 800dc9e:	9a01      	ldr	r2, [sp, #4]
 800dca0:	50a9      	str	r1, [r5, r2]
 800dca2:	3504      	adds	r5, #4
 800dca4:	e79a      	b.n	800dbdc <__multiply+0x7c>
 800dca6:	3e01      	subs	r6, #1
 800dca8:	e79c      	b.n	800dbe4 <__multiply+0x84>
 800dcaa:	bf00      	nop
 800dcac:	080111af 	.word	0x080111af
 800dcb0:	08011220 	.word	0x08011220

0800dcb4 <__pow5mult>:
 800dcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcb8:	4615      	mov	r5, r2
 800dcba:	f012 0203 	ands.w	r2, r2, #3
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	460f      	mov	r7, r1
 800dcc2:	d007      	beq.n	800dcd4 <__pow5mult+0x20>
 800dcc4:	4c25      	ldr	r4, [pc, #148]	; (800dd5c <__pow5mult+0xa8>)
 800dcc6:	3a01      	subs	r2, #1
 800dcc8:	2300      	movs	r3, #0
 800dcca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dcce:	f7ff fe9b 	bl	800da08 <__multadd>
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	10ad      	asrs	r5, r5, #2
 800dcd6:	d03d      	beq.n	800dd54 <__pow5mult+0xa0>
 800dcd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dcda:	b97c      	cbnz	r4, 800dcfc <__pow5mult+0x48>
 800dcdc:	2010      	movs	r0, #16
 800dcde:	f7fd fb69 	bl	800b3b4 <malloc>
 800dce2:	4602      	mov	r2, r0
 800dce4:	6270      	str	r0, [r6, #36]	; 0x24
 800dce6:	b928      	cbnz	r0, 800dcf4 <__pow5mult+0x40>
 800dce8:	4b1d      	ldr	r3, [pc, #116]	; (800dd60 <__pow5mult+0xac>)
 800dcea:	481e      	ldr	r0, [pc, #120]	; (800dd64 <__pow5mult+0xb0>)
 800dcec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dcf0:	f7fe feda 	bl	800caa8 <__assert_func>
 800dcf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dcf8:	6004      	str	r4, [r0, #0]
 800dcfa:	60c4      	str	r4, [r0, #12]
 800dcfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd04:	b94c      	cbnz	r4, 800dd1a <__pow5mult+0x66>
 800dd06:	f240 2171 	movw	r1, #625	; 0x271
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	f7ff ff12 	bl	800db34 <__i2b>
 800dd10:	2300      	movs	r3, #0
 800dd12:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd16:	4604      	mov	r4, r0
 800dd18:	6003      	str	r3, [r0, #0]
 800dd1a:	f04f 0900 	mov.w	r9, #0
 800dd1e:	07eb      	lsls	r3, r5, #31
 800dd20:	d50a      	bpl.n	800dd38 <__pow5mult+0x84>
 800dd22:	4639      	mov	r1, r7
 800dd24:	4622      	mov	r2, r4
 800dd26:	4630      	mov	r0, r6
 800dd28:	f7ff ff1a 	bl	800db60 <__multiply>
 800dd2c:	4639      	mov	r1, r7
 800dd2e:	4680      	mov	r8, r0
 800dd30:	4630      	mov	r0, r6
 800dd32:	f7ff fe47 	bl	800d9c4 <_Bfree>
 800dd36:	4647      	mov	r7, r8
 800dd38:	106d      	asrs	r5, r5, #1
 800dd3a:	d00b      	beq.n	800dd54 <__pow5mult+0xa0>
 800dd3c:	6820      	ldr	r0, [r4, #0]
 800dd3e:	b938      	cbnz	r0, 800dd50 <__pow5mult+0x9c>
 800dd40:	4622      	mov	r2, r4
 800dd42:	4621      	mov	r1, r4
 800dd44:	4630      	mov	r0, r6
 800dd46:	f7ff ff0b 	bl	800db60 <__multiply>
 800dd4a:	6020      	str	r0, [r4, #0]
 800dd4c:	f8c0 9000 	str.w	r9, [r0]
 800dd50:	4604      	mov	r4, r0
 800dd52:	e7e4      	b.n	800dd1e <__pow5mult+0x6a>
 800dd54:	4638      	mov	r0, r7
 800dd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd5a:	bf00      	nop
 800dd5c:	08011370 	.word	0x08011370
 800dd60:	08010ec4 	.word	0x08010ec4
 800dd64:	08011220 	.word	0x08011220

0800dd68 <__lshift>:
 800dd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd6c:	460c      	mov	r4, r1
 800dd6e:	6849      	ldr	r1, [r1, #4]
 800dd70:	6923      	ldr	r3, [r4, #16]
 800dd72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd76:	68a3      	ldr	r3, [r4, #8]
 800dd78:	4607      	mov	r7, r0
 800dd7a:	4691      	mov	r9, r2
 800dd7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd80:	f108 0601 	add.w	r6, r8, #1
 800dd84:	42b3      	cmp	r3, r6
 800dd86:	db0b      	blt.n	800dda0 <__lshift+0x38>
 800dd88:	4638      	mov	r0, r7
 800dd8a:	f7ff fddb 	bl	800d944 <_Balloc>
 800dd8e:	4605      	mov	r5, r0
 800dd90:	b948      	cbnz	r0, 800dda6 <__lshift+0x3e>
 800dd92:	4602      	mov	r2, r0
 800dd94:	4b2a      	ldr	r3, [pc, #168]	; (800de40 <__lshift+0xd8>)
 800dd96:	482b      	ldr	r0, [pc, #172]	; (800de44 <__lshift+0xdc>)
 800dd98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dd9c:	f7fe fe84 	bl	800caa8 <__assert_func>
 800dda0:	3101      	adds	r1, #1
 800dda2:	005b      	lsls	r3, r3, #1
 800dda4:	e7ee      	b.n	800dd84 <__lshift+0x1c>
 800dda6:	2300      	movs	r3, #0
 800dda8:	f100 0114 	add.w	r1, r0, #20
 800ddac:	f100 0210 	add.w	r2, r0, #16
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	4553      	cmp	r3, sl
 800ddb4:	db37      	blt.n	800de26 <__lshift+0xbe>
 800ddb6:	6920      	ldr	r0, [r4, #16]
 800ddb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddbc:	f104 0314 	add.w	r3, r4, #20
 800ddc0:	f019 091f 	ands.w	r9, r9, #31
 800ddc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ddc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ddcc:	d02f      	beq.n	800de2e <__lshift+0xc6>
 800ddce:	f1c9 0e20 	rsb	lr, r9, #32
 800ddd2:	468a      	mov	sl, r1
 800ddd4:	f04f 0c00 	mov.w	ip, #0
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	fa02 f209 	lsl.w	r2, r2, r9
 800ddde:	ea42 020c 	orr.w	r2, r2, ip
 800dde2:	f84a 2b04 	str.w	r2, [sl], #4
 800dde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddea:	4298      	cmp	r0, r3
 800ddec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ddf0:	d8f2      	bhi.n	800ddd8 <__lshift+0x70>
 800ddf2:	1b03      	subs	r3, r0, r4
 800ddf4:	3b15      	subs	r3, #21
 800ddf6:	f023 0303 	bic.w	r3, r3, #3
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	f104 0215 	add.w	r2, r4, #21
 800de00:	4290      	cmp	r0, r2
 800de02:	bf38      	it	cc
 800de04:	2304      	movcc	r3, #4
 800de06:	f841 c003 	str.w	ip, [r1, r3]
 800de0a:	f1bc 0f00 	cmp.w	ip, #0
 800de0e:	d001      	beq.n	800de14 <__lshift+0xac>
 800de10:	f108 0602 	add.w	r6, r8, #2
 800de14:	3e01      	subs	r6, #1
 800de16:	4638      	mov	r0, r7
 800de18:	612e      	str	r6, [r5, #16]
 800de1a:	4621      	mov	r1, r4
 800de1c:	f7ff fdd2 	bl	800d9c4 <_Bfree>
 800de20:	4628      	mov	r0, r5
 800de22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de26:	f842 0f04 	str.w	r0, [r2, #4]!
 800de2a:	3301      	adds	r3, #1
 800de2c:	e7c1      	b.n	800ddb2 <__lshift+0x4a>
 800de2e:	3904      	subs	r1, #4
 800de30:	f853 2b04 	ldr.w	r2, [r3], #4
 800de34:	f841 2f04 	str.w	r2, [r1, #4]!
 800de38:	4298      	cmp	r0, r3
 800de3a:	d8f9      	bhi.n	800de30 <__lshift+0xc8>
 800de3c:	e7ea      	b.n	800de14 <__lshift+0xac>
 800de3e:	bf00      	nop
 800de40:	080111af 	.word	0x080111af
 800de44:	08011220 	.word	0x08011220

0800de48 <__mcmp>:
 800de48:	b530      	push	{r4, r5, lr}
 800de4a:	6902      	ldr	r2, [r0, #16]
 800de4c:	690c      	ldr	r4, [r1, #16]
 800de4e:	1b12      	subs	r2, r2, r4
 800de50:	d10e      	bne.n	800de70 <__mcmp+0x28>
 800de52:	f100 0314 	add.w	r3, r0, #20
 800de56:	3114      	adds	r1, #20
 800de58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800de5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800de64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800de68:	42a5      	cmp	r5, r4
 800de6a:	d003      	beq.n	800de74 <__mcmp+0x2c>
 800de6c:	d305      	bcc.n	800de7a <__mcmp+0x32>
 800de6e:	2201      	movs	r2, #1
 800de70:	4610      	mov	r0, r2
 800de72:	bd30      	pop	{r4, r5, pc}
 800de74:	4283      	cmp	r3, r0
 800de76:	d3f3      	bcc.n	800de60 <__mcmp+0x18>
 800de78:	e7fa      	b.n	800de70 <__mcmp+0x28>
 800de7a:	f04f 32ff 	mov.w	r2, #4294967295
 800de7e:	e7f7      	b.n	800de70 <__mcmp+0x28>

0800de80 <__mdiff>:
 800de80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de84:	460c      	mov	r4, r1
 800de86:	4606      	mov	r6, r0
 800de88:	4611      	mov	r1, r2
 800de8a:	4620      	mov	r0, r4
 800de8c:	4690      	mov	r8, r2
 800de8e:	f7ff ffdb 	bl	800de48 <__mcmp>
 800de92:	1e05      	subs	r5, r0, #0
 800de94:	d110      	bne.n	800deb8 <__mdiff+0x38>
 800de96:	4629      	mov	r1, r5
 800de98:	4630      	mov	r0, r6
 800de9a:	f7ff fd53 	bl	800d944 <_Balloc>
 800de9e:	b930      	cbnz	r0, 800deae <__mdiff+0x2e>
 800dea0:	4b3a      	ldr	r3, [pc, #232]	; (800df8c <__mdiff+0x10c>)
 800dea2:	4602      	mov	r2, r0
 800dea4:	f240 2132 	movw	r1, #562	; 0x232
 800dea8:	4839      	ldr	r0, [pc, #228]	; (800df90 <__mdiff+0x110>)
 800deaa:	f7fe fdfd 	bl	800caa8 <__assert_func>
 800deae:	2301      	movs	r3, #1
 800deb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800deb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb8:	bfa4      	itt	ge
 800deba:	4643      	movge	r3, r8
 800debc:	46a0      	movge	r8, r4
 800debe:	4630      	mov	r0, r6
 800dec0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dec4:	bfa6      	itte	ge
 800dec6:	461c      	movge	r4, r3
 800dec8:	2500      	movge	r5, #0
 800deca:	2501      	movlt	r5, #1
 800decc:	f7ff fd3a 	bl	800d944 <_Balloc>
 800ded0:	b920      	cbnz	r0, 800dedc <__mdiff+0x5c>
 800ded2:	4b2e      	ldr	r3, [pc, #184]	; (800df8c <__mdiff+0x10c>)
 800ded4:	4602      	mov	r2, r0
 800ded6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800deda:	e7e5      	b.n	800dea8 <__mdiff+0x28>
 800dedc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dee0:	6926      	ldr	r6, [r4, #16]
 800dee2:	60c5      	str	r5, [r0, #12]
 800dee4:	f104 0914 	add.w	r9, r4, #20
 800dee8:	f108 0514 	add.w	r5, r8, #20
 800deec:	f100 0e14 	add.w	lr, r0, #20
 800def0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800def4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800def8:	f108 0210 	add.w	r2, r8, #16
 800defc:	46f2      	mov	sl, lr
 800defe:	2100      	movs	r1, #0
 800df00:	f859 3b04 	ldr.w	r3, [r9], #4
 800df04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df08:	fa1f f883 	uxth.w	r8, r3
 800df0c:	fa11 f18b 	uxtah	r1, r1, fp
 800df10:	0c1b      	lsrs	r3, r3, #16
 800df12:	eba1 0808 	sub.w	r8, r1, r8
 800df16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df1e:	fa1f f888 	uxth.w	r8, r8
 800df22:	1419      	asrs	r1, r3, #16
 800df24:	454e      	cmp	r6, r9
 800df26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800df2a:	f84a 3b04 	str.w	r3, [sl], #4
 800df2e:	d8e7      	bhi.n	800df00 <__mdiff+0x80>
 800df30:	1b33      	subs	r3, r6, r4
 800df32:	3b15      	subs	r3, #21
 800df34:	f023 0303 	bic.w	r3, r3, #3
 800df38:	3304      	adds	r3, #4
 800df3a:	3415      	adds	r4, #21
 800df3c:	42a6      	cmp	r6, r4
 800df3e:	bf38      	it	cc
 800df40:	2304      	movcc	r3, #4
 800df42:	441d      	add	r5, r3
 800df44:	4473      	add	r3, lr
 800df46:	469e      	mov	lr, r3
 800df48:	462e      	mov	r6, r5
 800df4a:	4566      	cmp	r6, ip
 800df4c:	d30e      	bcc.n	800df6c <__mdiff+0xec>
 800df4e:	f10c 0203 	add.w	r2, ip, #3
 800df52:	1b52      	subs	r2, r2, r5
 800df54:	f022 0203 	bic.w	r2, r2, #3
 800df58:	3d03      	subs	r5, #3
 800df5a:	45ac      	cmp	ip, r5
 800df5c:	bf38      	it	cc
 800df5e:	2200      	movcc	r2, #0
 800df60:	441a      	add	r2, r3
 800df62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800df66:	b17b      	cbz	r3, 800df88 <__mdiff+0x108>
 800df68:	6107      	str	r7, [r0, #16]
 800df6a:	e7a3      	b.n	800deb4 <__mdiff+0x34>
 800df6c:	f856 8b04 	ldr.w	r8, [r6], #4
 800df70:	fa11 f288 	uxtah	r2, r1, r8
 800df74:	1414      	asrs	r4, r2, #16
 800df76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800df7a:	b292      	uxth	r2, r2
 800df7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800df80:	f84e 2b04 	str.w	r2, [lr], #4
 800df84:	1421      	asrs	r1, r4, #16
 800df86:	e7e0      	b.n	800df4a <__mdiff+0xca>
 800df88:	3f01      	subs	r7, #1
 800df8a:	e7ea      	b.n	800df62 <__mdiff+0xe2>
 800df8c:	080111af 	.word	0x080111af
 800df90:	08011220 	.word	0x08011220

0800df94 <__d2b>:
 800df94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800df98:	4689      	mov	r9, r1
 800df9a:	2101      	movs	r1, #1
 800df9c:	ec57 6b10 	vmov	r6, r7, d0
 800dfa0:	4690      	mov	r8, r2
 800dfa2:	f7ff fccf 	bl	800d944 <_Balloc>
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	b930      	cbnz	r0, 800dfb8 <__d2b+0x24>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	4b25      	ldr	r3, [pc, #148]	; (800e044 <__d2b+0xb0>)
 800dfae:	4826      	ldr	r0, [pc, #152]	; (800e048 <__d2b+0xb4>)
 800dfb0:	f240 310a 	movw	r1, #778	; 0x30a
 800dfb4:	f7fe fd78 	bl	800caa8 <__assert_func>
 800dfb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dfbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dfc0:	bb35      	cbnz	r5, 800e010 <__d2b+0x7c>
 800dfc2:	2e00      	cmp	r6, #0
 800dfc4:	9301      	str	r3, [sp, #4]
 800dfc6:	d028      	beq.n	800e01a <__d2b+0x86>
 800dfc8:	4668      	mov	r0, sp
 800dfca:	9600      	str	r6, [sp, #0]
 800dfcc:	f7ff fd82 	bl	800dad4 <__lo0bits>
 800dfd0:	9900      	ldr	r1, [sp, #0]
 800dfd2:	b300      	cbz	r0, 800e016 <__d2b+0x82>
 800dfd4:	9a01      	ldr	r2, [sp, #4]
 800dfd6:	f1c0 0320 	rsb	r3, r0, #32
 800dfda:	fa02 f303 	lsl.w	r3, r2, r3
 800dfde:	430b      	orrs	r3, r1
 800dfe0:	40c2      	lsrs	r2, r0
 800dfe2:	6163      	str	r3, [r4, #20]
 800dfe4:	9201      	str	r2, [sp, #4]
 800dfe6:	9b01      	ldr	r3, [sp, #4]
 800dfe8:	61a3      	str	r3, [r4, #24]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	bf14      	ite	ne
 800dfee:	2202      	movne	r2, #2
 800dff0:	2201      	moveq	r2, #1
 800dff2:	6122      	str	r2, [r4, #16]
 800dff4:	b1d5      	cbz	r5, 800e02c <__d2b+0x98>
 800dff6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dffa:	4405      	add	r5, r0
 800dffc:	f8c9 5000 	str.w	r5, [r9]
 800e000:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e004:	f8c8 0000 	str.w	r0, [r8]
 800e008:	4620      	mov	r0, r4
 800e00a:	b003      	add	sp, #12
 800e00c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e014:	e7d5      	b.n	800dfc2 <__d2b+0x2e>
 800e016:	6161      	str	r1, [r4, #20]
 800e018:	e7e5      	b.n	800dfe6 <__d2b+0x52>
 800e01a:	a801      	add	r0, sp, #4
 800e01c:	f7ff fd5a 	bl	800dad4 <__lo0bits>
 800e020:	9b01      	ldr	r3, [sp, #4]
 800e022:	6163      	str	r3, [r4, #20]
 800e024:	2201      	movs	r2, #1
 800e026:	6122      	str	r2, [r4, #16]
 800e028:	3020      	adds	r0, #32
 800e02a:	e7e3      	b.n	800dff4 <__d2b+0x60>
 800e02c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e030:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e034:	f8c9 0000 	str.w	r0, [r9]
 800e038:	6918      	ldr	r0, [r3, #16]
 800e03a:	f7ff fd2b 	bl	800da94 <__hi0bits>
 800e03e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e042:	e7df      	b.n	800e004 <__d2b+0x70>
 800e044:	080111af 	.word	0x080111af
 800e048:	08011220 	.word	0x08011220

0800e04c <_calloc_r>:
 800e04c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e04e:	fba1 2402 	umull	r2, r4, r1, r2
 800e052:	b94c      	cbnz	r4, 800e068 <_calloc_r+0x1c>
 800e054:	4611      	mov	r1, r2
 800e056:	9201      	str	r2, [sp, #4]
 800e058:	f7fd fca2 	bl	800b9a0 <_malloc_r>
 800e05c:	9a01      	ldr	r2, [sp, #4]
 800e05e:	4605      	mov	r5, r0
 800e060:	b930      	cbnz	r0, 800e070 <_calloc_r+0x24>
 800e062:	4628      	mov	r0, r5
 800e064:	b003      	add	sp, #12
 800e066:	bd30      	pop	{r4, r5, pc}
 800e068:	220c      	movs	r2, #12
 800e06a:	6002      	str	r2, [r0, #0]
 800e06c:	2500      	movs	r5, #0
 800e06e:	e7f8      	b.n	800e062 <_calloc_r+0x16>
 800e070:	4621      	mov	r1, r4
 800e072:	f7fd f9af 	bl	800b3d4 <memset>
 800e076:	e7f4      	b.n	800e062 <_calloc_r+0x16>

0800e078 <__ssputs_r>:
 800e078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e07c:	688e      	ldr	r6, [r1, #8]
 800e07e:	429e      	cmp	r6, r3
 800e080:	4682      	mov	sl, r0
 800e082:	460c      	mov	r4, r1
 800e084:	4690      	mov	r8, r2
 800e086:	461f      	mov	r7, r3
 800e088:	d838      	bhi.n	800e0fc <__ssputs_r+0x84>
 800e08a:	898a      	ldrh	r2, [r1, #12]
 800e08c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e090:	d032      	beq.n	800e0f8 <__ssputs_r+0x80>
 800e092:	6825      	ldr	r5, [r4, #0]
 800e094:	6909      	ldr	r1, [r1, #16]
 800e096:	eba5 0901 	sub.w	r9, r5, r1
 800e09a:	6965      	ldr	r5, [r4, #20]
 800e09c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	444b      	add	r3, r9
 800e0a8:	106d      	asrs	r5, r5, #1
 800e0aa:	429d      	cmp	r5, r3
 800e0ac:	bf38      	it	cc
 800e0ae:	461d      	movcc	r5, r3
 800e0b0:	0553      	lsls	r3, r2, #21
 800e0b2:	d531      	bpl.n	800e118 <__ssputs_r+0xa0>
 800e0b4:	4629      	mov	r1, r5
 800e0b6:	f7fd fc73 	bl	800b9a0 <_malloc_r>
 800e0ba:	4606      	mov	r6, r0
 800e0bc:	b950      	cbnz	r0, 800e0d4 <__ssputs_r+0x5c>
 800e0be:	230c      	movs	r3, #12
 800e0c0:	f8ca 3000 	str.w	r3, [sl]
 800e0c4:	89a3      	ldrh	r3, [r4, #12]
 800e0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0ca:	81a3      	strh	r3, [r4, #12]
 800e0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0d4:	6921      	ldr	r1, [r4, #16]
 800e0d6:	464a      	mov	r2, r9
 800e0d8:	f7ff fc1a 	bl	800d910 <memcpy>
 800e0dc:	89a3      	ldrh	r3, [r4, #12]
 800e0de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0e6:	81a3      	strh	r3, [r4, #12]
 800e0e8:	6126      	str	r6, [r4, #16]
 800e0ea:	6165      	str	r5, [r4, #20]
 800e0ec:	444e      	add	r6, r9
 800e0ee:	eba5 0509 	sub.w	r5, r5, r9
 800e0f2:	6026      	str	r6, [r4, #0]
 800e0f4:	60a5      	str	r5, [r4, #8]
 800e0f6:	463e      	mov	r6, r7
 800e0f8:	42be      	cmp	r6, r7
 800e0fa:	d900      	bls.n	800e0fe <__ssputs_r+0x86>
 800e0fc:	463e      	mov	r6, r7
 800e0fe:	6820      	ldr	r0, [r4, #0]
 800e100:	4632      	mov	r2, r6
 800e102:	4641      	mov	r1, r8
 800e104:	f001 f996 	bl	800f434 <memmove>
 800e108:	68a3      	ldr	r3, [r4, #8]
 800e10a:	1b9b      	subs	r3, r3, r6
 800e10c:	60a3      	str	r3, [r4, #8]
 800e10e:	6823      	ldr	r3, [r4, #0]
 800e110:	4433      	add	r3, r6
 800e112:	6023      	str	r3, [r4, #0]
 800e114:	2000      	movs	r0, #0
 800e116:	e7db      	b.n	800e0d0 <__ssputs_r+0x58>
 800e118:	462a      	mov	r2, r5
 800e11a:	f001 f9a5 	bl	800f468 <_realloc_r>
 800e11e:	4606      	mov	r6, r0
 800e120:	2800      	cmp	r0, #0
 800e122:	d1e1      	bne.n	800e0e8 <__ssputs_r+0x70>
 800e124:	6921      	ldr	r1, [r4, #16]
 800e126:	4650      	mov	r0, sl
 800e128:	f7fd fbce 	bl	800b8c8 <_free_r>
 800e12c:	e7c7      	b.n	800e0be <__ssputs_r+0x46>
	...

0800e130 <_svfiprintf_r>:
 800e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e134:	4698      	mov	r8, r3
 800e136:	898b      	ldrh	r3, [r1, #12]
 800e138:	061b      	lsls	r3, r3, #24
 800e13a:	b09d      	sub	sp, #116	; 0x74
 800e13c:	4607      	mov	r7, r0
 800e13e:	460d      	mov	r5, r1
 800e140:	4614      	mov	r4, r2
 800e142:	d50e      	bpl.n	800e162 <_svfiprintf_r+0x32>
 800e144:	690b      	ldr	r3, [r1, #16]
 800e146:	b963      	cbnz	r3, 800e162 <_svfiprintf_r+0x32>
 800e148:	2140      	movs	r1, #64	; 0x40
 800e14a:	f7fd fc29 	bl	800b9a0 <_malloc_r>
 800e14e:	6028      	str	r0, [r5, #0]
 800e150:	6128      	str	r0, [r5, #16]
 800e152:	b920      	cbnz	r0, 800e15e <_svfiprintf_r+0x2e>
 800e154:	230c      	movs	r3, #12
 800e156:	603b      	str	r3, [r7, #0]
 800e158:	f04f 30ff 	mov.w	r0, #4294967295
 800e15c:	e0d1      	b.n	800e302 <_svfiprintf_r+0x1d2>
 800e15e:	2340      	movs	r3, #64	; 0x40
 800e160:	616b      	str	r3, [r5, #20]
 800e162:	2300      	movs	r3, #0
 800e164:	9309      	str	r3, [sp, #36]	; 0x24
 800e166:	2320      	movs	r3, #32
 800e168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e16c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e170:	2330      	movs	r3, #48	; 0x30
 800e172:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e31c <_svfiprintf_r+0x1ec>
 800e176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e17a:	f04f 0901 	mov.w	r9, #1
 800e17e:	4623      	mov	r3, r4
 800e180:	469a      	mov	sl, r3
 800e182:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e186:	b10a      	cbz	r2, 800e18c <_svfiprintf_r+0x5c>
 800e188:	2a25      	cmp	r2, #37	; 0x25
 800e18a:	d1f9      	bne.n	800e180 <_svfiprintf_r+0x50>
 800e18c:	ebba 0b04 	subs.w	fp, sl, r4
 800e190:	d00b      	beq.n	800e1aa <_svfiprintf_r+0x7a>
 800e192:	465b      	mov	r3, fp
 800e194:	4622      	mov	r2, r4
 800e196:	4629      	mov	r1, r5
 800e198:	4638      	mov	r0, r7
 800e19a:	f7ff ff6d 	bl	800e078 <__ssputs_r>
 800e19e:	3001      	adds	r0, #1
 800e1a0:	f000 80aa 	beq.w	800e2f8 <_svfiprintf_r+0x1c8>
 800e1a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1a6:	445a      	add	r2, fp
 800e1a8:	9209      	str	r2, [sp, #36]	; 0x24
 800e1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f000 80a2 	beq.w	800e2f8 <_svfiprintf_r+0x1c8>
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1be:	f10a 0a01 	add.w	sl, sl, #1
 800e1c2:	9304      	str	r3, [sp, #16]
 800e1c4:	9307      	str	r3, [sp, #28]
 800e1c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1ca:	931a      	str	r3, [sp, #104]	; 0x68
 800e1cc:	4654      	mov	r4, sl
 800e1ce:	2205      	movs	r2, #5
 800e1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d4:	4851      	ldr	r0, [pc, #324]	; (800e31c <_svfiprintf_r+0x1ec>)
 800e1d6:	f7f2 f81b 	bl	8000210 <memchr>
 800e1da:	9a04      	ldr	r2, [sp, #16]
 800e1dc:	b9d8      	cbnz	r0, 800e216 <_svfiprintf_r+0xe6>
 800e1de:	06d0      	lsls	r0, r2, #27
 800e1e0:	bf44      	itt	mi
 800e1e2:	2320      	movmi	r3, #32
 800e1e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1e8:	0711      	lsls	r1, r2, #28
 800e1ea:	bf44      	itt	mi
 800e1ec:	232b      	movmi	r3, #43	; 0x2b
 800e1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f8:	d015      	beq.n	800e226 <_svfiprintf_r+0xf6>
 800e1fa:	9a07      	ldr	r2, [sp, #28]
 800e1fc:	4654      	mov	r4, sl
 800e1fe:	2000      	movs	r0, #0
 800e200:	f04f 0c0a 	mov.w	ip, #10
 800e204:	4621      	mov	r1, r4
 800e206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e20a:	3b30      	subs	r3, #48	; 0x30
 800e20c:	2b09      	cmp	r3, #9
 800e20e:	d94e      	bls.n	800e2ae <_svfiprintf_r+0x17e>
 800e210:	b1b0      	cbz	r0, 800e240 <_svfiprintf_r+0x110>
 800e212:	9207      	str	r2, [sp, #28]
 800e214:	e014      	b.n	800e240 <_svfiprintf_r+0x110>
 800e216:	eba0 0308 	sub.w	r3, r0, r8
 800e21a:	fa09 f303 	lsl.w	r3, r9, r3
 800e21e:	4313      	orrs	r3, r2
 800e220:	9304      	str	r3, [sp, #16]
 800e222:	46a2      	mov	sl, r4
 800e224:	e7d2      	b.n	800e1cc <_svfiprintf_r+0x9c>
 800e226:	9b03      	ldr	r3, [sp, #12]
 800e228:	1d19      	adds	r1, r3, #4
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	9103      	str	r1, [sp, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	bfbb      	ittet	lt
 800e232:	425b      	neglt	r3, r3
 800e234:	f042 0202 	orrlt.w	r2, r2, #2
 800e238:	9307      	strge	r3, [sp, #28]
 800e23a:	9307      	strlt	r3, [sp, #28]
 800e23c:	bfb8      	it	lt
 800e23e:	9204      	strlt	r2, [sp, #16]
 800e240:	7823      	ldrb	r3, [r4, #0]
 800e242:	2b2e      	cmp	r3, #46	; 0x2e
 800e244:	d10c      	bne.n	800e260 <_svfiprintf_r+0x130>
 800e246:	7863      	ldrb	r3, [r4, #1]
 800e248:	2b2a      	cmp	r3, #42	; 0x2a
 800e24a:	d135      	bne.n	800e2b8 <_svfiprintf_r+0x188>
 800e24c:	9b03      	ldr	r3, [sp, #12]
 800e24e:	1d1a      	adds	r2, r3, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	9203      	str	r2, [sp, #12]
 800e254:	2b00      	cmp	r3, #0
 800e256:	bfb8      	it	lt
 800e258:	f04f 33ff 	movlt.w	r3, #4294967295
 800e25c:	3402      	adds	r4, #2
 800e25e:	9305      	str	r3, [sp, #20]
 800e260:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e32c <_svfiprintf_r+0x1fc>
 800e264:	7821      	ldrb	r1, [r4, #0]
 800e266:	2203      	movs	r2, #3
 800e268:	4650      	mov	r0, sl
 800e26a:	f7f1 ffd1 	bl	8000210 <memchr>
 800e26e:	b140      	cbz	r0, 800e282 <_svfiprintf_r+0x152>
 800e270:	2340      	movs	r3, #64	; 0x40
 800e272:	eba0 000a 	sub.w	r0, r0, sl
 800e276:	fa03 f000 	lsl.w	r0, r3, r0
 800e27a:	9b04      	ldr	r3, [sp, #16]
 800e27c:	4303      	orrs	r3, r0
 800e27e:	3401      	adds	r4, #1
 800e280:	9304      	str	r3, [sp, #16]
 800e282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e286:	4826      	ldr	r0, [pc, #152]	; (800e320 <_svfiprintf_r+0x1f0>)
 800e288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e28c:	2206      	movs	r2, #6
 800e28e:	f7f1 ffbf 	bl	8000210 <memchr>
 800e292:	2800      	cmp	r0, #0
 800e294:	d038      	beq.n	800e308 <_svfiprintf_r+0x1d8>
 800e296:	4b23      	ldr	r3, [pc, #140]	; (800e324 <_svfiprintf_r+0x1f4>)
 800e298:	bb1b      	cbnz	r3, 800e2e2 <_svfiprintf_r+0x1b2>
 800e29a:	9b03      	ldr	r3, [sp, #12]
 800e29c:	3307      	adds	r3, #7
 800e29e:	f023 0307 	bic.w	r3, r3, #7
 800e2a2:	3308      	adds	r3, #8
 800e2a4:	9303      	str	r3, [sp, #12]
 800e2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2a8:	4433      	add	r3, r6
 800e2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ac:	e767      	b.n	800e17e <_svfiprintf_r+0x4e>
 800e2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	2001      	movs	r0, #1
 800e2b6:	e7a5      	b.n	800e204 <_svfiprintf_r+0xd4>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	3401      	adds	r4, #1
 800e2bc:	9305      	str	r3, [sp, #20]
 800e2be:	4619      	mov	r1, r3
 800e2c0:	f04f 0c0a 	mov.w	ip, #10
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2ca:	3a30      	subs	r2, #48	; 0x30
 800e2cc:	2a09      	cmp	r2, #9
 800e2ce:	d903      	bls.n	800e2d8 <_svfiprintf_r+0x1a8>
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d0c5      	beq.n	800e260 <_svfiprintf_r+0x130>
 800e2d4:	9105      	str	r1, [sp, #20]
 800e2d6:	e7c3      	b.n	800e260 <_svfiprintf_r+0x130>
 800e2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2dc:	4604      	mov	r4, r0
 800e2de:	2301      	movs	r3, #1
 800e2e0:	e7f0      	b.n	800e2c4 <_svfiprintf_r+0x194>
 800e2e2:	ab03      	add	r3, sp, #12
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	462a      	mov	r2, r5
 800e2e8:	4b0f      	ldr	r3, [pc, #60]	; (800e328 <_svfiprintf_r+0x1f8>)
 800e2ea:	a904      	add	r1, sp, #16
 800e2ec:	4638      	mov	r0, r7
 800e2ee:	f7fd fc6b 	bl	800bbc8 <_printf_float>
 800e2f2:	1c42      	adds	r2, r0, #1
 800e2f4:	4606      	mov	r6, r0
 800e2f6:	d1d6      	bne.n	800e2a6 <_svfiprintf_r+0x176>
 800e2f8:	89ab      	ldrh	r3, [r5, #12]
 800e2fa:	065b      	lsls	r3, r3, #25
 800e2fc:	f53f af2c 	bmi.w	800e158 <_svfiprintf_r+0x28>
 800e300:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e302:	b01d      	add	sp, #116	; 0x74
 800e304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e308:	ab03      	add	r3, sp, #12
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	462a      	mov	r2, r5
 800e30e:	4b06      	ldr	r3, [pc, #24]	; (800e328 <_svfiprintf_r+0x1f8>)
 800e310:	a904      	add	r1, sp, #16
 800e312:	4638      	mov	r0, r7
 800e314:	f7fd fefc 	bl	800c110 <_printf_i>
 800e318:	e7eb      	b.n	800e2f2 <_svfiprintf_r+0x1c2>
 800e31a:	bf00      	nop
 800e31c:	0801137c 	.word	0x0801137c
 800e320:	08011386 	.word	0x08011386
 800e324:	0800bbc9 	.word	0x0800bbc9
 800e328:	0800e079 	.word	0x0800e079
 800e32c:	08011382 	.word	0x08011382

0800e330 <_sungetc_r>:
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	1c4b      	adds	r3, r1, #1
 800e334:	4614      	mov	r4, r2
 800e336:	d103      	bne.n	800e340 <_sungetc_r+0x10>
 800e338:	f04f 35ff 	mov.w	r5, #4294967295
 800e33c:	4628      	mov	r0, r5
 800e33e:	bd38      	pop	{r3, r4, r5, pc}
 800e340:	8993      	ldrh	r3, [r2, #12]
 800e342:	f023 0320 	bic.w	r3, r3, #32
 800e346:	8193      	strh	r3, [r2, #12]
 800e348:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e34a:	6852      	ldr	r2, [r2, #4]
 800e34c:	b2cd      	uxtb	r5, r1
 800e34e:	b18b      	cbz	r3, 800e374 <_sungetc_r+0x44>
 800e350:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e352:	4293      	cmp	r3, r2
 800e354:	dd08      	ble.n	800e368 <_sungetc_r+0x38>
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	1e5a      	subs	r2, r3, #1
 800e35a:	6022      	str	r2, [r4, #0]
 800e35c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e360:	6863      	ldr	r3, [r4, #4]
 800e362:	3301      	adds	r3, #1
 800e364:	6063      	str	r3, [r4, #4]
 800e366:	e7e9      	b.n	800e33c <_sungetc_r+0xc>
 800e368:	4621      	mov	r1, r4
 800e36a:	f000 fd27 	bl	800edbc <__submore>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d0f1      	beq.n	800e356 <_sungetc_r+0x26>
 800e372:	e7e1      	b.n	800e338 <_sungetc_r+0x8>
 800e374:	6921      	ldr	r1, [r4, #16]
 800e376:	6823      	ldr	r3, [r4, #0]
 800e378:	b151      	cbz	r1, 800e390 <_sungetc_r+0x60>
 800e37a:	4299      	cmp	r1, r3
 800e37c:	d208      	bcs.n	800e390 <_sungetc_r+0x60>
 800e37e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e382:	42a9      	cmp	r1, r5
 800e384:	d104      	bne.n	800e390 <_sungetc_r+0x60>
 800e386:	3b01      	subs	r3, #1
 800e388:	3201      	adds	r2, #1
 800e38a:	6023      	str	r3, [r4, #0]
 800e38c:	6062      	str	r2, [r4, #4]
 800e38e:	e7d5      	b.n	800e33c <_sungetc_r+0xc>
 800e390:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e398:	6363      	str	r3, [r4, #52]	; 0x34
 800e39a:	2303      	movs	r3, #3
 800e39c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e39e:	4623      	mov	r3, r4
 800e3a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e3a4:	6023      	str	r3, [r4, #0]
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e7dc      	b.n	800e364 <_sungetc_r+0x34>

0800e3aa <__ssrefill_r>:
 800e3aa:	b510      	push	{r4, lr}
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e3b0:	b169      	cbz	r1, 800e3ce <__ssrefill_r+0x24>
 800e3b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3b6:	4299      	cmp	r1, r3
 800e3b8:	d001      	beq.n	800e3be <__ssrefill_r+0x14>
 800e3ba:	f7fd fa85 	bl	800b8c8 <_free_r>
 800e3be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3c0:	6063      	str	r3, [r4, #4]
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	6360      	str	r0, [r4, #52]	; 0x34
 800e3c6:	b113      	cbz	r3, 800e3ce <__ssrefill_r+0x24>
 800e3c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3ca:	6023      	str	r3, [r4, #0]
 800e3cc:	bd10      	pop	{r4, pc}
 800e3ce:	6923      	ldr	r3, [r4, #16]
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	6063      	str	r3, [r4, #4]
 800e3d6:	89a3      	ldrh	r3, [r4, #12]
 800e3d8:	f043 0320 	orr.w	r3, r3, #32
 800e3dc:	81a3      	strh	r3, [r4, #12]
 800e3de:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e2:	e7f3      	b.n	800e3cc <__ssrefill_r+0x22>

0800e3e4 <__ssvfiscanf_r>:
 800e3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e8:	460c      	mov	r4, r1
 800e3ea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e3f4:	49a6      	ldr	r1, [pc, #664]	; (800e690 <__ssvfiscanf_r+0x2ac>)
 800e3f6:	91a0      	str	r1, [sp, #640]	; 0x280
 800e3f8:	f10d 0804 	add.w	r8, sp, #4
 800e3fc:	49a5      	ldr	r1, [pc, #660]	; (800e694 <__ssvfiscanf_r+0x2b0>)
 800e3fe:	4fa6      	ldr	r7, [pc, #664]	; (800e698 <__ssvfiscanf_r+0x2b4>)
 800e400:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e69c <__ssvfiscanf_r+0x2b8>
 800e404:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e408:	4606      	mov	r6, r0
 800e40a:	91a1      	str	r1, [sp, #644]	; 0x284
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	7813      	ldrb	r3, [r2, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	f000 815a 	beq.w	800e6ca <__ssvfiscanf_r+0x2e6>
 800e416:	5dd9      	ldrb	r1, [r3, r7]
 800e418:	f011 0108 	ands.w	r1, r1, #8
 800e41c:	f102 0501 	add.w	r5, r2, #1
 800e420:	d019      	beq.n	800e456 <__ssvfiscanf_r+0x72>
 800e422:	6863      	ldr	r3, [r4, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	dd0f      	ble.n	800e448 <__ssvfiscanf_r+0x64>
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	781a      	ldrb	r2, [r3, #0]
 800e42c:	5cba      	ldrb	r2, [r7, r2]
 800e42e:	0712      	lsls	r2, r2, #28
 800e430:	d401      	bmi.n	800e436 <__ssvfiscanf_r+0x52>
 800e432:	462a      	mov	r2, r5
 800e434:	e7eb      	b.n	800e40e <__ssvfiscanf_r+0x2a>
 800e436:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e438:	3201      	adds	r2, #1
 800e43a:	9245      	str	r2, [sp, #276]	; 0x114
 800e43c:	6862      	ldr	r2, [r4, #4]
 800e43e:	3301      	adds	r3, #1
 800e440:	3a01      	subs	r2, #1
 800e442:	6062      	str	r2, [r4, #4]
 800e444:	6023      	str	r3, [r4, #0]
 800e446:	e7ec      	b.n	800e422 <__ssvfiscanf_r+0x3e>
 800e448:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e44a:	4621      	mov	r1, r4
 800e44c:	4630      	mov	r0, r6
 800e44e:	4798      	blx	r3
 800e450:	2800      	cmp	r0, #0
 800e452:	d0e9      	beq.n	800e428 <__ssvfiscanf_r+0x44>
 800e454:	e7ed      	b.n	800e432 <__ssvfiscanf_r+0x4e>
 800e456:	2b25      	cmp	r3, #37	; 0x25
 800e458:	d012      	beq.n	800e480 <__ssvfiscanf_r+0x9c>
 800e45a:	469a      	mov	sl, r3
 800e45c:	6863      	ldr	r3, [r4, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f340 8091 	ble.w	800e586 <__ssvfiscanf_r+0x1a2>
 800e464:	6822      	ldr	r2, [r4, #0]
 800e466:	7813      	ldrb	r3, [r2, #0]
 800e468:	4553      	cmp	r3, sl
 800e46a:	f040 812e 	bne.w	800e6ca <__ssvfiscanf_r+0x2e6>
 800e46e:	6863      	ldr	r3, [r4, #4]
 800e470:	3b01      	subs	r3, #1
 800e472:	6063      	str	r3, [r4, #4]
 800e474:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e476:	3201      	adds	r2, #1
 800e478:	3301      	adds	r3, #1
 800e47a:	6022      	str	r2, [r4, #0]
 800e47c:	9345      	str	r3, [sp, #276]	; 0x114
 800e47e:	e7d8      	b.n	800e432 <__ssvfiscanf_r+0x4e>
 800e480:	9141      	str	r1, [sp, #260]	; 0x104
 800e482:	9143      	str	r1, [sp, #268]	; 0x10c
 800e484:	7853      	ldrb	r3, [r2, #1]
 800e486:	2b2a      	cmp	r3, #42	; 0x2a
 800e488:	bf02      	ittt	eq
 800e48a:	2310      	moveq	r3, #16
 800e48c:	1c95      	addeq	r5, r2, #2
 800e48e:	9341      	streq	r3, [sp, #260]	; 0x104
 800e490:	220a      	movs	r2, #10
 800e492:	46aa      	mov	sl, r5
 800e494:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e498:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e49c:	2b09      	cmp	r3, #9
 800e49e:	d91d      	bls.n	800e4dc <__ssvfiscanf_r+0xf8>
 800e4a0:	487e      	ldr	r0, [pc, #504]	; (800e69c <__ssvfiscanf_r+0x2b8>)
 800e4a2:	2203      	movs	r2, #3
 800e4a4:	f7f1 feb4 	bl	8000210 <memchr>
 800e4a8:	b140      	cbz	r0, 800e4bc <__ssvfiscanf_r+0xd8>
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	eba0 0009 	sub.w	r0, r0, r9
 800e4b0:	fa03 f000 	lsl.w	r0, r3, r0
 800e4b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e4b6:	4318      	orrs	r0, r3
 800e4b8:	9041      	str	r0, [sp, #260]	; 0x104
 800e4ba:	4655      	mov	r5, sl
 800e4bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e4c0:	2b78      	cmp	r3, #120	; 0x78
 800e4c2:	d806      	bhi.n	800e4d2 <__ssvfiscanf_r+0xee>
 800e4c4:	2b57      	cmp	r3, #87	; 0x57
 800e4c6:	d810      	bhi.n	800e4ea <__ssvfiscanf_r+0x106>
 800e4c8:	2b25      	cmp	r3, #37	; 0x25
 800e4ca:	d0c6      	beq.n	800e45a <__ssvfiscanf_r+0x76>
 800e4cc:	d856      	bhi.n	800e57c <__ssvfiscanf_r+0x198>
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d064      	beq.n	800e59c <__ssvfiscanf_r+0x1b8>
 800e4d2:	2303      	movs	r3, #3
 800e4d4:	9347      	str	r3, [sp, #284]	; 0x11c
 800e4d6:	230a      	movs	r3, #10
 800e4d8:	9342      	str	r3, [sp, #264]	; 0x108
 800e4da:	e071      	b.n	800e5c0 <__ssvfiscanf_r+0x1dc>
 800e4dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e4de:	fb02 1103 	mla	r1, r2, r3, r1
 800e4e2:	3930      	subs	r1, #48	; 0x30
 800e4e4:	9143      	str	r1, [sp, #268]	; 0x10c
 800e4e6:	4655      	mov	r5, sl
 800e4e8:	e7d3      	b.n	800e492 <__ssvfiscanf_r+0xae>
 800e4ea:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e4ee:	2a20      	cmp	r2, #32
 800e4f0:	d8ef      	bhi.n	800e4d2 <__ssvfiscanf_r+0xee>
 800e4f2:	a101      	add	r1, pc, #4	; (adr r1, 800e4f8 <__ssvfiscanf_r+0x114>)
 800e4f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e4f8:	0800e5ab 	.word	0x0800e5ab
 800e4fc:	0800e4d3 	.word	0x0800e4d3
 800e500:	0800e4d3 	.word	0x0800e4d3
 800e504:	0800e609 	.word	0x0800e609
 800e508:	0800e4d3 	.word	0x0800e4d3
 800e50c:	0800e4d3 	.word	0x0800e4d3
 800e510:	0800e4d3 	.word	0x0800e4d3
 800e514:	0800e4d3 	.word	0x0800e4d3
 800e518:	0800e4d3 	.word	0x0800e4d3
 800e51c:	0800e4d3 	.word	0x0800e4d3
 800e520:	0800e4d3 	.word	0x0800e4d3
 800e524:	0800e61f 	.word	0x0800e61f
 800e528:	0800e5f5 	.word	0x0800e5f5
 800e52c:	0800e583 	.word	0x0800e583
 800e530:	0800e583 	.word	0x0800e583
 800e534:	0800e583 	.word	0x0800e583
 800e538:	0800e4d3 	.word	0x0800e4d3
 800e53c:	0800e5f9 	.word	0x0800e5f9
 800e540:	0800e4d3 	.word	0x0800e4d3
 800e544:	0800e4d3 	.word	0x0800e4d3
 800e548:	0800e4d3 	.word	0x0800e4d3
 800e54c:	0800e4d3 	.word	0x0800e4d3
 800e550:	0800e62f 	.word	0x0800e62f
 800e554:	0800e601 	.word	0x0800e601
 800e558:	0800e5a3 	.word	0x0800e5a3
 800e55c:	0800e4d3 	.word	0x0800e4d3
 800e560:	0800e4d3 	.word	0x0800e4d3
 800e564:	0800e62b 	.word	0x0800e62b
 800e568:	0800e4d3 	.word	0x0800e4d3
 800e56c:	0800e5f5 	.word	0x0800e5f5
 800e570:	0800e4d3 	.word	0x0800e4d3
 800e574:	0800e4d3 	.word	0x0800e4d3
 800e578:	0800e5ab 	.word	0x0800e5ab
 800e57c:	3b45      	subs	r3, #69	; 0x45
 800e57e:	2b02      	cmp	r3, #2
 800e580:	d8a7      	bhi.n	800e4d2 <__ssvfiscanf_r+0xee>
 800e582:	2305      	movs	r3, #5
 800e584:	e01b      	b.n	800e5be <__ssvfiscanf_r+0x1da>
 800e586:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e588:	4621      	mov	r1, r4
 800e58a:	4630      	mov	r0, r6
 800e58c:	4798      	blx	r3
 800e58e:	2800      	cmp	r0, #0
 800e590:	f43f af68 	beq.w	800e464 <__ssvfiscanf_r+0x80>
 800e594:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e596:	2800      	cmp	r0, #0
 800e598:	f040 808d 	bne.w	800e6b6 <__ssvfiscanf_r+0x2d2>
 800e59c:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a0:	e08f      	b.n	800e6c2 <__ssvfiscanf_r+0x2de>
 800e5a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e5a4:	f042 0220 	orr.w	r2, r2, #32
 800e5a8:	9241      	str	r2, [sp, #260]	; 0x104
 800e5aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e5ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5b0:	9241      	str	r2, [sp, #260]	; 0x104
 800e5b2:	2210      	movs	r2, #16
 800e5b4:	2b6f      	cmp	r3, #111	; 0x6f
 800e5b6:	9242      	str	r2, [sp, #264]	; 0x108
 800e5b8:	bf34      	ite	cc
 800e5ba:	2303      	movcc	r3, #3
 800e5bc:	2304      	movcs	r3, #4
 800e5be:	9347      	str	r3, [sp, #284]	; 0x11c
 800e5c0:	6863      	ldr	r3, [r4, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	dd42      	ble.n	800e64c <__ssvfiscanf_r+0x268>
 800e5c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5c8:	0659      	lsls	r1, r3, #25
 800e5ca:	d404      	bmi.n	800e5d6 <__ssvfiscanf_r+0x1f2>
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	781a      	ldrb	r2, [r3, #0]
 800e5d0:	5cba      	ldrb	r2, [r7, r2]
 800e5d2:	0712      	lsls	r2, r2, #28
 800e5d4:	d441      	bmi.n	800e65a <__ssvfiscanf_r+0x276>
 800e5d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e5d8:	2b02      	cmp	r3, #2
 800e5da:	dc50      	bgt.n	800e67e <__ssvfiscanf_r+0x29a>
 800e5dc:	466b      	mov	r3, sp
 800e5de:	4622      	mov	r2, r4
 800e5e0:	a941      	add	r1, sp, #260	; 0x104
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	f000 f9d0 	bl	800e988 <_scanf_chars>
 800e5e8:	2801      	cmp	r0, #1
 800e5ea:	d06e      	beq.n	800e6ca <__ssvfiscanf_r+0x2e6>
 800e5ec:	2802      	cmp	r0, #2
 800e5ee:	f47f af20 	bne.w	800e432 <__ssvfiscanf_r+0x4e>
 800e5f2:	e7cf      	b.n	800e594 <__ssvfiscanf_r+0x1b0>
 800e5f4:	220a      	movs	r2, #10
 800e5f6:	e7dd      	b.n	800e5b4 <__ssvfiscanf_r+0x1d0>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	9342      	str	r3, [sp, #264]	; 0x108
 800e5fc:	2303      	movs	r3, #3
 800e5fe:	e7de      	b.n	800e5be <__ssvfiscanf_r+0x1da>
 800e600:	2308      	movs	r3, #8
 800e602:	9342      	str	r3, [sp, #264]	; 0x108
 800e604:	2304      	movs	r3, #4
 800e606:	e7da      	b.n	800e5be <__ssvfiscanf_r+0x1da>
 800e608:	4629      	mov	r1, r5
 800e60a:	4640      	mov	r0, r8
 800e60c:	f000 fb20 	bl	800ec50 <__sccl>
 800e610:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e616:	9341      	str	r3, [sp, #260]	; 0x104
 800e618:	4605      	mov	r5, r0
 800e61a:	2301      	movs	r3, #1
 800e61c:	e7cf      	b.n	800e5be <__ssvfiscanf_r+0x1da>
 800e61e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e624:	9341      	str	r3, [sp, #260]	; 0x104
 800e626:	2300      	movs	r3, #0
 800e628:	e7c9      	b.n	800e5be <__ssvfiscanf_r+0x1da>
 800e62a:	2302      	movs	r3, #2
 800e62c:	e7c7      	b.n	800e5be <__ssvfiscanf_r+0x1da>
 800e62e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e630:	06c3      	lsls	r3, r0, #27
 800e632:	f53f aefe 	bmi.w	800e432 <__ssvfiscanf_r+0x4e>
 800e636:	9b00      	ldr	r3, [sp, #0]
 800e638:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e63a:	1d19      	adds	r1, r3, #4
 800e63c:	9100      	str	r1, [sp, #0]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f010 0f01 	tst.w	r0, #1
 800e644:	bf14      	ite	ne
 800e646:	801a      	strhne	r2, [r3, #0]
 800e648:	601a      	streq	r2, [r3, #0]
 800e64a:	e6f2      	b.n	800e432 <__ssvfiscanf_r+0x4e>
 800e64c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e64e:	4621      	mov	r1, r4
 800e650:	4630      	mov	r0, r6
 800e652:	4798      	blx	r3
 800e654:	2800      	cmp	r0, #0
 800e656:	d0b6      	beq.n	800e5c6 <__ssvfiscanf_r+0x1e2>
 800e658:	e79c      	b.n	800e594 <__ssvfiscanf_r+0x1b0>
 800e65a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e65c:	3201      	adds	r2, #1
 800e65e:	9245      	str	r2, [sp, #276]	; 0x114
 800e660:	6862      	ldr	r2, [r4, #4]
 800e662:	3a01      	subs	r2, #1
 800e664:	2a00      	cmp	r2, #0
 800e666:	6062      	str	r2, [r4, #4]
 800e668:	dd02      	ble.n	800e670 <__ssvfiscanf_r+0x28c>
 800e66a:	3301      	adds	r3, #1
 800e66c:	6023      	str	r3, [r4, #0]
 800e66e:	e7ad      	b.n	800e5cc <__ssvfiscanf_r+0x1e8>
 800e670:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e672:	4621      	mov	r1, r4
 800e674:	4630      	mov	r0, r6
 800e676:	4798      	blx	r3
 800e678:	2800      	cmp	r0, #0
 800e67a:	d0a7      	beq.n	800e5cc <__ssvfiscanf_r+0x1e8>
 800e67c:	e78a      	b.n	800e594 <__ssvfiscanf_r+0x1b0>
 800e67e:	2b04      	cmp	r3, #4
 800e680:	dc0e      	bgt.n	800e6a0 <__ssvfiscanf_r+0x2bc>
 800e682:	466b      	mov	r3, sp
 800e684:	4622      	mov	r2, r4
 800e686:	a941      	add	r1, sp, #260	; 0x104
 800e688:	4630      	mov	r0, r6
 800e68a:	f000 f9d7 	bl	800ea3c <_scanf_i>
 800e68e:	e7ab      	b.n	800e5e8 <__ssvfiscanf_r+0x204>
 800e690:	0800e331 	.word	0x0800e331
 800e694:	0800e3ab 	.word	0x0800e3ab
 800e698:	08011047 	.word	0x08011047
 800e69c:	08011382 	.word	0x08011382
 800e6a0:	4b0b      	ldr	r3, [pc, #44]	; (800e6d0 <__ssvfiscanf_r+0x2ec>)
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f43f aec5 	beq.w	800e432 <__ssvfiscanf_r+0x4e>
 800e6a8:	466b      	mov	r3, sp
 800e6aa:	4622      	mov	r2, r4
 800e6ac:	a941      	add	r1, sp, #260	; 0x104
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f3af 8000 	nop.w
 800e6b4:	e798      	b.n	800e5e8 <__ssvfiscanf_r+0x204>
 800e6b6:	89a3      	ldrh	r3, [r4, #12]
 800e6b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e6bc:	bf18      	it	ne
 800e6be:	f04f 30ff 	movne.w	r0, #4294967295
 800e6c2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e6cc:	e7f9      	b.n	800e6c2 <__ssvfiscanf_r+0x2de>
 800e6ce:	bf00      	nop
 800e6d0:	00000000 	.word	0x00000000

0800e6d4 <__sfputc_r>:
 800e6d4:	6893      	ldr	r3, [r2, #8]
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	b410      	push	{r4}
 800e6dc:	6093      	str	r3, [r2, #8]
 800e6de:	da08      	bge.n	800e6f2 <__sfputc_r+0x1e>
 800e6e0:	6994      	ldr	r4, [r2, #24]
 800e6e2:	42a3      	cmp	r3, r4
 800e6e4:	db01      	blt.n	800e6ea <__sfputc_r+0x16>
 800e6e6:	290a      	cmp	r1, #10
 800e6e8:	d103      	bne.n	800e6f2 <__sfputc_r+0x1e>
 800e6ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6ee:	f000 bb9f 	b.w	800ee30 <__swbuf_r>
 800e6f2:	6813      	ldr	r3, [r2, #0]
 800e6f4:	1c58      	adds	r0, r3, #1
 800e6f6:	6010      	str	r0, [r2, #0]
 800e6f8:	7019      	strb	r1, [r3, #0]
 800e6fa:	4608      	mov	r0, r1
 800e6fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <__sfputs_r>:
 800e702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e704:	4606      	mov	r6, r0
 800e706:	460f      	mov	r7, r1
 800e708:	4614      	mov	r4, r2
 800e70a:	18d5      	adds	r5, r2, r3
 800e70c:	42ac      	cmp	r4, r5
 800e70e:	d101      	bne.n	800e714 <__sfputs_r+0x12>
 800e710:	2000      	movs	r0, #0
 800e712:	e007      	b.n	800e724 <__sfputs_r+0x22>
 800e714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e718:	463a      	mov	r2, r7
 800e71a:	4630      	mov	r0, r6
 800e71c:	f7ff ffda 	bl	800e6d4 <__sfputc_r>
 800e720:	1c43      	adds	r3, r0, #1
 800e722:	d1f3      	bne.n	800e70c <__sfputs_r+0xa>
 800e724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e728 <_vfiprintf_r>:
 800e728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e72c:	460d      	mov	r5, r1
 800e72e:	b09d      	sub	sp, #116	; 0x74
 800e730:	4614      	mov	r4, r2
 800e732:	4698      	mov	r8, r3
 800e734:	4606      	mov	r6, r0
 800e736:	b118      	cbz	r0, 800e740 <_vfiprintf_r+0x18>
 800e738:	6983      	ldr	r3, [r0, #24]
 800e73a:	b90b      	cbnz	r3, 800e740 <_vfiprintf_r+0x18>
 800e73c:	f000 fd66 	bl	800f20c <__sinit>
 800e740:	4b89      	ldr	r3, [pc, #548]	; (800e968 <_vfiprintf_r+0x240>)
 800e742:	429d      	cmp	r5, r3
 800e744:	d11b      	bne.n	800e77e <_vfiprintf_r+0x56>
 800e746:	6875      	ldr	r5, [r6, #4]
 800e748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e74a:	07d9      	lsls	r1, r3, #31
 800e74c:	d405      	bmi.n	800e75a <_vfiprintf_r+0x32>
 800e74e:	89ab      	ldrh	r3, [r5, #12]
 800e750:	059a      	lsls	r2, r3, #22
 800e752:	d402      	bmi.n	800e75a <_vfiprintf_r+0x32>
 800e754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e756:	f7ff f8c5 	bl	800d8e4 <__retarget_lock_acquire_recursive>
 800e75a:	89ab      	ldrh	r3, [r5, #12]
 800e75c:	071b      	lsls	r3, r3, #28
 800e75e:	d501      	bpl.n	800e764 <_vfiprintf_r+0x3c>
 800e760:	692b      	ldr	r3, [r5, #16]
 800e762:	b9eb      	cbnz	r3, 800e7a0 <_vfiprintf_r+0x78>
 800e764:	4629      	mov	r1, r5
 800e766:	4630      	mov	r0, r6
 800e768:	f000 fbb4 	bl	800eed4 <__swsetup_r>
 800e76c:	b1c0      	cbz	r0, 800e7a0 <_vfiprintf_r+0x78>
 800e76e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e770:	07dc      	lsls	r4, r3, #31
 800e772:	d50e      	bpl.n	800e792 <_vfiprintf_r+0x6a>
 800e774:	f04f 30ff 	mov.w	r0, #4294967295
 800e778:	b01d      	add	sp, #116	; 0x74
 800e77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e77e:	4b7b      	ldr	r3, [pc, #492]	; (800e96c <_vfiprintf_r+0x244>)
 800e780:	429d      	cmp	r5, r3
 800e782:	d101      	bne.n	800e788 <_vfiprintf_r+0x60>
 800e784:	68b5      	ldr	r5, [r6, #8]
 800e786:	e7df      	b.n	800e748 <_vfiprintf_r+0x20>
 800e788:	4b79      	ldr	r3, [pc, #484]	; (800e970 <_vfiprintf_r+0x248>)
 800e78a:	429d      	cmp	r5, r3
 800e78c:	bf08      	it	eq
 800e78e:	68f5      	ldreq	r5, [r6, #12]
 800e790:	e7da      	b.n	800e748 <_vfiprintf_r+0x20>
 800e792:	89ab      	ldrh	r3, [r5, #12]
 800e794:	0598      	lsls	r0, r3, #22
 800e796:	d4ed      	bmi.n	800e774 <_vfiprintf_r+0x4c>
 800e798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e79a:	f7ff f8a5 	bl	800d8e8 <__retarget_lock_release_recursive>
 800e79e:	e7e9      	b.n	800e774 <_vfiprintf_r+0x4c>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e7a4:	2320      	movs	r3, #32
 800e7a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7ae:	2330      	movs	r3, #48	; 0x30
 800e7b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e974 <_vfiprintf_r+0x24c>
 800e7b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7b8:	f04f 0901 	mov.w	r9, #1
 800e7bc:	4623      	mov	r3, r4
 800e7be:	469a      	mov	sl, r3
 800e7c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7c4:	b10a      	cbz	r2, 800e7ca <_vfiprintf_r+0xa2>
 800e7c6:	2a25      	cmp	r2, #37	; 0x25
 800e7c8:	d1f9      	bne.n	800e7be <_vfiprintf_r+0x96>
 800e7ca:	ebba 0b04 	subs.w	fp, sl, r4
 800e7ce:	d00b      	beq.n	800e7e8 <_vfiprintf_r+0xc0>
 800e7d0:	465b      	mov	r3, fp
 800e7d2:	4622      	mov	r2, r4
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f7ff ff93 	bl	800e702 <__sfputs_r>
 800e7dc:	3001      	adds	r0, #1
 800e7de:	f000 80aa 	beq.w	800e936 <_vfiprintf_r+0x20e>
 800e7e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7e4:	445a      	add	r2, fp
 800e7e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e7e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	f000 80a2 	beq.w	800e936 <_vfiprintf_r+0x20e>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7fc:	f10a 0a01 	add.w	sl, sl, #1
 800e800:	9304      	str	r3, [sp, #16]
 800e802:	9307      	str	r3, [sp, #28]
 800e804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e808:	931a      	str	r3, [sp, #104]	; 0x68
 800e80a:	4654      	mov	r4, sl
 800e80c:	2205      	movs	r2, #5
 800e80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e812:	4858      	ldr	r0, [pc, #352]	; (800e974 <_vfiprintf_r+0x24c>)
 800e814:	f7f1 fcfc 	bl	8000210 <memchr>
 800e818:	9a04      	ldr	r2, [sp, #16]
 800e81a:	b9d8      	cbnz	r0, 800e854 <_vfiprintf_r+0x12c>
 800e81c:	06d1      	lsls	r1, r2, #27
 800e81e:	bf44      	itt	mi
 800e820:	2320      	movmi	r3, #32
 800e822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e826:	0713      	lsls	r3, r2, #28
 800e828:	bf44      	itt	mi
 800e82a:	232b      	movmi	r3, #43	; 0x2b
 800e82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e830:	f89a 3000 	ldrb.w	r3, [sl]
 800e834:	2b2a      	cmp	r3, #42	; 0x2a
 800e836:	d015      	beq.n	800e864 <_vfiprintf_r+0x13c>
 800e838:	9a07      	ldr	r2, [sp, #28]
 800e83a:	4654      	mov	r4, sl
 800e83c:	2000      	movs	r0, #0
 800e83e:	f04f 0c0a 	mov.w	ip, #10
 800e842:	4621      	mov	r1, r4
 800e844:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e848:	3b30      	subs	r3, #48	; 0x30
 800e84a:	2b09      	cmp	r3, #9
 800e84c:	d94e      	bls.n	800e8ec <_vfiprintf_r+0x1c4>
 800e84e:	b1b0      	cbz	r0, 800e87e <_vfiprintf_r+0x156>
 800e850:	9207      	str	r2, [sp, #28]
 800e852:	e014      	b.n	800e87e <_vfiprintf_r+0x156>
 800e854:	eba0 0308 	sub.w	r3, r0, r8
 800e858:	fa09 f303 	lsl.w	r3, r9, r3
 800e85c:	4313      	orrs	r3, r2
 800e85e:	9304      	str	r3, [sp, #16]
 800e860:	46a2      	mov	sl, r4
 800e862:	e7d2      	b.n	800e80a <_vfiprintf_r+0xe2>
 800e864:	9b03      	ldr	r3, [sp, #12]
 800e866:	1d19      	adds	r1, r3, #4
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	9103      	str	r1, [sp, #12]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	bfbb      	ittet	lt
 800e870:	425b      	neglt	r3, r3
 800e872:	f042 0202 	orrlt.w	r2, r2, #2
 800e876:	9307      	strge	r3, [sp, #28]
 800e878:	9307      	strlt	r3, [sp, #28]
 800e87a:	bfb8      	it	lt
 800e87c:	9204      	strlt	r2, [sp, #16]
 800e87e:	7823      	ldrb	r3, [r4, #0]
 800e880:	2b2e      	cmp	r3, #46	; 0x2e
 800e882:	d10c      	bne.n	800e89e <_vfiprintf_r+0x176>
 800e884:	7863      	ldrb	r3, [r4, #1]
 800e886:	2b2a      	cmp	r3, #42	; 0x2a
 800e888:	d135      	bne.n	800e8f6 <_vfiprintf_r+0x1ce>
 800e88a:	9b03      	ldr	r3, [sp, #12]
 800e88c:	1d1a      	adds	r2, r3, #4
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	9203      	str	r2, [sp, #12]
 800e892:	2b00      	cmp	r3, #0
 800e894:	bfb8      	it	lt
 800e896:	f04f 33ff 	movlt.w	r3, #4294967295
 800e89a:	3402      	adds	r4, #2
 800e89c:	9305      	str	r3, [sp, #20]
 800e89e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e984 <_vfiprintf_r+0x25c>
 800e8a2:	7821      	ldrb	r1, [r4, #0]
 800e8a4:	2203      	movs	r2, #3
 800e8a6:	4650      	mov	r0, sl
 800e8a8:	f7f1 fcb2 	bl	8000210 <memchr>
 800e8ac:	b140      	cbz	r0, 800e8c0 <_vfiprintf_r+0x198>
 800e8ae:	2340      	movs	r3, #64	; 0x40
 800e8b0:	eba0 000a 	sub.w	r0, r0, sl
 800e8b4:	fa03 f000 	lsl.w	r0, r3, r0
 800e8b8:	9b04      	ldr	r3, [sp, #16]
 800e8ba:	4303      	orrs	r3, r0
 800e8bc:	3401      	adds	r4, #1
 800e8be:	9304      	str	r3, [sp, #16]
 800e8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c4:	482c      	ldr	r0, [pc, #176]	; (800e978 <_vfiprintf_r+0x250>)
 800e8c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8ca:	2206      	movs	r2, #6
 800e8cc:	f7f1 fca0 	bl	8000210 <memchr>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	d03f      	beq.n	800e954 <_vfiprintf_r+0x22c>
 800e8d4:	4b29      	ldr	r3, [pc, #164]	; (800e97c <_vfiprintf_r+0x254>)
 800e8d6:	bb1b      	cbnz	r3, 800e920 <_vfiprintf_r+0x1f8>
 800e8d8:	9b03      	ldr	r3, [sp, #12]
 800e8da:	3307      	adds	r3, #7
 800e8dc:	f023 0307 	bic.w	r3, r3, #7
 800e8e0:	3308      	adds	r3, #8
 800e8e2:	9303      	str	r3, [sp, #12]
 800e8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8e6:	443b      	add	r3, r7
 800e8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e8ea:	e767      	b.n	800e7bc <_vfiprintf_r+0x94>
 800e8ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8f0:	460c      	mov	r4, r1
 800e8f2:	2001      	movs	r0, #1
 800e8f4:	e7a5      	b.n	800e842 <_vfiprintf_r+0x11a>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	3401      	adds	r4, #1
 800e8fa:	9305      	str	r3, [sp, #20]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	f04f 0c0a 	mov.w	ip, #10
 800e902:	4620      	mov	r0, r4
 800e904:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e908:	3a30      	subs	r2, #48	; 0x30
 800e90a:	2a09      	cmp	r2, #9
 800e90c:	d903      	bls.n	800e916 <_vfiprintf_r+0x1ee>
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d0c5      	beq.n	800e89e <_vfiprintf_r+0x176>
 800e912:	9105      	str	r1, [sp, #20]
 800e914:	e7c3      	b.n	800e89e <_vfiprintf_r+0x176>
 800e916:	fb0c 2101 	mla	r1, ip, r1, r2
 800e91a:	4604      	mov	r4, r0
 800e91c:	2301      	movs	r3, #1
 800e91e:	e7f0      	b.n	800e902 <_vfiprintf_r+0x1da>
 800e920:	ab03      	add	r3, sp, #12
 800e922:	9300      	str	r3, [sp, #0]
 800e924:	462a      	mov	r2, r5
 800e926:	4b16      	ldr	r3, [pc, #88]	; (800e980 <_vfiprintf_r+0x258>)
 800e928:	a904      	add	r1, sp, #16
 800e92a:	4630      	mov	r0, r6
 800e92c:	f7fd f94c 	bl	800bbc8 <_printf_float>
 800e930:	4607      	mov	r7, r0
 800e932:	1c78      	adds	r0, r7, #1
 800e934:	d1d6      	bne.n	800e8e4 <_vfiprintf_r+0x1bc>
 800e936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e938:	07d9      	lsls	r1, r3, #31
 800e93a:	d405      	bmi.n	800e948 <_vfiprintf_r+0x220>
 800e93c:	89ab      	ldrh	r3, [r5, #12]
 800e93e:	059a      	lsls	r2, r3, #22
 800e940:	d402      	bmi.n	800e948 <_vfiprintf_r+0x220>
 800e942:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e944:	f7fe ffd0 	bl	800d8e8 <__retarget_lock_release_recursive>
 800e948:	89ab      	ldrh	r3, [r5, #12]
 800e94a:	065b      	lsls	r3, r3, #25
 800e94c:	f53f af12 	bmi.w	800e774 <_vfiprintf_r+0x4c>
 800e950:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e952:	e711      	b.n	800e778 <_vfiprintf_r+0x50>
 800e954:	ab03      	add	r3, sp, #12
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	462a      	mov	r2, r5
 800e95a:	4b09      	ldr	r3, [pc, #36]	; (800e980 <_vfiprintf_r+0x258>)
 800e95c:	a904      	add	r1, sp, #16
 800e95e:	4630      	mov	r0, r6
 800e960:	f7fd fbd6 	bl	800c110 <_printf_i>
 800e964:	e7e4      	b.n	800e930 <_vfiprintf_r+0x208>
 800e966:	bf00      	nop
 800e968:	080113c8 	.word	0x080113c8
 800e96c:	080113e8 	.word	0x080113e8
 800e970:	080113a8 	.word	0x080113a8
 800e974:	0801137c 	.word	0x0801137c
 800e978:	08011386 	.word	0x08011386
 800e97c:	0800bbc9 	.word	0x0800bbc9
 800e980:	0800e703 	.word	0x0800e703
 800e984:	08011382 	.word	0x08011382

0800e988 <_scanf_chars>:
 800e988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e98c:	4615      	mov	r5, r2
 800e98e:	688a      	ldr	r2, [r1, #8]
 800e990:	4680      	mov	r8, r0
 800e992:	460c      	mov	r4, r1
 800e994:	b932      	cbnz	r2, 800e9a4 <_scanf_chars+0x1c>
 800e996:	698a      	ldr	r2, [r1, #24]
 800e998:	2a00      	cmp	r2, #0
 800e99a:	bf0c      	ite	eq
 800e99c:	2201      	moveq	r2, #1
 800e99e:	f04f 32ff 	movne.w	r2, #4294967295
 800e9a2:	608a      	str	r2, [r1, #8]
 800e9a4:	6822      	ldr	r2, [r4, #0]
 800e9a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ea38 <_scanf_chars+0xb0>
 800e9aa:	06d1      	lsls	r1, r2, #27
 800e9ac:	bf5f      	itttt	pl
 800e9ae:	681a      	ldrpl	r2, [r3, #0]
 800e9b0:	1d11      	addpl	r1, r2, #4
 800e9b2:	6019      	strpl	r1, [r3, #0]
 800e9b4:	6816      	ldrpl	r6, [r2, #0]
 800e9b6:	2700      	movs	r7, #0
 800e9b8:	69a0      	ldr	r0, [r4, #24]
 800e9ba:	b188      	cbz	r0, 800e9e0 <_scanf_chars+0x58>
 800e9bc:	2801      	cmp	r0, #1
 800e9be:	d107      	bne.n	800e9d0 <_scanf_chars+0x48>
 800e9c0:	682a      	ldr	r2, [r5, #0]
 800e9c2:	7811      	ldrb	r1, [r2, #0]
 800e9c4:	6962      	ldr	r2, [r4, #20]
 800e9c6:	5c52      	ldrb	r2, [r2, r1]
 800e9c8:	b952      	cbnz	r2, 800e9e0 <_scanf_chars+0x58>
 800e9ca:	2f00      	cmp	r7, #0
 800e9cc:	d031      	beq.n	800ea32 <_scanf_chars+0xaa>
 800e9ce:	e022      	b.n	800ea16 <_scanf_chars+0x8e>
 800e9d0:	2802      	cmp	r0, #2
 800e9d2:	d120      	bne.n	800ea16 <_scanf_chars+0x8e>
 800e9d4:	682b      	ldr	r3, [r5, #0]
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e9dc:	071b      	lsls	r3, r3, #28
 800e9de:	d41a      	bmi.n	800ea16 <_scanf_chars+0x8e>
 800e9e0:	6823      	ldr	r3, [r4, #0]
 800e9e2:	06da      	lsls	r2, r3, #27
 800e9e4:	bf5e      	ittt	pl
 800e9e6:	682b      	ldrpl	r3, [r5, #0]
 800e9e8:	781b      	ldrbpl	r3, [r3, #0]
 800e9ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e9ee:	682a      	ldr	r2, [r5, #0]
 800e9f0:	686b      	ldr	r3, [r5, #4]
 800e9f2:	3201      	adds	r2, #1
 800e9f4:	602a      	str	r2, [r5, #0]
 800e9f6:	68a2      	ldr	r2, [r4, #8]
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	3a01      	subs	r2, #1
 800e9fc:	606b      	str	r3, [r5, #4]
 800e9fe:	3701      	adds	r7, #1
 800ea00:	60a2      	str	r2, [r4, #8]
 800ea02:	b142      	cbz	r2, 800ea16 <_scanf_chars+0x8e>
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	dcd7      	bgt.n	800e9b8 <_scanf_chars+0x30>
 800ea08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	4640      	mov	r0, r8
 800ea10:	4798      	blx	r3
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d0d0      	beq.n	800e9b8 <_scanf_chars+0x30>
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	f013 0310 	ands.w	r3, r3, #16
 800ea1c:	d105      	bne.n	800ea2a <_scanf_chars+0xa2>
 800ea1e:	68e2      	ldr	r2, [r4, #12]
 800ea20:	3201      	adds	r2, #1
 800ea22:	60e2      	str	r2, [r4, #12]
 800ea24:	69a2      	ldr	r2, [r4, #24]
 800ea26:	b102      	cbz	r2, 800ea2a <_scanf_chars+0xa2>
 800ea28:	7033      	strb	r3, [r6, #0]
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	443b      	add	r3, r7
 800ea2e:	6123      	str	r3, [r4, #16]
 800ea30:	2000      	movs	r0, #0
 800ea32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea36:	bf00      	nop
 800ea38:	08011047 	.word	0x08011047

0800ea3c <_scanf_i>:
 800ea3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea40:	4698      	mov	r8, r3
 800ea42:	4b76      	ldr	r3, [pc, #472]	; (800ec1c <_scanf_i+0x1e0>)
 800ea44:	460c      	mov	r4, r1
 800ea46:	4682      	mov	sl, r0
 800ea48:	4616      	mov	r6, r2
 800ea4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea4e:	b087      	sub	sp, #28
 800ea50:	ab03      	add	r3, sp, #12
 800ea52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ea56:	4b72      	ldr	r3, [pc, #456]	; (800ec20 <_scanf_i+0x1e4>)
 800ea58:	69a1      	ldr	r1, [r4, #24]
 800ea5a:	4a72      	ldr	r2, [pc, #456]	; (800ec24 <_scanf_i+0x1e8>)
 800ea5c:	2903      	cmp	r1, #3
 800ea5e:	bf18      	it	ne
 800ea60:	461a      	movne	r2, r3
 800ea62:	68a3      	ldr	r3, [r4, #8]
 800ea64:	9201      	str	r2, [sp, #4]
 800ea66:	1e5a      	subs	r2, r3, #1
 800ea68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ea6c:	bf88      	it	hi
 800ea6e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ea72:	4627      	mov	r7, r4
 800ea74:	bf82      	ittt	hi
 800ea76:	eb03 0905 	addhi.w	r9, r3, r5
 800ea7a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ea7e:	60a3      	strhi	r3, [r4, #8]
 800ea80:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ea84:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ea88:	bf98      	it	ls
 800ea8a:	f04f 0900 	movls.w	r9, #0
 800ea8e:	6023      	str	r3, [r4, #0]
 800ea90:	463d      	mov	r5, r7
 800ea92:	f04f 0b00 	mov.w	fp, #0
 800ea96:	6831      	ldr	r1, [r6, #0]
 800ea98:	ab03      	add	r3, sp, #12
 800ea9a:	7809      	ldrb	r1, [r1, #0]
 800ea9c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800eaa0:	2202      	movs	r2, #2
 800eaa2:	f7f1 fbb5 	bl	8000210 <memchr>
 800eaa6:	b328      	cbz	r0, 800eaf4 <_scanf_i+0xb8>
 800eaa8:	f1bb 0f01 	cmp.w	fp, #1
 800eaac:	d159      	bne.n	800eb62 <_scanf_i+0x126>
 800eaae:	6862      	ldr	r2, [r4, #4]
 800eab0:	b92a      	cbnz	r2, 800eabe <_scanf_i+0x82>
 800eab2:	6822      	ldr	r2, [r4, #0]
 800eab4:	2308      	movs	r3, #8
 800eab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eaba:	6063      	str	r3, [r4, #4]
 800eabc:	6022      	str	r2, [r4, #0]
 800eabe:	6822      	ldr	r2, [r4, #0]
 800eac0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800eac4:	6022      	str	r2, [r4, #0]
 800eac6:	68a2      	ldr	r2, [r4, #8]
 800eac8:	1e51      	subs	r1, r2, #1
 800eaca:	60a1      	str	r1, [r4, #8]
 800eacc:	b192      	cbz	r2, 800eaf4 <_scanf_i+0xb8>
 800eace:	6832      	ldr	r2, [r6, #0]
 800ead0:	1c51      	adds	r1, r2, #1
 800ead2:	6031      	str	r1, [r6, #0]
 800ead4:	7812      	ldrb	r2, [r2, #0]
 800ead6:	f805 2b01 	strb.w	r2, [r5], #1
 800eada:	6872      	ldr	r2, [r6, #4]
 800eadc:	3a01      	subs	r2, #1
 800eade:	2a00      	cmp	r2, #0
 800eae0:	6072      	str	r2, [r6, #4]
 800eae2:	dc07      	bgt.n	800eaf4 <_scanf_i+0xb8>
 800eae4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800eae8:	4631      	mov	r1, r6
 800eaea:	4650      	mov	r0, sl
 800eaec:	4790      	blx	r2
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	f040 8085 	bne.w	800ebfe <_scanf_i+0x1c2>
 800eaf4:	f10b 0b01 	add.w	fp, fp, #1
 800eaf8:	f1bb 0f03 	cmp.w	fp, #3
 800eafc:	d1cb      	bne.n	800ea96 <_scanf_i+0x5a>
 800eafe:	6863      	ldr	r3, [r4, #4]
 800eb00:	b90b      	cbnz	r3, 800eb06 <_scanf_i+0xca>
 800eb02:	230a      	movs	r3, #10
 800eb04:	6063      	str	r3, [r4, #4]
 800eb06:	6863      	ldr	r3, [r4, #4]
 800eb08:	4947      	ldr	r1, [pc, #284]	; (800ec28 <_scanf_i+0x1ec>)
 800eb0a:	6960      	ldr	r0, [r4, #20]
 800eb0c:	1ac9      	subs	r1, r1, r3
 800eb0e:	f000 f89f 	bl	800ec50 <__sccl>
 800eb12:	f04f 0b00 	mov.w	fp, #0
 800eb16:	68a3      	ldr	r3, [r4, #8]
 800eb18:	6822      	ldr	r2, [r4, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d03d      	beq.n	800eb9a <_scanf_i+0x15e>
 800eb1e:	6831      	ldr	r1, [r6, #0]
 800eb20:	6960      	ldr	r0, [r4, #20]
 800eb22:	f891 c000 	ldrb.w	ip, [r1]
 800eb26:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	d035      	beq.n	800eb9a <_scanf_i+0x15e>
 800eb2e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800eb32:	d124      	bne.n	800eb7e <_scanf_i+0x142>
 800eb34:	0510      	lsls	r0, r2, #20
 800eb36:	d522      	bpl.n	800eb7e <_scanf_i+0x142>
 800eb38:	f10b 0b01 	add.w	fp, fp, #1
 800eb3c:	f1b9 0f00 	cmp.w	r9, #0
 800eb40:	d003      	beq.n	800eb4a <_scanf_i+0x10e>
 800eb42:	3301      	adds	r3, #1
 800eb44:	f109 39ff 	add.w	r9, r9, #4294967295
 800eb48:	60a3      	str	r3, [r4, #8]
 800eb4a:	6873      	ldr	r3, [r6, #4]
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	6073      	str	r3, [r6, #4]
 800eb52:	dd1b      	ble.n	800eb8c <_scanf_i+0x150>
 800eb54:	6833      	ldr	r3, [r6, #0]
 800eb56:	3301      	adds	r3, #1
 800eb58:	6033      	str	r3, [r6, #0]
 800eb5a:	68a3      	ldr	r3, [r4, #8]
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	60a3      	str	r3, [r4, #8]
 800eb60:	e7d9      	b.n	800eb16 <_scanf_i+0xda>
 800eb62:	f1bb 0f02 	cmp.w	fp, #2
 800eb66:	d1ae      	bne.n	800eac6 <_scanf_i+0x8a>
 800eb68:	6822      	ldr	r2, [r4, #0]
 800eb6a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800eb6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800eb72:	d1bf      	bne.n	800eaf4 <_scanf_i+0xb8>
 800eb74:	2310      	movs	r3, #16
 800eb76:	6063      	str	r3, [r4, #4]
 800eb78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb7c:	e7a2      	b.n	800eac4 <_scanf_i+0x88>
 800eb7e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800eb82:	6022      	str	r2, [r4, #0]
 800eb84:	780b      	ldrb	r3, [r1, #0]
 800eb86:	f805 3b01 	strb.w	r3, [r5], #1
 800eb8a:	e7de      	b.n	800eb4a <_scanf_i+0x10e>
 800eb8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eb90:	4631      	mov	r1, r6
 800eb92:	4650      	mov	r0, sl
 800eb94:	4798      	blx	r3
 800eb96:	2800      	cmp	r0, #0
 800eb98:	d0df      	beq.n	800eb5a <_scanf_i+0x11e>
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	05db      	lsls	r3, r3, #23
 800eb9e:	d50d      	bpl.n	800ebbc <_scanf_i+0x180>
 800eba0:	42bd      	cmp	r5, r7
 800eba2:	d909      	bls.n	800ebb8 <_scanf_i+0x17c>
 800eba4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ebac:	4632      	mov	r2, r6
 800ebae:	4650      	mov	r0, sl
 800ebb0:	4798      	blx	r3
 800ebb2:	f105 39ff 	add.w	r9, r5, #4294967295
 800ebb6:	464d      	mov	r5, r9
 800ebb8:	42bd      	cmp	r5, r7
 800ebba:	d02d      	beq.n	800ec18 <_scanf_i+0x1dc>
 800ebbc:	6822      	ldr	r2, [r4, #0]
 800ebbe:	f012 0210 	ands.w	r2, r2, #16
 800ebc2:	d113      	bne.n	800ebec <_scanf_i+0x1b0>
 800ebc4:	702a      	strb	r2, [r5, #0]
 800ebc6:	6863      	ldr	r3, [r4, #4]
 800ebc8:	9e01      	ldr	r6, [sp, #4]
 800ebca:	4639      	mov	r1, r7
 800ebcc:	4650      	mov	r0, sl
 800ebce:	47b0      	blx	r6
 800ebd0:	6821      	ldr	r1, [r4, #0]
 800ebd2:	f8d8 3000 	ldr.w	r3, [r8]
 800ebd6:	f011 0f20 	tst.w	r1, #32
 800ebda:	d013      	beq.n	800ec04 <_scanf_i+0x1c8>
 800ebdc:	1d1a      	adds	r2, r3, #4
 800ebde:	f8c8 2000 	str.w	r2, [r8]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6018      	str	r0, [r3, #0]
 800ebe6:	68e3      	ldr	r3, [r4, #12]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	60e3      	str	r3, [r4, #12]
 800ebec:	1bed      	subs	r5, r5, r7
 800ebee:	44ab      	add	fp, r5
 800ebf0:	6925      	ldr	r5, [r4, #16]
 800ebf2:	445d      	add	r5, fp
 800ebf4:	6125      	str	r5, [r4, #16]
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	b007      	add	sp, #28
 800ebfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebfe:	f04f 0b00 	mov.w	fp, #0
 800ec02:	e7ca      	b.n	800eb9a <_scanf_i+0x15e>
 800ec04:	1d1a      	adds	r2, r3, #4
 800ec06:	f8c8 2000 	str.w	r2, [r8]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f011 0f01 	tst.w	r1, #1
 800ec10:	bf14      	ite	ne
 800ec12:	8018      	strhne	r0, [r3, #0]
 800ec14:	6018      	streq	r0, [r3, #0]
 800ec16:	e7e6      	b.n	800ebe6 <_scanf_i+0x1aa>
 800ec18:	2001      	movs	r0, #1
 800ec1a:	e7ed      	b.n	800ebf8 <_scanf_i+0x1bc>
 800ec1c:	080103e0 	.word	0x080103e0
 800ec20:	0800eda5 	.word	0x0800eda5
 800ec24:	0800c5f5 	.word	0x0800c5f5
 800ec28:	080113a6 	.word	0x080113a6

0800ec2c <_read_r>:
 800ec2c:	b538      	push	{r3, r4, r5, lr}
 800ec2e:	4d07      	ldr	r5, [pc, #28]	; (800ec4c <_read_r+0x20>)
 800ec30:	4604      	mov	r4, r0
 800ec32:	4608      	mov	r0, r1
 800ec34:	4611      	mov	r1, r2
 800ec36:	2200      	movs	r2, #0
 800ec38:	602a      	str	r2, [r5, #0]
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	f7f5 faa2 	bl	8004184 <_read>
 800ec40:	1c43      	adds	r3, r0, #1
 800ec42:	d102      	bne.n	800ec4a <_read_r+0x1e>
 800ec44:	682b      	ldr	r3, [r5, #0]
 800ec46:	b103      	cbz	r3, 800ec4a <_read_r+0x1e>
 800ec48:	6023      	str	r3, [r4, #0]
 800ec4a:	bd38      	pop	{r3, r4, r5, pc}
 800ec4c:	20000d14 	.word	0x20000d14

0800ec50 <__sccl>:
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	780b      	ldrb	r3, [r1, #0]
 800ec54:	4604      	mov	r4, r0
 800ec56:	2b5e      	cmp	r3, #94	; 0x5e
 800ec58:	bf0b      	itete	eq
 800ec5a:	784b      	ldrbeq	r3, [r1, #1]
 800ec5c:	1c48      	addne	r0, r1, #1
 800ec5e:	1c88      	addeq	r0, r1, #2
 800ec60:	2200      	movne	r2, #0
 800ec62:	bf08      	it	eq
 800ec64:	2201      	moveq	r2, #1
 800ec66:	1e61      	subs	r1, r4, #1
 800ec68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ec6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ec70:	42a9      	cmp	r1, r5
 800ec72:	d1fb      	bne.n	800ec6c <__sccl+0x1c>
 800ec74:	b90b      	cbnz	r3, 800ec7a <__sccl+0x2a>
 800ec76:	3801      	subs	r0, #1
 800ec78:	bd70      	pop	{r4, r5, r6, pc}
 800ec7a:	f082 0201 	eor.w	r2, r2, #1
 800ec7e:	54e2      	strb	r2, [r4, r3]
 800ec80:	4605      	mov	r5, r0
 800ec82:	4628      	mov	r0, r5
 800ec84:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ec88:	292d      	cmp	r1, #45	; 0x2d
 800ec8a:	d006      	beq.n	800ec9a <__sccl+0x4a>
 800ec8c:	295d      	cmp	r1, #93	; 0x5d
 800ec8e:	d0f3      	beq.n	800ec78 <__sccl+0x28>
 800ec90:	b909      	cbnz	r1, 800ec96 <__sccl+0x46>
 800ec92:	4628      	mov	r0, r5
 800ec94:	e7f0      	b.n	800ec78 <__sccl+0x28>
 800ec96:	460b      	mov	r3, r1
 800ec98:	e7f1      	b.n	800ec7e <__sccl+0x2e>
 800ec9a:	786e      	ldrb	r6, [r5, #1]
 800ec9c:	2e5d      	cmp	r6, #93	; 0x5d
 800ec9e:	d0fa      	beq.n	800ec96 <__sccl+0x46>
 800eca0:	42b3      	cmp	r3, r6
 800eca2:	dcf8      	bgt.n	800ec96 <__sccl+0x46>
 800eca4:	3502      	adds	r5, #2
 800eca6:	4619      	mov	r1, r3
 800eca8:	3101      	adds	r1, #1
 800ecaa:	428e      	cmp	r6, r1
 800ecac:	5462      	strb	r2, [r4, r1]
 800ecae:	dcfb      	bgt.n	800eca8 <__sccl+0x58>
 800ecb0:	1af1      	subs	r1, r6, r3
 800ecb2:	3901      	subs	r1, #1
 800ecb4:	1c58      	adds	r0, r3, #1
 800ecb6:	42b3      	cmp	r3, r6
 800ecb8:	bfa8      	it	ge
 800ecba:	2100      	movge	r1, #0
 800ecbc:	1843      	adds	r3, r0, r1
 800ecbe:	e7e0      	b.n	800ec82 <__sccl+0x32>

0800ecc0 <_strtoul_l.constprop.0>:
 800ecc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecc4:	4f36      	ldr	r7, [pc, #216]	; (800eda0 <_strtoul_l.constprop.0+0xe0>)
 800ecc6:	4686      	mov	lr, r0
 800ecc8:	460d      	mov	r5, r1
 800ecca:	4628      	mov	r0, r5
 800eccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecd0:	5de6      	ldrb	r6, [r4, r7]
 800ecd2:	f016 0608 	ands.w	r6, r6, #8
 800ecd6:	d1f8      	bne.n	800ecca <_strtoul_l.constprop.0+0xa>
 800ecd8:	2c2d      	cmp	r4, #45	; 0x2d
 800ecda:	d12f      	bne.n	800ed3c <_strtoul_l.constprop.0+0x7c>
 800ecdc:	782c      	ldrb	r4, [r5, #0]
 800ecde:	2601      	movs	r6, #1
 800ece0:	1c85      	adds	r5, r0, #2
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d057      	beq.n	800ed96 <_strtoul_l.constprop.0+0xd6>
 800ece6:	2b10      	cmp	r3, #16
 800ece8:	d109      	bne.n	800ecfe <_strtoul_l.constprop.0+0x3e>
 800ecea:	2c30      	cmp	r4, #48	; 0x30
 800ecec:	d107      	bne.n	800ecfe <_strtoul_l.constprop.0+0x3e>
 800ecee:	7828      	ldrb	r0, [r5, #0]
 800ecf0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ecf4:	2858      	cmp	r0, #88	; 0x58
 800ecf6:	d149      	bne.n	800ed8c <_strtoul_l.constprop.0+0xcc>
 800ecf8:	786c      	ldrb	r4, [r5, #1]
 800ecfa:	2310      	movs	r3, #16
 800ecfc:	3502      	adds	r5, #2
 800ecfe:	f04f 38ff 	mov.w	r8, #4294967295
 800ed02:	2700      	movs	r7, #0
 800ed04:	fbb8 f8f3 	udiv	r8, r8, r3
 800ed08:	fb03 f908 	mul.w	r9, r3, r8
 800ed0c:	ea6f 0909 	mvn.w	r9, r9
 800ed10:	4638      	mov	r0, r7
 800ed12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ed16:	f1bc 0f09 	cmp.w	ip, #9
 800ed1a:	d814      	bhi.n	800ed46 <_strtoul_l.constprop.0+0x86>
 800ed1c:	4664      	mov	r4, ip
 800ed1e:	42a3      	cmp	r3, r4
 800ed20:	dd22      	ble.n	800ed68 <_strtoul_l.constprop.0+0xa8>
 800ed22:	2f00      	cmp	r7, #0
 800ed24:	db1d      	blt.n	800ed62 <_strtoul_l.constprop.0+0xa2>
 800ed26:	4580      	cmp	r8, r0
 800ed28:	d31b      	bcc.n	800ed62 <_strtoul_l.constprop.0+0xa2>
 800ed2a:	d101      	bne.n	800ed30 <_strtoul_l.constprop.0+0x70>
 800ed2c:	45a1      	cmp	r9, r4
 800ed2e:	db18      	blt.n	800ed62 <_strtoul_l.constprop.0+0xa2>
 800ed30:	fb00 4003 	mla	r0, r0, r3, r4
 800ed34:	2701      	movs	r7, #1
 800ed36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed3a:	e7ea      	b.n	800ed12 <_strtoul_l.constprop.0+0x52>
 800ed3c:	2c2b      	cmp	r4, #43	; 0x2b
 800ed3e:	bf04      	itt	eq
 800ed40:	782c      	ldrbeq	r4, [r5, #0]
 800ed42:	1c85      	addeq	r5, r0, #2
 800ed44:	e7cd      	b.n	800ece2 <_strtoul_l.constprop.0+0x22>
 800ed46:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ed4a:	f1bc 0f19 	cmp.w	ip, #25
 800ed4e:	d801      	bhi.n	800ed54 <_strtoul_l.constprop.0+0x94>
 800ed50:	3c37      	subs	r4, #55	; 0x37
 800ed52:	e7e4      	b.n	800ed1e <_strtoul_l.constprop.0+0x5e>
 800ed54:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ed58:	f1bc 0f19 	cmp.w	ip, #25
 800ed5c:	d804      	bhi.n	800ed68 <_strtoul_l.constprop.0+0xa8>
 800ed5e:	3c57      	subs	r4, #87	; 0x57
 800ed60:	e7dd      	b.n	800ed1e <_strtoul_l.constprop.0+0x5e>
 800ed62:	f04f 37ff 	mov.w	r7, #4294967295
 800ed66:	e7e6      	b.n	800ed36 <_strtoul_l.constprop.0+0x76>
 800ed68:	2f00      	cmp	r7, #0
 800ed6a:	da07      	bge.n	800ed7c <_strtoul_l.constprop.0+0xbc>
 800ed6c:	2322      	movs	r3, #34	; 0x22
 800ed6e:	f8ce 3000 	str.w	r3, [lr]
 800ed72:	f04f 30ff 	mov.w	r0, #4294967295
 800ed76:	b932      	cbnz	r2, 800ed86 <_strtoul_l.constprop.0+0xc6>
 800ed78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed7c:	b106      	cbz	r6, 800ed80 <_strtoul_l.constprop.0+0xc0>
 800ed7e:	4240      	negs	r0, r0
 800ed80:	2a00      	cmp	r2, #0
 800ed82:	d0f9      	beq.n	800ed78 <_strtoul_l.constprop.0+0xb8>
 800ed84:	b107      	cbz	r7, 800ed88 <_strtoul_l.constprop.0+0xc8>
 800ed86:	1e69      	subs	r1, r5, #1
 800ed88:	6011      	str	r1, [r2, #0]
 800ed8a:	e7f5      	b.n	800ed78 <_strtoul_l.constprop.0+0xb8>
 800ed8c:	2430      	movs	r4, #48	; 0x30
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d1b5      	bne.n	800ecfe <_strtoul_l.constprop.0+0x3e>
 800ed92:	2308      	movs	r3, #8
 800ed94:	e7b3      	b.n	800ecfe <_strtoul_l.constprop.0+0x3e>
 800ed96:	2c30      	cmp	r4, #48	; 0x30
 800ed98:	d0a9      	beq.n	800ecee <_strtoul_l.constprop.0+0x2e>
 800ed9a:	230a      	movs	r3, #10
 800ed9c:	e7af      	b.n	800ecfe <_strtoul_l.constprop.0+0x3e>
 800ed9e:	bf00      	nop
 800eda0:	08011047 	.word	0x08011047

0800eda4 <_strtoul_r>:
 800eda4:	f7ff bf8c 	b.w	800ecc0 <_strtoul_l.constprop.0>

0800eda8 <strtoul>:
 800eda8:	4613      	mov	r3, r2
 800edaa:	460a      	mov	r2, r1
 800edac:	4601      	mov	r1, r0
 800edae:	4802      	ldr	r0, [pc, #8]	; (800edb8 <strtoul+0x10>)
 800edb0:	6800      	ldr	r0, [r0, #0]
 800edb2:	f7ff bf85 	b.w	800ecc0 <_strtoul_l.constprop.0>
 800edb6:	bf00      	nop
 800edb8:	200002c4 	.word	0x200002c4

0800edbc <__submore>:
 800edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc0:	460c      	mov	r4, r1
 800edc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800edc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edc8:	4299      	cmp	r1, r3
 800edca:	d11d      	bne.n	800ee08 <__submore+0x4c>
 800edcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800edd0:	f7fc fde6 	bl	800b9a0 <_malloc_r>
 800edd4:	b918      	cbnz	r0, 800edde <__submore+0x22>
 800edd6:	f04f 30ff 	mov.w	r0, #4294967295
 800edda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ede2:	63a3      	str	r3, [r4, #56]	; 0x38
 800ede4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ede8:	6360      	str	r0, [r4, #52]	; 0x34
 800edea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800edee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800edf2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800edf6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800edfa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800edfe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ee02:	6020      	str	r0, [r4, #0]
 800ee04:	2000      	movs	r0, #0
 800ee06:	e7e8      	b.n	800edda <__submore+0x1e>
 800ee08:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ee0a:	0077      	lsls	r7, r6, #1
 800ee0c:	463a      	mov	r2, r7
 800ee0e:	f000 fb2b 	bl	800f468 <_realloc_r>
 800ee12:	4605      	mov	r5, r0
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d0de      	beq.n	800edd6 <__submore+0x1a>
 800ee18:	eb00 0806 	add.w	r8, r0, r6
 800ee1c:	4601      	mov	r1, r0
 800ee1e:	4632      	mov	r2, r6
 800ee20:	4640      	mov	r0, r8
 800ee22:	f7fe fd75 	bl	800d910 <memcpy>
 800ee26:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ee2a:	f8c4 8000 	str.w	r8, [r4]
 800ee2e:	e7e9      	b.n	800ee04 <__submore+0x48>

0800ee30 <__swbuf_r>:
 800ee30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee32:	460e      	mov	r6, r1
 800ee34:	4614      	mov	r4, r2
 800ee36:	4605      	mov	r5, r0
 800ee38:	b118      	cbz	r0, 800ee42 <__swbuf_r+0x12>
 800ee3a:	6983      	ldr	r3, [r0, #24]
 800ee3c:	b90b      	cbnz	r3, 800ee42 <__swbuf_r+0x12>
 800ee3e:	f000 f9e5 	bl	800f20c <__sinit>
 800ee42:	4b21      	ldr	r3, [pc, #132]	; (800eec8 <__swbuf_r+0x98>)
 800ee44:	429c      	cmp	r4, r3
 800ee46:	d12b      	bne.n	800eea0 <__swbuf_r+0x70>
 800ee48:	686c      	ldr	r4, [r5, #4]
 800ee4a:	69a3      	ldr	r3, [r4, #24]
 800ee4c:	60a3      	str	r3, [r4, #8]
 800ee4e:	89a3      	ldrh	r3, [r4, #12]
 800ee50:	071a      	lsls	r2, r3, #28
 800ee52:	d52f      	bpl.n	800eeb4 <__swbuf_r+0x84>
 800ee54:	6923      	ldr	r3, [r4, #16]
 800ee56:	b36b      	cbz	r3, 800eeb4 <__swbuf_r+0x84>
 800ee58:	6923      	ldr	r3, [r4, #16]
 800ee5a:	6820      	ldr	r0, [r4, #0]
 800ee5c:	1ac0      	subs	r0, r0, r3
 800ee5e:	6963      	ldr	r3, [r4, #20]
 800ee60:	b2f6      	uxtb	r6, r6
 800ee62:	4283      	cmp	r3, r0
 800ee64:	4637      	mov	r7, r6
 800ee66:	dc04      	bgt.n	800ee72 <__swbuf_r+0x42>
 800ee68:	4621      	mov	r1, r4
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f000 f93a 	bl	800f0e4 <_fflush_r>
 800ee70:	bb30      	cbnz	r0, 800eec0 <__swbuf_r+0x90>
 800ee72:	68a3      	ldr	r3, [r4, #8]
 800ee74:	3b01      	subs	r3, #1
 800ee76:	60a3      	str	r3, [r4, #8]
 800ee78:	6823      	ldr	r3, [r4, #0]
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	6022      	str	r2, [r4, #0]
 800ee7e:	701e      	strb	r6, [r3, #0]
 800ee80:	6963      	ldr	r3, [r4, #20]
 800ee82:	3001      	adds	r0, #1
 800ee84:	4283      	cmp	r3, r0
 800ee86:	d004      	beq.n	800ee92 <__swbuf_r+0x62>
 800ee88:	89a3      	ldrh	r3, [r4, #12]
 800ee8a:	07db      	lsls	r3, r3, #31
 800ee8c:	d506      	bpl.n	800ee9c <__swbuf_r+0x6c>
 800ee8e:	2e0a      	cmp	r6, #10
 800ee90:	d104      	bne.n	800ee9c <__swbuf_r+0x6c>
 800ee92:	4621      	mov	r1, r4
 800ee94:	4628      	mov	r0, r5
 800ee96:	f000 f925 	bl	800f0e4 <_fflush_r>
 800ee9a:	b988      	cbnz	r0, 800eec0 <__swbuf_r+0x90>
 800ee9c:	4638      	mov	r0, r7
 800ee9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea0:	4b0a      	ldr	r3, [pc, #40]	; (800eecc <__swbuf_r+0x9c>)
 800eea2:	429c      	cmp	r4, r3
 800eea4:	d101      	bne.n	800eeaa <__swbuf_r+0x7a>
 800eea6:	68ac      	ldr	r4, [r5, #8]
 800eea8:	e7cf      	b.n	800ee4a <__swbuf_r+0x1a>
 800eeaa:	4b09      	ldr	r3, [pc, #36]	; (800eed0 <__swbuf_r+0xa0>)
 800eeac:	429c      	cmp	r4, r3
 800eeae:	bf08      	it	eq
 800eeb0:	68ec      	ldreq	r4, [r5, #12]
 800eeb2:	e7ca      	b.n	800ee4a <__swbuf_r+0x1a>
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	f000 f80c 	bl	800eed4 <__swsetup_r>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d0cb      	beq.n	800ee58 <__swbuf_r+0x28>
 800eec0:	f04f 37ff 	mov.w	r7, #4294967295
 800eec4:	e7ea      	b.n	800ee9c <__swbuf_r+0x6c>
 800eec6:	bf00      	nop
 800eec8:	080113c8 	.word	0x080113c8
 800eecc:	080113e8 	.word	0x080113e8
 800eed0:	080113a8 	.word	0x080113a8

0800eed4 <__swsetup_r>:
 800eed4:	4b32      	ldr	r3, [pc, #200]	; (800efa0 <__swsetup_r+0xcc>)
 800eed6:	b570      	push	{r4, r5, r6, lr}
 800eed8:	681d      	ldr	r5, [r3, #0]
 800eeda:	4606      	mov	r6, r0
 800eedc:	460c      	mov	r4, r1
 800eede:	b125      	cbz	r5, 800eeea <__swsetup_r+0x16>
 800eee0:	69ab      	ldr	r3, [r5, #24]
 800eee2:	b913      	cbnz	r3, 800eeea <__swsetup_r+0x16>
 800eee4:	4628      	mov	r0, r5
 800eee6:	f000 f991 	bl	800f20c <__sinit>
 800eeea:	4b2e      	ldr	r3, [pc, #184]	; (800efa4 <__swsetup_r+0xd0>)
 800eeec:	429c      	cmp	r4, r3
 800eeee:	d10f      	bne.n	800ef10 <__swsetup_r+0x3c>
 800eef0:	686c      	ldr	r4, [r5, #4]
 800eef2:	89a3      	ldrh	r3, [r4, #12]
 800eef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eef8:	0719      	lsls	r1, r3, #28
 800eefa:	d42c      	bmi.n	800ef56 <__swsetup_r+0x82>
 800eefc:	06dd      	lsls	r5, r3, #27
 800eefe:	d411      	bmi.n	800ef24 <__swsetup_r+0x50>
 800ef00:	2309      	movs	r3, #9
 800ef02:	6033      	str	r3, [r6, #0]
 800ef04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef08:	81a3      	strh	r3, [r4, #12]
 800ef0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0e:	e03e      	b.n	800ef8e <__swsetup_r+0xba>
 800ef10:	4b25      	ldr	r3, [pc, #148]	; (800efa8 <__swsetup_r+0xd4>)
 800ef12:	429c      	cmp	r4, r3
 800ef14:	d101      	bne.n	800ef1a <__swsetup_r+0x46>
 800ef16:	68ac      	ldr	r4, [r5, #8]
 800ef18:	e7eb      	b.n	800eef2 <__swsetup_r+0x1e>
 800ef1a:	4b24      	ldr	r3, [pc, #144]	; (800efac <__swsetup_r+0xd8>)
 800ef1c:	429c      	cmp	r4, r3
 800ef1e:	bf08      	it	eq
 800ef20:	68ec      	ldreq	r4, [r5, #12]
 800ef22:	e7e6      	b.n	800eef2 <__swsetup_r+0x1e>
 800ef24:	0758      	lsls	r0, r3, #29
 800ef26:	d512      	bpl.n	800ef4e <__swsetup_r+0x7a>
 800ef28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef2a:	b141      	cbz	r1, 800ef3e <__swsetup_r+0x6a>
 800ef2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef30:	4299      	cmp	r1, r3
 800ef32:	d002      	beq.n	800ef3a <__swsetup_r+0x66>
 800ef34:	4630      	mov	r0, r6
 800ef36:	f7fc fcc7 	bl	800b8c8 <_free_r>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ef3e:	89a3      	ldrh	r3, [r4, #12]
 800ef40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef44:	81a3      	strh	r3, [r4, #12]
 800ef46:	2300      	movs	r3, #0
 800ef48:	6063      	str	r3, [r4, #4]
 800ef4a:	6923      	ldr	r3, [r4, #16]
 800ef4c:	6023      	str	r3, [r4, #0]
 800ef4e:	89a3      	ldrh	r3, [r4, #12]
 800ef50:	f043 0308 	orr.w	r3, r3, #8
 800ef54:	81a3      	strh	r3, [r4, #12]
 800ef56:	6923      	ldr	r3, [r4, #16]
 800ef58:	b94b      	cbnz	r3, 800ef6e <__swsetup_r+0x9a>
 800ef5a:	89a3      	ldrh	r3, [r4, #12]
 800ef5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef64:	d003      	beq.n	800ef6e <__swsetup_r+0x9a>
 800ef66:	4621      	mov	r1, r4
 800ef68:	4630      	mov	r0, r6
 800ef6a:	f000 fa11 	bl	800f390 <__smakebuf_r>
 800ef6e:	89a0      	ldrh	r0, [r4, #12]
 800ef70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef74:	f010 0301 	ands.w	r3, r0, #1
 800ef78:	d00a      	beq.n	800ef90 <__swsetup_r+0xbc>
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	60a3      	str	r3, [r4, #8]
 800ef7e:	6963      	ldr	r3, [r4, #20]
 800ef80:	425b      	negs	r3, r3
 800ef82:	61a3      	str	r3, [r4, #24]
 800ef84:	6923      	ldr	r3, [r4, #16]
 800ef86:	b943      	cbnz	r3, 800ef9a <__swsetup_r+0xc6>
 800ef88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef8c:	d1ba      	bne.n	800ef04 <__swsetup_r+0x30>
 800ef8e:	bd70      	pop	{r4, r5, r6, pc}
 800ef90:	0781      	lsls	r1, r0, #30
 800ef92:	bf58      	it	pl
 800ef94:	6963      	ldrpl	r3, [r4, #20]
 800ef96:	60a3      	str	r3, [r4, #8]
 800ef98:	e7f4      	b.n	800ef84 <__swsetup_r+0xb0>
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	e7f7      	b.n	800ef8e <__swsetup_r+0xba>
 800ef9e:	bf00      	nop
 800efa0:	200002c4 	.word	0x200002c4
 800efa4:	080113c8 	.word	0x080113c8
 800efa8:	080113e8 	.word	0x080113e8
 800efac:	080113a8 	.word	0x080113a8

0800efb0 <abort>:
 800efb0:	b508      	push	{r3, lr}
 800efb2:	2006      	movs	r0, #6
 800efb4:	f000 fab0 	bl	800f518 <raise>
 800efb8:	2001      	movs	r0, #1
 800efba:	f7f5 f8d9 	bl	8004170 <_exit>
	...

0800efc0 <__env_lock>:
 800efc0:	4801      	ldr	r0, [pc, #4]	; (800efc8 <__env_lock+0x8>)
 800efc2:	f7fe bc8f 	b.w	800d8e4 <__retarget_lock_acquire_recursive>
 800efc6:	bf00      	nop
 800efc8:	20000d0c 	.word	0x20000d0c

0800efcc <__env_unlock>:
 800efcc:	4801      	ldr	r0, [pc, #4]	; (800efd4 <__env_unlock+0x8>)
 800efce:	f7fe bc8b 	b.w	800d8e8 <__retarget_lock_release_recursive>
 800efd2:	bf00      	nop
 800efd4:	20000d0c 	.word	0x20000d0c

0800efd8 <__sflush_r>:
 800efd8:	898a      	ldrh	r2, [r1, #12]
 800efda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efde:	4605      	mov	r5, r0
 800efe0:	0710      	lsls	r0, r2, #28
 800efe2:	460c      	mov	r4, r1
 800efe4:	d458      	bmi.n	800f098 <__sflush_r+0xc0>
 800efe6:	684b      	ldr	r3, [r1, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	dc05      	bgt.n	800eff8 <__sflush_r+0x20>
 800efec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efee:	2b00      	cmp	r3, #0
 800eff0:	dc02      	bgt.n	800eff8 <__sflush_r+0x20>
 800eff2:	2000      	movs	r0, #0
 800eff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800effa:	2e00      	cmp	r6, #0
 800effc:	d0f9      	beq.n	800eff2 <__sflush_r+0x1a>
 800effe:	2300      	movs	r3, #0
 800f000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f004:	682f      	ldr	r7, [r5, #0]
 800f006:	602b      	str	r3, [r5, #0]
 800f008:	d032      	beq.n	800f070 <__sflush_r+0x98>
 800f00a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f00c:	89a3      	ldrh	r3, [r4, #12]
 800f00e:	075a      	lsls	r2, r3, #29
 800f010:	d505      	bpl.n	800f01e <__sflush_r+0x46>
 800f012:	6863      	ldr	r3, [r4, #4]
 800f014:	1ac0      	subs	r0, r0, r3
 800f016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f018:	b10b      	cbz	r3, 800f01e <__sflush_r+0x46>
 800f01a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f01c:	1ac0      	subs	r0, r0, r3
 800f01e:	2300      	movs	r3, #0
 800f020:	4602      	mov	r2, r0
 800f022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f024:	6a21      	ldr	r1, [r4, #32]
 800f026:	4628      	mov	r0, r5
 800f028:	47b0      	blx	r6
 800f02a:	1c43      	adds	r3, r0, #1
 800f02c:	89a3      	ldrh	r3, [r4, #12]
 800f02e:	d106      	bne.n	800f03e <__sflush_r+0x66>
 800f030:	6829      	ldr	r1, [r5, #0]
 800f032:	291d      	cmp	r1, #29
 800f034:	d82c      	bhi.n	800f090 <__sflush_r+0xb8>
 800f036:	4a2a      	ldr	r2, [pc, #168]	; (800f0e0 <__sflush_r+0x108>)
 800f038:	40ca      	lsrs	r2, r1
 800f03a:	07d6      	lsls	r6, r2, #31
 800f03c:	d528      	bpl.n	800f090 <__sflush_r+0xb8>
 800f03e:	2200      	movs	r2, #0
 800f040:	6062      	str	r2, [r4, #4]
 800f042:	04d9      	lsls	r1, r3, #19
 800f044:	6922      	ldr	r2, [r4, #16]
 800f046:	6022      	str	r2, [r4, #0]
 800f048:	d504      	bpl.n	800f054 <__sflush_r+0x7c>
 800f04a:	1c42      	adds	r2, r0, #1
 800f04c:	d101      	bne.n	800f052 <__sflush_r+0x7a>
 800f04e:	682b      	ldr	r3, [r5, #0]
 800f050:	b903      	cbnz	r3, 800f054 <__sflush_r+0x7c>
 800f052:	6560      	str	r0, [r4, #84]	; 0x54
 800f054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f056:	602f      	str	r7, [r5, #0]
 800f058:	2900      	cmp	r1, #0
 800f05a:	d0ca      	beq.n	800eff2 <__sflush_r+0x1a>
 800f05c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f060:	4299      	cmp	r1, r3
 800f062:	d002      	beq.n	800f06a <__sflush_r+0x92>
 800f064:	4628      	mov	r0, r5
 800f066:	f7fc fc2f 	bl	800b8c8 <_free_r>
 800f06a:	2000      	movs	r0, #0
 800f06c:	6360      	str	r0, [r4, #52]	; 0x34
 800f06e:	e7c1      	b.n	800eff4 <__sflush_r+0x1c>
 800f070:	6a21      	ldr	r1, [r4, #32]
 800f072:	2301      	movs	r3, #1
 800f074:	4628      	mov	r0, r5
 800f076:	47b0      	blx	r6
 800f078:	1c41      	adds	r1, r0, #1
 800f07a:	d1c7      	bne.n	800f00c <__sflush_r+0x34>
 800f07c:	682b      	ldr	r3, [r5, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d0c4      	beq.n	800f00c <__sflush_r+0x34>
 800f082:	2b1d      	cmp	r3, #29
 800f084:	d001      	beq.n	800f08a <__sflush_r+0xb2>
 800f086:	2b16      	cmp	r3, #22
 800f088:	d101      	bne.n	800f08e <__sflush_r+0xb6>
 800f08a:	602f      	str	r7, [r5, #0]
 800f08c:	e7b1      	b.n	800eff2 <__sflush_r+0x1a>
 800f08e:	89a3      	ldrh	r3, [r4, #12]
 800f090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f094:	81a3      	strh	r3, [r4, #12]
 800f096:	e7ad      	b.n	800eff4 <__sflush_r+0x1c>
 800f098:	690f      	ldr	r7, [r1, #16]
 800f09a:	2f00      	cmp	r7, #0
 800f09c:	d0a9      	beq.n	800eff2 <__sflush_r+0x1a>
 800f09e:	0793      	lsls	r3, r2, #30
 800f0a0:	680e      	ldr	r6, [r1, #0]
 800f0a2:	bf08      	it	eq
 800f0a4:	694b      	ldreq	r3, [r1, #20]
 800f0a6:	600f      	str	r7, [r1, #0]
 800f0a8:	bf18      	it	ne
 800f0aa:	2300      	movne	r3, #0
 800f0ac:	eba6 0807 	sub.w	r8, r6, r7
 800f0b0:	608b      	str	r3, [r1, #8]
 800f0b2:	f1b8 0f00 	cmp.w	r8, #0
 800f0b6:	dd9c      	ble.n	800eff2 <__sflush_r+0x1a>
 800f0b8:	6a21      	ldr	r1, [r4, #32]
 800f0ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0bc:	4643      	mov	r3, r8
 800f0be:	463a      	mov	r2, r7
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	47b0      	blx	r6
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	dc06      	bgt.n	800f0d6 <__sflush_r+0xfe>
 800f0c8:	89a3      	ldrh	r3, [r4, #12]
 800f0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0ce:	81a3      	strh	r3, [r4, #12]
 800f0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d4:	e78e      	b.n	800eff4 <__sflush_r+0x1c>
 800f0d6:	4407      	add	r7, r0
 800f0d8:	eba8 0800 	sub.w	r8, r8, r0
 800f0dc:	e7e9      	b.n	800f0b2 <__sflush_r+0xda>
 800f0de:	bf00      	nop
 800f0e0:	20400001 	.word	0x20400001

0800f0e4 <_fflush_r>:
 800f0e4:	b538      	push	{r3, r4, r5, lr}
 800f0e6:	690b      	ldr	r3, [r1, #16]
 800f0e8:	4605      	mov	r5, r0
 800f0ea:	460c      	mov	r4, r1
 800f0ec:	b913      	cbnz	r3, 800f0f4 <_fflush_r+0x10>
 800f0ee:	2500      	movs	r5, #0
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	bd38      	pop	{r3, r4, r5, pc}
 800f0f4:	b118      	cbz	r0, 800f0fe <_fflush_r+0x1a>
 800f0f6:	6983      	ldr	r3, [r0, #24]
 800f0f8:	b90b      	cbnz	r3, 800f0fe <_fflush_r+0x1a>
 800f0fa:	f000 f887 	bl	800f20c <__sinit>
 800f0fe:	4b14      	ldr	r3, [pc, #80]	; (800f150 <_fflush_r+0x6c>)
 800f100:	429c      	cmp	r4, r3
 800f102:	d11b      	bne.n	800f13c <_fflush_r+0x58>
 800f104:	686c      	ldr	r4, [r5, #4]
 800f106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d0ef      	beq.n	800f0ee <_fflush_r+0xa>
 800f10e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f110:	07d0      	lsls	r0, r2, #31
 800f112:	d404      	bmi.n	800f11e <_fflush_r+0x3a>
 800f114:	0599      	lsls	r1, r3, #22
 800f116:	d402      	bmi.n	800f11e <_fflush_r+0x3a>
 800f118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f11a:	f7fe fbe3 	bl	800d8e4 <__retarget_lock_acquire_recursive>
 800f11e:	4628      	mov	r0, r5
 800f120:	4621      	mov	r1, r4
 800f122:	f7ff ff59 	bl	800efd8 <__sflush_r>
 800f126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f128:	07da      	lsls	r2, r3, #31
 800f12a:	4605      	mov	r5, r0
 800f12c:	d4e0      	bmi.n	800f0f0 <_fflush_r+0xc>
 800f12e:	89a3      	ldrh	r3, [r4, #12]
 800f130:	059b      	lsls	r3, r3, #22
 800f132:	d4dd      	bmi.n	800f0f0 <_fflush_r+0xc>
 800f134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f136:	f7fe fbd7 	bl	800d8e8 <__retarget_lock_release_recursive>
 800f13a:	e7d9      	b.n	800f0f0 <_fflush_r+0xc>
 800f13c:	4b05      	ldr	r3, [pc, #20]	; (800f154 <_fflush_r+0x70>)
 800f13e:	429c      	cmp	r4, r3
 800f140:	d101      	bne.n	800f146 <_fflush_r+0x62>
 800f142:	68ac      	ldr	r4, [r5, #8]
 800f144:	e7df      	b.n	800f106 <_fflush_r+0x22>
 800f146:	4b04      	ldr	r3, [pc, #16]	; (800f158 <_fflush_r+0x74>)
 800f148:	429c      	cmp	r4, r3
 800f14a:	bf08      	it	eq
 800f14c:	68ec      	ldreq	r4, [r5, #12]
 800f14e:	e7da      	b.n	800f106 <_fflush_r+0x22>
 800f150:	080113c8 	.word	0x080113c8
 800f154:	080113e8 	.word	0x080113e8
 800f158:	080113a8 	.word	0x080113a8

0800f15c <std>:
 800f15c:	2300      	movs	r3, #0
 800f15e:	b510      	push	{r4, lr}
 800f160:	4604      	mov	r4, r0
 800f162:	e9c0 3300 	strd	r3, r3, [r0]
 800f166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f16a:	6083      	str	r3, [r0, #8]
 800f16c:	8181      	strh	r1, [r0, #12]
 800f16e:	6643      	str	r3, [r0, #100]	; 0x64
 800f170:	81c2      	strh	r2, [r0, #14]
 800f172:	6183      	str	r3, [r0, #24]
 800f174:	4619      	mov	r1, r3
 800f176:	2208      	movs	r2, #8
 800f178:	305c      	adds	r0, #92	; 0x5c
 800f17a:	f7fc f92b 	bl	800b3d4 <memset>
 800f17e:	4b05      	ldr	r3, [pc, #20]	; (800f194 <std+0x38>)
 800f180:	6263      	str	r3, [r4, #36]	; 0x24
 800f182:	4b05      	ldr	r3, [pc, #20]	; (800f198 <std+0x3c>)
 800f184:	62a3      	str	r3, [r4, #40]	; 0x28
 800f186:	4b05      	ldr	r3, [pc, #20]	; (800f19c <std+0x40>)
 800f188:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f18a:	4b05      	ldr	r3, [pc, #20]	; (800f1a0 <std+0x44>)
 800f18c:	6224      	str	r4, [r4, #32]
 800f18e:	6323      	str	r3, [r4, #48]	; 0x30
 800f190:	bd10      	pop	{r4, pc}
 800f192:	bf00      	nop
 800f194:	0800c415 	.word	0x0800c415
 800f198:	0800c43b 	.word	0x0800c43b
 800f19c:	0800c473 	.word	0x0800c473
 800f1a0:	0800c497 	.word	0x0800c497

0800f1a4 <_cleanup_r>:
 800f1a4:	4901      	ldr	r1, [pc, #4]	; (800f1ac <_cleanup_r+0x8>)
 800f1a6:	f000 b8af 	b.w	800f308 <_fwalk_reent>
 800f1aa:	bf00      	nop
 800f1ac:	0800f0e5 	.word	0x0800f0e5

0800f1b0 <__sfmoreglue>:
 800f1b0:	b570      	push	{r4, r5, r6, lr}
 800f1b2:	2268      	movs	r2, #104	; 0x68
 800f1b4:	1e4d      	subs	r5, r1, #1
 800f1b6:	4355      	muls	r5, r2
 800f1b8:	460e      	mov	r6, r1
 800f1ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f1be:	f7fc fbef 	bl	800b9a0 <_malloc_r>
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	b140      	cbz	r0, 800f1d8 <__sfmoreglue+0x28>
 800f1c6:	2100      	movs	r1, #0
 800f1c8:	e9c0 1600 	strd	r1, r6, [r0]
 800f1cc:	300c      	adds	r0, #12
 800f1ce:	60a0      	str	r0, [r4, #8]
 800f1d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f1d4:	f7fc f8fe 	bl	800b3d4 <memset>
 800f1d8:	4620      	mov	r0, r4
 800f1da:	bd70      	pop	{r4, r5, r6, pc}

0800f1dc <__sfp_lock_acquire>:
 800f1dc:	4801      	ldr	r0, [pc, #4]	; (800f1e4 <__sfp_lock_acquire+0x8>)
 800f1de:	f7fe bb81 	b.w	800d8e4 <__retarget_lock_acquire_recursive>
 800f1e2:	bf00      	nop
 800f1e4:	20000d0e 	.word	0x20000d0e

0800f1e8 <__sfp_lock_release>:
 800f1e8:	4801      	ldr	r0, [pc, #4]	; (800f1f0 <__sfp_lock_release+0x8>)
 800f1ea:	f7fe bb7d 	b.w	800d8e8 <__retarget_lock_release_recursive>
 800f1ee:	bf00      	nop
 800f1f0:	20000d0e 	.word	0x20000d0e

0800f1f4 <__sinit_lock_acquire>:
 800f1f4:	4801      	ldr	r0, [pc, #4]	; (800f1fc <__sinit_lock_acquire+0x8>)
 800f1f6:	f7fe bb75 	b.w	800d8e4 <__retarget_lock_acquire_recursive>
 800f1fa:	bf00      	nop
 800f1fc:	20000d0f 	.word	0x20000d0f

0800f200 <__sinit_lock_release>:
 800f200:	4801      	ldr	r0, [pc, #4]	; (800f208 <__sinit_lock_release+0x8>)
 800f202:	f7fe bb71 	b.w	800d8e8 <__retarget_lock_release_recursive>
 800f206:	bf00      	nop
 800f208:	20000d0f 	.word	0x20000d0f

0800f20c <__sinit>:
 800f20c:	b510      	push	{r4, lr}
 800f20e:	4604      	mov	r4, r0
 800f210:	f7ff fff0 	bl	800f1f4 <__sinit_lock_acquire>
 800f214:	69a3      	ldr	r3, [r4, #24]
 800f216:	b11b      	cbz	r3, 800f220 <__sinit+0x14>
 800f218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f21c:	f7ff bff0 	b.w	800f200 <__sinit_lock_release>
 800f220:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f224:	6523      	str	r3, [r4, #80]	; 0x50
 800f226:	4b13      	ldr	r3, [pc, #76]	; (800f274 <__sinit+0x68>)
 800f228:	4a13      	ldr	r2, [pc, #76]	; (800f278 <__sinit+0x6c>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f22e:	42a3      	cmp	r3, r4
 800f230:	bf04      	itt	eq
 800f232:	2301      	moveq	r3, #1
 800f234:	61a3      	streq	r3, [r4, #24]
 800f236:	4620      	mov	r0, r4
 800f238:	f000 f820 	bl	800f27c <__sfp>
 800f23c:	6060      	str	r0, [r4, #4]
 800f23e:	4620      	mov	r0, r4
 800f240:	f000 f81c 	bl	800f27c <__sfp>
 800f244:	60a0      	str	r0, [r4, #8]
 800f246:	4620      	mov	r0, r4
 800f248:	f000 f818 	bl	800f27c <__sfp>
 800f24c:	2200      	movs	r2, #0
 800f24e:	60e0      	str	r0, [r4, #12]
 800f250:	2104      	movs	r1, #4
 800f252:	6860      	ldr	r0, [r4, #4]
 800f254:	f7ff ff82 	bl	800f15c <std>
 800f258:	68a0      	ldr	r0, [r4, #8]
 800f25a:	2201      	movs	r2, #1
 800f25c:	2109      	movs	r1, #9
 800f25e:	f7ff ff7d 	bl	800f15c <std>
 800f262:	68e0      	ldr	r0, [r4, #12]
 800f264:	2202      	movs	r2, #2
 800f266:	2112      	movs	r1, #18
 800f268:	f7ff ff78 	bl	800f15c <std>
 800f26c:	2301      	movs	r3, #1
 800f26e:	61a3      	str	r3, [r4, #24]
 800f270:	e7d2      	b.n	800f218 <__sinit+0xc>
 800f272:	bf00      	nop
 800f274:	08010f38 	.word	0x08010f38
 800f278:	0800f1a5 	.word	0x0800f1a5

0800f27c <__sfp>:
 800f27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27e:	4607      	mov	r7, r0
 800f280:	f7ff ffac 	bl	800f1dc <__sfp_lock_acquire>
 800f284:	4b1e      	ldr	r3, [pc, #120]	; (800f300 <__sfp+0x84>)
 800f286:	681e      	ldr	r6, [r3, #0]
 800f288:	69b3      	ldr	r3, [r6, #24]
 800f28a:	b913      	cbnz	r3, 800f292 <__sfp+0x16>
 800f28c:	4630      	mov	r0, r6
 800f28e:	f7ff ffbd 	bl	800f20c <__sinit>
 800f292:	3648      	adds	r6, #72	; 0x48
 800f294:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f298:	3b01      	subs	r3, #1
 800f29a:	d503      	bpl.n	800f2a4 <__sfp+0x28>
 800f29c:	6833      	ldr	r3, [r6, #0]
 800f29e:	b30b      	cbz	r3, 800f2e4 <__sfp+0x68>
 800f2a0:	6836      	ldr	r6, [r6, #0]
 800f2a2:	e7f7      	b.n	800f294 <__sfp+0x18>
 800f2a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f2a8:	b9d5      	cbnz	r5, 800f2e0 <__sfp+0x64>
 800f2aa:	4b16      	ldr	r3, [pc, #88]	; (800f304 <__sfp+0x88>)
 800f2ac:	60e3      	str	r3, [r4, #12]
 800f2ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f2b2:	6665      	str	r5, [r4, #100]	; 0x64
 800f2b4:	f7fe fb14 	bl	800d8e0 <__retarget_lock_init_recursive>
 800f2b8:	f7ff ff96 	bl	800f1e8 <__sfp_lock_release>
 800f2bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f2c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f2c4:	6025      	str	r5, [r4, #0]
 800f2c6:	61a5      	str	r5, [r4, #24]
 800f2c8:	2208      	movs	r2, #8
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f2d0:	f7fc f880 	bl	800b3d4 <memset>
 800f2d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f2d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2dc:	4620      	mov	r0, r4
 800f2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2e0:	3468      	adds	r4, #104	; 0x68
 800f2e2:	e7d9      	b.n	800f298 <__sfp+0x1c>
 800f2e4:	2104      	movs	r1, #4
 800f2e6:	4638      	mov	r0, r7
 800f2e8:	f7ff ff62 	bl	800f1b0 <__sfmoreglue>
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	6030      	str	r0, [r6, #0]
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	d1d5      	bne.n	800f2a0 <__sfp+0x24>
 800f2f4:	f7ff ff78 	bl	800f1e8 <__sfp_lock_release>
 800f2f8:	230c      	movs	r3, #12
 800f2fa:	603b      	str	r3, [r7, #0]
 800f2fc:	e7ee      	b.n	800f2dc <__sfp+0x60>
 800f2fe:	bf00      	nop
 800f300:	08010f38 	.word	0x08010f38
 800f304:	ffff0001 	.word	0xffff0001

0800f308 <_fwalk_reent>:
 800f308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f30c:	4606      	mov	r6, r0
 800f30e:	4688      	mov	r8, r1
 800f310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f314:	2700      	movs	r7, #0
 800f316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f31a:	f1b9 0901 	subs.w	r9, r9, #1
 800f31e:	d505      	bpl.n	800f32c <_fwalk_reent+0x24>
 800f320:	6824      	ldr	r4, [r4, #0]
 800f322:	2c00      	cmp	r4, #0
 800f324:	d1f7      	bne.n	800f316 <_fwalk_reent+0xe>
 800f326:	4638      	mov	r0, r7
 800f328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f32c:	89ab      	ldrh	r3, [r5, #12]
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d907      	bls.n	800f342 <_fwalk_reent+0x3a>
 800f332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f336:	3301      	adds	r3, #1
 800f338:	d003      	beq.n	800f342 <_fwalk_reent+0x3a>
 800f33a:	4629      	mov	r1, r5
 800f33c:	4630      	mov	r0, r6
 800f33e:	47c0      	blx	r8
 800f340:	4307      	orrs	r7, r0
 800f342:	3568      	adds	r5, #104	; 0x68
 800f344:	e7e9      	b.n	800f31a <_fwalk_reent+0x12>

0800f346 <__swhatbuf_r>:
 800f346:	b570      	push	{r4, r5, r6, lr}
 800f348:	460e      	mov	r6, r1
 800f34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f34e:	2900      	cmp	r1, #0
 800f350:	b096      	sub	sp, #88	; 0x58
 800f352:	4614      	mov	r4, r2
 800f354:	461d      	mov	r5, r3
 800f356:	da08      	bge.n	800f36a <__swhatbuf_r+0x24>
 800f358:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f35c:	2200      	movs	r2, #0
 800f35e:	602a      	str	r2, [r5, #0]
 800f360:	061a      	lsls	r2, r3, #24
 800f362:	d410      	bmi.n	800f386 <__swhatbuf_r+0x40>
 800f364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f368:	e00e      	b.n	800f388 <__swhatbuf_r+0x42>
 800f36a:	466a      	mov	r2, sp
 800f36c:	f000 f8fe 	bl	800f56c <_fstat_r>
 800f370:	2800      	cmp	r0, #0
 800f372:	dbf1      	blt.n	800f358 <__swhatbuf_r+0x12>
 800f374:	9a01      	ldr	r2, [sp, #4]
 800f376:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f37a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f37e:	425a      	negs	r2, r3
 800f380:	415a      	adcs	r2, r3
 800f382:	602a      	str	r2, [r5, #0]
 800f384:	e7ee      	b.n	800f364 <__swhatbuf_r+0x1e>
 800f386:	2340      	movs	r3, #64	; 0x40
 800f388:	2000      	movs	r0, #0
 800f38a:	6023      	str	r3, [r4, #0]
 800f38c:	b016      	add	sp, #88	; 0x58
 800f38e:	bd70      	pop	{r4, r5, r6, pc}

0800f390 <__smakebuf_r>:
 800f390:	898b      	ldrh	r3, [r1, #12]
 800f392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f394:	079d      	lsls	r5, r3, #30
 800f396:	4606      	mov	r6, r0
 800f398:	460c      	mov	r4, r1
 800f39a:	d507      	bpl.n	800f3ac <__smakebuf_r+0x1c>
 800f39c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3a0:	6023      	str	r3, [r4, #0]
 800f3a2:	6123      	str	r3, [r4, #16]
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	6163      	str	r3, [r4, #20]
 800f3a8:	b002      	add	sp, #8
 800f3aa:	bd70      	pop	{r4, r5, r6, pc}
 800f3ac:	ab01      	add	r3, sp, #4
 800f3ae:	466a      	mov	r2, sp
 800f3b0:	f7ff ffc9 	bl	800f346 <__swhatbuf_r>
 800f3b4:	9900      	ldr	r1, [sp, #0]
 800f3b6:	4605      	mov	r5, r0
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f7fc faf1 	bl	800b9a0 <_malloc_r>
 800f3be:	b948      	cbnz	r0, 800f3d4 <__smakebuf_r+0x44>
 800f3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3c4:	059a      	lsls	r2, r3, #22
 800f3c6:	d4ef      	bmi.n	800f3a8 <__smakebuf_r+0x18>
 800f3c8:	f023 0303 	bic.w	r3, r3, #3
 800f3cc:	f043 0302 	orr.w	r3, r3, #2
 800f3d0:	81a3      	strh	r3, [r4, #12]
 800f3d2:	e7e3      	b.n	800f39c <__smakebuf_r+0xc>
 800f3d4:	4b0d      	ldr	r3, [pc, #52]	; (800f40c <__smakebuf_r+0x7c>)
 800f3d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3d8:	89a3      	ldrh	r3, [r4, #12]
 800f3da:	6020      	str	r0, [r4, #0]
 800f3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3e0:	81a3      	strh	r3, [r4, #12]
 800f3e2:	9b00      	ldr	r3, [sp, #0]
 800f3e4:	6163      	str	r3, [r4, #20]
 800f3e6:	9b01      	ldr	r3, [sp, #4]
 800f3e8:	6120      	str	r0, [r4, #16]
 800f3ea:	b15b      	cbz	r3, 800f404 <__smakebuf_r+0x74>
 800f3ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f000 f8cd 	bl	800f590 <_isatty_r>
 800f3f6:	b128      	cbz	r0, 800f404 <__smakebuf_r+0x74>
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	f023 0303 	bic.w	r3, r3, #3
 800f3fe:	f043 0301 	orr.w	r3, r3, #1
 800f402:	81a3      	strh	r3, [r4, #12]
 800f404:	89a0      	ldrh	r0, [r4, #12]
 800f406:	4305      	orrs	r5, r0
 800f408:	81a5      	strh	r5, [r4, #12]
 800f40a:	e7cd      	b.n	800f3a8 <__smakebuf_r+0x18>
 800f40c:	0800f1a5 	.word	0x0800f1a5

0800f410 <__ascii_mbtowc>:
 800f410:	b082      	sub	sp, #8
 800f412:	b901      	cbnz	r1, 800f416 <__ascii_mbtowc+0x6>
 800f414:	a901      	add	r1, sp, #4
 800f416:	b142      	cbz	r2, 800f42a <__ascii_mbtowc+0x1a>
 800f418:	b14b      	cbz	r3, 800f42e <__ascii_mbtowc+0x1e>
 800f41a:	7813      	ldrb	r3, [r2, #0]
 800f41c:	600b      	str	r3, [r1, #0]
 800f41e:	7812      	ldrb	r2, [r2, #0]
 800f420:	1e10      	subs	r0, r2, #0
 800f422:	bf18      	it	ne
 800f424:	2001      	movne	r0, #1
 800f426:	b002      	add	sp, #8
 800f428:	4770      	bx	lr
 800f42a:	4610      	mov	r0, r2
 800f42c:	e7fb      	b.n	800f426 <__ascii_mbtowc+0x16>
 800f42e:	f06f 0001 	mvn.w	r0, #1
 800f432:	e7f8      	b.n	800f426 <__ascii_mbtowc+0x16>

0800f434 <memmove>:
 800f434:	4288      	cmp	r0, r1
 800f436:	b510      	push	{r4, lr}
 800f438:	eb01 0402 	add.w	r4, r1, r2
 800f43c:	d902      	bls.n	800f444 <memmove+0x10>
 800f43e:	4284      	cmp	r4, r0
 800f440:	4623      	mov	r3, r4
 800f442:	d807      	bhi.n	800f454 <memmove+0x20>
 800f444:	1e43      	subs	r3, r0, #1
 800f446:	42a1      	cmp	r1, r4
 800f448:	d008      	beq.n	800f45c <memmove+0x28>
 800f44a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f44e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f452:	e7f8      	b.n	800f446 <memmove+0x12>
 800f454:	4402      	add	r2, r0
 800f456:	4601      	mov	r1, r0
 800f458:	428a      	cmp	r2, r1
 800f45a:	d100      	bne.n	800f45e <memmove+0x2a>
 800f45c:	bd10      	pop	{r4, pc}
 800f45e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f466:	e7f7      	b.n	800f458 <memmove+0x24>

0800f468 <_realloc_r>:
 800f468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f46c:	4680      	mov	r8, r0
 800f46e:	4614      	mov	r4, r2
 800f470:	460e      	mov	r6, r1
 800f472:	b921      	cbnz	r1, 800f47e <_realloc_r+0x16>
 800f474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f478:	4611      	mov	r1, r2
 800f47a:	f7fc ba91 	b.w	800b9a0 <_malloc_r>
 800f47e:	b92a      	cbnz	r2, 800f48c <_realloc_r+0x24>
 800f480:	f7fc fa22 	bl	800b8c8 <_free_r>
 800f484:	4625      	mov	r5, r4
 800f486:	4628      	mov	r0, r5
 800f488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f48c:	f000 f890 	bl	800f5b0 <_malloc_usable_size_r>
 800f490:	4284      	cmp	r4, r0
 800f492:	4607      	mov	r7, r0
 800f494:	d802      	bhi.n	800f49c <_realloc_r+0x34>
 800f496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f49a:	d812      	bhi.n	800f4c2 <_realloc_r+0x5a>
 800f49c:	4621      	mov	r1, r4
 800f49e:	4640      	mov	r0, r8
 800f4a0:	f7fc fa7e 	bl	800b9a0 <_malloc_r>
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d0ed      	beq.n	800f486 <_realloc_r+0x1e>
 800f4aa:	42bc      	cmp	r4, r7
 800f4ac:	4622      	mov	r2, r4
 800f4ae:	4631      	mov	r1, r6
 800f4b0:	bf28      	it	cs
 800f4b2:	463a      	movcs	r2, r7
 800f4b4:	f7fe fa2c 	bl	800d910 <memcpy>
 800f4b8:	4631      	mov	r1, r6
 800f4ba:	4640      	mov	r0, r8
 800f4bc:	f7fc fa04 	bl	800b8c8 <_free_r>
 800f4c0:	e7e1      	b.n	800f486 <_realloc_r+0x1e>
 800f4c2:	4635      	mov	r5, r6
 800f4c4:	e7df      	b.n	800f486 <_realloc_r+0x1e>

0800f4c6 <_raise_r>:
 800f4c6:	291f      	cmp	r1, #31
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	460d      	mov	r5, r1
 800f4ce:	d904      	bls.n	800f4da <_raise_r+0x14>
 800f4d0:	2316      	movs	r3, #22
 800f4d2:	6003      	str	r3, [r0, #0]
 800f4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d8:	bd38      	pop	{r3, r4, r5, pc}
 800f4da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4dc:	b112      	cbz	r2, 800f4e4 <_raise_r+0x1e>
 800f4de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4e2:	b94b      	cbnz	r3, 800f4f8 <_raise_r+0x32>
 800f4e4:	4620      	mov	r0, r4
 800f4e6:	f000 f831 	bl	800f54c <_getpid_r>
 800f4ea:	462a      	mov	r2, r5
 800f4ec:	4601      	mov	r1, r0
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4f4:	f000 b818 	b.w	800f528 <_kill_r>
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d00a      	beq.n	800f512 <_raise_r+0x4c>
 800f4fc:	1c59      	adds	r1, r3, #1
 800f4fe:	d103      	bne.n	800f508 <_raise_r+0x42>
 800f500:	2316      	movs	r3, #22
 800f502:	6003      	str	r3, [r0, #0]
 800f504:	2001      	movs	r0, #1
 800f506:	e7e7      	b.n	800f4d8 <_raise_r+0x12>
 800f508:	2400      	movs	r4, #0
 800f50a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f50e:	4628      	mov	r0, r5
 800f510:	4798      	blx	r3
 800f512:	2000      	movs	r0, #0
 800f514:	e7e0      	b.n	800f4d8 <_raise_r+0x12>
	...

0800f518 <raise>:
 800f518:	4b02      	ldr	r3, [pc, #8]	; (800f524 <raise+0xc>)
 800f51a:	4601      	mov	r1, r0
 800f51c:	6818      	ldr	r0, [r3, #0]
 800f51e:	f7ff bfd2 	b.w	800f4c6 <_raise_r>
 800f522:	bf00      	nop
 800f524:	200002c4 	.word	0x200002c4

0800f528 <_kill_r>:
 800f528:	b538      	push	{r3, r4, r5, lr}
 800f52a:	4d07      	ldr	r5, [pc, #28]	; (800f548 <_kill_r+0x20>)
 800f52c:	2300      	movs	r3, #0
 800f52e:	4604      	mov	r4, r0
 800f530:	4608      	mov	r0, r1
 800f532:	4611      	mov	r1, r2
 800f534:	602b      	str	r3, [r5, #0]
 800f536:	f7f4 fe0b 	bl	8004150 <_kill>
 800f53a:	1c43      	adds	r3, r0, #1
 800f53c:	d102      	bne.n	800f544 <_kill_r+0x1c>
 800f53e:	682b      	ldr	r3, [r5, #0]
 800f540:	b103      	cbz	r3, 800f544 <_kill_r+0x1c>
 800f542:	6023      	str	r3, [r4, #0]
 800f544:	bd38      	pop	{r3, r4, r5, pc}
 800f546:	bf00      	nop
 800f548:	20000d14 	.word	0x20000d14

0800f54c <_getpid_r>:
 800f54c:	f7f4 bdf8 	b.w	8004140 <_getpid>

0800f550 <__ascii_wctomb>:
 800f550:	b149      	cbz	r1, 800f566 <__ascii_wctomb+0x16>
 800f552:	2aff      	cmp	r2, #255	; 0xff
 800f554:	bf85      	ittet	hi
 800f556:	238a      	movhi	r3, #138	; 0x8a
 800f558:	6003      	strhi	r3, [r0, #0]
 800f55a:	700a      	strbls	r2, [r1, #0]
 800f55c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f560:	bf98      	it	ls
 800f562:	2001      	movls	r0, #1
 800f564:	4770      	bx	lr
 800f566:	4608      	mov	r0, r1
 800f568:	4770      	bx	lr
	...

0800f56c <_fstat_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d07      	ldr	r5, [pc, #28]	; (800f58c <_fstat_r+0x20>)
 800f570:	2300      	movs	r3, #0
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	4611      	mov	r1, r2
 800f578:	602b      	str	r3, [r5, #0]
 800f57a:	f7f4 fe48 	bl	800420e <_fstat>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	d102      	bne.n	800f588 <_fstat_r+0x1c>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	b103      	cbz	r3, 800f588 <_fstat_r+0x1c>
 800f586:	6023      	str	r3, [r4, #0]
 800f588:	bd38      	pop	{r3, r4, r5, pc}
 800f58a:	bf00      	nop
 800f58c:	20000d14 	.word	0x20000d14

0800f590 <_isatty_r>:
 800f590:	b538      	push	{r3, r4, r5, lr}
 800f592:	4d06      	ldr	r5, [pc, #24]	; (800f5ac <_isatty_r+0x1c>)
 800f594:	2300      	movs	r3, #0
 800f596:	4604      	mov	r4, r0
 800f598:	4608      	mov	r0, r1
 800f59a:	602b      	str	r3, [r5, #0]
 800f59c:	f7f4 fe47 	bl	800422e <_isatty>
 800f5a0:	1c43      	adds	r3, r0, #1
 800f5a2:	d102      	bne.n	800f5aa <_isatty_r+0x1a>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	b103      	cbz	r3, 800f5aa <_isatty_r+0x1a>
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	bd38      	pop	{r3, r4, r5, pc}
 800f5ac:	20000d14 	.word	0x20000d14

0800f5b0 <_malloc_usable_size_r>:
 800f5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5b4:	1f18      	subs	r0, r3, #4
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	bfbc      	itt	lt
 800f5ba:	580b      	ldrlt	r3, [r1, r0]
 800f5bc:	18c0      	addlt	r0, r0, r3
 800f5be:	4770      	bx	lr

0800f5c0 <atan>:
 800f5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c4:	ec55 4b10 	vmov	r4, r5, d0
 800f5c8:	4bc3      	ldr	r3, [pc, #780]	; (800f8d8 <atan+0x318>)
 800f5ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f5ce:	429e      	cmp	r6, r3
 800f5d0:	46ab      	mov	fp, r5
 800f5d2:	dd18      	ble.n	800f606 <atan+0x46>
 800f5d4:	4bc1      	ldr	r3, [pc, #772]	; (800f8dc <atan+0x31c>)
 800f5d6:	429e      	cmp	r6, r3
 800f5d8:	dc01      	bgt.n	800f5de <atan+0x1e>
 800f5da:	d109      	bne.n	800f5f0 <atan+0x30>
 800f5dc:	b144      	cbz	r4, 800f5f0 <atan+0x30>
 800f5de:	4622      	mov	r2, r4
 800f5e0:	462b      	mov	r3, r5
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	f7f0 fe69 	bl	80002bc <__adddf3>
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	460d      	mov	r5, r1
 800f5ee:	e006      	b.n	800f5fe <atan+0x3e>
 800f5f0:	f1bb 0f00 	cmp.w	fp, #0
 800f5f4:	f300 8131 	bgt.w	800f85a <atan+0x29a>
 800f5f8:	a59b      	add	r5, pc, #620	; (adr r5, 800f868 <atan+0x2a8>)
 800f5fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f5fe:	ec45 4b10 	vmov	d0, r4, r5
 800f602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f606:	4bb6      	ldr	r3, [pc, #728]	; (800f8e0 <atan+0x320>)
 800f608:	429e      	cmp	r6, r3
 800f60a:	dc14      	bgt.n	800f636 <atan+0x76>
 800f60c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f610:	429e      	cmp	r6, r3
 800f612:	dc0d      	bgt.n	800f630 <atan+0x70>
 800f614:	a396      	add	r3, pc, #600	; (adr r3, 800f870 <atan+0x2b0>)
 800f616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61a:	ee10 0a10 	vmov	r0, s0
 800f61e:	4629      	mov	r1, r5
 800f620:	f7f0 fe4c 	bl	80002bc <__adddf3>
 800f624:	4baf      	ldr	r3, [pc, #700]	; (800f8e4 <atan+0x324>)
 800f626:	2200      	movs	r2, #0
 800f628:	f7f1 fa8e 	bl	8000b48 <__aeabi_dcmpgt>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	d1e6      	bne.n	800f5fe <atan+0x3e>
 800f630:	f04f 3aff 	mov.w	sl, #4294967295
 800f634:	e02b      	b.n	800f68e <atan+0xce>
 800f636:	f000 f963 	bl	800f900 <fabs>
 800f63a:	4bab      	ldr	r3, [pc, #684]	; (800f8e8 <atan+0x328>)
 800f63c:	429e      	cmp	r6, r3
 800f63e:	ec55 4b10 	vmov	r4, r5, d0
 800f642:	f300 80bf 	bgt.w	800f7c4 <atan+0x204>
 800f646:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f64a:	429e      	cmp	r6, r3
 800f64c:	f300 80a0 	bgt.w	800f790 <atan+0x1d0>
 800f650:	ee10 2a10 	vmov	r2, s0
 800f654:	ee10 0a10 	vmov	r0, s0
 800f658:	462b      	mov	r3, r5
 800f65a:	4629      	mov	r1, r5
 800f65c:	f7f0 fe2e 	bl	80002bc <__adddf3>
 800f660:	4ba0      	ldr	r3, [pc, #640]	; (800f8e4 <atan+0x324>)
 800f662:	2200      	movs	r2, #0
 800f664:	f7f0 fe28 	bl	80002b8 <__aeabi_dsub>
 800f668:	2200      	movs	r2, #0
 800f66a:	4606      	mov	r6, r0
 800f66c:	460f      	mov	r7, r1
 800f66e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f672:	4620      	mov	r0, r4
 800f674:	4629      	mov	r1, r5
 800f676:	f7f0 fe21 	bl	80002bc <__adddf3>
 800f67a:	4602      	mov	r2, r0
 800f67c:	460b      	mov	r3, r1
 800f67e:	4630      	mov	r0, r6
 800f680:	4639      	mov	r1, r7
 800f682:	f7f1 f8fb 	bl	800087c <__aeabi_ddiv>
 800f686:	f04f 0a00 	mov.w	sl, #0
 800f68a:	4604      	mov	r4, r0
 800f68c:	460d      	mov	r5, r1
 800f68e:	4622      	mov	r2, r4
 800f690:	462b      	mov	r3, r5
 800f692:	4620      	mov	r0, r4
 800f694:	4629      	mov	r1, r5
 800f696:	f7f0 ffc7 	bl	8000628 <__aeabi_dmul>
 800f69a:	4602      	mov	r2, r0
 800f69c:	460b      	mov	r3, r1
 800f69e:	4680      	mov	r8, r0
 800f6a0:	4689      	mov	r9, r1
 800f6a2:	f7f0 ffc1 	bl	8000628 <__aeabi_dmul>
 800f6a6:	a374      	add	r3, pc, #464	; (adr r3, 800f878 <atan+0x2b8>)
 800f6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ac:	4606      	mov	r6, r0
 800f6ae:	460f      	mov	r7, r1
 800f6b0:	f7f0 ffba 	bl	8000628 <__aeabi_dmul>
 800f6b4:	a372      	add	r3, pc, #456	; (adr r3, 800f880 <atan+0x2c0>)
 800f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ba:	f7f0 fdff 	bl	80002bc <__adddf3>
 800f6be:	4632      	mov	r2, r6
 800f6c0:	463b      	mov	r3, r7
 800f6c2:	f7f0 ffb1 	bl	8000628 <__aeabi_dmul>
 800f6c6:	a370      	add	r3, pc, #448	; (adr r3, 800f888 <atan+0x2c8>)
 800f6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6cc:	f7f0 fdf6 	bl	80002bc <__adddf3>
 800f6d0:	4632      	mov	r2, r6
 800f6d2:	463b      	mov	r3, r7
 800f6d4:	f7f0 ffa8 	bl	8000628 <__aeabi_dmul>
 800f6d8:	a36d      	add	r3, pc, #436	; (adr r3, 800f890 <atan+0x2d0>)
 800f6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6de:	f7f0 fded 	bl	80002bc <__adddf3>
 800f6e2:	4632      	mov	r2, r6
 800f6e4:	463b      	mov	r3, r7
 800f6e6:	f7f0 ff9f 	bl	8000628 <__aeabi_dmul>
 800f6ea:	a36b      	add	r3, pc, #428	; (adr r3, 800f898 <atan+0x2d8>)
 800f6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f0:	f7f0 fde4 	bl	80002bc <__adddf3>
 800f6f4:	4632      	mov	r2, r6
 800f6f6:	463b      	mov	r3, r7
 800f6f8:	f7f0 ff96 	bl	8000628 <__aeabi_dmul>
 800f6fc:	a368      	add	r3, pc, #416	; (adr r3, 800f8a0 <atan+0x2e0>)
 800f6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f702:	f7f0 fddb 	bl	80002bc <__adddf3>
 800f706:	4642      	mov	r2, r8
 800f708:	464b      	mov	r3, r9
 800f70a:	f7f0 ff8d 	bl	8000628 <__aeabi_dmul>
 800f70e:	a366      	add	r3, pc, #408	; (adr r3, 800f8a8 <atan+0x2e8>)
 800f710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f714:	4680      	mov	r8, r0
 800f716:	4689      	mov	r9, r1
 800f718:	4630      	mov	r0, r6
 800f71a:	4639      	mov	r1, r7
 800f71c:	f7f0 ff84 	bl	8000628 <__aeabi_dmul>
 800f720:	a363      	add	r3, pc, #396	; (adr r3, 800f8b0 <atan+0x2f0>)
 800f722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f726:	f7f0 fdc7 	bl	80002b8 <__aeabi_dsub>
 800f72a:	4632      	mov	r2, r6
 800f72c:	463b      	mov	r3, r7
 800f72e:	f7f0 ff7b 	bl	8000628 <__aeabi_dmul>
 800f732:	a361      	add	r3, pc, #388	; (adr r3, 800f8b8 <atan+0x2f8>)
 800f734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f738:	f7f0 fdbe 	bl	80002b8 <__aeabi_dsub>
 800f73c:	4632      	mov	r2, r6
 800f73e:	463b      	mov	r3, r7
 800f740:	f7f0 ff72 	bl	8000628 <__aeabi_dmul>
 800f744:	a35e      	add	r3, pc, #376	; (adr r3, 800f8c0 <atan+0x300>)
 800f746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74a:	f7f0 fdb5 	bl	80002b8 <__aeabi_dsub>
 800f74e:	4632      	mov	r2, r6
 800f750:	463b      	mov	r3, r7
 800f752:	f7f0 ff69 	bl	8000628 <__aeabi_dmul>
 800f756:	a35c      	add	r3, pc, #368	; (adr r3, 800f8c8 <atan+0x308>)
 800f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75c:	f7f0 fdac 	bl	80002b8 <__aeabi_dsub>
 800f760:	4632      	mov	r2, r6
 800f762:	463b      	mov	r3, r7
 800f764:	f7f0 ff60 	bl	8000628 <__aeabi_dmul>
 800f768:	4602      	mov	r2, r0
 800f76a:	460b      	mov	r3, r1
 800f76c:	4640      	mov	r0, r8
 800f76e:	4649      	mov	r1, r9
 800f770:	f7f0 fda4 	bl	80002bc <__adddf3>
 800f774:	4622      	mov	r2, r4
 800f776:	462b      	mov	r3, r5
 800f778:	f7f0 ff56 	bl	8000628 <__aeabi_dmul>
 800f77c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	d14b      	bne.n	800f81e <atan+0x25e>
 800f786:	4620      	mov	r0, r4
 800f788:	4629      	mov	r1, r5
 800f78a:	f7f0 fd95 	bl	80002b8 <__aeabi_dsub>
 800f78e:	e72c      	b.n	800f5ea <atan+0x2a>
 800f790:	ee10 0a10 	vmov	r0, s0
 800f794:	4b53      	ldr	r3, [pc, #332]	; (800f8e4 <atan+0x324>)
 800f796:	2200      	movs	r2, #0
 800f798:	4629      	mov	r1, r5
 800f79a:	f7f0 fd8d 	bl	80002b8 <__aeabi_dsub>
 800f79e:	4b51      	ldr	r3, [pc, #324]	; (800f8e4 <atan+0x324>)
 800f7a0:	4606      	mov	r6, r0
 800f7a2:	460f      	mov	r7, r1
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	4629      	mov	r1, r5
 800f7aa:	f7f0 fd87 	bl	80002bc <__adddf3>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	4639      	mov	r1, r7
 800f7b6:	f7f1 f861 	bl	800087c <__aeabi_ddiv>
 800f7ba:	f04f 0a01 	mov.w	sl, #1
 800f7be:	4604      	mov	r4, r0
 800f7c0:	460d      	mov	r5, r1
 800f7c2:	e764      	b.n	800f68e <atan+0xce>
 800f7c4:	4b49      	ldr	r3, [pc, #292]	; (800f8ec <atan+0x32c>)
 800f7c6:	429e      	cmp	r6, r3
 800f7c8:	da1d      	bge.n	800f806 <atan+0x246>
 800f7ca:	ee10 0a10 	vmov	r0, s0
 800f7ce:	4b48      	ldr	r3, [pc, #288]	; (800f8f0 <atan+0x330>)
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	f7f0 fd70 	bl	80002b8 <__aeabi_dsub>
 800f7d8:	4b45      	ldr	r3, [pc, #276]	; (800f8f0 <atan+0x330>)
 800f7da:	4606      	mov	r6, r0
 800f7dc:	460f      	mov	r7, r1
 800f7de:	2200      	movs	r2, #0
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	4629      	mov	r1, r5
 800f7e4:	f7f0 ff20 	bl	8000628 <__aeabi_dmul>
 800f7e8:	4b3e      	ldr	r3, [pc, #248]	; (800f8e4 <atan+0x324>)
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	f7f0 fd66 	bl	80002bc <__adddf3>
 800f7f0:	4602      	mov	r2, r0
 800f7f2:	460b      	mov	r3, r1
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	4639      	mov	r1, r7
 800f7f8:	f7f1 f840 	bl	800087c <__aeabi_ddiv>
 800f7fc:	f04f 0a02 	mov.w	sl, #2
 800f800:	4604      	mov	r4, r0
 800f802:	460d      	mov	r5, r1
 800f804:	e743      	b.n	800f68e <atan+0xce>
 800f806:	462b      	mov	r3, r5
 800f808:	ee10 2a10 	vmov	r2, s0
 800f80c:	4939      	ldr	r1, [pc, #228]	; (800f8f4 <atan+0x334>)
 800f80e:	2000      	movs	r0, #0
 800f810:	f7f1 f834 	bl	800087c <__aeabi_ddiv>
 800f814:	f04f 0a03 	mov.w	sl, #3
 800f818:	4604      	mov	r4, r0
 800f81a:	460d      	mov	r5, r1
 800f81c:	e737      	b.n	800f68e <atan+0xce>
 800f81e:	4b36      	ldr	r3, [pc, #216]	; (800f8f8 <atan+0x338>)
 800f820:	4e36      	ldr	r6, [pc, #216]	; (800f8fc <atan+0x33c>)
 800f822:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f826:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f82a:	e9da 2300 	ldrd	r2, r3, [sl]
 800f82e:	f7f0 fd43 	bl	80002b8 <__aeabi_dsub>
 800f832:	4622      	mov	r2, r4
 800f834:	462b      	mov	r3, r5
 800f836:	f7f0 fd3f 	bl	80002b8 <__aeabi_dsub>
 800f83a:	4602      	mov	r2, r0
 800f83c:	460b      	mov	r3, r1
 800f83e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f842:	f7f0 fd39 	bl	80002b8 <__aeabi_dsub>
 800f846:	f1bb 0f00 	cmp.w	fp, #0
 800f84a:	4604      	mov	r4, r0
 800f84c:	460d      	mov	r5, r1
 800f84e:	f6bf aed6 	bge.w	800f5fe <atan+0x3e>
 800f852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f856:	461d      	mov	r5, r3
 800f858:	e6d1      	b.n	800f5fe <atan+0x3e>
 800f85a:	a51d      	add	r5, pc, #116	; (adr r5, 800f8d0 <atan+0x310>)
 800f85c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f860:	e6cd      	b.n	800f5fe <atan+0x3e>
 800f862:	bf00      	nop
 800f864:	f3af 8000 	nop.w
 800f868:	54442d18 	.word	0x54442d18
 800f86c:	bff921fb 	.word	0xbff921fb
 800f870:	8800759c 	.word	0x8800759c
 800f874:	7e37e43c 	.word	0x7e37e43c
 800f878:	e322da11 	.word	0xe322da11
 800f87c:	3f90ad3a 	.word	0x3f90ad3a
 800f880:	24760deb 	.word	0x24760deb
 800f884:	3fa97b4b 	.word	0x3fa97b4b
 800f888:	a0d03d51 	.word	0xa0d03d51
 800f88c:	3fb10d66 	.word	0x3fb10d66
 800f890:	c54c206e 	.word	0xc54c206e
 800f894:	3fb745cd 	.word	0x3fb745cd
 800f898:	920083ff 	.word	0x920083ff
 800f89c:	3fc24924 	.word	0x3fc24924
 800f8a0:	5555550d 	.word	0x5555550d
 800f8a4:	3fd55555 	.word	0x3fd55555
 800f8a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800f8ac:	bfa2b444 	.word	0xbfa2b444
 800f8b0:	52defd9a 	.word	0x52defd9a
 800f8b4:	3fadde2d 	.word	0x3fadde2d
 800f8b8:	af749a6d 	.word	0xaf749a6d
 800f8bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800f8c0:	fe231671 	.word	0xfe231671
 800f8c4:	3fbc71c6 	.word	0x3fbc71c6
 800f8c8:	9998ebc4 	.word	0x9998ebc4
 800f8cc:	3fc99999 	.word	0x3fc99999
 800f8d0:	54442d18 	.word	0x54442d18
 800f8d4:	3ff921fb 	.word	0x3ff921fb
 800f8d8:	440fffff 	.word	0x440fffff
 800f8dc:	7ff00000 	.word	0x7ff00000
 800f8e0:	3fdbffff 	.word	0x3fdbffff
 800f8e4:	3ff00000 	.word	0x3ff00000
 800f8e8:	3ff2ffff 	.word	0x3ff2ffff
 800f8ec:	40038000 	.word	0x40038000
 800f8f0:	3ff80000 	.word	0x3ff80000
 800f8f4:	bff00000 	.word	0xbff00000
 800f8f8:	08011438 	.word	0x08011438
 800f8fc:	08011418 	.word	0x08011418

0800f900 <fabs>:
 800f900:	ec51 0b10 	vmov	r0, r1, d0
 800f904:	ee10 2a10 	vmov	r2, s0
 800f908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f90c:	ec43 2b10 	vmov	d0, r2, r3
 800f910:	4770      	bx	lr

0800f912 <atan2>:
 800f912:	f000 b82d 	b.w	800f970 <__ieee754_atan2>

0800f916 <sqrt>:
 800f916:	b538      	push	{r3, r4, r5, lr}
 800f918:	ed2d 8b02 	vpush	{d8}
 800f91c:	ec55 4b10 	vmov	r4, r5, d0
 800f920:	f000 f8f0 	bl	800fb04 <__ieee754_sqrt>
 800f924:	4622      	mov	r2, r4
 800f926:	462b      	mov	r3, r5
 800f928:	4620      	mov	r0, r4
 800f92a:	4629      	mov	r1, r5
 800f92c:	eeb0 8a40 	vmov.f32	s16, s0
 800f930:	eef0 8a60 	vmov.f32	s17, s1
 800f934:	f7f1 f912 	bl	8000b5c <__aeabi_dcmpun>
 800f938:	b990      	cbnz	r0, 800f960 <sqrt+0x4a>
 800f93a:	2200      	movs	r2, #0
 800f93c:	2300      	movs	r3, #0
 800f93e:	4620      	mov	r0, r4
 800f940:	4629      	mov	r1, r5
 800f942:	f7f1 f8e3 	bl	8000b0c <__aeabi_dcmplt>
 800f946:	b158      	cbz	r0, 800f960 <sqrt+0x4a>
 800f948:	f7fb fc40 	bl	800b1cc <__errno>
 800f94c:	2321      	movs	r3, #33	; 0x21
 800f94e:	6003      	str	r3, [r0, #0]
 800f950:	2200      	movs	r2, #0
 800f952:	2300      	movs	r3, #0
 800f954:	4610      	mov	r0, r2
 800f956:	4619      	mov	r1, r3
 800f958:	f7f0 ff90 	bl	800087c <__aeabi_ddiv>
 800f95c:	ec41 0b18 	vmov	d8, r0, r1
 800f960:	eeb0 0a48 	vmov.f32	s0, s16
 800f964:	eef0 0a68 	vmov.f32	s1, s17
 800f968:	ecbd 8b02 	vpop	{d8}
 800f96c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f970 <__ieee754_atan2>:
 800f970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f974:	ec57 6b11 	vmov	r6, r7, d1
 800f978:	4273      	negs	r3, r6
 800f97a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800fb00 <__ieee754_atan2+0x190>
 800f97e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f982:	4333      	orrs	r3, r6
 800f984:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f988:	4573      	cmp	r3, lr
 800f98a:	ec51 0b10 	vmov	r0, r1, d0
 800f98e:	ee11 8a10 	vmov	r8, s2
 800f992:	d80a      	bhi.n	800f9aa <__ieee754_atan2+0x3a>
 800f994:	4244      	negs	r4, r0
 800f996:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f99a:	4304      	orrs	r4, r0
 800f99c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f9a0:	4574      	cmp	r4, lr
 800f9a2:	ee10 9a10 	vmov	r9, s0
 800f9a6:	468c      	mov	ip, r1
 800f9a8:	d907      	bls.n	800f9ba <__ieee754_atan2+0x4a>
 800f9aa:	4632      	mov	r2, r6
 800f9ac:	463b      	mov	r3, r7
 800f9ae:	f7f0 fc85 	bl	80002bc <__adddf3>
 800f9b2:	ec41 0b10 	vmov	d0, r0, r1
 800f9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f9be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f9c2:	4334      	orrs	r4, r6
 800f9c4:	d103      	bne.n	800f9ce <__ieee754_atan2+0x5e>
 800f9c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9ca:	f7ff bdf9 	b.w	800f5c0 <atan>
 800f9ce:	17bc      	asrs	r4, r7, #30
 800f9d0:	f004 0402 	and.w	r4, r4, #2
 800f9d4:	ea53 0909 	orrs.w	r9, r3, r9
 800f9d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f9dc:	d107      	bne.n	800f9ee <__ieee754_atan2+0x7e>
 800f9de:	2c02      	cmp	r4, #2
 800f9e0:	d060      	beq.n	800faa4 <__ieee754_atan2+0x134>
 800f9e2:	2c03      	cmp	r4, #3
 800f9e4:	d1e5      	bne.n	800f9b2 <__ieee754_atan2+0x42>
 800f9e6:	a142      	add	r1, pc, #264	; (adr r1, 800faf0 <__ieee754_atan2+0x180>)
 800f9e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9ec:	e7e1      	b.n	800f9b2 <__ieee754_atan2+0x42>
 800f9ee:	ea52 0808 	orrs.w	r8, r2, r8
 800f9f2:	d106      	bne.n	800fa02 <__ieee754_atan2+0x92>
 800f9f4:	f1bc 0f00 	cmp.w	ip, #0
 800f9f8:	da5f      	bge.n	800faba <__ieee754_atan2+0x14a>
 800f9fa:	a13f      	add	r1, pc, #252	; (adr r1, 800faf8 <__ieee754_atan2+0x188>)
 800f9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa00:	e7d7      	b.n	800f9b2 <__ieee754_atan2+0x42>
 800fa02:	4572      	cmp	r2, lr
 800fa04:	d10f      	bne.n	800fa26 <__ieee754_atan2+0xb6>
 800fa06:	4293      	cmp	r3, r2
 800fa08:	f104 34ff 	add.w	r4, r4, #4294967295
 800fa0c:	d107      	bne.n	800fa1e <__ieee754_atan2+0xae>
 800fa0e:	2c02      	cmp	r4, #2
 800fa10:	d84c      	bhi.n	800faac <__ieee754_atan2+0x13c>
 800fa12:	4b35      	ldr	r3, [pc, #212]	; (800fae8 <__ieee754_atan2+0x178>)
 800fa14:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fa18:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fa1c:	e7c9      	b.n	800f9b2 <__ieee754_atan2+0x42>
 800fa1e:	2c02      	cmp	r4, #2
 800fa20:	d848      	bhi.n	800fab4 <__ieee754_atan2+0x144>
 800fa22:	4b32      	ldr	r3, [pc, #200]	; (800faec <__ieee754_atan2+0x17c>)
 800fa24:	e7f6      	b.n	800fa14 <__ieee754_atan2+0xa4>
 800fa26:	4573      	cmp	r3, lr
 800fa28:	d0e4      	beq.n	800f9f4 <__ieee754_atan2+0x84>
 800fa2a:	1a9b      	subs	r3, r3, r2
 800fa2c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fa30:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fa34:	da1e      	bge.n	800fa74 <__ieee754_atan2+0x104>
 800fa36:	2f00      	cmp	r7, #0
 800fa38:	da01      	bge.n	800fa3e <__ieee754_atan2+0xce>
 800fa3a:	323c      	adds	r2, #60	; 0x3c
 800fa3c:	db1e      	blt.n	800fa7c <__ieee754_atan2+0x10c>
 800fa3e:	4632      	mov	r2, r6
 800fa40:	463b      	mov	r3, r7
 800fa42:	f7f0 ff1b 	bl	800087c <__aeabi_ddiv>
 800fa46:	ec41 0b10 	vmov	d0, r0, r1
 800fa4a:	f7ff ff59 	bl	800f900 <fabs>
 800fa4e:	f7ff fdb7 	bl	800f5c0 <atan>
 800fa52:	ec51 0b10 	vmov	r0, r1, d0
 800fa56:	2c01      	cmp	r4, #1
 800fa58:	d013      	beq.n	800fa82 <__ieee754_atan2+0x112>
 800fa5a:	2c02      	cmp	r4, #2
 800fa5c:	d015      	beq.n	800fa8a <__ieee754_atan2+0x11a>
 800fa5e:	2c00      	cmp	r4, #0
 800fa60:	d0a7      	beq.n	800f9b2 <__ieee754_atan2+0x42>
 800fa62:	a319      	add	r3, pc, #100	; (adr r3, 800fac8 <__ieee754_atan2+0x158>)
 800fa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa68:	f7f0 fc26 	bl	80002b8 <__aeabi_dsub>
 800fa6c:	a318      	add	r3, pc, #96	; (adr r3, 800fad0 <__ieee754_atan2+0x160>)
 800fa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa72:	e014      	b.n	800fa9e <__ieee754_atan2+0x12e>
 800fa74:	a118      	add	r1, pc, #96	; (adr r1, 800fad8 <__ieee754_atan2+0x168>)
 800fa76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa7a:	e7ec      	b.n	800fa56 <__ieee754_atan2+0xe6>
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	2100      	movs	r1, #0
 800fa80:	e7e9      	b.n	800fa56 <__ieee754_atan2+0xe6>
 800fa82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa86:	4619      	mov	r1, r3
 800fa88:	e793      	b.n	800f9b2 <__ieee754_atan2+0x42>
 800fa8a:	a30f      	add	r3, pc, #60	; (adr r3, 800fac8 <__ieee754_atan2+0x158>)
 800fa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa90:	f7f0 fc12 	bl	80002b8 <__aeabi_dsub>
 800fa94:	4602      	mov	r2, r0
 800fa96:	460b      	mov	r3, r1
 800fa98:	a10d      	add	r1, pc, #52	; (adr r1, 800fad0 <__ieee754_atan2+0x160>)
 800fa9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa9e:	f7f0 fc0b 	bl	80002b8 <__aeabi_dsub>
 800faa2:	e786      	b.n	800f9b2 <__ieee754_atan2+0x42>
 800faa4:	a10a      	add	r1, pc, #40	; (adr r1, 800fad0 <__ieee754_atan2+0x160>)
 800faa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800faaa:	e782      	b.n	800f9b2 <__ieee754_atan2+0x42>
 800faac:	a10c      	add	r1, pc, #48	; (adr r1, 800fae0 <__ieee754_atan2+0x170>)
 800faae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fab2:	e77e      	b.n	800f9b2 <__ieee754_atan2+0x42>
 800fab4:	2000      	movs	r0, #0
 800fab6:	2100      	movs	r1, #0
 800fab8:	e77b      	b.n	800f9b2 <__ieee754_atan2+0x42>
 800faba:	a107      	add	r1, pc, #28	; (adr r1, 800fad8 <__ieee754_atan2+0x168>)
 800fabc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fac0:	e777      	b.n	800f9b2 <__ieee754_atan2+0x42>
 800fac2:	bf00      	nop
 800fac4:	f3af 8000 	nop.w
 800fac8:	33145c07 	.word	0x33145c07
 800facc:	3ca1a626 	.word	0x3ca1a626
 800fad0:	54442d18 	.word	0x54442d18
 800fad4:	400921fb 	.word	0x400921fb
 800fad8:	54442d18 	.word	0x54442d18
 800fadc:	3ff921fb 	.word	0x3ff921fb
 800fae0:	54442d18 	.word	0x54442d18
 800fae4:	3fe921fb 	.word	0x3fe921fb
 800fae8:	08011458 	.word	0x08011458
 800faec:	08011470 	.word	0x08011470
 800faf0:	54442d18 	.word	0x54442d18
 800faf4:	c00921fb 	.word	0xc00921fb
 800faf8:	54442d18 	.word	0x54442d18
 800fafc:	bff921fb 	.word	0xbff921fb
 800fb00:	7ff00000 	.word	0x7ff00000

0800fb04 <__ieee754_sqrt>:
 800fb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb08:	ec55 4b10 	vmov	r4, r5, d0
 800fb0c:	4e55      	ldr	r6, [pc, #340]	; (800fc64 <__ieee754_sqrt+0x160>)
 800fb0e:	43ae      	bics	r6, r5
 800fb10:	ee10 0a10 	vmov	r0, s0
 800fb14:	ee10 3a10 	vmov	r3, s0
 800fb18:	462a      	mov	r2, r5
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	d110      	bne.n	800fb40 <__ieee754_sqrt+0x3c>
 800fb1e:	ee10 2a10 	vmov	r2, s0
 800fb22:	462b      	mov	r3, r5
 800fb24:	f7f0 fd80 	bl	8000628 <__aeabi_dmul>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	4629      	mov	r1, r5
 800fb30:	f7f0 fbc4 	bl	80002bc <__adddf3>
 800fb34:	4604      	mov	r4, r0
 800fb36:	460d      	mov	r5, r1
 800fb38:	ec45 4b10 	vmov	d0, r4, r5
 800fb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb40:	2d00      	cmp	r5, #0
 800fb42:	dc10      	bgt.n	800fb66 <__ieee754_sqrt+0x62>
 800fb44:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fb48:	4330      	orrs	r0, r6
 800fb4a:	d0f5      	beq.n	800fb38 <__ieee754_sqrt+0x34>
 800fb4c:	b15d      	cbz	r5, 800fb66 <__ieee754_sqrt+0x62>
 800fb4e:	ee10 2a10 	vmov	r2, s0
 800fb52:	462b      	mov	r3, r5
 800fb54:	ee10 0a10 	vmov	r0, s0
 800fb58:	f7f0 fbae 	bl	80002b8 <__aeabi_dsub>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	460b      	mov	r3, r1
 800fb60:	f7f0 fe8c 	bl	800087c <__aeabi_ddiv>
 800fb64:	e7e6      	b.n	800fb34 <__ieee754_sqrt+0x30>
 800fb66:	1512      	asrs	r2, r2, #20
 800fb68:	d074      	beq.n	800fc54 <__ieee754_sqrt+0x150>
 800fb6a:	07d4      	lsls	r4, r2, #31
 800fb6c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fb70:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fb74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fb78:	bf5e      	ittt	pl
 800fb7a:	0fda      	lsrpl	r2, r3, #31
 800fb7c:	005b      	lslpl	r3, r3, #1
 800fb7e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fb82:	2400      	movs	r4, #0
 800fb84:	0fda      	lsrs	r2, r3, #31
 800fb86:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fb8a:	107f      	asrs	r7, r7, #1
 800fb8c:	005b      	lsls	r3, r3, #1
 800fb8e:	2516      	movs	r5, #22
 800fb90:	4620      	mov	r0, r4
 800fb92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fb96:	1886      	adds	r6, r0, r2
 800fb98:	428e      	cmp	r6, r1
 800fb9a:	bfde      	ittt	le
 800fb9c:	1b89      	suble	r1, r1, r6
 800fb9e:	18b0      	addle	r0, r6, r2
 800fba0:	18a4      	addle	r4, r4, r2
 800fba2:	0049      	lsls	r1, r1, #1
 800fba4:	3d01      	subs	r5, #1
 800fba6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fbaa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fbae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fbb2:	d1f0      	bne.n	800fb96 <__ieee754_sqrt+0x92>
 800fbb4:	462a      	mov	r2, r5
 800fbb6:	f04f 0e20 	mov.w	lr, #32
 800fbba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fbbe:	4281      	cmp	r1, r0
 800fbc0:	eb06 0c05 	add.w	ip, r6, r5
 800fbc4:	dc02      	bgt.n	800fbcc <__ieee754_sqrt+0xc8>
 800fbc6:	d113      	bne.n	800fbf0 <__ieee754_sqrt+0xec>
 800fbc8:	459c      	cmp	ip, r3
 800fbca:	d811      	bhi.n	800fbf0 <__ieee754_sqrt+0xec>
 800fbcc:	f1bc 0f00 	cmp.w	ip, #0
 800fbd0:	eb0c 0506 	add.w	r5, ip, r6
 800fbd4:	da43      	bge.n	800fc5e <__ieee754_sqrt+0x15a>
 800fbd6:	2d00      	cmp	r5, #0
 800fbd8:	db41      	blt.n	800fc5e <__ieee754_sqrt+0x15a>
 800fbda:	f100 0801 	add.w	r8, r0, #1
 800fbde:	1a09      	subs	r1, r1, r0
 800fbe0:	459c      	cmp	ip, r3
 800fbe2:	bf88      	it	hi
 800fbe4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800fbe8:	eba3 030c 	sub.w	r3, r3, ip
 800fbec:	4432      	add	r2, r6
 800fbee:	4640      	mov	r0, r8
 800fbf0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fbf4:	f1be 0e01 	subs.w	lr, lr, #1
 800fbf8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fbfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fc00:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fc04:	d1db      	bne.n	800fbbe <__ieee754_sqrt+0xba>
 800fc06:	430b      	orrs	r3, r1
 800fc08:	d006      	beq.n	800fc18 <__ieee754_sqrt+0x114>
 800fc0a:	1c50      	adds	r0, r2, #1
 800fc0c:	bf13      	iteet	ne
 800fc0e:	3201      	addne	r2, #1
 800fc10:	3401      	addeq	r4, #1
 800fc12:	4672      	moveq	r2, lr
 800fc14:	f022 0201 	bicne.w	r2, r2, #1
 800fc18:	1063      	asrs	r3, r4, #1
 800fc1a:	0852      	lsrs	r2, r2, #1
 800fc1c:	07e1      	lsls	r1, r4, #31
 800fc1e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fc22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fc26:	bf48      	it	mi
 800fc28:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fc2c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fc30:	4614      	mov	r4, r2
 800fc32:	e781      	b.n	800fb38 <__ieee754_sqrt+0x34>
 800fc34:	0ad9      	lsrs	r1, r3, #11
 800fc36:	3815      	subs	r0, #21
 800fc38:	055b      	lsls	r3, r3, #21
 800fc3a:	2900      	cmp	r1, #0
 800fc3c:	d0fa      	beq.n	800fc34 <__ieee754_sqrt+0x130>
 800fc3e:	02cd      	lsls	r5, r1, #11
 800fc40:	d50a      	bpl.n	800fc58 <__ieee754_sqrt+0x154>
 800fc42:	f1c2 0420 	rsb	r4, r2, #32
 800fc46:	fa23 f404 	lsr.w	r4, r3, r4
 800fc4a:	1e55      	subs	r5, r2, #1
 800fc4c:	4093      	lsls	r3, r2
 800fc4e:	4321      	orrs	r1, r4
 800fc50:	1b42      	subs	r2, r0, r5
 800fc52:	e78a      	b.n	800fb6a <__ieee754_sqrt+0x66>
 800fc54:	4610      	mov	r0, r2
 800fc56:	e7f0      	b.n	800fc3a <__ieee754_sqrt+0x136>
 800fc58:	0049      	lsls	r1, r1, #1
 800fc5a:	3201      	adds	r2, #1
 800fc5c:	e7ef      	b.n	800fc3e <__ieee754_sqrt+0x13a>
 800fc5e:	4680      	mov	r8, r0
 800fc60:	e7bd      	b.n	800fbde <__ieee754_sqrt+0xda>
 800fc62:	bf00      	nop
 800fc64:	7ff00000 	.word	0x7ff00000

0800fc68 <_init>:
 800fc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc6a:	bf00      	nop
 800fc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc6e:	bc08      	pop	{r3}
 800fc70:	469e      	mov	lr, r3
 800fc72:	4770      	bx	lr

0800fc74 <_fini>:
 800fc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc76:	bf00      	nop
 800fc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc7a:	bc08      	pop	{r3}
 800fc7c:	469e      	mov	lr, r3
 800fc7e:	4770      	bx	lr
