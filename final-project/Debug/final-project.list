
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007294  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08007434  08007434  00017434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d4  080078d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078dc  080078dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078dc  080078dc  000178dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080078e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000070  08007954  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08007954  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015772  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003637  00000000  00000000  00035812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00038e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  0003a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a19a  00000000  00000000  0003b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001accb  00000000  00000000  0005542a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097647  00000000  00000000  000700f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010773c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005228  00000000  00000000  0010778c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800741c 	.word	0x0800741c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800741c 	.word	0x0800741c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4613      	mov	r3, r2
 80005c0:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2200      	movs	r2, #0
 80005cc:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2200      	movs	r2, #0
 80005d2:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	79fa      	ldrb	r2, [r7, #7]
 80005d8:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	461a      	mov	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f006 f9ed 	bl	80069c4 <memset>
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	70fb      	strb	r3, [r7, #3]
	if (cBuffer_Length(cbuffer) == cbuffer->size-1)
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f8c4 	bl	800078c <cBuffer_Length>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	3b01      	subs	r3, #1
 800060e:	429a      	cmp	r2, r3
 8000610:	d101      	bne.n	8000616 <cBuffer_Write+0x24>
	{
		return CBUFFER_FULL;
 8000612:	2301      	movs	r3, #1
 8000614:	e016      	b.n	8000644 <cBuffer_Write+0x52>
	}
	cbuffer->buffer[cbuffer->write] = data;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	7992      	ldrb	r2, [r2, #6]
 800061e:	4413      	add	r3, r2
 8000620:	78fa      	ldrb	r2, [r7, #3]
 8000622:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	799b      	ldrb	r3, [r3, #6]
 8000628:	3301      	adds	r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	b25a      	sxtb	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	3b01      	subs	r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	b25b      	sxtb	r3, r3
 8000638:	4013      	ands	r3, r2
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <cBuffer_Kill>:

void cBuffer_Kill(cBuffer_t* cbuffer)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	cbuffer->read = 0;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	719a      	strb	r2, [r3, #6]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	461a      	mov	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f006 f9aa 	bl	80069c4 <memset>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <cBuffer_isFull>:

CBUFFER_ERR cBuffer_isFull(cBuffer_t* cbuffer)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if (cBuffer_Length(cbuffer) == cbuffer->size-1)
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 f883 	bl	800078c <cBuffer_Length>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	429a      	cmp	r2, r3
 8000692:	d101      	bne.n	8000698 <cBuffer_isFull+0x20>
	{
			return CBUFFER_FULL;
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <cBuffer_isFull+0x22>
	}
	else
		return CBUFFER_OK;
 8000698:	2300      	movs	r3, #0

}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4613      	mov	r3, r2
 80006b0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 80006b6:	2300      	movs	r3, #0
 80006b8:	757b      	strb	r3, [r7, #21]
	for (i=cbuffer->read; i < cbuffer->write;i++)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	795b      	ldrb	r3, [r3, #5]
 80006be:	75fb      	strb	r3, [r7, #23]
 80006c0:	e00c      	b.n	80006dc <cBuffer_GetString+0x3a>
	{
		//if (cbuffer->buffer[i] == sTerminator) // A string is found - copy it to the outgoing buffer
		if (cbuffer->buffer[i] == '\r') // A string is found - copy it to the outgoing buffer
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b0d      	cmp	r3, #13
 80006ce:	d102      	bne.n	80006d6 <cBuffer_GetString+0x34>
		{
			found = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	75bb      	strb	r3, [r7, #22]
			break;
 80006d4:	e007      	b.n	80006e6 <cBuffer_GetString+0x44>
	for (i=cbuffer->read; i < cbuffer->write;i++)
 80006d6:	7dfb      	ldrb	r3, [r7, #23]
 80006d8:	3301      	adds	r3, #1
 80006da:	75fb      	strb	r3, [r7, #23]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	799b      	ldrb	r3, [r3, #6]
 80006e0:	7dfa      	ldrb	r2, [r7, #23]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d3ed      	bcc.n	80006c2 <cBuffer_GetString+0x20>
		}
	}
	if (found)
 80006e6:	7dbb      	ldrb	r3, [r7, #22]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d01f      	beq.n	800072c <cBuffer_GetString+0x8a>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, i);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	795b      	ldrb	r3, [r3, #5]
 80006f0:	7dfa      	ldrb	r2, [r7, #23]
 80006f2:	4619      	mov	r1, r3
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 f862 	bl	80007be <cBuffer_LengthCustom>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f000 f816 	bl	800073a <cBuffer_Read>
 800070e:	4603      	mov	r3, r0
 8000710:	757b      	strb	r3, [r7, #21]
			*(string++) = chr;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	60ba      	str	r2, [r7, #8]
 8000718:	7d3a      	ldrb	r2, [r7, #20]
 800071a:	701a      	strb	r2, [r3, #0]
		} while (chr != sTerminator || err != CBUFFER_OK);
 800071c:	7d3b      	ldrb	r3, [r7, #20]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	429a      	cmp	r2, r3
 8000722:	d1ee      	bne.n	8000702 <cBuffer_GetString+0x60>
 8000724:	7d7b      	ldrb	r3, [r7, #21]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1eb      	bne.n	8000702 <cBuffer_GetString+0x60>
 800072a:	e001      	b.n	8000730 <cBuffer_GetString+0x8e>
	}
	else
		err = CBUFFER_NO_STRING;
 800072c:	2303      	movs	r3, #3
 800072e:	757b      	strb	r3, [r7, #21]


	return err;
 8000730:	7d7b      	ldrb	r3, [r7, #21]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f821 	bl	800078c <cBuffer_Length>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8000750:	2302      	movs	r3, #2
 8000752:	e017      	b.n	8000784 <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7952      	ldrb	r2, [r2, #5]
 800075c:	4413      	add	r3, r2
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	795b      	ldrb	r3, [r3, #5]
 8000768:	3301      	adds	r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	b25a      	sxtb	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	b25b      	sxtb	r3, r3
 8000778:	4013      	ands	r3, r2
 800077a:	b25b      	sxtb	r3, r3
 800077c:	b2da      	uxtb	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	799a      	ldrb	r2, [r3, #6]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	b25a      	sxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	b2db      	uxtb	r3, r3

}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	70fb      	strb	r3, [r7, #3]
 80007ca:	4613      	mov	r3, r2
 80007cc:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80007ce:	78ba      	ldrb	r2, [r7, #2]
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	b25a      	sxtb	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	3b01      	subs	r3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	4013      	ands	r3, r2
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 80007fe:	2120      	movs	r1, #32
 8000800:	6838      	ldr	r0, [r7, #0]
 8000802:	f006 f907 	bl	8006a14 <strchr>
 8000806:	60f8      	str	r0, [r7, #12]
	if (cmdEnd == 0x0)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10a      	bne.n	8000824 <ConsoleCommandMatch+0x30>
	{
			return strcmp(name,buffer) == 0;
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff fce5 	bl	80001e0 <strcmp>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf0c      	ite	eq
 800081c:	2301      	moveq	r3, #1
 800081e:	2300      	movne	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	e00d      	b.n	8000840 <ConsoleCommandMatch+0x4c>
	}
	else

	{
		return strncmp(name,buffer,cmdEnd - buffer) == 0;
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	461a      	mov	r2, r3
 800082c:	6839      	ldr	r1, [r7, #0]
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f006 f905 	bl	8006a3e <strncmp>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf0c      	ite	eq
 800083a:	2301      	moveq	r3, #1
 800083c:	2300      	movne	r3, #0
 800083e:	b2db      	uxtb	r3, r3
		}
		i++;
	}

	return result;*/
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ConsoleInit>:
}

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 800084e:	f000 fa7f 	bl	8000d50 <ConsoleIoInit>
	ConsoleIoSendString("Dodec Timer - A Thousand Projects");
 8000852:	480e      	ldr	r0, [pc, #56]	; (800088c <ConsoleInit+0x44>)
 8000854:	f000 fac0 	bl	8000dd8 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <ConsoleInit+0x48>)
 800085a:	f000 fabd 	bl	8000dd8 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 800085e:	480d      	ldr	r0, [pc, #52]	; (8000894 <ConsoleInit+0x4c>)
 8000860:	f000 faba 	bl	8000dd8 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	e007      	b.n	800087a <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <ConsoleInit+0x50>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b63      	cmp	r3, #99	; 0x63
 800087e:	d9f4      	bls.n	800086a <ConsoleInit+0x22>
	}

}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08007434 	.word	0x08007434
 8000890:	08007458 	.word	0x08007458
 8000894:	0800745c 	.word	0x0800745c
 8000898:	2000008c 	.word	0x2000008c

0800089c <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;


	if (ConsoleIoReceive(mReceiveBuffer) == CONSOLE_SUCCESS )  // have complete string, find command
 80008a2:	483d      	ldr	r0, [pc, #244]	; (8000998 <ConsoleProcess+0xfc>)
 80008a4:	f000 fa6c 	bl	8000d80 <ConsoleIoReceive>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d170      	bne.n	8000990 <ConsoleProcess+0xf4>
	{
		if ('\0' == mReceiveBuffer[0] )
 80008ae:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <ConsoleProcess+0xfc>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d106      	bne.n	80008c4 <ConsoleProcess+0x28>
		{
			ConsoleIoSendString(STR_ENDLINE);
 80008b6:	4839      	ldr	r0, [pc, #228]	; (800099c <ConsoleProcess+0x100>)
 80008b8:	f000 fa8e 	bl	8000dd8 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 80008bc:	4838      	ldr	r0, [pc, #224]	; (80009a0 <ConsoleProcess+0x104>)
 80008be:	f000 fa8b 	bl	8000dd8 <ConsoleIoSendString>
			return;
 80008c2:	e065      	b.n	8000990 <ConsoleProcess+0xf4>
		}
		commandTable = ConsoleCommandsGetTable();
 80008c4:	f000 fa1c 	bl	8000d00 <ConsoleCommandsGetTable>
 80008c8:	6078      	str	r0, [r7, #4]
		cmdIndex = 0u;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
		found = NOT_FOUND;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	60bb      	str	r3, [r7, #8]
		while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80008d4:	e03d      	b.n	8000952 <ConsoleProcess+0xb6>
		{
			if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	461a      	mov	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	492b      	ldr	r1, [pc, #172]	; (8000998 <ConsoleProcess+0xfc>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ff82 	bl	80007f4 <ConsoleCommandMatch>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d02a      	beq.n	800094c <ConsoleProcess+0xb0>
			{
				result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	4613      	mov	r3, r2
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	4413      	add	r3, r2
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	4823      	ldr	r0, [pc, #140]	; (8000998 <ConsoleProcess+0xfc>)
 800090a:	4798      	blx	r3
 800090c:	4603      	mov	r3, r0
 800090e:	70fb      	strb	r3, [r7, #3]
				if ( COMMAND_SUCCESS != result )
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d017      	beq.n	8000946 <ConsoleProcess+0xaa>
				{
					ConsoleIoSendString("Error: ");
 8000916:	4823      	ldr	r0, [pc, #140]	; (80009a4 <ConsoleProcess+0x108>)
 8000918:	f000 fa5e 	bl	8000dd8 <ConsoleIoSendString>
					ConsoleIoSendString((char*)mReceiveBuffer);
 800091c:	481e      	ldr	r0, [pc, #120]	; (8000998 <ConsoleProcess+0xfc>)
 800091e:	f000 fa5b 	bl	8000dd8 <ConsoleIoSendString>

					ConsoleIoSendString("Help: ");
 8000922:	4821      	ldr	r0, [pc, #132]	; (80009a8 <ConsoleProcess+0x10c>)
 8000924:	f000 fa58 	bl	8000dd8 <ConsoleIoSendString>
					ConsoleIoSendString(commandTable[cmdIndex].help);
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	4613      	mov	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	4413      	add	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	461a      	mov	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	3308      	adds	r3, #8
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fa4c 	bl	8000dd8 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000940:	4816      	ldr	r0, [pc, #88]	; (800099c <ConsoleProcess+0x100>)
 8000942:	f000 fa49 	bl	8000dd8 <ConsoleIoSendString>
				}
				found = cmdIndex;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	e002      	b.n	8000952 <ConsoleProcess+0xb6>
			}
			else
			{
				cmdIndex++;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3301      	adds	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
		while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4613      	mov	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	461a      	mov	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <ConsoleProcess+0xd4>
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096e:	d0b2      	beq.n	80008d6 <ConsoleProcess+0x3a>
			}
		}
		if (found == NOT_FOUND)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000976:	d105      	bne.n	8000984 <ConsoleProcess+0xe8>
		{
			ConsoleIoSendString("Command not found: ");
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <ConsoleProcess+0x110>)
 800097a:	f000 fa2d 	bl	8000dd8 <ConsoleIoSendString>
			ConsoleIoSendString((char*)mReceiveBuffer);
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <ConsoleProcess+0xfc>)
 8000980:	f000 fa2a 	bl	8000dd8 <ConsoleIoSendString>

		}
		ConsoleIoSendString(STR_ENDLINE);
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <ConsoleProcess+0x100>)
 8000986:	f000 fa27 	bl	8000dd8 <ConsoleIoSendString>
		ConsoleIoSendString(CONSOLE_PROMPT);
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <ConsoleProcess+0x104>)
 800098c:	f000 fa24 	bl	8000dd8 <ConsoleIoSendString>
	}
}
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000008c 	.word	0x2000008c
 800099c:	08007458 	.word	0x08007458
 80009a0:	0800745c 	.word	0x0800745c
 80009a4:	08007460 	.word	0x08007460
 80009a8:	08007468 	.word	0x08007468
 80009ac:	08007470 	.word	0x08007470

080009b0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	460b      	mov	r3, r1
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80009c6:	2300      	movs	r3, #0
 80009c8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80009ca:	e00b      	b.n	80009e4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	4413      	add	r3, r2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b20      	cmp	r3, #32
 80009d6:	d102      	bne.n	80009de <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	3301      	adds	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3301      	adds	r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80009e4:	7afb      	ldrb	r3, [r7, #11]
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d002      	beq.n	80009f2 <ConsoleParamFindN+0x42>
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	2b63      	cmp	r3, #99	; 0x63
 80009f0:	d9ec      	bls.n	80009cc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	2b64      	cmp	r3, #100	; 0x64
 80009f6:	d102      	bne.n	80009fe <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009f8:	2310      	movs	r3, #16
 80009fa:	75fb      	strb	r3, [r7, #23]
 80009fc:	e002      	b.n	8000a04 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	69fa      	ldr	r2, [r7, #28]
 8000a02:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	; 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b08a      	sub	sp, #40	; 0x28
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000a24:	f107 021c 	add.w	r2, r7, #28
 8000a28:	7afb      	ldrb	r3, [r7, #11]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f7ff ffbf 	bl	80009b0 <ConsoleParamFindN>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	4413      	add	r3, r2
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 8000a4c:	e011      	b.n	8000a72 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000a4e:	f107 0214 	add.w	r2, r7, #20
 8000a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a54:	4413      	add	r3, r2
 8000a56:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000a5a:	701a      	strb	r2, [r3, #0]
		i++;
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	3301      	adds	r3, #1
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	4413      	add	r3, r2
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 8000a72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 8000a7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a7e:	2b20      	cmp	r3, #32
 8000a80:	d002      	beq.n	8000a88 <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d9e2      	bls.n	8000a4e <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	d102      	bne.n	8000a94 <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d10e      	bne.n	8000aba <ConsoleReceiveParamInt16+0xa8>
	{
		str[i] = NULL_CHAR;
 8000a9c:	f107 0214 	add.w	r2, r7, #20
 8000aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa2:	4413      	add	r3, r2
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4618      	mov	r0, r3
 8000aae:	f005 ff5b 	bl	8006968 <atoi>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b21a      	sxth	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f982 	bl	8000dd8 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <ConsoleCommandLedToggle>:




static eCommandResult_T ConsoleCommandLedToggle(const char buffer[])
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result;
	int16_t parameterInt;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	461a      	mov	r2, r3
 8000aee:	2101      	movs	r1, #1
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff8e 	bl	8000a12 <ConsoleReceiveParamInt16>
 8000af6:	4603      	mov	r3, r0
 8000af8:	73fb      	strb	r3, [r7, #15]
	if (result == COMMAND_PARAMETER_ERROR)
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	2b10      	cmp	r3, #16
 8000afe:	d101      	bne.n	8000b04 <ConsoleCommandLedToggle+0x24>
			return result;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	e011      	b.n	8000b28 <ConsoleCommandLedToggle+0x48>
	if (0 == parameterInt )
 8000b04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d106      	bne.n	8000b1a <ConsoleCommandLedToggle+0x3a>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <ConsoleCommandLedToggle+0x50>)
 8000b14:	f002 f88e 	bl	8002c34 <HAL_GPIO_WritePin>
 8000b18:	e005      	b.n	8000b26 <ConsoleCommandLedToggle+0x46>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <ConsoleCommandLedToggle+0x50>)
 8000b22:	f002 f887 	bl	8002c34 <HAL_GPIO_WritePin>

	return COMMAND_SUCCESS;
 8000b26:	2300      	movs	r3, #0

}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40020800 	.word	0x40020800

08000b34 <ConsoleCommandGyroQuery>:

static eCommandResult_T ConsoleCommandGyroQuery(const char buffer[])
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	uint8_t state = gy521_ready();
 8000b3c:	f000 f962 	bl	8000e04 <gy521_ready>
 8000b40:	4603      	mov	r3, r0
 8000b42:	73fb      	strb	r3, [r7, #15]
	if (state)
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <ConsoleCommandGyroQuery+0x1e>
	{
		ConsoleIoSendString("GYRO is Spinning :-)");
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <ConsoleCommandGyroQuery+0x30>)
 8000b4c:	f000 f944 	bl	8000dd8 <ConsoleIoSendString>
 8000b50:	e002      	b.n	8000b58 <ConsoleCommandGyroQuery+0x24>
	}
	else
	{
			ConsoleIoSendString("GYRO is on holiday :-(");
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <ConsoleCommandGyroQuery+0x34>)
 8000b54:	f000 f940 	bl	8000dd8 <ConsoleIoSendString>
	}
	return COMMAND_SUCCESS;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	080074b4 	.word	0x080074b4
 8000b68:	080074cc 	.word	0x080074cc

08000b6c <ConsoleCommandTimeQuery>:

static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b09a      	sub	sp, #104	; 0x68
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <ConsoleCommandTimeQuery+0x58>)
 8000b7e:	f003 fc1f 	bl	80043c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <ConsoleCommandTimeQuery+0x58>)
 8000b8c:	f003 fc76 	bl	800447c <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000b90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b94:	461a      	mov	r2, r3
 8000b96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ba0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <ConsoleCommandTimeQuery+0x5c>)
 8000baa:	f005 ff13 	bl	80069d4 <siprintf>
	ConsoleSendString(time);
 8000bae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff87 	bl	8000ac6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3760      	adds	r7, #96	; 0x60
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000190 	.word	0x20000190
 8000bc8:	080074e4 	.word	0x080074e4

08000bcc <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	; 0x38
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <ConsoleCommandDateQuery+0x44>)
 8000bde:	f003 fc4d 	bl	800447c <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8000be2:	7bbb      	ldrb	r3, [r7, #14]
 8000be4:	461a      	mov	r2, r3
 8000be6:	7b7b      	ldrb	r3, [r7, #13]
 8000be8:	4619      	mov	r1, r3
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	f107 0010 	add.w	r0, r7, #16
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <ConsoleCommandDateQuery+0x48>)
 8000bf6:	f005 feed 	bl	80069d4 <siprintf>
	ConsoleSendString(date);
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff61 	bl	8000ac6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3730      	adds	r7, #48	; 0x30
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000190 	.word	0x20000190
 8000c14:	080074fc 	.word	0x080074fc

08000c18 <ConsoleCommandLedQuery>:


static eCommandResult_T ConsoleCommandLedQuery(const char buffer[])
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin)==0)
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	480a      	ldr	r0, [pc, #40]	; (8000c50 <ConsoleCommandLedQuery+0x38>)
 8000c26:	f001 ffed 	bl	8002c04 <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d103      	bne.n	8000c38 <ConsoleCommandLedQuery+0x20>
			ConsoleIoSendString("LED is ON ");
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <ConsoleCommandLedQuery+0x3c>)
 8000c32:	f000 f8d1 	bl	8000dd8 <ConsoleIoSendString>
 8000c36:	e002      	b.n	8000c3e <ConsoleCommandLedQuery+0x26>
	else
		ConsoleIoSendString("LED is OFF ");
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <ConsoleCommandLedQuery+0x40>)
 8000c3a:	f000 f8cd 	bl	8000dd8 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <ConsoleCommandLedQuery+0x44>)
 8000c40:	f000 f8ca 	bl	8000dd8 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40020800 	.word	0x40020800
 8000c54:	08007514 	.word	0x08007514
 8000c58:	08007520 	.word	0x08007520
 8000c5c:	0800752c 	.word	0x0800752c

08000c60 <ConsoleCommandHelp>:



static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e01e      	b.n	8000cb4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000c76:	4914      	ldr	r1, [pc, #80]	; (8000cc8 <ConsoleCommandHelp+0x68>)
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f8a6 	bl	8000dd8 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000c8c:	480f      	ldr	r0, [pc, #60]	; (8000ccc <ConsoleCommandHelp+0x6c>)
 8000c8e:	f000 f8a3 	bl	8000dd8 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4613      	mov	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4413      	add	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	3308      	adds	r3, #8
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <ConsoleCommandHelp+0x68>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f898 	bl	8000dd8 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <ConsoleCommandHelp+0x70>)
 8000caa:	f000 f895 	bl	8000dd8 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d3db      	bcc.n	8000c76 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cbe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	08007540 	.word	0x08007540
 8000ccc:	08007530 	.word	0x08007530
 8000cd0:	0800752c 	.word	0x0800752c

08000cd4 <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <ConsoleCommandVer+0x24>)
 8000ce2:	f000 f879 	bl	8000dd8 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <ConsoleCommandVer+0x28>)
 8000ce8:	f000 f876 	bl	8000dd8 <ConsoleIoSendString>
	return result;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	08007534 	.word	0x08007534
 8000cfc:	0800752c 	.word	0x0800752c

08000d00 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <ConsoleCommandsGetTable+0x10>)
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	08007540 	.word	0x08007540

08000d14 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4909      	ldr	r1, [pc, #36]	; (8000d44 <HAL_UART_RxCpltCallback+0x30>)
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <HAL_UART_RxCpltCallback+0x34>)
 8000d22:	f004 fe88 	bl	8005a36 <HAL_UART_Receive_IT>
    {
    	HAL_UART_Transmit(&huart1, &cliRX, 1, 100);

    }
    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <HAL_UART_RxCpltCallback+0x30>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b0a      	cmp	r3, #10
 8000d2c:	d005      	beq.n	8000d3a <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_UART_RxCpltCallback+0x30>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_UART_RxCpltCallback+0x38>)
 8000d36:	f7ff fc5c 	bl	80005f2 <cBuffer_Write>

    }
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000138 	.word	0x20000138
 8000d48:	2000025c 	.word	0x2000025c
 8000d4c:	20000130 	.word	0x20000130

08000d50 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 8000d54:	2240      	movs	r2, #64	; 0x40
 8000d56:	4906      	ldr	r1, [pc, #24]	; (8000d70 <ConsoleIoInit+0x20>)
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <ConsoleIoInit+0x24>)
 8000d5a:	f7ff fc2b 	bl	80005b4 <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4905      	ldr	r1, [pc, #20]	; (8000d78 <ConsoleIoInit+0x28>)
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <ConsoleIoInit+0x2c>)
 8000d64:	f004 fe67 	bl	8005a36 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200000f0 	.word	0x200000f0
 8000d74:	20000130 	.word	0x20000130
 8000d78:	20000138 	.word	0x20000138
 8000d7c:	2000025c 	.word	0x2000025c

08000d80 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	uint8_t len;

	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 8000d88:	f107 030f 	add.w	r3, r7, #15
 8000d8c:	220d      	movs	r2, #13
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <ConsoleIoReceive+0x54>)
 8000d92:	f7ff fc86 	bl	80006a2 <cBuffer_GetString>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10a      	bne.n	8000db2 <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len]  = 0x0; //Terminate String in C Style
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 f847 	bl	8000e3c <manageBackSpace>
		return CONSOLE_SUCCESS;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e00b      	b.n	8000dca <ConsoleIoReceive+0x4a>
	}
	else if (cBuffer_isFull(&cliCB) == CBUFFER_FULL)
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <ConsoleIoReceive+0x54>)
 8000db4:	f7ff fc60 	bl	8000678 <cBuffer_isFull>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d104      	bne.n	8000dc8 <ConsoleIoReceive+0x48>
	{
		// KILL The Buffer
		cBuffer_Kill(&cliCB);
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <ConsoleIoReceive+0x54>)
 8000dc0:	f7ff fc44 	bl	800064c <cBuffer_Kill>
		return CONSOLE_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <ConsoleIoReceive+0x4a>
	}
	return CONSOLE_NO_STRING;
 8000dc8:	2302      	movs	r3, #2

}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000130 	.word	0x20000130

08000dd8 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fa07 	bl	80001f4 <strlen>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	2364      	movs	r3, #100	; 0x64
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <ConsoleIoSendString+0x28>)
 8000df0:	f004 fd8f 	bl	8005912 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000025c 	.word	0x2000025c

08000e04 <gy521_ready>:
	int16_t Gyro_Y_RAW = 0;
	int16_t Gyro_Z_RAW = 0;


uint8_t gy521_ready()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af04      	add	r7, sp, #16
	uint8_t check;
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	9302      	str	r3, [sp, #8]
 8000e10:	2301      	movs	r3, #1
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	1dfb      	adds	r3, r7, #7
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	2275      	movs	r2, #117	; 0x75
 8000e1c:	21d0      	movs	r1, #208	; 0xd0
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <gy521_ready+0x34>)
 8000e20:	f002 f866 	bl	8002ef0 <HAL_I2C_Mem_Read>
	return check == 114;
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b72      	cmp	r3, #114	; 0x72
 8000e28:	bf0c      	ite	eq
 8000e2a:	2301      	moveq	r3, #1
 8000e2c:	2300      	movne	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000013c 	.word	0x2000013c

08000e3c <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 8000e48:	217f      	movs	r1, #127	; 0x7f
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f005 fde2 	bl	8006a14 <strchr>
 8000e50:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8000e52:	e029      	b.n	8000ea8 <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5a:	d106      	bne.n	8000e6a <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4619      	mov	r1, r3
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f005 fde3 	bl	8006a2e <strcpy>
 8000e68:	e019      	b.n	8000e9e <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e70:	d109      	bne.n	8000e86 <manageBackSpace+0x4a>
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3301      	adds	r3, #1
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d104      	bne.n	8000e86 <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e00b      	b.n	8000e9e <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e8c:	d107      	bne.n	8000e9e <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1e5a      	subs	r2, r3, #1
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	4610      	mov	r0, r2
 8000e9a:	f005 fdc8 	bl	8006a2e <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 8000e9e:	217f      	movs	r1, #127	; 0x7f
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f005 fdb7 	bl	8006a14 <strchr>
 8000ea6:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1d1      	bne.n	8000e54 <manageBackSpace+0x18>
		}
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_DMA_Init+0x3c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <MX_DMA_Init+0x3c>)
 8000ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_DMA_Init+0x3c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2039      	movs	r0, #57	; 0x39
 8000ee4:	f001 f8d1 	bl	800208a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ee8:	2039      	movs	r0, #57	; 0x39
 8000eea:	f001 f8ea 	bl	80020c2 <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f8a:	f001 fe53 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000fa8:	f001 fca8 	bl	80028fc <HAL_GPIO_Init>

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020800 	.word	0x40020800

08000fbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_I2C1_Init+0x54>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <MX_I2C1_Init+0x58>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_I2C1_Init+0x50>)
 8000fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_I2C1_Init+0x50>)
 8000ffa:	f001 fe35 	bl	8002c68 <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001004:	f000 f900 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000013c 	.word	0x2000013c
 8001010:	40005400 	.word	0x40005400
 8001014:	000186a0 	.word	0x000186a0

08001018 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_I2C_MspInit+0x84>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d12b      	bne.n	8001092 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001056:	23c0      	movs	r3, #192	; 0xc0
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105a:	2312      	movs	r3, #18
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001066:	2304      	movs	r3, #4
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <HAL_I2C_MspInit+0x8c>)
 8001072:	f001 fc43 	bl	80028fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 8001080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40005400 	.word	0x40005400
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020400 	.word	0x40020400

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fe7b 	bl	8001da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f83f 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f7ff ff21 	bl	8000efc <MX_GPIO_Init>
  MX_RTC_Init();
 80010ba:	f000 f8ab 	bl	8001214 <MX_RTC_Init>
  MX_DMA_Init();
 80010be:	f7ff fefd 	bl	8000ebc <MX_DMA_Init>
  MX_I2C1_Init();
 80010c2:	f7ff ff7b 	bl	8000fbc <MX_I2C1_Init>
  MX_TIM1_Init();
 80010c6:	f000 f9a5 	bl	8001414 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010ca:	f000 fad1 	bl	8001670 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t angle = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 80010d2:	230b      	movs	r3, #11
 80010d4:	717b      	strb	r3, [r7, #5]

  ConsoleInit();
 80010d6:	f7ff fbb7 	bl	8000848 <ConsoleInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 80010da:	f7ff fbdf 	bl	800089c <ConsoleProcess>


	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	e01b      	b.n	800111c <main+0x74>
	  	  			// Calculate color
	  	  			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 80010e4:	79ba      	ldrb	r2, [r7, #6]
 80010e6:	797b      	ldrb	r3, [r7, #5]
 80010e8:	fb12 f303 	smulbb	r3, r2, r3
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4413      	add	r3, r2
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	227f      	movs	r2, #127	; 0x7f
 80010f6:	21ff      	movs	r1, #255	; 0xff
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fd8f 	bl	8001c1c <hsl_to_rgb>
 80010fe:	6038      	str	r0, [r7, #0]
	  	  			// Set color
	  	  			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	0c1b      	lsrs	r3, r3, #16
 8001104:	b2d9      	uxtb	r1, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	b2da      	uxtb	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	79b8      	ldrb	r0, [r7, #6]
 8001112:	f000 fb65 	bl	80017e0 <led_set_RGB>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	3301      	adds	r3, #1
 800111a:	71bb      	strb	r3, [r7, #6]
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b0b      	cmp	r3, #11
 8001120:	d9e0      	bls.n	80010e4 <main+0x3c>
	  	  		}
	  	  		// Write to LED
	  	    	++angle;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	3301      	adds	r3, #1
 8001126:	71fb      	strb	r3, [r7, #7]
	  	  		led_render();
 8001128:	f000 fbc0 	bl	80018ac <led_render>
	  	  		// Some delay
	  	  		HAL_Delay(10);
 800112c:	200a      	movs	r0, #10
 800112e:	f000 fead 	bl	8001e8c <HAL_Delay>
	  ConsoleProcess();
 8001132:	e7d2      	b.n	80010da <main+0x32>

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	; 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	2230      	movs	r2, #48	; 0x30
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f005 fc3e 	bl	80069c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <SystemClock_Config+0xcc>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	4a27      	ldr	r2, [pc, #156]	; (8001200 <SystemClock_Config+0xcc>)
 8001162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <SystemClock_Config+0xcc>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <SystemClock_Config+0xd0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <SystemClock_Config+0xd0>)
 800117e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <SystemClock_Config+0xd0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001190:	2309      	movs	r3, #9
 8001192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800119a:	2301      	movs	r3, #1
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80011a8:	230c      	movs	r3, #12
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80011ac:	2360      	movs	r3, #96	; 0x60
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 fb41 	bl	8003844 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011c8:	f000 f81e 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2103      	movs	r1, #3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 fda3 	bl	8003d34 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011f4:	f000 f808 	bl	8001208 <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3750      	adds	r7, #80	; 0x50
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	e7fe      	b.n	8001210 <Error_Handler+0x8>
	...

08001214 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_RTC_Init+0x44>)
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <MX_RTC_Init+0x48>)
 800121c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_RTC_Init+0x44>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_RTC_Init+0x44>)
 8001226:	227f      	movs	r2, #127	; 0x7f
 8001228:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_RTC_Init+0x44>)
 800122c:	22ff      	movs	r2, #255	; 0xff
 800122e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_RTC_Init+0x44>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_RTC_Init+0x44>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_RTC_Init+0x44>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_RTC_Init+0x44>)
 8001244:	f003 f846 	bl	80042d4 <HAL_RTC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800124e:	f7ff ffdb 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000190 	.word	0x20000190
 800125c:	40002800 	.word	0x40002800

08001260 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <HAL_RTC_MspInit+0x50>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d111      	bne.n	80012a8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001284:	2302      	movs	r3, #2
 8001286:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800128c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4618      	mov	r0, r3
 8001294:	f002 ff2e 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800129e:	f7ff ffb3 	bl	8001208 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <HAL_RTC_MspInit+0x54>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40002800 	.word	0x40002800
 80012b4:	42470e3c 	.word	0x42470e3c

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_MspInit+0x4c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x4c>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001354:	f000 fd7a 	bl	8001e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <USART1_IRQHandler+0x10>)
 8001362:	f004 fb99 	bl	8005a98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000025c 	.word	0x2000025c

08001370 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <DMA2_Stream1_IRQHandler+0x10>)
 8001376:	f001 f857 	bl	8002428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001fc 	.word	0x200001fc

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f005 fadc 	bl	8006970 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20020000 	.word	0x20020000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	200001b0 	.word	0x200001b0
 80013ec:	20000340 	.word	0x20000340

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b096      	sub	sp, #88	; 0x58
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	615a      	str	r2, [r3, #20]
 8001444:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2220      	movs	r2, #32
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f005 fab9 	bl	80069c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001452:	4b3e      	ldr	r3, [pc, #248]	; (800154c <MX_TIM1_Init+0x138>)
 8001454:	4a3e      	ldr	r2, [pc, #248]	; (8001550 <MX_TIM1_Init+0x13c>)
 8001456:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001458:	4b3c      	ldr	r3, [pc, #240]	; (800154c <MX_TIM1_Init+0x138>)
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <MX_TIM1_Init+0x138>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 8001464:	4b39      	ldr	r3, [pc, #228]	; (800154c <MX_TIM1_Init+0x138>)
 8001466:	227c      	movs	r2, #124	; 0x7c
 8001468:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <MX_TIM1_Init+0x138>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001470:	4b36      	ldr	r3, [pc, #216]	; (800154c <MX_TIM1_Init+0x138>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b35      	ldr	r3, [pc, #212]	; (800154c <MX_TIM1_Init+0x138>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800147c:	4833      	ldr	r0, [pc, #204]	; (800154c <MX_TIM1_Init+0x138>)
 800147e:	f003 f8ec 	bl	800465a <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001488:	f7ff febe 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001496:	4619      	mov	r1, r3
 8001498:	482c      	ldr	r0, [pc, #176]	; (800154c <MX_TIM1_Init+0x138>)
 800149a:	f003 fcbf 	bl	8004e1c <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80014a4:	f7ff feb0 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014a8:	4828      	ldr	r0, [pc, #160]	; (800154c <MX_TIM1_Init+0x138>)
 80014aa:	f003 f925 	bl	80046f8 <HAL_TIM_PWM_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80014b4:	f7ff fea8 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014c4:	4619      	mov	r1, r3
 80014c6:	4821      	ldr	r0, [pc, #132]	; (800154c <MX_TIM1_Init+0x138>)
 80014c8:	f004 f916 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80014d2:	f7ff fe99 	bl	8001208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d6:	2360      	movs	r3, #96	; 0x60
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	4814      	ldr	r0, [pc, #80]	; (800154c <MX_TIM1_Init+0x138>)
 80014fc:	f003 fbcc 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001506:	f7ff fe7f 	bl	8001208 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800151e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001522:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_TIM1_Init+0x138>)
 800152e:	f004 f951 	bl	80057d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001538:	f7ff fe66 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800153c:	4803      	ldr	r0, [pc, #12]	; (800154c <MX_TIM1_Init+0x138>)
 800153e:	f000 f85d 	bl	80015fc <HAL_TIM_MspPostInit>

}
 8001542:	bf00      	nop
 8001544:	3758      	adds	r7, #88	; 0x58
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200001b4 	.word	0x200001b4
 8001550:	40010000 	.word	0x40010000

08001554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a22      	ldr	r2, [pc, #136]	; (80015ec <HAL_TIM_Base_MspInit+0x98>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d13e      	bne.n	80015e4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <HAL_TIM_Base_MspInit+0x9c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <HAL_TIM_Base_MspInit+0x9c>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <HAL_TIM_Base_MspInit+0x9c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 8001584:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <HAL_TIM_Base_MspInit+0xa4>)
 8001586:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 800158a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800158e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 8001592:	2240      	movs	r2, #64	; 0x40
 8001594:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 800159e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 80015a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015aa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 80015ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 80015b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ba:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 80015ca:	f000 fd95 	bl	80020f8 <HAL_DMA_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80015d4:	f7ff fe18 	bl	8001208 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <HAL_TIM_Base_MspInit+0xa0>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40010000 	.word	0x40010000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	200001fc 	.word	0x200001fc
 80015f8:	40026428 	.word	0x40026428

080015fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <HAL_TIM_MspPostInit+0x68>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d11e      	bne.n	800165c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_TIM_MspPostInit+0x6c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_TIM_MspPostInit+0x6c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_TIM_MspPostInit+0x6c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 800163a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800164c:	2301      	movs	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4619      	mov	r1, r3
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <HAL_TIM_MspPostInit+0x70>)
 8001658:	f001 f950 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40010000 	.word	0x40010000
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000

08001670 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 80016a8:	f004 f8e6 	bl	8005878 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f7ff fda9 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000025c 	.word	0x2000025c
 80016c0:	40011000 	.word	0x40011000

080016c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <HAL_UART_MspInit+0x94>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d134      	bne.n	8001750 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_UART_MspInit+0x98>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_UART_MspInit+0x98>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_UART_MspInit+0x98>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_UART_MspInit+0x98>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_UART_MspInit+0x98>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_UART_MspInit+0x98>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800171e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001730:	2307      	movs	r3, #7
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4809      	ldr	r0, [pc, #36]	; (8001760 <HAL_UART_MspInit+0x9c>)
 800173c:	f001 f8de 	bl	80028fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2025      	movs	r0, #37	; 0x25
 8001746:	f000 fca0 	bl	800208a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800174a:	2025      	movs	r0, #37	; 0x25
 800174c:	f000 fcb9 	bl	80020c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40011000 	.word	0x40011000
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800179c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001768:	480d      	ldr	r0, [pc, #52]	; (80017a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800176a:	490e      	ldr	r1, [pc, #56]	; (80017a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001780:	4c0b      	ldr	r4, [pc, #44]	; (80017b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800178e:	f7ff fe2f 	bl	80013f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001792:	f005 f8f3 	bl	800697c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff fc87 	bl	80010a8 <main>
  bx  lr    
 800179a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800179c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017a8:	080078e4 	.word	0x080078e4
  ldr r2, =_sbss
 80017ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017b0:	2000033c 	.word	0x2000033c

080017b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC_IRQHandler>

080017b6 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	460a      	mov	r2, r1
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	4613      	mov	r3, r2
 80017c4:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	79ba      	ldrb	r2, [r7, #6]
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	121b      	asrs	r3, r3, #8
 80017d0:	b2db      	uxtb	r3, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4604      	mov	r4, r0
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4623      	mov	r3, r4
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	4603      	mov	r3, r0
 80017f4:	71bb      	strb	r3, [r7, #6]
 80017f6:	460b      	mov	r3, r1
 80017f8:	717b      	strb	r3, [r7, #5]
 80017fa:	4613      	mov	r3, r2
 80017fc:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001808:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800180c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001814:	edc7 7a00 	vstr	s15, [r7]
 8001818:	783b      	ldrb	r3, [r7, #0]
 800181a:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 800181c:	797b      	ldrb	r3, [r7, #5]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001826:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800182a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001832:	edc7 7a00 	vstr	s15, [r7]
 8001836:	783b      	ldrb	r3, [r7, #0]
 8001838:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 800183a:	793b      	ldrb	r3, [r7, #4]
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001844:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001850:	edc7 7a00 	vstr	s15, [r7]
 8001854:	783b      	ldrb	r3, [r7, #0]
 8001856:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	189c      	adds	r4, r3, r2
 8001860:	797b      	ldrb	r3, [r7, #5]
 8001862:	21b0      	movs	r1, #176	; 0xb0
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ffa6 	bl	80017b6 <scale8>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <led_set_RGB+0xc8>)
 8001870:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8001872:	79fa      	ldrb	r2, [r7, #7]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	3301      	adds	r3, #1
 800187c:	490a      	ldr	r1, [pc, #40]	; (80018a8 <led_set_RGB+0xc8>)
 800187e:	79ba      	ldrb	r2, [r7, #6]
 8001880:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	1c9c      	adds	r4, r3, #2
 800188c:	793b      	ldrb	r3, [r7, #4]
 800188e:	21f0      	movs	r1, #240	; 0xf0
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff90 	bl	80017b6 <scale8>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <led_set_RGB+0xc8>)
 800189c:	551a      	strb	r2, [r3, r4]

}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002a0 	.word	0x200002a0

080018ac <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 80018b2:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <led_render+0x148>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <led_render+0x1a>
 80018ba:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <led_render+0x14c>)
 80018bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d015      	beq.n	80018f2 <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	e007      	b.n	80018dc <led_render+0x30>
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4a4b      	ldr	r2, [pc, #300]	; (80019fc <led_render+0x150>)
 80018d0:	2100      	movs	r1, #0
 80018d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	3301      	adds	r3, #1
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	2b2f      	cmp	r3, #47	; 0x2f
 80018e0:	d9f4      	bls.n	80018cc <led_render+0x20>
    wr_buf_p = 0;
 80018e2:	4b44      	ldr	r3, [pc, #272]	; (80019f4 <led_render+0x148>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80018e8:	2100      	movs	r1, #0
 80018ea:	4845      	ldr	r0, [pc, #276]	; (8001a00 <led_render+0x154>)
 80018ec:	f003 f90e 	bl	8004b0c <HAL_TIM_PWM_Stop_DMA>
    return;
 80018f0:	e07c      	b.n	80019ec <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	e06d      	b.n	80019d4 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <led_render+0x158>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001908:	2b00      	cmp	r3, #0
 800190a:	dd01      	ble.n	8001910 <led_render+0x64>
 800190c:	2150      	movs	r1, #80	; 0x50
 800190e:	e000      	b.n	8001912 <led_render+0x66>
 8001910:	2128      	movs	r1, #40	; 0x28
 8001912:	4a3a      	ldr	r2, [pc, #232]	; (80019fc <led_render+0x150>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800191a:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <led_render+0x158>)
 800191c:	785b      	ldrb	r3, [r3, #1]
 800191e:	461a      	mov	r2, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192a:	2b00      	cmp	r3, #0
 800192c:	dd01      	ble.n	8001932 <led_render+0x86>
 800192e:	2150      	movs	r1, #80	; 0x50
 8001930:	e000      	b.n	8001934 <led_render+0x88>
 8001932:	2128      	movs	r1, #40	; 0x28
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3308      	adds	r3, #8
 8001938:	4a30      	ldr	r2, [pc, #192]	; (80019fc <led_render+0x150>)
 800193a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <led_render+0x158>)
 8001940:	789b      	ldrb	r3, [r3, #2]
 8001942:	461a      	mov	r2, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	2b00      	cmp	r3, #0
 8001950:	dd01      	ble.n	8001956 <led_render+0xaa>
 8001952:	2150      	movs	r1, #80	; 0x50
 8001954:	e000      	b.n	8001958 <led_render+0xac>
 8001956:	2128      	movs	r1, #40	; 0x28
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	3310      	adds	r3, #16
 800195c:	4a27      	ldr	r2, [pc, #156]	; (80019fc <led_render+0x150>)
 800195e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <led_render+0x158>)
 8001964:	78db      	ldrb	r3, [r3, #3]
 8001966:	461a      	mov	r2, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	2b00      	cmp	r3, #0
 8001974:	dd01      	ble.n	800197a <led_render+0xce>
 8001976:	2150      	movs	r1, #80	; 0x50
 8001978:	e000      	b.n	800197c <led_render+0xd0>
 800197a:	2128      	movs	r1, #40	; 0x28
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	3318      	adds	r3, #24
 8001980:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <led_render+0x150>)
 8001982:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <led_render+0x158>)
 8001988:	791b      	ldrb	r3, [r3, #4]
 800198a:	461a      	mov	r2, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001996:	2b00      	cmp	r3, #0
 8001998:	dd01      	ble.n	800199e <led_render+0xf2>
 800199a:	2150      	movs	r1, #80	; 0x50
 800199c:	e000      	b.n	80019a0 <led_render+0xf4>
 800199e:	2128      	movs	r1, #40	; 0x28
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	3320      	adds	r3, #32
 80019a4:	4a15      	ldr	r2, [pc, #84]	; (80019fc <led_render+0x150>)
 80019a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <led_render+0x158>)
 80019ac:	795b      	ldrb	r3, [r3, #5]
 80019ae:	461a      	mov	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	dd01      	ble.n	80019c2 <led_render+0x116>
 80019be:	2150      	movs	r1, #80	; 0x50
 80019c0:	e000      	b.n	80019c4 <led_render+0x118>
 80019c2:	2128      	movs	r1, #40	; 0x28
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	3328      	adds	r3, #40	; 0x28
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <led_render+0x150>)
 80019ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b07      	cmp	r3, #7
 80019d8:	d98e      	bls.n	80018f8 <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 80019da:	2330      	movs	r3, #48	; 0x30
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <led_render+0x150>)
 80019de:	2100      	movs	r1, #0
 80019e0:	4807      	ldr	r0, [pc, #28]	; (8001a00 <led_render+0x154>)
 80019e2:	f002 fee3 	bl	80047ac <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <led_render+0x148>)
 80019e8:	2202      	movs	r2, #2
 80019ea:	601a      	str	r2, [r3, #0]
}
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000324 	.word	0x20000324
 80019f8:	200001fc 	.word	0x200001fc
 80019fc:	200002c4 	.word	0x200002c4
 8001a00:	200001b4 	.word	0x200001b4
 8001a04:	200002a0 	.word	0x200002a0

08001a08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001a10:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b0b      	cmp	r3, #11
 8001a16:	d854      	bhi.n	8001ac2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e048      	b.n	8001ab0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	4a35      	ldr	r2, [pc, #212]	; (8001b00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	dd01      	ble.n	8001a40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001a3c:	2150      	movs	r1, #80	; 0x50
 8001a3e:	e000      	b.n	8001a42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001a40:	2128      	movs	r1, #40	; 0x28
 8001a42:	4a30      	ldr	r2, [pc, #192]	; (8001b04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001a4a:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	3301      	adds	r3, #1
 8001a56:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	dd01      	ble.n	8001a6e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 8001a6a:	2150      	movs	r1, #80	; 0x50
 8001a6c:	e000      	b.n	8001a70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8001a6e:	2128      	movs	r1, #40	; 0x28
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3308      	adds	r3, #8
 8001a74:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001a76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	3302      	adds	r3, #2
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001a88:	5cd3      	ldrb	r3, [r2, r3]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	dd01      	ble.n	8001a9e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8001a9a:	2150      	movs	r1, #80	; 0x50
 8001a9c:	e000      	b.n	8001aa0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8001a9e:	2128      	movs	r1, #40	; 0x28
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3310      	adds	r3, #16
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3301      	adds	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b07      	cmp	r3, #7
 8001ab4:	d9b3      	bls.n	8001a1e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001abe:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8001ac0:	e016      	b.n	8001af0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b0d      	cmp	r3, #13
 8001ac8:	d812      	bhi.n	8001af0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	72fb      	strb	r3, [r7, #11]
 8001ace:	e007      	b.n	8001ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 8001ad0:	7afb      	ldrb	r3, [r7, #11]
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	3301      	adds	r3, #1
 8001ade:	72fb      	strb	r3, [r7, #11]
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	2b17      	cmp	r3, #23
 8001ae4:	d9f4      	bls.n	8001ad0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	4a03      	ldr	r2, [pc, #12]	; (8001afc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	20000324 	.word	0x20000324
 8001b00:	200002a0 	.word	0x200002a0
 8001b04:	200002c4 	.word	0x200002c4

08001b08 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001b10:	4b3e      	ldr	r3, [pc, #248]	; (8001c0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b0b      	cmp	r3, #11
 8001b16:	d855      	bhi.n	8001bc4 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e049      	b.n	8001bb2 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	4a39      	ldr	r2, [pc, #228]	; (8001c10 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	dd01      	ble.n	8001b40 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001b3c:	2150      	movs	r1, #80	; 0x50
 8001b3e:	e000      	b.n	8001b42 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001b40:	2128      	movs	r1, #40	; 0x28
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3318      	adds	r3, #24
 8001b46:	4a33      	ldr	r2, [pc, #204]	; (8001c14 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001b48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	3301      	adds	r3, #1
 8001b58:	4a2d      	ldr	r2, [pc, #180]	; (8001c10 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	dd01      	ble.n	8001b70 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001b6c:	2150      	movs	r1, #80	; 0x50
 8001b6e:	e000      	b.n	8001b72 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8001b70:	2128      	movs	r1, #40	; 0x28
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3320      	adds	r3, #32
 8001b76:	4a27      	ldr	r2, [pc, #156]	; (8001c14 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001b78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	3302      	adds	r3, #2
 8001b88:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	dd01      	ble.n	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8001b9c:	2150      	movs	r1, #80	; 0x50
 8001b9e:	e000      	b.n	8001ba2 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8001ba0:	2128      	movs	r1, #40	; 0x28
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3328      	adds	r3, #40	; 0x28
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001ba8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b07      	cmp	r3, #7
 8001bb6:	d9b2      	bls.n	8001b1e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001bc0:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 8001bc2:	e01e      	b.n	8001c02 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b0d      	cmp	r3, #13
 8001bca:	d813      	bhi.n	8001bf4 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001bcc:	2318      	movs	r3, #24
 8001bce:	72fb      	strb	r3, [r7, #11]
 8001bd0:	e007      	b.n	8001be2 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
 8001bd4:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	3301      	adds	r3, #1
 8001be0:	72fb      	strb	r3, [r7, #11]
 8001be2:	7afb      	ldrb	r3, [r7, #11]
 8001be4:	2b2f      	cmp	r3, #47	; 0x2f
 8001be6:	d9f4      	bls.n	8001bd2 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001bf0:	6013      	str	r3, [r2, #0]
}
 8001bf2:	e006      	b.n	8001c02 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4806      	ldr	r0, [pc, #24]	; (8001c18 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001bfe:	f002 ff85 	bl	8004b0c <HAL_TIM_PWM_Stop_DMA>
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000324 	.word	0x20000324
 8001c10:	200002a0 	.word	0x200002a0
 8001c14:	200002c4 	.word	0x200002c4
 8001c18:	200001b4 	.word	0x200001b4

08001c1c <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
 8001c26:	460b      	mov	r3, r1
 8001c28:	71bb      	strb	r3, [r7, #6]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8001c2e:	797b      	ldrb	r3, [r7, #5]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <hsl_to_rgb+0x1c>
 8001c34:	2300      	movs	r3, #0
 8001c36:	e0b1      	b.n	8001d9c <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8001c38:	797b      	ldrb	r3, [r7, #5]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8001c42:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db09      	blt.n	8001c5e <hsl_to_rgb+0x42>
 8001c4a:	89bb      	ldrh	r3, [r7, #12]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	79ba      	ldrb	r2, [r7, #6]
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	121b      	asrs	r3, r3, #8
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	74fb      	strb	r3, [r7, #19]
 8001c5c:	e00a      	b.n	8001c74 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8001c5e:	89bb      	ldrh	r3, [r7, #12]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c68:	79ba      	ldrb	r2, [r7, #6]
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	121b      	asrs	r3, r3, #8
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	0052      	lsls	r2, r2, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8001c8c:	7d3b      	ldrb	r3, [r7, #20]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8001c98:	897b      	ldrh	r3, [r7, #10]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <hsl_to_rgb+0x9c>
 8001ca4:	89fb      	ldrh	r3, [r7, #14]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	7cfa      	ldrb	r2, [r7, #19]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	121b      	asrs	r3, r3, #8
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	74bb      	strb	r3, [r7, #18]
 8001cb6:	e00a      	b.n	8001cce <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001cc0:	7cfa      	ldrb	r2, [r7, #19]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	121b      	asrs	r3, r3, #8
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8001cce:	7cfb      	ldrb	r3, [r7, #19]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	797a      	ldrb	r2, [r7, #5]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d839      	bhi.n	8001d5e <hsl_to_rgb+0x142>
 8001cea:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <hsl_to_rgb+0xd4>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d05 	.word	0x08001d05
 8001cf4:	08001d17 	.word	0x08001d17
 8001cf8:	08001d29 	.word	0x08001d29
 8001cfc:	08001d3b 	.word	0x08001d3b
 8001d00:	08001d4d 	.word	0x08001d4d
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8001d04:	7cfb      	ldrb	r3, [r7, #19]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	75fb      	strb	r3, [r7, #23]
 8001d0a:	7cbb      	ldrb	r3, [r7, #18]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	75bb      	strb	r3, [r7, #22]
 8001d10:	2300      	movs	r3, #0
 8001d12:	757b      	strb	r3, [r7, #21]
 8001d14:	e02c      	b.n	8001d70 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8001d16:	7cbb      	ldrb	r3, [r7, #18]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	75fb      	strb	r3, [r7, #23]
 8001d1c:	7cfb      	ldrb	r3, [r7, #19]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	75bb      	strb	r3, [r7, #22]
 8001d22:	2300      	movs	r3, #0
 8001d24:	757b      	strb	r3, [r7, #21]
 8001d26:	e023      	b.n	8001d70 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8001d28:	2300      	movs	r3, #0
 8001d2a:	75fb      	strb	r3, [r7, #23]
 8001d2c:	7cfb      	ldrb	r3, [r7, #19]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	75bb      	strb	r3, [r7, #22]
 8001d32:	7cbb      	ldrb	r3, [r7, #18]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	757b      	strb	r3, [r7, #21]
 8001d38:	e01a      	b.n	8001d70 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	75fb      	strb	r3, [r7, #23]
 8001d3e:	7cbb      	ldrb	r3, [r7, #18]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	75bb      	strb	r3, [r7, #22]
 8001d44:	7cfb      	ldrb	r3, [r7, #19]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	757b      	strb	r3, [r7, #21]
 8001d4a:	e011      	b.n	8001d70 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8001d4c:	7cbb      	ldrb	r3, [r7, #18]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	75fb      	strb	r3, [r7, #23]
 8001d52:	2300      	movs	r3, #0
 8001d54:	75bb      	strb	r3, [r7, #22]
 8001d56:	7cfb      	ldrb	r3, [r7, #19]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	757b      	strb	r3, [r7, #21]
 8001d5c:	e008      	b.n	8001d70 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8001d5e:	7cfb      	ldrb	r3, [r7, #19]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	75fb      	strb	r3, [r7, #23]
 8001d64:	2300      	movs	r3, #0
 8001d66:	75bb      	strb	r3, [r7, #22]
 8001d68:	7cbb      	ldrb	r3, [r7, #18]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	757b      	strb	r3, [r7, #21]
 8001d6e:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	7c7b      	ldrb	r3, [r7, #17]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	041a      	lsls	r2, r3, #16
 8001d7e:	7dbb      	ldrb	r3, [r7, #22]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4619      	mov	r1, r3
 8001d84:	7c7b      	ldrb	r3, [r7, #17]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	440b      	add	r3, r1
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	7d7b      	ldrb	r3, [r7, #21]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	4619      	mov	r1, r3
 8001d94:	7c7b      	ldrb	r3, [r7, #17]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	440b      	add	r3, r1
 8001d9a:	4313      	orrs	r3, r2
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <HAL_Init+0x40>)
 8001db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_Init+0x40>)
 8001dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <HAL_Init+0x40>)
 8001dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f94f 	bl	8002074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd6:	200f      	movs	r0, #15
 8001dd8:	f000 f808 	bl	8001dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ddc:	f7ff fa6c 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023c00 	.word	0x40023c00

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x54>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x58>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f967 	bl	80020de <HAL_SYSTICK_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00e      	b.n	8001e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d80a      	bhi.n	8001e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f000 f92f 	bl	800208a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <HAL_InitTick+0x5c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000008 	.word	0x20000008
 8001e48:	20000004 	.word	0x20000004

08001e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x20>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x24>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_IncTick+0x24>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000328 	.word	0x20000328

08001e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_GetTick+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000328 	.word	0x20000328

08001e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff ffee 	bl	8001e74 <HAL_GetTick>
 8001e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d005      	beq.n	8001eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_Delay+0x44>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eb2:	bf00      	nop
 8001eb4:	f7ff ffde 	bl	8001e74 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d8f7      	bhi.n	8001eb4 <HAL_Delay+0x28>
  {
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000008 	.word	0x20000008

08001ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f06:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	60d3      	str	r3, [r2, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0b      	blt.n	8001f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	4907      	ldr	r1, [pc, #28]	; (8001f70 <__NVIC_EnableIRQ+0x38>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2001      	movs	r0, #1
 8001f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100

08001f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db0a      	blt.n	8001f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	490c      	ldr	r1, [pc, #48]	; (8001fc0 <__NVIC_SetPriority+0x4c>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	440b      	add	r3, r1
 8001f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f9c:	e00a      	b.n	8001fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <__NVIC_SetPriority+0x50>)
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3b04      	subs	r3, #4
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	761a      	strb	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000e100 	.word	0xe000e100
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f1c3 0307 	rsb	r3, r3, #7
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	bf28      	it	cs
 8001fe6:	2304      	movcs	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3304      	adds	r3, #4
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d902      	bls.n	8001ff8 <NVIC_EncodePriority+0x30>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b03      	subs	r3, #3
 8001ff6:	e000      	b.n	8001ffa <NVIC_EncodePriority+0x32>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	401a      	ands	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43d9      	mvns	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	4313      	orrs	r3, r2
         );
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002040:	d301      	bcc.n	8002046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002042:	2301      	movs	r3, #1
 8002044:	e00f      	b.n	8002066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <SysTick_Config+0x40>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204e:	210f      	movs	r1, #15
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f7ff ff8e 	bl	8001f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <SysTick_Config+0x40>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <SysTick_Config+0x40>)
 8002060:	2207      	movs	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	e000e010 	.word	0xe000e010

08002074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ff29 	bl	8001ed4 <__NVIC_SetPriorityGrouping>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800209c:	f7ff ff3e 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 80020a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f7ff ff8e 	bl	8001fc8 <NVIC_EncodePriority>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff5d 	bl	8001f74 <__NVIC_SetPriority>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff31 	bl	8001f38 <__NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ffa2 	bl	8002030 <SysTick_Config>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff feb6 	bl	8001e74 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e099      	b.n	8002248 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002134:	e00f      	b.n	8002156 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002136:	f7ff fe9d 	bl	8001e74 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b05      	cmp	r3, #5
 8002142:	d908      	bls.n	8002156 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e078      	b.n	8002248 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1e8      	bne.n	8002136 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_DMA_Init+0x158>)
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d107      	bne.n	80021c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	4313      	orrs	r3, r2
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f023 0307 	bic.w	r3, r3, #7
 80021d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d117      	bne.n	800221a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00e      	beq.n	800221a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fb01 	bl	8002804 <DMA_CheckFifoParam>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2240      	movs	r2, #64	; 0x40
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002216:	2301      	movs	r3, #1
 8002218:	e016      	b.n	8002248 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fab8 	bl	8002798 <DMA_CalcBaseAndBitshift>
 8002228:	4603      	mov	r3, r0
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	223f      	movs	r2, #63	; 0x3f
 8002232:	409a      	lsls	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	f010803f 	.word	0xf010803f

08002254 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_DMA_Start_IT+0x26>
 8002276:	2302      	movs	r3, #2
 8002278:	e040      	b.n	80022fc <HAL_DMA_Start_IT+0xa8>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d12f      	bne.n	80022ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fa4a 	bl	800273c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	223f      	movs	r2, #63	; 0x3f
 80022ae:	409a      	lsls	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0216 	orr.w	r2, r2, #22
 80022c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0208 	orr.w	r2, r2, #8
 80022da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	e005      	b.n	80022fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022f6:	2302      	movs	r3, #2
 80022f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002312:	f7ff fdaf 	bl	8001e74 <HAL_GetTick>
 8002316:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d008      	beq.n	8002336 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e052      	b.n	80023dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0216 	bic.w	r2, r2, #22
 8002344:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002354:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <HAL_DMA_Abort+0x62>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0208 	bic.w	r2, r2, #8
 8002374:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002386:	e013      	b.n	80023b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002388:	f7ff fd74 	bl	8001e74 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b05      	cmp	r3, #5
 8002394:	d90c      	bls.n	80023b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2203      	movs	r2, #3
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e015      	b.n	80023dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1e4      	bne.n	8002388 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	223f      	movs	r2, #63	; 0x3f
 80023c4:	409a      	lsls	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d004      	beq.n	8002402 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e00c      	b.n	800241c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2205      	movs	r2, #5
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0201 	bic.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002434:	4b8e      	ldr	r3, [pc, #568]	; (8002670 <HAL_DMA_IRQHandler+0x248>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a8e      	ldr	r2, [pc, #568]	; (8002674 <HAL_DMA_IRQHandler+0x24c>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0a9b      	lsrs	r3, r3, #10
 8002440:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2208      	movs	r2, #8
 8002454:	409a      	lsls	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01a      	beq.n	8002494 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0204 	bic.w	r2, r2, #4
 800247a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	2208      	movs	r2, #8
 8002482:	409a      	lsls	r2, r3
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	2201      	movs	r2, #1
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	2201      	movs	r2, #1
 80024b8:	409a      	lsls	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	2204      	movs	r2, #4
 80024d0:	409a      	lsls	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d012      	beq.n	8002500 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00b      	beq.n	8002500 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	2204      	movs	r2, #4
 80024ee:	409a      	lsls	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	2210      	movs	r2, #16
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d043      	beq.n	8002598 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03c      	beq.n	8002598 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	2210      	movs	r2, #16
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d018      	beq.n	800256a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d024      	beq.n	8002598 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
 8002556:	e01f      	b.n	8002598 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01b      	beq.n	8002598 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4798      	blx	r3
 8002568:	e016      	b.n	8002598 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0208 	bic.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	2220      	movs	r2, #32
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 808f 	beq.w	80026c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8087 	beq.w	80026c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	2220      	movs	r2, #32
 80025c0:	409a      	lsls	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d136      	bne.n	8002640 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0216 	bic.w	r2, r2, #22
 80025e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d103      	bne.n	8002602 <HAL_DMA_IRQHandler+0x1da>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0208 	bic.w	r2, r2, #8
 8002610:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	223f      	movs	r2, #63	; 0x3f
 8002618:	409a      	lsls	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002632:	2b00      	cmp	r3, #0
 8002634:	d07e      	beq.n	8002734 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
        }
        return;
 800263e:	e079      	b.n	8002734 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01d      	beq.n	800268a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	2b00      	cmp	r3, #0
 8002662:	d031      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
 800266c:	e02c      	b.n	80026c8 <HAL_DMA_IRQHandler+0x2a0>
 800266e:	bf00      	nop
 8002670:	20000000 	.word	0x20000000
 8002674:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
 8002688:	e01e      	b.n	80026c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10f      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0210 	bic.w	r2, r2, #16
 80026a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d032      	beq.n	8002736 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d022      	beq.n	8002722 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2205      	movs	r2, #5
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d307      	bcc.n	8002710 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f2      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x2cc>
 800270e:	e000      	b.n	8002712 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002710:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
 8002732:	e000      	b.n	8002736 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002734:	bf00      	nop
    }
  }
}
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002758:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b40      	cmp	r3, #64	; 0x40
 8002768:	d108      	bne.n	800277c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800277a:	e007      	b.n	800278c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	60da      	str	r2, [r3, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3b10      	subs	r3, #16
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <DMA_CalcBaseAndBitshift+0x64>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027b2:	4a13      	ldr	r2, [pc, #76]	; (8002800 <DMA_CalcBaseAndBitshift+0x68>)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d909      	bls.n	80027da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	1d1a      	adds	r2, r3, #4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	659a      	str	r2, [r3, #88]	; 0x58
 80027d8:	e007      	b.n	80027ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027e2:	f023 0303 	bic.w	r3, r3, #3
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	aaaaaaab 	.word	0xaaaaaaab
 8002800:	08007798 	.word	0x08007798

08002804 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11f      	bne.n	800285e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d856      	bhi.n	80028d2 <DMA_CheckFifoParam+0xce>
 8002824:	a201      	add	r2, pc, #4	; (adr r2, 800282c <DMA_CheckFifoParam+0x28>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	0800283d 	.word	0x0800283d
 8002830:	0800284f 	.word	0x0800284f
 8002834:	0800283d 	.word	0x0800283d
 8002838:	080028d3 	.word	0x080028d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d046      	beq.n	80028d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284c:	e043      	b.n	80028d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002856:	d140      	bne.n	80028da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285c:	e03d      	b.n	80028da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002866:	d121      	bne.n	80028ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d837      	bhi.n	80028de <DMA_CheckFifoParam+0xda>
 800286e:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <DMA_CheckFifoParam+0x70>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	08002885 	.word	0x08002885
 8002878:	0800288b 	.word	0x0800288b
 800287c:	08002885 	.word	0x08002885
 8002880:	0800289d 	.word	0x0800289d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      break;
 8002888:	e030      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d025      	beq.n	80028e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289a:	e022      	b.n	80028e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a4:	d11f      	bne.n	80028e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028aa:	e01c      	b.n	80028e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d903      	bls.n	80028ba <DMA_CheckFifoParam+0xb6>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d003      	beq.n	80028c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028b8:	e018      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      break;
 80028be:	e015      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00e      	beq.n	80028ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e00b      	b.n	80028ea <DMA_CheckFifoParam+0xe6>
      break;
 80028d2:	bf00      	nop
 80028d4:	e00a      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
 80028d8:	e008      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e006      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e004      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e002      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;   
 80028e6:	bf00      	nop
 80028e8:	e000      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
    }
  } 
  
  return status; 
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e159      	b.n	8002bcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002918:	2201      	movs	r2, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	f040 8148 	bne.w	8002bc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d005      	beq.n	800294e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294a:	2b02      	cmp	r3, #2
 800294c:	d130      	bne.n	80029b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 0201 	and.w	r2, r3, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d017      	beq.n	80029ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d123      	bne.n	8002a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0203 	and.w	r2, r3, #3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a2 	beq.w	8002bc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b57      	ldr	r3, [pc, #348]	; (8002be4 <HAL_GPIO_Init+0x2e8>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a56      	ldr	r2, [pc, #344]	; (8002be4 <HAL_GPIO_Init+0x2e8>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b54      	ldr	r3, [pc, #336]	; (8002be4 <HAL_GPIO_Init+0x2e8>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9e:	4a52      	ldr	r2, [pc, #328]	; (8002be8 <HAL_GPIO_Init+0x2ec>)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a49      	ldr	r2, [pc, #292]	; (8002bec <HAL_GPIO_Init+0x2f0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d019      	beq.n	8002afe <HAL_GPIO_Init+0x202>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a48      	ldr	r2, [pc, #288]	; (8002bf0 <HAL_GPIO_Init+0x2f4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_GPIO_Init+0x1fe>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a47      	ldr	r2, [pc, #284]	; (8002bf4 <HAL_GPIO_Init+0x2f8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00d      	beq.n	8002af6 <HAL_GPIO_Init+0x1fa>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a46      	ldr	r2, [pc, #280]	; (8002bf8 <HAL_GPIO_Init+0x2fc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <HAL_GPIO_Init+0x1f6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a45      	ldr	r2, [pc, #276]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_GPIO_Init+0x1f2>
 8002aea:	2304      	movs	r3, #4
 8002aec:	e008      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002aee:	2307      	movs	r3, #7
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002af2:	2303      	movs	r3, #3
 8002af4:	e004      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002afe:	2300      	movs	r3, #0
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f002 0203 	and.w	r2, r2, #3
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	4093      	lsls	r3, r2
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b10:	4935      	ldr	r1, [pc, #212]	; (8002be8 <HAL_GPIO_Init+0x2ec>)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1e:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b42:	4a2f      	ldr	r2, [pc, #188]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b6c:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b72:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b96:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b0f      	cmp	r3, #15
 8002bd0:	f67f aea2 	bls.w	8002918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40013c00 	.word	0x40013c00

08002c04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	887b      	ldrh	r3, [r7, #2]
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e001      	b.n	8002c26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c50:	e003      	b.n	8002c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e12b      	b.n	8002ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe f9c2 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	; 0x24
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ccc:	f001 f9ea 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
 8002cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4a81      	ldr	r2, [pc, #516]	; (8002edc <HAL_I2C_Init+0x274>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d807      	bhi.n	8002cec <HAL_I2C_Init+0x84>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a80      	ldr	r2, [pc, #512]	; (8002ee0 <HAL_I2C_Init+0x278>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	bf94      	ite	ls
 8002ce4:	2301      	movls	r3, #1
 8002ce6:	2300      	movhi	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e006      	b.n	8002cfa <HAL_I2C_Init+0x92>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a7d      	ldr	r2, [pc, #500]	; (8002ee4 <HAL_I2C_Init+0x27c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	bf94      	ite	ls
 8002cf4:	2301      	movls	r3, #1
 8002cf6:	2300      	movhi	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0e7      	b.n	8002ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a78      	ldr	r2, [pc, #480]	; (8002ee8 <HAL_I2C_Init+0x280>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	0c9b      	lsrs	r3, r3, #18
 8002d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a6a      	ldr	r2, [pc, #424]	; (8002edc <HAL_I2C_Init+0x274>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d802      	bhi.n	8002d3c <HAL_I2C_Init+0xd4>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	e009      	b.n	8002d50 <HAL_I2C_Init+0xe8>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	4a69      	ldr	r2, [pc, #420]	; (8002eec <HAL_I2C_Init+0x284>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	3301      	adds	r3, #1
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	495c      	ldr	r1, [pc, #368]	; (8002edc <HAL_I2C_Init+0x274>)
 8002d6c:	428b      	cmp	r3, r1
 8002d6e:	d819      	bhi.n	8002da4 <HAL_I2C_Init+0x13c>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e59      	subs	r1, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d7e:	1c59      	adds	r1, r3, #1
 8002d80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d84:	400b      	ands	r3, r1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_I2C_Init+0x138>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1e59      	subs	r1, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9e:	e051      	b.n	8002e44 <HAL_I2C_Init+0x1dc>
 8002da0:	2304      	movs	r3, #4
 8002da2:	e04f      	b.n	8002e44 <HAL_I2C_Init+0x1dc>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d111      	bne.n	8002dd0 <HAL_I2C_Init+0x168>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e58      	subs	r0, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	440b      	add	r3, r1
 8002dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	e012      	b.n	8002df6 <HAL_I2C_Init+0x18e>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e58      	subs	r0, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	0099      	lsls	r1, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Init+0x196>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e022      	b.n	8002e44 <HAL_I2C_Init+0x1dc>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10e      	bne.n	8002e24 <HAL_I2C_Init+0x1bc>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1e58      	subs	r0, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	440b      	add	r3, r1
 8002e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e22:	e00f      	b.n	8002e44 <HAL_I2C_Init+0x1dc>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1e58      	subs	r0, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	0099      	lsls	r1, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	6809      	ldr	r1, [r1, #0]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6911      	ldr	r1, [r2, #16]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68d2      	ldr	r2, [r2, #12]
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	000186a0 	.word	0x000186a0
 8002ee0:	001e847f 	.word	0x001e847f
 8002ee4:	003d08ff 	.word	0x003d08ff
 8002ee8:	431bde83 	.word	0x431bde83
 8002eec:	10624dd3 	.word	0x10624dd3

08002ef0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	; 0x30
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	817b      	strh	r3, [r7, #10]
 8002f02:	460b      	mov	r3, r1
 8002f04:	813b      	strh	r3, [r7, #8]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f0a:	f7fe ffb3 	bl	8001e74 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	f040 8208 	bne.w	800332e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2319      	movs	r3, #25
 8002f24:	2201      	movs	r2, #1
 8002f26:	497b      	ldr	r1, [pc, #492]	; (8003114 <HAL_I2C_Mem_Read+0x224>)
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 faef 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
 8002f36:	e1fb      	b.n	8003330 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Mem_Read+0x56>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e1f4      	b.n	8003330 <HAL_I2C_Mem_Read+0x440>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d007      	beq.n	8002f6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2222      	movs	r2, #34	; 0x22
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2240      	movs	r2, #64	; 0x40
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a5b      	ldr	r2, [pc, #364]	; (8003118 <HAL_I2C_Mem_Read+0x228>)
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fae:	88f8      	ldrh	r0, [r7, #6]
 8002fb0:	893a      	ldrh	r2, [r7, #8]
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f9bc 	bl	800333c <I2C_RequestMemoryRead>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1b0      	b.n	8003330 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d113      	bne.n	8002ffe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	623b      	str	r3, [r7, #32]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	623b      	str	r3, [r7, #32]
 8002fea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e184      	b.n	8003308 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003002:	2b01      	cmp	r3, #1
 8003004:	d11b      	bne.n	800303e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e164      	b.n	8003308 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	2b02      	cmp	r3, #2
 8003044:	d11b      	bne.n	800307e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003054:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	e144      	b.n	8003308 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003094:	e138      	b.n	8003308 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	2b03      	cmp	r3, #3
 800309c:	f200 80f1 	bhi.w	8003282 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d123      	bne.n	80030f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fb44 	bl	800373a <I2C_WaitOnRXNEFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e139      	b.n	8003330 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030ee:	e10b      	b.n	8003308 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d14e      	bne.n	8003196 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	2200      	movs	r2, #0
 8003100:	4906      	ldr	r1, [pc, #24]	; (800311c <HAL_I2C_Mem_Read+0x22c>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa02 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e10e      	b.n	8003330 <HAL_I2C_Mem_Read+0x440>
 8003112:	bf00      	nop
 8003114:	00100002 	.word	0x00100002
 8003118:	ffff0000 	.word	0xffff0000
 800311c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003194:	e0b8      	b.n	8003308 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	2200      	movs	r2, #0
 800319e:	4966      	ldr	r1, [pc, #408]	; (8003338 <HAL_I2C_Mem_Read+0x448>)
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f9b3 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0bf      	b.n	8003330 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	2200      	movs	r2, #0
 80031fa:	494f      	ldr	r1, [pc, #316]	; (8003338 <HAL_I2C_Mem_Read+0x448>)
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f985 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e091      	b.n	8003330 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003280:	e042      	b.n	8003308 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003284:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fa57 	bl	800373a <I2C_WaitOnRXNEFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e04c      	b.n	8003330 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d118      	bne.n	8003308 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	f47f aec2 	bne.w	8003096 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3728      	adds	r7, #40	; 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	00010004 	.word	0x00010004

0800333c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4603      	mov	r3, r0
 800334c:	817b      	strh	r3, [r7, #10]
 800334e:	460b      	mov	r3, r1
 8003350:	813b      	strh	r3, [r7, #8]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	2200      	movs	r2, #0
 800337e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f8c2 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339c:	d103      	bne.n	80033a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0aa      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033aa:	897b      	ldrh	r3, [r7, #10]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	6a3a      	ldr	r2, [r7, #32]
 80033be:	4952      	ldr	r1, [pc, #328]	; (8003508 <I2C_RequestMemoryRead+0x1cc>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f8fa 	bl	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e097      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	6a39      	ldr	r1, [r7, #32]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f964 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d107      	bne.n	800340e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e076      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003418:	893b      	ldrh	r3, [r7, #8]
 800341a:	b2da      	uxtb	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	611a      	str	r2, [r3, #16]
 8003422:	e021      	b.n	8003468 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003424:	893b      	ldrh	r3, [r7, #8]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	b29b      	uxth	r3, r3
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	6a39      	ldr	r1, [r7, #32]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f93e 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b04      	cmp	r3, #4
 8003448:	d107      	bne.n	800345a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003458:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e050      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800345e:	893b      	ldrh	r3, [r7, #8]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346a:	6a39      	ldr	r1, [r7, #32]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f923 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2b04      	cmp	r3, #4
 800347e:	d107      	bne.n	8003490 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e035      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f82b 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00d      	beq.n	80034d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d103      	bne.n	80034d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e013      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034d8:	897b      	ldrh	r3, [r7, #10]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	6a3a      	ldr	r2, [r7, #32]
 80034ec:	4906      	ldr	r1, [pc, #24]	; (8003508 <I2C_RequestMemoryRead+0x1cc>)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f863 	bl	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	00010002 	.word	0x00010002

0800350c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351c:	e025      	b.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d021      	beq.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe fca5 	bl	8001e74 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d116      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e023      	b.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10d      	bne.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	e00c      	b.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d0b6      	beq.n	800351e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c8:	e051      	b.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d8:	d123      	bne.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e046      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d021      	beq.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fe fc23 	bl	8001e74 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e020      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10c      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e00b      	b.n	80036aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d18d      	bne.n	80035ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c4:	e02d      	b.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f88d 	bl	80037e6 <I2C_IsAcknowledgeFailed>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e02d      	b.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d021      	beq.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fe fbc9 	bl	8001e74 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e007      	b.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d1ca      	bne.n	80036c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003746:	e042      	b.n	80037ce <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b10      	cmp	r3, #16
 8003754:	d119      	bne.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f06f 0210 	mvn.w	r2, #16
 800375e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e029      	b.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7fe fb73 	bl	8001e74 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d116      	bne.n	80037ce <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d1b5      	bne.n	8003748 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	d11b      	bne.n	8003836 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003806:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f043 0204 	orr.w	r2, r3, #4
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e267      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d075      	beq.n	800394e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003862:	4b88      	ldr	r3, [pc, #544]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b04      	cmp	r3, #4
 800386c:	d00c      	beq.n	8003888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386e:	4b85      	ldr	r3, [pc, #532]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003876:	2b08      	cmp	r3, #8
 8003878:	d112      	bne.n	80038a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387a:	4b82      	ldr	r3, [pc, #520]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003886:	d10b      	bne.n	80038a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d05b      	beq.n	800394c <HAL_RCC_OscConfig+0x108>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d157      	bne.n	800394c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e242      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a8:	d106      	bne.n	80038b8 <HAL_RCC_OscConfig+0x74>
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a75      	ldr	r2, [pc, #468]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e01d      	b.n	80038f4 <HAL_RCC_OscConfig+0xb0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x98>
 80038c2:	4b70      	ldr	r3, [pc, #448]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6f      	ldr	r2, [pc, #444]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6c      	ldr	r2, [pc, #432]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0xb0>
 80038dc:	4b69      	ldr	r3, [pc, #420]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a68      	ldr	r2, [pc, #416]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b66      	ldr	r3, [pc, #408]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a65      	ldr	r2, [pc, #404]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe faba 	bl	8001e74 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003904:	f7fe fab6 	bl	8001e74 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	; 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e207      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b5b      	ldr	r3, [pc, #364]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0xc0>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fe faa6 	bl	8001e74 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800392c:	f7fe faa2 	bl	8001e74 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	; 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e1f3      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0xe8>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d063      	beq.n	8003a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800395a:	4b4a      	ldr	r3, [pc, #296]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396e:	2b08      	cmp	r3, #8
 8003970:	d11c      	bne.n	80039ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003972:	4b44      	ldr	r3, [pc, #272]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d116      	bne.n	80039ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397e:	4b41      	ldr	r3, [pc, #260]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_RCC_OscConfig+0x152>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e1c7      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4937      	ldr	r1, [pc, #220]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039aa:	e03a      	b.n	8003a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b4:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <HAL_RCC_OscConfig+0x244>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fe fa5b 	bl	8001e74 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c2:	f7fe fa57 	bl	8001e74 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1a8      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e0:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4925      	ldr	r1, [pc, #148]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]
 80039f4:	e015      	b.n	8003a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <HAL_RCC_OscConfig+0x244>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe fa3a 	bl	8001e74 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a04:	f7fe fa36 	bl	8001e74 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e187      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d036      	beq.n	8003a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <HAL_RCC_OscConfig+0x248>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fe fa1a 	bl	8001e74 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a44:	f7fe fa16 	bl	8001e74 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e167      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x200>
 8003a62:	e01b      	b.n	8003a9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_OscConfig+0x248>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6a:	f7fe fa03 	bl	8001e74 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	e00e      	b.n	8003a90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a72:	f7fe f9ff 	bl	8001e74 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d907      	bls.n	8003a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e150      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
 8003a84:	40023800 	.word	0x40023800
 8003a88:	42470000 	.word	0x42470000
 8003a8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a90:	4b88      	ldr	r3, [pc, #544]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ea      	bne.n	8003a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8097 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b81      	ldr	r3, [pc, #516]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	4b7d      	ldr	r3, [pc, #500]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	4a7c      	ldr	r2, [pc, #496]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aca:	4b7a      	ldr	r3, [pc, #488]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b77      	ldr	r3, [pc, #476]	; (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d118      	bne.n	8003b18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae6:	4b74      	ldr	r3, [pc, #464]	; (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a73      	ldr	r2, [pc, #460]	; (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fe f9bf 	bl	8001e74 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afa:	f7fe f9bb 	bl	8001e74 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e10c      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x2ea>
 8003b20:	4b64      	ldr	r3, [pc, #400]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	4a63      	ldr	r2, [pc, #396]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2c:	e01c      	b.n	8003b68 <HAL_RCC_OscConfig+0x324>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x30c>
 8003b36:	4b5f      	ldr	r3, [pc, #380]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a5e      	ldr	r2, [pc, #376]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
 8003b42:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	4a5b      	ldr	r2, [pc, #364]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0x324>
 8003b50:	4b58      	ldr	r3, [pc, #352]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	4a57      	ldr	r2, [pc, #348]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5c:	4b55      	ldr	r3, [pc, #340]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	4a54      	ldr	r2, [pc, #336]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe f980 	bl	8001e74 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fe f97c 	bl	8001e74 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e0cb      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ee      	beq.n	8003b78 <HAL_RCC_OscConfig+0x334>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9c:	f7fe f96a 	bl	8001e74 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba4:	f7fe f966 	bl	8001e74 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0b5      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bba:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ee      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bcc:	4b39      	ldr	r3, [pc, #228]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	4a38      	ldr	r2, [pc, #224]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80a1 	beq.w	8003d24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d05c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d141      	bne.n	8003c7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <HAL_RCC_OscConfig+0x478>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe f93a 	bl	8001e74 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe f936 	bl	8001e74 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e087      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	019b      	lsls	r3, r3, #6
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	041b      	lsls	r3, r3, #16
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	491b      	ldr	r1, [pc, #108]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <HAL_RCC_OscConfig+0x478>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fe f90f 	bl	8001e74 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe f90b 	bl	8001e74 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e05c      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x416>
 8003c78:	e054      	b.n	8003d24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_RCC_OscConfig+0x478>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe f8f8 	bl	8001e74 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe f8f4 	bl	8001e74 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e045      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x444>
 8003ca6:	e03d      	b.n	8003d24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e038      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40007000 	.word	0x40007000
 8003cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <HAL_RCC_OscConfig+0x4ec>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d028      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d121      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d11a      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d111      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800

08003d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0cc      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d48:	4b68      	ldr	r3, [pc, #416]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d90c      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b65      	ldr	r3, [pc, #404]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b63      	ldr	r3, [pc, #396]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0b8      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d020      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d88:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a52      	ldr	r2, [pc, #328]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	494d      	ldr	r1, [pc, #308]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d044      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d119      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df2:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e02:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e067      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 0203 	bic.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4934      	ldr	r1, [pc, #208]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e24:	f7fe f826 	bl	8001e74 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2c:	f7fe f822 	bl	8001e74 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e04f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 020c 	and.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1eb      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d20c      	bcs.n	8003e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b22      	ldr	r3, [pc, #136]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e032      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4916      	ldr	r1, [pc, #88]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eba:	f000 f821 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	490a      	ldr	r1, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	5ccb      	ldrb	r3, [r1, r3]
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fd ff86 	bl	8001dec <HAL_InitTick>

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40023c00 	.word	0x40023c00
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	08007780 	.word	0x08007780
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	20000004 	.word	0x20000004

08003f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f04:	b090      	sub	sp, #64	; 0x40
 8003f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f10:	2300      	movs	r3, #0
 8003f12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f18:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d00d      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x40>
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	f200 80a1 	bhi.w	800406c <HAL_RCC_GetSysClockFreq+0x16c>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d003      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f32:	e09b      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b53      	ldr	r3, [pc, #332]	; (8004084 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003f38:	e09b      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f3a:	4b53      	ldr	r3, [pc, #332]	; (8004088 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f3e:	e098      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f4a:	4b4d      	ldr	r3, [pc, #308]	; (8004080 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d028      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f56:	4b4a      	ldr	r3, [pc, #296]	; (8004080 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	623b      	str	r3, [r7, #32]
 8003f60:	627a      	str	r2, [r7, #36]	; 0x24
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4b47      	ldr	r3, [pc, #284]	; (8004088 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f6c:	fb03 f201 	mul.w	r2, r3, r1
 8003f70:	2300      	movs	r3, #0
 8003f72:	fb00 f303 	mul.w	r3, r0, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	4a43      	ldr	r2, [pc, #268]	; (8004088 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f80:	460a      	mov	r2, r1
 8003f82:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f86:	4413      	add	r3, r2
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	61fa      	str	r2, [r7, #28]
 8003f92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f9a:	f7fc f989 	bl	80002b0 <__aeabi_uldivmod>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa6:	e053      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa8:	4b35      	ldr	r3, [pc, #212]	; (8004080 <HAL_RCC_GetSysClockFreq+0x180>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	099b      	lsrs	r3, r3, #6
 8003fae:	2200      	movs	r2, #0
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	617a      	str	r2, [r7, #20]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003fba:	f04f 0b00 	mov.w	fp, #0
 8003fbe:	4652      	mov	r2, sl
 8003fc0:	465b      	mov	r3, fp
 8003fc2:	f04f 0000 	mov.w	r0, #0
 8003fc6:	f04f 0100 	mov.w	r1, #0
 8003fca:	0159      	lsls	r1, r3, #5
 8003fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd0:	0150      	lsls	r0, r2, #5
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	ebb2 080a 	subs.w	r8, r2, sl
 8003fda:	eb63 090b 	sbc.w	r9, r3, fp
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ff2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ff6:	eb63 0509 	sbc.w	r5, r3, r9
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	00eb      	lsls	r3, r5, #3
 8004004:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004008:	00e2      	lsls	r2, r4, #3
 800400a:	4614      	mov	r4, r2
 800400c:	461d      	mov	r5, r3
 800400e:	eb14 030a 	adds.w	r3, r4, sl
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	eb45 030b 	adc.w	r3, r5, fp
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004026:	4629      	mov	r1, r5
 8004028:	028b      	lsls	r3, r1, #10
 800402a:	4621      	mov	r1, r4
 800402c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004030:	4621      	mov	r1, r4
 8004032:	028a      	lsls	r2, r1, #10
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	2200      	movs	r2, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	60fa      	str	r2, [r7, #12]
 8004040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004044:	f7fc f934 	bl	80002b0 <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4613      	mov	r3, r2
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_GetSysClockFreq+0x180>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	3301      	adds	r3, #1
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800406a:	e002      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetSysClockFreq+0x184>)
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004074:	4618      	mov	r0, r3
 8004076:	3740      	adds	r7, #64	; 0x40
 8004078:	46bd      	mov	sp, r7
 800407a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	00f42400 	.word	0x00f42400
 8004088:	017d7840 	.word	0x017d7840

0800408c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000000 	.word	0x20000000

080040a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040a8:	f7ff fff0 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	0a9b      	lsrs	r3, r3, #10
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4903      	ldr	r1, [pc, #12]	; (80040c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	08007790 	.word	0x08007790

080040cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040d0:	f7ff ffdc 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	0b5b      	lsrs	r3, r3, #13
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4903      	ldr	r1, [pc, #12]	; (80040f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40023800 	.word	0x40023800
 80040f0:	08007790 	.word	0x08007790

080040f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004118:	2b00      	cmp	r3, #0
 800411a:	d038      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800411c:	4b68      	ldr	r3, [pc, #416]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004122:	f7fd fea7 	bl	8001e74 <HAL_GetTick>
 8004126:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004128:	e008      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800412a:	f7fd fea3 	bl	8001e74 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e0bd      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800413c:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	071b      	lsls	r3, r3, #28
 800415a:	495a      	ldr	r1, [pc, #360]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004162:	4b57      	ldr	r3, [pc, #348]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004164:	2201      	movs	r2, #1
 8004166:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004168:	f7fd fe84 	bl	8001e74 <HAL_GetTick>
 800416c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004170:	f7fd fe80 	bl	8001e74 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e09a      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004182:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8083 	beq.w	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	4b48      	ldr	r3, [pc, #288]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	4a47      	ldr	r2, [pc, #284]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041aa:	6413      	str	r3, [r2, #64]	; 0x40
 80041ac:	4b45      	ldr	r3, [pc, #276]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041b8:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a42      	ldr	r2, [pc, #264]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041c4:	f7fd fe56 	bl	8001e74 <HAL_GetTick>
 80041c8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041cc:	f7fd fe52 	bl	8001e74 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e06c      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041de:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ea:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d02f      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	429a      	cmp	r2, r3
 8004206:	d028      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004208:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004210:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004212:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004218:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800421e:	4a29      	ldr	r2, [pc, #164]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004224:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d114      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004230:	f7fd fe20 	bl	8001e74 <HAL_GetTick>
 8004234:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004236:	e00a      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fd fe1c 	bl	8001e74 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e034      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ee      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004266:	d10d      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427c:	4911      	ldr	r1, [pc, #68]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
 8004282:	e005      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800428e:	6093      	str	r3, [r2, #8]
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429c:	4909      	ldr	r1, [pc, #36]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7d1a      	ldrb	r2, [r3, #20]
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80042b4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	42470068 	.word	0x42470068
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40007000 	.word	0x40007000
 80042cc:	42470e40 	.word	0x42470e40
 80042d0:	424711e0 	.word	0x424711e0

080042d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e066      	b.n	80043b8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	7f5b      	ldrb	r3, [r3, #29]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fc ffb0 	bl	8001260 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	22ca      	movs	r2, #202	; 0xca
 800430c:	625a      	str	r2, [r3, #36]	; 0x24
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2253      	movs	r2, #83	; 0x53
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f927 	bl	800456a <RTC_EnterInitMode>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d12c      	bne.n	8004380 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004338:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6899      	ldr	r1, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	68d2      	ldr	r2, [r2, #12]
 8004360:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6919      	ldr	r1, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	041a      	lsls	r2, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f92e 	bl	80045d8 <RTC_ExitInitMode>
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d113      	bne.n	80043ae <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	22ff      	movs	r2, #255	; 0xff
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80043f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80043f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	0d9b      	lsrs	r3, r3, #22
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d11a      	bne.n	8004472 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 f8ee 	bl	8004622 <RTC_Bcd2ToByte>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	785b      	ldrb	r3, [r3, #1]
 8004452:	4618      	mov	r0, r3
 8004454:	f000 f8e5 	bl	8004622 <RTC_Bcd2ToByte>
 8004458:	4603      	mov	r3, r0
 800445a:	461a      	mov	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	789b      	ldrb	r3, [r3, #2]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 f8dc 	bl	8004622 <RTC_Bcd2ToByte>
 800446a:	4603      	mov	r3, r0
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004496:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800449a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	0c1b      	lsrs	r3, r3, #16
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	0a1b      	lsrs	r3, r3, #8
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	0b5b      	lsrs	r3, r3, #13
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d11a      	bne.n	8004510 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	78db      	ldrb	r3, [r3, #3]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f89f 	bl	8004622 <RTC_Bcd2ToByte>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f896 	bl	8004622 <RTC_Bcd2ToByte>
 80044f6:	4603      	mov	r3, r0
 80044f8:	461a      	mov	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	789b      	ldrb	r3, [r3, #2]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f88d 	bl	8004622 <RTC_Bcd2ToByte>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004534:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004536:	f7fd fc9d 	bl	8001e74 <HAL_GetTick>
 800453a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800453c:	e009      	b.n	8004552 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800453e:	f7fd fc99 	bl	8001e74 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800454c:	d901      	bls.n	8004552 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e007      	b.n	8004562 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ee      	beq.n	800453e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d122      	bne.n	80045ce <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004596:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004598:	f7fd fc6c 	bl	8001e74 <HAL_GetTick>
 800459c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800459e:	e00c      	b.n	80045ba <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045a0:	f7fd fc68 	bl	8001e74 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ae:	d904      	bls.n	80045ba <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2204      	movs	r2, #4
 80045b4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <RTC_EnterInitMode+0x64>
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d1e8      	bne.n	80045a0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045f2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff ff89 	bl	800451a <HAL_RTC_WaitForSynchro>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d004      	beq.n	8004618 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2204      	movs	r2, #4
 8004612:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	4603      	mov	r3, r0
 800462a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	0092      	lsls	r2, r2, #2
 800463a:	4413      	add	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	b2da      	uxtb	r2, r3
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	4413      	add	r3, r2
 800464c:	b2db      	uxtb	r3, r3
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e041      	b.n	80046f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fc ff67 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2202      	movs	r2, #2
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3304      	adds	r3, #4
 8004696:	4619      	mov	r1, r3
 8004698:	4610      	mov	r0, r2
 800469a:	f000 fd61 	bl	8005160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e041      	b.n	800478e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f839 	bl	8004796 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3304      	adds	r3, #4
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f000 fd12 	bl	8005160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e022      	b.n	800481e <HAL_TIM_PWM_Start_DMA+0x72>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d109      	bne.n	80047f2 <HAL_TIM_PWM_Start_DMA+0x46>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	bf0c      	ite	eq
 80047ea:	2301      	moveq	r3, #1
 80047ec:	2300      	movne	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	e015      	b.n	800481e <HAL_TIM_PWM_Start_DMA+0x72>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d109      	bne.n	800480c <HAL_TIM_PWM_Start_DMA+0x60>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e008      	b.n	800481e <HAL_TIM_PWM_Start_DMA+0x72>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
 8004824:	e15d      	b.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <HAL_TIM_PWM_Start_DMA+0x94>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	e022      	b.n	8004886 <HAL_TIM_PWM_Start_DMA+0xda>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b04      	cmp	r3, #4
 8004844:	d109      	bne.n	800485a <HAL_TIM_PWM_Start_DMA+0xae>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b01      	cmp	r3, #1
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	e015      	b.n	8004886 <HAL_TIM_PWM_Start_DMA+0xda>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d109      	bne.n	8004874 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	bf0c      	ite	eq
 800486c:	2301      	moveq	r3, #1
 800486e:	2300      	movne	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	e008      	b.n	8004886 <HAL_TIM_PWM_Start_DMA+0xda>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d024      	beq.n	80048d4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <HAL_TIM_PWM_Start_DMA+0xee>
 8004890:	887b      	ldrh	r3, [r7, #2]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e123      	b.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <HAL_TIM_PWM_Start_DMA+0xfe>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a8:	e016      	b.n	80048d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_PWM_Start_DMA+0x10e>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b8:	e00e      	b.n	80048d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d104      	bne.n	80048ca <HAL_TIM_PWM_Start_DMA+0x11e>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c8:	e006      	b.n	80048d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048d2:	e001      	b.n	80048d8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e104      	b.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	f200 80ae 	bhi.w	8004a3c <HAL_TIM_PWM_Start_DMA+0x290>
 80048e0:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	0800491d 	.word	0x0800491d
 80048ec:	08004a3d 	.word	0x08004a3d
 80048f0:	08004a3d 	.word	0x08004a3d
 80048f4:	08004a3d 	.word	0x08004a3d
 80048f8:	08004965 	.word	0x08004965
 80048fc:	08004a3d 	.word	0x08004a3d
 8004900:	08004a3d 	.word	0x08004a3d
 8004904:	08004a3d 	.word	0x08004a3d
 8004908:	080049ad 	.word	0x080049ad
 800490c:	08004a3d 	.word	0x08004a3d
 8004910:	08004a3d 	.word	0x08004a3d
 8004914:	08004a3d 	.word	0x08004a3d
 8004918:	080049f5 	.word	0x080049f5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	4a72      	ldr	r2, [pc, #456]	; (8004aec <HAL_TIM_PWM_Start_DMA+0x340>)
 8004922:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	4a71      	ldr	r2, [pc, #452]	; (8004af0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800492a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	4a70      	ldr	r2, [pc, #448]	; (8004af4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004932:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3334      	adds	r3, #52	; 0x34
 8004940:	461a      	mov	r2, r3
 8004942:	887b      	ldrh	r3, [r7, #2]
 8004944:	f7fd fc86 	bl	8002254 <HAL_DMA_Start_IT>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e0c7      	b.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004960:	60da      	str	r2, [r3, #12]
      break;
 8004962:	e06e      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	4a60      	ldr	r2, [pc, #384]	; (8004aec <HAL_TIM_PWM_Start_DMA+0x340>)
 800496a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	4a5f      	ldr	r2, [pc, #380]	; (8004af0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	4a5e      	ldr	r2, [pc, #376]	; (8004af4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800497a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3338      	adds	r3, #56	; 0x38
 8004988:	461a      	mov	r2, r3
 800498a:	887b      	ldrh	r3, [r7, #2]
 800498c:	f7fd fc62 	bl	8002254 <HAL_DMA_Start_IT>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e0a3      	b.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049a8:	60da      	str	r2, [r3, #12]
      break;
 80049aa:	e04a      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a4e      	ldr	r2, [pc, #312]	; (8004aec <HAL_TIM_PWM_Start_DMA+0x340>)
 80049b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a4d      	ldr	r2, [pc, #308]	; (8004af0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	4a4c      	ldr	r2, [pc, #304]	; (8004af4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80049c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	333c      	adds	r3, #60	; 0x3c
 80049d0:	461a      	mov	r2, r3
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	f7fd fc3e 	bl	8002254 <HAL_DMA_Start_IT>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e07f      	b.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049f0:	60da      	str	r2, [r3, #12]
      break;
 80049f2:	e026      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	4a3c      	ldr	r2, [pc, #240]	; (8004aec <HAL_TIM_PWM_Start_DMA+0x340>)
 80049fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	4a3a      	ldr	r2, [pc, #232]	; (8004af4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004a0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3340      	adds	r3, #64	; 0x40
 8004a18:	461a      	mov	r2, r3
 8004a1a:	887b      	ldrh	r3, [r7, #2]
 8004a1c:	f7fd fc1a 	bl	8002254 <HAL_DMA_Start_IT>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e05b      	b.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a38:	60da      	str	r2, [r3, #12]
      break;
 8004a3a:	e002      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a40:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d14b      	bne.n	8004ae0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fe2b 	bl	80056ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a27      	ldr	r2, [pc, #156]	; (8004af8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_TIM_PWM_Start_DMA+0x300>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d013      	beq.n	8004aac <HAL_TIM_PWM_Start_DMA+0x300>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <HAL_TIM_PWM_Start_DMA+0x350>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_TIM_PWM_Start_DMA+0x300>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_TIM_PWM_Start_DMA+0x300>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_TIM_PWM_Start_DMA+0x300>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d111      	bne.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d010      	beq.n	8004ae0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0201 	orr.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	e007      	b.n	8004ae0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	08005051 	.word	0x08005051
 8004af0:	080050f9 	.word	0x080050f9
 8004af4:	08004fbf 	.word	0x08004fbf
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40014000 	.word	0x40014000

08004b0c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b0c      	cmp	r3, #12
 8004b1e:	d855      	bhi.n	8004bcc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b5d 	.word	0x08004b5d
 8004b2c:	08004bcd 	.word	0x08004bcd
 8004b30:	08004bcd 	.word	0x08004bcd
 8004b34:	08004bcd 	.word	0x08004bcd
 8004b38:	08004b79 	.word	0x08004b79
 8004b3c:	08004bcd 	.word	0x08004bcd
 8004b40:	08004bcd 	.word	0x08004bcd
 8004b44:	08004bcd 	.word	0x08004bcd
 8004b48:	08004b95 	.word	0x08004b95
 8004b4c:	08004bcd 	.word	0x08004bcd
 8004b50:	08004bcd 	.word	0x08004bcd
 8004b54:	08004bcd 	.word	0x08004bcd
 8004b58:	08004bb1 	.word	0x08004bb1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fd fc37 	bl	80023e4 <HAL_DMA_Abort_IT>
      break;
 8004b76:	e02c      	b.n	8004bd2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fd fc29 	bl	80023e4 <HAL_DMA_Abort_IT>
      break;
 8004b92:	e01e      	b.n	8004bd2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ba2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fd fc1b 	bl	80023e4 <HAL_DMA_Abort_IT>
      break;
 8004bae:	e010      	b.n	8004bd2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bbe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fd fc0d 	bl	80023e4 <HAL_DMA_Abort_IT>
      break;
 8004bca:	e002      	b.n	8004bd2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d157      	bne.n	8004c88 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	6839      	ldr	r1, [r7, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fd63 	bl	80056ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d117      	bne.n	8004c20 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a1a      	ldr	r2, [r3, #32]
 8004bf6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10f      	bne.n	8004c20 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a1a      	ldr	r2, [r3, #32]
 8004c06:	f240 4344 	movw	r3, #1092	; 0x444
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c1e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6a1a      	ldr	r2, [r3, #32]
 8004c26:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10f      	bne.n	8004c50 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6a1a      	ldr	r2, [r3, #32]
 8004c36:	f240 4344 	movw	r3, #1092	; 0x444
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d107      	bne.n	8004c50 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0201 	bic.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d104      	bne.n	8004c60 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5e:	e013      	b.n	8004c88 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d104      	bne.n	8004c70 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c6e:	e00b      	b.n	8004c88 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d104      	bne.n	8004c80 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c7e:	e003      	b.n	8004c88 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000

08004c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e0ae      	b.n	8004e14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	f200 809f 	bhi.w	8004e04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cc6:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004d01 	.word	0x08004d01
 8004cd0:	08004e05 	.word	0x08004e05
 8004cd4:	08004e05 	.word	0x08004e05
 8004cd8:	08004e05 	.word	0x08004e05
 8004cdc:	08004d41 	.word	0x08004d41
 8004ce0:	08004e05 	.word	0x08004e05
 8004ce4:	08004e05 	.word	0x08004e05
 8004ce8:	08004e05 	.word	0x08004e05
 8004cec:	08004d83 	.word	0x08004d83
 8004cf0:	08004e05 	.word	0x08004e05
 8004cf4:	08004e05 	.word	0x08004e05
 8004cf8:	08004e05 	.word	0x08004e05
 8004cfc:	08004dc3 	.word	0x08004dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 faaa 	bl	8005260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0208 	orr.w	r2, r2, #8
 8004d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0204 	bic.w	r2, r2, #4
 8004d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6999      	ldr	r1, [r3, #24]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	619a      	str	r2, [r3, #24]
      break;
 8004d3e:	e064      	b.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 faf0 	bl	800532c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6999      	ldr	r1, [r3, #24]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	021a      	lsls	r2, r3, #8
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	619a      	str	r2, [r3, #24]
      break;
 8004d80:	e043      	b.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fb3b 	bl	8005404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0208 	orr.w	r2, r2, #8
 8004d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0204 	bic.w	r2, r2, #4
 8004dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69d9      	ldr	r1, [r3, #28]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	61da      	str	r2, [r3, #28]
      break;
 8004dc0:	e023      	b.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fb85 	bl	80054d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69d9      	ldr	r1, [r3, #28]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	021a      	lsls	r2, r3, #8
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	61da      	str	r2, [r3, #28]
      break;
 8004e02:	e002      	b.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	75fb      	strb	r3, [r7, #23]
      break;
 8004e08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIM_ConfigClockSource+0x1c>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e0b4      	b.n	8004fa2 <HAL_TIM_ConfigClockSource+0x186>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e70:	d03e      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	f200 8087 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7e:	f000 8086 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x172>
 8004e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e86:	d87f      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b70      	cmp	r3, #112	; 0x70
 8004e8a:	d01a      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0xa6>
 8004e8c:	2b70      	cmp	r3, #112	; 0x70
 8004e8e:	d87b      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b60      	cmp	r3, #96	; 0x60
 8004e92:	d050      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x11a>
 8004e94:	2b60      	cmp	r3, #96	; 0x60
 8004e96:	d877      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b50      	cmp	r3, #80	; 0x50
 8004e9a:	d03c      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0xfa>
 8004e9c:	2b50      	cmp	r3, #80	; 0x50
 8004e9e:	d873      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d058      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x13a>
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	d86f      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b30      	cmp	r3, #48	; 0x30
 8004eaa:	d064      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x15a>
 8004eac:	2b30      	cmp	r3, #48	; 0x30
 8004eae:	d86b      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d060      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x15a>
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d867      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d05c      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x15a>
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d05a      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x15a>
 8004ec0:	e062      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6899      	ldr	r1, [r3, #8]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f000 fbcb 	bl	800566c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	609a      	str	r2, [r3, #8]
      break;
 8004eee:	e04f      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6899      	ldr	r1, [r3, #8]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f000 fbb4 	bl	800566c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f12:	609a      	str	r2, [r3, #8]
      break;
 8004f14:	e03c      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f000 fb28 	bl	8005578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2150      	movs	r1, #80	; 0x50
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fb81 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004f34:	e02c      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f000 fb47 	bl	80055d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2160      	movs	r1, #96	; 0x60
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fb71 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004f54:	e01c      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f000 fb08 	bl	8005578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2140      	movs	r1, #64	; 0x40
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fb61 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004f74:	e00c      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f000 fb58 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004f86:	e003      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f8c:	e000      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d107      	bne.n	8004fe6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe4:	e02a      	b.n	800503c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d107      	bne.n	8005000 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ffe:	e01d      	b.n	800503c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d107      	bne.n	800501a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2204      	movs	r2, #4
 800500e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005018:	e010      	b.n	800503c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d107      	bne.n	8005034 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2208      	movs	r2, #8
 8005028:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005032:	e003      	b.n	800503c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff ffb4 	bl	8004faa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d10b      	bne.n	8005080 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d136      	bne.n	80050e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800507e:	e031      	b.n	80050e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d10b      	bne.n	80050a2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2202      	movs	r2, #2
 800508e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d125      	bne.n	80050e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a0:	e020      	b.n	80050e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d10b      	bne.n	80050c4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2204      	movs	r2, #4
 80050b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d114      	bne.n	80050e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c2:	e00f      	b.n	80050e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d10a      	bne.n	80050e4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2208      	movs	r2, #8
 80050d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d103      	bne.n	80050e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7fc fd0f 	bl	8001b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	d103      	bne.n	8005118 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	771a      	strb	r2, [r3, #28]
 8005116:	e019      	b.n	800514c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d103      	bne.n	800512a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2202      	movs	r2, #2
 8005126:	771a      	strb	r2, [r3, #28]
 8005128:	e010      	b.n	800514c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d103      	bne.n	800513c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2204      	movs	r2, #4
 8005138:	771a      	strb	r2, [r3, #28]
 800513a:	e007      	b.n	800514c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	429a      	cmp	r2, r3
 8005144:	d102      	bne.n	800514c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2208      	movs	r2, #8
 800514a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f7fc fc5b 	bl	8001a08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a34      	ldr	r2, [pc, #208]	; (8005244 <TIM_Base_SetConfig+0xe4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00f      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d00b      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a31      	ldr	r2, [pc, #196]	; (8005248 <TIM_Base_SetConfig+0xe8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a30      	ldr	r2, [pc, #192]	; (800524c <TIM_Base_SetConfig+0xec>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a2f      	ldr	r2, [pc, #188]	; (8005250 <TIM_Base_SetConfig+0xf0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d108      	bne.n	80051aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a25      	ldr	r2, [pc, #148]	; (8005244 <TIM_Base_SetConfig+0xe4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01b      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b8:	d017      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a22      	ldr	r2, [pc, #136]	; (8005248 <TIM_Base_SetConfig+0xe8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a21      	ldr	r2, [pc, #132]	; (800524c <TIM_Base_SetConfig+0xec>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00f      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a20      	ldr	r2, [pc, #128]	; (8005250 <TIM_Base_SetConfig+0xf0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00b      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <TIM_Base_SetConfig+0xf4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d007      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <TIM_Base_SetConfig+0xf8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1d      	ldr	r2, [pc, #116]	; (800525c <TIM_Base_SetConfig+0xfc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d108      	bne.n	80051fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <TIM_Base_SetConfig+0xe4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d103      	bne.n	8005230 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	615a      	str	r2, [r3, #20]
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400
 800525c:	40014800 	.word	0x40014800

08005260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 0302 	bic.w	r3, r3, #2
 80052a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <TIM_OC1_SetConfig+0xc8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10c      	bne.n	80052d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0308 	bic.w	r3, r3, #8
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a13      	ldr	r2, [pc, #76]	; (8005328 <TIM_OC1_SetConfig+0xc8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d111      	bne.n	8005302 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40010000 	.word	0x40010000

0800532c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0210 	bic.w	r2, r3, #16
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <TIM_OC2_SetConfig+0xd4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10d      	bne.n	80053a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a15      	ldr	r2, [pc, #84]	; (8005400 <TIM_OC2_SetConfig+0xd4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d113      	bne.n	80053d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000

08005404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800544c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <TIM_OC3_SetConfig+0xd0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10d      	bne.n	800547e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800547c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC3_SetConfig+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d113      	bne.n	80054ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40010000 	.word	0x40010000

080054d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a10      	ldr	r2, [pc, #64]	; (8005574 <TIM_OC4_SetConfig+0x9c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d109      	bne.n	800554c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	019b      	lsls	r3, r3, #6
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000

08005578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 030a 	bic.w	r3, r3, #10
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f023 0210 	bic.w	r2, r3, #16
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	031b      	lsls	r3, r3, #12
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005612:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	f043 0307 	orr.w	r3, r3, #7
 8005658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	021a      	lsls	r2, r3, #8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	431a      	orrs	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2201      	movs	r2, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1a      	ldr	r2, [r3, #32]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	401a      	ands	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	431a      	orrs	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e050      	b.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575c:	d013      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a16      	ldr	r2, [pc, #88]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a15      	ldr	r2, [pc, #84]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10c      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4313      	orrs	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40014000 	.word	0x40014000

080057d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e03d      	b.n	800586c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e03f      	b.n	800590a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fb ff10 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2224      	movs	r2, #36	; 0x24
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fddf 	bl	8006480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695a      	ldr	r2, [r3, #20]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b08a      	sub	sp, #40	; 0x28
 8005916:	af02      	add	r7, sp, #8
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b20      	cmp	r3, #32
 8005930:	d17c      	bne.n	8005a2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <HAL_UART_Transmit+0x2c>
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e075      	b.n	8005a2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_UART_Transmit+0x3e>
 800594c:	2302      	movs	r3, #2
 800594e:	e06e      	b.n	8005a2e <HAL_UART_Transmit+0x11c>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2221      	movs	r2, #33	; 0x21
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005966:	f7fc fa85 	bl	8001e74 <HAL_GetTick>
 800596a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	88fa      	ldrh	r2, [r7, #6]
 8005970:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	88fa      	ldrh	r2, [r7, #6]
 8005976:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005980:	d108      	bne.n	8005994 <HAL_UART_Transmit+0x82>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	e003      	b.n	800599c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005998:	2300      	movs	r3, #0
 800599a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059a4:	e02a      	b.n	80059fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2200      	movs	r2, #0
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 fb1f 	bl	8005ff4 <UART_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e036      	b.n	8005a2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	3302      	adds	r3, #2
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	e007      	b.n	80059ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3301      	adds	r3, #1
 80059ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1cf      	bne.n	80059a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2140      	movs	r1, #64	; 0x40
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 faef 	bl	8005ff4 <UART_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e006      	b.n	8005a2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e000      	b.n	8005a2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
  }
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	4613      	mov	r3, r2
 8005a42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d11d      	bne.n	8005a8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_UART_Receive_IT+0x26>
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e016      	b.n	8005a8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Receive_IT+0x38>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e00f      	b.n	8005a8e <HAL_UART_Receive_IT+0x58>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fb24 	bl	80060d0 <UART_Start_Receive_IT>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	e000      	b.n	8005a8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b0ba      	sub	sp, #232	; 0xe8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10f      	bne.n	8005afe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <HAL_UART_IRQHandler+0x66>
 8005aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fc07 	bl	800630a <UART_Receive_IT>
      return;
 8005afc:	e256      	b.n	8005fac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 80de 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x22c>
 8005b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80d1 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <HAL_UART_IRQHandler+0xae>
 8005b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f043 0201 	orr.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00b      	beq.n	8005b6a <HAL_UART_IRQHandler+0xd2>
 8005b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f043 0202 	orr.w	r2, r3, #2
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <HAL_UART_IRQHandler+0xf6>
 8005b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f043 0204 	orr.w	r2, r3, #4
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d011      	beq.n	8005bbe <HAL_UART_IRQHandler+0x126>
 8005b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d105      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f043 0208 	orr.w	r2, r3, #8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 81ed 	beq.w	8005fa2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_UART_IRQHandler+0x14e>
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fb92 	bl	800630a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf0:	2b40      	cmp	r3, #64	; 0x40
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2301      	moveq	r3, #1
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <HAL_UART_IRQHandler+0x17a>
 8005c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d04f      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa9a 	bl	800614c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d141      	bne.n	8005caa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1d9      	bne.n	8005c26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d013      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	4a7d      	ldr	r2, [pc, #500]	; (8005e74 <HAL_UART_IRQHandler+0x3dc>)
 8005c80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fc fbac 	bl	80023e4 <HAL_DMA_Abort_IT>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d016      	beq.n	8005cc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	e00e      	b.n	8005cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f990 	bl	8005fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	e00a      	b.n	8005cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f98c 	bl	8005fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	e006      	b.n	8005cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f988 	bl	8005fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cbe:	e170      	b.n	8005fa2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	bf00      	nop
    return;
 8005cc2:	e16e      	b.n	8005fa2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	f040 814a 	bne.w	8005f62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 8143 	beq.w	8005f62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce0:	f003 0310 	and.w	r3, r3, #16
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 813c 	beq.w	8005f62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cea:	2300      	movs	r3, #0
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	60bb      	str	r3, [r7, #8]
 8005cfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	f040 80b4 	bne.w	8005e78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8140 	beq.w	8005fa6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	f080 8139 	bcs.w	8005fa6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d46:	f000 8088 	beq.w	8005e5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	330c      	adds	r3, #12
 8005d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1d9      	bne.n	8005d4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3314      	adds	r3, #20
 8005d9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3314      	adds	r3, #20
 8005db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005dba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e1      	bne.n	8005d96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3314      	adds	r3, #20
 8005dd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3314      	adds	r3, #20
 8005df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005df6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005df8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005dfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e3      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2a:	f023 0310 	bic.w	r3, r3, #16
 8005e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e3      	bne.n	8005e18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fc fa55 	bl	8002304 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f8b6 	bl	8005fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e70:	e099      	b.n	8005fa6 <HAL_UART_IRQHandler+0x50e>
 8005e72:	bf00      	nop
 8005e74:	08006213 	.word	0x08006213
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 808b 	beq.w	8005faa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8086 	beq.w	8005faa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ec2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ec4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e3      	bne.n	8005e9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3314      	adds	r3, #20
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	f023 0301 	bic.w	r3, r3, #1
 8005eec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3314      	adds	r3, #20
 8005ef6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005efa:	633a      	str	r2, [r7, #48]	; 0x30
 8005efc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e3      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0310 	bic.w	r3, r3, #16
 8005f32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f40:	61fa      	str	r2, [r7, #28]
 8005f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	69b9      	ldr	r1, [r7, #24]
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e3      	bne.n	8005f1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f83e 	bl	8005fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f60:	e023      	b.n	8005faa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <HAL_UART_IRQHandler+0x4ea>
 8005f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f95d 	bl	800623a <UART_Transmit_IT>
    return;
 8005f80:	e014      	b.n	8005fac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00e      	beq.n	8005fac <HAL_UART_IRQHandler+0x514>
 8005f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d008      	beq.n	8005fac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f99d 	bl	80062da <UART_EndTransmit_IT>
    return;
 8005fa0:	e004      	b.n	8005fac <HAL_UART_IRQHandler+0x514>
    return;
 8005fa2:	bf00      	nop
 8005fa4:	e002      	b.n	8005fac <HAL_UART_IRQHandler+0x514>
      return;
 8005fa6:	bf00      	nop
 8005fa8:	e000      	b.n	8005fac <HAL_UART_IRQHandler+0x514>
      return;
 8005faa:	bf00      	nop
  }
}
 8005fac:	37e8      	adds	r7, #232	; 0xe8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop

08005fb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b090      	sub	sp, #64	; 0x40
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	4613      	mov	r3, r2
 8006002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006004:	e050      	b.n	80060a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d04c      	beq.n	80060a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800600e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <UART_WaitOnFlagUntilTimeout+0x30>
 8006014:	f7fb ff2e 	bl	8001e74 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006020:	429a      	cmp	r2, r3
 8006022:	d241      	bcs.n	80060a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006044:	637a      	str	r2, [r7, #52]	; 0x34
 8006046:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800604a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e5      	bne.n	8006024 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3314      	adds	r3, #20
 800605e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	613b      	str	r3, [r7, #16]
   return(result);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3314      	adds	r3, #20
 8006076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006078:	623a      	str	r2, [r7, #32]
 800607a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	69f9      	ldr	r1, [r7, #28]
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	61bb      	str	r3, [r7, #24]
   return(result);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e5      	bne.n	8006058 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e00f      	b.n	80060c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4013      	ands	r3, r2
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	bf0c      	ite	eq
 80060b8:	2301      	moveq	r3, #1
 80060ba:	2300      	movne	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d09f      	beq.n	8006006 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3740      	adds	r7, #64	; 0x40
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	4613      	mov	r3, r2
 80060dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	88fa      	ldrh	r2, [r7, #6]
 80060e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	88fa      	ldrh	r2, [r7, #6]
 80060ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2222      	movs	r2, #34	; 0x22
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695a      	ldr	r2, [r3, #20]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0201 	orr.w	r2, r2, #1
 800612c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 0220 	orr.w	r2, r2, #32
 800613c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800614c:	b480      	push	{r7}
 800614e:	b095      	sub	sp, #84	; 0x54
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	330c      	adds	r3, #12
 800615a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800616a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	330c      	adds	r3, #12
 8006172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006174:	643a      	str	r2, [r7, #64]	; 0x40
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800617a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800617c:	e841 2300 	strex	r3, r2, [r1]
 8006180:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e5      	bne.n	8006154 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3314      	adds	r3, #20
 800618e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	e853 3f00 	ldrex	r3, [r3]
 8006196:	61fb      	str	r3, [r7, #28]
   return(result);
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f023 0301 	bic.w	r3, r3, #1
 800619e:	64bb      	str	r3, [r7, #72]	; 0x48
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3314      	adds	r3, #20
 80061a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061b0:	e841 2300 	strex	r3, r2, [r1]
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e5      	bne.n	8006188 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d119      	bne.n	80061f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	330c      	adds	r3, #12
 80061ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f023 0310 	bic.w	r3, r3, #16
 80061da:	647b      	str	r3, [r7, #68]	; 0x44
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e4:	61ba      	str	r2, [r7, #24]
 80061e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	6979      	ldr	r1, [r7, #20]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	613b      	str	r3, [r7, #16]
   return(result);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e5      	bne.n	80061c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006206:	bf00      	nop
 8006208:	3754      	adds	r7, #84	; 0x54
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff fecb 	bl	8005fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b21      	cmp	r3, #33	; 0x21
 800624c:	d13e      	bne.n	80062cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006256:	d114      	bne.n	8006282 <UART_Transmit_IT+0x48>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d110      	bne.n	8006282 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006274:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	1c9a      	adds	r2, r3, #2
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	621a      	str	r2, [r3, #32]
 8006280:	e008      	b.n	8006294 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6211      	str	r1, [r2, #32]
 800628c:	781a      	ldrb	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29b      	uxth	r3, r3
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4619      	mov	r1, r3
 80062a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10f      	bne.n	80062c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
  }
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7ff fe5a 	bl	8005fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b08c      	sub	sp, #48	; 0x30
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b22      	cmp	r3, #34	; 0x22
 800631c:	f040 80ab 	bne.w	8006476 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006328:	d117      	bne.n	800635a <UART_Receive_IT+0x50>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d113      	bne.n	800635a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006348:	b29a      	uxth	r2, r3
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	1c9a      	adds	r2, r3, #2
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	629a      	str	r2, [r3, #40]	; 0x28
 8006358:	e026      	b.n	80063a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636c:	d007      	beq.n	800637e <UART_Receive_IT+0x74>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <UART_Receive_IT+0x82>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	e008      	b.n	800639e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006398:	b2da      	uxtb	r2, r3
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	4619      	mov	r1, r3
 80063b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d15a      	bne.n	8006472 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0220 	bic.w	r2, r2, #32
 80063ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695a      	ldr	r2, [r3, #20]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0201 	bic.w	r2, r2, #1
 80063ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d135      	bne.n	8006468 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	613b      	str	r3, [r7, #16]
   return(result);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f023 0310 	bic.w	r3, r3, #16
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	330c      	adds	r3, #12
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	623a      	str	r2, [r7, #32]
 8006424:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	69f9      	ldr	r1, [r7, #28]
 8006428:	6a3a      	ldr	r2, [r7, #32]
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e5      	bne.n	8006402 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b10      	cmp	r3, #16
 8006442:	d10a      	bne.n	800645a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff fdbb 	bl	8005fdc <HAL_UARTEx_RxEventCallback>
 8006466:	e002      	b.n	800646e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fa fc53 	bl	8000d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e002      	b.n	8006478 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	e000      	b.n	8006478 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006476:	2302      	movs	r3, #2
  }
}
 8006478:	4618      	mov	r0, r3
 800647a:	3730      	adds	r7, #48	; 0x30
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006484:	b0c0      	sub	sp, #256	; 0x100
 8006486:	af00      	add	r7, sp, #0
 8006488:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	68d9      	ldr	r1, [r3, #12]
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	ea40 0301 	orr.w	r3, r0, r1
 80064a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	431a      	orrs	r2, r3
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064d8:	f021 010c 	bic.w	r1, r1, #12
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064e6:	430b      	orrs	r3, r1
 80064e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fa:	6999      	ldr	r1, [r3, #24]
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	ea40 0301 	orr.w	r3, r0, r1
 8006506:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b8f      	ldr	r3, [pc, #572]	; (800674c <UART_SetConfig+0x2cc>)
 8006510:	429a      	cmp	r2, r3
 8006512:	d005      	beq.n	8006520 <UART_SetConfig+0xa0>
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4b8d      	ldr	r3, [pc, #564]	; (8006750 <UART_SetConfig+0x2d0>)
 800651c:	429a      	cmp	r2, r3
 800651e:	d104      	bne.n	800652a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006520:	f7fd fdd4 	bl	80040cc <HAL_RCC_GetPCLK2Freq>
 8006524:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006528:	e003      	b.n	8006532 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800652a:	f7fd fdbb 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
 800652e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653c:	f040 810c 	bne.w	8006758 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006544:	2200      	movs	r2, #0
 8006546:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800654a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800654e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006552:	4622      	mov	r2, r4
 8006554:	462b      	mov	r3, r5
 8006556:	1891      	adds	r1, r2, r2
 8006558:	65b9      	str	r1, [r7, #88]	; 0x58
 800655a:	415b      	adcs	r3, r3
 800655c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800655e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006562:	4621      	mov	r1, r4
 8006564:	eb12 0801 	adds.w	r8, r2, r1
 8006568:	4629      	mov	r1, r5
 800656a:	eb43 0901 	adc.w	r9, r3, r1
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800657a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800657e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006582:	4690      	mov	r8, r2
 8006584:	4699      	mov	r9, r3
 8006586:	4623      	mov	r3, r4
 8006588:	eb18 0303 	adds.w	r3, r8, r3
 800658c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006590:	462b      	mov	r3, r5
 8006592:	eb49 0303 	adc.w	r3, r9, r3
 8006596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065ae:	460b      	mov	r3, r1
 80065b0:	18db      	adds	r3, r3, r3
 80065b2:	653b      	str	r3, [r7, #80]	; 0x50
 80065b4:	4613      	mov	r3, r2
 80065b6:	eb42 0303 	adc.w	r3, r2, r3
 80065ba:	657b      	str	r3, [r7, #84]	; 0x54
 80065bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065c4:	f7f9 fe74 	bl	80002b0 <__aeabi_uldivmod>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4b61      	ldr	r3, [pc, #388]	; (8006754 <UART_SetConfig+0x2d4>)
 80065ce:	fba3 2302 	umull	r2, r3, r3, r2
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	011c      	lsls	r4, r3, #4
 80065d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	1891      	adds	r1, r2, r2
 80065ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80065f0:	415b      	adcs	r3, r3
 80065f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065f8:	4641      	mov	r1, r8
 80065fa:	eb12 0a01 	adds.w	sl, r2, r1
 80065fe:	4649      	mov	r1, r9
 8006600:	eb43 0b01 	adc.w	fp, r3, r1
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006610:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006618:	4692      	mov	sl, r2
 800661a:	469b      	mov	fp, r3
 800661c:	4643      	mov	r3, r8
 800661e:	eb1a 0303 	adds.w	r3, sl, r3
 8006622:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006626:	464b      	mov	r3, r9
 8006628:	eb4b 0303 	adc.w	r3, fp, r3
 800662c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800663c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006640:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006644:	460b      	mov	r3, r1
 8006646:	18db      	adds	r3, r3, r3
 8006648:	643b      	str	r3, [r7, #64]	; 0x40
 800664a:	4613      	mov	r3, r2
 800664c:	eb42 0303 	adc.w	r3, r2, r3
 8006650:	647b      	str	r3, [r7, #68]	; 0x44
 8006652:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006656:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800665a:	f7f9 fe29 	bl	80002b0 <__aeabi_uldivmod>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4611      	mov	r1, r2
 8006664:	4b3b      	ldr	r3, [pc, #236]	; (8006754 <UART_SetConfig+0x2d4>)
 8006666:	fba3 2301 	umull	r2, r3, r3, r1
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	2264      	movs	r2, #100	; 0x64
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	1acb      	subs	r3, r1, r3
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800667a:	4b36      	ldr	r3, [pc, #216]	; (8006754 <UART_SetConfig+0x2d4>)
 800667c:	fba3 2302 	umull	r2, r3, r3, r2
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006688:	441c      	add	r4, r3
 800668a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800668e:	2200      	movs	r2, #0
 8006690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006694:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006698:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800669c:	4642      	mov	r2, r8
 800669e:	464b      	mov	r3, r9
 80066a0:	1891      	adds	r1, r2, r2
 80066a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80066a4:	415b      	adcs	r3, r3
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066ac:	4641      	mov	r1, r8
 80066ae:	1851      	adds	r1, r2, r1
 80066b0:	6339      	str	r1, [r7, #48]	; 0x30
 80066b2:	4649      	mov	r1, r9
 80066b4:	414b      	adcs	r3, r1
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066c4:	4659      	mov	r1, fp
 80066c6:	00cb      	lsls	r3, r1, #3
 80066c8:	4651      	mov	r1, sl
 80066ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ce:	4651      	mov	r1, sl
 80066d0:	00ca      	lsls	r2, r1, #3
 80066d2:	4610      	mov	r0, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	4642      	mov	r2, r8
 80066da:	189b      	adds	r3, r3, r2
 80066dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066e0:	464b      	mov	r3, r9
 80066e2:	460a      	mov	r2, r1
 80066e4:	eb42 0303 	adc.w	r3, r2, r3
 80066e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006700:	460b      	mov	r3, r1
 8006702:	18db      	adds	r3, r3, r3
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28
 8006706:	4613      	mov	r3, r2
 8006708:	eb42 0303 	adc.w	r3, r2, r3
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800670e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006712:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006716:	f7f9 fdcb 	bl	80002b0 <__aeabi_uldivmod>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <UART_SetConfig+0x2d4>)
 8006720:	fba3 1302 	umull	r1, r3, r3, r2
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	2164      	movs	r1, #100	; 0x64
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	3332      	adds	r3, #50	; 0x32
 8006732:	4a08      	ldr	r2, [pc, #32]	; (8006754 <UART_SetConfig+0x2d4>)
 8006734:	fba2 2303 	umull	r2, r3, r2, r3
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	f003 0207 	and.w	r2, r3, #7
 800673e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4422      	add	r2, r4
 8006746:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006748:	e105      	b.n	8006956 <UART_SetConfig+0x4d6>
 800674a:	bf00      	nop
 800674c:	40011000 	.word	0x40011000
 8006750:	40011400 	.word	0x40011400
 8006754:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800675c:	2200      	movs	r2, #0
 800675e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006762:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006766:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800676a:	4642      	mov	r2, r8
 800676c:	464b      	mov	r3, r9
 800676e:	1891      	adds	r1, r2, r2
 8006770:	6239      	str	r1, [r7, #32]
 8006772:	415b      	adcs	r3, r3
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
 8006776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800677a:	4641      	mov	r1, r8
 800677c:	1854      	adds	r4, r2, r1
 800677e:	4649      	mov	r1, r9
 8006780:	eb43 0501 	adc.w	r5, r3, r1
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	00eb      	lsls	r3, r5, #3
 800678e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006792:	00e2      	lsls	r2, r4, #3
 8006794:	4614      	mov	r4, r2
 8006796:	461d      	mov	r5, r3
 8006798:	4643      	mov	r3, r8
 800679a:	18e3      	adds	r3, r4, r3
 800679c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067a0:	464b      	mov	r3, r9
 80067a2:	eb45 0303 	adc.w	r3, r5, r3
 80067a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067c6:	4629      	mov	r1, r5
 80067c8:	008b      	lsls	r3, r1, #2
 80067ca:	4621      	mov	r1, r4
 80067cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067d0:	4621      	mov	r1, r4
 80067d2:	008a      	lsls	r2, r1, #2
 80067d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067d8:	f7f9 fd6a 	bl	80002b0 <__aeabi_uldivmod>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4b60      	ldr	r3, [pc, #384]	; (8006964 <UART_SetConfig+0x4e4>)
 80067e2:	fba3 2302 	umull	r2, r3, r3, r2
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	011c      	lsls	r4, r3, #4
 80067ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067fc:	4642      	mov	r2, r8
 80067fe:	464b      	mov	r3, r9
 8006800:	1891      	adds	r1, r2, r2
 8006802:	61b9      	str	r1, [r7, #24]
 8006804:	415b      	adcs	r3, r3
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800680c:	4641      	mov	r1, r8
 800680e:	1851      	adds	r1, r2, r1
 8006810:	6139      	str	r1, [r7, #16]
 8006812:	4649      	mov	r1, r9
 8006814:	414b      	adcs	r3, r1
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006824:	4659      	mov	r1, fp
 8006826:	00cb      	lsls	r3, r1, #3
 8006828:	4651      	mov	r1, sl
 800682a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800682e:	4651      	mov	r1, sl
 8006830:	00ca      	lsls	r2, r1, #3
 8006832:	4610      	mov	r0, r2
 8006834:	4619      	mov	r1, r3
 8006836:	4603      	mov	r3, r0
 8006838:	4642      	mov	r2, r8
 800683a:	189b      	adds	r3, r3, r2
 800683c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006840:	464b      	mov	r3, r9
 8006842:	460a      	mov	r2, r1
 8006844:	eb42 0303 	adc.w	r3, r2, r3
 8006848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800684c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	67bb      	str	r3, [r7, #120]	; 0x78
 8006856:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006864:	4649      	mov	r1, r9
 8006866:	008b      	lsls	r3, r1, #2
 8006868:	4641      	mov	r1, r8
 800686a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800686e:	4641      	mov	r1, r8
 8006870:	008a      	lsls	r2, r1, #2
 8006872:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006876:	f7f9 fd1b 	bl	80002b0 <__aeabi_uldivmod>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	4b39      	ldr	r3, [pc, #228]	; (8006964 <UART_SetConfig+0x4e4>)
 8006880:	fba3 1302 	umull	r1, r3, r3, r2
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	2164      	movs	r1, #100	; 0x64
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	3332      	adds	r3, #50	; 0x32
 8006892:	4a34      	ldr	r2, [pc, #208]	; (8006964 <UART_SetConfig+0x4e4>)
 8006894:	fba2 2303 	umull	r2, r3, r2, r3
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800689e:	441c      	add	r4, r3
 80068a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a4:	2200      	movs	r2, #0
 80068a6:	673b      	str	r3, [r7, #112]	; 0x70
 80068a8:	677a      	str	r2, [r7, #116]	; 0x74
 80068aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068ae:	4642      	mov	r2, r8
 80068b0:	464b      	mov	r3, r9
 80068b2:	1891      	adds	r1, r2, r2
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	415b      	adcs	r3, r3
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068be:	4641      	mov	r1, r8
 80068c0:	1851      	adds	r1, r2, r1
 80068c2:	6039      	str	r1, [r7, #0]
 80068c4:	4649      	mov	r1, r9
 80068c6:	414b      	adcs	r3, r1
 80068c8:	607b      	str	r3, [r7, #4]
 80068ca:	f04f 0200 	mov.w	r2, #0
 80068ce:	f04f 0300 	mov.w	r3, #0
 80068d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068d6:	4659      	mov	r1, fp
 80068d8:	00cb      	lsls	r3, r1, #3
 80068da:	4651      	mov	r1, sl
 80068dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068e0:	4651      	mov	r1, sl
 80068e2:	00ca      	lsls	r2, r1, #3
 80068e4:	4610      	mov	r0, r2
 80068e6:	4619      	mov	r1, r3
 80068e8:	4603      	mov	r3, r0
 80068ea:	4642      	mov	r2, r8
 80068ec:	189b      	adds	r3, r3, r2
 80068ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80068f0:	464b      	mov	r3, r9
 80068f2:	460a      	mov	r2, r1
 80068f4:	eb42 0303 	adc.w	r3, r2, r3
 80068f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	663b      	str	r3, [r7, #96]	; 0x60
 8006904:	667a      	str	r2, [r7, #100]	; 0x64
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006912:	4649      	mov	r1, r9
 8006914:	008b      	lsls	r3, r1, #2
 8006916:	4641      	mov	r1, r8
 8006918:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800691c:	4641      	mov	r1, r8
 800691e:	008a      	lsls	r2, r1, #2
 8006920:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006924:	f7f9 fcc4 	bl	80002b0 <__aeabi_uldivmod>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <UART_SetConfig+0x4e4>)
 800692e:	fba3 1302 	umull	r1, r3, r3, r2
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	2164      	movs	r1, #100	; 0x64
 8006936:	fb01 f303 	mul.w	r3, r1, r3
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	3332      	adds	r3, #50	; 0x32
 8006940:	4a08      	ldr	r2, [pc, #32]	; (8006964 <UART_SetConfig+0x4e4>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	f003 020f 	and.w	r2, r3, #15
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4422      	add	r2, r4
 8006954:	609a      	str	r2, [r3, #8]
}
 8006956:	bf00      	nop
 8006958:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800695c:	46bd      	mov	sp, r7
 800695e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006962:	bf00      	nop
 8006964:	51eb851f 	.word	0x51eb851f

08006968 <atoi>:
 8006968:	220a      	movs	r2, #10
 800696a:	2100      	movs	r1, #0
 800696c:	f000 b8fe 	b.w	8006b6c <strtol>

08006970 <__errno>:
 8006970:	4b01      	ldr	r3, [pc, #4]	; (8006978 <__errno+0x8>)
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	2000000c 	.word	0x2000000c

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4d0d      	ldr	r5, [pc, #52]	; (80069b4 <__libc_init_array+0x38>)
 8006980:	4c0d      	ldr	r4, [pc, #52]	; (80069b8 <__libc_init_array+0x3c>)
 8006982:	1b64      	subs	r4, r4, r5
 8006984:	10a4      	asrs	r4, r4, #2
 8006986:	2600      	movs	r6, #0
 8006988:	42a6      	cmp	r6, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	4d0b      	ldr	r5, [pc, #44]	; (80069bc <__libc_init_array+0x40>)
 800698e:	4c0c      	ldr	r4, [pc, #48]	; (80069c0 <__libc_init_array+0x44>)
 8006990:	f000 fd44 	bl	800741c <_init>
 8006994:	1b64      	subs	r4, r4, r5
 8006996:	10a4      	asrs	r4, r4, #2
 8006998:	2600      	movs	r6, #0
 800699a:	42a6      	cmp	r6, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a4:	4798      	blx	r3
 80069a6:	3601      	adds	r6, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ae:	4798      	blx	r3
 80069b0:	3601      	adds	r6, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	080078dc 	.word	0x080078dc
 80069b8:	080078dc 	.word	0x080078dc
 80069bc:	080078dc 	.word	0x080078dc
 80069c0:	080078e0 	.word	0x080078e0

080069c4 <memset>:
 80069c4:	4402      	add	r2, r0
 80069c6:	4603      	mov	r3, r0
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d100      	bne.n	80069ce <memset+0xa>
 80069cc:	4770      	bx	lr
 80069ce:	f803 1b01 	strb.w	r1, [r3], #1
 80069d2:	e7f9      	b.n	80069c8 <memset+0x4>

080069d4 <siprintf>:
 80069d4:	b40e      	push	{r1, r2, r3}
 80069d6:	b500      	push	{lr}
 80069d8:	b09c      	sub	sp, #112	; 0x70
 80069da:	ab1d      	add	r3, sp, #116	; 0x74
 80069dc:	9002      	str	r0, [sp, #8]
 80069de:	9006      	str	r0, [sp, #24]
 80069e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069e4:	4809      	ldr	r0, [pc, #36]	; (8006a0c <siprintf+0x38>)
 80069e6:	9107      	str	r1, [sp, #28]
 80069e8:	9104      	str	r1, [sp, #16]
 80069ea:	4909      	ldr	r1, [pc, #36]	; (8006a10 <siprintf+0x3c>)
 80069ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f0:	9105      	str	r1, [sp, #20]
 80069f2:	6800      	ldr	r0, [r0, #0]
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	a902      	add	r1, sp, #8
 80069f8:	f000 f91e 	bl	8006c38 <_svfiprintf_r>
 80069fc:	9b02      	ldr	r3, [sp, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	b01c      	add	sp, #112	; 0x70
 8006a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a08:	b003      	add	sp, #12
 8006a0a:	4770      	bx	lr
 8006a0c:	2000000c 	.word	0x2000000c
 8006a10:	ffff0208 	.word	0xffff0208

08006a14 <strchr>:
 8006a14:	b2c9      	uxtb	r1, r1
 8006a16:	4603      	mov	r3, r0
 8006a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a1c:	b11a      	cbz	r2, 8006a26 <strchr+0x12>
 8006a1e:	428a      	cmp	r2, r1
 8006a20:	d1f9      	bne.n	8006a16 <strchr+0x2>
 8006a22:	4618      	mov	r0, r3
 8006a24:	4770      	bx	lr
 8006a26:	2900      	cmp	r1, #0
 8006a28:	bf18      	it	ne
 8006a2a:	2300      	movne	r3, #0
 8006a2c:	e7f9      	b.n	8006a22 <strchr+0xe>

08006a2e <strcpy>:
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a34:	f803 2b01 	strb.w	r2, [r3], #1
 8006a38:	2a00      	cmp	r2, #0
 8006a3a:	d1f9      	bne.n	8006a30 <strcpy+0x2>
 8006a3c:	4770      	bx	lr

08006a3e <strncmp>:
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	b17a      	cbz	r2, 8006a62 <strncmp+0x24>
 8006a42:	4603      	mov	r3, r0
 8006a44:	3901      	subs	r1, #1
 8006a46:	1884      	adds	r4, r0, r2
 8006a48:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006a4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006a50:	4290      	cmp	r0, r2
 8006a52:	d101      	bne.n	8006a58 <strncmp+0x1a>
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d101      	bne.n	8006a5c <strncmp+0x1e>
 8006a58:	1a80      	subs	r0, r0, r2
 8006a5a:	bd10      	pop	{r4, pc}
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d1f3      	bne.n	8006a48 <strncmp+0xa>
 8006a60:	e7fa      	b.n	8006a58 <strncmp+0x1a>
 8006a62:	4610      	mov	r0, r2
 8006a64:	e7f9      	b.n	8006a5a <strncmp+0x1c>
	...

08006a68 <_strtol_l.constprop.0>:
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6e:	d001      	beq.n	8006a74 <_strtol_l.constprop.0+0xc>
 8006a70:	2b24      	cmp	r3, #36	; 0x24
 8006a72:	d906      	bls.n	8006a82 <_strtol_l.constprop.0+0x1a>
 8006a74:	f7ff ff7c 	bl	8006970 <__errno>
 8006a78:	2316      	movs	r3, #22
 8006a7a:	6003      	str	r3, [r0, #0]
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006b68 <_strtol_l.constprop.0+0x100>
 8006a86:	460d      	mov	r5, r1
 8006a88:	462e      	mov	r6, r5
 8006a8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006a92:	f017 0708 	ands.w	r7, r7, #8
 8006a96:	d1f7      	bne.n	8006a88 <_strtol_l.constprop.0+0x20>
 8006a98:	2c2d      	cmp	r4, #45	; 0x2d
 8006a9a:	d132      	bne.n	8006b02 <_strtol_l.constprop.0+0x9a>
 8006a9c:	782c      	ldrb	r4, [r5, #0]
 8006a9e:	2701      	movs	r7, #1
 8006aa0:	1cb5      	adds	r5, r6, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d05b      	beq.n	8006b5e <_strtol_l.constprop.0+0xf6>
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d109      	bne.n	8006abe <_strtol_l.constprop.0+0x56>
 8006aaa:	2c30      	cmp	r4, #48	; 0x30
 8006aac:	d107      	bne.n	8006abe <_strtol_l.constprop.0+0x56>
 8006aae:	782c      	ldrb	r4, [r5, #0]
 8006ab0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ab4:	2c58      	cmp	r4, #88	; 0x58
 8006ab6:	d14d      	bne.n	8006b54 <_strtol_l.constprop.0+0xec>
 8006ab8:	786c      	ldrb	r4, [r5, #1]
 8006aba:	2310      	movs	r3, #16
 8006abc:	3502      	adds	r5, #2
 8006abe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006ac2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ac6:	f04f 0c00 	mov.w	ip, #0
 8006aca:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ace:	4666      	mov	r6, ip
 8006ad0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ad4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006ad8:	f1be 0f09 	cmp.w	lr, #9
 8006adc:	d816      	bhi.n	8006b0c <_strtol_l.constprop.0+0xa4>
 8006ade:	4674      	mov	r4, lr
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	dd24      	ble.n	8006b2e <_strtol_l.constprop.0+0xc6>
 8006ae4:	f1bc 0f00 	cmp.w	ip, #0
 8006ae8:	db1e      	blt.n	8006b28 <_strtol_l.constprop.0+0xc0>
 8006aea:	45b1      	cmp	r9, r6
 8006aec:	d31c      	bcc.n	8006b28 <_strtol_l.constprop.0+0xc0>
 8006aee:	d101      	bne.n	8006af4 <_strtol_l.constprop.0+0x8c>
 8006af0:	45a2      	cmp	sl, r4
 8006af2:	db19      	blt.n	8006b28 <_strtol_l.constprop.0+0xc0>
 8006af4:	fb06 4603 	mla	r6, r6, r3, r4
 8006af8:	f04f 0c01 	mov.w	ip, #1
 8006afc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b00:	e7e8      	b.n	8006ad4 <_strtol_l.constprop.0+0x6c>
 8006b02:	2c2b      	cmp	r4, #43	; 0x2b
 8006b04:	bf04      	itt	eq
 8006b06:	782c      	ldrbeq	r4, [r5, #0]
 8006b08:	1cb5      	addeq	r5, r6, #2
 8006b0a:	e7ca      	b.n	8006aa2 <_strtol_l.constprop.0+0x3a>
 8006b0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006b10:	f1be 0f19 	cmp.w	lr, #25
 8006b14:	d801      	bhi.n	8006b1a <_strtol_l.constprop.0+0xb2>
 8006b16:	3c37      	subs	r4, #55	; 0x37
 8006b18:	e7e2      	b.n	8006ae0 <_strtol_l.constprop.0+0x78>
 8006b1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006b1e:	f1be 0f19 	cmp.w	lr, #25
 8006b22:	d804      	bhi.n	8006b2e <_strtol_l.constprop.0+0xc6>
 8006b24:	3c57      	subs	r4, #87	; 0x57
 8006b26:	e7db      	b.n	8006ae0 <_strtol_l.constprop.0+0x78>
 8006b28:	f04f 3cff 	mov.w	ip, #4294967295
 8006b2c:	e7e6      	b.n	8006afc <_strtol_l.constprop.0+0x94>
 8006b2e:	f1bc 0f00 	cmp.w	ip, #0
 8006b32:	da05      	bge.n	8006b40 <_strtol_l.constprop.0+0xd8>
 8006b34:	2322      	movs	r3, #34	; 0x22
 8006b36:	6003      	str	r3, [r0, #0]
 8006b38:	4646      	mov	r6, r8
 8006b3a:	b942      	cbnz	r2, 8006b4e <_strtol_l.constprop.0+0xe6>
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	e79e      	b.n	8006a7e <_strtol_l.constprop.0+0x16>
 8006b40:	b107      	cbz	r7, 8006b44 <_strtol_l.constprop.0+0xdc>
 8006b42:	4276      	negs	r6, r6
 8006b44:	2a00      	cmp	r2, #0
 8006b46:	d0f9      	beq.n	8006b3c <_strtol_l.constprop.0+0xd4>
 8006b48:	f1bc 0f00 	cmp.w	ip, #0
 8006b4c:	d000      	beq.n	8006b50 <_strtol_l.constprop.0+0xe8>
 8006b4e:	1e69      	subs	r1, r5, #1
 8006b50:	6011      	str	r1, [r2, #0]
 8006b52:	e7f3      	b.n	8006b3c <_strtol_l.constprop.0+0xd4>
 8006b54:	2430      	movs	r4, #48	; 0x30
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1b1      	bne.n	8006abe <_strtol_l.constprop.0+0x56>
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	e7af      	b.n	8006abe <_strtol_l.constprop.0+0x56>
 8006b5e:	2c30      	cmp	r4, #48	; 0x30
 8006b60:	d0a5      	beq.n	8006aae <_strtol_l.constprop.0+0x46>
 8006b62:	230a      	movs	r3, #10
 8006b64:	e7ab      	b.n	8006abe <_strtol_l.constprop.0+0x56>
 8006b66:	bf00      	nop
 8006b68:	080077a1 	.word	0x080077a1

08006b6c <strtol>:
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	460a      	mov	r2, r1
 8006b70:	4601      	mov	r1, r0
 8006b72:	4802      	ldr	r0, [pc, #8]	; (8006b7c <strtol+0x10>)
 8006b74:	6800      	ldr	r0, [r0, #0]
 8006b76:	f7ff bf77 	b.w	8006a68 <_strtol_l.constprop.0>
 8006b7a:	bf00      	nop
 8006b7c:	2000000c 	.word	0x2000000c

08006b80 <__ssputs_r>:
 8006b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b84:	688e      	ldr	r6, [r1, #8]
 8006b86:	429e      	cmp	r6, r3
 8006b88:	4682      	mov	sl, r0
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	4690      	mov	r8, r2
 8006b8e:	461f      	mov	r7, r3
 8006b90:	d838      	bhi.n	8006c04 <__ssputs_r+0x84>
 8006b92:	898a      	ldrh	r2, [r1, #12]
 8006b94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b98:	d032      	beq.n	8006c00 <__ssputs_r+0x80>
 8006b9a:	6825      	ldr	r5, [r4, #0]
 8006b9c:	6909      	ldr	r1, [r1, #16]
 8006b9e:	eba5 0901 	sub.w	r9, r5, r1
 8006ba2:	6965      	ldr	r5, [r4, #20]
 8006ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bac:	3301      	adds	r3, #1
 8006bae:	444b      	add	r3, r9
 8006bb0:	106d      	asrs	r5, r5, #1
 8006bb2:	429d      	cmp	r5, r3
 8006bb4:	bf38      	it	cc
 8006bb6:	461d      	movcc	r5, r3
 8006bb8:	0553      	lsls	r3, r2, #21
 8006bba:	d531      	bpl.n	8006c20 <__ssputs_r+0xa0>
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f000 fb63 	bl	8007288 <_malloc_r>
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	b950      	cbnz	r0, 8006bdc <__ssputs_r+0x5c>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	f8ca 3000 	str.w	r3, [sl]
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bdc:	6921      	ldr	r1, [r4, #16]
 8006bde:	464a      	mov	r2, r9
 8006be0:	f000 fabe 	bl	8007160 <memcpy>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	6126      	str	r6, [r4, #16]
 8006bf2:	6165      	str	r5, [r4, #20]
 8006bf4:	444e      	add	r6, r9
 8006bf6:	eba5 0509 	sub.w	r5, r5, r9
 8006bfa:	6026      	str	r6, [r4, #0]
 8006bfc:	60a5      	str	r5, [r4, #8]
 8006bfe:	463e      	mov	r6, r7
 8006c00:	42be      	cmp	r6, r7
 8006c02:	d900      	bls.n	8006c06 <__ssputs_r+0x86>
 8006c04:	463e      	mov	r6, r7
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4641      	mov	r1, r8
 8006c0c:	f000 fab6 	bl	800717c <memmove>
 8006c10:	68a3      	ldr	r3, [r4, #8]
 8006c12:	1b9b      	subs	r3, r3, r6
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	4433      	add	r3, r6
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e7db      	b.n	8006bd8 <__ssputs_r+0x58>
 8006c20:	462a      	mov	r2, r5
 8006c22:	f000 fba5 	bl	8007370 <_realloc_r>
 8006c26:	4606      	mov	r6, r0
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d1e1      	bne.n	8006bf0 <__ssputs_r+0x70>
 8006c2c:	6921      	ldr	r1, [r4, #16]
 8006c2e:	4650      	mov	r0, sl
 8006c30:	f000 fabe 	bl	80071b0 <_free_r>
 8006c34:	e7c7      	b.n	8006bc6 <__ssputs_r+0x46>
	...

08006c38 <_svfiprintf_r>:
 8006c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3c:	4698      	mov	r8, r3
 8006c3e:	898b      	ldrh	r3, [r1, #12]
 8006c40:	061b      	lsls	r3, r3, #24
 8006c42:	b09d      	sub	sp, #116	; 0x74
 8006c44:	4607      	mov	r7, r0
 8006c46:	460d      	mov	r5, r1
 8006c48:	4614      	mov	r4, r2
 8006c4a:	d50e      	bpl.n	8006c6a <_svfiprintf_r+0x32>
 8006c4c:	690b      	ldr	r3, [r1, #16]
 8006c4e:	b963      	cbnz	r3, 8006c6a <_svfiprintf_r+0x32>
 8006c50:	2140      	movs	r1, #64	; 0x40
 8006c52:	f000 fb19 	bl	8007288 <_malloc_r>
 8006c56:	6028      	str	r0, [r5, #0]
 8006c58:	6128      	str	r0, [r5, #16]
 8006c5a:	b920      	cbnz	r0, 8006c66 <_svfiprintf_r+0x2e>
 8006c5c:	230c      	movs	r3, #12
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295
 8006c64:	e0d1      	b.n	8006e0a <_svfiprintf_r+0x1d2>
 8006c66:	2340      	movs	r3, #64	; 0x40
 8006c68:	616b      	str	r3, [r5, #20]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6e:	2320      	movs	r3, #32
 8006c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c78:	2330      	movs	r3, #48	; 0x30
 8006c7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e24 <_svfiprintf_r+0x1ec>
 8006c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c82:	f04f 0901 	mov.w	r9, #1
 8006c86:	4623      	mov	r3, r4
 8006c88:	469a      	mov	sl, r3
 8006c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c8e:	b10a      	cbz	r2, 8006c94 <_svfiprintf_r+0x5c>
 8006c90:	2a25      	cmp	r2, #37	; 0x25
 8006c92:	d1f9      	bne.n	8006c88 <_svfiprintf_r+0x50>
 8006c94:	ebba 0b04 	subs.w	fp, sl, r4
 8006c98:	d00b      	beq.n	8006cb2 <_svfiprintf_r+0x7a>
 8006c9a:	465b      	mov	r3, fp
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f7ff ff6d 	bl	8006b80 <__ssputs_r>
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	f000 80aa 	beq.w	8006e00 <_svfiprintf_r+0x1c8>
 8006cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cae:	445a      	add	r2, fp
 8006cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8006cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 80a2 	beq.w	8006e00 <_svfiprintf_r+0x1c8>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cc6:	f10a 0a01 	add.w	sl, sl, #1
 8006cca:	9304      	str	r3, [sp, #16]
 8006ccc:	9307      	str	r3, [sp, #28]
 8006cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8006cd4:	4654      	mov	r4, sl
 8006cd6:	2205      	movs	r2, #5
 8006cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cdc:	4851      	ldr	r0, [pc, #324]	; (8006e24 <_svfiprintf_r+0x1ec>)
 8006cde:	f7f9 fa97 	bl	8000210 <memchr>
 8006ce2:	9a04      	ldr	r2, [sp, #16]
 8006ce4:	b9d8      	cbnz	r0, 8006d1e <_svfiprintf_r+0xe6>
 8006ce6:	06d0      	lsls	r0, r2, #27
 8006ce8:	bf44      	itt	mi
 8006cea:	2320      	movmi	r3, #32
 8006cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf0:	0711      	lsls	r1, r2, #28
 8006cf2:	bf44      	itt	mi
 8006cf4:	232b      	movmi	r3, #43	; 0x2b
 8006cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8006cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006d00:	d015      	beq.n	8006d2e <_svfiprintf_r+0xf6>
 8006d02:	9a07      	ldr	r2, [sp, #28]
 8006d04:	4654      	mov	r4, sl
 8006d06:	2000      	movs	r0, #0
 8006d08:	f04f 0c0a 	mov.w	ip, #10
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d12:	3b30      	subs	r3, #48	; 0x30
 8006d14:	2b09      	cmp	r3, #9
 8006d16:	d94e      	bls.n	8006db6 <_svfiprintf_r+0x17e>
 8006d18:	b1b0      	cbz	r0, 8006d48 <_svfiprintf_r+0x110>
 8006d1a:	9207      	str	r2, [sp, #28]
 8006d1c:	e014      	b.n	8006d48 <_svfiprintf_r+0x110>
 8006d1e:	eba0 0308 	sub.w	r3, r0, r8
 8006d22:	fa09 f303 	lsl.w	r3, r9, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	9304      	str	r3, [sp, #16]
 8006d2a:	46a2      	mov	sl, r4
 8006d2c:	e7d2      	b.n	8006cd4 <_svfiprintf_r+0x9c>
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	1d19      	adds	r1, r3, #4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	9103      	str	r1, [sp, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfbb      	ittet	lt
 8006d3a:	425b      	neglt	r3, r3
 8006d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d40:	9307      	strge	r3, [sp, #28]
 8006d42:	9307      	strlt	r3, [sp, #28]
 8006d44:	bfb8      	it	lt
 8006d46:	9204      	strlt	r2, [sp, #16]
 8006d48:	7823      	ldrb	r3, [r4, #0]
 8006d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d4c:	d10c      	bne.n	8006d68 <_svfiprintf_r+0x130>
 8006d4e:	7863      	ldrb	r3, [r4, #1]
 8006d50:	2b2a      	cmp	r3, #42	; 0x2a
 8006d52:	d135      	bne.n	8006dc0 <_svfiprintf_r+0x188>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	1d1a      	adds	r2, r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	9203      	str	r2, [sp, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfb8      	it	lt
 8006d60:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d64:	3402      	adds	r4, #2
 8006d66:	9305      	str	r3, [sp, #20]
 8006d68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e34 <_svfiprintf_r+0x1fc>
 8006d6c:	7821      	ldrb	r1, [r4, #0]
 8006d6e:	2203      	movs	r2, #3
 8006d70:	4650      	mov	r0, sl
 8006d72:	f7f9 fa4d 	bl	8000210 <memchr>
 8006d76:	b140      	cbz	r0, 8006d8a <_svfiprintf_r+0x152>
 8006d78:	2340      	movs	r3, #64	; 0x40
 8006d7a:	eba0 000a 	sub.w	r0, r0, sl
 8006d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d82:	9b04      	ldr	r3, [sp, #16]
 8006d84:	4303      	orrs	r3, r0
 8006d86:	3401      	adds	r4, #1
 8006d88:	9304      	str	r3, [sp, #16]
 8006d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d8e:	4826      	ldr	r0, [pc, #152]	; (8006e28 <_svfiprintf_r+0x1f0>)
 8006d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d94:	2206      	movs	r2, #6
 8006d96:	f7f9 fa3b 	bl	8000210 <memchr>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d038      	beq.n	8006e10 <_svfiprintf_r+0x1d8>
 8006d9e:	4b23      	ldr	r3, [pc, #140]	; (8006e2c <_svfiprintf_r+0x1f4>)
 8006da0:	bb1b      	cbnz	r3, 8006dea <_svfiprintf_r+0x1b2>
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	3307      	adds	r3, #7
 8006da6:	f023 0307 	bic.w	r3, r3, #7
 8006daa:	3308      	adds	r3, #8
 8006dac:	9303      	str	r3, [sp, #12]
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	4433      	add	r3, r6
 8006db2:	9309      	str	r3, [sp, #36]	; 0x24
 8006db4:	e767      	b.n	8006c86 <_svfiprintf_r+0x4e>
 8006db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dba:	460c      	mov	r4, r1
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	e7a5      	b.n	8006d0c <_svfiprintf_r+0xd4>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	3401      	adds	r4, #1
 8006dc4:	9305      	str	r3, [sp, #20]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f04f 0c0a 	mov.w	ip, #10
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd2:	3a30      	subs	r2, #48	; 0x30
 8006dd4:	2a09      	cmp	r2, #9
 8006dd6:	d903      	bls.n	8006de0 <_svfiprintf_r+0x1a8>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0c5      	beq.n	8006d68 <_svfiprintf_r+0x130>
 8006ddc:	9105      	str	r1, [sp, #20]
 8006dde:	e7c3      	b.n	8006d68 <_svfiprintf_r+0x130>
 8006de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006de4:	4604      	mov	r4, r0
 8006de6:	2301      	movs	r3, #1
 8006de8:	e7f0      	b.n	8006dcc <_svfiprintf_r+0x194>
 8006dea:	ab03      	add	r3, sp, #12
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	462a      	mov	r2, r5
 8006df0:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <_svfiprintf_r+0x1f8>)
 8006df2:	a904      	add	r1, sp, #16
 8006df4:	4638      	mov	r0, r7
 8006df6:	f3af 8000 	nop.w
 8006dfa:	1c42      	adds	r2, r0, #1
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	d1d6      	bne.n	8006dae <_svfiprintf_r+0x176>
 8006e00:	89ab      	ldrh	r3, [r5, #12]
 8006e02:	065b      	lsls	r3, r3, #25
 8006e04:	f53f af2c 	bmi.w	8006c60 <_svfiprintf_r+0x28>
 8006e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e0a:	b01d      	add	sp, #116	; 0x74
 8006e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e10:	ab03      	add	r3, sp, #12
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	462a      	mov	r2, r5
 8006e16:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <_svfiprintf_r+0x1f8>)
 8006e18:	a904      	add	r1, sp, #16
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	f000 f87a 	bl	8006f14 <_printf_i>
 8006e20:	e7eb      	b.n	8006dfa <_svfiprintf_r+0x1c2>
 8006e22:	bf00      	nop
 8006e24:	080078a1 	.word	0x080078a1
 8006e28:	080078ab 	.word	0x080078ab
 8006e2c:	00000000 	.word	0x00000000
 8006e30:	08006b81 	.word	0x08006b81
 8006e34:	080078a7 	.word	0x080078a7

08006e38 <_printf_common>:
 8006e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	4699      	mov	r9, r3
 8006e40:	688a      	ldr	r2, [r1, #8]
 8006e42:	690b      	ldr	r3, [r1, #16]
 8006e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	bfb8      	it	lt
 8006e4c:	4613      	movlt	r3, r2
 8006e4e:	6033      	str	r3, [r6, #0]
 8006e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e54:	4607      	mov	r7, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	b10a      	cbz	r2, 8006e5e <_printf_common+0x26>
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	6033      	str	r3, [r6, #0]
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	0699      	lsls	r1, r3, #26
 8006e62:	bf42      	ittt	mi
 8006e64:	6833      	ldrmi	r3, [r6, #0]
 8006e66:	3302      	addmi	r3, #2
 8006e68:	6033      	strmi	r3, [r6, #0]
 8006e6a:	6825      	ldr	r5, [r4, #0]
 8006e6c:	f015 0506 	ands.w	r5, r5, #6
 8006e70:	d106      	bne.n	8006e80 <_printf_common+0x48>
 8006e72:	f104 0a19 	add.w	sl, r4, #25
 8006e76:	68e3      	ldr	r3, [r4, #12]
 8006e78:	6832      	ldr	r2, [r6, #0]
 8006e7a:	1a9b      	subs	r3, r3, r2
 8006e7c:	42ab      	cmp	r3, r5
 8006e7e:	dc26      	bgt.n	8006ece <_printf_common+0x96>
 8006e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e84:	1e13      	subs	r3, r2, #0
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	bf18      	it	ne
 8006e8a:	2301      	movne	r3, #1
 8006e8c:	0692      	lsls	r2, r2, #26
 8006e8e:	d42b      	bmi.n	8006ee8 <_printf_common+0xb0>
 8006e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e94:	4649      	mov	r1, r9
 8006e96:	4638      	mov	r0, r7
 8006e98:	47c0      	blx	r8
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d01e      	beq.n	8006edc <_printf_common+0xa4>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	68e5      	ldr	r5, [r4, #12]
 8006ea2:	6832      	ldr	r2, [r6, #0]
 8006ea4:	f003 0306 	and.w	r3, r3, #6
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	bf08      	it	eq
 8006eac:	1aad      	subeq	r5, r5, r2
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	6922      	ldr	r2, [r4, #16]
 8006eb2:	bf0c      	ite	eq
 8006eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb8:	2500      	movne	r5, #0
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	bfc4      	itt	gt
 8006ebe:	1a9b      	subgt	r3, r3, r2
 8006ec0:	18ed      	addgt	r5, r5, r3
 8006ec2:	2600      	movs	r6, #0
 8006ec4:	341a      	adds	r4, #26
 8006ec6:	42b5      	cmp	r5, r6
 8006ec8:	d11a      	bne.n	8006f00 <_printf_common+0xc8>
 8006eca:	2000      	movs	r0, #0
 8006ecc:	e008      	b.n	8006ee0 <_printf_common+0xa8>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4652      	mov	r2, sl
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	47c0      	blx	r8
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d103      	bne.n	8006ee4 <_printf_common+0xac>
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee4:	3501      	adds	r5, #1
 8006ee6:	e7c6      	b.n	8006e76 <_printf_common+0x3e>
 8006ee8:	18e1      	adds	r1, r4, r3
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	2030      	movs	r0, #48	; 0x30
 8006eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ef2:	4422      	add	r2, r4
 8006ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006efc:	3302      	adds	r3, #2
 8006efe:	e7c7      	b.n	8006e90 <_printf_common+0x58>
 8006f00:	2301      	movs	r3, #1
 8006f02:	4622      	mov	r2, r4
 8006f04:	4649      	mov	r1, r9
 8006f06:	4638      	mov	r0, r7
 8006f08:	47c0      	blx	r8
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d0e6      	beq.n	8006edc <_printf_common+0xa4>
 8006f0e:	3601      	adds	r6, #1
 8006f10:	e7d9      	b.n	8006ec6 <_printf_common+0x8e>
	...

08006f14 <_printf_i>:
 8006f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f18:	7e0f      	ldrb	r7, [r1, #24]
 8006f1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f1c:	2f78      	cmp	r7, #120	; 0x78
 8006f1e:	4691      	mov	r9, r2
 8006f20:	4680      	mov	r8, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	469a      	mov	sl, r3
 8006f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f2a:	d807      	bhi.n	8006f3c <_printf_i+0x28>
 8006f2c:	2f62      	cmp	r7, #98	; 0x62
 8006f2e:	d80a      	bhi.n	8006f46 <_printf_i+0x32>
 8006f30:	2f00      	cmp	r7, #0
 8006f32:	f000 80d8 	beq.w	80070e6 <_printf_i+0x1d2>
 8006f36:	2f58      	cmp	r7, #88	; 0x58
 8006f38:	f000 80a3 	beq.w	8007082 <_printf_i+0x16e>
 8006f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f44:	e03a      	b.n	8006fbc <_printf_i+0xa8>
 8006f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f4a:	2b15      	cmp	r3, #21
 8006f4c:	d8f6      	bhi.n	8006f3c <_printf_i+0x28>
 8006f4e:	a101      	add	r1, pc, #4	; (adr r1, 8006f54 <_printf_i+0x40>)
 8006f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f54:	08006fad 	.word	0x08006fad
 8006f58:	08006fc1 	.word	0x08006fc1
 8006f5c:	08006f3d 	.word	0x08006f3d
 8006f60:	08006f3d 	.word	0x08006f3d
 8006f64:	08006f3d 	.word	0x08006f3d
 8006f68:	08006f3d 	.word	0x08006f3d
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08006f3d 	.word	0x08006f3d
 8006f74:	08006f3d 	.word	0x08006f3d
 8006f78:	08006f3d 	.word	0x08006f3d
 8006f7c:	08006f3d 	.word	0x08006f3d
 8006f80:	080070cd 	.word	0x080070cd
 8006f84:	08006ff1 	.word	0x08006ff1
 8006f88:	080070af 	.word	0x080070af
 8006f8c:	08006f3d 	.word	0x08006f3d
 8006f90:	08006f3d 	.word	0x08006f3d
 8006f94:	080070ef 	.word	0x080070ef
 8006f98:	08006f3d 	.word	0x08006f3d
 8006f9c:	08006ff1 	.word	0x08006ff1
 8006fa0:	08006f3d 	.word	0x08006f3d
 8006fa4:	08006f3d 	.word	0x08006f3d
 8006fa8:	080070b7 	.word	0x080070b7
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	1d1a      	adds	r2, r3, #4
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	602a      	str	r2, [r5, #0]
 8006fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0a3      	b.n	8007108 <_printf_i+0x1f4>
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	6829      	ldr	r1, [r5, #0]
 8006fc4:	0606      	lsls	r6, r0, #24
 8006fc6:	f101 0304 	add.w	r3, r1, #4
 8006fca:	d50a      	bpl.n	8006fe2 <_printf_i+0xce>
 8006fcc:	680e      	ldr	r6, [r1, #0]
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	2e00      	cmp	r6, #0
 8006fd2:	da03      	bge.n	8006fdc <_printf_i+0xc8>
 8006fd4:	232d      	movs	r3, #45	; 0x2d
 8006fd6:	4276      	negs	r6, r6
 8006fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fdc:	485e      	ldr	r0, [pc, #376]	; (8007158 <_printf_i+0x244>)
 8006fde:	230a      	movs	r3, #10
 8006fe0:	e019      	b.n	8007016 <_printf_i+0x102>
 8006fe2:	680e      	ldr	r6, [r1, #0]
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fea:	bf18      	it	ne
 8006fec:	b236      	sxthne	r6, r6
 8006fee:	e7ef      	b.n	8006fd0 <_printf_i+0xbc>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	6820      	ldr	r0, [r4, #0]
 8006ff4:	1d19      	adds	r1, r3, #4
 8006ff6:	6029      	str	r1, [r5, #0]
 8006ff8:	0601      	lsls	r1, r0, #24
 8006ffa:	d501      	bpl.n	8007000 <_printf_i+0xec>
 8006ffc:	681e      	ldr	r6, [r3, #0]
 8006ffe:	e002      	b.n	8007006 <_printf_i+0xf2>
 8007000:	0646      	lsls	r6, r0, #25
 8007002:	d5fb      	bpl.n	8006ffc <_printf_i+0xe8>
 8007004:	881e      	ldrh	r6, [r3, #0]
 8007006:	4854      	ldr	r0, [pc, #336]	; (8007158 <_printf_i+0x244>)
 8007008:	2f6f      	cmp	r7, #111	; 0x6f
 800700a:	bf0c      	ite	eq
 800700c:	2308      	moveq	r3, #8
 800700e:	230a      	movne	r3, #10
 8007010:	2100      	movs	r1, #0
 8007012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007016:	6865      	ldr	r5, [r4, #4]
 8007018:	60a5      	str	r5, [r4, #8]
 800701a:	2d00      	cmp	r5, #0
 800701c:	bfa2      	ittt	ge
 800701e:	6821      	ldrge	r1, [r4, #0]
 8007020:	f021 0104 	bicge.w	r1, r1, #4
 8007024:	6021      	strge	r1, [r4, #0]
 8007026:	b90e      	cbnz	r6, 800702c <_printf_i+0x118>
 8007028:	2d00      	cmp	r5, #0
 800702a:	d04d      	beq.n	80070c8 <_printf_i+0x1b4>
 800702c:	4615      	mov	r5, r2
 800702e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007032:	fb03 6711 	mls	r7, r3, r1, r6
 8007036:	5dc7      	ldrb	r7, [r0, r7]
 8007038:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800703c:	4637      	mov	r7, r6
 800703e:	42bb      	cmp	r3, r7
 8007040:	460e      	mov	r6, r1
 8007042:	d9f4      	bls.n	800702e <_printf_i+0x11a>
 8007044:	2b08      	cmp	r3, #8
 8007046:	d10b      	bne.n	8007060 <_printf_i+0x14c>
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	07de      	lsls	r6, r3, #31
 800704c:	d508      	bpl.n	8007060 <_printf_i+0x14c>
 800704e:	6923      	ldr	r3, [r4, #16]
 8007050:	6861      	ldr	r1, [r4, #4]
 8007052:	4299      	cmp	r1, r3
 8007054:	bfde      	ittt	le
 8007056:	2330      	movle	r3, #48	; 0x30
 8007058:	f805 3c01 	strble.w	r3, [r5, #-1]
 800705c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007060:	1b52      	subs	r2, r2, r5
 8007062:	6122      	str	r2, [r4, #16]
 8007064:	f8cd a000 	str.w	sl, [sp]
 8007068:	464b      	mov	r3, r9
 800706a:	aa03      	add	r2, sp, #12
 800706c:	4621      	mov	r1, r4
 800706e:	4640      	mov	r0, r8
 8007070:	f7ff fee2 	bl	8006e38 <_printf_common>
 8007074:	3001      	adds	r0, #1
 8007076:	d14c      	bne.n	8007112 <_printf_i+0x1fe>
 8007078:	f04f 30ff 	mov.w	r0, #4294967295
 800707c:	b004      	add	sp, #16
 800707e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007082:	4835      	ldr	r0, [pc, #212]	; (8007158 <_printf_i+0x244>)
 8007084:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007088:	6829      	ldr	r1, [r5, #0]
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007090:	6029      	str	r1, [r5, #0]
 8007092:	061d      	lsls	r5, r3, #24
 8007094:	d514      	bpl.n	80070c0 <_printf_i+0x1ac>
 8007096:	07df      	lsls	r7, r3, #31
 8007098:	bf44      	itt	mi
 800709a:	f043 0320 	orrmi.w	r3, r3, #32
 800709e:	6023      	strmi	r3, [r4, #0]
 80070a0:	b91e      	cbnz	r6, 80070aa <_printf_i+0x196>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	f023 0320 	bic.w	r3, r3, #32
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	2310      	movs	r3, #16
 80070ac:	e7b0      	b.n	8007010 <_printf_i+0xfc>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	f043 0320 	orr.w	r3, r3, #32
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	2378      	movs	r3, #120	; 0x78
 80070b8:	4828      	ldr	r0, [pc, #160]	; (800715c <_printf_i+0x248>)
 80070ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070be:	e7e3      	b.n	8007088 <_printf_i+0x174>
 80070c0:	0659      	lsls	r1, r3, #25
 80070c2:	bf48      	it	mi
 80070c4:	b2b6      	uxthmi	r6, r6
 80070c6:	e7e6      	b.n	8007096 <_printf_i+0x182>
 80070c8:	4615      	mov	r5, r2
 80070ca:	e7bb      	b.n	8007044 <_printf_i+0x130>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	6826      	ldr	r6, [r4, #0]
 80070d0:	6961      	ldr	r1, [r4, #20]
 80070d2:	1d18      	adds	r0, r3, #4
 80070d4:	6028      	str	r0, [r5, #0]
 80070d6:	0635      	lsls	r5, r6, #24
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	d501      	bpl.n	80070e0 <_printf_i+0x1cc>
 80070dc:	6019      	str	r1, [r3, #0]
 80070de:	e002      	b.n	80070e6 <_printf_i+0x1d2>
 80070e0:	0670      	lsls	r0, r6, #25
 80070e2:	d5fb      	bpl.n	80070dc <_printf_i+0x1c8>
 80070e4:	8019      	strh	r1, [r3, #0]
 80070e6:	2300      	movs	r3, #0
 80070e8:	6123      	str	r3, [r4, #16]
 80070ea:	4615      	mov	r5, r2
 80070ec:	e7ba      	b.n	8007064 <_printf_i+0x150>
 80070ee:	682b      	ldr	r3, [r5, #0]
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	602a      	str	r2, [r5, #0]
 80070f4:	681d      	ldr	r5, [r3, #0]
 80070f6:	6862      	ldr	r2, [r4, #4]
 80070f8:	2100      	movs	r1, #0
 80070fa:	4628      	mov	r0, r5
 80070fc:	f7f9 f888 	bl	8000210 <memchr>
 8007100:	b108      	cbz	r0, 8007106 <_printf_i+0x1f2>
 8007102:	1b40      	subs	r0, r0, r5
 8007104:	6060      	str	r0, [r4, #4]
 8007106:	6863      	ldr	r3, [r4, #4]
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	2300      	movs	r3, #0
 800710c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007110:	e7a8      	b.n	8007064 <_printf_i+0x150>
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	462a      	mov	r2, r5
 8007116:	4649      	mov	r1, r9
 8007118:	4640      	mov	r0, r8
 800711a:	47d0      	blx	sl
 800711c:	3001      	adds	r0, #1
 800711e:	d0ab      	beq.n	8007078 <_printf_i+0x164>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	079b      	lsls	r3, r3, #30
 8007124:	d413      	bmi.n	800714e <_printf_i+0x23a>
 8007126:	68e0      	ldr	r0, [r4, #12]
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	4298      	cmp	r0, r3
 800712c:	bfb8      	it	lt
 800712e:	4618      	movlt	r0, r3
 8007130:	e7a4      	b.n	800707c <_printf_i+0x168>
 8007132:	2301      	movs	r3, #1
 8007134:	4632      	mov	r2, r6
 8007136:	4649      	mov	r1, r9
 8007138:	4640      	mov	r0, r8
 800713a:	47d0      	blx	sl
 800713c:	3001      	adds	r0, #1
 800713e:	d09b      	beq.n	8007078 <_printf_i+0x164>
 8007140:	3501      	adds	r5, #1
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	9903      	ldr	r1, [sp, #12]
 8007146:	1a5b      	subs	r3, r3, r1
 8007148:	42ab      	cmp	r3, r5
 800714a:	dcf2      	bgt.n	8007132 <_printf_i+0x21e>
 800714c:	e7eb      	b.n	8007126 <_printf_i+0x212>
 800714e:	2500      	movs	r5, #0
 8007150:	f104 0619 	add.w	r6, r4, #25
 8007154:	e7f5      	b.n	8007142 <_printf_i+0x22e>
 8007156:	bf00      	nop
 8007158:	080078b2 	.word	0x080078b2
 800715c:	080078c3 	.word	0x080078c3

08007160 <memcpy>:
 8007160:	440a      	add	r2, r1
 8007162:	4291      	cmp	r1, r2
 8007164:	f100 33ff 	add.w	r3, r0, #4294967295
 8007168:	d100      	bne.n	800716c <memcpy+0xc>
 800716a:	4770      	bx	lr
 800716c:	b510      	push	{r4, lr}
 800716e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007176:	4291      	cmp	r1, r2
 8007178:	d1f9      	bne.n	800716e <memcpy+0xe>
 800717a:	bd10      	pop	{r4, pc}

0800717c <memmove>:
 800717c:	4288      	cmp	r0, r1
 800717e:	b510      	push	{r4, lr}
 8007180:	eb01 0402 	add.w	r4, r1, r2
 8007184:	d902      	bls.n	800718c <memmove+0x10>
 8007186:	4284      	cmp	r4, r0
 8007188:	4623      	mov	r3, r4
 800718a:	d807      	bhi.n	800719c <memmove+0x20>
 800718c:	1e43      	subs	r3, r0, #1
 800718e:	42a1      	cmp	r1, r4
 8007190:	d008      	beq.n	80071a4 <memmove+0x28>
 8007192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800719a:	e7f8      	b.n	800718e <memmove+0x12>
 800719c:	4402      	add	r2, r0
 800719e:	4601      	mov	r1, r0
 80071a0:	428a      	cmp	r2, r1
 80071a2:	d100      	bne.n	80071a6 <memmove+0x2a>
 80071a4:	bd10      	pop	{r4, pc}
 80071a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ae:	e7f7      	b.n	80071a0 <memmove+0x24>

080071b0 <_free_r>:
 80071b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071b2:	2900      	cmp	r1, #0
 80071b4:	d044      	beq.n	8007240 <_free_r+0x90>
 80071b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ba:	9001      	str	r0, [sp, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f1a1 0404 	sub.w	r4, r1, #4
 80071c2:	bfb8      	it	lt
 80071c4:	18e4      	addlt	r4, r4, r3
 80071c6:	f000 f913 	bl	80073f0 <__malloc_lock>
 80071ca:	4a1e      	ldr	r2, [pc, #120]	; (8007244 <_free_r+0x94>)
 80071cc:	9801      	ldr	r0, [sp, #4]
 80071ce:	6813      	ldr	r3, [r2, #0]
 80071d0:	b933      	cbnz	r3, 80071e0 <_free_r+0x30>
 80071d2:	6063      	str	r3, [r4, #4]
 80071d4:	6014      	str	r4, [r2, #0]
 80071d6:	b003      	add	sp, #12
 80071d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071dc:	f000 b90e 	b.w	80073fc <__malloc_unlock>
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	d908      	bls.n	80071f6 <_free_r+0x46>
 80071e4:	6825      	ldr	r5, [r4, #0]
 80071e6:	1961      	adds	r1, r4, r5
 80071e8:	428b      	cmp	r3, r1
 80071ea:	bf01      	itttt	eq
 80071ec:	6819      	ldreq	r1, [r3, #0]
 80071ee:	685b      	ldreq	r3, [r3, #4]
 80071f0:	1949      	addeq	r1, r1, r5
 80071f2:	6021      	streq	r1, [r4, #0]
 80071f4:	e7ed      	b.n	80071d2 <_free_r+0x22>
 80071f6:	461a      	mov	r2, r3
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	b10b      	cbz	r3, 8007200 <_free_r+0x50>
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	d9fa      	bls.n	80071f6 <_free_r+0x46>
 8007200:	6811      	ldr	r1, [r2, #0]
 8007202:	1855      	adds	r5, r2, r1
 8007204:	42a5      	cmp	r5, r4
 8007206:	d10b      	bne.n	8007220 <_free_r+0x70>
 8007208:	6824      	ldr	r4, [r4, #0]
 800720a:	4421      	add	r1, r4
 800720c:	1854      	adds	r4, r2, r1
 800720e:	42a3      	cmp	r3, r4
 8007210:	6011      	str	r1, [r2, #0]
 8007212:	d1e0      	bne.n	80071d6 <_free_r+0x26>
 8007214:	681c      	ldr	r4, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	6053      	str	r3, [r2, #4]
 800721a:	4421      	add	r1, r4
 800721c:	6011      	str	r1, [r2, #0]
 800721e:	e7da      	b.n	80071d6 <_free_r+0x26>
 8007220:	d902      	bls.n	8007228 <_free_r+0x78>
 8007222:	230c      	movs	r3, #12
 8007224:	6003      	str	r3, [r0, #0]
 8007226:	e7d6      	b.n	80071d6 <_free_r+0x26>
 8007228:	6825      	ldr	r5, [r4, #0]
 800722a:	1961      	adds	r1, r4, r5
 800722c:	428b      	cmp	r3, r1
 800722e:	bf04      	itt	eq
 8007230:	6819      	ldreq	r1, [r3, #0]
 8007232:	685b      	ldreq	r3, [r3, #4]
 8007234:	6063      	str	r3, [r4, #4]
 8007236:	bf04      	itt	eq
 8007238:	1949      	addeq	r1, r1, r5
 800723a:	6021      	streq	r1, [r4, #0]
 800723c:	6054      	str	r4, [r2, #4]
 800723e:	e7ca      	b.n	80071d6 <_free_r+0x26>
 8007240:	b003      	add	sp, #12
 8007242:	bd30      	pop	{r4, r5, pc}
 8007244:	2000032c 	.word	0x2000032c

08007248 <sbrk_aligned>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	4e0e      	ldr	r6, [pc, #56]	; (8007284 <sbrk_aligned+0x3c>)
 800724c:	460c      	mov	r4, r1
 800724e:	6831      	ldr	r1, [r6, #0]
 8007250:	4605      	mov	r5, r0
 8007252:	b911      	cbnz	r1, 800725a <sbrk_aligned+0x12>
 8007254:	f000 f8bc 	bl	80073d0 <_sbrk_r>
 8007258:	6030      	str	r0, [r6, #0]
 800725a:	4621      	mov	r1, r4
 800725c:	4628      	mov	r0, r5
 800725e:	f000 f8b7 	bl	80073d0 <_sbrk_r>
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	d00a      	beq.n	800727c <sbrk_aligned+0x34>
 8007266:	1cc4      	adds	r4, r0, #3
 8007268:	f024 0403 	bic.w	r4, r4, #3
 800726c:	42a0      	cmp	r0, r4
 800726e:	d007      	beq.n	8007280 <sbrk_aligned+0x38>
 8007270:	1a21      	subs	r1, r4, r0
 8007272:	4628      	mov	r0, r5
 8007274:	f000 f8ac 	bl	80073d0 <_sbrk_r>
 8007278:	3001      	adds	r0, #1
 800727a:	d101      	bne.n	8007280 <sbrk_aligned+0x38>
 800727c:	f04f 34ff 	mov.w	r4, #4294967295
 8007280:	4620      	mov	r0, r4
 8007282:	bd70      	pop	{r4, r5, r6, pc}
 8007284:	20000330 	.word	0x20000330

08007288 <_malloc_r>:
 8007288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728c:	1ccd      	adds	r5, r1, #3
 800728e:	f025 0503 	bic.w	r5, r5, #3
 8007292:	3508      	adds	r5, #8
 8007294:	2d0c      	cmp	r5, #12
 8007296:	bf38      	it	cc
 8007298:	250c      	movcc	r5, #12
 800729a:	2d00      	cmp	r5, #0
 800729c:	4607      	mov	r7, r0
 800729e:	db01      	blt.n	80072a4 <_malloc_r+0x1c>
 80072a0:	42a9      	cmp	r1, r5
 80072a2:	d905      	bls.n	80072b0 <_malloc_r+0x28>
 80072a4:	230c      	movs	r3, #12
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	2600      	movs	r6, #0
 80072aa:	4630      	mov	r0, r6
 80072ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b0:	4e2e      	ldr	r6, [pc, #184]	; (800736c <_malloc_r+0xe4>)
 80072b2:	f000 f89d 	bl	80073f0 <__malloc_lock>
 80072b6:	6833      	ldr	r3, [r6, #0]
 80072b8:	461c      	mov	r4, r3
 80072ba:	bb34      	cbnz	r4, 800730a <_malloc_r+0x82>
 80072bc:	4629      	mov	r1, r5
 80072be:	4638      	mov	r0, r7
 80072c0:	f7ff ffc2 	bl	8007248 <sbrk_aligned>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	4604      	mov	r4, r0
 80072c8:	d14d      	bne.n	8007366 <_malloc_r+0xde>
 80072ca:	6834      	ldr	r4, [r6, #0]
 80072cc:	4626      	mov	r6, r4
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d140      	bne.n	8007354 <_malloc_r+0xcc>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	4631      	mov	r1, r6
 80072d6:	4638      	mov	r0, r7
 80072d8:	eb04 0803 	add.w	r8, r4, r3
 80072dc:	f000 f878 	bl	80073d0 <_sbrk_r>
 80072e0:	4580      	cmp	r8, r0
 80072e2:	d13a      	bne.n	800735a <_malloc_r+0xd2>
 80072e4:	6821      	ldr	r1, [r4, #0]
 80072e6:	3503      	adds	r5, #3
 80072e8:	1a6d      	subs	r5, r5, r1
 80072ea:	f025 0503 	bic.w	r5, r5, #3
 80072ee:	3508      	adds	r5, #8
 80072f0:	2d0c      	cmp	r5, #12
 80072f2:	bf38      	it	cc
 80072f4:	250c      	movcc	r5, #12
 80072f6:	4629      	mov	r1, r5
 80072f8:	4638      	mov	r0, r7
 80072fa:	f7ff ffa5 	bl	8007248 <sbrk_aligned>
 80072fe:	3001      	adds	r0, #1
 8007300:	d02b      	beq.n	800735a <_malloc_r+0xd2>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	442b      	add	r3, r5
 8007306:	6023      	str	r3, [r4, #0]
 8007308:	e00e      	b.n	8007328 <_malloc_r+0xa0>
 800730a:	6822      	ldr	r2, [r4, #0]
 800730c:	1b52      	subs	r2, r2, r5
 800730e:	d41e      	bmi.n	800734e <_malloc_r+0xc6>
 8007310:	2a0b      	cmp	r2, #11
 8007312:	d916      	bls.n	8007342 <_malloc_r+0xba>
 8007314:	1961      	adds	r1, r4, r5
 8007316:	42a3      	cmp	r3, r4
 8007318:	6025      	str	r5, [r4, #0]
 800731a:	bf18      	it	ne
 800731c:	6059      	strne	r1, [r3, #4]
 800731e:	6863      	ldr	r3, [r4, #4]
 8007320:	bf08      	it	eq
 8007322:	6031      	streq	r1, [r6, #0]
 8007324:	5162      	str	r2, [r4, r5]
 8007326:	604b      	str	r3, [r1, #4]
 8007328:	4638      	mov	r0, r7
 800732a:	f104 060b 	add.w	r6, r4, #11
 800732e:	f000 f865 	bl	80073fc <__malloc_unlock>
 8007332:	f026 0607 	bic.w	r6, r6, #7
 8007336:	1d23      	adds	r3, r4, #4
 8007338:	1af2      	subs	r2, r6, r3
 800733a:	d0b6      	beq.n	80072aa <_malloc_r+0x22>
 800733c:	1b9b      	subs	r3, r3, r6
 800733e:	50a3      	str	r3, [r4, r2]
 8007340:	e7b3      	b.n	80072aa <_malloc_r+0x22>
 8007342:	6862      	ldr	r2, [r4, #4]
 8007344:	42a3      	cmp	r3, r4
 8007346:	bf0c      	ite	eq
 8007348:	6032      	streq	r2, [r6, #0]
 800734a:	605a      	strne	r2, [r3, #4]
 800734c:	e7ec      	b.n	8007328 <_malloc_r+0xa0>
 800734e:	4623      	mov	r3, r4
 8007350:	6864      	ldr	r4, [r4, #4]
 8007352:	e7b2      	b.n	80072ba <_malloc_r+0x32>
 8007354:	4634      	mov	r4, r6
 8007356:	6876      	ldr	r6, [r6, #4]
 8007358:	e7b9      	b.n	80072ce <_malloc_r+0x46>
 800735a:	230c      	movs	r3, #12
 800735c:	603b      	str	r3, [r7, #0]
 800735e:	4638      	mov	r0, r7
 8007360:	f000 f84c 	bl	80073fc <__malloc_unlock>
 8007364:	e7a1      	b.n	80072aa <_malloc_r+0x22>
 8007366:	6025      	str	r5, [r4, #0]
 8007368:	e7de      	b.n	8007328 <_malloc_r+0xa0>
 800736a:	bf00      	nop
 800736c:	2000032c 	.word	0x2000032c

08007370 <_realloc_r>:
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	4680      	mov	r8, r0
 8007376:	4614      	mov	r4, r2
 8007378:	460e      	mov	r6, r1
 800737a:	b921      	cbnz	r1, 8007386 <_realloc_r+0x16>
 800737c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007380:	4611      	mov	r1, r2
 8007382:	f7ff bf81 	b.w	8007288 <_malloc_r>
 8007386:	b92a      	cbnz	r2, 8007394 <_realloc_r+0x24>
 8007388:	f7ff ff12 	bl	80071b0 <_free_r>
 800738c:	4625      	mov	r5, r4
 800738e:	4628      	mov	r0, r5
 8007390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007394:	f000 f838 	bl	8007408 <_malloc_usable_size_r>
 8007398:	4284      	cmp	r4, r0
 800739a:	4607      	mov	r7, r0
 800739c:	d802      	bhi.n	80073a4 <_realloc_r+0x34>
 800739e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073a2:	d812      	bhi.n	80073ca <_realloc_r+0x5a>
 80073a4:	4621      	mov	r1, r4
 80073a6:	4640      	mov	r0, r8
 80073a8:	f7ff ff6e 	bl	8007288 <_malloc_r>
 80073ac:	4605      	mov	r5, r0
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d0ed      	beq.n	800738e <_realloc_r+0x1e>
 80073b2:	42bc      	cmp	r4, r7
 80073b4:	4622      	mov	r2, r4
 80073b6:	4631      	mov	r1, r6
 80073b8:	bf28      	it	cs
 80073ba:	463a      	movcs	r2, r7
 80073bc:	f7ff fed0 	bl	8007160 <memcpy>
 80073c0:	4631      	mov	r1, r6
 80073c2:	4640      	mov	r0, r8
 80073c4:	f7ff fef4 	bl	80071b0 <_free_r>
 80073c8:	e7e1      	b.n	800738e <_realloc_r+0x1e>
 80073ca:	4635      	mov	r5, r6
 80073cc:	e7df      	b.n	800738e <_realloc_r+0x1e>
	...

080073d0 <_sbrk_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d06      	ldr	r5, [pc, #24]	; (80073ec <_sbrk_r+0x1c>)
 80073d4:	2300      	movs	r3, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	4608      	mov	r0, r1
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	f7f9 ffd2 	bl	8001384 <_sbrk>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_sbrk_r+0x1a>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_sbrk_r+0x1a>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	20000334 	.word	0x20000334

080073f0 <__malloc_lock>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__malloc_lock+0x8>)
 80073f2:	f000 b811 	b.w	8007418 <__retarget_lock_acquire_recursive>
 80073f6:	bf00      	nop
 80073f8:	20000338 	.word	0x20000338

080073fc <__malloc_unlock>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__malloc_unlock+0x8>)
 80073fe:	f000 b80c 	b.w	800741a <__retarget_lock_release_recursive>
 8007402:	bf00      	nop
 8007404:	20000338 	.word	0x20000338

08007408 <_malloc_usable_size_r>:
 8007408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740c:	1f18      	subs	r0, r3, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	bfbc      	itt	lt
 8007412:	580b      	ldrlt	r3, [r1, r0]
 8007414:	18c0      	addlt	r0, r0, r3
 8007416:	4770      	bx	lr

08007418 <__retarget_lock_acquire_recursive>:
 8007418:	4770      	bx	lr

0800741a <__retarget_lock_release_recursive>:
 800741a:	4770      	bx	lr

0800741c <_init>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr

08007428 <_fini>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr
