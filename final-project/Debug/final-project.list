
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .systemConfig 00000004  0807e800  0807e800  0002e800  2**0
                  ALLOC, READONLY
  2 .text         0000e068  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001068  0800e208  0800e208  0001e208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f270  0800f270  000203a8  2**0
                  CONTENTS
  5 .ARM          00000008  0800f270  0800f270  0001f270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800f278  0800f278  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800f278  0800f278  0001f278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800f27c  0800f27c  0001f27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000003a8  20000000  0800f280  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000888  200003a8  0800f628  000203a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c30  0800f628  00020c30  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d428  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000519c  00000000  00000000  0003d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  000429a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001778  00000000  00000000  00044388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d5a6  00000000  00000000  00045b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026452  00000000  00000000  000630a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c4fb  00000000  00000000  000894f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001259f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ecc  00000000  00000000  00125a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a8 	.word	0x200003a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e1f0 	.word	0x0800e1f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003ac 	.word	0x200003ac
 80001dc:	0800e1f0 	.word	0x0800e1f0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f009 fa49 	bl	800a3a4 <memset>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	cbuffer->buffer[cbuffer->write] = data;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	7992      	ldrb	r2, [r2, #6]
 8000f2e:	4413      	add	r3, r2
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b25a      	sxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	757b      	strb	r3, [r7, #21]
	uint8_t length;
	uint8_t read = cbuffer->read;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	795b      	ldrb	r3, [r3, #5]
 8000f7c:	74bb      	strb	r3, [r7, #18]
	uint8_t ch;
	length = cBuffer_Length(cbuffer);
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f89a 	bl	80010b8 <cBuffer_Length>
 8000f84:	4603      	mov	r3, r0
 8000f86:	753b      	strb	r3, [r7, #20]

	for (i=0; i < length;i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
 8000f8c:	e012      	b.n	8000fb4 <cBuffer_GetString+0x54>
	{
		err = cBuffer_Peek(cbuffer, &ch, &read);
 8000f8e:	f107 0212 	add.w	r2, r7, #18
 8000f92:	f107 0311 	add.w	r3, r7, #17
 8000f96:	4619      	mov	r1, r3
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f863 	bl	8001064 <cBuffer_Peek>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	757b      	strb	r3, [r7, #21]

		if (ch == '\r') // A string is found - copy it to the outgoing buffer
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	2b0d      	cmp	r3, #13
 8000fa6:	d102      	bne.n	8000fae <cBuffer_GetString+0x4e>
		{
			found = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75bb      	strb	r3, [r7, #22]
			break;
 8000fac:	e006      	b.n	8000fbc <cBuffer_GetString+0x5c>
	for (i=0; i < length;i++)
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	7d3b      	ldrb	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3e8      	bcc.n	8000f8e <cBuffer_GetString+0x2e>
		}
	}
	if (found)
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d020      	beq.n	8001004 <cBuffer_GetString+0xa4>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, read);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	7cba      	ldrb	r2, [r7, #18]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f88d 	bl	80010ea <cBuffer_LengthCustom>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000fd8:	f107 0313 	add.w	r3, r7, #19
 8000fdc:	4619      	mov	r1, r3
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f817 	bl	8001012 <cBuffer_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	757b      	strb	r3, [r7, #21]
			*string = chr;
 8000fe8:	7cfa      	ldrb	r2, [r7, #19]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	701a      	strb	r2, [r3, #0]
			string++;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
		} while (chr != sTerminator || err != CBUFFER_OK);
 8000ff4:	7cfb      	ldrb	r3, [r7, #19]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d1ed      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8000ffc:	7d7b      	ldrb	r3, [r7, #21]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1ea      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8001002:	e001      	b.n	8001008 <cBuffer_GetString+0xa8>
	}
	else
		err = CBUFFER_NO_STRING;
 8001004:	2303      	movs	r3, #3
 8001006:	757b      	strb	r3, [r7, #21]


	return err;
 8001008:	7d7b      	ldrb	r3, [r7, #21]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f84b 	bl	80010b8 <cBuffer_Length>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8001028:	2302      	movs	r3, #2
 800102a:	e017      	b.n	800105c <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	7952      	ldrb	r2, [r2, #5]
 8001034:	4413      	add	r3, r2
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	3301      	adds	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b25a      	sxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4013      	ands	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <cBuffer_Peek>:

CBUFFER_ERR cBuffer_Peek(cBuffer_t* cbuffer,uint8_t* data, uint8_t*read)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (cBuffer_Length(cbuffer) == 0)
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f821 	bl	80010b8 <cBuffer_Length>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <cBuffer_Peek+0x1c>
	{
		return CBUFFER_EMPTY;
 800107c:	2302      	movs	r3, #2
 800107e:	e017      	b.n	80010b0 <cBuffer_Peek+0x4c>
	}
	*data = cbuffer->buffer[*read];
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	701a      	strb	r2, [r3, #0]
	*read = ((*read)+1) & (cbuffer->size-1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25a      	sxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
	return CBUFFER_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	799a      	ldrb	r2, [r3, #6]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3

}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
 80010f6:	4613      	mov	r3, r2
 80010f8:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b25a      	sxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 800112a:	2120      	movs	r1, #32
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f009 ff2c 	bl	800af8a <strchr>
 8001132:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0 || cmdEnd-buffer != strlen(name))
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d009      	beq.n	800114e <ConsoleCommandMatch+0x2e>
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	461c      	mov	r4, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff f856 	bl	80001f4 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	429c      	cmp	r4, r3
 800114c:	d00b      	beq.n	8001166 <ConsoleCommandMatch+0x46>
	{
			r =  strcmp(name,buffer) == 0;
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f845 	bl	80001e0 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e00f      	b.n	8001186 <ConsoleCommandMatch+0x66>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff f844 	bl	80001f4 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f009 ff1e 	bl	800afb4 <strncmp>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	60fb      	str	r3, [r7, #12]

	}

	return r;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}

08001190 <ConsoleInit>:


// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001196:	f001 f92f 	bl	80023f8 <ConsoleIoInit>
	ConsoleIoSendString("Dodeca Timer - A Thousand Projects");
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <ConsoleInit+0x44>)
 800119c:	f001 f964 	bl	8002468 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <ConsoleInit+0x48>)
 80011a2:	f001 f961 	bl	8002468 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <ConsoleInit+0x4c>)
 80011a8:	f001 f95e 	bl	8002468 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	e007      	b.n	80011c2 <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <ConsoleInit+0x50>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3301      	adds	r3, #1
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b63      	cmp	r3, #99	; 0x63
 80011c6:	d9f4      	bls.n	80011b2 <ConsoleInit+0x22>
	}

}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800e208 	.word	0x0800e208
 80011d8:	0800e22c 	.word	0x0800e22c
 80011dc:	0800e230 	.word	0x0800e230
 80011e0:	200003c4 	.word	0x200003c4

080011e4 <ConsolePrintPrompt>:

void ConsolePrintPrompt()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	ConsoleIoSendString(STR_ENDLINE);
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ConsolePrintPrompt+0x14>)
 80011ea:	f001 f93d 	bl	8002468 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <ConsolePrintPrompt+0x18>)
 80011f0:	f001 f93a 	bl	8002468 <ConsoleIoSendString>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800e22c 	.word	0x0800e22c
 80011fc:	0800e230 	.word	0x0800e230

08001200 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;
	eConsoleError consoleResult;

	consoleResult = ConsoleIoReceive(mReceiveBuffer);
 8001206:	4845      	ldr	r0, [pc, #276]	; (800131c <ConsoleProcess+0x11c>)
 8001208:	f001 f90e 	bl	8002428 <ConsoleIoReceive>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]

	switch (consoleResult)
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d07d      	beq.n	8001312 <ConsoleProcess+0x112>
 8001216:	2b03      	cmp	r3, #3
 8001218:	dc7c      	bgt.n	8001314 <ConsoleProcess+0x114>
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <ConsoleProcess+0x28>
 800121e:	2b00      	cmp	r3, #0
 8001220:	db78      	blt.n	8001314 <ConsoleProcess+0x114>
 8001222:	3b01      	subs	r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	e075      	b.n	8001314 <ConsoleProcess+0x114>
	{
		case CONSOLE_ERROR:
		case CONSOLE_NO_STRING:
			break;
		case CONSOLE_SUCCESS:
			if ('\0' == mReceiveBuffer[0] )
 8001228:	4b3c      	ldr	r3, [pc, #240]	; (800131c <ConsoleProcess+0x11c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <ConsoleProcess+0x3e>
			{
				ConsoleIoSendString(STR_ENDLINE);
 8001230:	483b      	ldr	r0, [pc, #236]	; (8001320 <ConsoleProcess+0x120>)
 8001232:	f001 f919 	bl	8002468 <ConsoleIoSendString>
				ConsoleIoSendString(CONSOLE_PROMPT);
 8001236:	483b      	ldr	r0, [pc, #236]	; (8001324 <ConsoleProcess+0x124>)
 8001238:	f001 f916 	bl	8002468 <ConsoleIoSendString>
				return;
 800123c:	e06a      	b.n	8001314 <ConsoleProcess+0x114>
			}
			commandTable = ConsoleCommandsGetTable();
 800123e:	f001 f8b3 	bl	80023a8 <ConsoleCommandsGetTable>
 8001242:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	613b      	str	r3, [r7, #16]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800124e:	e040      	b.n	80012d2 <ConsoleProcess+0xd2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	461a      	mov	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4413      	add	r3, r2
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	492e      	ldr	r1, [pc, #184]	; (800131c <ConsoleProcess+0x11c>)
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5b 	bl	8001120 <ConsoleCommandMatch>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02d      	beq.n	80012cc <ConsoleProcess+0xcc>
				{
					result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	461a      	mov	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4413      	add	r3, r2
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4826      	ldr	r0, [pc, #152]	; (800131c <ConsoleProcess+0x11c>)
 8001284:	4798      	blx	r3
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01a      	beq.n	80012c6 <ConsoleProcess+0xc6>
					{
						ConsoleIoSendString("Error: ");
 8001290:	4825      	ldr	r0, [pc, #148]	; (8001328 <ConsoleProcess+0x128>)
 8001292:	f001 f8e9 	bl	8002468 <ConsoleIoSendString>
						ConsoleIoSendString((char*)mReceiveBuffer);
 8001296:	4821      	ldr	r0, [pc, #132]	; (800131c <ConsoleProcess+0x11c>)
 8001298:	f001 f8e6 	bl	8002468 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 800129c:	4820      	ldr	r0, [pc, #128]	; (8001320 <ConsoleProcess+0x120>)
 800129e:	f001 f8e3 	bl	8002468 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80012a2:	4822      	ldr	r0, [pc, #136]	; (800132c <ConsoleProcess+0x12c>)
 80012a4:	f001 f8e0 	bl	8002468 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	461a      	mov	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4413      	add	r3, r2
 80012b8:	3308      	adds	r3, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 f8d4 	bl	8002468 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80012c0:	4817      	ldr	r0, [pc, #92]	; (8001320 <ConsoleProcess+0x120>)
 80012c2:	f001 f8d1 	bl	8002468 <ConsoleIoSendString>
					}
					found = cmdIndex;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	e002      	b.n	80012d2 <ConsoleProcess+0xd2>
				}
				else
				{
					cmdIndex++;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	461a      	mov	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4413      	add	r3, r2
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <ConsoleProcess+0xf0>
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ee:	d0af      	beq.n	8001250 <ConsoleProcess+0x50>
				}
			}
			if (found == NOT_FOUND)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f6:	d105      	bne.n	8001304 <ConsoleProcess+0x104>
			{
				ConsoleIoSendString("Command not found: ");
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <ConsoleProcess+0x130>)
 80012fa:	f001 f8b5 	bl	8002468 <ConsoleIoSendString>
				ConsoleIoSendString((char*)mReceiveBuffer);
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <ConsoleProcess+0x11c>)
 8001300:	f001 f8b2 	bl	8002468 <ConsoleIoSendString>

			}
			ConsoleIoSendString(STR_ENDLINE);
 8001304:	4806      	ldr	r0, [pc, #24]	; (8001320 <ConsoleProcess+0x120>)
 8001306:	f001 f8af 	bl	8002468 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <ConsoleProcess+0x124>)
 800130c:	f001 f8ac 	bl	8002468 <ConsoleIoSendString>

			break;
 8001310:	e000      	b.n	8001314 <ConsoleProcess+0x114>
		case CONSOLE_BUFFER_FULL:

		break;
 8001312:	bf00      	nop
	}

}
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200003c4 	.word	0x200003c4
 8001320:	0800e22c 	.word	0x0800e22c
 8001324:	0800e230 	.word	0x0800e230
 8001328:	0800e234 	.word	0x0800e234
 800132c:	0800e23c 	.word	0x0800e23c
 8001330:	0800e244 	.word	0x0800e244

08001334 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	460b      	mov	r3, r1
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800134e:	e00b      	b.n	8001368 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b20      	cmp	r3, #32
 800135a:	d102      	bne.n	8001362 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	3301      	adds	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001368:	7afb      	ldrb	r3, [r7, #11]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	429a      	cmp	r2, r3
 800136e:	d002      	beq.n	8001376 <ConsoleParamFindN+0x42>
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b63      	cmp	r3, #99	; 0x63
 8001374:	d9ec      	bls.n	8001350 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	2b64      	cmp	r3, #100	; 0x64
 800137a:	d102      	bne.n	8001382 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 800137c:	2310      	movs	r3, #16
 800137e:	75fb      	strb	r3, [r7, #23]
 8001380:	e002      	b.n	8001388 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	601a      	str	r2, [r3, #0]
	}
	return result;
 8001388:	7dfb      	ldrb	r3, [r7, #23]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <ConsoleReceiveParamString>:

// Assume the string is the last parameter and the the end is a null
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char* string, uint32_t maxLen)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	460b      	mov	r3, r1
 80013a4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
	eCommandResult_T result;
	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80013aa:	f107 0210 	add.w	r2, r7, #16
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff ffbe 	bl	8001334 <ConsoleParamFindN>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <ConsoleReceiveParamString+0x30>
		return result;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	e013      	b.n	80013ee <ConsoleReceiveParamString+0x58>



	// Check the length of the string
	if (strlen(&buffer[startIndex]) > maxLen)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7fe ff11 	bl	80001f4 <strlen>
 80013d2:	4602      	mov	r2, r0
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d201      	bcs.n	80013de <ConsoleReceiveParamString+0x48>
	{
		return COMMAND_ERROR;
 80013da:	23ff      	movs	r3, #255	; 0xff
 80013dc:	e007      	b.n	80013ee <ConsoleReceiveParamString+0x58>
	}

	// set the end of the string to a NULL for string termination
	strcpy(string,&buffer[startIndex]);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f009 fddc 	bl	800afa4 <strcpy>

	return COMMAND_SUCCESS;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b08a      	sub	sp, #40	; 0x28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	460b      	mov	r3, r1
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8001408:	f107 021c 	add.w	r2, r7, #28
 800140c:	7afb      	ldrb	r3, [r7, #11]
 800140e:	4619      	mov	r1, r3
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7ff ff8f 	bl	8001334 <ConsoleParamFindN>
 8001416:	4603      	mov	r3, r0
 8001418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	4413      	add	r3, r2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 8001430:	e011      	b.n	8001456 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8001432:	f107 0214 	add.w	r2, r7, #20
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	4413      	add	r3, r2
 800143a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800143e:	701a      	strb	r2, [r3, #0]
		i++;
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	3301      	adds	r3, #1
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	4413      	add	r3, r2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 8001456:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 800145e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001462:	2b20      	cmp	r3, #32
 8001464:	d002      	beq.n	800146c <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	2b07      	cmp	r3, #7
 800146a:	d9e2      	bls.n	8001432 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	2b08      	cmp	r3, #8
 8001470:	d102      	bne.n	8001478 <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001472:	2310      	movs	r3, #16
 8001474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8001478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11a      	bne.n	80014b6 <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8001480:	f107 0214 	add.w	r2, r7, #20
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	4413      	add	r3, r2
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4618      	mov	r0, r3
 8001492:	f001 fe85 	bl	80031a0 <isNumber>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 ff41 	bl	800a328 <atoi>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	801a      	strh	r2, [r3, #0]
 80014ae:	e002      	b.n	80014b6 <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 80014b0:	2310      	movs	r3, #16
 80014b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	return result;
 80014b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 ffcc 	bl	8002468 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 ffbf 	bl	8002468 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80014ea:	4804      	ldr	r0, [pc, #16]	; (80014fc <ConsoleSendLine+0x20>)
 80014ec:	f000 ffbc 	bl	8002468 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	0800e22c 	.word	0x0800e22c

08001500 <displayTask>:
	CONSOLE_COMMAND_TABLE_END // must be LAST
};


static void displayTask(uint8_t id)
{
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b0a8      	sub	sp, #160	; 0xa0
 8001504:	af04      	add	r7, sp, #16
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	char msg[120];
	char colourName[10];
	taskItem_t *task = taskGet(id);
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 ff55 	bl	80043bc <taskGet>
 8001512:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	ledFindColour(task->colour,colourName);
 8001516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f107 0208 	add.w	r2, r7, #8
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f001 fea2 	bl	800326c <ledFindColour>
	sprintf(msg,"Task: %d - %s\n\tColour: %s %#08x\n\tDefault Min Time: %i\n\tDefault Max Time: %i\n",id,task->name,colourName,(unsigned int)task->colour,task->defaultMinTime,task->defaultMaxTime);
 8001528:	79f9      	ldrb	r1, [r7, #7]
 800152a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800152e:	1c5c      	adds	r4, r3, #1
 8001530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800153a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800153c:	4615      	mov	r5, r2
 800153e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001542:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8001544:	f107 0014 	add.w	r0, r7, #20
 8001548:	9203      	str	r2, [sp, #12]
 800154a:	9502      	str	r5, [sp, #8]
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	4623      	mov	r3, r4
 8001556:	460a      	mov	r2, r1
 8001558:	4905      	ldr	r1, [pc, #20]	; (8001570 <displayTask+0x70>)
 800155a:	f009 fc85 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ffba 	bl	80014dc <ConsoleSendLine>
}
 8001568:	bf00      	nop
 800156a:	3790      	adds	r7, #144	; 0x90
 800156c:	46bd      	mov	sp, r7
 800156e:	bdb0      	pop	{r4, r5, r7, pc}
 8001570:	0800e2d8 	.word	0x0800e2d8

08001574 <displayDodeca>:

static void displayDodeca(uint8_t id)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b0ad      	sub	sp, #180	; 0xb4
 8001578:	af04      	add	r7, sp, #16
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	char msg[120];
	char statename[20];
	dodecaItem_t *dodeca = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	taskItem_t *task;
	dodeca = dodecaGet(id);
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 ff94 	bl	80024b4 <dodecaGet>
 800158c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	task = taskGet(dodeca->taskId);
 8001590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 ff10 	bl	80043bc <taskGet>
 800159c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	dodecaGetStateName(dodeca->state,statename);
 80015a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f107 020c 	add.w	r2, r7, #12
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 ffc5 	bl	800253c <dodecaGetStateName>
	sprintf(msg,"Dodeca: %i - %s\n\t \n\tState: %s\n\tMin Time: %d\n\tMax Time: %d",id,task->name,statename,dodeca->minTimeMins,dodeca->maxTimeMins);
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015b8:	1c59      	adds	r1, r3, #1
 80015ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015be:	785b      	ldrb	r3, [r3, #1]
 80015c0:	461c      	mov	r4, r3
 80015c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015c6:	789b      	ldrb	r3, [r3, #2]
 80015c8:	f107 0020 	add.w	r0, r7, #32
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	9401      	str	r4, [sp, #4]
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	460b      	mov	r3, r1
 80015d8:	4905      	ldr	r1, [pc, #20]	; (80015f0 <displayDodeca+0x7c>)
 80015da:	f009 fc45 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff7a 	bl	80014dc <ConsoleSendLine>
}
 80015e8:	bf00      	nop
 80015ea:	37a4      	adds	r7, #164	; 0xa4
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	0800e328 	.word	0x0800e328

080015f4 <ConsoleCommandDodecaSet>:

static eCommandResult_T ConsoleCommandDodecaSet(const char buffer[])
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0aa      	sub	sp, #168	; 0xa8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	taskItem_t *task;
	char msg[50];

		// get the command
		uint32_t cmdIndex;
		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &cmdIndex))
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	461a      	mov	r2, r3
 8001602:	2101      	movs	r1, #1
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fe95 	bl	8001334 <ConsoleParamFindN>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <ConsoleCommandDodecaSet+0x26>
		{
			ConsoleSendLine("Please supply a command");
 8001610:	485a      	ldr	r0, [pc, #360]	; (800177c <ConsoleCommandDodecaSet+0x188>)
 8001612:	f7ff ff63 	bl	80014dc <ConsoleSendLine>
			return COMMAND_PARAMETER_ERROR;
 8001616:	2310      	movs	r3, #16
 8001618:	e0ab      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
		}

		MPU6050ReadStable(&data);
 800161a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800161e:	4618      	mov	r0, r3
 8001620:	f001 f9c8 	bl	80029b4 <MPU6050ReadStable>
		dodecaId = detectFace(data.KalmanAngleX, data.KalmanAngleY);
 8001624:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001628:	ed97 6b24 	vldr	d6, [r7, #144]	; 0x90
 800162c:	eeb0 1a46 	vmov.f32	s2, s12
 8001630:	eef0 1a66 	vmov.f32	s3, s13
 8001634:	eeb0 0a47 	vmov.f32	s0, s14
 8001638:	eef0 0a67 	vmov.f32	s1, s15
 800163c:	f001 fede 	bl	80033fc <detectFace>
 8001640:	4603      	mov	r3, r0
 8001642:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6


		if (dodecaId< 0)
 8001646:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800164a:	2b00      	cmp	r3, #0
 800164c:	da04      	bge.n	8001658 <ConsoleCommandDodecaSet+0x64>
		{
			ConsoleSendLine("Face not detected");
 800164e:	484c      	ldr	r0, [pc, #304]	; (8001780 <ConsoleCommandDodecaSet+0x18c>)
 8001650:	f7ff ff44 	bl	80014dc <ConsoleSendLine>
			return COMMAND_ERROR;
 8001654:	23ff      	movs	r3, #255	; 0xff
 8001656:	e08c      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
		}
		sprintf(msg,"Detected face: %i",dodecaId);
 8001658:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4948      	ldr	r1, [pc, #288]	; (8001784 <ConsoleCommandDodecaSet+0x190>)
 8001662:	4618      	mov	r0, r3
 8001664:	f009 fc00 	bl	800ae68 <siprintf>
		ConsoleSendLine(msg);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff35 	bl	80014dc <ConsoleSendLine>

		dodeca = dodecaGet(dodecaId);
 8001672:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f000 ff1b 	bl	80024b4 <dodecaGet>
 800167e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

		switch (buffer[cmdIndex])
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b74      	cmp	r3, #116	; 0x74
 800168c:	d006      	beq.n	800169c <ConsoleCommandDodecaSet+0xa8>
 800168e:	2b74      	cmp	r3, #116	; 0x74
 8001690:	dc68      	bgt.n	8001764 <ConsoleCommandDodecaSet+0x170>
 8001692:	2b69      	cmp	r3, #105	; 0x69
 8001694:	d04f      	beq.n	8001736 <ConsoleCommandDodecaSet+0x142>
 8001696:	2b6d      	cmp	r3, #109	; 0x6d
 8001698:	d036      	beq.n	8001708 <ConsoleCommandDodecaSet+0x114>
 800169a:	e063      	b.n	8001764 <ConsoleCommandDodecaSet+0x170>
		{
		case 't' :
				// Sets a task to the dodeca current facing up
				if (DODECA_STATE_ACTIVE == dodeca->state)
 800169c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d104      	bne.n	80016b0 <ConsoleCommandDodecaSet+0xbc>
				{
					ConsoleSendLine("Cannot change an Active Task");
 80016a6:	4838      	ldr	r0, [pc, #224]	; (8001788 <ConsoleCommandDodecaSet+0x194>)
 80016a8:	f7ff ff18 	bl	80014dc <ConsoleSendLine>
					return COMMAND_SUCCESS;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e060      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
				}


				// Set the Task Id
				if (COMMAND_SUCCESS != ConsoleReceiveParamInt16(buffer, 2, &value))
 80016b0:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 80016b4:	461a      	mov	r2, r3
 80016b6:	2102      	movs	r1, #2
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fe9c 	bl	80013f6 <ConsoleReceiveParamInt16>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <ConsoleCommandDodecaSet+0xd4>
				{
					return COMMAND_PARAMETER_ERROR;
 80016c4:	2310      	movs	r3, #16
 80016c6:	e054      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
				}

				if (value > TASK_COUNT_MAX)
 80016c8:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80016cc:	2b14      	cmp	r3, #20
 80016ce:	dd04      	ble.n	80016da <ConsoleCommandDodecaSet+0xe6>
				{
					ConsoleSendLine("Invalid Task Id");
 80016d0:	482e      	ldr	r0, [pc, #184]	; (800178c <ConsoleCommandDodecaSet+0x198>)
 80016d2:	f7ff ff03 	bl	80014dc <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 80016d6:	2310      	movs	r3, #16
 80016d8:	e04b      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
				}

				task = taskGet(value);
 80016da:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fe6b 	bl	80043bc <taskGet>
 80016e6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

				dodecaInitItem(dodecaId,task->defaultMinTime,task->defaultMaxTime,value);
 80016ea:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80016ee:	b2d8      	uxtb	r0, r3
 80016f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016f4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80016f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016fa:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80016fc:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f000 feef 	bl	80024e4 <dodecaInitItem>
			break;
 8001706:	e02d      	b.n	8001764 <ConsoleCommandDodecaSet+0x170>

		case 'm':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001708:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 800170c:	461a      	mov	r2, r3
 800170e:	2102      	movs	r1, #2
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fe70 	bl	80013f6 <ConsoleReceiveParamInt16>
				if (value <0)
 8001716:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800171a:	2b00      	cmp	r3, #0
 800171c:	da04      	bge.n	8001728 <ConsoleCommandDodecaSet+0x134>
				{
					ConsoleSendLine("Invalid Max time");
 800171e:	481c      	ldr	r0, [pc, #112]	; (8001790 <ConsoleCommandDodecaSet+0x19c>)
 8001720:	f7ff fedc 	bl	80014dc <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8001724:	2310      	movs	r3, #16
 8001726:	e024      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
				}
				dodeca->maxTimeMins = value;
 8001728:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800172c:	b2da      	uxtb	r2, r3
 800172e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001732:	709a      	strb	r2, [r3, #2]
			break;
 8001734:	e016      	b.n	8001764 <ConsoleCommandDodecaSet+0x170>
		case 'i':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001736:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 800173a:	461a      	mov	r2, r3
 800173c:	2102      	movs	r1, #2
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fe59 	bl	80013f6 <ConsoleReceiveParamInt16>
				if (value <0)
 8001744:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8001748:	2b00      	cmp	r3, #0
 800174a:	da04      	bge.n	8001756 <ConsoleCommandDodecaSet+0x162>
				{
					ConsoleSendLine("Invalid Min time");
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <ConsoleCommandDodecaSet+0x1a0>)
 800174e:	f7ff fec5 	bl	80014dc <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8001752:	2310      	movs	r3, #16
 8001754:	e00d      	b.n	8001772 <ConsoleCommandDodecaSet+0x17e>
				}
				dodeca->minTimeMins = value;
 8001756:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800175a:	b2da      	uxtb	r2, r3
 800175c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001760:	705a      	strb	r2, [r3, #1]
			break;
 8001762:	bf00      	nop
		}
		// Show the current face info
		displayDodeca(dodecaId);
 8001764:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff02 	bl	8001574 <displayDodeca>
		return COMMAND_SUCCESS;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	37a8      	adds	r7, #168	; 0xa8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	0800e364 	.word	0x0800e364
 8001780:	0800e37c 	.word	0x0800e37c
 8001784:	0800e390 	.word	0x0800e390
 8001788:	0800e3a4 	.word	0x0800e3a4
 800178c:	0800e3c4 	.word	0x0800e3c4
 8001790:	0800e3d4 	.word	0x0800e3d4
 8001794:	0800e3e8 	.word	0x0800e3e8

08001798 <ConsoleCommandDodecaQuery>:

static eCommandResult_T ConsoleCommandDodecaQuery(const char buffer[])
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	uint32_t param1;

		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &param1))
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	461a      	mov	r2, r3
 80017a6:	2101      	movs	r1, #1
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff fdc3 	bl	8001334 <ConsoleParamFindN>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <ConsoleCommandDodecaQuery+0x38>
		{
			// List all tasks
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	75fb      	strb	r3, [r7, #23]
 80017b8:	e006      	b.n	80017c8 <ConsoleCommandDodecaQuery+0x30>
			{
				displayDodeca(f);
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fed9 	bl	8001574 <displayDodeca>
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	3301      	adds	r3, #1
 80017c6:	75fb      	strb	r3, [r7, #23]
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b0b      	cmp	r3, #11
 80017cc:	d9f5      	bls.n	80017ba <ConsoleCommandDodecaQuery+0x22>
 80017ce:	e019      	b.n	8001804 <ConsoleCommandDodecaQuery+0x6c>
			}
		}
		else
		{
			int16_t taskId;
			ConsoleReceiveParamInt16(buffer, 1, &taskId );
 80017d0:	f107 030e 	add.w	r3, r7, #14
 80017d4:	461a      	mov	r2, r3
 80017d6:	2101      	movs	r1, #1
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fe0c 	bl	80013f6 <ConsoleReceiveParamInt16>

			if (taskId < 0 || taskId > DODECA_COUNT_MAX-1)
 80017de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db03      	blt.n	80017ee <ConsoleCommandDodecaQuery+0x56>
 80017e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ea:	2b0b      	cmp	r3, #11
 80017ec:	dd04      	ble.n	80017f8 <ConsoleCommandDodecaQuery+0x60>
			{
				ConsoleSendLine("Invalid Task number");
 80017ee:	4808      	ldr	r0, [pc, #32]	; (8001810 <ConsoleCommandDodecaQuery+0x78>)
 80017f0:	f7ff fe74 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 80017f4:	2310      	movs	r3, #16
 80017f6:	e006      	b.n	8001806 <ConsoleCommandDodecaQuery+0x6e>
			}

			displayDodeca(taskId);
 80017f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff feb8 	bl	8001574 <displayDodeca>

		}
		return COMMAND_SUCCESS;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	0800e3fc 	.word	0x0800e3fc

08001814 <ConsoleCommandSaveConfig>:


static eCommandResult_T ConsoleCommandSaveConfig(const char buffer[])
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	sysConfigSave();
 800181c:	f002 fd4a 	bl	80042b4 <sysConfigSave>
	ConsoleSendLine("Config Saved!");
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <ConsoleCommandSaveConfig+0x1c>)
 8001822:	f7ff fe5b 	bl	80014dc <ConsoleSendLine>
	return COMMAND_SUCCESS;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	0800e410 	.word	0x0800e410

08001834 <ConsoleCommandTaskSet>:

static eCommandResult_T ConsoleCommandTaskSet(const char buffer[])
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08e      	sub	sp, #56	; 0x38
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

	// get the task Id to set
	int16_t taskId;
	char name[TASK_NAME_LENGHTH_MAX];
	if (COMMAND_SUCCESS != ConsoleReceiveParamInt16(buffer, 1, &taskId))
 800183c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8001840:	461a      	mov	r2, r3
 8001842:	2101      	movs	r1, #1
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fdd6 	bl	80013f6 <ConsoleReceiveParamInt16>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <ConsoleCommandTaskSet+0x20>
	{
		return COMMAND_PARAMETER_ERROR;
 8001850:	2310      	movs	r3, #16
 8001852:	e0b6      	b.n	80019c2 <ConsoleCommandTaskSet+0x18e>
	}

	if (taskId > TASK_COUNT_MAX)
 8001854:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001858:	2b14      	cmp	r3, #20
 800185a:	dd04      	ble.n	8001866 <ConsoleCommandTaskSet+0x32>
	{
		ConsoleSendLine("Invalid Task ID");
 800185c:	485b      	ldr	r0, [pc, #364]	; (80019cc <ConsoleCommandTaskSet+0x198>)
 800185e:	f7ff fe3d 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001862:	2310      	movs	r3, #16
 8001864:	e0ad      	b.n	80019c2 <ConsoleCommandTaskSet+0x18e>
	}

	// get the command
	uint32_t cmdIndex;
	if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 2, &cmdIndex))
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	461a      	mov	r2, r3
 800186c:	2102      	movs	r1, #2
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fd60 	bl	8001334 <ConsoleParamFindN>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <ConsoleCommandTaskSet+0x50>
	{
		ConsoleSendLine("Please supply a command");
 800187a:	4855      	ldr	r0, [pc, #340]	; (80019d0 <ConsoleCommandTaskSet+0x19c>)
 800187c:	f7ff fe2e 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001880:	2310      	movs	r3, #16
 8001882:	e09e      	b.n	80019c2 <ConsoleCommandTaskSet+0x18e>
	}

	taskItem_t *task;
	int16_t colour;
	int16_t minmax;
	task = taskGet(taskId);
 8001884:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fd96 	bl	80043bc <taskGet>
 8001890:	6378      	str	r0, [r7, #52]	; 0x34

	switch (buffer[cmdIndex])
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3b63      	subs	r3, #99	; 0x63
 800189c:	2b0b      	cmp	r3, #11
 800189e:	f200 8089 	bhi.w	80019b4 <ConsoleCommandTaskSet+0x180>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <ConsoleCommandTaskSet+0x74>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	08001913 	.word	0x08001913
 80018ac:	080019b5 	.word	0x080019b5
 80018b0:	080019b5 	.word	0x080019b5
 80018b4:	080019b5 	.word	0x080019b5
 80018b8:	080019b5 	.word	0x080019b5
 80018bc:	080019b5 	.word	0x080019b5
 80018c0:	08001989 	.word	0x08001989
 80018c4:	080019b5 	.word	0x080019b5
 80018c8:	080019b5 	.word	0x080019b5
 80018cc:	080019b5 	.word	0x080019b5
 80018d0:	0800195d 	.word	0x0800195d
 80018d4:	080018d9 	.word	0x080018d9
	{
	case 'n':
			// Get the task Name
			ConsoleReceiveParamString(buffer, 3, name,TASK_NAME_LENGHTH_MAX );
 80018d8:	f107 0214 	add.w	r2, r7, #20
 80018dc:	231e      	movs	r3, #30
 80018de:	2103      	movs	r1, #3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fd58 	bl	8001396 <ConsoleReceiveParamString>
			// Check Length
			if (strlen(name)< TASK_NAME_LENGHTH_MIN)
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fc82 	bl	80001f4 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d804      	bhi.n	8001900 <ConsoleCommandTaskSet+0xcc>
			{
				ConsoleSendLine("Name too short");
 80018f6:	4837      	ldr	r0, [pc, #220]	; (80019d4 <ConsoleCommandTaskSet+0x1a0>)
 80018f8:	f7ff fdf0 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 80018fc:	2310      	movs	r3, #16
 80018fe:	e060      	b.n	80019c2 <ConsoleCommandTaskSet+0x18e>
			}
			strcpy(task->name,name);
 8001900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001902:	3301      	adds	r3, #1
 8001904:	f107 0214 	add.w	r2, r7, #20
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f009 fb4a 	bl	800afa4 <strcpy>
			break;
 8001910:	e050      	b.n	80019b4 <ConsoleCommandTaskSet+0x180>
	case 'c':
			// get the colour number

			ConsoleReceiveParamInt16(buffer, 3, &colour);
 8001912:	f107 030e 	add.w	r3, r7, #14
 8001916:	461a      	mov	r2, r3
 8001918:	2103      	movs	r1, #3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fd6b 	bl	80013f6 <ConsoleReceiveParamInt16>
			if (colour > FACE_COUNT)
 8001920:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	dd04      	ble.n	8001932 <ConsoleCommandTaskSet+0xfe>
			{
				ConsoleSendLine("Invalid Colour");
 8001928:	482b      	ldr	r0, [pc, #172]	; (80019d8 <ConsoleCommandTaskSet+0x1a4>)
 800192a:	f7ff fdd7 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 800192e:	2310      	movs	r3, #16
 8001930:	e047      	b.n	80019c2 <ConsoleCommandTaskSet+0x18e>
			}
			task->colour = ledColours.colour[colour].code;
 8001932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001936:	4a29      	ldr	r2, [pc, #164]	; (80019dc <ConsoleCommandTaskSet+0x1a8>)
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	4413      	add	r3, r2
 800193c:	330c      	adds	r3, #12
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001942:	621a      	str	r2, [r3, #32]
			ConsoleSendString("Colour set : ");
 8001944:	4826      	ldr	r0, [pc, #152]	; (80019e0 <ConsoleCommandTaskSet+0x1ac>)
 8001946:	f7ff fdbc 	bl	80014c2 <ConsoleSendString>
			ConsoleSendLine(ledColours.colour[colour].name);
 800194a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <ConsoleCommandTaskSet+0x1a8>)
 8001952:	4413      	add	r3, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fdc1 	bl	80014dc <ConsoleSendLine>

		break;
 800195a:	e02b      	b.n	80019b4 <ConsoleCommandTaskSet+0x180>
	case 'm':
			ConsoleReceiveParamInt16(buffer, 3, &minmax);
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	461a      	mov	r2, r3
 8001962:	2103      	movs	r1, #3
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fd46 	bl	80013f6 <ConsoleReceiveParamInt16>
			if (minmax <0)
 800196a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	da04      	bge.n	800197c <ConsoleCommandTaskSet+0x148>
			{
				ConsoleSendLine("Invalid Max time");
 8001972:	481c      	ldr	r0, [pc, #112]	; (80019e4 <ConsoleCommandTaskSet+0x1b0>)
 8001974:	f7ff fdb2 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001978:	2310      	movs	r3, #16
 800197a:	e022      	b.n	80019c2 <ConsoleCommandTaskSet+0x18e>
			}
			task->defaultMaxTime = minmax;
 800197c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001980:	b29a      	uxth	r2, r3
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	84da      	strh	r2, [r3, #38]	; 0x26
		break;
 8001986:	e015      	b.n	80019b4 <ConsoleCommandTaskSet+0x180>
	case 'i':
			ConsoleReceiveParamInt16(buffer, 3, &minmax);
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	461a      	mov	r2, r3
 800198e:	2103      	movs	r1, #3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fd30 	bl	80013f6 <ConsoleReceiveParamInt16>
			if (minmax <0)
 8001996:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	da04      	bge.n	80019a8 <ConsoleCommandTaskSet+0x174>
			{
				ConsoleSendLine("Invalid Min time");
 800199e:	4812      	ldr	r0, [pc, #72]	; (80019e8 <ConsoleCommandTaskSet+0x1b4>)
 80019a0:	f7ff fd9c 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 80019a4:	2310      	movs	r3, #16
 80019a6:	e00c      	b.n	80019c2 <ConsoleCommandTaskSet+0x18e>
			}
			task->defaultMinTime = minmax;
 80019a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b0:	849a      	strh	r2, [r3, #36]	; 0x24
		break;
 80019b2:	bf00      	nop
	}


	// Show the current face info
	displayTask(taskId);
 80019b4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fda0 	bl	8001500 <displayTask>
	return COMMAND_SUCCESS;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3738      	adds	r7, #56	; 0x38
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	0800e420 	.word	0x0800e420
 80019d0:	0800e364 	.word	0x0800e364
 80019d4:	0800e430 	.word	0x0800e430
 80019d8:	0800e440 	.word	0x0800e440
 80019dc:	20000090 	.word	0x20000090
 80019e0:	0800e450 	.word	0x0800e450
 80019e4:	0800e3d4 	.word	0x0800e3d4
 80019e8:	0800e3e8 	.word	0x0800e3e8

080019ec <ConsoleCommandTaskQuery>:
static eCommandResult_T ConsoleCommandTaskQuery(const char buffer[])
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	uint32_t param1;

	if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &param1))
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	461a      	mov	r2, r3
 80019fa:	2101      	movs	r1, #1
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fc99 	bl	8001334 <ConsoleParamFindN>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00d      	beq.n	8001a24 <ConsoleCommandTaskQuery+0x38>
	{
		// List all tasks
		for (uint8_t f=0;f<TASK_COUNT_MAX;f++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	75fb      	strb	r3, [r7, #23]
 8001a0c:	e006      	b.n	8001a1c <ConsoleCommandTaskQuery+0x30>
		{
			displayTask(f);
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fd75 	bl	8001500 <displayTask>
		for (uint8_t f=0;f<TASK_COUNT_MAX;f++)
 8001a16:	7dfb      	ldrb	r3, [r7, #23]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	75fb      	strb	r3, [r7, #23]
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	2b13      	cmp	r3, #19
 8001a20:	d9f5      	bls.n	8001a0e <ConsoleCommandTaskQuery+0x22>
 8001a22:	e019      	b.n	8001a58 <ConsoleCommandTaskQuery+0x6c>
		}
	}
	else
	{
		int16_t taskId;
		ConsoleReceiveParamInt16(buffer, 1, &taskId );
 8001a24:	f107 030e 	add.w	r3, r7, #14
 8001a28:	461a      	mov	r2, r3
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff fce2 	bl	80013f6 <ConsoleReceiveParamInt16>

		if (taskId < 0 || taskId > TASK_COUNT_MAX-1)
 8001a32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db03      	blt.n	8001a42 <ConsoleCommandTaskQuery+0x56>
 8001a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a3e:	2b13      	cmp	r3, #19
 8001a40:	dd04      	ble.n	8001a4c <ConsoleCommandTaskQuery+0x60>
		{
			ConsoleSendLine("Invalid Task number");
 8001a42:	4808      	ldr	r0, [pc, #32]	; (8001a64 <ConsoleCommandTaskQuery+0x78>)
 8001a44:	f7ff fd4a 	bl	80014dc <ConsoleSendLine>
			return COMMAND_PARAMETER_ERROR;
 8001a48:	2310      	movs	r3, #16
 8001a4a:	e006      	b.n	8001a5a <ConsoleCommandTaskQuery+0x6e>
		}

		displayTask(taskId);
 8001a4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fd54 	bl	8001500 <displayTask>

	}
	return COMMAND_SUCCESS;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	0800e3fc 	.word	0x0800e3fc

08001a68 <ConsoleCommandFaceUpQuery>:


static eCommandResult_T ConsoleCommandFaceUpQuery(const char buffer[])
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b0a5      	sub	sp, #148	; 0x94
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	6078      	str	r0, [r7, #4]

	uint8_t face;
	char msg[30];

	MPU6050_t data;
	MPU6050ReadStable(&data);
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 ff9d 	bl	80029b4 <MPU6050ReadStable>


	sprintf(msg,"Angle X: %f Y: %f",data.KalmanAngleX, data.KalmanAngleY);
 8001a7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a82:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001a86:	e9cd 2300 	strd	r2, r3, [sp]
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4926      	ldr	r1, [pc, #152]	; (8001b28 <ConsoleCommandFaceUpQuery+0xc0>)
 8001a90:	4620      	mov	r0, r4
 8001a92:	f009 f9e9 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001a96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fd1e 	bl	80014dc <ConsoleSendLine>

	face = detectFace(data.KalmanAngleX, data.KalmanAngleY);
 8001aa0:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001aa4:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8001aa8:	eeb0 1a46 	vmov.f32	s2, s12
 8001aac:	eef0 1a66 	vmov.f32	s3, s13
 8001ab0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab4:	eef0 0a67 	vmov.f32	s1, s15
 8001ab8:	f001 fca0 	bl	80033fc <detectFace>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	uint32_t rgb_color = hsl_to_rgb((face*30), 255, 127);
 8001ac2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	227f      	movs	r2, #127	; 0x7f
 8001ad2:	21ff      	movs	r1, #255	; 0xff
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fec1 	bl	800485c <hsl_to_rgb>
 8001ada:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	ledAllOff();
 8001ade:	f001 fbf5 	bl	80032cc <ledAllOff>
	ledSetFaceColour(face, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ae6:	0c1b      	lsrs	r3, r3, #16
 8001ae8:	b2d9      	uxtb	r1, r3
 8001aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aee:	0a1b      	lsrs	r3, r3, #8
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f897 0087 	ldrb.w	r0, [r7, #135]	; 0x87
 8001afc:	f001 fc03 	bl	8003306 <ledSetFaceColour>
	ledRender();
 8001b00:	f001 fbfb 	bl	80032fa <ledRender>

	sprintf(msg,"Detected face %i is up",face);
 8001b04:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001b08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <ConsoleCommandFaceUpQuery+0xc4>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f009 f9aa 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001b14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fcdf 	bl	80014dc <ConsoleSendLine>

	return COMMAND_SUCCESS;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	378c      	adds	r7, #140	; 0x8c
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	0800e460 	.word	0x0800e460
 8001b2c:	0800e474 	.word	0x0800e474

08001b30 <ConsoleCommandLEDSet>:

static eCommandResult_T ConsoleCommandLEDSet(const char buffer[])
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	uint32_t startIndex;
	eCommandResult_T result;
	int16_t faceNumber;
	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2101      	movs	r1, #1
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff fbf7 	bl	8001334 <ConsoleParamFindN>
 8001b46:	4603      	mov	r3, r0
 8001b48:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <ConsoleCommandLEDSet+0x24>
		return result;
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	e066      	b.n	8001c22 <ConsoleCommandLEDSet+0xf2>

	uint8_t command = buffer[startIndex];
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	75bb      	strb	r3, [r7, #22]
	switch (command)
 8001b5e:	7dbb      	ldrb	r3, [r7, #22]
 8001b60:	2b6f      	cmp	r3, #111	; 0x6f
 8001b62:	d053      	beq.n	8001c0c <ConsoleCommandLEDSet+0xdc>
 8001b64:	2b6f      	cmp	r3, #111	; 0x6f
 8001b66:	dc59      	bgt.n	8001c1c <ConsoleCommandLEDSet+0xec>
 8001b68:	2b64      	cmp	r3, #100	; 0x64
 8001b6a:	d054      	beq.n	8001c16 <ConsoleCommandLEDSet+0xe6>
 8001b6c:	2b66      	cmp	r3, #102	; 0x66
 8001b6e:	d155      	bne.n	8001c1c <ConsoleCommandLEDSet+0xec>
	{
		case 'f':

			result = ConsoleReceiveParamInt16(buffer, 2, &faceNumber);
 8001b70:	f107 030e 	add.w	r3, r7, #14
 8001b74:	461a      	mov	r2, r3
 8001b76:	2102      	movs	r1, #2
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fc3c 	bl	80013f6 <ConsoleReceiveParamInt16>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	75fb      	strb	r3, [r7, #23]
			if (result != COMMAND_SUCCESS)
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <ConsoleCommandLEDSet+0x62>
			{
				ConsoleSendLine("Invalid Face ID");
 8001b88:	4828      	ldr	r0, [pc, #160]	; (8001c2c <ConsoleCommandLEDSet+0xfc>)
 8001b8a:	f7ff fca7 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001b8e:	2310      	movs	r3, #16
 8001b90:	e047      	b.n	8001c22 <ConsoleCommandLEDSet+0xf2>
			}

			if (faceNumber >= PIXEL_RINGS)
 8001b92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b96:	2b0b      	cmp	r3, #11
 8001b98:	dd04      	ble.n	8001ba4 <ConsoleCommandLEDSet+0x74>
			{
				ConsoleSendLine("Invalid Face ID - Must be Zero Index");
 8001b9a:	4825      	ldr	r0, [pc, #148]	; (8001c30 <ConsoleCommandLEDSet+0x100>)
 8001b9c:	f7ff fc9e 	bl	80014dc <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	e03e      	b.n	8001c22 <ConsoleCommandLEDSet+0xf2>
			}


			result = ConsoleParamFindN(buffer,3,&startIndex);
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2103      	movs	r1, #3
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff fbc1 	bl	8001334 <ConsoleParamFindN>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	75fb      	strb	r3, [r7, #23]
			uint8_t colour = buffer[startIndex];
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	757b      	strb	r3, [r7, #21]
			if ('r' == colour)
 8001bc0:	7d7b      	ldrb	r3, [r7, #21]
 8001bc2:	2b72      	cmp	r3, #114	; 0x72
 8001bc4:	d108      	bne.n	8001bd8 <ConsoleCommandLEDSet+0xa8>
				ledSetFaceColour(faceNumber,0xAA,00,0);
 8001bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bca:	b2d8      	uxtb	r0, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2200      	movs	r2, #0
 8001bd0:	21aa      	movs	r1, #170	; 0xaa
 8001bd2:	f001 fb98 	bl	8003306 <ledSetFaceColour>
 8001bd6:	e016      	b.n	8001c06 <ConsoleCommandLEDSet+0xd6>
			else if ('g' == colour)
 8001bd8:	7d7b      	ldrb	r3, [r7, #21]
 8001bda:	2b67      	cmp	r3, #103	; 0x67
 8001bdc:	d108      	bne.n	8001bf0 <ConsoleCommandLEDSet+0xc0>
				ledSetFaceColour(faceNumber,0x0,0xAA,0);
 8001bde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001be2:	b2d8      	uxtb	r0, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	22aa      	movs	r2, #170	; 0xaa
 8001be8:	2100      	movs	r1, #0
 8001bea:	f001 fb8c 	bl	8003306 <ledSetFaceColour>
 8001bee:	e00a      	b.n	8001c06 <ConsoleCommandLEDSet+0xd6>
			else if ('b' == colour)
 8001bf0:	7d7b      	ldrb	r3, [r7, #21]
 8001bf2:	2b62      	cmp	r3, #98	; 0x62
 8001bf4:	d107      	bne.n	8001c06 <ConsoleCommandLEDSet+0xd6>
				ledSetFaceColour(faceNumber,0x0,0x0,0xAA);
 8001bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bfa:	b2d8      	uxtb	r0, r3
 8001bfc:	23aa      	movs	r3, #170	; 0xaa
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	f001 fb80 	bl	8003306 <ledSetFaceColour>

			ledRender();
 8001c06:	f001 fb78 	bl	80032fa <ledRender>

			break;
 8001c0a:	e009      	b.n	8001c20 <ConsoleCommandLEDSet+0xf0>
		case 'o':
			ledAllOff();
 8001c0c:	f001 fb5e 	bl	80032cc <ledAllOff>
			ledRender();
 8001c10:	f001 fb73 	bl	80032fa <ledRender>
			break;
 8001c14:	e004      	b.n	8001c20 <ConsoleCommandLEDSet+0xf0>
		case'd':
				ledDance();
 8001c16:	f001 fba2 	bl	800335e <ledDance>
			break;
 8001c1a:	e001      	b.n	8001c20 <ConsoleCommandLEDSet+0xf0>
		default :
			return CONSOLE_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <ConsoleCommandLEDSet+0xf2>
			break;
	}


	return CONSOLE_SUCCESS;
 8001c20:	2300      	movs	r3, #0

}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	0800e48c 	.word	0x0800e48c
 8001c30:	0800e49c 	.word	0x0800e49c

08001c34 <ConsoleCommandMemTest>:

static eCommandResult_T ConsoleCommandMemTest(const char buffer[])
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
//
//	HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, 1);
//	Temp = (temp0 << 16) | (temp1 << 8) | temp2;
//	sprintf(msg,"Flash Mem Id \t%#02x %#02x %#02x %#02x %#02x %#02x %#02x %#02x ",id[0],id[1],id[2],id[3],id[4],id[5],id[6],id[7]);
//	ConsoleSendLine(msg);
	ConsoleSendLine("Commented out");
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <ConsoleCommandMemTest+0x18>)
 8001c3e:	f7ff fc4d 	bl	80014dc <ConsoleSendLine>
	return CONSOLE_SUCCESS;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	0800e4c4 	.word	0x0800e4c4

08001c50 <ConsoleCommandCPUQuery>:

static eCommandResult_T ConsoleCommandCPUQuery(const char buffer[])
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

	char msg[30];
	register int SP __asm("r13");


	sprintf(msg,"-- CPU Details --");
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	492b      	ldr	r1, [pc, #172]	; (8001d0c <ConsoleCommandCPUQuery+0xbc>)
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f009 f902 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fc37 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Stack Pointer \t\t%#08x",SP);
 8001c6e:	466a      	mov	r2, sp
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4926      	ldr	r1, [pc, #152]	; (8001d10 <ConsoleCommandCPUQuery+0xc0>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f009 f8f6 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fc2b 	bl	80014dc <ConsoleSendLine>

	unsigned int* HP = malloc(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f008 fb7c 	bl	800a384 <malloc>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	*HP=0xAB;
 8001c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c92:	22ab      	movs	r2, #171	; 0xab
 8001c94:	601a      	str	r2, [r3, #0]

	sprintf(msg,"Heap Pointer \t\t%#08x",(unsigned int)HP-1);
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	491d      	ldr	r1, [pc, #116]	; (8001d14 <ConsoleCommandCPUQuery+0xc4>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f009 f8e1 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fc16 	bl	80014dc <ConsoleSendLine>
	free(HP);
 8001cb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cb2:	f008 fb6f 	bl	800a394 <free>
//	ConsoleSendLine(msg);

//	sprintf(msg,"Un-initialised global variable \t\t%#08x",(unsigned int)&uninitGlobalVar);
//	ConsoleSendLine(msg);

	sprintf(msg,"Const variable \t\t%#08x",(unsigned int)&constVar);
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <ConsoleCommandCPUQuery+0xc8>)
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4917      	ldr	r1, [pc, #92]	; (8001d1c <ConsoleCommandCPUQuery+0xcc>)
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f009 f8d2 	bl	800ae68 <siprintf>
		ConsoleSendLine(msg);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fc07 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Static variable \t\t%#08x",(unsigned int)&staticVar);
 8001cce:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <ConsoleCommandCPUQuery+0xd0>)
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4913      	ldr	r1, [pc, #76]	; (8001d24 <ConsoleCommandCPUQuery+0xd4>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f009 f8c6 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fbfb 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Function variable \t\t%#08x",(unsigned int)&funcVar);
 8001ce6:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	490e      	ldr	r1, [pc, #56]	; (8001d28 <ConsoleCommandCPUQuery+0xd8>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f009 f8b9 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fbee 	bl	80014dc <ConsoleSendLine>

	return CONSOLE_SUCCESS;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3730      	adds	r7, #48	; 0x30
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	0800e4d4 	.word	0x0800e4d4
 8001d10:	0800e4e8 	.word	0x0800e4e8
 8001d14:	0800e500 	.word	0x0800e500
 8001d18:	0800e8d0 	.word	0x0800e8d0
 8001d1c:	0800e518 	.word	0x0800e518
 8001d20:	20000428 	.word	0x20000428
 8001d24:	0800e530 	.word	0x0800e530
 8001d28:	0800e548 	.word	0x0800e548

08001d2c <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	461a      	mov	r2, r3
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff faf9 	bl	8001334 <ConsoleParamFindN>
 8001d42:	4603      	mov	r3, r0
 8001d44:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 8001d4c:	2310      	movs	r3, #16
 8001d4e:	e049      	b.n	8001de4 <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	18d0      	adds	r0, r2, r3
 8001d56:	f107 0114 	add.w	r1, r7, #20
 8001d5a:	f107 0218 	add.w	r2, r7, #24
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	460b      	mov	r3, r1
 8001d66:	4921      	ldr	r1, [pc, #132]	; (8001dec <ConsoleCommandDateSet+0xc0>)
 8001d68:	f009 f89e 	bl	800aea8 <siscanf>

	if (!IS_RTC_DATE(day) )
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <ConsoleCommandDateSet+0x4c>
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	d904      	bls.n	8001d82 <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 8001d78:	481d      	ldr	r0, [pc, #116]	; (8001df0 <ConsoleCommandDateSet+0xc4>)
 8001d7a:	f7ff fbaf 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d7e:	2310      	movs	r3, #16
 8001d80:	e030      	b.n	8001de4 <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <ConsoleCommandDateSet+0x62>
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d904      	bls.n	8001d98 <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 8001d8e:	4819      	ldr	r0, [pc, #100]	; (8001df4 <ConsoleCommandDateSet+0xc8>)
 8001d90:	f7ff fba4 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d94:	2310      	movs	r3, #16
 8001d96:	e025      	b.n	8001de4 <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b63      	cmp	r3, #99	; 0x63
 8001d9c:	d904      	bls.n	8001da8 <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8001d9e:	4816      	ldr	r0, [pc, #88]	; (8001df8 <ConsoleCommandDateSet+0xcc>)
 8001da0:	f7ff fb9c 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001da4:	2310      	movs	r3, #16
 8001da6:	e01d      	b.n	8001de4 <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 8001dba:	2307      	movs	r3, #7
 8001dbc:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480d      	ldr	r0, [pc, #52]	; (8001dfc <ConsoleCommandDateSet+0xd0>)
 8001dc8:	f005 ff0e 	bl	8007be8 <HAL_RTC_SetDate>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 8001dd2:	480b      	ldr	r0, [pc, #44]	; (8001e00 <ConsoleCommandDateSet+0xd4>)
 8001dd4:	f7ff fb82 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001dd8:	2310      	movs	r3, #16
 8001dda:	e003      	b.n	8001de4 <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <ConsoleCommandDateSet+0xd8>)
 8001dde:	f7ff fb7d 	bl	80014dc <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001de2:	2300      	movs	r3, #0
	}
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	0800e564 	.word	0x0800e564
 8001df0:	0800e570 	.word	0x0800e570
 8001df4:	0800e594 	.word	0x0800e594
 8001df8:	0800e5b8 	.word	0x0800e5b8
 8001dfc:	200004f0 	.word	0x200004f0
 8001e00:	0800e5dc 	.word	0x0800e5dc
 8001e04:	0800e600 	.word	0x0800e600

08001e08 <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	; 0x38
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	461a      	mov	r2, r3
 8001e16:	2101      	movs	r1, #1
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fa8b 	bl	8001334 <ConsoleParamFindN>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 8001e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 8001e2c:	2310      	movs	r3, #16
 8001e2e:	e041      	b.n	8001eb4 <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	18d0      	adds	r0, r2, r3
 8001e36:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e3e:	f107 0320 	add.w	r3, r7, #32
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	460b      	mov	r3, r1
 8001e46:	491d      	ldr	r1, [pc, #116]	; (8001ebc <ConsoleCommandTimeSet+0xb4>)
 8001e48:	f009 f82e 	bl	800aea8 <siscanf>

	if (!IS_RTC_MINUTES(min) )
 8001e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4e:	2b3b      	cmp	r3, #59	; 0x3b
 8001e50:	d904      	bls.n	8001e5c <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 8001e52:	481b      	ldr	r0, [pc, #108]	; (8001ec0 <ConsoleCommandTimeSet+0xb8>)
 8001e54:	f7ff fb42 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001e58:	2310      	movs	r3, #16
 8001e5a:	e02b      	b.n	8001eb4 <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	2b3b      	cmp	r3, #59	; 0x3b
 8001e60:	d904      	bls.n	8001e6c <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 8001e62:	4818      	ldr	r0, [pc, #96]	; (8001ec4 <ConsoleCommandTimeSet+0xbc>)
 8001e64:	f7ff fb3a 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001e68:	2310      	movs	r3, #16
 8001e6a:	e023      	b.n	8001eb4 <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	2b17      	cmp	r3, #23
 8001e70:	d904      	bls.n	8001e7c <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 8001e72:	4815      	ldr	r0, [pc, #84]	; (8001ec8 <ConsoleCommandTimeSet+0xc0>)
 8001e74:	f7ff fb32 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001e78:	2310      	movs	r3, #16
 8001e7a:	e01b      	b.n	8001eb4 <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2200      	movs	r2, #0
 8001e94:	4619      	mov	r1, r3
 8001e96:	480d      	ldr	r0, [pc, #52]	; (8001ecc <ConsoleCommandTimeSet+0xc4>)
 8001e98:	f005 fdae 	bl	80079f8 <HAL_RTC_SetTime>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d004      	beq.n	8001eac <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 8001ea2:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <ConsoleCommandTimeSet+0xc8>)
 8001ea4:	f7ff fb1a 	bl	80014dc <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	e003      	b.n	8001eb4 <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Time Set");
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <ConsoleCommandTimeSet+0xcc>)
 8001eae:	f7ff fb15 	bl	80014dc <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001eb2:	2300      	movs	r3, #0
	}
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3730      	adds	r7, #48	; 0x30
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	0800e60c 	.word	0x0800e60c
 8001ec0:	0800e618 	.word	0x0800e618
 8001ec4:	0800e63c 	.word	0x0800e63c
 8001ec8:	0800e664 	.word	0x0800e664
 8001ecc:	200004f0 	.word	0x200004f0
 8001ed0:	0800e688 	.word	0x0800e688
 8001ed4:	0800e6ac 	.word	0x0800e6ac

08001ed8 <ConsoleCommandLipoQuery>:


static eCommandResult_T ConsoleCommandLipoQuery(const char buffer[])
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b090      	sub	sp, #64	; 0x40
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	uint16_t voltage;
	uint16_t temp;
	uint16_t version;
	char msg[50];
	lc709203_getCellVoltage(&voltage);
 8001ee0:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 f978 	bl	80031da <lc709203_getCellVoltage>
	lc709203_getCellTemp(&temp);
 8001eea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 f980 	bl	80031f4 <lc709203_getCellTemp>
	lc709203_getId(&version);
 8001ef4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f001 f988 	bl	800320e <lc709203_getId>

	sprintf(msg,"-- Lipo Cell Details --");
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	4922      	ldr	r1, [pc, #136]	; (8001f8c <ConsoleCommandLipoQuery+0xb4>)
 8001f04:	4618      	mov	r0, r3
 8001f06:	f008 ffaf 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fae4 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Monitor Version: %d",version);
 8001f14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001f16:	461a      	mov	r2, r3
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	491c      	ldr	r1, [pc, #112]	; (8001f90 <ConsoleCommandLipoQuery+0xb8>)
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f008 ffa2 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001f24:	f107 0308 	add.w	r3, r7, #8
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fad7 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Cell Voltage: %1.4f v",((double)voltage/1000));
 8001f2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe faff 	bl	8000534 <__aeabi_ui2d>
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <ConsoleCommandLipoQuery+0xbc>)
 8001f3c:	f7fe fc9e 	bl	800087c <__aeabi_ddiv>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	f107 0008 	add.w	r0, r7, #8
 8001f48:	4913      	ldr	r1, [pc, #76]	; (8001f98 <ConsoleCommandLipoQuery+0xc0>)
 8001f4a:	f008 ff8d 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fac2 	bl	80014dc <ConsoleSendLine>

	sprintf(msg,"Cell Temp: %1.2f v",((double)temp/100));
 8001f58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe faea 	bl	8000534 <__aeabi_ui2d>
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <ConsoleCommandLipoQuery+0xc4>)
 8001f66:	f7fe fc89 	bl	800087c <__aeabi_ddiv>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	f107 0008 	add.w	r0, r7, #8
 8001f72:	490b      	ldr	r1, [pc, #44]	; (8001fa0 <ConsoleCommandLipoQuery+0xc8>)
 8001f74:	f008 ff78 	bl	800ae68 <siprintf>
	ConsoleSendLine(msg);
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff faad 	bl	80014dc <ConsoleSendLine>



	return COMMAND_SUCCESS;
 8001f82:	2300      	movs	r3, #0

}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3740      	adds	r7, #64	; 0x40
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	0800e6b8 	.word	0x0800e6b8
 8001f90:	0800e6d0 	.word	0x0800e6d0
 8001f94:	408f4000 	.word	0x408f4000
 8001f98:	0800e6e4 	.word	0x0800e6e4
 8001f9c:	40590000 	.word	0x40590000
 8001fa0:	0800e6fc 	.word	0x0800e6fc

08001fa4 <ConsoleCommandAccelQuery>:
 * @param: Buffer
 * @return: eCommandResult_T
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandAccelQuery(const char buffer[])
{
 8001fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fa8:	b0c1      	sub	sp, #260	; 0x104
 8001faa:	af08      	add	r7, sp, #32
 8001fac:	6078      	str	r0, [r7, #4]
	int16_t n;
	MPU6050_t data;
	char msg[100];
	uint32_t paramIndex;
	float rawAveX = 0;
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float rawAveY = 0;
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	float rawAveZ = 0;
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	ConsoleParamFindN(buffer, 1 , &paramIndex);
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2101      	movs	r1, #1
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff f9b0 	bl	8001334 <ConsoleParamFindN>

	if (0 == paramIndex)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11a      	bne.n	8002010 <ConsoleCommandAccelQuery+0x6c>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 8001fda:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4899      	ldr	r0, [pc, #612]	; (8002248 <ConsoleCommandAccelQuery+0x2a4>)
 8001fe2:	f000 fd01 	bl	80029e8 <MPU6050_Read_All>
		sprintf(msg,"X Angle\t: %f \t\t Y Angle\t: %f\n",data.KalmanAngleX, data.KalmanAngleY);
 8001fe6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001fea:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001fee:	f107 040c 	add.w	r4, r7, #12
 8001ff2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4994      	ldr	r1, [pc, #592]	; (800224c <ConsoleCommandAccelQuery+0x2a8>)
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f008 ff33 	bl	800ae68 <siprintf>
		ConsoleSendLine(msg);
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fa68 	bl	80014dc <ConsoleSendLine>
		return COMMAND_SUCCESS;
 800200c:	2300      	movs	r3, #0
 800200e:	e115      	b.n	800223c <ConsoleCommandAccelQuery+0x298>
	}


	// Read Raw n Times (Param r n where n = number of reads
	switch (buffer[paramIndex])
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b72      	cmp	r3, #114	; 0x72
 800201a:	d009      	beq.n	8002030 <ConsoleCommandAccelQuery+0x8c>
 800201c:	2b72      	cmp	r3, #114	; 0x72
 800201e:	dc05      	bgt.n	800202c <ConsoleCommandAccelQuery+0x88>
 8002020:	2b61      	cmp	r3, #97	; 0x61
 8002022:	f000 80b0 	beq.w	8002186 <ConsoleCommandAccelQuery+0x1e2>
 8002026:	2b6b      	cmp	r3, #107	; 0x6b
 8002028:	f000 80dd 	beq.w	80021e6 <ConsoleCommandAccelQuery+0x242>
	{
		default:
				return COMMAND_PARAMETER_ERROR;
 800202c:	2310      	movs	r3, #16
 800202e:	e105      	b.n	800223c <ConsoleCommandAccelQuery+0x298>
		case 'r':
				ConsoleReceiveParamInt16(buffer, 2, &n);
 8002030:	f107 03ce 	add.w	r3, r7, #206	; 0xce
 8002034:	461a      	mov	r2, r3
 8002036:	2102      	movs	r1, #2
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff f9dc 	bl	80013f6 <ConsoleReceiveParamInt16>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 800203e:	2300      	movs	r3, #0
 8002040:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8002044:	e052      	b.n	80020ec <ConsoleCommandAccelQuery+0x148>
				{
					MPU6050_Read_Accel(&I2C_MPU6050, &data);
 8002046:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800204a:	4619      	mov	r1, r3
 800204c:	487e      	ldr	r0, [pc, #504]	; (8002248 <ConsoleCommandAccelQuery+0x2a4>)
 800204e:	f000 fc0f 	bl	8002870 <MPU6050_Read_Accel>
					rawAveX += data.Accel_X_RAW;
 8002052:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800205e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002066:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
					rawAveY += data.Accel_Y_RAW;
 800206a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002076:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 800207a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207e:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
					rawAveZ += data.Accel_Z_RAW;
 8002082:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208e:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8002092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002096:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
					sprintf(msg,"RAW:[X:%5i Y:%5i Z:5%i] G:[X:%2f Y:%2f Z:%2f]",data.Accel_X_RAW, data.Accel_Y_RAW,data.Accel_Z_RAW, data.Ax,data.Ay,data.Az);
 800209a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800209e:	469c      	mov	ip, r3
 80020a0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80020a4:	469e      	mov	lr, r3
 80020a6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80020b0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020b4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80020b8:	f107 060c 	add.w	r6, r7, #12
 80020bc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80020c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80020c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4673      	mov	r3, lr
 80020ce:	4662      	mov	r2, ip
 80020d0:	495f      	ldr	r1, [pc, #380]	; (8002250 <ConsoleCommandAccelQuery+0x2ac>)
 80020d2:	4630      	mov	r0, r6
 80020d4:	f008 fec8 	bl	800ae68 <siprintf>
					ConsoleSendLine(msg);
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f9fd 	bl	80014dc <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 80020e2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80020ec:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80020f0:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	; 0xce
 80020f4:	4293      	cmp	r3, r2
 80020f6:	dba6      	blt.n	8002046 <ConsoleCommandAccelQuery+0xa2>
				}
				rawAveX = rawAveX/n;
 80020f8:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002104:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 8002108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800210c:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
				rawAveY = rawAveY/n;
 8002110:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211c:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 8002120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002124:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
				rawAveZ = rawAveZ/n;
 8002128:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002134:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 8002138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800213c:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
				sprintf(msg,"\nRAW Average :[X:%5f Y:%5f Z:5%f]\n",rawAveX,rawAveY,rawAveZ);
 8002140:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002144:	f7fe fa18 	bl	8000578 <__aeabi_f2d>
 8002148:	4680      	mov	r8, r0
 800214a:	4689      	mov	r9, r1
 800214c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002150:	f7fe fa12 	bl	8000578 <__aeabi_f2d>
 8002154:	4604      	mov	r4, r0
 8002156:	460d      	mov	r5, r1
 8002158:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800215c:	f7fe fa0c 	bl	8000578 <__aeabi_f2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	f107 000c 	add.w	r0, r7, #12
 8002168:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800216c:	e9cd 4500 	strd	r4, r5, [sp]
 8002170:	4642      	mov	r2, r8
 8002172:	464b      	mov	r3, r9
 8002174:	4937      	ldr	r1, [pc, #220]	; (8002254 <ConsoleCommandAccelQuery+0x2b0>)
 8002176:	f008 fe77 	bl	800ae68 <siprintf>
				ConsoleSendLine(msg);
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff f9ac 	bl	80014dc <ConsoleSendLine>
				break;
 8002184:	e059      	b.n	800223a <ConsoleCommandAccelQuery+0x296>
		case 'a':
				ConsoleReceiveParamInt16(buffer, 2, &n);
 8002186:	f107 03ce 	add.w	r3, r7, #206	; 0xce
 800218a:	461a      	mov	r2, r3
 800218c:	2102      	movs	r1, #2
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff f931 	bl	80013f6 <ConsoleReceiveParamInt16>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8002194:	2300      	movs	r3, #0
 8002196:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 800219a:	e01d      	b.n	80021d8 <ConsoleCommandAccelQuery+0x234>
				{
					MPU6050_Read_All(&I2C_MPU6050, &data);
 800219c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021a0:	4619      	mov	r1, r3
 80021a2:	4829      	ldr	r0, [pc, #164]	; (8002248 <ConsoleCommandAccelQuery+0x2a4>)
 80021a4:	f000 fc20 	bl	80029e8 <MPU6050_Read_All>
					sprintf(msg,"A:[X:%2f Y:%2f]",data.KalmanAngleX, data.KalmanAngleY);
 80021a8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80021ac:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80021b0:	f107 040c 	add.w	r4, r7, #12
 80021b4:	e9cd 2300 	strd	r2, r3, [sp]
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4926      	ldr	r1, [pc, #152]	; (8002258 <ConsoleCommandAccelQuery+0x2b4>)
 80021be:	4620      	mov	r0, r4
 80021c0:	f008 fe52 	bl	800ae68 <siprintf>
					ConsoleSendLine(msg);
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f987 	bl	80014dc <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 80021ce:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80021d2:	3301      	adds	r3, #1
 80021d4:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 80021d8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80021dc:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	; 0xce
 80021e0:	4293      	cmp	r3, r2
 80021e2:	dbdb      	blt.n	800219c <ConsoleCommandAccelQuery+0x1f8>

				}
				break;
 80021e4:	e029      	b.n	800223a <ConsoleCommandAccelQuery+0x296>
		case 'k':
				ConsoleSendLine("--* Kalman Angle *--");
 80021e6:	481d      	ldr	r0, [pc, #116]	; (800225c <ConsoleCommandAccelQuery+0x2b8>)
 80021e8:	f7ff f978 	bl	80014dc <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 80021f2:	e00a      	b.n	800220a <ConsoleCommandAccelQuery+0x266>
				{
					MPU6050_Read_All(&I2C_MPU6050, &data);
 80021f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021f8:	4619      	mov	r1, r3
 80021fa:	4813      	ldr	r0, [pc, #76]	; (8002248 <ConsoleCommandAccelQuery+0x2a4>)
 80021fc:	f000 fbf4 	bl	80029e8 <MPU6050_Read_All>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 8002200:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002204:	3301      	adds	r3, #1
 8002206:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 800220a:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800220e:	2b31      	cmp	r3, #49	; 0x31
 8002210:	d9f0      	bls.n	80021f4 <ConsoleCommandAccelQuery+0x250>
				}
				sprintf(msg,"[X:%2f Y:%2f]\n",data.KalmanAngleX, data.KalmanAngleY);
 8002212:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002216:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800221a:	f107 040c 	add.w	r4, r7, #12
 800221e:	e9cd 2300 	strd	r2, r3, [sp]
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <ConsoleCommandAccelQuery+0x2bc>)
 8002228:	4620      	mov	r0, r4
 800222a:	f008 fe1d 	bl	800ae68 <siprintf>
				ConsoleSendLine(msg);
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff f952 	bl	80014dc <ConsoleSendLine>

			break;
 8002238:	bf00      	nop
	}

	return COMMAND_SUCCESS;
 800223a:	2300      	movs	r3, #0



}
 800223c:	4618      	mov	r0, r3
 800223e:	37e4      	adds	r7, #228	; 0xe4
 8002240:	46bd      	mov	sp, r7
 8002242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002246:	bf00      	nop
 8002248:	2000049c 	.word	0x2000049c
 800224c:	0800e710 	.word	0x0800e710
 8002250:	0800e730 	.word	0x0800e730
 8002254:	0800e760 	.word	0x0800e760
 8002258:	0800e784 	.word	0x0800e784
 800225c:	0800e794 	.word	0x0800e794
 8002260:	0800e7ac 	.word	0x0800e7ac

08002264 <ConsoleCommandTimeQuery>:


static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b092      	sub	sp, #72	; 0x48
 8002268:	af02      	add	r7, sp, #8
 800226a:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2200      	movs	r2, #0
 8002272:	4619      	mov	r1, r3
 8002274:	480f      	ldr	r0, [pc, #60]	; (80022b4 <ConsoleCommandTimeQuery+0x50>)
 8002276:	f005 fc59 	bl	8007b2c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	2200      	movs	r2, #0
 8002280:	4619      	mov	r1, r3
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <ConsoleCommandTimeQuery+0x50>)
 8002284:	f005 fd34 	bl	8007cf0 <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8002288:	7b3b      	ldrb	r3, [r7, #12]
 800228a:	461a      	mov	r2, r3
 800228c:	7b7b      	ldrb	r3, [r7, #13]
 800228e:	4619      	mov	r1, r3
 8002290:	7bbb      	ldrb	r3, [r7, #14]
 8002292:	f107 0020 	add.w	r0, r7, #32
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	460b      	mov	r3, r1
 800229a:	4907      	ldr	r1, [pc, #28]	; (80022b8 <ConsoleCommandTimeQuery+0x54>)
 800229c:	f008 fde4 	bl	800ae68 <siprintf>
	ConsoleSendString(time);
 80022a0:	f107 0320 	add.w	r3, r7, #32
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff f90c 	bl	80014c2 <ConsoleSendString>
	return COMMAND_SUCCESS;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3740      	adds	r7, #64	; 0x40
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	200004f0 	.word	0x200004f0
 80022b8:	0800e7bc 	.word	0x0800e7bc

080022bc <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08e      	sub	sp, #56	; 0x38
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <ConsoleCommandDateQuery+0x44>)
 80022ce:	f005 fd0f 	bl	8007cf0 <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 80022d2:	7bbb      	ldrb	r3, [r7, #14]
 80022d4:	461a      	mov	r2, r3
 80022d6:	7b7b      	ldrb	r3, [r7, #13]
 80022d8:	4619      	mov	r1, r3
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	f107 0010 	add.w	r0, r7, #16
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	460b      	mov	r3, r1
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <ConsoleCommandDateQuery+0x48>)
 80022e6:	f008 fdbf 	bl	800ae68 <siprintf>
	ConsoleSendString(date);
 80022ea:	f107 0310 	add.w	r3, r7, #16
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f8e7 	bl	80014c2 <ConsoleSendString>
	return COMMAND_SUCCESS;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3730      	adds	r7, #48	; 0x30
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200004f0 	.word	0x200004f0
 8002304:	0800e7d4 	.word	0x0800e7d4

08002308 <ConsoleCommandHelp>:




static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8002310:	2300      	movs	r3, #0
 8002312:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8002314:	2312      	movs	r3, #18
 8002316:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e01e      	b.n	800235c <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 800231e:	4914      	ldr	r1, [pc, #80]	; (8002370 <ConsoleCommandHelp+0x68>)
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f89a 	bl	8002468 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8002334:	480f      	ldr	r0, [pc, #60]	; (8002374 <ConsoleCommandHelp+0x6c>)
 8002336:	f000 f897 	bl	8002468 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	3308      	adds	r3, #8
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <ConsoleCommandHelp+0x68>)
 8002348:	4413      	add	r3, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f88c 	bl	8002468 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8002350:	4809      	ldr	r0, [pc, #36]	; (8002378 <ConsoleCommandHelp+0x70>)
 8002352:	f000 f889 	bl	8002468 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3b01      	subs	r3, #1
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3db      	bcc.n	800231e <ConsoleCommandHelp+0x16>
	}
	return result;
 8002366:	7cfb      	ldrb	r3, [r7, #19]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0800e8d4 	.word	0x0800e8d4
 8002374:	0800e7ec 	.word	0x0800e7ec
 8002378:	0800e7f0 	.word	0x0800e7f0

0800237c <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <ConsoleCommandVer+0x24>)
 800238a:	f000 f86d 	bl	8002468 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <ConsoleCommandVer+0x28>)
 8002390:	f000 f86a 	bl	8002468 <ConsoleIoSendString>
	return result;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	0800e7f4 	.word	0x0800e7f4
 80023a4:	0800e7f0 	.word	0x0800e7f0

080023a8 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <ConsoleCommandsGetTable+0x10>)
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	0800e8d4 	.word	0x0800e8d4

080023bc <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 80023c4:	2201      	movs	r2, #1
 80023c6:	4909      	ldr	r1, [pc, #36]	; (80023ec <HAL_UART_RxCpltCallback+0x30>)
 80023c8:	4809      	ldr	r0, [pc, #36]	; (80023f0 <HAL_UART_RxCpltCallback+0x34>)
 80023ca:	f007 f814 	bl	80093f6 <HAL_UART_Receive_IT>
    }



    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_UART_RxCpltCallback+0x30>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b0a      	cmp	r3, #10
 80023d4:	d005      	beq.n	80023e2 <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_UART_RxCpltCallback+0x30>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <HAL_UART_RxCpltCallback+0x38>)
 80023de:	f7fe fd9c 	bl	8000f1a <cBuffer_Write>

    }
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000474 	.word	0x20000474
 80023f0:	20000614 	.word	0x20000614
 80023f4:	2000046c 	.word	0x2000046c

080023f8 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	4906      	ldr	r1, [pc, #24]	; (8002418 <ConsoleIoInit+0x20>)
 8002400:	4806      	ldr	r0, [pc, #24]	; (800241c <ConsoleIoInit+0x24>)
 8002402:	f7fe fd6b 	bl	8000edc <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8002406:	2201      	movs	r2, #1
 8002408:	4905      	ldr	r1, [pc, #20]	; (8002420 <ConsoleIoInit+0x28>)
 800240a:	4806      	ldr	r0, [pc, #24]	; (8002424 <ConsoleIoInit+0x2c>)
 800240c:	f006 fff3 	bl	80093f6 <HAL_UART_Receive_IT>

	return CONSOLE_SUCCESS;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000042c 	.word	0x2000042c
 800241c:	2000046c 	.word	0x2000046c
 8002420:	20000474 	.word	0x20000474
 8002424:	20000614 	.word	0x20000614

08002428 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	uint8_t len;




	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 8002430:	f107 030f 	add.w	r3, r7, #15
 8002434:	220d      	movs	r2, #13
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	480a      	ldr	r0, [pc, #40]	; (8002464 <ConsoleIoReceive+0x3c>)
 800243a:	f7fe fd91 	bl	8000f60 <cBuffer_GetString>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len-1]  = 0x0; //Terminate String in C Style
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	3b01      	subs	r3, #1
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fe66 	bl	8003122 <manageBackSpace>
		return CONSOLE_SUCCESS;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <ConsoleIoReceive+0x34>
	}
	return CONSOLE_NO_STRING;
 800245a:	2302      	movs	r3, #2

}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000046c 	.word	0x2000046c

08002468 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7fd febf 	bl	80001f4 <strlen>
 8002476:	4603      	mov	r3, r0
 8002478:	b29a      	uxth	r2, r3
 800247a:	2364      	movs	r3, #100	; 0x64
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4804      	ldr	r0, [pc, #16]	; (8002490 <ConsoleIoSendString+0x28>)
 8002480:	f006 ff27 	bl	80092d2 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000614 	.word	0x20000614

08002494 <dodecaInit>:
#include <string.h>

dodecaItems_t * dodecaItems = 0x0;

eDodecaErr_t dodecaInit(dodecaItems_t * items)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	dodecaItems = items;
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <dodecaInit+0x1c>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6013      	str	r3, [r2, #0]
	return DODECA_ERR_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	20000478 	.word	0x20000478

080024b4 <dodecaGet>:

dodecaItem_t *dodecaGet(uint8_t id)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
	if (id > DODECA_COUNT_MAX )
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d901      	bls.n	80024c8 <dodecaGet+0x14>
	{
		return 0x0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e004      	b.n	80024d2 <dodecaGet+0x1e>
	}

	return &dodecaItems->items[id];
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <dodecaGet+0x2c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000478 	.word	0x20000478

080024e4 <dodecaInitItem>:

eDodecaErr_t dodecaInitItem(uint8_t id, uint16_t min, uint16_t max, uint8_t taskId)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4604      	mov	r4, r0
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4623      	mov	r3, r4
 80024f4:	71fb      	strb	r3, [r7, #7]
 80024f6:	4603      	mov	r3, r0
 80024f8:	80bb      	strh	r3, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]
 80024fe:	4613      	mov	r3, r2
 8002500:	71bb      	strb	r3, [r7, #6]
	dodecaItem_t *dodeca;
	dodeca = dodecaGet(id);
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ffd5 	bl	80024b4 <dodecaGet>
 800250a:	60f8      	str	r0, [r7, #12]
	if (!dodeca) return DODECA_ERR_INVALID_ID;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <dodecaInitItem+0x32>
 8002512:	2301      	movs	r3, #1
 8002514:	e00e      	b.n	8002534 <dodecaInitItem+0x50>

	dodeca->state = DODECA_STATE_STOPPED;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2203      	movs	r2, #3
 800251a:	605a      	str	r2, [r3, #4]
	dodeca->maxTimeMins = max;
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	709a      	strb	r2, [r3, #2]
	dodeca->minTimeMins = min;
 8002524:	88bb      	ldrh	r3, [r7, #4]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	705a      	strb	r2, [r3, #1]
	dodeca->taskId = taskId;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	79ba      	ldrb	r2, [r7, #6]
 8002530:	701a      	strb	r2, [r3, #0]
	return DODECA_ERR_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}

0800253c <dodecaGetStateName>:


eDodecaErr_t dodecaGetStateName(eDodecaState_t state,char* name)
{
 800253c:	b490      	push	{r4, r7}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]

	switch (state)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d016      	beq.n	800257a <dodecaGetStateName+0x3e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b03      	cmp	r3, #3
 8002550:	d824      	bhi.n	800259c <dodecaGetStateName+0x60>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d003      	beq.n	8002560 <dodecaGetStateName+0x24>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d015      	beq.n	800258a <dodecaGetStateName+0x4e>
 800255e:	e01d      	b.n	800259c <dodecaGetStateName+0x60>
	{
		case DODECA_STATE_NOT_CONFIGURED : strcpy(name,"Not Configured"); break;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4a16      	ldr	r2, [pc, #88]	; (80025bc <dodecaGetStateName+0x80>)
 8002564:	461c      	mov	r4, r3
 8002566:	4613      	mov	r3, r2
 8002568:	cb07      	ldmia	r3!, {r0, r1, r2}
 800256a:	6020      	str	r0, [r4, #0]
 800256c:	6061      	str	r1, [r4, #4]
 800256e:	60a2      	str	r2, [r4, #8]
 8002570:	881a      	ldrh	r2, [r3, #0]
 8002572:	789b      	ldrb	r3, [r3, #2]
 8002574:	81a2      	strh	r2, [r4, #12]
 8002576:	73a3      	strb	r3, [r4, #14]
 8002578:	e01a      	b.n	80025b0 <dodecaGetStateName+0x74>
		case DODECA_STATE_STOPPED : strcpy(name,"Stopped"); break;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	4910      	ldr	r1, [pc, #64]	; (80025c0 <dodecaGetStateName+0x84>)
 800257e:	461a      	mov	r2, r3
 8002580:	460b      	mov	r3, r1
 8002582:	cb03      	ldmia	r3!, {r0, r1}
 8002584:	6010      	str	r0, [r2, #0]
 8002586:	6051      	str	r1, [r2, #4]
 8002588:	e012      	b.n	80025b0 <dodecaGetStateName+0x74>
		case DODECA_STATE_ACTIVE : strcpy(name,"Active"); break;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <dodecaGetStateName+0x88>)
 800258e:	6810      	ldr	r0, [r2, #0]
 8002590:	6018      	str	r0, [r3, #0]
 8002592:	8891      	ldrh	r1, [r2, #4]
 8002594:	7992      	ldrb	r2, [r2, #6]
 8002596:	8099      	strh	r1, [r3, #4]
 8002598:	719a      	strb	r2, [r3, #6]
 800259a:	e009      	b.n	80025b0 <dodecaGetStateName+0x74>
		default: strcpy(name,"undefined"); break;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	490a      	ldr	r1, [pc, #40]	; (80025c8 <dodecaGetStateName+0x8c>)
 80025a0:	461a      	mov	r2, r3
 80025a2:	460b      	mov	r3, r1
 80025a4:	cb03      	ldmia	r3!, {r0, r1}
 80025a6:	6010      	str	r0, [r2, #0]
 80025a8:	6051      	str	r1, [r2, #4]
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	8113      	strh	r3, [r2, #8]
 80025ae:	bf00      	nop
	}

	return DODECA_ERR_OK;
 80025b0:	2300      	movs	r3, #0


}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc90      	pop	{r4, r7}
 80025ba:	4770      	bx	lr
 80025bc:	0800e800 	.word	0x0800e800
 80025c0:	0800e810 	.word	0x0800e810
 80025c4:	0800e818 	.word	0x0800e818
 80025c8:	0800e820 	.word	0x0800e820

080025cc <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a2e      	ldr	r2, [pc, #184]	; (8002694 <GetSector+0xc8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d806      	bhi.n	80025ee <GetSector+0x22>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e6:	d302      	bcc.n	80025ee <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e04b      	b.n	8002686 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a29      	ldr	r2, [pc, #164]	; (8002698 <GetSector+0xcc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d806      	bhi.n	8002604 <GetSector+0x38>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a28      	ldr	r2, [pc, #160]	; (800269c <GetSector+0xd0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d302      	bcc.n	8002604 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80025fe:	2301      	movs	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e040      	b.n	8002686 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a26      	ldr	r2, [pc, #152]	; (80026a0 <GetSector+0xd4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d806      	bhi.n	800261a <GetSector+0x4e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <GetSector+0xd8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d302      	bcc.n	800261a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8002614:	2302      	movs	r3, #2
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	e035      	b.n	8002686 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <GetSector+0xdc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d206      	bcs.n	8002630 <GetSector+0x64>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a21      	ldr	r2, [pc, #132]	; (80026ac <GetSector+0xe0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d302      	bcc.n	8002630 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800262a:	2303      	movs	r3, #3
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e02a      	b.n	8002686 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <GetSector+0xe4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d206      	bcs.n	8002646 <GetSector+0x7a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <GetSector+0xdc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d902      	bls.n	8002646 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8002640:	2304      	movs	r3, #4
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e01f      	b.n	8002686 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <GetSector+0xe8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d206      	bcs.n	800265c <GetSector+0x90>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <GetSector+0xe4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d902      	bls.n	800265c <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8002656:	2305      	movs	r3, #5
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e014      	b.n	8002686 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <GetSector+0xec>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d206      	bcs.n	8002672 <GetSector+0xa6>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <GetSector+0xe8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d902      	bls.n	8002672 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 800266c:	2306      	movs	r3, #6
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	e009      	b.n	8002686 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <GetSector+0xf0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d205      	bcs.n	8002686 <GetSector+0xba>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <GetSector+0xec>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 8002682:	2307      	movs	r3, #7
 8002684:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	08003ffe 	.word	0x08003ffe
 8002698:	08007ffe 	.word	0x08007ffe
 800269c:	08004000 	.word	0x08004000
 80026a0:	0800bffe 	.word	0x0800bffe
 80026a4:	08008000 	.word	0x08008000
 80026a8:	0800ffff 	.word	0x0800ffff
 80026ac:	0800c000 	.word	0x0800c000
 80026b0:	0801ffff 	.word	0x0801ffff
 80026b4:	0803ffff 	.word	0x0803ffff
 80026b8:	0805ffff 	.word	0x0805ffff
 80026bc:	0807ffff 	.word	0x0807ffff

080026c0 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, const uint16_t numberofwords)
{
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80026d2:	f002 ffd5 	bl	8005680 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff ff78 	bl	80025cc <GetSector>
 80026dc:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 80026ea:	69f8      	ldr	r0, [r7, #28]
 80026ec:	f7ff ff6e 	bl	80025cc <GetSector>
 80026f0:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <Flash_Write_Data+0xb8>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <Flash_Write_Data+0xb8>)
 80026fa:	2202      	movs	r2, #2
 80026fc:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80026fe:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <Flash_Write_Data+0xb8>)
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	3301      	adds	r3, #1
 800270c:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <Flash_Write_Data+0xb8>)
 800270e:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4619      	mov	r1, r3
 8002716:	4818      	ldr	r0, [pc, #96]	; (8002778 <Flash_Write_Data+0xb8>)
 8002718:	f003 f930 	bl	800597c <HAL_FLASHEx_Erase>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01f      	beq.n	8002762 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8002722:	f002 ffdf 	bl	80056e4 <HAL_FLASH_GetError>
 8002726:	4603      	mov	r3, r0
 8002728:	e022      	b.n	8002770 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2200      	movs	r2, #0
 8002736:	461c      	mov	r4, r3
 8002738:	4615      	mov	r5, r2
 800273a:	4622      	mov	r2, r4
 800273c:	462b      	mov	r3, r5
 800273e:	68f9      	ldr	r1, [r7, #12]
 8002740:	2002      	movs	r0, #2
 8002742:	f002 ff49 	bl	80055d8 <HAL_FLASH_Program>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3304      	adds	r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	3301      	adds	r3, #1
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
 8002758:	e003      	b.n	8002762 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800275a:	f002 ffc3 	bl	80056e4 <HAL_FLASH_GetError>
 800275e:	4603      	mov	r3, r0
 8002760:	e006      	b.n	8002770 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	429a      	cmp	r2, r3
 8002768:	dbdf      	blt.n	800272a <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800276a:	f002 ffab 	bl	80056c4 <HAL_FLASH_Lock>

	   return 0;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3728      	adds	r7, #40	; 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bdb0      	pop	{r4, r5, r7, pc}
 8002778:	2000047c 	.word	0x2000047c

0800277c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, const uint16_t numberofwords)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
	uint32_t sofar = numberofwords;
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	617b      	str	r3, [r7, #20]
	while (sofar)
 800278e:	e00c      	b.n	80027aa <Flash_Read_Data+0x2e>
	{
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3304      	adds	r3, #4
 800279c:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3304      	adds	r3, #4
 80027a2:	60bb      	str	r3, [r7, #8]
		sofar--;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
	while (sofar)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ef      	bne.n	8002790 <Flash_Read_Data+0x14>
	}
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <MPU6050_Init>:





uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80027be:	b580      	push	{r7, lr}
 80027c0:	b088      	sub	sp, #32
 80027c2:	af04      	add	r7, sp, #16
 80027c4:	6078      	str	r0, [r7, #4]

    // check device ID WHO_AM_I



    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80027c6:	2364      	movs	r3, #100	; 0x64
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	2301      	movs	r3, #1
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f107 030f 	add.w	r3, r7, #15
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2301      	movs	r3, #1
 80027d6:	2275      	movs	r2, #117	; 0x75
 80027d8:	21d0      	movs	r1, #208	; 0xd0
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f003 fdcc 	bl	8006378 <HAL_I2C_Mem_Read>

    if (check == 114)  // 0x68 will be returned by the sensor if everything goes well
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2b72      	cmp	r3, #114	; 0x72
 80027e4:	d13d      	bne.n	8002862 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80027ea:	2364      	movs	r3, #100	; 0x64
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	f107 030e 	add.w	r3, r7, #14
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	226b      	movs	r2, #107	; 0x6b
 80027fc:	21d0      	movs	r1, #208	; 0xd0
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f003 fcc0 	bl	8006184 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002804:	2307      	movs	r3, #7
 8002806:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002808:	2364      	movs	r3, #100	; 0x64
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	2301      	movs	r3, #1
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	f107 030e 	add.w	r3, r7, #14
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2301      	movs	r3, #1
 8002818:	2219      	movs	r2, #25
 800281a:	21d0      	movs	r1, #208	; 0xd0
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f003 fcb1 	bl	8006184 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002822:	2300      	movs	r3, #0
 8002824:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002826:	2364      	movs	r3, #100	; 0x64
 8002828:	9302      	str	r3, [sp, #8]
 800282a:	2301      	movs	r3, #1
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	f107 030e 	add.w	r3, r7, #14
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2301      	movs	r3, #1
 8002836:	221c      	movs	r2, #28
 8002838:	21d0      	movs	r1, #208	; 0xd0
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f003 fca2 	bl	8006184 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002840:	2300      	movs	r3, #0
 8002842:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002844:	2364      	movs	r3, #100	; 0x64
 8002846:	9302      	str	r3, [sp, #8]
 8002848:	2301      	movs	r3, #1
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	f107 030e 	add.w	r3, r7, #14
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	2301      	movs	r3, #1
 8002854:	221b      	movs	r2, #27
 8002856:	21d0      	movs	r1, #208	; 0xd0
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f003 fc93 	bl	8006184 <HAL_I2C_Mem_Write>
        return 0;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <MPU6050_Init+0xa6>
    }
    return 1;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	0000      	movs	r0, r0
	...

08002870 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af04      	add	r7, sp, #16
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 800287a:	2364      	movs	r3, #100	; 0x64
 800287c:	9302      	str	r3, [sp, #8]
 800287e:	2306      	movs	r3, #6
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2301      	movs	r3, #1
 800288a:	223b      	movs	r2, #59	; 0x3b
 800288c:	21d0      	movs	r1, #208	; 0xd0
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f003 fd72 	bl	8006378 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002894:	7a3b      	ldrb	r3, [r7, #8]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	b21a      	sxth	r2, r3
 800289a:	7a7b      	ldrb	r3, [r7, #9]
 800289c:	b21b      	sxth	r3, r3
 800289e:	4313      	orrs	r3, r2
 80028a0:	b21a      	sxth	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80028a6:	7abb      	ldrb	r3, [r7, #10]
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	b21a      	sxth	r2, r3
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	4313      	orrs	r3, r2
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80028b8:	7b3b      	ldrb	r3, [r7, #12]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	b21a      	sxth	r2, r3
 80028be:	7b7b      	ldrb	r3, [r7, #13]
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b21a      	sxth	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	809a      	strh	r2, [r3, #4]
   // DataStruct->Accel_X_RAW += CAL_X;
   // DataStruct->Accel_Y_RAW += CAL_Y;
  //  DataStruct->Accel_Z_RAW += CAL_Y;


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe3f 	bl	8000554 <__aeabi_i2d>
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <MPU6050_Read_Accel+0x140>)
 80028dc:	f7fd ffce 	bl	800087c <__aeabi_ddiv>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	6839      	ldr	r1, [r7, #0]
 80028e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fe2f 	bl	8000554 <__aeabi_i2d>
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <MPU6050_Read_Accel+0x140>)
 80028fc:	f7fd ffbe 	bl	800087c <__aeabi_ddiv>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fe1f 	bl	8000554 <__aeabi_i2d>
 8002916:	a322      	add	r3, pc, #136	; (adr r3, 80029a0 <MPU6050_Read_Accel+0x130>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	f7fd ffae 	bl	800087c <__aeabi_ddiv>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	6839      	ldr	r1, [r7, #0]
 8002926:	e9c1 2306 	strd	r2, r3, [r1, #24]


    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002930:	a31d      	add	r3, pc, #116	; (adr r3, 80029a8 <MPU6050_Read_Accel+0x138>)
 8002932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002936:	f7fe f8e9 	bl	8000b0c <__aeabi_dcmplt>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <MPU6050_Read_Accel+0xde>
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002954:	a314      	add	r3, pc, #80	; (adr r3, 80029a8 <MPU6050_Read_Accel+0x138>)
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	f7fe f8d7 	bl	8000b0c <__aeabi_dcmplt>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d006      	beq.n	8002972 <MPU6050_Read_Accel+0x102>
 8002964:	6839      	ldr	r1, [r7, #0]
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002978:	a30b      	add	r3, pc, #44	; (adr r3, 80029a8 <MPU6050_Read_Accel+0x138>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fe f8c5 	bl	8000b0c <__aeabi_dcmplt>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d100      	bne.n	800298a <MPU6050_Read_Accel+0x11a>


}
 8002988:	e006      	b.n	8002998 <MPU6050_Read_Accel+0x128>
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 800298a:	6839      	ldr	r1, [r7, #0]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	00000000 	.word	0x00000000
 80029a4:	40cc2900 	.word	0x40cc2900
 80029a8:	70a3d70a 	.word	0x70a3d70a
 80029ac:	3fb70a3d 	.word	0x3fb70a3d
 80029b0:	40d00000 	.word	0x40d00000

080029b4 <MPU6050ReadStable>:
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}


void MPU6050ReadStable(MPU6050_t *data)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	for (uint8_t cnt=0;cnt<20;cnt++)
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e006      	b.n	80029d0 <MPU6050ReadStable+0x1c>
		{
			MPU6050_Read_All(&I2C_MPU6050, data);
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4806      	ldr	r0, [pc, #24]	; (80029e0 <MPU6050ReadStable+0x2c>)
 80029c6:	f000 f80f 	bl	80029e8 <MPU6050_Read_All>
	for (uint8_t cnt=0;cnt<20;cnt++)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	3301      	adds	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b13      	cmp	r3, #19
 80029d4:	d9f5      	bls.n	80029c2 <MPU6050ReadStable+0xe>
		}
}
 80029d6:	bf00      	nop
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000049c 	.word	0x2000049c
 80029e4:	00000000 	.word	0x00000000

080029e8 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80029e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ec:	b094      	sub	sp, #80	; 0x50
 80029ee:	af04      	add	r7, sp, #16
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80029f4:	2364      	movs	r3, #100	; 0x64
 80029f6:	9302      	str	r3, [sp, #8]
 80029f8:	230e      	movs	r3, #14
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	f107 0308 	add.w	r3, r7, #8
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2301      	movs	r3, #1
 8002a04:	223b      	movs	r2, #59	; 0x3b
 8002a06:	21d0      	movs	r1, #208	; 0xd0
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f003 fcb5 	bl	8006378 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002a0e:	7a3b      	ldrb	r3, [r7, #8]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b21a      	sxth	r2, r3
 8002a14:	7a7b      	ldrb	r3, [r7, #9]
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002a20:	7abb      	ldrb	r3, [r7, #10]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	b21a      	sxth	r2, r3
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002a32:	7b3b      	ldrb	r3, [r7, #12]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	7b7b      	ldrb	r3, [r7, #13]
 8002a3a:	b21b      	sxth	r3, r3
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	b21a      	sxth	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002a44:	7bbb      	ldrb	r3, [r7, #14]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	b21a      	sxth	r2, r3
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	b21b      	sxth	r3, r3
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002a52:	7c3b      	ldrb	r3, [r7, #16]
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	7c7b      	ldrb	r3, [r7, #17]
 8002a5a:	b21b      	sxth	r3, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b21a      	sxth	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002a64:	7cbb      	ldrb	r3, [r7, #18]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	b21a      	sxth	r2, r3
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	b21b      	sxth	r3, r3
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	b21a      	sxth	r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002a76:	7d3b      	ldrb	r3, [r7, #20]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	b21a      	sxth	r2, r3
 8002a7c:	7d7b      	ldrb	r3, [r7, #21]
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	4313      	orrs	r3, r2
 8002a82:	b21a      	sxth	r2, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	849a      	strh	r2, [r3, #36]	; 0x24

    // Callibrate
	DataStruct->Accel_X_RAW += CAL_X;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	b21a      	sxth	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW += CAL_Y;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	b21a      	sxth	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW += CAL_Y;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	b21a      	sxth	r2, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	809a      	strh	r2, [r3, #4]


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd42 	bl	8000554 <__aeabi_i2d>
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	4bb6      	ldr	r3, [pc, #728]	; (8002db0 <MPU6050_Read_All+0x3c8>)
 8002ad6:	f7fd fed1 	bl	800087c <__aeabi_ddiv>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd32 	bl	8000554 <__aeabi_i2d>
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	4bae      	ldr	r3, [pc, #696]	; (8002db0 <MPU6050_Read_All+0x3c8>)
 8002af6:	f7fd fec1 	bl	800087c <__aeabi_ddiv>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fd22 	bl	8000554 <__aeabi_i2d>
 8002b10:	a39f      	add	r3, pc, #636	; (adr r3, 8002d90 <MPU6050_Read_All+0x3a8>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f7fd feb1 	bl	800087c <__aeabi_ddiv>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	e9c1 2306 	strd	r2, r3, [r1, #24]





    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b2a:	a39b      	add	r3, pc, #620	; (adr r3, 8002d98 <MPU6050_Read_All+0x3b0>)
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f7fd ffec 	bl	8000b0c <__aeabi_dcmplt>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <MPU6050_Read_All+0x160>
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b4e:	a392      	add	r3, pc, #584	; (adr r3, 8002d98 <MPU6050_Read_All+0x3b0>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd ffda 	bl	8000b0c <__aeabi_dcmplt>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <MPU6050_Read_All+0x184>
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002b72:	a389      	add	r3, pc, #548	; (adr r3, 8002d98 <MPU6050_Read_All+0x3b0>)
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f7fd ffc8 	bl	8000b0c <__aeabi_dcmplt>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d006      	beq.n	8002b90 <MPU6050_Read_All+0x1a8>
 8002b82:	6839      	ldr	r1, [r7, #0]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9c1 2306 	strd	r2, r3, [r1, #24]


    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002b90:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b9c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002db4 <MPU6050_Read_All+0x3cc>
 8002ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ba4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002db8 <MPU6050_Read_All+0x3d0>
 8002ba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fccb 	bl	8000554 <__aeabi_i2d>
 8002bbe:	a378      	add	r3, pc, #480	; (adr r3, 8002da0 <MPU6050_Read_All+0x3b8>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f7fd fe5a 	bl	800087c <__aeabi_ddiv>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	6839      	ldr	r1, [r7, #0]
 8002bce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fcbb 	bl	8000554 <__aeabi_i2d>
 8002bde:	a370      	add	r3, pc, #448	; (adr r3, 8002da0 <MPU6050_Read_All+0x3b8>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fe4a 	bl	800087c <__aeabi_ddiv>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fcab 	bl	8000554 <__aeabi_i2d>
 8002bfe:	a368      	add	r3, pc, #416	; (adr r3, 8002da0 <MPU6050_Read_All+0x3b8>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd fe3a 	bl	800087c <__aeabi_ddiv>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002c12:	f001 ff4f 	bl	8004ab4 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <MPU6050_Read_All+0x3d4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fc88 	bl	8000534 <__aeabi_ui2d>
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <MPU6050_Read_All+0x3d8>)
 8002c2a:	f7fd fe27 	bl	800087c <__aeabi_ddiv>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002c36:	f001 ff3d 	bl	8004ab4 <HAL_GetTick>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4a5f      	ldr	r2, [pc, #380]	; (8002dbc <MPU6050_Read_All+0x3d4>)
 8002c3e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c46:	461a      	mov	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c4e:	fb03 f202 	mul.w	r2, r3, r2
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fc74 	bl	8000554 <__aeabi_i2d>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	ec43 2b10 	vmov	d0, r2, r3
 8002c74:	f00b f913 	bl	800de9e <sqrt>
 8002c78:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c88:	f7fd ff36 	bl	8000af8 <__aeabi_dcmpeq>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11f      	bne.n	8002cd2 <MPU6050_Read_All+0x2ea>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fc5b 	bl	8000554 <__aeabi_i2d>
 8002c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ca2:	f7fd fdeb 	bl	800087c <__aeabi_ddiv>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	ec43 2b17 	vmov	d7, r2, r3
 8002cae:	eeb0 0a47 	vmov.f32	s0, s14
 8002cb2:	eef0 0a67 	vmov.f32	s1, s15
 8002cb6:	f00a ff47 	bl	800db48 <atan>
 8002cba:	ec51 0b10 	vmov	r0, r1, d0
 8002cbe:	a33a      	add	r3, pc, #232	; (adr r3, 8002da8 <MPU6050_Read_All+0x3c0>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f7fd fcb0 	bl	8000628 <__aeabi_dmul>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002cd0:	e005      	b.n	8002cde <MPU6050_Read_All+0x2f6>
    } else {
        roll = 0.0;
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce4:	425b      	negs	r3, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fc34 	bl	8000554 <__aeabi_i2d>
 8002cec:	4682      	mov	sl, r0
 8002cee:	468b      	mov	fp, r1
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc2c 	bl	8000554 <__aeabi_i2d>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	ec43 2b11 	vmov	d1, r2, r3
 8002d04:	ec4b ab10 	vmov	d0, sl, fp
 8002d08:	f00b f8c7 	bl	800de9a <atan2>
 8002d0c:	ec51 0b10 	vmov	r0, r1, d0
 8002d10:	a325      	add	r3, pc, #148	; (adr r3, 8002da8 <MPU6050_Read_All+0x3c0>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f7fd fc87 	bl	8000628 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <MPU6050_Read_All+0x3dc>)
 8002d28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d2c:	f7fd feee 	bl	8000b0c <__aeabi_dcmplt>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <MPU6050_Read_All+0x364>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <MPU6050_Read_All+0x3e0>)
 8002d42:	f7fd ff01 	bl	8000b48 <__aeabi_dcmpgt>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d114      	bne.n	8002d76 <MPU6050_Read_All+0x38e>
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <MPU6050_Read_All+0x3e0>)
 8002d52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d56:	f7fd fef7 	bl	8000b48 <__aeabi_dcmpgt>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d037      	beq.n	8002dd0 <MPU6050_Read_All+0x3e8>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <MPU6050_Read_All+0x3dc>)
 8002d6c:	f7fd fece 	bl	8000b0c <__aeabi_dcmplt>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d02c      	beq.n	8002dd0 <MPU6050_Read_All+0x3e8>
        KalmanY.angle = pitch;
 8002d76:	4915      	ldr	r1, [pc, #84]	; (8002dcc <MPU6050_Read_All+0x3e4>)
 8002d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d86:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002d8a:	e036      	b.n	8002dfa <MPU6050_Read_All+0x412>
 8002d8c:	f3af 8000 	nop.w
 8002d90:	00000000 	.word	0x00000000
 8002d94:	40cc2900 	.word	0x40cc2900
 8002d98:	70a3d70a 	.word	0x70a3d70a
 8002d9c:	3fb70a3d 	.word	0x3fb70a3d
 8002da0:	00000000 	.word	0x00000000
 8002da4:	40606000 	.word	0x40606000
 8002da8:	1a63c1f8 	.word	0x1a63c1f8
 8002dac:	404ca5dc 	.word	0x404ca5dc
 8002db0:	40d00000 	.word	0x40d00000
 8002db4:	43aa0000 	.word	0x43aa0000
 8002db8:	42121eb8 	.word	0x42121eb8
 8002dbc:	20000490 	.word	0x20000490
 8002dc0:	408f4000 	.word	0x408f4000
 8002dc4:	c0568000 	.word	0xc0568000
 8002dc8:	40568000 	.word	0x40568000
 8002dcc:	20000048 	.word	0x20000048
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002dd6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002dda:	eeb0 1a47 	vmov.f32	s2, s14
 8002dde:	eef0 1a67 	vmov.f32	s3, s15
 8002de2:	ed97 0b06 	vldr	d0, [r7, #24]
 8002de6:	481e      	ldr	r0, [pc, #120]	; (8002e60 <MPU6050_Read_All+0x478>)
 8002de8:	f000 f840 	bl	8002e6c <Kalman_getAngle>
 8002dec:	eeb0 7a40 	vmov.f32	s14, s0
 8002df0:	eef0 7a60 	vmov.f32	s15, s1
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002e00:	4690      	mov	r8, r2
 8002e02:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <MPU6050_Read_All+0x47c>)
 8002e0c:	4640      	mov	r0, r8
 8002e0e:	4649      	mov	r1, r9
 8002e10:	f7fd fe9a 	bl	8000b48 <__aeabi_dcmpgt>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <MPU6050_Read_All+0x444>
        DataStruct->Gx = -DataStruct->Gx;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e20:	4614      	mov	r4, r2
 8002e22:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002e32:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002e36:	eeb0 1a47 	vmov.f32	s2, s14
 8002e3a:	eef0 1a67 	vmov.f32	s3, s15
 8002e3e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002e42:	4809      	ldr	r0, [pc, #36]	; (8002e68 <MPU6050_Read_All+0x480>)
 8002e44:	f000 f812 	bl	8002e6c <Kalman_getAngle>
 8002e48:	eeb0 7a40 	vmov.f32	s14, s0
 8002e4c:	eef0 7a60 	vmov.f32	s15, s1
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8002e56:	bf00      	nop
 8002e58:	3740      	adds	r7, #64	; 0x40
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e60:	20000048 	.word	0x20000048
 8002e64:	40568000 	.word	0x40568000
 8002e68:	20000000 	.word	0x20000000

08002e6c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002e6c:	b5b0      	push	{r4, r5, r7, lr}
 8002e6e:	b096      	sub	sp, #88	; 0x58
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	61f8      	str	r0, [r7, #28]
 8002e74:	ed87 0b04 	vstr	d0, [r7, #16]
 8002e78:	ed87 1b02 	vstr	d1, [r7, #8]
 8002e7c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e8a:	f7fd fa15 	bl	80002b8 <__aeabi_dsub>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ea4:	f7fd fbc0 	bl	8000628 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4620      	mov	r0, r4
 8002eae:	4629      	mov	r1, r5
 8002eb0:	f7fd fa04 	bl	80002bc <__adddf3>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	69f9      	ldr	r1, [r7, #28]
 8002eba:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ece:	f7fd fbab 	bl	8000628 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ee0:	f7fd f9ea 	bl	80002b8 <__aeabi_dsub>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ef2:	f7fd f9e1 	bl	80002b8 <__aeabi_dsub>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd f9da 	bl	80002bc <__adddf3>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f14:	f7fd fb88 	bl	8000628 <__aeabi_dmul>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	4629      	mov	r1, r5
 8002f20:	f7fd f9cc 	bl	80002bc <__adddf3>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	69f9      	ldr	r1, [r7, #28]
 8002f2a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f3e:	f7fd fb73 	bl	8000628 <__aeabi_dmul>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4620      	mov	r0, r4
 8002f48:	4629      	mov	r1, r5
 8002f4a:	f7fd f9b5 	bl	80002b8 <__aeabi_dsub>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	69f9      	ldr	r1, [r7, #28]
 8002f54:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f68:	f7fd fb5e 	bl	8000628 <__aeabi_dmul>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4620      	mov	r0, r4
 8002f72:	4629      	mov	r1, r5
 8002f74:	f7fd f9a0 	bl	80002b8 <__aeabi_dsub>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	69f9      	ldr	r1, [r7, #28]
 8002f7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f92:	f7fd fb49 	bl	8000628 <__aeabi_dmul>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	f7fd f98d 	bl	80002bc <__adddf3>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	69f9      	ldr	r1, [r7, #28]
 8002fa8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fb8:	f7fd f980 	bl	80002bc <__adddf3>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002fca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fce:	f7fd fc55 	bl	800087c <__aeabi_ddiv>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fe4:	f7fd fc4a 	bl	800087c <__aeabi_ddiv>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ff6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ffa:	f7fd f95d 	bl	80002b8 <__aeabi_dsub>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800300c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003010:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003014:	f7fd fb08 	bl	8000628 <__aeabi_dmul>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4620      	mov	r0, r4
 800301e:	4629      	mov	r1, r5
 8003020:	f7fd f94c 	bl	80002bc <__adddf3>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	69f9      	ldr	r1, [r7, #28]
 800302a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003034:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003038:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800303c:	f7fd faf4 	bl	8000628 <__aeabi_dmul>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4620      	mov	r0, r4
 8003046:	4629      	mov	r1, r5
 8003048:	f7fd f938 	bl	80002bc <__adddf3>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	69f9      	ldr	r1, [r7, #28]
 8003052:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800305c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003066:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003070:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003078:	f7fd fad6 	bl	8000628 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4620      	mov	r0, r4
 8003082:	4629      	mov	r1, r5
 8003084:	f7fd f918 	bl	80002b8 <__aeabi_dsub>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	69f9      	ldr	r1, [r7, #28]
 800308e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003098:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800309c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030a0:	f7fd fac2 	bl	8000628 <__aeabi_dmul>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4620      	mov	r0, r4
 80030aa:	4629      	mov	r1, r5
 80030ac:	f7fd f904 	bl	80002b8 <__aeabi_dsub>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	69f9      	ldr	r1, [r7, #28]
 80030b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80030c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030c8:	f7fd faae 	bl	8000628 <__aeabi_dmul>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4620      	mov	r0, r4
 80030d2:	4629      	mov	r1, r5
 80030d4:	f7fd f8f0 	bl	80002b8 <__aeabi_dsub>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	69f9      	ldr	r1, [r7, #28]
 80030de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80030e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030f0:	f7fd fa9a 	bl	8000628 <__aeabi_dmul>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4620      	mov	r0, r4
 80030fa:	4629      	mov	r1, r5
 80030fc:	f7fd f8dc 	bl	80002b8 <__aeabi_dsub>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	69f9      	ldr	r1, [r7, #28]
 8003106:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003110:	ec43 2b17 	vmov	d7, r2, r3
};
 8003114:	eeb0 0a47 	vmov.f32	s0, s14
 8003118:	eef0 0a67 	vmov.f32	s1, s15
 800311c:	3758      	adds	r7, #88	; 0x58
 800311e:	46bd      	mov	sp, r7
 8003120:	bdb0      	pop	{r4, r5, r7, pc}

08003122 <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 800312e:	217f      	movs	r1, #127	; 0x7f
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f007 ff2a 	bl	800af8a <strchr>
 8003136:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8003138:	e029      	b.n	800318e <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b7f      	cmp	r3, #127	; 0x7f
 8003140:	d106      	bne.n	8003150 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3301      	adds	r3, #1
 8003146:	4619      	mov	r1, r3
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f007 ff2b 	bl	800afa4 <strcpy>
 800314e:	e019      	b.n	8003184 <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b7f      	cmp	r3, #127	; 0x7f
 8003156:	d109      	bne.n	800316c <manageBackSpace+0x4a>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3301      	adds	r3, #1
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3b01      	subs	r3, #1
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e00b      	b.n	8003184 <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b7f      	cmp	r3, #127	; 0x7f
 8003172:	d107      	bne.n	8003184 <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e5a      	subs	r2, r3, #1
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f007 ff10 	bl	800afa4 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 8003184:	217f      	movs	r1, #127	; 0x7f
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f007 feff 	bl	800af8a <strchr>
 800318c:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1d1      	bne.n	800313a <manageBackSpace+0x18>
		}
}
 8003196:	bf00      	nop
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 80031a8:	e00c      	b.n	80031c4 <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b2f      	cmp	r3, #47	; 0x2f
 80031b0:	d903      	bls.n	80031ba <isNumber+0x1a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b39      	cmp	r3, #57	; 0x39
 80031b8:	d901      	bls.n	80031be <isNumber+0x1e>
			return 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e007      	b.n	80031ce <isNumber+0x2e>
		string++;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3301      	adds	r3, #1
 80031c2:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ee      	bne.n	80031aa <isNumber+0xa>
	}
	return 1;
 80031cc:	2301      	movs	r3, #1
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <lc709203_getCellVoltage>:
 * @param: 16bit pointer to value
 * @return: Error Code
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getCellVoltage(uint16_t *voltage)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_VOLTAGE,voltage);
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	2009      	movs	r0, #9
 80031e6:	f000 f81f 	bl	8003228 <lc709203_getRegisterValue>
 80031ea:	4603      	mov	r3, r0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <lc709203_getCellTemp>:

eLC709203_Error_t lc709203_getCellTemp(uint16_t *voltage)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_TEMP,voltage);
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	2008      	movs	r0, #8
 8003200:	f000 f812 	bl	8003228 <lc709203_getRegisterValue>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <lc709203_getId>:

eLC709203_Error_t lc709203_getId(uint16_t *version)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_IC_VERSION,version);
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	2011      	movs	r0, #17
 800321a:	f000 f805 	bl	8003228 <lc709203_getRegisterValue>
 800321e:	4603      	mov	r3, r0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <lc709203_getRegisterValue>:
 * @param: value - a 16 bit pointer to the value to be used
 * @return: Error code foe the function
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getRegisterValue (uint8_t reg,uint16_t *value)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af04      	add	r7, sp, #16
 800322e:	4603      	mov	r3, r0
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c1, LC709302_ADRESS, reg, 1, (uint8_t*)value, 2, 100);
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	b29a      	uxth	r2, r3
 8003238:	2364      	movs	r3, #100	; 0x64
 800323a:	9302      	str	r3, [sp, #8]
 800323c:	2302      	movs	r3, #2
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2301      	movs	r3, #1
 8003246:	2116      	movs	r1, #22
 8003248:	4807      	ldr	r0, [pc, #28]	; (8003268 <lc709203_getRegisterValue+0x40>)
 800324a:	f003 f895 	bl	8006378 <HAL_I2C_Mem_Read>
 800324e:	4603      	mov	r3, r0
 8003250:	73fb      	strb	r3, [r7, #15]

	if (result != HAL_OK)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <lc709203_getRegisterValue+0x34>
	{
		return LC798_COMM_ERROR;
 8003258:	2302      	movs	r3, #2
 800325a:	e000      	b.n	800325e <lc709203_getRegisterValue+0x36>
	}
	else
		return LC798_OK;
 800325c:	2301      	movs	r3, #1

}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000049c 	.word	0x2000049c

0800326c <ledFindColour>:
		}
};


void ledFindColour(uint32_t code, char* name)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]

	for (uint8_t i = 0 ;i<PIXEL_RINGS;i++)
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
 800327a:	e014      	b.n	80032a6 <ledFindColour+0x3a>
	{
		if (code == ledColours.colour[i].code)
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <ledFindColour+0x58>)
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4413      	add	r3, r2
 8003284:	330c      	adds	r3, #12
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	429a      	cmp	r2, r3
 800328c:	d108      	bne.n	80032a0 <ledFindColour+0x34>
		{
			strcpy(name,ledColours.colour[i].name);
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <ledFindColour+0x58>)
 8003294:	4413      	add	r3, r2
 8003296:	4619      	mov	r1, r3
 8003298:	6838      	ldr	r0, [r7, #0]
 800329a:	f007 fe83 	bl	800afa4 <strcpy>
			return;
 800329e:	e00e      	b.n	80032be <ledFindColour+0x52>
	for (uint8_t i = 0 ;i<PIXEL_RINGS;i++)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	3301      	adds	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b0b      	cmp	r3, #11
 80032aa:	d9e7      	bls.n	800327c <ledFindColour+0x10>
		}
	}
	strcpy(name,(char*)"Undefined");
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4906      	ldr	r1, [pc, #24]	; (80032c8 <ledFindColour+0x5c>)
 80032b0:	461a      	mov	r2, r3
 80032b2:	460b      	mov	r3, r1
 80032b4:	cb03      	ldmia	r3!, {r0, r1}
 80032b6:	6010      	str	r0, [r2, #0]
 80032b8:	6051      	str	r1, [r2, #4]
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	8113      	strh	r3, [r2, #8]
}
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000090 	.word	0x20000090
 80032c8:	0800e82c 	.word	0x0800e82c

080032cc <ledAllOff>:


void ledAllOff()
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	71fb      	strb	r3, [r7, #7]
 80032d6:	e008      	b.n	80032ea <ledAllOff+0x1e>
	{
		led_set_RGB(i,0x0,0,0);
 80032d8:	79f8      	ldrb	r0, [r7, #7]
 80032da:	2300      	movs	r3, #0
 80032dc:	2200      	movs	r2, #0
 80032de:	2100      	movs	r1, #0
 80032e0:	f001 f89c 	bl	800441c <led_set_RGB>
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	3301      	adds	r3, #1
 80032e8:	71fb      	strb	r3, [r7, #7]
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	2b8f      	cmp	r3, #143	; 0x8f
 80032ee:	d9f3      	bls.n	80032d8 <ledAllOff+0xc>
	}

}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <ledRender>:

void ledRender()
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	af00      	add	r7, sp, #0
	led_render();
 80032fe:	f001 f8f5 	bl	80044ec <led_render>
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}

08003306 <ledSetFaceColour>:

void ledSetFaceColour(uint8_t face, uint8_t red, uint8_t green, uint8_t blue)
{
 8003306:	b590      	push	{r4, r7, lr}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	4604      	mov	r4, r0
 800330e:	4608      	mov	r0, r1
 8003310:	4611      	mov	r1, r2
 8003312:	461a      	mov	r2, r3
 8003314:	4623      	mov	r3, r4
 8003316:	71fb      	strb	r3, [r7, #7]
 8003318:	4603      	mov	r3, r0
 800331a:	71bb      	strb	r3, [r7, #6]
 800331c:	460b      	mov	r3, r1
 800331e:	717b      	strb	r3, [r7, #5]
 8003320:	4613      	mov	r3, r2
 8003322:	713b      	strb	r3, [r7, #4]
	uint8_t offset = face * 12;
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	461a      	mov	r2, r3
 8003328:	0052      	lsls	r2, r2, #1
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 8003330:	7bbb      	ldrb	r3, [r7, #14]
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	e008      	b.n	8003348 <ledSetFaceColour+0x42>
	{
		led_set_RGB(i,red,green,blue);
 8003336:	793b      	ldrb	r3, [r7, #4]
 8003338:	797a      	ldrb	r2, [r7, #5]
 800333a:	79b9      	ldrb	r1, [r7, #6]
 800333c:	7bf8      	ldrb	r0, [r7, #15]
 800333e:	f001 f86d 	bl	800441c <led_set_RGB>
	for (uint8_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	3301      	adds	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	7bbb      	ldrb	r3, [r7, #14]
 800334a:	f103 020b 	add.w	r2, r3, #11
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	429a      	cmp	r2, r3
 8003352:	daf0      	bge.n	8003336 <ledSetFaceColour+0x30>
	}

}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bd90      	pop	{r4, r7, pc}

0800335e <ledDance>:


void ledDance()
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
	int i=0;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
	while (i<10){
 8003368:	e040      	b.n	80033ec <ledDance+0x8e>
	 uint8_t angle = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	72fb      	strb	r3, [r7, #11]
	 const uint8_t angle_difference = 11;
 800336e:	230b      	movs	r3, #11
 8003370:	727b      	strb	r3, [r7, #9]
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8003372:	2300      	movs	r3, #0
 8003374:	72bb      	strb	r3, [r7, #10]
 8003376:	e02e      	b.n	80033d6 <ledDance+0x78>
		  // Calculate color
			 HAL_Delay(100);
 8003378:	2064      	movs	r0, #100	; 0x64
 800337a:	f001 fba7 	bl	8004acc <HAL_Delay>
			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 800337e:	7aba      	ldrb	r2, [r7, #10]
 8003380:	7a7b      	ldrb	r3, [r7, #9]
 8003382:	fb12 f303 	smulbb	r3, r2, r3
 8003386:	b2da      	uxtb	r2, r3
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	4413      	add	r3, r2
 800338c:	b2db      	uxtb	r3, r3
 800338e:	227f      	movs	r2, #127	; 0x7f
 8003390:	21ff      	movs	r1, #255	; 0xff
 8003392:	4618      	mov	r0, r3
 8003394:	f001 fa62 	bl	800485c <hsl_to_rgb>
 8003398:	6078      	str	r0, [r7, #4]
			// Set color
			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	b2d9      	uxtb	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	7ab8      	ldrb	r0, [r7, #10]
 80033ac:	f001 f836 	bl	800441c <led_set_RGB>
			if (i>1)
 80033b0:	7abb      	ldrb	r3, [r7, #10]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d907      	bls.n	80033c6 <ledDance+0x68>
				led_set_RGB(i-1, 0,0,0);
 80033b6:	7abb      	ldrb	r3, [r7, #10]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b2d8      	uxtb	r0, r3
 80033bc:	2300      	movs	r3, #0
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	f001 f82b 	bl	800441c <led_set_RGB>
			++angle;
 80033c6:	7afb      	ldrb	r3, [r7, #11]
 80033c8:	3301      	adds	r3, #1
 80033ca:	72fb      	strb	r3, [r7, #11]
			led_render();
 80033cc:	f001 f88e 	bl	80044ec <led_render>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 80033d0:	7abb      	ldrb	r3, [r7, #10]
 80033d2:	3301      	adds	r3, #1
 80033d4:	72bb      	strb	r3, [r7, #10]
 80033d6:	7abb      	ldrb	r3, [r7, #10]
 80033d8:	2b8f      	cmp	r3, #143	; 0x8f
 80033da:	d9cd      	bls.n	8003378 <ledDance+0x1a>

		}
	  HAL_Delay(10);
 80033dc:	200a      	movs	r0, #10
 80033de:	f001 fb75 	bl	8004acc <HAL_Delay>
		// Write to LED
	  ledAllOff();
 80033e2:	f7ff ff73 	bl	80032cc <ledAllOff>
	  i++;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3301      	adds	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
	while (i<10){
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b09      	cmp	r3, #9
 80033f0:	ddbb      	ble.n	800336a <ledDance+0xc>
	}
}
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <detectFace>:

};


int8_t detectFace(double x, double y)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	ed87 0b02 	vstr	d0, [r7, #8]
 8003406:	ed87 1b00 	vstr	d1, [r7]
	uint8_t face;
	for (face=0; face<FACE_COUNT; face++)
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]
 800340e:	e05d      	b.n	80034cc <detectFace+0xd0>
	{
		if ( x > faceTable[face].xRTop && x < faceTable[face].xRBottom && y > faceTable[face].yRTop && y < faceTable[face].yRBottom )
 8003410:	7dfa      	ldrb	r2, [r7, #23]
 8003412:	4933      	ldr	r1, [pc, #204]	; (80034e0 <detectFace+0xe4>)
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	440b      	add	r3, r1
 800341e:	3302      	adds	r3, #2
 8003420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd f895 	bl	8000554 <__aeabi_i2d>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003432:	f7fd fb89 	bl	8000b48 <__aeabi_dcmpgt>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d044      	beq.n	80034c6 <detectFace+0xca>
 800343c:	7dfa      	ldrb	r2, [r7, #23]
 800343e:	4928      	ldr	r1, [pc, #160]	; (80034e0 <detectFace+0xe4>)
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	440b      	add	r3, r1
 800344a:	3304      	adds	r3, #4
 800344c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f87f 	bl	8000554 <__aeabi_i2d>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800345e:	f7fd fb55 	bl	8000b0c <__aeabi_dcmplt>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02e      	beq.n	80034c6 <detectFace+0xca>
 8003468:	7dfa      	ldrb	r2, [r7, #23]
 800346a:	491d      	ldr	r1, [pc, #116]	; (80034e0 <detectFace+0xe4>)
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	440b      	add	r3, r1
 8003476:	3306      	adds	r3, #6
 8003478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd f869 	bl	8000554 <__aeabi_i2d>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	e9d7 0100 	ldrd	r0, r1, [r7]
 800348a:	f7fd fb5d 	bl	8000b48 <__aeabi_dcmpgt>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d018      	beq.n	80034c6 <detectFace+0xca>
 8003494:	7dfa      	ldrb	r2, [r7, #23]
 8003496:	4912      	ldr	r1, [pc, #72]	; (80034e0 <detectFace+0xe4>)
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	440b      	add	r3, r1
 80034a2:	3308      	adds	r3, #8
 80034a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd f853 	bl	8000554 <__aeabi_i2d>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034b6:	f7fd fb29 	bl	8000b0c <__aeabi_dcmplt>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <detectFace+0xca>
			return face;
 80034c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034c4:	e007      	b.n	80034d6 <detectFace+0xda>
	for (face=0; face<FACE_COUNT; face++)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	3301      	adds	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2b0b      	cmp	r3, #11
 80034d0:	d99e      	bls.n	8003410 <detectFace+0x14>
	}
	return -1;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000150 	.word	0x20000150

080034e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <MX_CRC_Init+0x20>)
 80034ea:	4a07      	ldr	r2, [pc, #28]	; (8003508 <MX_CRC_Init+0x24>)
 80034ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80034ee:	4805      	ldr	r0, [pc, #20]	; (8003504 <MX_CRC_Init+0x20>)
 80034f0:	f001 fc21 	bl	8004d36 <HAL_CRC_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80034fa:	f000 fa87 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000494 	.word	0x20000494
 8003508:	40023000 	.word	0x40023000

0800350c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <HAL_CRC_MspInit+0x3c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10d      	bne.n	800353a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_CRC_MspInit+0x40>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <HAL_CRC_MspInit+0x40>)
 8003528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800352c:	6313      	str	r3, [r2, #48]	; 0x30
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <HAL_CRC_MspInit+0x40>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40023000 	.word	0x40023000
 800354c:	40023800 	.word	0x40023800

08003550 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <MX_DMA_Init+0x3c>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	4a0b      	ldr	r2, [pc, #44]	; (800358c <MX_DMA_Init+0x3c>)
 8003560:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003564:	6313      	str	r3, [r2, #48]	; 0x30
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <MX_DMA_Init+0x3c>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003572:	2200      	movs	r2, #0
 8003574:	2100      	movs	r1, #0
 8003576:	2039      	movs	r0, #57	; 0x39
 8003578:	f001 fba7 	bl	8004cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800357c:	2039      	movs	r0, #57	; 0x39
 800357e:	f001 fbc0 	bl	8004d02 <HAL_NVIC_EnableIRQ>

}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003596:	f107 0314 	add.w	r3, r7, #20
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	60da      	str	r2, [r3, #12]
 80035a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	4b38      	ldr	r3, [pc, #224]	; (800368c <MX_GPIO_Init+0xfc>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a37      	ldr	r2, [pc, #220]	; (800368c <MX_GPIO_Init+0xfc>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b35      	ldr	r3, [pc, #212]	; (800368c <MX_GPIO_Init+0xfc>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b31      	ldr	r3, [pc, #196]	; (800368c <MX_GPIO_Init+0xfc>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a30      	ldr	r2, [pc, #192]	; (800368c <MX_GPIO_Init+0xfc>)
 80035cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b2e      	ldr	r3, [pc, #184]	; (800368c <MX_GPIO_Init+0xfc>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b2a      	ldr	r3, [pc, #168]	; (800368c <MX_GPIO_Init+0xfc>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a29      	ldr	r2, [pc, #164]	; (800368c <MX_GPIO_Init+0xfc>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b27      	ldr	r3, [pc, #156]	; (800368c <MX_GPIO_Init+0xfc>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <MX_GPIO_Init+0xfc>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <MX_GPIO_Init+0xfc>)
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <MX_GPIO_Init+0xfc>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003616:	2200      	movs	r2, #0
 8003618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800361c:	481c      	ldr	r0, [pc, #112]	; (8003690 <MX_GPIO_Init+0x100>)
 800361e:	f002 fc53 	bl	8005ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, GPIO_PIN_RESET);
 8003622:	2200      	movs	r2, #0
 8003624:	2110      	movs	r1, #16
 8003626:	481b      	ldr	r0, [pc, #108]	; (8003694 <MX_GPIO_Init+0x104>)
 8003628:	f002 fc4e 	bl	8005ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800362c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003632:	2301      	movs	r3, #1
 8003634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800363e:	f107 0314 	add.w	r3, r7, #20
 8003642:	4619      	mov	r1, r3
 8003644:	4812      	ldr	r0, [pc, #72]	; (8003690 <MX_GPIO_Init+0x100>)
 8003646:	f002 fabb 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_MEM_CS_Pin;
 800364a:	2310      	movs	r3, #16
 800364c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800364e:	2301      	movs	r3, #1
 8003650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_MEM_CS_GPIO_Port, &GPIO_InitStruct);
 800365a:	f107 0314 	add.w	r3, r7, #20
 800365e:	4619      	mov	r1, r3
 8003660:	480c      	ldr	r0, [pc, #48]	; (8003694 <MX_GPIO_Init+0x104>)
 8003662:	f002 faad 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8003666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800366a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800366c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8003676:	f107 0314 	add.w	r3, r7, #20
 800367a:	4619      	mov	r1, r3
 800367c:	4806      	ldr	r0, [pc, #24]	; (8003698 <MX_GPIO_Init+0x108>)
 800367e:	f002 fa9f 	bl	8005bc0 <HAL_GPIO_Init>

}
 8003682:	bf00      	nop
 8003684:	3728      	adds	r7, #40	; 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	40020800 	.word	0x40020800
 8003694:	40020000 	.word	0x40020000
 8003698:	40020400 	.word	0x40020400

0800369c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036a0:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <MX_I2C1_Init+0x54>)
 80036a2:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <MX_I2C1_Init+0x58>)
 80036a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <MX_I2C1_Init+0x54>)
 80036a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80036ac:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <MX_I2C1_Init+0x54>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <MX_I2C1_Init+0x54>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <MX_I2C1_Init+0x54>)
 80036bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <MX_I2C1_Init+0x54>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <MX_I2C1_Init+0x54>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <MX_I2C1_Init+0x54>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <MX_I2C1_Init+0x54>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036da:	4805      	ldr	r0, [pc, #20]	; (80036f0 <MX_I2C1_Init+0x54>)
 80036dc:	f002 fc0e 	bl	8005efc <HAL_I2C_Init>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80036e6:	f000 f991 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2000049c 	.word	0x2000049c
 80036f4:	40005400 	.word	0x40005400

080036f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a19      	ldr	r2, [pc, #100]	; (800377c <HAL_I2C_MspInit+0x84>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d12b      	bne.n	8003772 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <HAL_I2C_MspInit+0x88>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_I2C_MspInit+0x88>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_I2C_MspInit+0x88>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003736:	23c0      	movs	r3, #192	; 0xc0
 8003738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800373a:	2312      	movs	r3, #18
 800373c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003742:	2303      	movs	r3, #3
 8003744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003746:	2304      	movs	r3, #4
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374a:	f107 0314 	add.w	r3, r7, #20
 800374e:	4619      	mov	r1, r3
 8003750:	480c      	ldr	r0, [pc, #48]	; (8003784 <HAL_I2C_MspInit+0x8c>)
 8003752:	f002 fa35 	bl	8005bc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_I2C_MspInit+0x88>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a08      	ldr	r2, [pc, #32]	; (8003780 <HAL_I2C_MspInit+0x88>)
 8003760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_I2C_MspInit+0x88>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003772:	bf00      	nop
 8003774:	3728      	adds	r7, #40	; 0x28
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40005400 	.word	0x40005400
 8003780:	40023800 	.word	0x40023800
 8003784:	40020400 	.word	0x40020400

08003788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b0a7      	sub	sp, #156	; 0x9c
 800378c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800378e:	f001 f92b 	bl	80049e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003792:	f000 f8d1 	bl	8003938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003796:	f7ff fefb 	bl	8003590 <MX_GPIO_Init>
  MX_RTC_Init();
 800379a:	f000 f93d 	bl	8003a18 <MX_RTC_Init>
  MX_DMA_Init();
 800379e:	f7ff fed7 	bl	8003550 <MX_DMA_Init>
  MX_I2C1_Init();
 80037a2:	f7ff ff7b 	bl	800369c <MX_I2C1_Init>
  MX_TIM1_Init();
 80037a6:	f000 fb45 	bl	8003e34 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80037aa:	f000 fc71 	bl	8004090 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80037ae:	f000 f985 	bl	8003abc <MX_SPI1_Init>
  MX_CRC_Init();
 80037b2:	f7ff fe97 	bl	80034e4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  ledAllOff();
 80037b6:	f7ff fd89 	bl	80032cc <ledAllOff>
  sysConfigInit();
 80037ba:	f000 fd0d 	bl	80041d8 <sysConfigInit>
  systemConfig_t * config = systemConfigGet();
 80037be:	f000 fd27 	bl	8004210 <systemConfigGet>
 80037c2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  taskItems_t * taskItems = &config->configItems.tasksConfig;
 80037c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  dodecaItems_t *dodecaItems = &config->configItems.dodecaConfig;
 80037ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037d2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80037d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  taskInit(taskItems);
 80037da:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80037de:	f000 fd87 	bl	80042f0 <taskInit>
  dodecaInit(dodecaItems);
 80037e2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80037e6:	f7fe fe55 	bl	8002494 <dodecaInit>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
*/
  if (SYS_CONFIG_BAD_DATA == sysConfigRead())
 80037ea:	f000 fd49 	bl	8004280 <sysConfigRead>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d103      	bne.n	80037fc <main+0x74>
  {
	  taskSetDefaultAll();
 80037f4:	f000 fd9d 	bl	8004332 <taskSetDefaultAll>
	  sysConfigSave();
 80037f8:	f000 fd5c 	bl	80042b4 <sysConfigSave>





  ConsoleInit();
 80037fc:	f7fd fcc8 	bl	8001190 <ConsoleInit>
  ConsoleSendString("Console Initialised\n");
 8003800:	4847      	ldr	r0, [pc, #284]	; (8003920 <main+0x198>)
 8003802:	f7fd fe5e 	bl	80014c2 <ConsoleSendString>
  HAL_Delay(100);
 8003806:	2064      	movs	r0, #100	; 0x64
 8003808:	f001 f960 	bl	8004acc <HAL_Delay>
  if (MPU6050_Init(&hi2c1) == 1)
 800380c:	4845      	ldr	r0, [pc, #276]	; (8003924 <main+0x19c>)
 800380e:	f7fe ffd6 	bl	80027be <MPU6050_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b01      	cmp	r3, #1
 8003816:	d103      	bne.n	8003820 <main+0x98>
  {
	  ConsoleSendString("** ERROR Initialising MNP6050!\n");
 8003818:	4843      	ldr	r0, [pc, #268]	; (8003928 <main+0x1a0>)
 800381a:	f7fd fe52 	bl	80014c2 <ConsoleSendString>
 800381e:	e002      	b.n	8003826 <main+0x9e>
  }
  else
  {
	  ConsoleSendString("MPU6050 Initialised\n");
 8003820:	4842      	ldr	r0, [pc, #264]	; (800392c <main+0x1a4>)
 8003822:	f7fd fe4e 	bl	80014c2 <ConsoleSendString>
  }
  ConsolePrintPrompt();
 8003826:	f7fd fcdd 	bl	80011e4 <ConsolePrintPrompt>
  uint8_t lastFace = 255;
 800382a:	23ff      	movs	r3, #255	; 0xff
 800382c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 8003830:	f7fd fce6 	bl	8001200 <ConsoleProcess>

	  MPU6050_t data;
	uint8_t face;
	char msg[30];
	for (uint8_t cnt=0;cnt<20;cnt++)
 8003834:	2300      	movs	r3, #0
 8003836:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800383a:	e009      	b.n	8003850 <main+0xc8>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 800383c:	463b      	mov	r3, r7
 800383e:	4619      	mov	r1, r3
 8003840:	4838      	ldr	r0, [pc, #224]	; (8003924 <main+0x19c>)
 8003842:	f7ff f8d1 	bl	80029e8 <MPU6050_Read_All>
	for (uint8_t cnt=0;cnt<20;cnt++)
 8003846:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800384a:	3301      	adds	r3, #1
 800384c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8003850:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003854:	2b13      	cmp	r3, #19
 8003856:	d9f1      	bls.n	800383c <main+0xb4>
	}

	face = detectFace(data.KalmanAngleX, data.KalmanAngleY);
 8003858:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800385c:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8003860:	eeb0 1a46 	vmov.f32	s2, s12
 8003864:	eef0 1a66 	vmov.f32	s3, s13
 8003868:	eeb0 0a47 	vmov.f32	s0, s14
 800386c:	eef0 0a67 	vmov.f32	s1, s15
 8003870:	f7ff fdc4 	bl	80033fc <detectFace>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (255 == face)
 800387a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800387e:	2bff      	cmp	r3, #255	; 0xff
 8003880:	d102      	bne.n	8003888 <main+0x100>
	{
		ledAllOff();
 8003882:	f7ff fd23 	bl	80032cc <ledAllOff>
 8003886:	e046      	b.n	8003916 <main+0x18e>
	}

	else if (face != lastFace)
 8003888:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800388c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003890:	429a      	cmp	r2, r3
 8003892:	d040      	beq.n	8003916 <main+0x18e>
	{
		lastFace = face;
 8003894:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003898:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		sprintf(msg,"Angle X: %f Y: %f",data.KalmanAngleX, data.KalmanAngleY);
 800389c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80038a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038a4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80038a8:	e9cd 2300 	strd	r2, r3, [sp]
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	491f      	ldr	r1, [pc, #124]	; (8003930 <main+0x1a8>)
 80038b2:	4620      	mov	r0, r4
 80038b4:	f007 fad8 	bl	800ae68 <siprintf>
		ConsoleSendLine(msg);
 80038b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fd fe0d 	bl	80014dc <ConsoleSendLine>

		uint32_t rgb_color = hsl_to_rgb((face*30), 255, 127);
 80038c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038c6:	461a      	mov	r2, r3
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	227f      	movs	r2, #127	; 0x7f
 80038d2:	21ff      	movs	r1, #255	; 0xff
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 ffc1 	bl	800485c <hsl_to_rgb>
 80038da:	67b8      	str	r0, [r7, #120]	; 0x78

		ledAllOff();
 80038dc:	f7ff fcf6 	bl	80032cc <ledAllOff>
		ledSetFaceColour(face, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 80038e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	b2d9      	uxtb	r1, r3
 80038e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f897 007f 	ldrb.w	r0, [r7, #127]	; 0x7f
 80038f4:	f7ff fd07 	bl	8003306 <ledSetFaceColour>
		ledRender();
 80038f8:	f7ff fcff 	bl	80032fa <ledRender>

		sprintf(msg,"Detected face %i is up",face);
 80038fc:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8003900:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003904:	490b      	ldr	r1, [pc, #44]	; (8003934 <main+0x1ac>)
 8003906:	4618      	mov	r0, r3
 8003908:	f007 faae 	bl	800ae68 <siprintf>
		ConsoleSendLine(msg);
 800390c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd fde3 	bl	80014dc <ConsoleSendLine>
	}
	 HAL_Delay(200);
 8003916:	20c8      	movs	r0, #200	; 0xc8
 8003918:	f001 f8d8 	bl	8004acc <HAL_Delay>
  {
 800391c:	e788      	b.n	8003830 <main+0xa8>
 800391e:	bf00      	nop
 8003920:	0800e838 	.word	0x0800e838
 8003924:	2000049c 	.word	0x2000049c
 8003928:	0800e850 	.word	0x0800e850
 800392c:	0800e870 	.word	0x0800e870
 8003930:	0800e888 	.word	0x0800e888
 8003934:	0800e89c 	.word	0x0800e89c

08003938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b094      	sub	sp, #80	; 0x50
 800393c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800393e:	f107 0320 	add.w	r3, r7, #32
 8003942:	2230      	movs	r2, #48	; 0x30
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f006 fd2c 	bl	800a3a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800394c:	f107 030c 	add.w	r3, r7, #12
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	2300      	movs	r3, #0
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <SystemClock_Config+0xcc>)
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	4a27      	ldr	r2, [pc, #156]	; (8003a04 <SystemClock_Config+0xcc>)
 8003966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396a:	6413      	str	r3, [r2, #64]	; 0x40
 800396c:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <SystemClock_Config+0xcc>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003978:	2300      	movs	r3, #0
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <SystemClock_Config+0xd0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <SystemClock_Config+0xd0>)
 8003982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b1f      	ldr	r3, [pc, #124]	; (8003a08 <SystemClock_Config+0xd0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003994:	2305      	movs	r3, #5
 8003996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800399e:	2301      	movs	r3, #1
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039a2:	2302      	movs	r3, #2
 80039a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80039ac:	230c      	movs	r3, #12
 80039ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80039b0:	2360      	movs	r3, #96	; 0x60
 80039b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039b4:	2302      	movs	r3, #2
 80039b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039b8:	2304      	movs	r3, #4
 80039ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039bc:	f107 0320 	add.w	r3, r7, #32
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fa5b 	bl	8006e7c <HAL_RCC_OscConfig>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80039cc:	f000 f81e 	bl	8003a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039d0:	230f      	movs	r3, #15
 80039d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039d4:	2302      	movs	r3, #2
 80039d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80039e6:	f107 030c 	add.w	r3, r7, #12
 80039ea:	2103      	movs	r1, #3
 80039ec:	4618      	mov	r0, r3
 80039ee:	f003 fcbd 	bl	800736c <HAL_RCC_ClockConfig>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80039f8:	f000 f808 	bl	8003a0c <Error_Handler>
  }
}
 80039fc:	bf00      	nop
 80039fe:	3750      	adds	r7, #80	; 0x50
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40007000 	.word	0x40007000

08003a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a10:	b672      	cpsid	i
}
 8003a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a14:	e7fe      	b.n	8003a14 <Error_Handler+0x8>
	...

08003a18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a1e:	4a10      	ldr	r2, [pc, #64]	; (8003a60 <MX_RTC_Init+0x48>)
 8003a20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a22:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a2a:	227f      	movs	r2, #127	; 0x7f
 8003a2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a30:	22ff      	movs	r2, #255	; 0xff
 8003a32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a46:	4805      	ldr	r0, [pc, #20]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a48:	f003 ff60 	bl	800790c <HAL_RTC_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003a52:	f7ff ffdb 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200004f0 	.word	0x200004f0
 8003a60:	40002800 	.word	0x40002800

08003a64 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a6c:	f107 0308 	add.w	r3, r7, #8
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]
 8003a7c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a0c      	ldr	r2, [pc, #48]	; (8003ab4 <HAL_RTC_MspInit+0x50>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d111      	bne.n	8003aac <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a90:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a92:	f107 0308 	add.w	r3, r7, #8
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 fe48 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003aa2:	f7ff ffb3 	bl	8003a0c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003aa6:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <HAL_RTC_MspInit+0x54>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003aac:	bf00      	nop
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40002800 	.word	0x40002800
 8003ab8:	42470e3c 	.word	0x42470e3c

08003abc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003ac2:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <MX_SPI1_Init+0x68>)
 8003ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ad4:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003b08:	220a      	movs	r2, #10
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b0c:	4804      	ldr	r0, [pc, #16]	; (8003b20 <MX_SPI1_Init+0x64>)
 8003b0e:	f004 f9fb 	bl	8007f08 <HAL_SPI_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b18:	f7ff ff78 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b1c:	bf00      	nop
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20000510 	.word	0x20000510
 8003b24:	40013000 	.word	0x40013000

08003b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	; (8003bac <HAL_SPI_MspInit+0x84>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d12b      	bne.n	8003ba2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b58:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a10      	ldr	r2, [pc, #64]	; (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_MEM_SCK_Pin|SPI_MEM_MISO_Pin|SPI_MEM_MOSI_Pin;
 8003b82:	23e0      	movs	r3, #224	; 0xe0
 8003b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b86:	2302      	movs	r3, #2
 8003b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b92:	2305      	movs	r3, #5
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b96:	f107 0314 	add.w	r3, r7, #20
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <HAL_SPI_MspInit+0x8c>)
 8003b9e:	f002 f80f 	bl	8005bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	3728      	adds	r7, #40	; 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40013000 	.word	0x40013000
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020000 	.word	0x40020000

08003bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <HAL_MspInit+0x4c>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	4a0f      	ldr	r2, [pc, #60]	; (8003c04 <HAL_MspInit+0x4c>)
 8003bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bce:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <HAL_MspInit+0x4c>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	603b      	str	r3, [r7, #0]
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_MspInit+0x4c>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <HAL_MspInit+0x4c>)
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_MspInit+0x4c>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c0c:	e7fe      	b.n	8003c0c <NMI_Handler+0x4>

08003c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c12:	e7fe      	b.n	8003c12 <HardFault_Handler+0x4>

08003c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c18:	e7fe      	b.n	8003c18 <MemManage_Handler+0x4>

08003c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c1e:	e7fe      	b.n	8003c1e <BusFault_Handler+0x4>

08003c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c24:	e7fe      	b.n	8003c24 <UsageFault_Handler+0x4>

08003c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c54:	f000 ff1a 	bl	8004a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <USART1_IRQHandler+0x10>)
 8003c62:	f005 fbf9 	bl	8009458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000614 	.word	0x20000614

08003c70 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <DMA2_Stream1_IRQHandler+0x10>)
 8003c76:	f001 fa45 	bl	8005104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	200005b4 	.word	0x200005b4

08003c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
	return 1;
 8003c88:	2301      	movs	r3, #1
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <_kill>:

int _kill(int pid, int sig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c9e:	f006 fb47 	bl	800a330 <__errno>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2216      	movs	r2, #22
 8003ca6:	601a      	str	r2, [r3, #0]
	return -1;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_exit>:

void _exit (int status)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ffe7 	bl	8003c94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cc6:	e7fe      	b.n	8003cc6 <_exit+0x12>

08003cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e00a      	b.n	8003cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cda:	f3af 8000 	nop.w
 8003cde:	4601      	mov	r1, r0
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	60ba      	str	r2, [r7, #8]
 8003ce6:	b2ca      	uxtb	r2, r1
 8003ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	3301      	adds	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	dbf0      	blt.n	8003cda <_read+0x12>
	}

return len;
 8003cf8:	687b      	ldr	r3, [r7, #4]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e009      	b.n	8003d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	60ba      	str	r2, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	3301      	adds	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	dbf1      	blt.n	8003d14 <_write+0x12>
	}
	return len;
 8003d30:	687b      	ldr	r3, [r7, #4]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <_close>:

int _close(int file)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	return -1;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d62:	605a      	str	r2, [r3, #4]
	return 0;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_isatty>:

int _isatty(int file)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
	return 1;
 8003d7a:	2301      	movs	r3, #1
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
	return 0;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <_sbrk+0x5c>)
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <_sbrk+0x60>)
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <_sbrk+0x64>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <_sbrk+0x64>)
 8003dc2:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <_sbrk+0x68>)
 8003dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <_sbrk+0x64>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d207      	bcs.n	8003de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dd4:	f006 faac 	bl	800a330 <__errno>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	220c      	movs	r2, #12
 8003ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dde:	f04f 33ff 	mov.w	r3, #4294967295
 8003de2:	e009      	b.n	8003df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <_sbrk+0x64>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <_sbrk+0x64>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <_sbrk+0x64>)
 8003df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20020000 	.word	0x20020000
 8003e04:	00000400 	.word	0x00000400
 8003e08:	20000568 	.word	0x20000568
 8003e0c:	20000c30 	.word	0x20000c30

08003e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <SystemInit+0x20>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <SystemInit+0x20>)
 8003e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b096      	sub	sp, #88	; 0x58
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	611a      	str	r2, [r3, #16]
 8003e62:	615a      	str	r2, [r3, #20]
 8003e64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	2220      	movs	r2, #32
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f006 fa99 	bl	800a3a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e72:	4b3e      	ldr	r3, [pc, #248]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003e74:	4a3e      	ldr	r2, [pc, #248]	; (8003f70 <MX_TIM1_Init+0x13c>)
 8003e76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e78:	4b3c      	ldr	r3, [pc, #240]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 8003e84:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003e86:	227c      	movs	r2, #124	; 0x7c
 8003e88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e8a:	4b38      	ldr	r3, [pc, #224]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e90:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e96:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e9c:	4833      	ldr	r0, [pc, #204]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003e9e:	f004 f8bc 	bl	800801a <HAL_TIM_Base_Init>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003ea8:	f7ff fdb0 	bl	8003a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003eb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	482c      	ldr	r0, [pc, #176]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003eba:	f004 fc8f 	bl	80087dc <HAL_TIM_ConfigClockSource>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003ec4:	f7ff fda2 	bl	8003a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ec8:	4828      	ldr	r0, [pc, #160]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003eca:	f004 f8f5 	bl	80080b8 <HAL_TIM_PWM_Init>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003ed4:	f7ff fd9a 	bl	8003a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ee0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4821      	ldr	r0, [pc, #132]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003ee8:	f005 f8e6 	bl	80090b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003ef2:	f7ff fd8b 	bl	8003a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ef6:	2360      	movs	r3, #96	; 0x60
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003efe:	2300      	movs	r3, #0
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f02:	2300      	movs	r3, #0
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f16:	2200      	movs	r2, #0
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4814      	ldr	r0, [pc, #80]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003f1c:	f004 fb9c 	bl	8008658 <HAL_TIM_PWM_ConfigChannel>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003f26:	f7ff fd71 	bl	8003a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f48:	1d3b      	adds	r3, r7, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4807      	ldr	r0, [pc, #28]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003f4e:	f005 f921 	bl	8009194 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003f58:	f7ff fd58 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f5c:	4803      	ldr	r0, [pc, #12]	; (8003f6c <MX_TIM1_Init+0x138>)
 8003f5e:	f000 f85d 	bl	800401c <HAL_TIM_MspPostInit>

}
 8003f62:	bf00      	nop
 8003f64:	3758      	adds	r7, #88	; 0x58
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	2000056c 	.word	0x2000056c
 8003f70:	40010000 	.word	0x40010000

08003f74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a22      	ldr	r2, [pc, #136]	; (800400c <HAL_TIM_Base_MspInit+0x98>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d13e      	bne.n	8004004 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	4b21      	ldr	r3, [pc, #132]	; (8004010 <HAL_TIM_Base_MspInit+0x9c>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	4a20      	ldr	r2, [pc, #128]	; (8004010 <HAL_TIM_Base_MspInit+0x9c>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	6453      	str	r3, [r2, #68]	; 0x44
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <HAL_TIM_Base_MspInit+0x9c>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <HAL_TIM_Base_MspInit+0xa4>)
 8003fa6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003faa:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003fae:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fb0:	4b18      	ldr	r3, [pc, #96]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fb6:	4b17      	ldr	r3, [pc, #92]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fc4:	4b13      	ldr	r3, [pc, #76]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fca:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fd2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fda:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003fe8:	480a      	ldr	r0, [pc, #40]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003fea:	f000 fef3 	bl	8004dd4 <HAL_DMA_Init>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003ff4:	f7ff fd0a 	bl	8003a0c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a06      	ldr	r2, [pc, #24]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8003ffe:	4a05      	ldr	r2, [pc, #20]	; (8004014 <HAL_TIM_Base_MspInit+0xa0>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40010000 	.word	0x40010000
 8004010:	40023800 	.word	0x40023800
 8004014:	200005b4 	.word	0x200005b4
 8004018:	40026428 	.word	0x40026428

0800401c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004024:	f107 030c 	add.w	r3, r7, #12
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a12      	ldr	r2, [pc, #72]	; (8004084 <HAL_TIM_MspPostInit+0x68>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d11e      	bne.n	800407c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	4b11      	ldr	r3, [pc, #68]	; (8004088 <HAL_TIM_MspPostInit+0x6c>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	4a10      	ldr	r2, [pc, #64]	; (8004088 <HAL_TIM_MspPostInit+0x6c>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6313      	str	r3, [r2, #48]	; 0x30
 800404e:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HAL_TIM_MspPostInit+0x6c>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 800405a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800405e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004060:	2302      	movs	r3, #2
 8004062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800406c:	2301      	movs	r3, #1
 800406e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 8004070:	f107 030c 	add.w	r3, r7, #12
 8004074:	4619      	mov	r1, r3
 8004076:	4805      	ldr	r0, [pc, #20]	; (800408c <HAL_TIM_MspPostInit+0x70>)
 8004078:	f001 fda2 	bl	8005bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800407c:	bf00      	nop
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40010000 	.word	0x40010000
 8004088:	40023800 	.word	0x40023800
 800408c:	40020000 	.word	0x40020000

08004090 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <MX_USART1_UART_Init+0x4c>)
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <MX_USART1_UART_Init+0x50>)
 8004098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <MX_USART1_UART_Init+0x4c>)
 800409c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <MX_USART1_UART_Init+0x4c>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040a8:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <MX_USART1_UART_Init+0x4c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040ae:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <MX_USART1_UART_Init+0x4c>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <MX_USART1_UART_Init+0x4c>)
 80040b6:	220c      	movs	r2, #12
 80040b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <MX_USART1_UART_Init+0x4c>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <MX_USART1_UART_Init+0x4c>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80040c6:	4805      	ldr	r0, [pc, #20]	; (80040dc <MX_USART1_UART_Init+0x4c>)
 80040c8:	f005 f8b6 	bl	8009238 <HAL_UART_Init>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80040d2:	f7ff fc9b 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000614 	.word	0x20000614
 80040e0:	40011000 	.word	0x40011000

080040e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ec:	f107 0314 	add.w	r3, r7, #20
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <HAL_UART_MspInit+0x94>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d134      	bne.n	8004170 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	4b1c      	ldr	r3, [pc, #112]	; (800417c <HAL_UART_MspInit+0x98>)
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	4a1b      	ldr	r2, [pc, #108]	; (800417c <HAL_UART_MspInit+0x98>)
 8004110:	f043 0310 	orr.w	r3, r3, #16
 8004114:	6453      	str	r3, [r2, #68]	; 0x44
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_UART_MspInit+0x98>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <HAL_UART_MspInit+0x98>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	4a14      	ldr	r2, [pc, #80]	; (800417c <HAL_UART_MspInit+0x98>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	6313      	str	r3, [r2, #48]	; 0x30
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_UART_MspInit+0x98>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800413e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004144:	2302      	movs	r3, #2
 8004146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800414c:	2303      	movs	r3, #3
 800414e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004150:	2307      	movs	r3, #7
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004154:	f107 0314 	add.w	r3, r7, #20
 8004158:	4619      	mov	r1, r3
 800415a:	4809      	ldr	r0, [pc, #36]	; (8004180 <HAL_UART_MspInit+0x9c>)
 800415c:	f001 fd30 	bl	8005bc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004160:	2200      	movs	r2, #0
 8004162:	2100      	movs	r1, #0
 8004164:	2025      	movs	r0, #37	; 0x25
 8004166:	f000 fdb0 	bl	8004cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800416a:	2025      	movs	r0, #37	; 0x25
 800416c:	f000 fdc9 	bl	8004d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004170:	bf00      	nop
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40011000 	.word	0x40011000
 800417c:	40023800 	.word	0x40023800
 8004180:	40020000 	.word	0x40020000

08004184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004188:	480d      	ldr	r0, [pc, #52]	; (80041c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800418a:	490e      	ldr	r1, [pc, #56]	; (80041c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800418c:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800418e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004190:	e002      	b.n	8004198 <LoopCopyDataInit>

08004192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004196:	3304      	adds	r3, #4

08004198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800419a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800419c:	d3f9      	bcc.n	8004192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800419e:	4a0b      	ldr	r2, [pc, #44]	; (80041cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041a0:	4c0b      	ldr	r4, [pc, #44]	; (80041d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041a4:	e001      	b.n	80041aa <LoopFillZerobss>

080041a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041a8:	3204      	adds	r2, #4

080041aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041ac:	d3fb      	bcc.n	80041a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041ae:	f7ff fe2f 	bl	8003e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041b2:	f006 f8c3 	bl	800a33c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041b6:	f7ff fae7 	bl	8003788 <main>
  bx  lr    
 80041ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80041bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041c4:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 80041c8:	0800f280 	.word	0x0800f280
  ldr r2, =_sbss
 80041cc:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 80041d0:	20000c30 	.word	0x20000c30

080041d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041d4:	e7fe      	b.n	80041d4 <ADC_IRQHandler>
	...

080041d8 <sysConfigInit>:
static uint16_t SYS_CONFIG_SIZE_DODEC;



void sysConfigInit()
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
	SYS_CONFIG_SIZE = sizeof(systemConfig.configItems)/4;
 80041dc:	4b08      	ldr	r3, [pc, #32]	; (8004200 <sysConfigInit+0x28>)
 80041de:	22e0      	movs	r2, #224	; 0xe0
 80041e0:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_ALL_SIZE = sizeof(systemConfig)/4;
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <sysConfigInit+0x2c>)
 80041e4:	22e1      	movs	r2, #225	; 0xe1
 80041e6:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_SIZE_TASK = sizeof(systemConfig.configItems.tasksConfig);
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <sysConfigInit+0x30>)
 80041ea:	f44f 7248 	mov.w	r2, #800	; 0x320
 80041ee:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_SIZE_DODEC = sizeof(systemConfig.configItems.dodecaConfig);
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <sysConfigInit+0x34>)
 80041f2:	2260      	movs	r2, #96	; 0x60
 80041f4:	801a      	strh	r2, [r3, #0]
}
 80041f6:	bf00      	nop
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	200009dc 	.word	0x200009dc
 8004204:	200009de 	.word	0x200009de
 8004208:	200009e0 	.word	0x200009e0
 800420c:	200009e2 	.word	0x200009e2

08004210 <systemConfigGet>:

systemConfig_t *systemConfigGet()
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
	return &systemConfig;
 8004214:	4b02      	ldr	r3, [pc, #8]	; (8004220 <systemConfigGet+0x10>)
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	20000658 	.word	0x20000658

08004224 <sysConfigValidateConfig>:

static eSYSConfig_t sysConfigValidateConfig()
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 800422a:	f000 f813 	bl	8004254 <sysConfigCalcChecksum>
 800422e:	6078      	str	r0, [r7, #4]
	uint32_t crcRO = systemConfigRO->checksum;
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <sysConfigValidateConfig+0x2c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004238:	603b      	str	r3, [r7, #0]
	if (crc == crcRO)
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d101      	bne.n	8004246 <sysConfigValidateConfig+0x22>
		return SYS_CONFIG_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <sysConfigValidateConfig+0x24>
	else
		return SYS_CONFIG_BAD_CHECKSUM;
 8004246:	2301      	movs	r3, #1
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	200001cc 	.word	0x200001cc

08004254 <sysConfigCalcChecksum>:

uint32_t sysConfigCalcChecksum()
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
	uint32_t crc;
	crc =  HAL_CRC_Calculate(&hcrc,  (uint32_t*)&systemConfig.configItems, SYS_CONFIG_SIZE);
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <sysConfigCalcChecksum+0x20>)
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	4905      	ldr	r1, [pc, #20]	; (8004278 <sysConfigCalcChecksum+0x24>)
 8004262:	4806      	ldr	r0, [pc, #24]	; (800427c <sysConfigCalcChecksum+0x28>)
 8004264:	f000 fd83 	bl	8004d6e <HAL_CRC_Calculate>
 8004268:	6078      	str	r0, [r7, #4]
	return crc;
 800426a:	687b      	ldr	r3, [r7, #4]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	200009dc 	.word	0x200009dc
 8004278:	20000658 	.word	0x20000658
 800427c:	20000494 	.word	0x20000494

08004280 <sysConfigRead>:




eSYSConfig_t sysConfigRead()
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
	Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,SYS_CONFIG_ALL_SIZE );
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <sysConfigRead+0x28>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a08      	ldr	r2, [pc, #32]	; (80042ac <sysConfigRead+0x2c>)
 800428a:	8812      	ldrh	r2, [r2, #0]
 800428c:	4908      	ldr	r1, [pc, #32]	; (80042b0 <sysConfigRead+0x30>)
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fa74 	bl	800277c <Flash_Read_Data>
	//Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,5 );
	if (SYS_CONFIG_BAD_CHECKSUM == sysConfigValidateConfig())
 8004294:	f7ff ffc6 	bl	8004224 <sysConfigValidateConfig>
 8004298:	4603      	mov	r3, r0
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <sysConfigRead+0x22>
		return SYS_CONFIG_BAD_DATA;
 800429e:	2302      	movs	r3, #2
 80042a0:	e000      	b.n	80042a4 <sysConfigRead+0x24>
	else
		return TASK_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	0800edfc 	.word	0x0800edfc
 80042ac:	200009de 	.word	0x200009de
 80042b0:	20000658 	.word	0x20000658

080042b4 <sysConfigSave>:

void sysConfigSave()
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 80042ba:	f7ff ffcb 	bl	8004254 <sysConfigCalcChecksum>
 80042be:	6078      	str	r0, [r7, #4]
	systemConfig.checksum = crc;
 80042c0:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <sysConfigSave+0x30>)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8c2 3380 	str.w	r3, [r2, #896]	; 0x380
	uint32_t result;
	result = Flash_Write_Data(SYSTEM_CONFIG_ADDRESS, (uint32_t *)&systemConfig, SYS_CONFIG_ALL_SIZE);
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <sysConfigSave+0x34>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a07      	ldr	r2, [pc, #28]	; (80042ec <sysConfigSave+0x38>)
 80042ce:	8812      	ldrh	r2, [r2, #0]
 80042d0:	4904      	ldr	r1, [pc, #16]	; (80042e4 <sysConfigSave+0x30>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe f9f4 	bl	80026c0 <Flash_Write_Data>
 80042d8:	6038      	str	r0, [r7, #0]
	//TODO: Handle a Confug Save Error - Hard Fault!
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000658 	.word	0x20000658
 80042e8:	0800edfc 	.word	0x0800edfc
 80042ec:	200009de 	.word	0x200009de

080042f0 <taskInit>:
#include <string.h>

static taskItems_t * taskItemsPtr = 0x0;

eTaskError_t taskInit(taskItems_t *taskItems)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	taskItemsPtr = taskItems;
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <taskInit+0x1c>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6013      	str	r3, [r2, #0]
	return TASK_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	200009e4 	.word	0x200009e4

08004310 <taskValidateTaskId>:


eTaskError_t taskValidateTaskId(uint8_t id)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
	if (id > TASK_COUNT_MAX)
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	2b14      	cmp	r3, #20
 800431e:	d901      	bls.n	8004324 <taskValidateTaskId+0x14>
		return TASK_INVALID_ID;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <taskValidateTaskId+0x16>
	else
		return TASK_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <taskSetDefaultAll>:

eTaskError_t taskSetDefaultAll()
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
	for (uint8_t t=0;t<TASK_COUNT_MAX;t++)
 8004338:	2300      	movs	r3, #0
 800433a:	71fb      	strb	r3, [r7, #7]
 800433c:	e006      	b.n	800434c <taskSetDefaultAll+0x1a>
	{
		taskSetDefault(t);
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f80b 	bl	800435c <taskSetDefault>
	for (uint8_t t=0;t<TASK_COUNT_MAX;t++)
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	3301      	adds	r3, #1
 800434a:	71fb      	strb	r3, [r7, #7]
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	2b13      	cmp	r3, #19
 8004350:	d9f5      	bls.n	800433e <taskSetDefaultAll+0xc>
	}
	return TASK_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <taskSetDefault>:

eTaskError_t taskSetDefault(uint8_t id)
{
 800435c:	b5b0      	push	{r4, r5, r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
	if (TASK_INVALID_ID == taskValidateTaskId(id)) return TASK_INVALID_ID;
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ffd1 	bl	8004310 <taskValidateTaskId>
 800436e:	4603      	mov	r3, r0
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <taskSetDefault+0x1c>
 8004374:	2301      	movs	r3, #1
 8004376:	e01b      	b.n	80043b0 <taskSetDefault+0x54>

	taskItem_t *item = taskGet(id);
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f81e 	bl	80043bc <taskGet>
 8004380:	60f8      	str	r0, [r7, #12]


	item->id = id;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	79fa      	ldrb	r2, [r7, #7]
 8004386:	701a      	strb	r2, [r3, #0]
	item->colour = 0;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	621a      	str	r2, [r3, #32]
	item->defaultMinTime = TASK_DEFAULT_MIN_TIME;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	22aa      	movs	r2, #170	; 0xaa
 8004392:	849a      	strh	r2, [r3, #36]	; 0x24
	item->defaultMaxTime = TASK_DEFAULT_MAX_TIME;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	22bb      	movs	r2, #187	; 0xbb
 8004398:	84da      	strh	r2, [r3, #38]	; 0x26
	strcpy(item->name,TASK_DEFAULT_NAME);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3301      	adds	r3, #1
 800439e:	4a06      	ldr	r2, [pc, #24]	; (80043b8 <taskSetDefault+0x5c>)
 80043a0:	461c      	mov	r4, r3
 80043a2:	4615      	mov	r5, r2
 80043a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043a6:	6020      	str	r0, [r4, #0]
 80043a8:	6061      	str	r1, [r4, #4]
 80043aa:	60a2      	str	r2, [r4, #8]
 80043ac:	60e3      	str	r3, [r4, #12]

	return TASK_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bdb0      	pop	{r4, r5, r7, pc}
 80043b8:	0800e8b4 	.word	0x0800e8b4

080043bc <taskGet>:
	strcpy(item->name,name);
	return TASK_OK;
}

taskItem_t *  taskGet(uint8_t id )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]
	if (TASK_INVALID_ID == taskValidateTaskId(id))
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff ffa1 	bl	8004310 <taskValidateTaskId>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <taskGet+0x1c>
		return 0x0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	e007      	b.n	80043e8 <taskGet+0x2c>

	return  &taskItemsPtr->items[id];
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <taskGet+0x34>)
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	79fa      	ldrb	r2, [r7, #7]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	440b      	add	r3, r1


}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	200009e4 	.word	0x200009e4

080043f4 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	460a      	mov	r2, r1
 80043fe:	71fb      	strb	r3, [r7, #7]
 8004400:	4613      	mov	r3, r2
 8004402:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	79ba      	ldrb	r2, [r7, #6]
 8004408:	fb02 f303 	mul.w	r3, r2, r3
 800440c:	121b      	asrs	r3, r3, #8
 800440e:	b2db      	uxtb	r3, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4604      	mov	r4, r0
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	4623      	mov	r3, r4
 800442c:	71fb      	strb	r3, [r7, #7]
 800442e:	4603      	mov	r3, r0
 8004430:	71bb      	strb	r3, [r7, #6]
 8004432:	460b      	mov	r3, r1
 8004434:	717b      	strb	r3, [r7, #5]
 8004436:	4613      	mov	r3, r2
 8004438:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 800443a:	79bb      	ldrb	r3, [r7, #6]
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004444:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80044e4 <led_set_RGB+0xc8>
 8004448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800444c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004450:	edc7 7a00 	vstr	s15, [r7]
 8004454:	783b      	ldrb	r3, [r7, #0]
 8004456:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 8004458:	797b      	ldrb	r3, [r7, #5]
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004462:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80044e4 <led_set_RGB+0xc8>
 8004466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800446a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800446e:	edc7 7a00 	vstr	s15, [r7]
 8004472:	783b      	ldrb	r3, [r7, #0]
 8004474:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 8004476:	793b      	ldrb	r3, [r7, #4]
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004480:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80044e4 <led_set_RGB+0xc8>
 8004484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800448c:	edc7 7a00 	vstr	s15, [r7]
 8004490:	783b      	ldrb	r3, [r7, #0]
 8004492:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8004494:	79fa      	ldrb	r2, [r7, #7]
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	189c      	adds	r4, r3, r2
 800449c:	797b      	ldrb	r3, [r7, #5]
 800449e:	21b0      	movs	r1, #176	; 0xb0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ffa7 	bl	80043f4 <scale8>
 80044a6:	4603      	mov	r3, r0
 80044a8:	461a      	mov	r2, r3
 80044aa:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <led_set_RGB+0xcc>)
 80044ac:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 80044ae:	79fa      	ldrb	r2, [r7, #7]
 80044b0:	4613      	mov	r3, r2
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	4413      	add	r3, r2
 80044b6:	3301      	adds	r3, #1
 80044b8:	490b      	ldr	r1, [pc, #44]	; (80044e8 <led_set_RGB+0xcc>)
 80044ba:	79ba      	ldrb	r2, [r7, #6]
 80044bc:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 80044be:	79fa      	ldrb	r2, [r7, #7]
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	1c9c      	adds	r4, r3, #2
 80044c8:	793b      	ldrb	r3, [r7, #4]
 80044ca:	21f0      	movs	r1, #240	; 0xf0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff ff91 	bl	80043f4 <scale8>
 80044d2:	4603      	mov	r3, r0
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <led_set_RGB+0xcc>)
 80044d8:	551a      	strb	r2, [r3, r4]

}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd90      	pop	{r4, r7, pc}
 80044e2:	bf00      	nop
 80044e4:	3e99999a 	.word	0x3e99999a
 80044e8:	200009e8 	.word	0x200009e8

080044ec <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 80044f2:	4b50      	ldr	r3, [pc, #320]	; (8004634 <led_render+0x148>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <led_render+0x1a>
 80044fa:	4b4f      	ldr	r3, [pc, #316]	; (8004638 <led_render+0x14c>)
 80044fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b01      	cmp	r3, #1
 8004504:	d015      	beq.n	8004532 <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	71fb      	strb	r3, [r7, #7]
 800450a:	e007      	b.n	800451c <led_render+0x30>
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	4a4b      	ldr	r2, [pc, #300]	; (800463c <led_render+0x150>)
 8004510:	2100      	movs	r1, #0
 8004512:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	3301      	adds	r3, #1
 800451a:	71fb      	strb	r3, [r7, #7]
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	2b2f      	cmp	r3, #47	; 0x2f
 8004520:	d9f4      	bls.n	800450c <led_render+0x20>
    wr_buf_p = 0;
 8004522:	4b44      	ldr	r3, [pc, #272]	; (8004634 <led_render+0x148>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8004528:	2100      	movs	r1, #0
 800452a:	4845      	ldr	r0, [pc, #276]	; (8004640 <led_render+0x154>)
 800452c:	f003 ffce 	bl	80084cc <HAL_TIM_PWM_Stop_DMA>
    return;
 8004530:	e07c      	b.n	800462c <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8004532:	2300      	movs	r3, #0
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	e06d      	b.n	8004614 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8004538:	4b42      	ldr	r3, [pc, #264]	; (8004644 <led_render+0x158>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	2b00      	cmp	r3, #0
 800454a:	dd01      	ble.n	8004550 <led_render+0x64>
 800454c:	2150      	movs	r1, #80	; 0x50
 800454e:	e000      	b.n	8004552 <led_render+0x66>
 8004550:	2128      	movs	r1, #40	; 0x28
 8004552:	4a3a      	ldr	r2, [pc, #232]	; (800463c <led_render+0x150>)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800455a:	4b3a      	ldr	r3, [pc, #232]	; (8004644 <led_render+0x158>)
 800455c:	785b      	ldrb	r3, [r3, #1]
 800455e:	461a      	mov	r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b00      	cmp	r3, #0
 800456c:	dd01      	ble.n	8004572 <led_render+0x86>
 800456e:	2150      	movs	r1, #80	; 0x50
 8004570:	e000      	b.n	8004574 <led_render+0x88>
 8004572:	2128      	movs	r1, #40	; 0x28
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	3308      	adds	r3, #8
 8004578:	4a30      	ldr	r2, [pc, #192]	; (800463c <led_render+0x150>)
 800457a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 800457e:	4b31      	ldr	r3, [pc, #196]	; (8004644 <led_render+0x158>)
 8004580:	789b      	ldrb	r3, [r3, #2]
 8004582:	461a      	mov	r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	2b00      	cmp	r3, #0
 8004590:	dd01      	ble.n	8004596 <led_render+0xaa>
 8004592:	2150      	movs	r1, #80	; 0x50
 8004594:	e000      	b.n	8004598 <led_render+0xac>
 8004596:	2128      	movs	r1, #40	; 0x28
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	3310      	adds	r3, #16
 800459c:	4a27      	ldr	r2, [pc, #156]	; (800463c <led_render+0x150>)
 800459e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 80045a2:	4b28      	ldr	r3, [pc, #160]	; (8004644 <led_render+0x158>)
 80045a4:	78db      	ldrb	r3, [r3, #3]
 80045a6:	461a      	mov	r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	dd01      	ble.n	80045ba <led_render+0xce>
 80045b6:	2150      	movs	r1, #80	; 0x50
 80045b8:	e000      	b.n	80045bc <led_render+0xd0>
 80045ba:	2128      	movs	r1, #40	; 0x28
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	3318      	adds	r3, #24
 80045c0:	4a1e      	ldr	r2, [pc, #120]	; (800463c <led_render+0x150>)
 80045c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 80045c6:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <led_render+0x158>)
 80045c8:	791b      	ldrb	r3, [r3, #4]
 80045ca:	461a      	mov	r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dd01      	ble.n	80045de <led_render+0xf2>
 80045da:	2150      	movs	r1, #80	; 0x50
 80045dc:	e000      	b.n	80045e0 <led_render+0xf4>
 80045de:	2128      	movs	r1, #40	; 0x28
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	3320      	adds	r3, #32
 80045e4:	4a15      	ldr	r2, [pc, #84]	; (800463c <led_render+0x150>)
 80045e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <led_render+0x158>)
 80045ec:	795b      	ldrb	r3, [r3, #5]
 80045ee:	461a      	mov	r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	dd01      	ble.n	8004602 <led_render+0x116>
 80045fe:	2150      	movs	r1, #80	; 0x50
 8004600:	e000      	b.n	8004604 <led_render+0x118>
 8004602:	2128      	movs	r1, #40	; 0x28
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	3328      	adds	r3, #40	; 0x28
 8004608:	4a0c      	ldr	r2, [pc, #48]	; (800463c <led_render+0x150>)
 800460a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	3301      	adds	r3, #1
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b07      	cmp	r3, #7
 8004618:	d98e      	bls.n	8004538 <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 800461a:	2330      	movs	r3, #48	; 0x30
 800461c:	4a07      	ldr	r2, [pc, #28]	; (800463c <led_render+0x150>)
 800461e:	2100      	movs	r1, #0
 8004620:	4807      	ldr	r0, [pc, #28]	; (8004640 <led_render+0x154>)
 8004622:	f003 fda3 	bl	800816c <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8004626:	4b03      	ldr	r3, [pc, #12]	; (8004634 <led_render+0x148>)
 8004628:	2202      	movs	r2, #2
 800462a:	601a      	str	r2, [r3, #0]
}
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000bf8 	.word	0x20000bf8
 8004638:	200005b4 	.word	0x200005b4
 800463c:	20000b98 	.word	0x20000b98
 8004640:	2000056c 	.word	0x2000056c
 8004644:	200009e8 	.word	0x200009e8

08004648 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8004650:	4b3a      	ldr	r3, [pc, #232]	; (800473c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b8f      	cmp	r3, #143	; 0x8f
 8004656:	d854      	bhi.n	8004702 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	e048      	b.n	80046f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800465e:	4b37      	ldr	r3, [pc, #220]	; (800473c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	4a35      	ldr	r2, [pc, #212]	; (8004740 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800466a:	5cd3      	ldrb	r3, [r2, r3]
 800466c:	461a      	mov	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	dd01      	ble.n	8004680 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 800467c:	2150      	movs	r1, #80	; 0x50
 800467e:	e000      	b.n	8004682 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8004680:	2128      	movs	r1, #40	; 0x28
 8004682:	4a30      	ldr	r2, [pc, #192]	; (8004744 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800468a:	4b2c      	ldr	r3, [pc, #176]	; (800473c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	3301      	adds	r3, #1
 8004696:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8004698:	5cd3      	ldrb	r3, [r2, r3]
 800469a:	461a      	mov	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	dd01      	ble.n	80046ae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 80046aa:	2150      	movs	r1, #80	; 0x50
 80046ac:	e000      	b.n	80046b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 80046ae:	2128      	movs	r1, #40	; 0x28
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3308      	adds	r3, #8
 80046b4:	4a23      	ldr	r2, [pc, #140]	; (8004744 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80046b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80046ba:	4b20      	ldr	r3, [pc, #128]	; (800473c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4613      	mov	r3, r2
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	4413      	add	r3, r2
 80046c4:	3302      	adds	r3, #2
 80046c6:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80046c8:	5cd3      	ldrb	r3, [r2, r3]
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	dd01      	ble.n	80046de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 80046da:	2150      	movs	r1, #80	; 0x50
 80046dc:	e000      	b.n	80046e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 80046de:	2128      	movs	r1, #40	; 0x28
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3310      	adds	r3, #16
 80046e4:	4a17      	ldr	r2, [pc, #92]	; (8004744 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80046e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3301      	adds	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b07      	cmp	r3, #7
 80046f4:	d9b3      	bls.n	800465e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	4a0f      	ldr	r2, [pc, #60]	; (800473c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80046fe:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8004700:	e016      	b.n	8004730 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8004702:	4b0e      	ldr	r3, [pc, #56]	; (800473c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b91      	cmp	r3, #145	; 0x91
 8004708:	d812      	bhi.n	8004730 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	72fb      	strb	r3, [r7, #11]
 800470e:	e007      	b.n	8004720 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 8004710:	7afb      	ldrb	r3, [r7, #11]
 8004712:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8004714:	2100      	movs	r1, #0
 8004716:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800471a:	7afb      	ldrb	r3, [r7, #11]
 800471c:	3301      	adds	r3, #1
 800471e:	72fb      	strb	r3, [r7, #11]
 8004720:	7afb      	ldrb	r3, [r7, #11]
 8004722:	2b17      	cmp	r3, #23
 8004724:	d9f4      	bls.n	8004710 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3301      	adds	r3, #1
 800472c:	4a03      	ldr	r2, [pc, #12]	; (800473c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	20000bf8 	.word	0x20000bf8
 8004740:	200009e8 	.word	0x200009e8
 8004744:	20000b98 	.word	0x20000b98

08004748 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8004750:	4b3e      	ldr	r3, [pc, #248]	; (800484c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b8f      	cmp	r3, #143	; 0x8f
 8004756:	d855      	bhi.n	8004804 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e049      	b.n	80047f2 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800475e:	4b3b      	ldr	r3, [pc, #236]	; (800484c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4613      	mov	r3, r2
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	4a39      	ldr	r2, [pc, #228]	; (8004850 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800476a:	5cd3      	ldrb	r3, [r2, r3]
 800476c:	461a      	mov	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	dd01      	ble.n	8004780 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 800477c:	2150      	movs	r1, #80	; 0x50
 800477e:	e000      	b.n	8004782 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8004780:	2128      	movs	r1, #40	; 0x28
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3318      	adds	r3, #24
 8004786:	4a33      	ldr	r2, [pc, #204]	; (8004854 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8004788:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800478c:	4b2f      	ldr	r3, [pc, #188]	; (800484c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	4413      	add	r3, r2
 8004796:	3301      	adds	r3, #1
 8004798:	4a2d      	ldr	r2, [pc, #180]	; (8004850 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	461a      	mov	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	dd01      	ble.n	80047b0 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 80047ac:	2150      	movs	r1, #80	; 0x50
 80047ae:	e000      	b.n	80047b2 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 80047b0:	2128      	movs	r1, #40	; 0x28
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3320      	adds	r3, #32
 80047b6:	4a27      	ldr	r2, [pc, #156]	; (8004854 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80047b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80047bc:	4b23      	ldr	r3, [pc, #140]	; (800484c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4413      	add	r3, r2
 80047c6:	3302      	adds	r3, #2
 80047c8:	4a21      	ldr	r2, [pc, #132]	; (8004850 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80047ca:	5cd3      	ldrb	r3, [r2, r3]
 80047cc:	461a      	mov	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d8:	2b00      	cmp	r3, #0
 80047da:	dd01      	ble.n	80047e0 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 80047dc:	2150      	movs	r1, #80	; 0x50
 80047de:	e000      	b.n	80047e2 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 80047e0:	2128      	movs	r1, #40	; 0x28
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3328      	adds	r3, #40	; 0x28
 80047e6:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80047e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3301      	adds	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b07      	cmp	r3, #7
 80047f6:	d9b2      	bls.n	800475e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	4a13      	ldr	r2, [pc, #76]	; (800484c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004800:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 8004802:	e01e      	b.n	8004842 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b91      	cmp	r3, #145	; 0x91
 800480a:	d813      	bhi.n	8004834 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 800480c:	2318      	movs	r3, #24
 800480e:	72fb      	strb	r3, [r7, #11]
 8004810:	e007      	b.n	8004822 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 8004812:	7afb      	ldrb	r3, [r7, #11]
 8004814:	4a0f      	ldr	r2, [pc, #60]	; (8004854 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8004816:	2100      	movs	r1, #0
 8004818:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800481c:	7afb      	ldrb	r3, [r7, #11]
 800481e:	3301      	adds	r3, #1
 8004820:	72fb      	strb	r3, [r7, #11]
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	2b2f      	cmp	r3, #47	; 0x2f
 8004826:	d9f4      	bls.n	8004812 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 8004828:	4b08      	ldr	r3, [pc, #32]	; (800484c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	4a07      	ldr	r2, [pc, #28]	; (800484c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004830:	6013      	str	r3, [r2, #0]
}
 8004832:	e006      	b.n	8004842 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800483a:	2100      	movs	r1, #0
 800483c:	4806      	ldr	r0, [pc, #24]	; (8004858 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 800483e:	f003 fe45 	bl	80084cc <HAL_TIM_PWM_Stop_DMA>
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20000bf8 	.word	0x20000bf8
 8004850:	200009e8 	.word	0x200009e8
 8004854:	20000b98 	.word	0x20000b98
 8004858:	2000056c 	.word	0x2000056c

0800485c <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
 8004866:	460b      	mov	r3, r1
 8004868:	71bb      	strb	r3, [r7, #6]
 800486a:	4613      	mov	r3, r2
 800486c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 800486e:	797b      	ldrb	r3, [r7, #5]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <hsl_to_rgb+0x1c>
 8004874:	2300      	movs	r3, #0
 8004876:	e0b1      	b.n	80049dc <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8004878:	797b      	ldrb	r3, [r7, #5]
 800487a:	b29b      	uxth	r3, r3
 800487c:	3301      	adds	r3, #1
 800487e:	b29b      	uxth	r3, r3
 8004880:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8004882:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004886:	2b00      	cmp	r3, #0
 8004888:	db09      	blt.n	800489e <hsl_to_rgb+0x42>
 800488a:	89bb      	ldrh	r3, [r7, #12]
 800488c:	b29b      	uxth	r3, r3
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	79ba      	ldrb	r2, [r7, #6]
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	121b      	asrs	r3, r3, #8
 8004898:	b2db      	uxtb	r3, r3
 800489a:	74fb      	strb	r3, [r7, #19]
 800489c:	e00a      	b.n	80048b4 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 800489e:	89bb      	ldrh	r3, [r7, #12]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80048a8:	79ba      	ldrb	r2, [r7, #6]
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	121b      	asrs	r3, r3, #8
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	0052      	lsls	r2, r2, #1
 80048bc:	4413      	add	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80048c4:	897b      	ldrh	r3, [r7, #10]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80048cc:	7d3b      	ldrb	r3, [r7, #20]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3301      	adds	r3, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80048d8:	897b      	ldrh	r3, [r7, #10]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <hsl_to_rgb+0x9c>
 80048e4:	89fb      	ldrh	r3, [r7, #14]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	7cfa      	ldrb	r2, [r7, #19]
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	fb02 f303 	mul.w	r3, r2, r3
 80048f0:	121b      	asrs	r3, r3, #8
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	74bb      	strb	r3, [r7, #18]
 80048f6:	e00a      	b.n	800490e <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 80048f8:	89fb      	ldrh	r3, [r7, #14]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004900:	7cfa      	ldrb	r2, [r7, #19]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	121b      	asrs	r3, r3, #8
 800490a:	b2db      	uxtb	r3, r3
 800490c:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800490e:	7cfb      	ldrb	r3, [r7, #19]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	797a      	ldrb	r2, [r7, #5]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	b2db      	uxtb	r3, r3
 800491c:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	b29b      	uxth	r3, r3
 8004922:	0a1b      	lsrs	r3, r3, #8
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b04      	cmp	r3, #4
 8004928:	d839      	bhi.n	800499e <hsl_to_rgb+0x142>
 800492a:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <hsl_to_rgb+0xd4>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004945 	.word	0x08004945
 8004934:	08004957 	.word	0x08004957
 8004938:	08004969 	.word	0x08004969
 800493c:	0800497b 	.word	0x0800497b
 8004940:	0800498d 	.word	0x0800498d
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	75fb      	strb	r3, [r7, #23]
 800494a:	7cbb      	ldrb	r3, [r7, #18]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	75bb      	strb	r3, [r7, #22]
 8004950:	2300      	movs	r3, #0
 8004952:	757b      	strb	r3, [r7, #21]
 8004954:	e02c      	b.n	80049b0 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8004956:	7cbb      	ldrb	r3, [r7, #18]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	75fb      	strb	r3, [r7, #23]
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	75bb      	strb	r3, [r7, #22]
 8004962:	2300      	movs	r3, #0
 8004964:	757b      	strb	r3, [r7, #21]
 8004966:	e023      	b.n	80049b0 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8004968:	2300      	movs	r3, #0
 800496a:	75fb      	strb	r3, [r7, #23]
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	75bb      	strb	r3, [r7, #22]
 8004972:	7cbb      	ldrb	r3, [r7, #18]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	757b      	strb	r3, [r7, #21]
 8004978:	e01a      	b.n	80049b0 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 800497a:	2300      	movs	r3, #0
 800497c:	75fb      	strb	r3, [r7, #23]
 800497e:	7cbb      	ldrb	r3, [r7, #18]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	75bb      	strb	r3, [r7, #22]
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	757b      	strb	r3, [r7, #21]
 800498a:	e011      	b.n	80049b0 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 800498c:	7cbb      	ldrb	r3, [r7, #18]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	75fb      	strb	r3, [r7, #23]
 8004992:	2300      	movs	r3, #0
 8004994:	75bb      	strb	r3, [r7, #22]
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	757b      	strb	r3, [r7, #21]
 800499c:	e008      	b.n	80049b0 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	75fb      	strb	r3, [r7, #23]
 80049a4:	2300      	movs	r3, #0
 80049a6:	75bb      	strb	r3, [r7, #22]
 80049a8:	7cbb      	ldrb	r3, [r7, #18]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	757b      	strb	r3, [r7, #21]
 80049ae:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	7c7b      	ldrb	r3, [r7, #17]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	041a      	lsls	r2, r3, #16
 80049be:	7dbb      	ldrb	r3, [r7, #22]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	4619      	mov	r1, r3
 80049c4:	7c7b      	ldrb	r3, [r7, #17]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	440b      	add	r3, r1
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	431a      	orrs	r2, r3
 80049ce:	7d7b      	ldrb	r3, [r7, #21]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	4619      	mov	r1, r3
 80049d4:	7c7b      	ldrb	r3, [r7, #17]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	440b      	add	r3, r1
 80049da:	4313      	orrs	r3, r2
}
 80049dc:	4618      	mov	r0, r3
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <HAL_Init+0x40>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <HAL_Init+0x40>)
 80049f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_Init+0x40>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <HAL_Init+0x40>)
 80049fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_Init+0x40>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <HAL_Init+0x40>)
 8004a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a10:	2003      	movs	r0, #3
 8004a12:	f000 f94f 	bl	8004cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a16:	200f      	movs	r0, #15
 8004a18:	f000 f808 	bl	8004a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a1c:	f7ff f8cc 	bl	8003bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023c00 	.word	0x40023c00

08004a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a34:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <HAL_InitTick+0x54>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <HAL_InitTick+0x58>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f967 	bl	8004d1e <HAL_SYSTICK_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e00e      	b.n	8004a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b0f      	cmp	r3, #15
 8004a5e:	d80a      	bhi.n	8004a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a60:	2200      	movs	r2, #0
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	f000 f92f 	bl	8004cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a6c:	4a06      	ldr	r2, [pc, #24]	; (8004a88 <HAL_InitTick+0x5c>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e000      	b.n	8004a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	200001c8 	.word	0x200001c8
 8004a84:	200001d4 	.word	0x200001d4
 8004a88:	200001d0 	.word	0x200001d0

08004a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_IncTick+0x20>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <HAL_IncTick+0x24>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_IncTick+0x24>)
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	200001d4 	.word	0x200001d4
 8004ab0:	20000bfc 	.word	0x20000bfc

08004ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <HAL_GetTick+0x14>)
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000bfc 	.word	0x20000bfc

08004acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ad4:	f7ff ffee 	bl	8004ab4 <HAL_GetTick>
 8004ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d005      	beq.n	8004af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <HAL_Delay+0x44>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004af2:	bf00      	nop
 8004af4:	f7ff ffde 	bl	8004ab4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d8f7      	bhi.n	8004af4 <HAL_Delay+0x28>
  {
  }
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200001d4 	.word	0x200001d4

08004b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <__NVIC_SetPriorityGrouping+0x44>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b30:	4013      	ands	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b46:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <__NVIC_SetPriorityGrouping+0x44>)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	60d3      	str	r3, [r2, #12]
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <__NVIC_GetPriorityGrouping+0x18>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	f003 0307 	and.w	r3, r3, #7
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	db0b      	blt.n	8004ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	f003 021f 	and.w	r2, r3, #31
 8004b90:	4907      	ldr	r1, [pc, #28]	; (8004bb0 <__NVIC_EnableIRQ+0x38>)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	2001      	movs	r0, #1
 8004b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	e000e100 	.word	0xe000e100

08004bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	6039      	str	r1, [r7, #0]
 8004bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	db0a      	blt.n	8004bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	490c      	ldr	r1, [pc, #48]	; (8004c00 <__NVIC_SetPriority+0x4c>)
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	0112      	lsls	r2, r2, #4
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bdc:	e00a      	b.n	8004bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	4908      	ldr	r1, [pc, #32]	; (8004c04 <__NVIC_SetPriority+0x50>)
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	3b04      	subs	r3, #4
 8004bec:	0112      	lsls	r2, r2, #4
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	761a      	strb	r2, [r3, #24]
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	e000e100 	.word	0xe000e100
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b089      	sub	sp, #36	; 0x24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f1c3 0307 	rsb	r3, r3, #7
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	bf28      	it	cs
 8004c26:	2304      	movcs	r3, #4
 8004c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	2b06      	cmp	r3, #6
 8004c30:	d902      	bls.n	8004c38 <NVIC_EncodePriority+0x30>
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3b03      	subs	r3, #3
 8004c36:	e000      	b.n	8004c3a <NVIC_EncodePriority+0x32>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43da      	mvns	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c50:	f04f 31ff 	mov.w	r1, #4294967295
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5a:	43d9      	mvns	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c60:	4313      	orrs	r3, r2
         );
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3724      	adds	r7, #36	; 0x24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c80:	d301      	bcc.n	8004c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c82:	2301      	movs	r3, #1
 8004c84:	e00f      	b.n	8004ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c86:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <SysTick_Config+0x40>)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c8e:	210f      	movs	r1, #15
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295
 8004c94:	f7ff ff8e 	bl	8004bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <SysTick_Config+0x40>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c9e:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <SysTick_Config+0x40>)
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	e000e010 	.word	0xe000e010

08004cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ff29 	bl	8004b14 <__NVIC_SetPriorityGrouping>
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cdc:	f7ff ff3e 	bl	8004b5c <__NVIC_GetPriorityGrouping>
 8004ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	6978      	ldr	r0, [r7, #20]
 8004ce8:	f7ff ff8e 	bl	8004c08 <NVIC_EncodePriority>
 8004cec:	4602      	mov	r2, r0
 8004cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ff5d 	bl	8004bb4 <__NVIC_SetPriority>
}
 8004cfa:	bf00      	nop
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	4603      	mov	r3, r0
 8004d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff31 	bl	8004b78 <__NVIC_EnableIRQ>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff ffa2 	bl	8004c70 <SysTick_Config>
 8004d2c:	4603      	mov	r3, r0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e00e      	b.n	8004d66 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	795b      	ldrb	r3, [r3, #5]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d105      	bne.n	8004d5e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7fe fbd7 	bl	800350c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2202      	movs	r2, #2
 8004d82:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e00a      	b.n	8004db0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	441a      	add	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	3301      	adds	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d3f0      	bcc.n	8004d9a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004dc6:	693b      	ldr	r3, [r7, #16]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004de0:	f7ff fe68 	bl	8004ab4 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e099      	b.n	8004f24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e10:	e00f      	b.n	8004e32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e12:	f7ff fe4f 	bl	8004ab4 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b05      	cmp	r3, #5
 8004e1e:	d908      	bls.n	8004e32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2203      	movs	r2, #3
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e078      	b.n	8004f24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e8      	bne.n	8004e12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4b38      	ldr	r3, [pc, #224]	; (8004f2c <HAL_DMA_Init+0x158>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d107      	bne.n	8004e9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	4313      	orrs	r3, r2
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 0307 	bic.w	r3, r3, #7
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d117      	bne.n	8004ef6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00e      	beq.n	8004ef6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fb01 	bl	80054e0 <DMA_CheckFifoParam>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2240      	movs	r2, #64	; 0x40
 8004ee8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e016      	b.n	8004f24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fab8 	bl	8005474 <DMA_CalcBaseAndBitshift>
 8004f04:	4603      	mov	r3, r0
 8004f06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	223f      	movs	r2, #63	; 0x3f
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	f010803f 	.word	0xf010803f

08004f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_DMA_Start_IT+0x26>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e040      	b.n	8004fd8 <HAL_DMA_Start_IT+0xa8>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d12f      	bne.n	8004fca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fa4a 	bl	8005418 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f88:	223f      	movs	r2, #63	; 0x3f
 8004f8a:	409a      	lsls	r2, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0216 	orr.w	r2, r2, #22
 8004f9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0208 	orr.w	r2, r2, #8
 8004fb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e005      	b.n	8004fd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fee:	f7ff fd61 	bl	8004ab4 <HAL_GetTick>
 8004ff2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d008      	beq.n	8005012 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2280      	movs	r2, #128	; 0x80
 8005004:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e052      	b.n	80050b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0216 	bic.w	r2, r2, #22
 8005020:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005030:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <HAL_DMA_Abort+0x62>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0208 	bic.w	r2, r2, #8
 8005050:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005062:	e013      	b.n	800508c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005064:	f7ff fd26 	bl	8004ab4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b05      	cmp	r3, #5
 8005070:	d90c      	bls.n	800508c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2203      	movs	r2, #3
 800507c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e015      	b.n	80050b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e4      	bne.n	8005064 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509e:	223f      	movs	r2, #63	; 0x3f
 80050a0:	409a      	lsls	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d004      	beq.n	80050de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2280      	movs	r2, #128	; 0x80
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e00c      	b.n	80050f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2205      	movs	r2, #5
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005110:	4b8e      	ldr	r3, [pc, #568]	; (800534c <HAL_DMA_IRQHandler+0x248>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a8e      	ldr	r2, [pc, #568]	; (8005350 <HAL_DMA_IRQHandler+0x24c>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	0a9b      	lsrs	r3, r3, #10
 800511c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512e:	2208      	movs	r2, #8
 8005130:	409a      	lsls	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4013      	ands	r3, r2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01a      	beq.n	8005170 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d013      	beq.n	8005170 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0204 	bic.w	r2, r2, #4
 8005156:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515c:	2208      	movs	r2, #8
 800515e:	409a      	lsls	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005168:	f043 0201 	orr.w	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	2201      	movs	r2, #1
 8005176:	409a      	lsls	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d012      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005192:	2201      	movs	r2, #1
 8005194:	409a      	lsls	r2, r3
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	f043 0202 	orr.w	r2, r3, #2
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051aa:	2204      	movs	r2, #4
 80051ac:	409a      	lsls	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d012      	beq.n	80051dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00b      	beq.n	80051dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c8:	2204      	movs	r2, #4
 80051ca:	409a      	lsls	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d4:	f043 0204 	orr.w	r2, r3, #4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	2210      	movs	r2, #16
 80051e2:	409a      	lsls	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d043      	beq.n	8005274 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d03c      	beq.n	8005274 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fe:	2210      	movs	r2, #16
 8005200:	409a      	lsls	r2, r3
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d018      	beq.n	8005246 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d108      	bne.n	8005234 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d024      	beq.n	8005274 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
 8005232:	e01f      	b.n	8005274 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01b      	beq.n	8005274 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	4798      	blx	r3
 8005244:	e016      	b.n	8005274 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d107      	bne.n	8005264 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0208 	bic.w	r2, r2, #8
 8005262:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005278:	2220      	movs	r2, #32
 800527a:	409a      	lsls	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 808f 	beq.w	80053a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8087 	beq.w	80053a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529a:	2220      	movs	r2, #32
 800529c:	409a      	lsls	r2, r3
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d136      	bne.n	800531c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0216 	bic.w	r2, r2, #22
 80052bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695a      	ldr	r2, [r3, #20]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <HAL_DMA_IRQHandler+0x1da>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0208 	bic.w	r2, r2, #8
 80052ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f2:	223f      	movs	r2, #63	; 0x3f
 80052f4:	409a      	lsls	r2, r3
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530e:	2b00      	cmp	r3, #0
 8005310:	d07e      	beq.n	8005410 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
        }
        return;
 800531a:	e079      	b.n	8005410 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01d      	beq.n	8005366 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10d      	bne.n	8005354 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533c:	2b00      	cmp	r3, #0
 800533e:	d031      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
 8005348:	e02c      	b.n	80053a4 <HAL_DMA_IRQHandler+0x2a0>
 800534a:	bf00      	nop
 800534c:	200001c8 	.word	0x200001c8
 8005350:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d023      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	4798      	blx	r3
 8005364:	e01e      	b.n	80053a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10f      	bne.n	8005394 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0210 	bic.w	r2, r2, #16
 8005382:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d032      	beq.n	8005412 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d022      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2205      	movs	r2, #5
 80053bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	3301      	adds	r3, #1
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d307      	bcc.n	80053ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f2      	bne.n	80053d0 <HAL_DMA_IRQHandler+0x2cc>
 80053ea:	e000      	b.n	80053ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
 800540e:	e000      	b.n	8005412 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005410:	bf00      	nop
    }
  }
}
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005434:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d108      	bne.n	8005458 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005456:	e007      	b.n	8005468 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	60da      	str	r2, [r3, #12]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	3b10      	subs	r3, #16
 8005484:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800548e:	4a13      	ldr	r2, [pc, #76]	; (80054dc <DMA_CalcBaseAndBitshift+0x68>)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d909      	bls.n	80054b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	659a      	str	r2, [r3, #88]	; 0x58
 80054b4:	e007      	b.n	80054c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054be:	f023 0303 	bic.w	r3, r3, #3
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	aaaaaaab 	.word	0xaaaaaaab
 80054dc:	0800ee00 	.word	0x0800ee00

080054e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d11f      	bne.n	800553a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d856      	bhi.n	80055ae <DMA_CheckFifoParam+0xce>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <DMA_CheckFifoParam+0x28>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005519 	.word	0x08005519
 800550c:	0800552b 	.word	0x0800552b
 8005510:	08005519 	.word	0x08005519
 8005514:	080055af 	.word	0x080055af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d046      	beq.n	80055b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005528:	e043      	b.n	80055b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005532:	d140      	bne.n	80055b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005538:	e03d      	b.n	80055b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005542:	d121      	bne.n	8005588 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d837      	bhi.n	80055ba <DMA_CheckFifoParam+0xda>
 800554a:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <DMA_CheckFifoParam+0x70>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	08005561 	.word	0x08005561
 8005554:	08005567 	.word	0x08005567
 8005558:	08005561 	.word	0x08005561
 800555c:	08005579 	.word	0x08005579
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      break;
 8005564:	e030      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d025      	beq.n	80055be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005576:	e022      	b.n	80055be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005580:	d11f      	bne.n	80055c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005586:	e01c      	b.n	80055c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d903      	bls.n	8005596 <DMA_CheckFifoParam+0xb6>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d003      	beq.n	800559c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005594:	e018      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
      break;
 800559a:	e015      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00e      	beq.n	80055c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]
      break;
 80055ac:	e00b      	b.n	80055c6 <DMA_CheckFifoParam+0xe6>
      break;
 80055ae:	bf00      	nop
 80055b0:	e00a      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;
 80055b2:	bf00      	nop
 80055b4:	e008      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;
 80055b6:	bf00      	nop
 80055b8:	e006      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;
 80055ba:	bf00      	nop
 80055bc:	e004      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;
 80055be:	bf00      	nop
 80055c0:	e002      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;
 80055c6:	bf00      	nop
    }
  } 
  
  return status; 
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop

080055d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055ea:	4b23      	ldr	r3, [pc, #140]	; (8005678 <HAL_FLASH_Program+0xa0>)
 80055ec:	7e1b      	ldrb	r3, [r3, #24]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_FLASH_Program+0x1e>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e03b      	b.n	800566e <HAL_FLASH_Program+0x96>
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <HAL_FLASH_Program+0xa0>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005600:	f000 f87c 	bl	80056fc <FLASH_WaitForLastOperation>
 8005604:	4603      	mov	r3, r0
 8005606:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d12b      	bne.n	8005666 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005614:	783b      	ldrb	r3, [r7, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	68b8      	ldr	r0, [r7, #8]
 800561a:	f000 f927 	bl	800586c <FLASH_Program_Byte>
 800561e:	e016      	b.n	800564e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d105      	bne.n	8005632 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005626:	883b      	ldrh	r3, [r7, #0]
 8005628:	4619      	mov	r1, r3
 800562a:	68b8      	ldr	r0, [r7, #8]
 800562c:	f000 f8fa 	bl	8005824 <FLASH_Program_HalfWord>
 8005630:	e00d      	b.n	800564e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b02      	cmp	r3, #2
 8005636:	d105      	bne.n	8005644 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	4619      	mov	r1, r3
 800563c:	68b8      	ldr	r0, [r7, #8]
 800563e:	f000 f8cf 	bl	80057e0 <FLASH_Program_Word>
 8005642:	e004      	b.n	800564e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005648:	68b8      	ldr	r0, [r7, #8]
 800564a:	f000 f897 	bl	800577c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800564e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005652:	f000 f853 	bl	80056fc <FLASH_WaitForLastOperation>
 8005656:	4603      	mov	r3, r0
 8005658:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800565a:	4b08      	ldr	r3, [pc, #32]	; (800567c <HAL_FLASH_Program+0xa4>)
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	4a07      	ldr	r2, [pc, #28]	; (800567c <HAL_FLASH_Program+0xa4>)
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005666:	4b04      	ldr	r3, [pc, #16]	; (8005678 <HAL_FLASH_Program+0xa0>)
 8005668:	2200      	movs	r2, #0
 800566a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000c00 	.word	0x20000c00
 800567c:	40023c00 	.word	0x40023c00

08005680 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800568a:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <HAL_FLASH_Unlock+0x38>)
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	da0b      	bge.n	80056aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <HAL_FLASH_Unlock+0x38>)
 8005694:	4a09      	ldr	r2, [pc, #36]	; (80056bc <HAL_FLASH_Unlock+0x3c>)
 8005696:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005698:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <HAL_FLASH_Unlock+0x38>)
 800569a:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <HAL_FLASH_Unlock+0x40>)
 800569c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <HAL_FLASH_Unlock+0x38>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da01      	bge.n	80056aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80056aa:	79fb      	ldrb	r3, [r7, #7]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40023c00 	.word	0x40023c00
 80056bc:	45670123 	.word	0x45670123
 80056c0:	cdef89ab 	.word	0xcdef89ab

080056c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <HAL_FLASH_Lock+0x1c>)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <HAL_FLASH_Lock+0x1c>)
 80056ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	40023c00 	.word	0x40023c00

080056e4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80056e8:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <HAL_FLASH_GetError+0x14>)
 80056ea:	69db      	ldr	r3, [r3, #28]
}  
 80056ec:	4618      	mov	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20000c00 	.word	0x20000c00

080056fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005708:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <FLASH_WaitForLastOperation+0x78>)
 800570a:	2200      	movs	r2, #0
 800570c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800570e:	f7ff f9d1 	bl	8004ab4 <HAL_GetTick>
 8005712:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005714:	e010      	b.n	8005738 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d00c      	beq.n	8005738 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <FLASH_WaitForLastOperation+0x38>
 8005724:	f7ff f9c6 	bl	8004ab4 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d201      	bcs.n	8005738 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e019      	b.n	800576c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005738:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <FLASH_WaitForLastOperation+0x7c>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e8      	bne.n	8005716 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005744:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <FLASH_WaitForLastOperation+0x7c>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005750:	4b09      	ldr	r3, [pc, #36]	; (8005778 <FLASH_WaitForLastOperation+0x7c>)
 8005752:	2201      	movs	r2, #1
 8005754:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005756:	4b08      	ldr	r3, [pc, #32]	; (8005778 <FLASH_WaitForLastOperation+0x7c>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005762:	f000 f8a5 	bl	80058b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
  
}  
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20000c00 	.word	0x20000c00
 8005778:	40023c00 	.word	0x40023c00

0800577c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005788:	4b14      	ldr	r3, [pc, #80]	; (80057dc <FLASH_Program_DoubleWord+0x60>)
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	4a13      	ldr	r2, [pc, #76]	; (80057dc <FLASH_Program_DoubleWord+0x60>)
 800578e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005792:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005794:	4b11      	ldr	r3, [pc, #68]	; (80057dc <FLASH_Program_DoubleWord+0x60>)
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	4a10      	ldr	r2, [pc, #64]	; (80057dc <FLASH_Program_DoubleWord+0x60>)
 800579a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800579e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057a0:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <FLASH_Program_DoubleWord+0x60>)
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <FLASH_Program_DoubleWord+0x60>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80057b2:	f3bf 8f6f 	isb	sy
}
 80057b6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80057b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	000a      	movs	r2, r1
 80057c6:	2300      	movs	r3, #0
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	3104      	adds	r1, #4
 80057cc:	4613      	mov	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40023c00 	.word	0x40023c00

080057e0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057ea:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <FLASH_Program_Word+0x40>)
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	4a0c      	ldr	r2, [pc, #48]	; (8005820 <FLASH_Program_Word+0x40>)
 80057f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80057f6:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <FLASH_Program_Word+0x40>)
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	4a09      	ldr	r2, [pc, #36]	; (8005820 <FLASH_Program_Word+0x40>)
 80057fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005800:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <FLASH_Program_Word+0x40>)
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	4a06      	ldr	r2, [pc, #24]	; (8005820 <FLASH_Program_Word+0x40>)
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	601a      	str	r2, [r3, #0]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	40023c00 	.word	0x40023c00

08005824 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <FLASH_Program_HalfWord+0x44>)
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	4a0c      	ldr	r2, [pc, #48]	; (8005868 <FLASH_Program_HalfWord+0x44>)
 8005836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <FLASH_Program_HalfWord+0x44>)
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	4a09      	ldr	r2, [pc, #36]	; (8005868 <FLASH_Program_HalfWord+0x44>)
 8005842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005846:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <FLASH_Program_HalfWord+0x44>)
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	4a06      	ldr	r2, [pc, #24]	; (8005868 <FLASH_Program_HalfWord+0x44>)
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	801a      	strh	r2, [r3, #0]
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40023c00 	.word	0x40023c00

0800586c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <FLASH_Program_Byte+0x40>)
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	4a0b      	ldr	r2, [pc, #44]	; (80058ac <FLASH_Program_Byte+0x40>)
 800587e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005882:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <FLASH_Program_Byte+0x40>)
 8005886:	4a09      	ldr	r2, [pc, #36]	; (80058ac <FLASH_Program_Byte+0x40>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800588c:	4b07      	ldr	r3, [pc, #28]	; (80058ac <FLASH_Program_Byte+0x40>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	4a06      	ldr	r2, [pc, #24]	; (80058ac <FLASH_Program_Byte+0x40>)
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	701a      	strb	r2, [r3, #0]
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40023c00 	.word	0x40023c00

080058b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80058b4:	4b2f      	ldr	r3, [pc, #188]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80058c0:	4b2d      	ldr	r3, [pc, #180]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f043 0310 	orr.w	r3, r3, #16
 80058c8:	4a2b      	ldr	r2, [pc, #172]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 80058ca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80058cc:	4b29      	ldr	r3, [pc, #164]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 80058ce:	2210      	movs	r2, #16
 80058d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80058d2:	4b28      	ldr	r3, [pc, #160]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80058de:	4b26      	ldr	r3, [pc, #152]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f043 0308 	orr.w	r3, r3, #8
 80058e6:	4a24      	ldr	r2, [pc, #144]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 80058e8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80058ea:	4b22      	ldr	r3, [pc, #136]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 80058ec:	2220      	movs	r2, #32
 80058ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80058f0:	4b20      	ldr	r3, [pc, #128]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d008      	beq.n	800590e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80058fc:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f043 0304 	orr.w	r3, r3, #4
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 8005906:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005908:	4b1a      	ldr	r3, [pc, #104]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 800590a:	2240      	movs	r2, #64	; 0x40
 800590c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800590e:	4b19      	ldr	r3, [pc, #100]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f043 0302 	orr.w	r3, r3, #2
 8005922:	4a15      	ldr	r2, [pc, #84]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 8005924:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005926:	4b13      	ldr	r3, [pc, #76]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 8005928:	2280      	movs	r2, #128	; 0x80
 800592a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800592c:	4b11      	ldr	r3, [pc, #68]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d009      	beq.n	800594c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	4a0d      	ldr	r2, [pc, #52]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 8005942:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 8005946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800594a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800594c:	4b09      	ldr	r3, [pc, #36]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005958:	4b07      	ldr	r3, [pc, #28]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	f043 0320 	orr.w	r3, r3, #32
 8005960:	4a05      	ldr	r2, [pc, #20]	; (8005978 <FLASH_SetErrorCode+0xc8>)
 8005962:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <FLASH_SetErrorCode+0xc4>)
 8005966:	2202      	movs	r2, #2
 8005968:	60da      	str	r2, [r3, #12]
  }
}
 800596a:	bf00      	nop
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	40023c00 	.word	0x40023c00
 8005978:	20000c00 	.word	0x20000c00

0800597c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800598e:	4b31      	ldr	r3, [pc, #196]	; (8005a54 <HAL_FLASHEx_Erase+0xd8>)
 8005990:	7e1b      	ldrb	r3, [r3, #24]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_FLASHEx_Erase+0x1e>
 8005996:	2302      	movs	r3, #2
 8005998:	e058      	b.n	8005a4c <HAL_FLASHEx_Erase+0xd0>
 800599a:	4b2e      	ldr	r3, [pc, #184]	; (8005a54 <HAL_FLASHEx_Erase+0xd8>)
 800599c:	2201      	movs	r2, #1
 800599e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059a4:	f7ff feaa 	bl	80056fc <FLASH_WaitForLastOperation>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d148      	bne.n	8005a44 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	f04f 32ff 	mov.w	r2, #4294967295
 80059b8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d115      	bne.n	80059ee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f000 f844 	bl	8005a5c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059d8:	f7ff fe90 	bl	80056fc <FLASH_WaitForLastOperation>
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <HAL_FLASHEx_Erase+0xdc>)
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_FLASHEx_Erase+0xdc>)
 80059e6:	f023 0304 	bic.w	r3, r3, #4
 80059ea:	6113      	str	r3, [r2, #16]
 80059ec:	e028      	b.n	8005a40 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	e01c      	b.n	8005a30 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	4619      	mov	r1, r3
 80059fe:	68b8      	ldr	r0, [r7, #8]
 8005a00:	f000 f850 	bl	8005aa4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a08:	f7ff fe78 	bl	80056fc <FLASH_WaitForLastOperation>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005a10:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_FLASHEx_Erase+0xdc>)
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <HAL_FLASHEx_Erase+0xdc>)
 8005a16:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005a1a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	601a      	str	r2, [r3, #0]
          break;
 8005a28:	e00a      	b.n	8005a40 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4413      	add	r3, r2
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d3da      	bcc.n	80059f6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a40:	f000 f878 	bl	8005b34 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a44:	4b03      	ldr	r3, [pc, #12]	; (8005a54 <HAL_FLASHEx_Erase+0xd8>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	761a      	strb	r2, [r3, #24]

  return status;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20000c00 	.word	0x20000c00
 8005a58:	40023c00 	.word	0x40023c00

08005a5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	6039      	str	r1, [r7, #0]
 8005a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a68:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <FLASH_MassErase+0x44>)
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	4a0c      	ldr	r2, [pc, #48]	; (8005aa0 <FLASH_MassErase+0x44>)
 8005a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005a74:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <FLASH_MassErase+0x44>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <FLASH_MassErase+0x44>)
 8005a7a:	f043 0304 	orr.w	r3, r3, #4
 8005a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <FLASH_MassErase+0x44>)
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	4a05      	ldr	r2, [pc, #20]	; (8005aa0 <FLASH_MassErase+0x44>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a90:	6113      	str	r3, [r2, #16]
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40023c00 	.word	0x40023c00

08005aa4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e010      	b.n	8005ae2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d103      	bne.n	8005ace <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e009      	b.n	8005ae2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d103      	bne.n	8005adc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e002      	b.n	8005ae2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005adc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ae2:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005aee:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	490f      	ldr	r1, [pc, #60]	; (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	4a0c      	ldr	r2, [pc, #48]	; (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005b00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005b04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	4a07      	ldr	r2, [pc, #28]	; (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005b12:	f043 0302 	orr.w	r3, r3, #2
 8005b16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b22:	6113      	str	r3, [r2, #16]
}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	40023c00 	.word	0x40023c00

08005b34 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005b38:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d017      	beq.n	8005b74 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b44:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b4e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a16      	ldr	r2, [pc, #88]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b66:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b68:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b72:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d017      	beq.n	8005bb0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b80:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a0d      	ldr	r2, [pc, #52]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b8a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a07      	ldr	r2, [pc, #28]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ba2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a04      	ldr	r2, [pc, #16]	; (8005bbc <FLASH_FlushCaches+0x88>)
 8005baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bae:	6013      	str	r3, [r2, #0]
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40023c00 	.word	0x40023c00

08005bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b089      	sub	sp, #36	; 0x24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	e159      	b.n	8005e90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bdc:	2201      	movs	r2, #1
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4013      	ands	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	f040 8148 	bne.w	8005e8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d005      	beq.n	8005c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d130      	bne.n	8005c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c48:	2201      	movs	r2, #1
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4013      	ands	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 0201 	and.w	r2, r3, #1
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d017      	beq.n	8005cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	43db      	mvns	r3, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4013      	ands	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d123      	bne.n	8005d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	08da      	lsrs	r2, r3, #3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3208      	adds	r2, #8
 8005cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	220f      	movs	r2, #15
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	08da      	lsrs	r2, r3, #3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3208      	adds	r2, #8
 8005cfe:	69b9      	ldr	r1, [r7, #24]
 8005d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	2203      	movs	r2, #3
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 0203 	and.w	r2, r3, #3
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80a2 	beq.w	8005e8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b57      	ldr	r3, [pc, #348]	; (8005ea8 <HAL_GPIO_Init+0x2e8>)
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	4a56      	ldr	r2, [pc, #344]	; (8005ea8 <HAL_GPIO_Init+0x2e8>)
 8005d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d54:	6453      	str	r3, [r2, #68]	; 0x44
 8005d56:	4b54      	ldr	r3, [pc, #336]	; (8005ea8 <HAL_GPIO_Init+0x2e8>)
 8005d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d62:	4a52      	ldr	r2, [pc, #328]	; (8005eac <HAL_GPIO_Init+0x2ec>)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	089b      	lsrs	r3, r3, #2
 8005d68:	3302      	adds	r3, #2
 8005d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	220f      	movs	r2, #15
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a49      	ldr	r2, [pc, #292]	; (8005eb0 <HAL_GPIO_Init+0x2f0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d019      	beq.n	8005dc2 <HAL_GPIO_Init+0x202>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a48      	ldr	r2, [pc, #288]	; (8005eb4 <HAL_GPIO_Init+0x2f4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <HAL_GPIO_Init+0x1fe>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a47      	ldr	r2, [pc, #284]	; (8005eb8 <HAL_GPIO_Init+0x2f8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00d      	beq.n	8005dba <HAL_GPIO_Init+0x1fa>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a46      	ldr	r2, [pc, #280]	; (8005ebc <HAL_GPIO_Init+0x2fc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d007      	beq.n	8005db6 <HAL_GPIO_Init+0x1f6>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a45      	ldr	r2, [pc, #276]	; (8005ec0 <HAL_GPIO_Init+0x300>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d101      	bne.n	8005db2 <HAL_GPIO_Init+0x1f2>
 8005dae:	2304      	movs	r3, #4
 8005db0:	e008      	b.n	8005dc4 <HAL_GPIO_Init+0x204>
 8005db2:	2307      	movs	r3, #7
 8005db4:	e006      	b.n	8005dc4 <HAL_GPIO_Init+0x204>
 8005db6:	2303      	movs	r3, #3
 8005db8:	e004      	b.n	8005dc4 <HAL_GPIO_Init+0x204>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e002      	b.n	8005dc4 <HAL_GPIO_Init+0x204>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <HAL_GPIO_Init+0x204>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	f002 0203 	and.w	r2, r2, #3
 8005dca:	0092      	lsls	r2, r2, #2
 8005dcc:	4093      	lsls	r3, r2
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dd4:	4935      	ldr	r1, [pc, #212]	; (8005eac <HAL_GPIO_Init+0x2ec>)
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	3302      	adds	r3, #2
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005de2:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <HAL_GPIO_Init+0x304>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	43db      	mvns	r3, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4013      	ands	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e06:	4a2f      	ldr	r2, [pc, #188]	; (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e0c:	4b2d      	ldr	r3, [pc, #180]	; (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e30:	4a24      	ldr	r2, [pc, #144]	; (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e36:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4013      	ands	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e5a:	4a1a      	ldr	r2, [pc, #104]	; (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e60:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e84:	4a0f      	ldr	r2, [pc, #60]	; (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b0f      	cmp	r3, #15
 8005e94:	f67f aea2 	bls.w	8005bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	3724      	adds	r7, #36	; 0x24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40013800 	.word	0x40013800
 8005eb0:	40020000 	.word	0x40020000
 8005eb4:	40020400 	.word	0x40020400
 8005eb8:	40020800 	.word	0x40020800
 8005ebc:	40020c00 	.word	0x40020c00
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40013c00 	.word	0x40013c00

08005ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	807b      	strh	r3, [r7, #2]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ed8:	787b      	ldrb	r3, [r7, #1]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ede:	887a      	ldrh	r2, [r7, #2]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ee4:	e003      	b.n	8005eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ee6:	887b      	ldrh	r3, [r7, #2]
 8005ee8:	041a      	lsls	r2, r3, #16
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	619a      	str	r2, [r3, #24]
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e12b      	b.n	8006166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fd fbe8 	bl	80036f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	; 0x24
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f60:	f001 fbbc 	bl	80076dc <HAL_RCC_GetPCLK1Freq>
 8005f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4a81      	ldr	r2, [pc, #516]	; (8006170 <HAL_I2C_Init+0x274>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d807      	bhi.n	8005f80 <HAL_I2C_Init+0x84>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a80      	ldr	r2, [pc, #512]	; (8006174 <HAL_I2C_Init+0x278>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	bf94      	ite	ls
 8005f78:	2301      	movls	r3, #1
 8005f7a:	2300      	movhi	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	e006      	b.n	8005f8e <HAL_I2C_Init+0x92>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a7d      	ldr	r2, [pc, #500]	; (8006178 <HAL_I2C_Init+0x27c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	bf94      	ite	ls
 8005f88:	2301      	movls	r3, #1
 8005f8a:	2300      	movhi	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e0e7      	b.n	8006166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a78      	ldr	r2, [pc, #480]	; (800617c <HAL_I2C_Init+0x280>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0c9b      	lsrs	r3, r3, #18
 8005fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4a6a      	ldr	r2, [pc, #424]	; (8006170 <HAL_I2C_Init+0x274>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d802      	bhi.n	8005fd0 <HAL_I2C_Init+0xd4>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	e009      	b.n	8005fe4 <HAL_I2C_Init+0xe8>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	4a69      	ldr	r2, [pc, #420]	; (8006180 <HAL_I2C_Init+0x284>)
 8005fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe0:	099b      	lsrs	r3, r3, #6
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	495c      	ldr	r1, [pc, #368]	; (8006170 <HAL_I2C_Init+0x274>)
 8006000:	428b      	cmp	r3, r1
 8006002:	d819      	bhi.n	8006038 <HAL_I2C_Init+0x13c>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	1e59      	subs	r1, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006012:	1c59      	adds	r1, r3, #1
 8006014:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006018:	400b      	ands	r3, r1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_I2C_Init+0x138>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1e59      	subs	r1, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	fbb1 f3f3 	udiv	r3, r1, r3
 800602c:	3301      	adds	r3, #1
 800602e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006032:	e051      	b.n	80060d8 <HAL_I2C_Init+0x1dc>
 8006034:	2304      	movs	r3, #4
 8006036:	e04f      	b.n	80060d8 <HAL_I2C_Init+0x1dc>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d111      	bne.n	8006064 <HAL_I2C_Init+0x168>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1e58      	subs	r0, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6859      	ldr	r1, [r3, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	440b      	add	r3, r1
 800604e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006052:	3301      	adds	r3, #1
 8006054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf0c      	ite	eq
 800605c:	2301      	moveq	r3, #1
 800605e:	2300      	movne	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	e012      	b.n	800608a <HAL_I2C_Init+0x18e>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1e58      	subs	r0, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6859      	ldr	r1, [r3, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	0099      	lsls	r1, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	fbb0 f3f3 	udiv	r3, r0, r3
 800607a:	3301      	adds	r3, #1
 800607c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006080:	2b00      	cmp	r3, #0
 8006082:	bf0c      	ite	eq
 8006084:	2301      	moveq	r3, #1
 8006086:	2300      	movne	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_I2C_Init+0x196>
 800608e:	2301      	movs	r3, #1
 8006090:	e022      	b.n	80060d8 <HAL_I2C_Init+0x1dc>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10e      	bne.n	80060b8 <HAL_I2C_Init+0x1bc>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	1e58      	subs	r0, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6859      	ldr	r1, [r3, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	440b      	add	r3, r1
 80060a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ac:	3301      	adds	r3, #1
 80060ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b6:	e00f      	b.n	80060d8 <HAL_I2C_Init+0x1dc>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	1e58      	subs	r0, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6859      	ldr	r1, [r3, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	0099      	lsls	r1, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ce:	3301      	adds	r3, #1
 80060d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	6809      	ldr	r1, [r1, #0]
 80060dc:	4313      	orrs	r3, r2
 80060de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69da      	ldr	r2, [r3, #28]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6911      	ldr	r1, [r2, #16]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68d2      	ldr	r2, [r2, #12]
 8006112:	4311      	orrs	r1, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	430b      	orrs	r3, r1
 800611a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0201 	orr.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	000186a0 	.word	0x000186a0
 8006174:	001e847f 	.word	0x001e847f
 8006178:	003d08ff 	.word	0x003d08ff
 800617c:	431bde83 	.word	0x431bde83
 8006180:	10624dd3 	.word	0x10624dd3

08006184 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	4608      	mov	r0, r1
 800618e:	4611      	mov	r1, r2
 8006190:	461a      	mov	r2, r3
 8006192:	4603      	mov	r3, r0
 8006194:	817b      	strh	r3, [r7, #10]
 8006196:	460b      	mov	r3, r1
 8006198:	813b      	strh	r3, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800619e:	f7fe fc89 	bl	8004ab4 <HAL_GetTick>
 80061a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	f040 80d9 	bne.w	8006364 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	2319      	movs	r3, #25
 80061b8:	2201      	movs	r2, #1
 80061ba:	496d      	ldr	r1, [pc, #436]	; (8006370 <HAL_I2C_Mem_Write+0x1ec>)
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fc7f 	bl	8006ac0 <I2C_WaitOnFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80061c8:	2302      	movs	r3, #2
 80061ca:	e0cc      	b.n	8006366 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_I2C_Mem_Write+0x56>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e0c5      	b.n	8006366 <HAL_I2C_Mem_Write+0x1e2>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d007      	beq.n	8006200 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800620e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2221      	movs	r2, #33	; 0x21
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2240      	movs	r2, #64	; 0x40
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a3a      	ldr	r2, [r7, #32]
 800622a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4a4d      	ldr	r2, [pc, #308]	; (8006374 <HAL_I2C_Mem_Write+0x1f0>)
 8006240:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006242:	88f8      	ldrh	r0, [r7, #6]
 8006244:	893a      	ldrh	r2, [r7, #8]
 8006246:	8979      	ldrh	r1, [r7, #10]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	9301      	str	r3, [sp, #4]
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	4603      	mov	r3, r0
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fab6 	bl	80067c4 <I2C_RequestMemoryWrite>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d052      	beq.n	8006304 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e081      	b.n	8006366 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fd00 	bl	8006c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00d      	beq.n	800628e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	2b04      	cmp	r3, #4
 8006278:	d107      	bne.n	800628a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006288:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e06b      	b.n	8006366 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	781a      	ldrb	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d11b      	bne.n	8006304 <HAL_I2C_Mem_Write+0x180>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d017      	beq.n	8006304 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	781a      	ldrb	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1aa      	bne.n	8006262 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fcec 	bl	8006cee <I2C_WaitOnBTFFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00d      	beq.n	8006338 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	2b04      	cmp	r3, #4
 8006322:	d107      	bne.n	8006334 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006332:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e016      	b.n	8006366 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	e000      	b.n	8006366 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006364:	2302      	movs	r3, #2
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	00100002 	.word	0x00100002
 8006374:	ffff0000 	.word	0xffff0000

08006378 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08c      	sub	sp, #48	; 0x30
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	4608      	mov	r0, r1
 8006382:	4611      	mov	r1, r2
 8006384:	461a      	mov	r2, r3
 8006386:	4603      	mov	r3, r0
 8006388:	817b      	strh	r3, [r7, #10]
 800638a:	460b      	mov	r3, r1
 800638c:	813b      	strh	r3, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006392:	f7fe fb8f 	bl	8004ab4 <HAL_GetTick>
 8006396:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	f040 8208 	bne.w	80067b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	2319      	movs	r3, #25
 80063ac:	2201      	movs	r2, #1
 80063ae:	497b      	ldr	r1, [pc, #492]	; (800659c <HAL_I2C_Mem_Read+0x224>)
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fb85 	bl	8006ac0 <I2C_WaitOnFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
 80063be:	e1fb      	b.n	80067b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_I2C_Mem_Read+0x56>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e1f4      	b.n	80067b8 <HAL_I2C_Mem_Read+0x440>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d007      	beq.n	80063f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006402:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2222      	movs	r2, #34	; 0x22
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2240      	movs	r2, #64	; 0x40
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4a5b      	ldr	r2, [pc, #364]	; (80065a0 <HAL_I2C_Mem_Read+0x228>)
 8006434:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006436:	88f8      	ldrh	r0, [r7, #6]
 8006438:	893a      	ldrh	r2, [r7, #8]
 800643a:	8979      	ldrh	r1, [r7, #10]
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	4603      	mov	r3, r0
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fa52 	bl	80068f0 <I2C_RequestMemoryRead>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e1b0      	b.n	80067b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d113      	bne.n	8006486 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645e:	2300      	movs	r3, #0
 8006460:	623b      	str	r3, [r7, #32]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	623b      	str	r3, [r7, #32]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e184      	b.n	8006790 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648a:	2b01      	cmp	r3, #1
 800648c:	d11b      	bne.n	80064c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800649c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e164      	b.n	8006790 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d11b      	bne.n	8006506 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ee:	2300      	movs	r3, #0
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	e144      	b.n	8006790 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800651c:	e138      	b.n	8006790 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006522:	2b03      	cmp	r3, #3
 8006524:	f200 80f1 	bhi.w	800670a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652c:	2b01      	cmp	r3, #1
 800652e:	d123      	bne.n	8006578 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006532:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fc1b 	bl	8006d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e139      	b.n	80067b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006576:	e10b      	b.n	8006790 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657c:	2b02      	cmp	r3, #2
 800657e:	d14e      	bne.n	800661e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006586:	2200      	movs	r2, #0
 8006588:	4906      	ldr	r1, [pc, #24]	; (80065a4 <HAL_I2C_Mem_Read+0x22c>)
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fa98 	bl	8006ac0 <I2C_WaitOnFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d008      	beq.n	80065a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e10e      	b.n	80067b8 <HAL_I2C_Mem_Read+0x440>
 800659a:	bf00      	nop
 800659c:	00100002 	.word	0x00100002
 80065a0:	ffff0000 	.word	0xffff0000
 80065a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691a      	ldr	r2, [r3, #16]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	691a      	ldr	r2, [r3, #16]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006612:	b29b      	uxth	r3, r3
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800661c:	e0b8      	b.n	8006790 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	2200      	movs	r2, #0
 8006626:	4966      	ldr	r1, [pc, #408]	; (80067c0 <HAL_I2C_Mem_Read+0x448>)
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 fa49 	bl	8006ac0 <I2C_WaitOnFlagUntilTimeout>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e0bf      	b.n	80067b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	2200      	movs	r2, #0
 8006682:	494f      	ldr	r1, [pc, #316]	; (80067c0 <HAL_I2C_Mem_Read+0x448>)
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fa1b 	bl	8006ac0 <I2C_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e091      	b.n	80067b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006708:	e042      	b.n	8006790 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800670a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 fb2e 	bl	8006d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e04c      	b.n	80067b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b04      	cmp	r3, #4
 800675c:	d118      	bne.n	8006790 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006794:	2b00      	cmp	r3, #0
 8006796:	f47f aec2 	bne.w	800651e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
  }
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3728      	adds	r7, #40	; 0x28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	00010004 	.word	0x00010004

080067c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	4608      	mov	r0, r1
 80067ce:	4611      	mov	r1, r2
 80067d0:	461a      	mov	r2, r3
 80067d2:	4603      	mov	r3, r0
 80067d4:	817b      	strh	r3, [r7, #10]
 80067d6:	460b      	mov	r3, r1
 80067d8:	813b      	strh	r3, [r7, #8]
 80067da:	4613      	mov	r3, r2
 80067dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 f960 	bl	8006ac0 <I2C_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006814:	d103      	bne.n	800681e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e05f      	b.n	80068e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006822:	897b      	ldrh	r3, [r7, #10]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	6a3a      	ldr	r2, [r7, #32]
 8006836:	492d      	ldr	r1, [pc, #180]	; (80068ec <I2C_RequestMemoryWrite+0x128>)
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f998 	bl	8006b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e04c      	b.n	80068e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006848:	2300      	movs	r3, #0
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800685e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006860:	6a39      	ldr	r1, [r7, #32]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 fa02 	bl	8006c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00d      	beq.n	800688a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	2b04      	cmp	r3, #4
 8006874:	d107      	bne.n	8006886 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e02b      	b.n	80068e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d105      	bne.n	800689c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006890:	893b      	ldrh	r3, [r7, #8]
 8006892:	b2da      	uxtb	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	611a      	str	r2, [r3, #16]
 800689a:	e021      	b.n	80068e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800689c:	893b      	ldrh	r3, [r7, #8]
 800689e:	0a1b      	lsrs	r3, r3, #8
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	6a39      	ldr	r1, [r7, #32]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f9dc 	bl	8006c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00d      	beq.n	80068d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d107      	bne.n	80068d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e005      	b.n	80068e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068d6:	893b      	ldrh	r3, [r7, #8]
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	00010002 	.word	0x00010002

080068f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	4608      	mov	r0, r1
 80068fa:	4611      	mov	r1, r2
 80068fc:	461a      	mov	r2, r3
 80068fe:	4603      	mov	r3, r0
 8006900:	817b      	strh	r3, [r7, #10]
 8006902:	460b      	mov	r3, r1
 8006904:	813b      	strh	r3, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006918:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	2200      	movs	r2, #0
 8006932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f8c2 	bl	8006ac0 <I2C_WaitOnFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006950:	d103      	bne.n	800695a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e0aa      	b.n	8006ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800695e:	897b      	ldrh	r3, [r7, #10]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800696c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	4952      	ldr	r1, [pc, #328]	; (8006abc <I2C_RequestMemoryRead+0x1cc>)
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f8fa 	bl	8006b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e097      	b.n	8006ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800699a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699c:	6a39      	ldr	r1, [r7, #32]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 f964 	bl	8006c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d107      	bne.n	80069c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e076      	b.n	8006ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d105      	bne.n	80069d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069cc:	893b      	ldrh	r3, [r7, #8]
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	611a      	str	r2, [r3, #16]
 80069d6:	e021      	b.n	8006a1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80069d8:	893b      	ldrh	r3, [r7, #8]
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	b29b      	uxth	r3, r3
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e8:	6a39      	ldr	r1, [r7, #32]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f93e 	bl	8006c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d107      	bne.n	8006a0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e050      	b.n	8006ab4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a12:	893b      	ldrh	r3, [r7, #8]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1e:	6a39      	ldr	r1, [r7, #32]
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f923 	bl	8006c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00d      	beq.n	8006a48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d107      	bne.n	8006a44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e035      	b.n	8006ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f82b 	bl	8006ac0 <I2C_WaitOnFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00d      	beq.n	8006a8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7e:	d103      	bne.n	8006a88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e013      	b.n	8006ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a8c:	897b      	ldrh	r3, [r7, #10]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	6a3a      	ldr	r2, [r7, #32]
 8006aa0:	4906      	ldr	r1, [pc, #24]	; (8006abc <I2C_RequestMemoryRead+0x1cc>)
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 f863 	bl	8006b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	00010002 	.word	0x00010002

08006ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	4613      	mov	r3, r2
 8006ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ad0:	e025      	b.n	8006b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d021      	beq.n	8006b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ada:	f7fd ffeb 	bl	8004ab4 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d116      	bne.n	8006b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f043 0220 	orr.w	r2, r3, #32
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e023      	b.n	8006b66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	0c1b      	lsrs	r3, r3, #16
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d10d      	bne.n	8006b44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	43da      	mvns	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4013      	ands	r3, r2
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	bf0c      	ite	eq
 8006b3a:	2301      	moveq	r3, #1
 8006b3c:	2300      	movne	r3, #0
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	e00c      	b.n	8006b5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	43da      	mvns	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	bf0c      	ite	eq
 8006b56:	2301      	moveq	r3, #1
 8006b58:	2300      	movne	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d0b6      	beq.n	8006ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b7c:	e051      	b.n	8006c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8c:	d123      	bne.n	8006bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ba6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f043 0204 	orr.w	r2, r3, #4
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e046      	b.n	8006c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bdc:	d021      	beq.n	8006c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bde:	f7fd ff69 	bl	8004ab4 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d116      	bne.n	8006c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f043 0220 	orr.w	r2, r3, #32
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e020      	b.n	8006c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	0c1b      	lsrs	r3, r3, #16
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d10c      	bne.n	8006c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	43da      	mvns	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4013      	ands	r3, r2
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bf14      	ite	ne
 8006c3e:	2301      	movne	r3, #1
 8006c40:	2300      	moveq	r3, #0
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	e00b      	b.n	8006c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	43da      	mvns	r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4013      	ands	r3, r2
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bf14      	ite	ne
 8006c58:	2301      	movne	r3, #1
 8006c5a:	2300      	moveq	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d18d      	bne.n	8006b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c78:	e02d      	b.n	8006cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 f8ce 	bl	8006e1c <I2C_IsAcknowledgeFailed>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e02d      	b.n	8006ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d021      	beq.n	8006cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c92:	f7fd ff0f 	bl	8004ab4 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d302      	bcc.n	8006ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d116      	bne.n	8006cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f043 0220 	orr.w	r2, r3, #32
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e007      	b.n	8006ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce0:	2b80      	cmp	r3, #128	; 0x80
 8006ce2:	d1ca      	bne.n	8006c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cfa:	e02d      	b.n	8006d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f88d 	bl	8006e1c <I2C_IsAcknowledgeFailed>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e02d      	b.n	8006d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d12:	d021      	beq.n	8006d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d14:	f7fd fece 	bl	8004ab4 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d302      	bcc.n	8006d2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d116      	bne.n	8006d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	f043 0220 	orr.w	r2, r3, #32
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e007      	b.n	8006d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d1ca      	bne.n	8006cfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d7c:	e042      	b.n	8006e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b10      	cmp	r3, #16
 8006d8a:	d119      	bne.n	8006dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0210 	mvn.w	r2, #16
 8006d94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e029      	b.n	8006e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc0:	f7fd fe78 	bl	8004ab4 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d302      	bcc.n	8006dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d116      	bne.n	8006e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	f043 0220 	orr.w	r2, r3, #32
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e007      	b.n	8006e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d1b5      	bne.n	8006d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e32:	d11b      	bne.n	8006e6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	f043 0204 	orr.w	r2, r3, #4
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e267      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d075      	beq.n	8006f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e9a:	4b88      	ldr	r3, [pc, #544]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 030c 	and.w	r3, r3, #12
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d00c      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ea6:	4b85      	ldr	r3, [pc, #532]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006eae:	2b08      	cmp	r3, #8
 8006eb0:	d112      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eb2:	4b82      	ldr	r3, [pc, #520]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ebe:	d10b      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec0:	4b7e      	ldr	r3, [pc, #504]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d05b      	beq.n	8006f84 <HAL_RCC_OscConfig+0x108>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d157      	bne.n	8006f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e242      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee0:	d106      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x74>
 8006ee2:	4b76      	ldr	r3, [pc, #472]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a75      	ldr	r2, [pc, #468]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	e01d      	b.n	8006f2c <HAL_RCC_OscConfig+0xb0>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ef8:	d10c      	bne.n	8006f14 <HAL_RCC_OscConfig+0x98>
 8006efa:	4b70      	ldr	r3, [pc, #448]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a6f      	ldr	r2, [pc, #444]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	4b6d      	ldr	r3, [pc, #436]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a6c      	ldr	r2, [pc, #432]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	e00b      	b.n	8006f2c <HAL_RCC_OscConfig+0xb0>
 8006f14:	4b69      	ldr	r3, [pc, #420]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a68      	ldr	r2, [pc, #416]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	4b66      	ldr	r3, [pc, #408]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a65      	ldr	r2, [pc, #404]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d013      	beq.n	8006f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f34:	f7fd fdbe 	bl	8004ab4 <HAL_GetTick>
 8006f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f3c:	f7fd fdba 	bl	8004ab4 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b64      	cmp	r3, #100	; 0x64
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e207      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4e:	4b5b      	ldr	r3, [pc, #364]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0f0      	beq.n	8006f3c <HAL_RCC_OscConfig+0xc0>
 8006f5a:	e014      	b.n	8006f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5c:	f7fd fdaa 	bl	8004ab4 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f64:	f7fd fda6 	bl	8004ab4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b64      	cmp	r3, #100	; 0x64
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e1f3      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f76:	4b51      	ldr	r3, [pc, #324]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f0      	bne.n	8006f64 <HAL_RCC_OscConfig+0xe8>
 8006f82:	e000      	b.n	8006f86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d063      	beq.n	800705a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f92:	4b4a      	ldr	r3, [pc, #296]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 030c 	and.w	r3, r3, #12
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00b      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f9e:	4b47      	ldr	r3, [pc, #284]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d11c      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006faa:	4b44      	ldr	r3, [pc, #272]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d116      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fb6:	4b41      	ldr	r3, [pc, #260]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_RCC_OscConfig+0x152>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d001      	beq.n	8006fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e1c7      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fce:	4b3b      	ldr	r3, [pc, #236]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	4937      	ldr	r1, [pc, #220]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fe2:	e03a      	b.n	800705a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d020      	beq.n	800702e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fec:	4b34      	ldr	r3, [pc, #208]	; (80070c0 <HAL_RCC_OscConfig+0x244>)
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff2:	f7fd fd5f 	bl	8004ab4 <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff8:	e008      	b.n	800700c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ffa:	f7fd fd5b 	bl	8004ab4 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e1a8      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800700c:	4b2b      	ldr	r3, [pc, #172]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0f0      	beq.n	8006ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007018:	4b28      	ldr	r3, [pc, #160]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	4925      	ldr	r1, [pc, #148]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8007028:	4313      	orrs	r3, r2
 800702a:	600b      	str	r3, [r1, #0]
 800702c:	e015      	b.n	800705a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800702e:	4b24      	ldr	r3, [pc, #144]	; (80070c0 <HAL_RCC_OscConfig+0x244>)
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007034:	f7fd fd3e 	bl	8004ab4 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800703c:	f7fd fd3a 	bl	8004ab4 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e187      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800704e:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f0      	bne.n	800703c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0308 	and.w	r3, r3, #8
 8007062:	2b00      	cmp	r3, #0
 8007064:	d036      	beq.n	80070d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d016      	beq.n	800709c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800706e:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <HAL_RCC_OscConfig+0x248>)
 8007070:	2201      	movs	r2, #1
 8007072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007074:	f7fd fd1e 	bl	8004ab4 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800707c:	f7fd fd1a 	bl	8004ab4 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e167      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800708e:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <HAL_RCC_OscConfig+0x240>)
 8007090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f0      	beq.n	800707c <HAL_RCC_OscConfig+0x200>
 800709a:	e01b      	b.n	80070d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <HAL_RCC_OscConfig+0x248>)
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070a2:	f7fd fd07 	bl	8004ab4 <HAL_GetTick>
 80070a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070a8:	e00e      	b.n	80070c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070aa:	f7fd fd03 	bl	8004ab4 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d907      	bls.n	80070c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e150      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
 80070bc:	40023800 	.word	0x40023800
 80070c0:	42470000 	.word	0x42470000
 80070c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070c8:	4b88      	ldr	r3, [pc, #544]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 80070ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1ea      	bne.n	80070aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8097 	beq.w	8007210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070e2:	2300      	movs	r3, #0
 80070e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070e6:	4b81      	ldr	r3, [pc, #516]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10f      	bne.n	8007112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070f2:	2300      	movs	r3, #0
 80070f4:	60bb      	str	r3, [r7, #8]
 80070f6:	4b7d      	ldr	r3, [pc, #500]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	4a7c      	ldr	r2, [pc, #496]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 80070fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007100:	6413      	str	r3, [r2, #64]	; 0x40
 8007102:	4b7a      	ldr	r3, [pc, #488]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800710a:	60bb      	str	r3, [r7, #8]
 800710c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800710e:	2301      	movs	r3, #1
 8007110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007112:	4b77      	ldr	r3, [pc, #476]	; (80072f0 <HAL_RCC_OscConfig+0x474>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d118      	bne.n	8007150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800711e:	4b74      	ldr	r3, [pc, #464]	; (80072f0 <HAL_RCC_OscConfig+0x474>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a73      	ldr	r2, [pc, #460]	; (80072f0 <HAL_RCC_OscConfig+0x474>)
 8007124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800712a:	f7fd fcc3 	bl	8004ab4 <HAL_GetTick>
 800712e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007130:	e008      	b.n	8007144 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007132:	f7fd fcbf 	bl	8004ab4 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e10c      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007144:	4b6a      	ldr	r3, [pc, #424]	; (80072f0 <HAL_RCC_OscConfig+0x474>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0f0      	beq.n	8007132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d106      	bne.n	8007166 <HAL_RCC_OscConfig+0x2ea>
 8007158:	4b64      	ldr	r3, [pc, #400]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 800715a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715c:	4a63      	ldr	r2, [pc, #396]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	6713      	str	r3, [r2, #112]	; 0x70
 8007164:	e01c      	b.n	80071a0 <HAL_RCC_OscConfig+0x324>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b05      	cmp	r3, #5
 800716c:	d10c      	bne.n	8007188 <HAL_RCC_OscConfig+0x30c>
 800716e:	4b5f      	ldr	r3, [pc, #380]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 8007170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007172:	4a5e      	ldr	r2, [pc, #376]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 8007174:	f043 0304 	orr.w	r3, r3, #4
 8007178:	6713      	str	r3, [r2, #112]	; 0x70
 800717a:	4b5c      	ldr	r3, [pc, #368]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 800717c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717e:	4a5b      	ldr	r2, [pc, #364]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	6713      	str	r3, [r2, #112]	; 0x70
 8007186:	e00b      	b.n	80071a0 <HAL_RCC_OscConfig+0x324>
 8007188:	4b58      	ldr	r3, [pc, #352]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 800718a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718c:	4a57      	ldr	r2, [pc, #348]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	6713      	str	r3, [r2, #112]	; 0x70
 8007194:	4b55      	ldr	r3, [pc, #340]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 8007196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007198:	4a54      	ldr	r2, [pc, #336]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 800719a:	f023 0304 	bic.w	r3, r3, #4
 800719e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d015      	beq.n	80071d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a8:	f7fd fc84 	bl	8004ab4 <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ae:	e00a      	b.n	80071c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071b0:	f7fd fc80 	bl	8004ab4 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80071be:	4293      	cmp	r3, r2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e0cb      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071c6:	4b49      	ldr	r3, [pc, #292]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0ee      	beq.n	80071b0 <HAL_RCC_OscConfig+0x334>
 80071d2:	e014      	b.n	80071fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071d4:	f7fd fc6e 	bl	8004ab4 <HAL_GetTick>
 80071d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071da:	e00a      	b.n	80071f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071dc:	f7fd fc6a 	bl	8004ab4 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e0b5      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071f2:	4b3e      	ldr	r3, [pc, #248]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1ee      	bne.n	80071dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d105      	bne.n	8007210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007204:	4b39      	ldr	r3, [pc, #228]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	4a38      	ldr	r2, [pc, #224]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 800720a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800720e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80a1 	beq.w	800735c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800721a:	4b34      	ldr	r3, [pc, #208]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 030c 	and.w	r3, r3, #12
 8007222:	2b08      	cmp	r3, #8
 8007224:	d05c      	beq.n	80072e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d141      	bne.n	80072b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800722e:	4b31      	ldr	r3, [pc, #196]	; (80072f4 <HAL_RCC_OscConfig+0x478>)
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007234:	f7fd fc3e 	bl	8004ab4 <HAL_GetTick>
 8007238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800723a:	e008      	b.n	800724e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800723c:	f7fd fc3a 	bl	8004ab4 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d901      	bls.n	800724e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e087      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800724e:	4b27      	ldr	r3, [pc, #156]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1f0      	bne.n	800723c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69da      	ldr	r2, [r3, #28]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	019b      	lsls	r3, r3, #6
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	3b01      	subs	r3, #1
 8007274:	041b      	lsls	r3, r3, #16
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	061b      	lsls	r3, r3, #24
 800727e:	491b      	ldr	r1, [pc, #108]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 8007280:	4313      	orrs	r3, r2
 8007282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007284:	4b1b      	ldr	r3, [pc, #108]	; (80072f4 <HAL_RCC_OscConfig+0x478>)
 8007286:	2201      	movs	r2, #1
 8007288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800728a:	f7fd fc13 	bl	8004ab4 <HAL_GetTick>
 800728e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007290:	e008      	b.n	80072a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007292:	f7fd fc0f 	bl	8004ab4 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d901      	bls.n	80072a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e05c      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072a4:	4b11      	ldr	r3, [pc, #68]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0f0      	beq.n	8007292 <HAL_RCC_OscConfig+0x416>
 80072b0:	e054      	b.n	800735c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072b2:	4b10      	ldr	r3, [pc, #64]	; (80072f4 <HAL_RCC_OscConfig+0x478>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b8:	f7fd fbfc 	bl	8004ab4 <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072c0:	f7fd fbf8 	bl	8004ab4 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e045      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072d2:	4b06      	ldr	r3, [pc, #24]	; (80072ec <HAL_RCC_OscConfig+0x470>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f0      	bne.n	80072c0 <HAL_RCC_OscConfig+0x444>
 80072de:	e03d      	b.n	800735c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d107      	bne.n	80072f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e038      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
 80072ec:	40023800 	.word	0x40023800
 80072f0:	40007000 	.word	0x40007000
 80072f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072f8:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <HAL_RCC_OscConfig+0x4ec>)
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d028      	beq.n	8007358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007310:	429a      	cmp	r2, r3
 8007312:	d121      	bne.n	8007358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800731e:	429a      	cmp	r2, r3
 8007320:	d11a      	bne.n	8007358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007328:	4013      	ands	r3, r2
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800732e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007330:	4293      	cmp	r3, r2
 8007332:	d111      	bne.n	8007358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	3b01      	subs	r3, #1
 8007342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007344:	429a      	cmp	r2, r3
 8007346:	d107      	bne.n	8007358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007354:	429a      	cmp	r2, r3
 8007356:	d001      	beq.n	800735c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e000      	b.n	800735e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	40023800 	.word	0x40023800

0800736c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e0cc      	b.n	800751a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007380:	4b68      	ldr	r3, [pc, #416]	; (8007524 <HAL_RCC_ClockConfig+0x1b8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d90c      	bls.n	80073a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738e:	4b65      	ldr	r3, [pc, #404]	; (8007524 <HAL_RCC_ClockConfig+0x1b8>)
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007396:	4b63      	ldr	r3, [pc, #396]	; (8007524 <HAL_RCC_ClockConfig+0x1b8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d001      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e0b8      	b.n	800751a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d020      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073c0:	4b59      	ldr	r3, [pc, #356]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	4a58      	ldr	r2, [pc, #352]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80073c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073d8:	4b53      	ldr	r3, [pc, #332]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	4a52      	ldr	r2, [pc, #328]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80073de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073e4:	4b50      	ldr	r3, [pc, #320]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	494d      	ldr	r1, [pc, #308]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d044      	beq.n	800748c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d107      	bne.n	800741a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800740a:	4b47      	ldr	r3, [pc, #284]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d119      	bne.n	800744a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e07f      	b.n	800751a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d003      	beq.n	800742a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007426:	2b03      	cmp	r3, #3
 8007428:	d107      	bne.n	800743a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800742a:	4b3f      	ldr	r3, [pc, #252]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d109      	bne.n	800744a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e06f      	b.n	800751a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800743a:	4b3b      	ldr	r3, [pc, #236]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e067      	b.n	800751a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800744a:	4b37      	ldr	r3, [pc, #220]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f023 0203 	bic.w	r2, r3, #3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	4934      	ldr	r1, [pc, #208]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 8007458:	4313      	orrs	r3, r2
 800745a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800745c:	f7fd fb2a 	bl	8004ab4 <HAL_GetTick>
 8007460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007462:	e00a      	b.n	800747a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007464:	f7fd fb26 	bl	8004ab4 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007472:	4293      	cmp	r3, r2
 8007474:	d901      	bls.n	800747a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e04f      	b.n	800751a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800747a:	4b2b      	ldr	r3, [pc, #172]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 020c 	and.w	r2, r3, #12
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	429a      	cmp	r2, r3
 800748a:	d1eb      	bne.n	8007464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800748c:	4b25      	ldr	r3, [pc, #148]	; (8007524 <HAL_RCC_ClockConfig+0x1b8>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d20c      	bcs.n	80074b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800749a:	4b22      	ldr	r3, [pc, #136]	; (8007524 <HAL_RCC_ClockConfig+0x1b8>)
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074a2:	4b20      	ldr	r3, [pc, #128]	; (8007524 <HAL_RCC_ClockConfig+0x1b8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d001      	beq.n	80074b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e032      	b.n	800751a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074c0:	4b19      	ldr	r3, [pc, #100]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	4916      	ldr	r1, [pc, #88]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	490e      	ldr	r1, [pc, #56]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074f2:	f000 f821 	bl	8007538 <HAL_RCC_GetSysClockFreq>
 80074f6:	4602      	mov	r2, r0
 80074f8:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <HAL_RCC_ClockConfig+0x1bc>)
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	091b      	lsrs	r3, r3, #4
 80074fe:	f003 030f 	and.w	r3, r3, #15
 8007502:	490a      	ldr	r1, [pc, #40]	; (800752c <HAL_RCC_ClockConfig+0x1c0>)
 8007504:	5ccb      	ldrb	r3, [r1, r3]
 8007506:	fa22 f303 	lsr.w	r3, r2, r3
 800750a:	4a09      	ldr	r2, [pc, #36]	; (8007530 <HAL_RCC_ClockConfig+0x1c4>)
 800750c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <HAL_RCC_ClockConfig+0x1c8>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4618      	mov	r0, r3
 8007514:	f7fd fa8a 	bl	8004a2c <HAL_InitTick>

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40023c00 	.word	0x40023c00
 8007528:	40023800 	.word	0x40023800
 800752c:	0800ede4 	.word	0x0800ede4
 8007530:	200001c8 	.word	0x200001c8
 8007534:	200001d0 	.word	0x200001d0

08007538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800753c:	b090      	sub	sp, #64	; 0x40
 800753e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
 8007544:	2300      	movs	r3, #0
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007548:	2300      	movs	r3, #0
 800754a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007550:	4b59      	ldr	r3, [pc, #356]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 030c 	and.w	r3, r3, #12
 8007558:	2b08      	cmp	r3, #8
 800755a:	d00d      	beq.n	8007578 <HAL_RCC_GetSysClockFreq+0x40>
 800755c:	2b08      	cmp	r3, #8
 800755e:	f200 80a1 	bhi.w	80076a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <HAL_RCC_GetSysClockFreq+0x34>
 8007566:	2b04      	cmp	r3, #4
 8007568:	d003      	beq.n	8007572 <HAL_RCC_GetSysClockFreq+0x3a>
 800756a:	e09b      	b.n	80076a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800756c:	4b53      	ldr	r3, [pc, #332]	; (80076bc <HAL_RCC_GetSysClockFreq+0x184>)
 800756e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007570:	e09b      	b.n	80076aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007572:	4b53      	ldr	r3, [pc, #332]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007574:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007576:	e098      	b.n	80076aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007578:	4b4f      	ldr	r3, [pc, #316]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007582:	4b4d      	ldr	r3, [pc, #308]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d028      	beq.n	80075e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800758e:	4b4a      	ldr	r3, [pc, #296]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	099b      	lsrs	r3, r3, #6
 8007594:	2200      	movs	r2, #0
 8007596:	623b      	str	r3, [r7, #32]
 8007598:	627a      	str	r2, [r7, #36]	; 0x24
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80075a0:	2100      	movs	r1, #0
 80075a2:	4b47      	ldr	r3, [pc, #284]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80075a4:	fb03 f201 	mul.w	r2, r3, r1
 80075a8:	2300      	movs	r3, #0
 80075aa:	fb00 f303 	mul.w	r3, r0, r3
 80075ae:	4413      	add	r3, r2
 80075b0:	4a43      	ldr	r2, [pc, #268]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80075b2:	fba0 1202 	umull	r1, r2, r0, r2
 80075b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075b8:	460a      	mov	r2, r1
 80075ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80075bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075be:	4413      	add	r3, r2
 80075c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c4:	2200      	movs	r2, #0
 80075c6:	61bb      	str	r3, [r7, #24]
 80075c8:	61fa      	str	r2, [r7, #28]
 80075ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80075d2:	f7f9 fb01 	bl	8000bd8 <__aeabi_uldivmod>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4613      	mov	r3, r2
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075de:	e053      	b.n	8007688 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075e0:	4b35      	ldr	r3, [pc, #212]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	099b      	lsrs	r3, r3, #6
 80075e6:	2200      	movs	r2, #0
 80075e8:	613b      	str	r3, [r7, #16]
 80075ea:	617a      	str	r2, [r7, #20]
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80075f2:	f04f 0b00 	mov.w	fp, #0
 80075f6:	4652      	mov	r2, sl
 80075f8:	465b      	mov	r3, fp
 80075fa:	f04f 0000 	mov.w	r0, #0
 80075fe:	f04f 0100 	mov.w	r1, #0
 8007602:	0159      	lsls	r1, r3, #5
 8007604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007608:	0150      	lsls	r0, r2, #5
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	ebb2 080a 	subs.w	r8, r2, sl
 8007612:	eb63 090b 	sbc.w	r9, r3, fp
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007622:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007626:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800762a:	ebb2 0408 	subs.w	r4, r2, r8
 800762e:	eb63 0509 	sbc.w	r5, r3, r9
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	f04f 0300 	mov.w	r3, #0
 800763a:	00eb      	lsls	r3, r5, #3
 800763c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007640:	00e2      	lsls	r2, r4, #3
 8007642:	4614      	mov	r4, r2
 8007644:	461d      	mov	r5, r3
 8007646:	eb14 030a 	adds.w	r3, r4, sl
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	eb45 030b 	adc.w	r3, r5, fp
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	f04f 0200 	mov.w	r2, #0
 8007656:	f04f 0300 	mov.w	r3, #0
 800765a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800765e:	4629      	mov	r1, r5
 8007660:	028b      	lsls	r3, r1, #10
 8007662:	4621      	mov	r1, r4
 8007664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007668:	4621      	mov	r1, r4
 800766a:	028a      	lsls	r2, r1, #10
 800766c:	4610      	mov	r0, r2
 800766e:	4619      	mov	r1, r3
 8007670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007672:	2200      	movs	r2, #0
 8007674:	60bb      	str	r3, [r7, #8]
 8007676:	60fa      	str	r2, [r7, #12]
 8007678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800767c:	f7f9 faac 	bl	8000bd8 <__aeabi_uldivmod>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4613      	mov	r3, r2
 8007686:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007688:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	0c1b      	lsrs	r3, r3, #16
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	3301      	adds	r3, #1
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076a2:	e002      	b.n	80076aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076a4:	4b05      	ldr	r3, [pc, #20]	; (80076bc <HAL_RCC_GetSysClockFreq+0x184>)
 80076a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3740      	adds	r7, #64	; 0x40
 80076b0:	46bd      	mov	sp, r7
 80076b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076b6:	bf00      	nop
 80076b8:	40023800 	.word	0x40023800
 80076bc:	00f42400 	.word	0x00f42400
 80076c0:	017d7840 	.word	0x017d7840

080076c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076c8:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80076ca:	681b      	ldr	r3, [r3, #0]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	200001c8 	.word	0x200001c8

080076dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076e0:	f7ff fff0 	bl	80076c4 <HAL_RCC_GetHCLKFreq>
 80076e4:	4602      	mov	r2, r0
 80076e6:	4b05      	ldr	r3, [pc, #20]	; (80076fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	0a9b      	lsrs	r3, r3, #10
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	4903      	ldr	r1, [pc, #12]	; (8007700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076f2:	5ccb      	ldrb	r3, [r1, r3]
 80076f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40023800 	.word	0x40023800
 8007700:	0800edf4 	.word	0x0800edf4

08007704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007708:	f7ff ffdc 	bl	80076c4 <HAL_RCC_GetHCLKFreq>
 800770c:	4602      	mov	r2, r0
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	0b5b      	lsrs	r3, r3, #13
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	4903      	ldr	r1, [pc, #12]	; (8007728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800771a:	5ccb      	ldrb	r3, [r1, r3]
 800771c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007720:	4618      	mov	r0, r3
 8007722:	bd80      	pop	{r7, pc}
 8007724:	40023800 	.word	0x40023800
 8007728:	0800edf4 	.word	0x0800edf4

0800772c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d105      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007750:	2b00      	cmp	r3, #0
 8007752:	d038      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007754:	4b68      	ldr	r3, [pc, #416]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800775a:	f7fd f9ab 	bl	8004ab4 <HAL_GetTick>
 800775e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007760:	e008      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007762:	f7fd f9a7 	bl	8004ab4 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e0bd      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007774:	4b61      	ldr	r3, [pc, #388]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1f0      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	019b      	lsls	r3, r3, #6
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	071b      	lsls	r3, r3, #28
 8007792:	495a      	ldr	r1, [pc, #360]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007794:	4313      	orrs	r3, r2
 8007796:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800779a:	4b57      	ldr	r3, [pc, #348]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800779c:	2201      	movs	r2, #1
 800779e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80077a0:	f7fd f988 	bl	8004ab4 <HAL_GetTick>
 80077a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077a6:	e008      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80077a8:	f7fd f984 	bl	8004ab4 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d901      	bls.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e09a      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077ba:	4b50      	ldr	r3, [pc, #320]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0f0      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 8083 	beq.w	80078da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	4b48      	ldr	r3, [pc, #288]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	4a47      	ldr	r2, [pc, #284]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e2:	6413      	str	r3, [r2, #64]	; 0x40
 80077e4:	4b45      	ldr	r3, [pc, #276]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80077f0:	4b43      	ldr	r3, [pc, #268]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a42      	ldr	r2, [pc, #264]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077fa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077fc:	f7fd f95a 	bl	8004ab4 <HAL_GetTick>
 8007800:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007802:	e008      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007804:	f7fd f956 	bl	8004ab4 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d901      	bls.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e06c      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007816:	4b3a      	ldr	r3, [pc, #232]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0f0      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007822:	4b36      	ldr	r3, [pc, #216]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800782a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d02f      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	429a      	cmp	r2, r3
 800783e:	d028      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007840:	4b2e      	ldr	r3, [pc, #184]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007848:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800784a:	4b2e      	ldr	r3, [pc, #184]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800784c:	2201      	movs	r2, #1
 800784e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007850:	4b2c      	ldr	r3, [pc, #176]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007856:	4a29      	ldr	r2, [pc, #164]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800785c:	4b27      	ldr	r3, [pc, #156]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b01      	cmp	r3, #1
 8007866:	d114      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007868:	f7fd f924 	bl	8004ab4 <HAL_GetTick>
 800786c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800786e:	e00a      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007870:	f7fd f920 	bl	8004ab4 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	f241 3288 	movw	r2, #5000	; 0x1388
 800787e:	4293      	cmp	r3, r2
 8007880:	d901      	bls.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e034      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007886:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0ee      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800789a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800789e:	d10d      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80078a0:	4b16      	ldr	r3, [pc, #88]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80078b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b4:	4911      	ldr	r1, [pc, #68]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	608b      	str	r3, [r1, #8]
 80078ba:	e005      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80078bc:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	4a0e      	ldr	r2, [pc, #56]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80078c6:	6093      	str	r3, [r2, #8]
 80078c8:	4b0c      	ldr	r3, [pc, #48]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078d4:	4909      	ldr	r1, [pc, #36]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	7d1a      	ldrb	r2, [r3, #20]
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80078ec:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	42470068 	.word	0x42470068
 80078fc:	40023800 	.word	0x40023800
 8007900:	40007000 	.word	0x40007000
 8007904:	42470e40 	.word	0x42470e40
 8007908:	424711e0 	.word	0x424711e0

0800790c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e066      	b.n	80079f0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7f5b      	ldrb	r3, [r3, #29]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d105      	bne.n	8007938 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fc f896 	bl	8003a64 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	22ca      	movs	r2, #202	; 0xca
 8007944:	625a      	str	r2, [r3, #36]	; 0x24
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2253      	movs	r2, #83	; 0x53
 800794c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fa45 	bl	8007dde <RTC_EnterInitMode>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d12c      	bne.n	80079b8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6812      	ldr	r2, [r2, #0]
 8007968:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800796c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007970:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6899      	ldr	r1, [r3, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	431a      	orrs	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	431a      	orrs	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68d2      	ldr	r2, [r2, #12]
 8007998:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6919      	ldr	r1, [r3, #16]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	041a      	lsls	r2, r3, #16
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa4c 	bl	8007e4c <RTC_ExitInitMode>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d113      	bne.n	80079e6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	22ff      	movs	r2, #255	; 0xff
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80079f8:	b590      	push	{r4, r7, lr}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	7f1b      	ldrb	r3, [r3, #28]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_RTC_SetTime+0x1c>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e087      	b.n	8007b24 <HAL_RTC_SetTime+0x12c>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2201      	movs	r2, #1
 8007a18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d126      	bne.n	8007a74 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2200      	movs	r2, #0
 8007a38:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fa29 	bl	8007e96 <RTC_ByteToBcd2>
 8007a44:	4603      	mov	r3, r0
 8007a46:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	785b      	ldrb	r3, [r3, #1]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fa22 	bl	8007e96 <RTC_ByteToBcd2>
 8007a52:	4603      	mov	r3, r0
 8007a54:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007a56:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	789b      	ldrb	r3, [r3, #2]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fa1a 	bl	8007e96 <RTC_ByteToBcd2>
 8007a62:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a64:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	78db      	ldrb	r3, [r3, #3]
 8007a6c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e018      	b.n	8007aa6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d102      	bne.n	8007a88 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2200      	movs	r2, #0
 8007a86:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	785b      	ldrb	r3, [r3, #1]
 8007a92:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007a94:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007a9a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	78db      	ldrb	r3, [r3, #3]
 8007aa0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	22ca      	movs	r2, #202	; 0xca
 8007aac:	625a      	str	r2, [r3, #36]	; 0x24
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2253      	movs	r2, #83	; 0x53
 8007ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f991 	bl	8007dde <RTC_EnterInitMode>
 8007abc:	4603      	mov	r3, r0
 8007abe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007ac0:	7cfb      	ldrb	r3, [r7, #19]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d120      	bne.n	8007b08 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007ad0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007ad4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ae4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6899      	ldr	r1, [r3, #8]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	431a      	orrs	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 f9a4 	bl	8007e4c <RTC_ExitInitMode>
 8007b04:	4603      	mov	r3, r0
 8007b06:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007b08:	7cfb      	ldrb	r3, [r7, #19]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d102      	bne.n	8007b14 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	22ff      	movs	r2, #255	; 0xff
 8007b1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	771a      	strb	r2, [r3, #28]

  return status;
 8007b22:	7cfb      	ldrb	r3, [r7, #19]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd90      	pop	{r4, r7, pc}

08007b2c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007b5e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	0c1b      	lsrs	r3, r3, #16
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	0a1b      	lsrs	r3, r3, #8
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	0d9b      	lsrs	r3, r3, #22
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d11a      	bne.n	8007bde <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 f98f 	bl	8007ed0 <RTC_Bcd2ToByte>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 f986 	bl	8007ed0 <RTC_Bcd2ToByte>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	789b      	ldrb	r3, [r3, #2]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 f97d 	bl	8007ed0 <RTC_Bcd2ToByte>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	461a      	mov	r2, r3
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007be8:	b590      	push	{r4, r7, lr}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	7f1b      	ldrb	r3, [r3, #28]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_RTC_SetDate+0x1c>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e071      	b.n	8007ce8 <HAL_RTC_SetDate+0x100>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10e      	bne.n	8007c34 <HAL_RTC_SetDate+0x4c>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	f003 0310 	and.w	r3, r3, #16
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d008      	beq.n	8007c34 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	f023 0310 	bic.w	r3, r3, #16
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	330a      	adds	r3, #10
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d11c      	bne.n	8007c74 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	78db      	ldrb	r3, [r3, #3]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f929 	bl	8007e96 <RTC_ByteToBcd2>
 8007c44:	4603      	mov	r3, r0
 8007c46:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	785b      	ldrb	r3, [r3, #1]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 f922 	bl	8007e96 <RTC_ByteToBcd2>
 8007c52:	4603      	mov	r3, r0
 8007c54:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c56:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	789b      	ldrb	r3, [r3, #2]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 f91a 	bl	8007e96 <RTC_ByteToBcd2>
 8007c62:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c64:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]
 8007c72:	e00e      	b.n	8007c92 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	78db      	ldrb	r3, [r3, #3]
 8007c78:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c80:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007c86:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	22ca      	movs	r2, #202	; 0xca
 8007c98:	625a      	str	r2, [r3, #36]	; 0x24
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2253      	movs	r2, #83	; 0x53
 8007ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f89b 	bl	8007dde <RTC_EnterInitMode>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007cac:	7cfb      	ldrb	r3, [r7, #19]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10c      	bne.n	8007ccc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007cbc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007cc0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 f8c2 	bl	8007e4c <RTC_ExitInitMode>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007ccc:	7cfb      	ldrb	r3, [r7, #19]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	22ff      	movs	r2, #255	; 0xff
 8007cde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	771a      	strb	r2, [r3, #28]

  return status;
 8007ce6:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	371c      	adds	r7, #28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd90      	pop	{r4, r7, pc}

08007cf0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	0c1b      	lsrs	r3, r3, #16
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	0a1b      	lsrs	r3, r3, #8
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 031f 	and.w	r3, r3, #31
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	0b5b      	lsrs	r3, r3, #13
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d11a      	bne.n	8007d84 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	78db      	ldrb	r3, [r3, #3]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f8bc 	bl	8007ed0 <RTC_Bcd2ToByte>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	785b      	ldrb	r3, [r3, #1]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 f8b3 	bl	8007ed0 <RTC_Bcd2ToByte>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	789b      	ldrb	r3, [r3, #2]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f8aa 	bl	8007ed0 <RTC_Bcd2ToByte>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	461a      	mov	r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007da8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007daa:	f7fc fe83 	bl	8004ab4 <HAL_GetTick>
 8007dae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007db0:	e009      	b.n	8007dc6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007db2:	f7fc fe7f 	bl	8004ab4 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e007      	b.n	8007dd6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0ee      	beq.n	8007db2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d122      	bne.n	8007e42 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e0c:	f7fc fe52 	bl	8004ab4 <HAL_GetTick>
 8007e10:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007e12:	e00c      	b.n	8007e2e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e14:	f7fc fe4e 	bl	8004ab4 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e22:	d904      	bls.n	8007e2e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2204      	movs	r2, #4
 8007e28:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <RTC_EnterInitMode+0x64>
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d1e8      	bne.n	8007e14 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e66:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f003 0320 	and.w	r3, r3, #32
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7ff ff89 	bl	8007d8e <HAL_RTC_WaitForSynchro>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d004      	beq.n	8007e8c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2204      	movs	r2, #4
 8007e86:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b085      	sub	sp, #20
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007ea4:	e005      	b.n	8007eb2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	3b0a      	subs	r3, #10
 8007eb0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	2b09      	cmp	r3, #9
 8007eb6:	d8f6      	bhi.n	8007ea6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	79fb      	ldrb	r3, [r7, #7]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	b2db      	uxtb	r3, r3
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	0092      	lsls	r2, r2, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	f003 030f 	and.w	r3, r3, #15
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	4413      	add	r3, r2
 8007efa:	b2db      	uxtb	r3, r3
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e07b      	b.n	8008012 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d108      	bne.n	8007f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f2a:	d009      	beq.n	8007f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	61da      	str	r2, [r3, #28]
 8007f32:	e005      	b.n	8007f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d106      	bne.n	8007f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7fb fde4 	bl	8003b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc4:	ea42 0103 	orr.w	r1, r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	0c1b      	lsrs	r3, r3, #16
 8007fde:	f003 0104 	and.w	r1, r3, #4
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe6:	f003 0210 	and.w	r2, r3, #16
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e041      	b.n	80080b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d106      	bne.n	8008046 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7fb ff97 	bl	8003f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3304      	adds	r3, #4
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f000 fd61 	bl	8008b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e041      	b.n	800814e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d106      	bne.n	80080e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f839 	bl	8008156 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3304      	adds	r3, #4
 80080f4:	4619      	mov	r1, r3
 80080f6:	4610      	mov	r0, r2
 80080f8:	f000 fd12 	bl	8008b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d109      	bne.n	8008198 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b02      	cmp	r3, #2
 800818e:	bf0c      	ite	eq
 8008190:	2301      	moveq	r3, #1
 8008192:	2300      	movne	r3, #0
 8008194:	b2db      	uxtb	r3, r3
 8008196:	e022      	b.n	80081de <HAL_TIM_PWM_Start_DMA+0x72>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b04      	cmp	r3, #4
 800819c:	d109      	bne.n	80081b2 <HAL_TIM_PWM_Start_DMA+0x46>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	bf0c      	ite	eq
 80081aa:	2301      	moveq	r3, #1
 80081ac:	2300      	movne	r3, #0
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	e015      	b.n	80081de <HAL_TIM_PWM_Start_DMA+0x72>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d109      	bne.n	80081cc <HAL_TIM_PWM_Start_DMA+0x60>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	bf0c      	ite	eq
 80081c4:	2301      	moveq	r3, #1
 80081c6:	2300      	movne	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	e008      	b.n	80081de <HAL_TIM_PWM_Start_DMA+0x72>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	bf0c      	ite	eq
 80081d8:	2301      	moveq	r3, #1
 80081da:	2300      	movne	r3, #0
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80081e2:	2302      	movs	r3, #2
 80081e4:	e15d      	b.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d109      	bne.n	8008200 <HAL_TIM_PWM_Start_DMA+0x94>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	bf0c      	ite	eq
 80081f8:	2301      	moveq	r3, #1
 80081fa:	2300      	movne	r3, #0
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	e022      	b.n	8008246 <HAL_TIM_PWM_Start_DMA+0xda>
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2b04      	cmp	r3, #4
 8008204:	d109      	bne.n	800821a <HAL_TIM_PWM_Start_DMA+0xae>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b01      	cmp	r3, #1
 8008210:	bf0c      	ite	eq
 8008212:	2301      	moveq	r3, #1
 8008214:	2300      	movne	r3, #0
 8008216:	b2db      	uxtb	r3, r3
 8008218:	e015      	b.n	8008246 <HAL_TIM_PWM_Start_DMA+0xda>
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b08      	cmp	r3, #8
 800821e:	d109      	bne.n	8008234 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b01      	cmp	r3, #1
 800822a:	bf0c      	ite	eq
 800822c:	2301      	moveq	r3, #1
 800822e:	2300      	movne	r3, #0
 8008230:	b2db      	uxtb	r3, r3
 8008232:	e008      	b.n	8008246 <HAL_TIM_PWM_Start_DMA+0xda>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b01      	cmp	r3, #1
 800823e:	bf0c      	ite	eq
 8008240:	2301      	moveq	r3, #1
 8008242:	2300      	movne	r3, #0
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d024      	beq.n	8008294 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <HAL_TIM_PWM_Start_DMA+0xee>
 8008250:	887b      	ldrh	r3, [r7, #2]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e123      	b.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d104      	bne.n	800826a <HAL_TIM_PWM_Start_DMA+0xfe>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2202      	movs	r2, #2
 8008264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008268:	e016      	b.n	8008298 <HAL_TIM_PWM_Start_DMA+0x12c>
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b04      	cmp	r3, #4
 800826e:	d104      	bne.n	800827a <HAL_TIM_PWM_Start_DMA+0x10e>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2202      	movs	r2, #2
 8008274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008278:	e00e      	b.n	8008298 <HAL_TIM_PWM_Start_DMA+0x12c>
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2b08      	cmp	r3, #8
 800827e:	d104      	bne.n	800828a <HAL_TIM_PWM_Start_DMA+0x11e>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2202      	movs	r2, #2
 8008284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008288:	e006      	b.n	8008298 <HAL_TIM_PWM_Start_DMA+0x12c>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2202      	movs	r2, #2
 800828e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008292:	e001      	b.n	8008298 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e104      	b.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2b0c      	cmp	r3, #12
 800829c:	f200 80ae 	bhi.w	80083fc <HAL_TIM_PWM_Start_DMA+0x290>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082dd 	.word	0x080082dd
 80082ac:	080083fd 	.word	0x080083fd
 80082b0:	080083fd 	.word	0x080083fd
 80082b4:	080083fd 	.word	0x080083fd
 80082b8:	08008325 	.word	0x08008325
 80082bc:	080083fd 	.word	0x080083fd
 80082c0:	080083fd 	.word	0x080083fd
 80082c4:	080083fd 	.word	0x080083fd
 80082c8:	0800836d 	.word	0x0800836d
 80082cc:	080083fd 	.word	0x080083fd
 80082d0:	080083fd 	.word	0x080083fd
 80082d4:	080083fd 	.word	0x080083fd
 80082d8:	080083b5 	.word	0x080083b5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	4a72      	ldr	r2, [pc, #456]	; (80084ac <HAL_TIM_PWM_Start_DMA+0x340>)
 80082e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	4a71      	ldr	r2, [pc, #452]	; (80084b0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80082ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	4a70      	ldr	r2, [pc, #448]	; (80084b4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80082f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3334      	adds	r3, #52	; 0x34
 8008300:	461a      	mov	r2, r3
 8008302:	887b      	ldrh	r3, [r7, #2]
 8008304:	f7fc fe14 	bl	8004f30 <HAL_DMA_Start_IT>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e0c7      	b.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008320:	60da      	str	r2, [r3, #12]
      break;
 8008322:	e06e      	b.n	8008402 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008328:	4a60      	ldr	r2, [pc, #384]	; (80084ac <HAL_TIM_PWM_Start_DMA+0x340>)
 800832a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	4a5f      	ldr	r2, [pc, #380]	; (80084b0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	4a5e      	ldr	r2, [pc, #376]	; (80084b4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800833a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3338      	adds	r3, #56	; 0x38
 8008348:	461a      	mov	r2, r3
 800834a:	887b      	ldrh	r3, [r7, #2]
 800834c:	f7fc fdf0 	bl	8004f30 <HAL_DMA_Start_IT>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e0a3      	b.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008368:	60da      	str	r2, [r3, #12]
      break;
 800836a:	e04a      	b.n	8008402 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	4a4e      	ldr	r2, [pc, #312]	; (80084ac <HAL_TIM_PWM_Start_DMA+0x340>)
 8008372:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	4a4d      	ldr	r2, [pc, #308]	; (80084b0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800837a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	4a4c      	ldr	r2, [pc, #304]	; (80084b4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008382:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	333c      	adds	r3, #60	; 0x3c
 8008390:	461a      	mov	r2, r3
 8008392:	887b      	ldrh	r3, [r7, #2]
 8008394:	f7fc fdcc 	bl	8004f30 <HAL_DMA_Start_IT>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e07f      	b.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083b0:	60da      	str	r2, [r3, #12]
      break;
 80083b2:	e026      	b.n	8008402 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b8:	4a3c      	ldr	r2, [pc, #240]	; (80084ac <HAL_TIM_PWM_Start_DMA+0x340>)
 80083ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c0:	4a3b      	ldr	r2, [pc, #236]	; (80084b0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80083c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c8:	4a3a      	ldr	r2, [pc, #232]	; (80084b4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80083ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3340      	adds	r3, #64	; 0x40
 80083d8:	461a      	mov	r2, r3
 80083da:	887b      	ldrh	r3, [r7, #2]
 80083dc:	f7fc fda8 	bl	8004f30 <HAL_DMA_Start_IT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e05b      	b.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68da      	ldr	r2, [r3, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083f8:	60da      	str	r2, [r3, #12]
      break;
 80083fa:	e002      	b.n	8008402 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008400:	bf00      	nop
  }

  if (status == HAL_OK)
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d14b      	bne.n	80084a0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2201      	movs	r2, #1
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	4618      	mov	r0, r3
 8008412:	f000 fe2b 	bl	800906c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a27      	ldr	r2, [pc, #156]	; (80084b8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d107      	bne.n	8008430 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800842e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a20      	ldr	r2, [pc, #128]	; (80084b8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d018      	beq.n	800846c <HAL_TIM_PWM_Start_DMA+0x300>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008442:	d013      	beq.n	800846c <HAL_TIM_PWM_Start_DMA+0x300>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a1c      	ldr	r2, [pc, #112]	; (80084bc <HAL_TIM_PWM_Start_DMA+0x350>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00e      	beq.n	800846c <HAL_TIM_PWM_Start_DMA+0x300>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a1b      	ldr	r2, [pc, #108]	; (80084c0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d009      	beq.n	800846c <HAL_TIM_PWM_Start_DMA+0x300>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a19      	ldr	r2, [pc, #100]	; (80084c4 <HAL_TIM_PWM_Start_DMA+0x358>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d004      	beq.n	800846c <HAL_TIM_PWM_Start_DMA+0x300>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d111      	bne.n	8008490 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	2b06      	cmp	r3, #6
 800847c:	d010      	beq.n	80084a0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f042 0201 	orr.w	r2, r2, #1
 800848c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800848e:	e007      	b.n	80084a0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 0201 	orr.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	08008a11 	.word	0x08008a11
 80084b0:	08008ab9 	.word	0x08008ab9
 80084b4:	0800897f 	.word	0x0800897f
 80084b8:	40010000 	.word	0x40010000
 80084bc:	40000400 	.word	0x40000400
 80084c0:	40000800 	.word	0x40000800
 80084c4:	40000c00 	.word	0x40000c00
 80084c8:	40014000 	.word	0x40014000

080084cc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b0c      	cmp	r3, #12
 80084de:	d855      	bhi.n	800858c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	0800851d 	.word	0x0800851d
 80084ec:	0800858d 	.word	0x0800858d
 80084f0:	0800858d 	.word	0x0800858d
 80084f4:	0800858d 	.word	0x0800858d
 80084f8:	08008539 	.word	0x08008539
 80084fc:	0800858d 	.word	0x0800858d
 8008500:	0800858d 	.word	0x0800858d
 8008504:	0800858d 	.word	0x0800858d
 8008508:	08008555 	.word	0x08008555
 800850c:	0800858d 	.word	0x0800858d
 8008510:	0800858d 	.word	0x0800858d
 8008514:	0800858d 	.word	0x0800858d
 8008518:	08008571 	.word	0x08008571
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800852a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	4618      	mov	r0, r3
 8008532:	f7fc fdc5 	bl	80050c0 <HAL_DMA_Abort_IT>
      break;
 8008536:	e02c      	b.n	8008592 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008546:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	4618      	mov	r0, r3
 800854e:	f7fc fdb7 	bl	80050c0 <HAL_DMA_Abort_IT>
      break;
 8008552:	e01e      	b.n	8008592 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008562:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	4618      	mov	r0, r3
 800856a:	f7fc fda9 	bl	80050c0 <HAL_DMA_Abort_IT>
      break;
 800856e:	e010      	b.n	8008592 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800857e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008584:	4618      	mov	r0, r3
 8008586:	f7fc fd9b 	bl	80050c0 <HAL_DMA_Abort_IT>
      break;
 800858a:	e002      	b.n	8008592 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	73fb      	strb	r3, [r7, #15]
      break;
 8008590:	bf00      	nop
  }

  if (status == HAL_OK)
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d157      	bne.n	8008648 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2200      	movs	r2, #0
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 fd63 	bl	800906c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a2a      	ldr	r2, [pc, #168]	; (8008654 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d117      	bne.n	80085e0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6a1a      	ldr	r2, [r3, #32]
 80085b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10f      	bne.n	80085e0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6a1a      	ldr	r2, [r3, #32]
 80085c6:	f240 4344 	movw	r3, #1092	; 0x444
 80085ca:	4013      	ands	r3, r2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d107      	bne.n	80085e0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6a1a      	ldr	r2, [r3, #32]
 80085e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10f      	bne.n	8008610 <HAL_TIM_PWM_Stop_DMA+0x144>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6a1a      	ldr	r2, [r3, #32]
 80085f6:	f240 4344 	movw	r3, #1092	; 0x444
 80085fa:	4013      	ands	r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d107      	bne.n	8008610 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0201 	bic.w	r2, r2, #1
 800860e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d104      	bne.n	8008620 <HAL_TIM_PWM_Stop_DMA+0x154>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800861e:	e013      	b.n	8008648 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b04      	cmp	r3, #4
 8008624:	d104      	bne.n	8008630 <HAL_TIM_PWM_Stop_DMA+0x164>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800862e:	e00b      	b.n	8008648 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2b08      	cmp	r3, #8
 8008634:	d104      	bne.n	8008640 <HAL_TIM_PWM_Stop_DMA+0x174>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800863e:	e003      	b.n	8008648 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	40010000 	.word	0x40010000

08008658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800866e:	2b01      	cmp	r3, #1
 8008670:	d101      	bne.n	8008676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008672:	2302      	movs	r3, #2
 8008674:	e0ae      	b.n	80087d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b0c      	cmp	r3, #12
 8008682:	f200 809f 	bhi.w	80087c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008686:	a201      	add	r2, pc, #4	; (adr r2, 800868c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	080086c1 	.word	0x080086c1
 8008690:	080087c5 	.word	0x080087c5
 8008694:	080087c5 	.word	0x080087c5
 8008698:	080087c5 	.word	0x080087c5
 800869c:	08008701 	.word	0x08008701
 80086a0:	080087c5 	.word	0x080087c5
 80086a4:	080087c5 	.word	0x080087c5
 80086a8:	080087c5 	.word	0x080087c5
 80086ac:	08008743 	.word	0x08008743
 80086b0:	080087c5 	.word	0x080087c5
 80086b4:	080087c5 	.word	0x080087c5
 80086b8:	080087c5 	.word	0x080087c5
 80086bc:	08008783 	.word	0x08008783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68b9      	ldr	r1, [r7, #8]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 faaa 	bl	8008c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0208 	orr.w	r2, r2, #8
 80086da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0204 	bic.w	r2, r2, #4
 80086ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6999      	ldr	r1, [r3, #24]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	691a      	ldr	r2, [r3, #16]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	619a      	str	r2, [r3, #24]
      break;
 80086fe:	e064      	b.n	80087ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68b9      	ldr	r1, [r7, #8]
 8008706:	4618      	mov	r0, r3
 8008708:	f000 faf0 	bl	8008cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	699a      	ldr	r2, [r3, #24]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800871a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	699a      	ldr	r2, [r3, #24]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800872a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6999      	ldr	r1, [r3, #24]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	021a      	lsls	r2, r3, #8
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	619a      	str	r2, [r3, #24]
      break;
 8008740:	e043      	b.n	80087ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	4618      	mov	r0, r3
 800874a:	f000 fb3b 	bl	8008dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	69da      	ldr	r2, [r3, #28]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0208 	orr.w	r2, r2, #8
 800875c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69da      	ldr	r2, [r3, #28]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 0204 	bic.w	r2, r2, #4
 800876c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69d9      	ldr	r1, [r3, #28]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	61da      	str	r2, [r3, #28]
      break;
 8008780:	e023      	b.n	80087ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68b9      	ldr	r1, [r7, #8]
 8008788:	4618      	mov	r0, r3
 800878a:	f000 fb85 	bl	8008e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69da      	ldr	r2, [r3, #28]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800879c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69da      	ldr	r2, [r3, #28]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69d9      	ldr	r1, [r3, #28]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	021a      	lsls	r2, r3, #8
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	61da      	str	r2, [r3, #28]
      break;
 80087c2:	e002      	b.n	80087ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	75fb      	strb	r3, [r7, #23]
      break;
 80087c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_TIM_ConfigClockSource+0x1c>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e0b4      	b.n	8008962 <HAL_TIM_ConfigClockSource+0x186>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800881e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008830:	d03e      	beq.n	80088b0 <HAL_TIM_ConfigClockSource+0xd4>
 8008832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008836:	f200 8087 	bhi.w	8008948 <HAL_TIM_ConfigClockSource+0x16c>
 800883a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800883e:	f000 8086 	beq.w	800894e <HAL_TIM_ConfigClockSource+0x172>
 8008842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008846:	d87f      	bhi.n	8008948 <HAL_TIM_ConfigClockSource+0x16c>
 8008848:	2b70      	cmp	r3, #112	; 0x70
 800884a:	d01a      	beq.n	8008882 <HAL_TIM_ConfigClockSource+0xa6>
 800884c:	2b70      	cmp	r3, #112	; 0x70
 800884e:	d87b      	bhi.n	8008948 <HAL_TIM_ConfigClockSource+0x16c>
 8008850:	2b60      	cmp	r3, #96	; 0x60
 8008852:	d050      	beq.n	80088f6 <HAL_TIM_ConfigClockSource+0x11a>
 8008854:	2b60      	cmp	r3, #96	; 0x60
 8008856:	d877      	bhi.n	8008948 <HAL_TIM_ConfigClockSource+0x16c>
 8008858:	2b50      	cmp	r3, #80	; 0x50
 800885a:	d03c      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0xfa>
 800885c:	2b50      	cmp	r3, #80	; 0x50
 800885e:	d873      	bhi.n	8008948 <HAL_TIM_ConfigClockSource+0x16c>
 8008860:	2b40      	cmp	r3, #64	; 0x40
 8008862:	d058      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x13a>
 8008864:	2b40      	cmp	r3, #64	; 0x40
 8008866:	d86f      	bhi.n	8008948 <HAL_TIM_ConfigClockSource+0x16c>
 8008868:	2b30      	cmp	r3, #48	; 0x30
 800886a:	d064      	beq.n	8008936 <HAL_TIM_ConfigClockSource+0x15a>
 800886c:	2b30      	cmp	r3, #48	; 0x30
 800886e:	d86b      	bhi.n	8008948 <HAL_TIM_ConfigClockSource+0x16c>
 8008870:	2b20      	cmp	r3, #32
 8008872:	d060      	beq.n	8008936 <HAL_TIM_ConfigClockSource+0x15a>
 8008874:	2b20      	cmp	r3, #32
 8008876:	d867      	bhi.n	8008948 <HAL_TIM_ConfigClockSource+0x16c>
 8008878:	2b00      	cmp	r3, #0
 800887a:	d05c      	beq.n	8008936 <HAL_TIM_ConfigClockSource+0x15a>
 800887c:	2b10      	cmp	r3, #16
 800887e:	d05a      	beq.n	8008936 <HAL_TIM_ConfigClockSource+0x15a>
 8008880:	e062      	b.n	8008948 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	6899      	ldr	r1, [r3, #8]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f000 fbcb 	bl	800902c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	609a      	str	r2, [r3, #8]
      break;
 80088ae:	e04f      	b.n	8008950 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	6899      	ldr	r1, [r3, #8]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f000 fbb4 	bl	800902c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689a      	ldr	r2, [r3, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088d2:	609a      	str	r2, [r3, #8]
      break;
 80088d4:	e03c      	b.n	8008950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	6859      	ldr	r1, [r3, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f000 fb28 	bl	8008f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2150      	movs	r1, #80	; 0x50
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 fb81 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 80088f4:	e02c      	b.n	8008950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6818      	ldr	r0, [r3, #0]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	6859      	ldr	r1, [r3, #4]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	461a      	mov	r2, r3
 8008904:	f000 fb47 	bl	8008f96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2160      	movs	r1, #96	; 0x60
 800890e:	4618      	mov	r0, r3
 8008910:	f000 fb71 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008914:	e01c      	b.n	8008950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6818      	ldr	r0, [r3, #0]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	6859      	ldr	r1, [r3, #4]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	461a      	mov	r2, r3
 8008924:	f000 fb08 	bl	8008f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2140      	movs	r1, #64	; 0x40
 800892e:	4618      	mov	r0, r3
 8008930:	f000 fb61 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008934:	e00c      	b.n	8008950 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4619      	mov	r1, r3
 8008940:	4610      	mov	r0, r2
 8008942:	f000 fb58 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008946:	e003      	b.n	8008950 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
      break;
 800894c:	e000      	b.n	8008950 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800894e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	429a      	cmp	r2, r3
 8008994:	d107      	bne.n	80089a6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2201      	movs	r2, #1
 800899a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089a4:	e02a      	b.n	80089fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d107      	bne.n	80089c0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2202      	movs	r2, #2
 80089b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089be:	e01d      	b.n	80089fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d107      	bne.n	80089da <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2204      	movs	r2, #4
 80089ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089d8:	e010      	b.n	80089fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d107      	bne.n	80089f4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2208      	movs	r2, #8
 80089e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089f2:	e003      	b.n	80089fc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff ffb4 	bl	800896a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	771a      	strb	r2, [r3, #28]
}
 8008a08:	bf00      	nop
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d10b      	bne.n	8008a40 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d136      	bne.n	8008aa4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a3e:	e031      	b.n	8008aa4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d10b      	bne.n	8008a62 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d125      	bne.n	8008aa4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a60:	e020      	b.n	8008aa4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d10b      	bne.n	8008a84 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2204      	movs	r2, #4
 8008a70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d114      	bne.n	8008aa4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a82:	e00f      	b.n	8008aa4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d10a      	bne.n	8008aa4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2208      	movs	r2, #8
 8008a92:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d103      	bne.n	8008aa4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f7fb fe4f 	bl	8004748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	771a      	strb	r2, [r3, #28]
}
 8008ab0:	bf00      	nop
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d103      	bne.n	8008ad8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	771a      	strb	r2, [r3, #28]
 8008ad6:	e019      	b.n	8008b0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d103      	bne.n	8008aea <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	771a      	strb	r2, [r3, #28]
 8008ae8:	e010      	b.n	8008b0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d103      	bne.n	8008afc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2204      	movs	r2, #4
 8008af8:	771a      	strb	r2, [r3, #28]
 8008afa:	e007      	b.n	8008b0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d102      	bne.n	8008b0c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2208      	movs	r2, #8
 8008b0a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f7fb fd9b 	bl	8004648 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	771a      	strb	r2, [r3, #28]
}
 8008b18:	bf00      	nop
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a34      	ldr	r2, [pc, #208]	; (8008c04 <TIM_Base_SetConfig+0xe4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00f      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3e:	d00b      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a31      	ldr	r2, [pc, #196]	; (8008c08 <TIM_Base_SetConfig+0xe8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d007      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a30      	ldr	r2, [pc, #192]	; (8008c0c <TIM_Base_SetConfig+0xec>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a2f      	ldr	r2, [pc, #188]	; (8008c10 <TIM_Base_SetConfig+0xf0>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d108      	bne.n	8008b6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a25      	ldr	r2, [pc, #148]	; (8008c04 <TIM_Base_SetConfig+0xe4>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d01b      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b78:	d017      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a22      	ldr	r2, [pc, #136]	; (8008c08 <TIM_Base_SetConfig+0xe8>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d013      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a21      	ldr	r2, [pc, #132]	; (8008c0c <TIM_Base_SetConfig+0xec>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00f      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a20      	ldr	r2, [pc, #128]	; (8008c10 <TIM_Base_SetConfig+0xf0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00b      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1f      	ldr	r2, [pc, #124]	; (8008c14 <TIM_Base_SetConfig+0xf4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d007      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1e      	ldr	r2, [pc, #120]	; (8008c18 <TIM_Base_SetConfig+0xf8>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d003      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1d      	ldr	r2, [pc, #116]	; (8008c1c <TIM_Base_SetConfig+0xfc>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d108      	bne.n	8008bbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <TIM_Base_SetConfig+0xe4>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d103      	bne.n	8008bf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	615a      	str	r2, [r3, #20]
}
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40010000 	.word	0x40010000
 8008c08:	40000400 	.word	0x40000400
 8008c0c:	40000800 	.word	0x40000800
 8008c10:	40000c00 	.word	0x40000c00
 8008c14:	40014000 	.word	0x40014000
 8008c18:	40014400 	.word	0x40014400
 8008c1c:	40014800 	.word	0x40014800

08008c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f023 0201 	bic.w	r2, r3, #1
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0303 	bic.w	r3, r3, #3
 8008c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f023 0302 	bic.w	r3, r3, #2
 8008c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a1c      	ldr	r2, [pc, #112]	; (8008ce8 <TIM_OC1_SetConfig+0xc8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d10c      	bne.n	8008c96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f023 0308 	bic.w	r3, r3, #8
 8008c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f023 0304 	bic.w	r3, r3, #4
 8008c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a13      	ldr	r2, [pc, #76]	; (8008ce8 <TIM_OC1_SetConfig+0xc8>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d111      	bne.n	8008cc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	621a      	str	r2, [r3, #32]
}
 8008cdc:	bf00      	nop
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	40010000 	.word	0x40010000

08008cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b087      	sub	sp, #28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	f023 0210 	bic.w	r2, r3, #16
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	f023 0320 	bic.w	r3, r3, #32
 8008d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a1e      	ldr	r2, [pc, #120]	; (8008dc0 <TIM_OC2_SetConfig+0xd4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d10d      	bne.n	8008d68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a15      	ldr	r2, [pc, #84]	; (8008dc0 <TIM_OC2_SetConfig+0xd4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d113      	bne.n	8008d98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	693a      	ldr	r2, [r7, #16]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	621a      	str	r2, [r3, #32]
}
 8008db2:	bf00      	nop
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	40010000 	.word	0x40010000

08008dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 0303 	bic.w	r3, r3, #3
 8008dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1d      	ldr	r2, [pc, #116]	; (8008e94 <TIM_OC3_SetConfig+0xd0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d10d      	bne.n	8008e3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a14      	ldr	r2, [pc, #80]	; (8008e94 <TIM_OC3_SetConfig+0xd0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d113      	bne.n	8008e6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	621a      	str	r2, [r3, #32]
}
 8008e88:	bf00      	nop
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	40010000 	.word	0x40010000

08008e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	031b      	lsls	r3, r3, #12
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a10      	ldr	r2, [pc, #64]	; (8008f34 <TIM_OC4_SetConfig+0x9c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d109      	bne.n	8008f0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	019b      	lsls	r3, r3, #6
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	621a      	str	r2, [r3, #32]
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	40010000 	.word	0x40010000

08008f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	f023 0201 	bic.w	r2, r3, #1
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f023 030a 	bic.w	r3, r3, #10
 8008f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	621a      	str	r2, [r3, #32]
}
 8008f8a:	bf00      	nop
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b087      	sub	sp, #28
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f023 0210 	bic.w	r2, r3, #16
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6a1b      	ldr	r3, [r3, #32]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	031b      	lsls	r3, r3, #12
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	621a      	str	r2, [r3, #32]
}
 8008fea:	bf00      	nop
 8008fec:	371c      	adds	r7, #28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4313      	orrs	r3, r2
 8009014:	f043 0307 	orr.w	r3, r3, #7
 8009018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	609a      	str	r2, [r3, #8]
}
 8009020:	bf00      	nop
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	021a      	lsls	r2, r3, #8
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	431a      	orrs	r2, r3
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	4313      	orrs	r3, r2
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	609a      	str	r2, [r3, #8]
}
 8009060:	bf00      	nop
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800906c:	b480      	push	{r7}
 800906e:	b087      	sub	sp, #28
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f003 031f 	and.w	r3, r3, #31
 800907e:	2201      	movs	r2, #1
 8009080:	fa02 f303 	lsl.w	r3, r2, r3
 8009084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6a1a      	ldr	r2, [r3, #32]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	43db      	mvns	r3, r3
 800908e:	401a      	ands	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a1a      	ldr	r2, [r3, #32]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f003 031f 	and.w	r3, r3, #31
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	fa01 f303 	lsl.w	r3, r1, r3
 80090a4:	431a      	orrs	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	621a      	str	r2, [r3, #32]
}
 80090aa:	bf00      	nop
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
	...

080090b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d101      	bne.n	80090d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090cc:	2302      	movs	r3, #2
 80090ce:	e050      	b.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2202      	movs	r2, #2
 80090dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1c      	ldr	r2, [pc, #112]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d018      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800911c:	d013      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a18      	ldr	r2, [pc, #96]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00e      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a16      	ldr	r2, [pc, #88]	; (8009188 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d009      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a15      	ldr	r2, [pc, #84]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d004      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a13      	ldr	r2, [pc, #76]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d10c      	bne.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800914c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	4313      	orrs	r3, r2
 8009156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	40010000 	.word	0x40010000
 8009184:	40000400 	.word	0x40000400
 8009188:	40000800 	.word	0x40000800
 800918c:	40000c00 	.word	0x40000c00
 8009190:	40014000 	.word	0x40014000

08009194 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e03d      	b.n	800922c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e03f      	b.n	80092ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d106      	bne.n	8009264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7fa ff40 	bl	80040e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2224      	movs	r2, #36	; 0x24
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68da      	ldr	r2, [r3, #12]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800927a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fddf 	bl	8009e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	691a      	ldr	r2, [r3, #16]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	695a      	ldr	r2, [r3, #20]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b08a      	sub	sp, #40	; 0x28
 80092d6:	af02      	add	r7, sp, #8
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	603b      	str	r3, [r7, #0]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b20      	cmp	r3, #32
 80092f0:	d17c      	bne.n	80093ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <HAL_UART_Transmit+0x2c>
 80092f8:	88fb      	ldrh	r3, [r7, #6]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e075      	b.n	80093ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009308:	2b01      	cmp	r3, #1
 800930a:	d101      	bne.n	8009310 <HAL_UART_Transmit+0x3e>
 800930c:	2302      	movs	r3, #2
 800930e:	e06e      	b.n	80093ee <HAL_UART_Transmit+0x11c>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2221      	movs	r2, #33	; 0x21
 8009322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009326:	f7fb fbc5 	bl	8004ab4 <HAL_GetTick>
 800932a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	88fa      	ldrh	r2, [r7, #6]
 8009330:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	88fa      	ldrh	r2, [r7, #6]
 8009336:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009340:	d108      	bne.n	8009354 <HAL_UART_Transmit+0x82>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d104      	bne.n	8009354 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	61bb      	str	r3, [r7, #24]
 8009352:	e003      	b.n	800935c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009358:	2300      	movs	r3, #0
 800935a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009364:	e02a      	b.n	80093bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2200      	movs	r2, #0
 800936e:	2180      	movs	r1, #128	; 0x80
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fb1f 	bl	80099b4 <UART_WaitOnFlagUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e036      	b.n	80093ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10b      	bne.n	800939e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	3302      	adds	r3, #2
 800939a:	61bb      	str	r3, [r7, #24]
 800939c:	e007      	b.n	80093ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	781a      	ldrb	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	3301      	adds	r3, #1
 80093ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	3b01      	subs	r3, #1
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1cf      	bne.n	8009366 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	2200      	movs	r2, #0
 80093ce:	2140      	movs	r1, #64	; 0x40
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 faef 	bl	80099b4 <UART_WaitOnFlagUntilTimeout>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e006      	b.n	80093ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	e000      	b.n	80093ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80093ec:	2302      	movs	r3, #2
  }
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3720      	adds	r7, #32
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	4613      	mov	r3, r2
 8009402:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b20      	cmp	r3, #32
 800940e:	d11d      	bne.n	800944c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <HAL_UART_Receive_IT+0x26>
 8009416:	88fb      	ldrh	r3, [r7, #6]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e016      	b.n	800944e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009426:	2b01      	cmp	r3, #1
 8009428:	d101      	bne.n	800942e <HAL_UART_Receive_IT+0x38>
 800942a:	2302      	movs	r3, #2
 800942c:	e00f      	b.n	800944e <HAL_UART_Receive_IT+0x58>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	461a      	mov	r2, r3
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fb24 	bl	8009a90 <UART_Start_Receive_IT>
 8009448:	4603      	mov	r3, r0
 800944a:	e000      	b.n	800944e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800944c:	2302      	movs	r3, #2
  }
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b0ba      	sub	sp, #232	; 0xe8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800947e:	2300      	movs	r3, #0
 8009480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009484:	2300      	movs	r3, #0
 8009486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800948a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948e:	f003 030f 	and.w	r3, r3, #15
 8009492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10f      	bne.n	80094be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800949e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d009      	beq.n	80094be <HAL_UART_IRQHandler+0x66>
 80094aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094ae:	f003 0320 	and.w	r3, r3, #32
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fc07 	bl	8009cca <UART_Receive_IT>
      return;
 80094bc:	e256      	b.n	800996c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80094be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 80de 	beq.w	8009684 <HAL_UART_IRQHandler+0x22c>
 80094c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d106      	bne.n	80094e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80094d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 80d1 	beq.w	8009684 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80094e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <HAL_UART_IRQHandler+0xae>
 80094ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	f043 0201 	orr.w	r2, r3, #1
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950a:	f003 0304 	and.w	r3, r3, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00b      	beq.n	800952a <HAL_UART_IRQHandler+0xd2>
 8009512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d005      	beq.n	800952a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	f043 0202 	orr.w	r2, r3, #2
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800952a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00b      	beq.n	800954e <HAL_UART_IRQHandler+0xf6>
 8009536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b00      	cmp	r3, #0
 8009540:	d005      	beq.n	800954e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009546:	f043 0204 	orr.w	r2, r3, #4
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800954e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009552:	f003 0308 	and.w	r3, r3, #8
 8009556:	2b00      	cmp	r3, #0
 8009558:	d011      	beq.n	800957e <HAL_UART_IRQHandler+0x126>
 800955a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d105      	bne.n	8009572 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	f043 0208 	orr.w	r2, r3, #8
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 81ed 	beq.w	8009962 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d008      	beq.n	80095a6 <HAL_UART_IRQHandler+0x14e>
 8009594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fb92 	bl	8009cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b0:	2b40      	cmp	r3, #64	; 0x40
 80095b2:	bf0c      	ite	eq
 80095b4:	2301      	moveq	r3, #1
 80095b6:	2300      	movne	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d103      	bne.n	80095d2 <HAL_UART_IRQHandler+0x17a>
 80095ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d04f      	beq.n	8009672 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fa9a 	bl	8009b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d141      	bne.n	800966a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3314      	adds	r3, #20
 80095ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80095fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3314      	adds	r3, #20
 800960e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009612:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800961e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009622:	e841 2300 	strex	r3, r2, [r1]
 8009626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800962a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1d9      	bne.n	80095e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009636:	2b00      	cmp	r3, #0
 8009638:	d013      	beq.n	8009662 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963e:	4a7d      	ldr	r2, [pc, #500]	; (8009834 <HAL_UART_IRQHandler+0x3dc>)
 8009640:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	4618      	mov	r0, r3
 8009648:	f7fb fd3a 	bl	80050c0 <HAL_DMA_Abort_IT>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d016      	beq.n	8009680 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800965c:	4610      	mov	r0, r2
 800965e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009660:	e00e      	b.n	8009680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f990 	bl	8009988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009668:	e00a      	b.n	8009680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f98c 	bl	8009988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009670:	e006      	b.n	8009680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f988 	bl	8009988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800967e:	e170      	b.n	8009962 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009680:	bf00      	nop
    return;
 8009682:	e16e      	b.n	8009962 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009688:	2b01      	cmp	r3, #1
 800968a:	f040 814a 	bne.w	8009922 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800968e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009692:	f003 0310 	and.w	r3, r3, #16
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 8143 	beq.w	8009922 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800969c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096a0:	f003 0310 	and.w	r3, r3, #16
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 813c 	beq.w	8009922 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096aa:	2300      	movs	r3, #0
 80096ac:	60bb      	str	r3, [r7, #8]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	60bb      	str	r3, [r7, #8]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	60bb      	str	r3, [r7, #8]
 80096be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ca:	2b40      	cmp	r3, #64	; 0x40
 80096cc:	f040 80b4 	bne.w	8009838 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 8140 	beq.w	8009966 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096ee:	429a      	cmp	r2, r3
 80096f0:	f080 8139 	bcs.w	8009966 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009706:	f000 8088 	beq.w	800981a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	330c      	adds	r3, #12
 8009710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	330c      	adds	r3, #12
 8009732:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009736:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800973a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009742:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800974e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1d9      	bne.n	800970a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3314      	adds	r3, #20
 800975c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009768:	f023 0301 	bic.w	r3, r3, #1
 800976c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3314      	adds	r3, #20
 8009776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800977a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800977e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009782:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800978c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e1      	bne.n	8009756 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3314      	adds	r3, #20
 8009798:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800979c:	e853 3f00 	ldrex	r3, [r3]
 80097a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3314      	adds	r3, #20
 80097b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e3      	bne.n	8009792 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2220      	movs	r2, #32
 80097ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	330c      	adds	r3, #12
 80097de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e2:	e853 3f00 	ldrex	r3, [r3]
 80097e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ea:	f023 0310 	bic.w	r3, r3, #16
 80097ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	330c      	adds	r3, #12
 80097f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80097fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80097fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009800:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009802:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009804:	e841 2300 	strex	r3, r2, [r1]
 8009808:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800980a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1e3      	bne.n	80097d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	4618      	mov	r0, r3
 8009816:	f7fb fbe3 	bl	8004fe0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009822:	b29b      	uxth	r3, r3
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	b29b      	uxth	r3, r3
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f8b6 	bl	800999c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009830:	e099      	b.n	8009966 <HAL_UART_IRQHandler+0x50e>
 8009832:	bf00      	nop
 8009834:	08009bd3 	.word	0x08009bd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009840:	b29b      	uxth	r3, r3
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800984c:	b29b      	uxth	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 808b 	beq.w	800996a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 8086 	beq.w	800996a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	330c      	adds	r3, #12
 8009864:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800986e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009874:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	330c      	adds	r3, #12
 800987e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009882:	647a      	str	r2, [r7, #68]	; 0x44
 8009884:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1e3      	bne.n	800985e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3314      	adds	r3, #20
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	623b      	str	r3, [r7, #32]
   return(result);
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	f023 0301 	bic.w	r3, r3, #1
 80098ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	3314      	adds	r3, #20
 80098b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80098ba:	633a      	str	r2, [r7, #48]	; 0x30
 80098bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e3      	bne.n	8009896 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	330c      	adds	r3, #12
 80098e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	e853 3f00 	ldrex	r3, [r3]
 80098ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f023 0310 	bic.w	r3, r3, #16
 80098f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	330c      	adds	r3, #12
 80098fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009900:	61fa      	str	r2, [r7, #28]
 8009902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009904:	69b9      	ldr	r1, [r7, #24]
 8009906:	69fa      	ldr	r2, [r7, #28]
 8009908:	e841 2300 	strex	r3, r2, [r1]
 800990c:	617b      	str	r3, [r7, #20]
   return(result);
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e3      	bne.n	80098dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f83e 	bl	800999c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009920:	e023      	b.n	800996a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800992a:	2b00      	cmp	r3, #0
 800992c:	d009      	beq.n	8009942 <HAL_UART_IRQHandler+0x4ea>
 800992e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f95d 	bl	8009bfa <UART_Transmit_IT>
    return;
 8009940:	e014      	b.n	800996c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00e      	beq.n	800996c <HAL_UART_IRQHandler+0x514>
 800994e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009956:	2b00      	cmp	r3, #0
 8009958:	d008      	beq.n	800996c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f99d 	bl	8009c9a <UART_EndTransmit_IT>
    return;
 8009960:	e004      	b.n	800996c <HAL_UART_IRQHandler+0x514>
    return;
 8009962:	bf00      	nop
 8009964:	e002      	b.n	800996c <HAL_UART_IRQHandler+0x514>
      return;
 8009966:	bf00      	nop
 8009968:	e000      	b.n	800996c <HAL_UART_IRQHandler+0x514>
      return;
 800996a:	bf00      	nop
  }
}
 800996c:	37e8      	adds	r7, #232	; 0xe8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop

08009974 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b090      	sub	sp, #64	; 0x40
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	4613      	mov	r3, r2
 80099c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099c4:	e050      	b.n	8009a68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099cc:	d04c      	beq.n	8009a68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80099ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d007      	beq.n	80099e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80099d4:	f7fb f86e 	bl	8004ab4 <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d241      	bcs.n	8009a68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	330c      	adds	r3, #12
 80099ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	e853 3f00 	ldrex	r3, [r3]
 80099f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	330c      	adds	r3, #12
 8009a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a04:	637a      	str	r2, [r7, #52]	; 0x34
 8009a06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e5      	bne.n	80099e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3314      	adds	r3, #20
 8009a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	613b      	str	r3, [r7, #16]
   return(result);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f023 0301 	bic.w	r3, r3, #1
 8009a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3314      	adds	r3, #20
 8009a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a38:	623a      	str	r2, [r7, #32]
 8009a3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	69f9      	ldr	r1, [r7, #28]
 8009a3e:	6a3a      	ldr	r2, [r7, #32]
 8009a40:	e841 2300 	strex	r3, r2, [r1]
 8009a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e5      	bne.n	8009a18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e00f      	b.n	8009a88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4013      	ands	r3, r2
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	bf0c      	ite	eq
 8009a78:	2301      	moveq	r3, #1
 8009a7a:	2300      	movne	r3, #0
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	461a      	mov	r2, r3
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d09f      	beq.n	80099c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3740      	adds	r7, #64	; 0x40
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	88fa      	ldrh	r2, [r7, #6]
 8009aa8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	88fa      	ldrh	r2, [r7, #6]
 8009aae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2222      	movs	r2, #34	; 0x22
 8009aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d007      	beq.n	8009ade <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009adc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	695a      	ldr	r2, [r3, #20]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f042 0201 	orr.w	r2, r2, #1
 8009aec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f042 0220 	orr.w	r2, r2, #32
 8009afc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b095      	sub	sp, #84	; 0x54
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	330c      	adds	r3, #12
 8009b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1e:	e853 3f00 	ldrex	r3, [r3]
 8009b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	330c      	adds	r3, #12
 8009b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b34:	643a      	str	r2, [r7, #64]	; 0x40
 8009b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e5      	bne.n	8009b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3314      	adds	r3, #20
 8009b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	f023 0301 	bic.w	r3, r3, #1
 8009b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3314      	adds	r3, #20
 8009b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e5      	bne.n	8009b48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d119      	bne.n	8009bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	330c      	adds	r3, #12
 8009b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	f023 0310 	bic.w	r3, r3, #16
 8009b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	330c      	adds	r3, #12
 8009ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ba4:	61ba      	str	r2, [r7, #24]
 8009ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	6979      	ldr	r1, [r7, #20]
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e5      	bne.n	8009b84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009bc6:	bf00      	nop
 8009bc8:	3754      	adds	r7, #84	; 0x54
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f7ff fecb 	bl	8009988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b085      	sub	sp, #20
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b21      	cmp	r3, #33	; 0x21
 8009c0c:	d13e      	bne.n	8009c8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c16:	d114      	bne.n	8009c42 <UART_Transmit_IT+0x48>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d110      	bne.n	8009c42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	1c9a      	adds	r2, r3, #2
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	621a      	str	r2, [r3, #32]
 8009c40:	e008      	b.n	8009c54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	1c59      	adds	r1, r3, #1
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	6211      	str	r1, [r2, #32]
 8009c4c:	781a      	ldrb	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	4619      	mov	r1, r3
 8009c62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10f      	bne.n	8009c88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68da      	ldr	r2, [r3, #12]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68da      	ldr	r2, [r3, #12]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	e000      	b.n	8009c8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c8c:	2302      	movs	r3, #2
  }
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff fe5a 	bl	8009974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b08c      	sub	sp, #48	; 0x30
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b22      	cmp	r3, #34	; 0x22
 8009cdc:	f040 80ab 	bne.w	8009e36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce8:	d117      	bne.n	8009d1a <UART_Receive_IT+0x50>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d113      	bne.n	8009d1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d12:	1c9a      	adds	r2, r3, #2
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	629a      	str	r2, [r3, #40]	; 0x28
 8009d18:	e026      	b.n	8009d68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2c:	d007      	beq.n	8009d3e <UART_Receive_IT+0x74>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <UART_Receive_IT+0x82>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d106      	bne.n	8009d4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	e008      	b.n	8009d5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	4619      	mov	r1, r3
 8009d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d15a      	bne.n	8009e32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68da      	ldr	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f022 0220 	bic.w	r2, r2, #32
 8009d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	695a      	ldr	r2, [r3, #20]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f022 0201 	bic.w	r2, r2, #1
 8009daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d135      	bne.n	8009e28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	330c      	adds	r3, #12
 8009dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f023 0310 	bic.w	r3, r3, #16
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	330c      	adds	r3, #12
 8009de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de2:	623a      	str	r2, [r7, #32]
 8009de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	69f9      	ldr	r1, [r7, #28]
 8009de8:	6a3a      	ldr	r2, [r7, #32]
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e5      	bne.n	8009dc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0310 	and.w	r3, r3, #16
 8009e00:	2b10      	cmp	r3, #16
 8009e02:	d10a      	bne.n	8009e1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e04:	2300      	movs	r3, #0
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	60fb      	str	r3, [r7, #12]
 8009e18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff fdbb 	bl	800999c <HAL_UARTEx_RxEventCallback>
 8009e26:	e002      	b.n	8009e2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7f8 fac7 	bl	80023bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e002      	b.n	8009e38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	e000      	b.n	8009e38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009e36:	2302      	movs	r3, #2
  }
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3730      	adds	r7, #48	; 0x30
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e44:	b0c0      	sub	sp, #256	; 0x100
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e5c:	68d9      	ldr	r1, [r3, #12]
 8009e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	ea40 0301 	orr.w	r3, r0, r1
 8009e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e6e:	689a      	ldr	r2, [r3, #8]
 8009e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	431a      	orrs	r2, r3
 8009e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e98:	f021 010c 	bic.w	r1, r1, #12
 8009e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ea6:	430b      	orrs	r3, r1
 8009ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eba:	6999      	ldr	r1, [r3, #24]
 8009ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	ea40 0301 	orr.w	r3, r0, r1
 8009ec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4b8f      	ldr	r3, [pc, #572]	; (800a10c <UART_SetConfig+0x2cc>)
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d005      	beq.n	8009ee0 <UART_SetConfig+0xa0>
 8009ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	4b8d      	ldr	r3, [pc, #564]	; (800a110 <UART_SetConfig+0x2d0>)
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d104      	bne.n	8009eea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ee0:	f7fd fc10 	bl	8007704 <HAL_RCC_GetPCLK2Freq>
 8009ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009ee8:	e003      	b.n	8009ef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009eea:	f7fd fbf7 	bl	80076dc <HAL_RCC_GetPCLK1Freq>
 8009eee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009efc:	f040 810c 	bne.w	800a118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f04:	2200      	movs	r2, #0
 8009f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009f12:	4622      	mov	r2, r4
 8009f14:	462b      	mov	r3, r5
 8009f16:	1891      	adds	r1, r2, r2
 8009f18:	65b9      	str	r1, [r7, #88]	; 0x58
 8009f1a:	415b      	adcs	r3, r3
 8009f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f22:	4621      	mov	r1, r4
 8009f24:	eb12 0801 	adds.w	r8, r2, r1
 8009f28:	4629      	mov	r1, r5
 8009f2a:	eb43 0901 	adc.w	r9, r3, r1
 8009f2e:	f04f 0200 	mov.w	r2, #0
 8009f32:	f04f 0300 	mov.w	r3, #0
 8009f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f42:	4690      	mov	r8, r2
 8009f44:	4699      	mov	r9, r3
 8009f46:	4623      	mov	r3, r4
 8009f48:	eb18 0303 	adds.w	r3, r8, r3
 8009f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f50:	462b      	mov	r3, r5
 8009f52:	eb49 0303 	adc.w	r3, r9, r3
 8009f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f6e:	460b      	mov	r3, r1
 8009f70:	18db      	adds	r3, r3, r3
 8009f72:	653b      	str	r3, [r7, #80]	; 0x50
 8009f74:	4613      	mov	r3, r2
 8009f76:	eb42 0303 	adc.w	r3, r2, r3
 8009f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009f84:	f7f6 fe28 	bl	8000bd8 <__aeabi_uldivmod>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4b61      	ldr	r3, [pc, #388]	; (800a114 <UART_SetConfig+0x2d4>)
 8009f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8009f92:	095b      	lsrs	r3, r3, #5
 8009f94:	011c      	lsls	r4, r3, #4
 8009f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009fa8:	4642      	mov	r2, r8
 8009faa:	464b      	mov	r3, r9
 8009fac:	1891      	adds	r1, r2, r2
 8009fae:	64b9      	str	r1, [r7, #72]	; 0x48
 8009fb0:	415b      	adcs	r3, r3
 8009fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009fb8:	4641      	mov	r1, r8
 8009fba:	eb12 0a01 	adds.w	sl, r2, r1
 8009fbe:	4649      	mov	r1, r9
 8009fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8009fc4:	f04f 0200 	mov.w	r2, #0
 8009fc8:	f04f 0300 	mov.w	r3, #0
 8009fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fd8:	4692      	mov	sl, r2
 8009fda:	469b      	mov	fp, r3
 8009fdc:	4643      	mov	r3, r8
 8009fde:	eb1a 0303 	adds.w	r3, sl, r3
 8009fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fe6:	464b      	mov	r3, r9
 8009fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8009fec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a004:	460b      	mov	r3, r1
 800a006:	18db      	adds	r3, r3, r3
 800a008:	643b      	str	r3, [r7, #64]	; 0x40
 800a00a:	4613      	mov	r3, r2
 800a00c:	eb42 0303 	adc.w	r3, r2, r3
 800a010:	647b      	str	r3, [r7, #68]	; 0x44
 800a012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a01a:	f7f6 fddd 	bl	8000bd8 <__aeabi_uldivmod>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	4611      	mov	r1, r2
 800a024:	4b3b      	ldr	r3, [pc, #236]	; (800a114 <UART_SetConfig+0x2d4>)
 800a026:	fba3 2301 	umull	r2, r3, r3, r1
 800a02a:	095b      	lsrs	r3, r3, #5
 800a02c:	2264      	movs	r2, #100	; 0x64
 800a02e:	fb02 f303 	mul.w	r3, r2, r3
 800a032:	1acb      	subs	r3, r1, r3
 800a034:	00db      	lsls	r3, r3, #3
 800a036:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a03a:	4b36      	ldr	r3, [pc, #216]	; (800a114 <UART_SetConfig+0x2d4>)
 800a03c:	fba3 2302 	umull	r2, r3, r3, r2
 800a040:	095b      	lsrs	r3, r3, #5
 800a042:	005b      	lsls	r3, r3, #1
 800a044:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a048:	441c      	add	r4, r3
 800a04a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a04e:	2200      	movs	r2, #0
 800a050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a054:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a05c:	4642      	mov	r2, r8
 800a05e:	464b      	mov	r3, r9
 800a060:	1891      	adds	r1, r2, r2
 800a062:	63b9      	str	r1, [r7, #56]	; 0x38
 800a064:	415b      	adcs	r3, r3
 800a066:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a06c:	4641      	mov	r1, r8
 800a06e:	1851      	adds	r1, r2, r1
 800a070:	6339      	str	r1, [r7, #48]	; 0x30
 800a072:	4649      	mov	r1, r9
 800a074:	414b      	adcs	r3, r1
 800a076:	637b      	str	r3, [r7, #52]	; 0x34
 800a078:	f04f 0200 	mov.w	r2, #0
 800a07c:	f04f 0300 	mov.w	r3, #0
 800a080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a084:	4659      	mov	r1, fp
 800a086:	00cb      	lsls	r3, r1, #3
 800a088:	4651      	mov	r1, sl
 800a08a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a08e:	4651      	mov	r1, sl
 800a090:	00ca      	lsls	r2, r1, #3
 800a092:	4610      	mov	r0, r2
 800a094:	4619      	mov	r1, r3
 800a096:	4603      	mov	r3, r0
 800a098:	4642      	mov	r2, r8
 800a09a:	189b      	adds	r3, r3, r2
 800a09c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	460a      	mov	r2, r1
 800a0a4:	eb42 0303 	adc.w	r3, r2, r3
 800a0a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a0b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a0bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	18db      	adds	r3, r3, r3
 800a0c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	eb42 0303 	adc.w	r3, r2, r3
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a0d6:	f7f6 fd7f 	bl	8000bd8 <__aeabi_uldivmod>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4b0d      	ldr	r3, [pc, #52]	; (800a114 <UART_SetConfig+0x2d4>)
 800a0e0:	fba3 1302 	umull	r1, r3, r3, r2
 800a0e4:	095b      	lsrs	r3, r3, #5
 800a0e6:	2164      	movs	r1, #100	; 0x64
 800a0e8:	fb01 f303 	mul.w	r3, r1, r3
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	3332      	adds	r3, #50	; 0x32
 800a0f2:	4a08      	ldr	r2, [pc, #32]	; (800a114 <UART_SetConfig+0x2d4>)
 800a0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f8:	095b      	lsrs	r3, r3, #5
 800a0fa:	f003 0207 	and.w	r2, r3, #7
 800a0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4422      	add	r2, r4
 800a106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a108:	e105      	b.n	800a316 <UART_SetConfig+0x4d6>
 800a10a:	bf00      	nop
 800a10c:	40011000 	.word	0x40011000
 800a110:	40011400 	.word	0x40011400
 800a114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a11c:	2200      	movs	r2, #0
 800a11e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a122:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a12a:	4642      	mov	r2, r8
 800a12c:	464b      	mov	r3, r9
 800a12e:	1891      	adds	r1, r2, r2
 800a130:	6239      	str	r1, [r7, #32]
 800a132:	415b      	adcs	r3, r3
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
 800a136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a13a:	4641      	mov	r1, r8
 800a13c:	1854      	adds	r4, r2, r1
 800a13e:	4649      	mov	r1, r9
 800a140:	eb43 0501 	adc.w	r5, r3, r1
 800a144:	f04f 0200 	mov.w	r2, #0
 800a148:	f04f 0300 	mov.w	r3, #0
 800a14c:	00eb      	lsls	r3, r5, #3
 800a14e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a152:	00e2      	lsls	r2, r4, #3
 800a154:	4614      	mov	r4, r2
 800a156:	461d      	mov	r5, r3
 800a158:	4643      	mov	r3, r8
 800a15a:	18e3      	adds	r3, r4, r3
 800a15c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a160:	464b      	mov	r3, r9
 800a162:	eb45 0303 	adc.w	r3, r5, r3
 800a166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a16a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a186:	4629      	mov	r1, r5
 800a188:	008b      	lsls	r3, r1, #2
 800a18a:	4621      	mov	r1, r4
 800a18c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a190:	4621      	mov	r1, r4
 800a192:	008a      	lsls	r2, r1, #2
 800a194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a198:	f7f6 fd1e 	bl	8000bd8 <__aeabi_uldivmod>
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4b60      	ldr	r3, [pc, #384]	; (800a324 <UART_SetConfig+0x4e4>)
 800a1a2:	fba3 2302 	umull	r2, r3, r3, r2
 800a1a6:	095b      	lsrs	r3, r3, #5
 800a1a8:	011c      	lsls	r4, r3, #4
 800a1aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a1b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a1bc:	4642      	mov	r2, r8
 800a1be:	464b      	mov	r3, r9
 800a1c0:	1891      	adds	r1, r2, r2
 800a1c2:	61b9      	str	r1, [r7, #24]
 800a1c4:	415b      	adcs	r3, r3
 800a1c6:	61fb      	str	r3, [r7, #28]
 800a1c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1cc:	4641      	mov	r1, r8
 800a1ce:	1851      	adds	r1, r2, r1
 800a1d0:	6139      	str	r1, [r7, #16]
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	414b      	adcs	r3, r1
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	f04f 0200 	mov.w	r2, #0
 800a1dc:	f04f 0300 	mov.w	r3, #0
 800a1e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1e4:	4659      	mov	r1, fp
 800a1e6:	00cb      	lsls	r3, r1, #3
 800a1e8:	4651      	mov	r1, sl
 800a1ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1ee:	4651      	mov	r1, sl
 800a1f0:	00ca      	lsls	r2, r1, #3
 800a1f2:	4610      	mov	r0, r2
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	4642      	mov	r2, r8
 800a1fa:	189b      	adds	r3, r3, r2
 800a1fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a200:	464b      	mov	r3, r9
 800a202:	460a      	mov	r2, r1
 800a204:	eb42 0303 	adc.w	r3, r2, r3
 800a208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	67bb      	str	r3, [r7, #120]	; 0x78
 800a216:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a218:	f04f 0200 	mov.w	r2, #0
 800a21c:	f04f 0300 	mov.w	r3, #0
 800a220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a224:	4649      	mov	r1, r9
 800a226:	008b      	lsls	r3, r1, #2
 800a228:	4641      	mov	r1, r8
 800a22a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a22e:	4641      	mov	r1, r8
 800a230:	008a      	lsls	r2, r1, #2
 800a232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a236:	f7f6 fccf 	bl	8000bd8 <__aeabi_uldivmod>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4b39      	ldr	r3, [pc, #228]	; (800a324 <UART_SetConfig+0x4e4>)
 800a240:	fba3 1302 	umull	r1, r3, r3, r2
 800a244:	095b      	lsrs	r3, r3, #5
 800a246:	2164      	movs	r1, #100	; 0x64
 800a248:	fb01 f303 	mul.w	r3, r1, r3
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	3332      	adds	r3, #50	; 0x32
 800a252:	4a34      	ldr	r2, [pc, #208]	; (800a324 <UART_SetConfig+0x4e4>)
 800a254:	fba2 2303 	umull	r2, r3, r2, r3
 800a258:	095b      	lsrs	r3, r3, #5
 800a25a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a25e:	441c      	add	r4, r3
 800a260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a264:	2200      	movs	r2, #0
 800a266:	673b      	str	r3, [r7, #112]	; 0x70
 800a268:	677a      	str	r2, [r7, #116]	; 0x74
 800a26a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a26e:	4642      	mov	r2, r8
 800a270:	464b      	mov	r3, r9
 800a272:	1891      	adds	r1, r2, r2
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	415b      	adcs	r3, r3
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a27e:	4641      	mov	r1, r8
 800a280:	1851      	adds	r1, r2, r1
 800a282:	6039      	str	r1, [r7, #0]
 800a284:	4649      	mov	r1, r9
 800a286:	414b      	adcs	r3, r1
 800a288:	607b      	str	r3, [r7, #4]
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	f04f 0300 	mov.w	r3, #0
 800a292:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a296:	4659      	mov	r1, fp
 800a298:	00cb      	lsls	r3, r1, #3
 800a29a:	4651      	mov	r1, sl
 800a29c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2a0:	4651      	mov	r1, sl
 800a2a2:	00ca      	lsls	r2, r1, #3
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	4642      	mov	r2, r8
 800a2ac:	189b      	adds	r3, r3, r2
 800a2ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2b0:	464b      	mov	r3, r9
 800a2b2:	460a      	mov	r2, r1
 800a2b4:	eb42 0303 	adc.w	r3, r2, r3
 800a2b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	663b      	str	r3, [r7, #96]	; 0x60
 800a2c4:	667a      	str	r2, [r7, #100]	; 0x64
 800a2c6:	f04f 0200 	mov.w	r2, #0
 800a2ca:	f04f 0300 	mov.w	r3, #0
 800a2ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a2d2:	4649      	mov	r1, r9
 800a2d4:	008b      	lsls	r3, r1, #2
 800a2d6:	4641      	mov	r1, r8
 800a2d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2dc:	4641      	mov	r1, r8
 800a2de:	008a      	lsls	r2, r1, #2
 800a2e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a2e4:	f7f6 fc78 	bl	8000bd8 <__aeabi_uldivmod>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <UART_SetConfig+0x4e4>)
 800a2ee:	fba3 1302 	umull	r1, r3, r3, r2
 800a2f2:	095b      	lsrs	r3, r3, #5
 800a2f4:	2164      	movs	r1, #100	; 0x64
 800a2f6:	fb01 f303 	mul.w	r3, r1, r3
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	011b      	lsls	r3, r3, #4
 800a2fe:	3332      	adds	r3, #50	; 0x32
 800a300:	4a08      	ldr	r2, [pc, #32]	; (800a324 <UART_SetConfig+0x4e4>)
 800a302:	fba2 2303 	umull	r2, r3, r2, r3
 800a306:	095b      	lsrs	r3, r3, #5
 800a308:	f003 020f 	and.w	r2, r3, #15
 800a30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4422      	add	r2, r4
 800a314:	609a      	str	r2, [r3, #8]
}
 800a316:	bf00      	nop
 800a318:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a31c:	46bd      	mov	sp, r7
 800a31e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a322:	bf00      	nop
 800a324:	51eb851f 	.word	0x51eb851f

0800a328 <atoi>:
 800a328:	220a      	movs	r2, #10
 800a32a:	2100      	movs	r1, #0
 800a32c:	f000 beda 	b.w	800b0e4 <strtol>

0800a330 <__errno>:
 800a330:	4b01      	ldr	r3, [pc, #4]	; (800a338 <__errno+0x8>)
 800a332:	6818      	ldr	r0, [r3, #0]
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	200001d8 	.word	0x200001d8

0800a33c <__libc_init_array>:
 800a33c:	b570      	push	{r4, r5, r6, lr}
 800a33e:	4d0d      	ldr	r5, [pc, #52]	; (800a374 <__libc_init_array+0x38>)
 800a340:	4c0d      	ldr	r4, [pc, #52]	; (800a378 <__libc_init_array+0x3c>)
 800a342:	1b64      	subs	r4, r4, r5
 800a344:	10a4      	asrs	r4, r4, #2
 800a346:	2600      	movs	r6, #0
 800a348:	42a6      	cmp	r6, r4
 800a34a:	d109      	bne.n	800a360 <__libc_init_array+0x24>
 800a34c:	4d0b      	ldr	r5, [pc, #44]	; (800a37c <__libc_init_array+0x40>)
 800a34e:	4c0c      	ldr	r4, [pc, #48]	; (800a380 <__libc_init_array+0x44>)
 800a350:	f003 ff4e 	bl	800e1f0 <_init>
 800a354:	1b64      	subs	r4, r4, r5
 800a356:	10a4      	asrs	r4, r4, #2
 800a358:	2600      	movs	r6, #0
 800a35a:	42a6      	cmp	r6, r4
 800a35c:	d105      	bne.n	800a36a <__libc_init_array+0x2e>
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	f855 3b04 	ldr.w	r3, [r5], #4
 800a364:	4798      	blx	r3
 800a366:	3601      	adds	r6, #1
 800a368:	e7ee      	b.n	800a348 <__libc_init_array+0xc>
 800a36a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a36e:	4798      	blx	r3
 800a370:	3601      	adds	r6, #1
 800a372:	e7f2      	b.n	800a35a <__libc_init_array+0x1e>
 800a374:	0800f278 	.word	0x0800f278
 800a378:	0800f278 	.word	0x0800f278
 800a37c:	0800f278 	.word	0x0800f278
 800a380:	0800f27c 	.word	0x0800f27c

0800a384 <malloc>:
 800a384:	4b02      	ldr	r3, [pc, #8]	; (800a390 <malloc+0xc>)
 800a386:	4601      	mov	r1, r0
 800a388:	6818      	ldr	r0, [r3, #0]
 800a38a:	f000 b87f 	b.w	800a48c <_malloc_r>
 800a38e:	bf00      	nop
 800a390:	200001d8 	.word	0x200001d8

0800a394 <free>:
 800a394:	4b02      	ldr	r3, [pc, #8]	; (800a3a0 <free+0xc>)
 800a396:	4601      	mov	r1, r0
 800a398:	6818      	ldr	r0, [r3, #0]
 800a39a:	f000 b80b 	b.w	800a3b4 <_free_r>
 800a39e:	bf00      	nop
 800a3a0:	200001d8 	.word	0x200001d8

0800a3a4 <memset>:
 800a3a4:	4402      	add	r2, r0
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d100      	bne.n	800a3ae <memset+0xa>
 800a3ac:	4770      	bx	lr
 800a3ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a3b2:	e7f9      	b.n	800a3a8 <memset+0x4>

0800a3b4 <_free_r>:
 800a3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3b6:	2900      	cmp	r1, #0
 800a3b8:	d044      	beq.n	800a444 <_free_r+0x90>
 800a3ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3be:	9001      	str	r0, [sp, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a3c6:	bfb8      	it	lt
 800a3c8:	18e4      	addlt	r4, r4, r3
 800a3ca:	f001 fd57 	bl	800be7c <__malloc_lock>
 800a3ce:	4a1e      	ldr	r2, [pc, #120]	; (800a448 <_free_r+0x94>)
 800a3d0:	9801      	ldr	r0, [sp, #4]
 800a3d2:	6813      	ldr	r3, [r2, #0]
 800a3d4:	b933      	cbnz	r3, 800a3e4 <_free_r+0x30>
 800a3d6:	6063      	str	r3, [r4, #4]
 800a3d8:	6014      	str	r4, [r2, #0]
 800a3da:	b003      	add	sp, #12
 800a3dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3e0:	f001 bd52 	b.w	800be88 <__malloc_unlock>
 800a3e4:	42a3      	cmp	r3, r4
 800a3e6:	d908      	bls.n	800a3fa <_free_r+0x46>
 800a3e8:	6825      	ldr	r5, [r4, #0]
 800a3ea:	1961      	adds	r1, r4, r5
 800a3ec:	428b      	cmp	r3, r1
 800a3ee:	bf01      	itttt	eq
 800a3f0:	6819      	ldreq	r1, [r3, #0]
 800a3f2:	685b      	ldreq	r3, [r3, #4]
 800a3f4:	1949      	addeq	r1, r1, r5
 800a3f6:	6021      	streq	r1, [r4, #0]
 800a3f8:	e7ed      	b.n	800a3d6 <_free_r+0x22>
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	b10b      	cbz	r3, 800a404 <_free_r+0x50>
 800a400:	42a3      	cmp	r3, r4
 800a402:	d9fa      	bls.n	800a3fa <_free_r+0x46>
 800a404:	6811      	ldr	r1, [r2, #0]
 800a406:	1855      	adds	r5, r2, r1
 800a408:	42a5      	cmp	r5, r4
 800a40a:	d10b      	bne.n	800a424 <_free_r+0x70>
 800a40c:	6824      	ldr	r4, [r4, #0]
 800a40e:	4421      	add	r1, r4
 800a410:	1854      	adds	r4, r2, r1
 800a412:	42a3      	cmp	r3, r4
 800a414:	6011      	str	r1, [r2, #0]
 800a416:	d1e0      	bne.n	800a3da <_free_r+0x26>
 800a418:	681c      	ldr	r4, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	6053      	str	r3, [r2, #4]
 800a41e:	4421      	add	r1, r4
 800a420:	6011      	str	r1, [r2, #0]
 800a422:	e7da      	b.n	800a3da <_free_r+0x26>
 800a424:	d902      	bls.n	800a42c <_free_r+0x78>
 800a426:	230c      	movs	r3, #12
 800a428:	6003      	str	r3, [r0, #0]
 800a42a:	e7d6      	b.n	800a3da <_free_r+0x26>
 800a42c:	6825      	ldr	r5, [r4, #0]
 800a42e:	1961      	adds	r1, r4, r5
 800a430:	428b      	cmp	r3, r1
 800a432:	bf04      	itt	eq
 800a434:	6819      	ldreq	r1, [r3, #0]
 800a436:	685b      	ldreq	r3, [r3, #4]
 800a438:	6063      	str	r3, [r4, #4]
 800a43a:	bf04      	itt	eq
 800a43c:	1949      	addeq	r1, r1, r5
 800a43e:	6021      	streq	r1, [r4, #0]
 800a440:	6054      	str	r4, [r2, #4]
 800a442:	e7ca      	b.n	800a3da <_free_r+0x26>
 800a444:	b003      	add	sp, #12
 800a446:	bd30      	pop	{r4, r5, pc}
 800a448:	20000c20 	.word	0x20000c20

0800a44c <sbrk_aligned>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	4e0e      	ldr	r6, [pc, #56]	; (800a488 <sbrk_aligned+0x3c>)
 800a450:	460c      	mov	r4, r1
 800a452:	6831      	ldr	r1, [r6, #0]
 800a454:	4605      	mov	r5, r0
 800a456:	b911      	cbnz	r1, 800a45e <sbrk_aligned+0x12>
 800a458:	f000 fcf6 	bl	800ae48 <_sbrk_r>
 800a45c:	6030      	str	r0, [r6, #0]
 800a45e:	4621      	mov	r1, r4
 800a460:	4628      	mov	r0, r5
 800a462:	f000 fcf1 	bl	800ae48 <_sbrk_r>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	d00a      	beq.n	800a480 <sbrk_aligned+0x34>
 800a46a:	1cc4      	adds	r4, r0, #3
 800a46c:	f024 0403 	bic.w	r4, r4, #3
 800a470:	42a0      	cmp	r0, r4
 800a472:	d007      	beq.n	800a484 <sbrk_aligned+0x38>
 800a474:	1a21      	subs	r1, r4, r0
 800a476:	4628      	mov	r0, r5
 800a478:	f000 fce6 	bl	800ae48 <_sbrk_r>
 800a47c:	3001      	adds	r0, #1
 800a47e:	d101      	bne.n	800a484 <sbrk_aligned+0x38>
 800a480:	f04f 34ff 	mov.w	r4, #4294967295
 800a484:	4620      	mov	r0, r4
 800a486:	bd70      	pop	{r4, r5, r6, pc}
 800a488:	20000c24 	.word	0x20000c24

0800a48c <_malloc_r>:
 800a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	1ccd      	adds	r5, r1, #3
 800a492:	f025 0503 	bic.w	r5, r5, #3
 800a496:	3508      	adds	r5, #8
 800a498:	2d0c      	cmp	r5, #12
 800a49a:	bf38      	it	cc
 800a49c:	250c      	movcc	r5, #12
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	db01      	blt.n	800a4a8 <_malloc_r+0x1c>
 800a4a4:	42a9      	cmp	r1, r5
 800a4a6:	d905      	bls.n	800a4b4 <_malloc_r+0x28>
 800a4a8:	230c      	movs	r3, #12
 800a4aa:	603b      	str	r3, [r7, #0]
 800a4ac:	2600      	movs	r6, #0
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b4:	4e2e      	ldr	r6, [pc, #184]	; (800a570 <_malloc_r+0xe4>)
 800a4b6:	f001 fce1 	bl	800be7c <__malloc_lock>
 800a4ba:	6833      	ldr	r3, [r6, #0]
 800a4bc:	461c      	mov	r4, r3
 800a4be:	bb34      	cbnz	r4, 800a50e <_malloc_r+0x82>
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	f7ff ffc2 	bl	800a44c <sbrk_aligned>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	d14d      	bne.n	800a56a <_malloc_r+0xde>
 800a4ce:	6834      	ldr	r4, [r6, #0]
 800a4d0:	4626      	mov	r6, r4
 800a4d2:	2e00      	cmp	r6, #0
 800a4d4:	d140      	bne.n	800a558 <_malloc_r+0xcc>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	4631      	mov	r1, r6
 800a4da:	4638      	mov	r0, r7
 800a4dc:	eb04 0803 	add.w	r8, r4, r3
 800a4e0:	f000 fcb2 	bl	800ae48 <_sbrk_r>
 800a4e4:	4580      	cmp	r8, r0
 800a4e6:	d13a      	bne.n	800a55e <_malloc_r+0xd2>
 800a4e8:	6821      	ldr	r1, [r4, #0]
 800a4ea:	3503      	adds	r5, #3
 800a4ec:	1a6d      	subs	r5, r5, r1
 800a4ee:	f025 0503 	bic.w	r5, r5, #3
 800a4f2:	3508      	adds	r5, #8
 800a4f4:	2d0c      	cmp	r5, #12
 800a4f6:	bf38      	it	cc
 800a4f8:	250c      	movcc	r5, #12
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	f7ff ffa5 	bl	800a44c <sbrk_aligned>
 800a502:	3001      	adds	r0, #1
 800a504:	d02b      	beq.n	800a55e <_malloc_r+0xd2>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	442b      	add	r3, r5
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	e00e      	b.n	800a52c <_malloc_r+0xa0>
 800a50e:	6822      	ldr	r2, [r4, #0]
 800a510:	1b52      	subs	r2, r2, r5
 800a512:	d41e      	bmi.n	800a552 <_malloc_r+0xc6>
 800a514:	2a0b      	cmp	r2, #11
 800a516:	d916      	bls.n	800a546 <_malloc_r+0xba>
 800a518:	1961      	adds	r1, r4, r5
 800a51a:	42a3      	cmp	r3, r4
 800a51c:	6025      	str	r5, [r4, #0]
 800a51e:	bf18      	it	ne
 800a520:	6059      	strne	r1, [r3, #4]
 800a522:	6863      	ldr	r3, [r4, #4]
 800a524:	bf08      	it	eq
 800a526:	6031      	streq	r1, [r6, #0]
 800a528:	5162      	str	r2, [r4, r5]
 800a52a:	604b      	str	r3, [r1, #4]
 800a52c:	4638      	mov	r0, r7
 800a52e:	f104 060b 	add.w	r6, r4, #11
 800a532:	f001 fca9 	bl	800be88 <__malloc_unlock>
 800a536:	f026 0607 	bic.w	r6, r6, #7
 800a53a:	1d23      	adds	r3, r4, #4
 800a53c:	1af2      	subs	r2, r6, r3
 800a53e:	d0b6      	beq.n	800a4ae <_malloc_r+0x22>
 800a540:	1b9b      	subs	r3, r3, r6
 800a542:	50a3      	str	r3, [r4, r2]
 800a544:	e7b3      	b.n	800a4ae <_malloc_r+0x22>
 800a546:	6862      	ldr	r2, [r4, #4]
 800a548:	42a3      	cmp	r3, r4
 800a54a:	bf0c      	ite	eq
 800a54c:	6032      	streq	r2, [r6, #0]
 800a54e:	605a      	strne	r2, [r3, #4]
 800a550:	e7ec      	b.n	800a52c <_malloc_r+0xa0>
 800a552:	4623      	mov	r3, r4
 800a554:	6864      	ldr	r4, [r4, #4]
 800a556:	e7b2      	b.n	800a4be <_malloc_r+0x32>
 800a558:	4634      	mov	r4, r6
 800a55a:	6876      	ldr	r6, [r6, #4]
 800a55c:	e7b9      	b.n	800a4d2 <_malloc_r+0x46>
 800a55e:	230c      	movs	r3, #12
 800a560:	603b      	str	r3, [r7, #0]
 800a562:	4638      	mov	r0, r7
 800a564:	f001 fc90 	bl	800be88 <__malloc_unlock>
 800a568:	e7a1      	b.n	800a4ae <_malloc_r+0x22>
 800a56a:	6025      	str	r5, [r4, #0]
 800a56c:	e7de      	b.n	800a52c <_malloc_r+0xa0>
 800a56e:	bf00      	nop
 800a570:	20000c20 	.word	0x20000c20

0800a574 <__cvt>:
 800a574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a578:	ec55 4b10 	vmov	r4, r5, d0
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	460e      	mov	r6, r1
 800a580:	4619      	mov	r1, r3
 800a582:	462b      	mov	r3, r5
 800a584:	bfbb      	ittet	lt
 800a586:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a58a:	461d      	movlt	r5, r3
 800a58c:	2300      	movge	r3, #0
 800a58e:	232d      	movlt	r3, #45	; 0x2d
 800a590:	700b      	strb	r3, [r1, #0]
 800a592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a594:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a598:	4691      	mov	r9, r2
 800a59a:	f023 0820 	bic.w	r8, r3, #32
 800a59e:	bfbc      	itt	lt
 800a5a0:	4622      	movlt	r2, r4
 800a5a2:	4614      	movlt	r4, r2
 800a5a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5a8:	d005      	beq.n	800a5b6 <__cvt+0x42>
 800a5aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a5ae:	d100      	bne.n	800a5b2 <__cvt+0x3e>
 800a5b0:	3601      	adds	r6, #1
 800a5b2:	2102      	movs	r1, #2
 800a5b4:	e000      	b.n	800a5b8 <__cvt+0x44>
 800a5b6:	2103      	movs	r1, #3
 800a5b8:	ab03      	add	r3, sp, #12
 800a5ba:	9301      	str	r3, [sp, #4]
 800a5bc:	ab02      	add	r3, sp, #8
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	ec45 4b10 	vmov	d0, r4, r5
 800a5c4:	4653      	mov	r3, sl
 800a5c6:	4632      	mov	r2, r6
 800a5c8:	f000 fe46 	bl	800b258 <_dtoa_r>
 800a5cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a5d0:	4607      	mov	r7, r0
 800a5d2:	d102      	bne.n	800a5da <__cvt+0x66>
 800a5d4:	f019 0f01 	tst.w	r9, #1
 800a5d8:	d022      	beq.n	800a620 <__cvt+0xac>
 800a5da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5de:	eb07 0906 	add.w	r9, r7, r6
 800a5e2:	d110      	bne.n	800a606 <__cvt+0x92>
 800a5e4:	783b      	ldrb	r3, [r7, #0]
 800a5e6:	2b30      	cmp	r3, #48	; 0x30
 800a5e8:	d10a      	bne.n	800a600 <__cvt+0x8c>
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	f7f6 fa81 	bl	8000af8 <__aeabi_dcmpeq>
 800a5f6:	b918      	cbnz	r0, 800a600 <__cvt+0x8c>
 800a5f8:	f1c6 0601 	rsb	r6, r6, #1
 800a5fc:	f8ca 6000 	str.w	r6, [sl]
 800a600:	f8da 3000 	ldr.w	r3, [sl]
 800a604:	4499      	add	r9, r3
 800a606:	2200      	movs	r2, #0
 800a608:	2300      	movs	r3, #0
 800a60a:	4620      	mov	r0, r4
 800a60c:	4629      	mov	r1, r5
 800a60e:	f7f6 fa73 	bl	8000af8 <__aeabi_dcmpeq>
 800a612:	b108      	cbz	r0, 800a618 <__cvt+0xa4>
 800a614:	f8cd 900c 	str.w	r9, [sp, #12]
 800a618:	2230      	movs	r2, #48	; 0x30
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	454b      	cmp	r3, r9
 800a61e:	d307      	bcc.n	800a630 <__cvt+0xbc>
 800a620:	9b03      	ldr	r3, [sp, #12]
 800a622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a624:	1bdb      	subs	r3, r3, r7
 800a626:	4638      	mov	r0, r7
 800a628:	6013      	str	r3, [r2, #0]
 800a62a:	b004      	add	sp, #16
 800a62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a630:	1c59      	adds	r1, r3, #1
 800a632:	9103      	str	r1, [sp, #12]
 800a634:	701a      	strb	r2, [r3, #0]
 800a636:	e7f0      	b.n	800a61a <__cvt+0xa6>

0800a638 <__exponent>:
 800a638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a63a:	4603      	mov	r3, r0
 800a63c:	2900      	cmp	r1, #0
 800a63e:	bfb8      	it	lt
 800a640:	4249      	neglt	r1, r1
 800a642:	f803 2b02 	strb.w	r2, [r3], #2
 800a646:	bfb4      	ite	lt
 800a648:	222d      	movlt	r2, #45	; 0x2d
 800a64a:	222b      	movge	r2, #43	; 0x2b
 800a64c:	2909      	cmp	r1, #9
 800a64e:	7042      	strb	r2, [r0, #1]
 800a650:	dd2a      	ble.n	800a6a8 <__exponent+0x70>
 800a652:	f10d 0407 	add.w	r4, sp, #7
 800a656:	46a4      	mov	ip, r4
 800a658:	270a      	movs	r7, #10
 800a65a:	46a6      	mov	lr, r4
 800a65c:	460a      	mov	r2, r1
 800a65e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a662:	fb07 1516 	mls	r5, r7, r6, r1
 800a666:	3530      	adds	r5, #48	; 0x30
 800a668:	2a63      	cmp	r2, #99	; 0x63
 800a66a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a66e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a672:	4631      	mov	r1, r6
 800a674:	dcf1      	bgt.n	800a65a <__exponent+0x22>
 800a676:	3130      	adds	r1, #48	; 0x30
 800a678:	f1ae 0502 	sub.w	r5, lr, #2
 800a67c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a680:	1c44      	adds	r4, r0, #1
 800a682:	4629      	mov	r1, r5
 800a684:	4561      	cmp	r1, ip
 800a686:	d30a      	bcc.n	800a69e <__exponent+0x66>
 800a688:	f10d 0209 	add.w	r2, sp, #9
 800a68c:	eba2 020e 	sub.w	r2, r2, lr
 800a690:	4565      	cmp	r5, ip
 800a692:	bf88      	it	hi
 800a694:	2200      	movhi	r2, #0
 800a696:	4413      	add	r3, r2
 800a698:	1a18      	subs	r0, r3, r0
 800a69a:	b003      	add	sp, #12
 800a69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a69e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a6a6:	e7ed      	b.n	800a684 <__exponent+0x4c>
 800a6a8:	2330      	movs	r3, #48	; 0x30
 800a6aa:	3130      	adds	r1, #48	; 0x30
 800a6ac:	7083      	strb	r3, [r0, #2]
 800a6ae:	70c1      	strb	r1, [r0, #3]
 800a6b0:	1d03      	adds	r3, r0, #4
 800a6b2:	e7f1      	b.n	800a698 <__exponent+0x60>

0800a6b4 <_printf_float>:
 800a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b8:	ed2d 8b02 	vpush	{d8}
 800a6bc:	b08d      	sub	sp, #52	; 0x34
 800a6be:	460c      	mov	r4, r1
 800a6c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a6c4:	4616      	mov	r6, r2
 800a6c6:	461f      	mov	r7, r3
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	f001 fbb3 	bl	800be34 <_localeconv_r>
 800a6ce:	f8d0 a000 	ldr.w	sl, [r0]
 800a6d2:	4650      	mov	r0, sl
 800a6d4:	f7f5 fd8e 	bl	80001f4 <strlen>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	930a      	str	r3, [sp, #40]	; 0x28
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	9305      	str	r3, [sp, #20]
 800a6e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a6e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a6e8:	3307      	adds	r3, #7
 800a6ea:	f023 0307 	bic.w	r3, r3, #7
 800a6ee:	f103 0208 	add.w	r2, r3, #8
 800a6f2:	f8c8 2000 	str.w	r2, [r8]
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a6fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a702:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a706:	9307      	str	r3, [sp, #28]
 800a708:	f8cd 8018 	str.w	r8, [sp, #24]
 800a70c:	ee08 0a10 	vmov	s16, r0
 800a710:	4b9f      	ldr	r3, [pc, #636]	; (800a990 <_printf_float+0x2dc>)
 800a712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a716:	f04f 32ff 	mov.w	r2, #4294967295
 800a71a:	f7f6 fa1f 	bl	8000b5c <__aeabi_dcmpun>
 800a71e:	bb88      	cbnz	r0, 800a784 <_printf_float+0xd0>
 800a720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a724:	4b9a      	ldr	r3, [pc, #616]	; (800a990 <_printf_float+0x2dc>)
 800a726:	f04f 32ff 	mov.w	r2, #4294967295
 800a72a:	f7f6 f9f9 	bl	8000b20 <__aeabi_dcmple>
 800a72e:	bb48      	cbnz	r0, 800a784 <_printf_float+0xd0>
 800a730:	2200      	movs	r2, #0
 800a732:	2300      	movs	r3, #0
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	f7f6 f9e8 	bl	8000b0c <__aeabi_dcmplt>
 800a73c:	b110      	cbz	r0, 800a744 <_printf_float+0x90>
 800a73e:	232d      	movs	r3, #45	; 0x2d
 800a740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a744:	4b93      	ldr	r3, [pc, #588]	; (800a994 <_printf_float+0x2e0>)
 800a746:	4894      	ldr	r0, [pc, #592]	; (800a998 <_printf_float+0x2e4>)
 800a748:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a74c:	bf94      	ite	ls
 800a74e:	4698      	movls	r8, r3
 800a750:	4680      	movhi	r8, r0
 800a752:	2303      	movs	r3, #3
 800a754:	6123      	str	r3, [r4, #16]
 800a756:	9b05      	ldr	r3, [sp, #20]
 800a758:	f023 0204 	bic.w	r2, r3, #4
 800a75c:	6022      	str	r2, [r4, #0]
 800a75e:	f04f 0900 	mov.w	r9, #0
 800a762:	9700      	str	r7, [sp, #0]
 800a764:	4633      	mov	r3, r6
 800a766:	aa0b      	add	r2, sp, #44	; 0x2c
 800a768:	4621      	mov	r1, r4
 800a76a:	4628      	mov	r0, r5
 800a76c:	f000 f9d8 	bl	800ab20 <_printf_common>
 800a770:	3001      	adds	r0, #1
 800a772:	f040 8090 	bne.w	800a896 <_printf_float+0x1e2>
 800a776:	f04f 30ff 	mov.w	r0, #4294967295
 800a77a:	b00d      	add	sp, #52	; 0x34
 800a77c:	ecbd 8b02 	vpop	{d8}
 800a780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a784:	4642      	mov	r2, r8
 800a786:	464b      	mov	r3, r9
 800a788:	4640      	mov	r0, r8
 800a78a:	4649      	mov	r1, r9
 800a78c:	f7f6 f9e6 	bl	8000b5c <__aeabi_dcmpun>
 800a790:	b140      	cbz	r0, 800a7a4 <_printf_float+0xf0>
 800a792:	464b      	mov	r3, r9
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfbc      	itt	lt
 800a798:	232d      	movlt	r3, #45	; 0x2d
 800a79a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a79e:	487f      	ldr	r0, [pc, #508]	; (800a99c <_printf_float+0x2e8>)
 800a7a0:	4b7f      	ldr	r3, [pc, #508]	; (800a9a0 <_printf_float+0x2ec>)
 800a7a2:	e7d1      	b.n	800a748 <_printf_float+0x94>
 800a7a4:	6863      	ldr	r3, [r4, #4]
 800a7a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a7aa:	9206      	str	r2, [sp, #24]
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	d13f      	bne.n	800a830 <_printf_float+0x17c>
 800a7b0:	2306      	movs	r3, #6
 800a7b2:	6063      	str	r3, [r4, #4]
 800a7b4:	9b05      	ldr	r3, [sp, #20]
 800a7b6:	6861      	ldr	r1, [r4, #4]
 800a7b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a7bc:	2300      	movs	r3, #0
 800a7be:	9303      	str	r3, [sp, #12]
 800a7c0:	ab0a      	add	r3, sp, #40	; 0x28
 800a7c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a7c6:	ab09      	add	r3, sp, #36	; 0x24
 800a7c8:	ec49 8b10 	vmov	d0, r8, r9
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	6022      	str	r2, [r4, #0]
 800a7d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f7ff fecd 	bl	800a574 <__cvt>
 800a7da:	9b06      	ldr	r3, [sp, #24]
 800a7dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7de:	2b47      	cmp	r3, #71	; 0x47
 800a7e0:	4680      	mov	r8, r0
 800a7e2:	d108      	bne.n	800a7f6 <_printf_float+0x142>
 800a7e4:	1cc8      	adds	r0, r1, #3
 800a7e6:	db02      	blt.n	800a7ee <_printf_float+0x13a>
 800a7e8:	6863      	ldr	r3, [r4, #4]
 800a7ea:	4299      	cmp	r1, r3
 800a7ec:	dd41      	ble.n	800a872 <_printf_float+0x1be>
 800a7ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800a7f2:	fa5f fb8b 	uxtb.w	fp, fp
 800a7f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7fa:	d820      	bhi.n	800a83e <_printf_float+0x18a>
 800a7fc:	3901      	subs	r1, #1
 800a7fe:	465a      	mov	r2, fp
 800a800:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a804:	9109      	str	r1, [sp, #36]	; 0x24
 800a806:	f7ff ff17 	bl	800a638 <__exponent>
 800a80a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a80c:	1813      	adds	r3, r2, r0
 800a80e:	2a01      	cmp	r2, #1
 800a810:	4681      	mov	r9, r0
 800a812:	6123      	str	r3, [r4, #16]
 800a814:	dc02      	bgt.n	800a81c <_printf_float+0x168>
 800a816:	6822      	ldr	r2, [r4, #0]
 800a818:	07d2      	lsls	r2, r2, #31
 800a81a:	d501      	bpl.n	800a820 <_printf_float+0x16c>
 800a81c:	3301      	adds	r3, #1
 800a81e:	6123      	str	r3, [r4, #16]
 800a820:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a824:	2b00      	cmp	r3, #0
 800a826:	d09c      	beq.n	800a762 <_printf_float+0xae>
 800a828:	232d      	movs	r3, #45	; 0x2d
 800a82a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a82e:	e798      	b.n	800a762 <_printf_float+0xae>
 800a830:	9a06      	ldr	r2, [sp, #24]
 800a832:	2a47      	cmp	r2, #71	; 0x47
 800a834:	d1be      	bne.n	800a7b4 <_printf_float+0x100>
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1bc      	bne.n	800a7b4 <_printf_float+0x100>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e7b9      	b.n	800a7b2 <_printf_float+0xfe>
 800a83e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a842:	d118      	bne.n	800a876 <_printf_float+0x1c2>
 800a844:	2900      	cmp	r1, #0
 800a846:	6863      	ldr	r3, [r4, #4]
 800a848:	dd0b      	ble.n	800a862 <_printf_float+0x1ae>
 800a84a:	6121      	str	r1, [r4, #16]
 800a84c:	b913      	cbnz	r3, 800a854 <_printf_float+0x1a0>
 800a84e:	6822      	ldr	r2, [r4, #0]
 800a850:	07d0      	lsls	r0, r2, #31
 800a852:	d502      	bpl.n	800a85a <_printf_float+0x1a6>
 800a854:	3301      	adds	r3, #1
 800a856:	440b      	add	r3, r1
 800a858:	6123      	str	r3, [r4, #16]
 800a85a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a85c:	f04f 0900 	mov.w	r9, #0
 800a860:	e7de      	b.n	800a820 <_printf_float+0x16c>
 800a862:	b913      	cbnz	r3, 800a86a <_printf_float+0x1b6>
 800a864:	6822      	ldr	r2, [r4, #0]
 800a866:	07d2      	lsls	r2, r2, #31
 800a868:	d501      	bpl.n	800a86e <_printf_float+0x1ba>
 800a86a:	3302      	adds	r3, #2
 800a86c:	e7f4      	b.n	800a858 <_printf_float+0x1a4>
 800a86e:	2301      	movs	r3, #1
 800a870:	e7f2      	b.n	800a858 <_printf_float+0x1a4>
 800a872:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a878:	4299      	cmp	r1, r3
 800a87a:	db05      	blt.n	800a888 <_printf_float+0x1d4>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	6121      	str	r1, [r4, #16]
 800a880:	07d8      	lsls	r0, r3, #31
 800a882:	d5ea      	bpl.n	800a85a <_printf_float+0x1a6>
 800a884:	1c4b      	adds	r3, r1, #1
 800a886:	e7e7      	b.n	800a858 <_printf_float+0x1a4>
 800a888:	2900      	cmp	r1, #0
 800a88a:	bfd4      	ite	le
 800a88c:	f1c1 0202 	rsble	r2, r1, #2
 800a890:	2201      	movgt	r2, #1
 800a892:	4413      	add	r3, r2
 800a894:	e7e0      	b.n	800a858 <_printf_float+0x1a4>
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	055a      	lsls	r2, r3, #21
 800a89a:	d407      	bmi.n	800a8ac <_printf_float+0x1f8>
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	4642      	mov	r2, r8
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	47b8      	blx	r7
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	d12c      	bne.n	800a904 <_printf_float+0x250>
 800a8aa:	e764      	b.n	800a776 <_printf_float+0xc2>
 800a8ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8b0:	f240 80e0 	bls.w	800aa74 <_printf_float+0x3c0>
 800a8b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f7f6 f91c 	bl	8000af8 <__aeabi_dcmpeq>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d034      	beq.n	800a92e <_printf_float+0x27a>
 800a8c4:	4a37      	ldr	r2, [pc, #220]	; (800a9a4 <_printf_float+0x2f0>)
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	47b8      	blx	r7
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	f43f af51 	beq.w	800a776 <_printf_float+0xc2>
 800a8d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	db02      	blt.n	800a8e2 <_printf_float+0x22e>
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	07d8      	lsls	r0, r3, #31
 800a8e0:	d510      	bpl.n	800a904 <_printf_float+0x250>
 800a8e2:	ee18 3a10 	vmov	r3, s16
 800a8e6:	4652      	mov	r2, sl
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	47b8      	blx	r7
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	f43f af41 	beq.w	800a776 <_printf_float+0xc2>
 800a8f4:	f04f 0800 	mov.w	r8, #0
 800a8f8:	f104 091a 	add.w	r9, r4, #26
 800a8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8fe:	3b01      	subs	r3, #1
 800a900:	4543      	cmp	r3, r8
 800a902:	dc09      	bgt.n	800a918 <_printf_float+0x264>
 800a904:	6823      	ldr	r3, [r4, #0]
 800a906:	079b      	lsls	r3, r3, #30
 800a908:	f100 8105 	bmi.w	800ab16 <_printf_float+0x462>
 800a90c:	68e0      	ldr	r0, [r4, #12]
 800a90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a910:	4298      	cmp	r0, r3
 800a912:	bfb8      	it	lt
 800a914:	4618      	movlt	r0, r3
 800a916:	e730      	b.n	800a77a <_printf_float+0xc6>
 800a918:	2301      	movs	r3, #1
 800a91a:	464a      	mov	r2, r9
 800a91c:	4631      	mov	r1, r6
 800a91e:	4628      	mov	r0, r5
 800a920:	47b8      	blx	r7
 800a922:	3001      	adds	r0, #1
 800a924:	f43f af27 	beq.w	800a776 <_printf_float+0xc2>
 800a928:	f108 0801 	add.w	r8, r8, #1
 800a92c:	e7e6      	b.n	800a8fc <_printf_float+0x248>
 800a92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a930:	2b00      	cmp	r3, #0
 800a932:	dc39      	bgt.n	800a9a8 <_printf_float+0x2f4>
 800a934:	4a1b      	ldr	r2, [pc, #108]	; (800a9a4 <_printf_float+0x2f0>)
 800a936:	2301      	movs	r3, #1
 800a938:	4631      	mov	r1, r6
 800a93a:	4628      	mov	r0, r5
 800a93c:	47b8      	blx	r7
 800a93e:	3001      	adds	r0, #1
 800a940:	f43f af19 	beq.w	800a776 <_printf_float+0xc2>
 800a944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a948:	4313      	orrs	r3, r2
 800a94a:	d102      	bne.n	800a952 <_printf_float+0x29e>
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	07d9      	lsls	r1, r3, #31
 800a950:	d5d8      	bpl.n	800a904 <_printf_float+0x250>
 800a952:	ee18 3a10 	vmov	r3, s16
 800a956:	4652      	mov	r2, sl
 800a958:	4631      	mov	r1, r6
 800a95a:	4628      	mov	r0, r5
 800a95c:	47b8      	blx	r7
 800a95e:	3001      	adds	r0, #1
 800a960:	f43f af09 	beq.w	800a776 <_printf_float+0xc2>
 800a964:	f04f 0900 	mov.w	r9, #0
 800a968:	f104 0a1a 	add.w	sl, r4, #26
 800a96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96e:	425b      	negs	r3, r3
 800a970:	454b      	cmp	r3, r9
 800a972:	dc01      	bgt.n	800a978 <_printf_float+0x2c4>
 800a974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a976:	e792      	b.n	800a89e <_printf_float+0x1ea>
 800a978:	2301      	movs	r3, #1
 800a97a:	4652      	mov	r2, sl
 800a97c:	4631      	mov	r1, r6
 800a97e:	4628      	mov	r0, r5
 800a980:	47b8      	blx	r7
 800a982:	3001      	adds	r0, #1
 800a984:	f43f aef7 	beq.w	800a776 <_printf_float+0xc2>
 800a988:	f109 0901 	add.w	r9, r9, #1
 800a98c:	e7ee      	b.n	800a96c <_printf_float+0x2b8>
 800a98e:	bf00      	nop
 800a990:	7fefffff 	.word	0x7fefffff
 800a994:	0800ee0c 	.word	0x0800ee0c
 800a998:	0800ee10 	.word	0x0800ee10
 800a99c:	0800ee18 	.word	0x0800ee18
 800a9a0:	0800ee14 	.word	0x0800ee14
 800a9a4:	0800f141 	.word	0x0800f141
 800a9a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	bfa8      	it	ge
 800a9b0:	461a      	movge	r2, r3
 800a9b2:	2a00      	cmp	r2, #0
 800a9b4:	4691      	mov	r9, r2
 800a9b6:	dc37      	bgt.n	800aa28 <_printf_float+0x374>
 800a9b8:	f04f 0b00 	mov.w	fp, #0
 800a9bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9c0:	f104 021a 	add.w	r2, r4, #26
 800a9c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9c6:	9305      	str	r3, [sp, #20]
 800a9c8:	eba3 0309 	sub.w	r3, r3, r9
 800a9cc:	455b      	cmp	r3, fp
 800a9ce:	dc33      	bgt.n	800aa38 <_printf_float+0x384>
 800a9d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	db3b      	blt.n	800aa50 <_printf_float+0x39c>
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	07da      	lsls	r2, r3, #31
 800a9dc:	d438      	bmi.n	800aa50 <_printf_float+0x39c>
 800a9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e0:	9a05      	ldr	r2, [sp, #20]
 800a9e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9e4:	1a9a      	subs	r2, r3, r2
 800a9e6:	eba3 0901 	sub.w	r9, r3, r1
 800a9ea:	4591      	cmp	r9, r2
 800a9ec:	bfa8      	it	ge
 800a9ee:	4691      	movge	r9, r2
 800a9f0:	f1b9 0f00 	cmp.w	r9, #0
 800a9f4:	dc35      	bgt.n	800aa62 <_printf_float+0x3ae>
 800a9f6:	f04f 0800 	mov.w	r8, #0
 800a9fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9fe:	f104 0a1a 	add.w	sl, r4, #26
 800aa02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa06:	1a9b      	subs	r3, r3, r2
 800aa08:	eba3 0309 	sub.w	r3, r3, r9
 800aa0c:	4543      	cmp	r3, r8
 800aa0e:	f77f af79 	ble.w	800a904 <_printf_float+0x250>
 800aa12:	2301      	movs	r3, #1
 800aa14:	4652      	mov	r2, sl
 800aa16:	4631      	mov	r1, r6
 800aa18:	4628      	mov	r0, r5
 800aa1a:	47b8      	blx	r7
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	f43f aeaa 	beq.w	800a776 <_printf_float+0xc2>
 800aa22:	f108 0801 	add.w	r8, r8, #1
 800aa26:	e7ec      	b.n	800aa02 <_printf_float+0x34e>
 800aa28:	4613      	mov	r3, r2
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	4642      	mov	r2, r8
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b8      	blx	r7
 800aa32:	3001      	adds	r0, #1
 800aa34:	d1c0      	bne.n	800a9b8 <_printf_float+0x304>
 800aa36:	e69e      	b.n	800a776 <_printf_float+0xc2>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	9205      	str	r2, [sp, #20]
 800aa40:	47b8      	blx	r7
 800aa42:	3001      	adds	r0, #1
 800aa44:	f43f ae97 	beq.w	800a776 <_printf_float+0xc2>
 800aa48:	9a05      	ldr	r2, [sp, #20]
 800aa4a:	f10b 0b01 	add.w	fp, fp, #1
 800aa4e:	e7b9      	b.n	800a9c4 <_printf_float+0x310>
 800aa50:	ee18 3a10 	vmov	r3, s16
 800aa54:	4652      	mov	r2, sl
 800aa56:	4631      	mov	r1, r6
 800aa58:	4628      	mov	r0, r5
 800aa5a:	47b8      	blx	r7
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d1be      	bne.n	800a9de <_printf_float+0x32a>
 800aa60:	e689      	b.n	800a776 <_printf_float+0xc2>
 800aa62:	9a05      	ldr	r2, [sp, #20]
 800aa64:	464b      	mov	r3, r9
 800aa66:	4442      	add	r2, r8
 800aa68:	4631      	mov	r1, r6
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	47b8      	blx	r7
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d1c1      	bne.n	800a9f6 <_printf_float+0x342>
 800aa72:	e680      	b.n	800a776 <_printf_float+0xc2>
 800aa74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa76:	2a01      	cmp	r2, #1
 800aa78:	dc01      	bgt.n	800aa7e <_printf_float+0x3ca>
 800aa7a:	07db      	lsls	r3, r3, #31
 800aa7c:	d538      	bpl.n	800aaf0 <_printf_float+0x43c>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4642      	mov	r2, r8
 800aa82:	4631      	mov	r1, r6
 800aa84:	4628      	mov	r0, r5
 800aa86:	47b8      	blx	r7
 800aa88:	3001      	adds	r0, #1
 800aa8a:	f43f ae74 	beq.w	800a776 <_printf_float+0xc2>
 800aa8e:	ee18 3a10 	vmov	r3, s16
 800aa92:	4652      	mov	r2, sl
 800aa94:	4631      	mov	r1, r6
 800aa96:	4628      	mov	r0, r5
 800aa98:	47b8      	blx	r7
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	f43f ae6b 	beq.w	800a776 <_printf_float+0xc2>
 800aaa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f7f6 f826 	bl	8000af8 <__aeabi_dcmpeq>
 800aaac:	b9d8      	cbnz	r0, 800aae6 <_printf_float+0x432>
 800aaae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab0:	f108 0201 	add.w	r2, r8, #1
 800aab4:	3b01      	subs	r3, #1
 800aab6:	4631      	mov	r1, r6
 800aab8:	4628      	mov	r0, r5
 800aaba:	47b8      	blx	r7
 800aabc:	3001      	adds	r0, #1
 800aabe:	d10e      	bne.n	800aade <_printf_float+0x42a>
 800aac0:	e659      	b.n	800a776 <_printf_float+0xc2>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4652      	mov	r2, sl
 800aac6:	4631      	mov	r1, r6
 800aac8:	4628      	mov	r0, r5
 800aaca:	47b8      	blx	r7
 800aacc:	3001      	adds	r0, #1
 800aace:	f43f ae52 	beq.w	800a776 <_printf_float+0xc2>
 800aad2:	f108 0801 	add.w	r8, r8, #1
 800aad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad8:	3b01      	subs	r3, #1
 800aada:	4543      	cmp	r3, r8
 800aadc:	dcf1      	bgt.n	800aac2 <_printf_float+0x40e>
 800aade:	464b      	mov	r3, r9
 800aae0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aae4:	e6dc      	b.n	800a8a0 <_printf_float+0x1ec>
 800aae6:	f04f 0800 	mov.w	r8, #0
 800aaea:	f104 0a1a 	add.w	sl, r4, #26
 800aaee:	e7f2      	b.n	800aad6 <_printf_float+0x422>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	4642      	mov	r2, r8
 800aaf4:	e7df      	b.n	800aab6 <_printf_float+0x402>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	464a      	mov	r2, r9
 800aafa:	4631      	mov	r1, r6
 800aafc:	4628      	mov	r0, r5
 800aafe:	47b8      	blx	r7
 800ab00:	3001      	adds	r0, #1
 800ab02:	f43f ae38 	beq.w	800a776 <_printf_float+0xc2>
 800ab06:	f108 0801 	add.w	r8, r8, #1
 800ab0a:	68e3      	ldr	r3, [r4, #12]
 800ab0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab0e:	1a5b      	subs	r3, r3, r1
 800ab10:	4543      	cmp	r3, r8
 800ab12:	dcf0      	bgt.n	800aaf6 <_printf_float+0x442>
 800ab14:	e6fa      	b.n	800a90c <_printf_float+0x258>
 800ab16:	f04f 0800 	mov.w	r8, #0
 800ab1a:	f104 0919 	add.w	r9, r4, #25
 800ab1e:	e7f4      	b.n	800ab0a <_printf_float+0x456>

0800ab20 <_printf_common>:
 800ab20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab24:	4616      	mov	r6, r2
 800ab26:	4699      	mov	r9, r3
 800ab28:	688a      	ldr	r2, [r1, #8]
 800ab2a:	690b      	ldr	r3, [r1, #16]
 800ab2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab30:	4293      	cmp	r3, r2
 800ab32:	bfb8      	it	lt
 800ab34:	4613      	movlt	r3, r2
 800ab36:	6033      	str	r3, [r6, #0]
 800ab38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	b10a      	cbz	r2, 800ab46 <_printf_common+0x26>
 800ab42:	3301      	adds	r3, #1
 800ab44:	6033      	str	r3, [r6, #0]
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	0699      	lsls	r1, r3, #26
 800ab4a:	bf42      	ittt	mi
 800ab4c:	6833      	ldrmi	r3, [r6, #0]
 800ab4e:	3302      	addmi	r3, #2
 800ab50:	6033      	strmi	r3, [r6, #0]
 800ab52:	6825      	ldr	r5, [r4, #0]
 800ab54:	f015 0506 	ands.w	r5, r5, #6
 800ab58:	d106      	bne.n	800ab68 <_printf_common+0x48>
 800ab5a:	f104 0a19 	add.w	sl, r4, #25
 800ab5e:	68e3      	ldr	r3, [r4, #12]
 800ab60:	6832      	ldr	r2, [r6, #0]
 800ab62:	1a9b      	subs	r3, r3, r2
 800ab64:	42ab      	cmp	r3, r5
 800ab66:	dc26      	bgt.n	800abb6 <_printf_common+0x96>
 800ab68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab6c:	1e13      	subs	r3, r2, #0
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	bf18      	it	ne
 800ab72:	2301      	movne	r3, #1
 800ab74:	0692      	lsls	r2, r2, #26
 800ab76:	d42b      	bmi.n	800abd0 <_printf_common+0xb0>
 800ab78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	4638      	mov	r0, r7
 800ab80:	47c0      	blx	r8
 800ab82:	3001      	adds	r0, #1
 800ab84:	d01e      	beq.n	800abc4 <_printf_common+0xa4>
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	68e5      	ldr	r5, [r4, #12]
 800ab8a:	6832      	ldr	r2, [r6, #0]
 800ab8c:	f003 0306 	and.w	r3, r3, #6
 800ab90:	2b04      	cmp	r3, #4
 800ab92:	bf08      	it	eq
 800ab94:	1aad      	subeq	r5, r5, r2
 800ab96:	68a3      	ldr	r3, [r4, #8]
 800ab98:	6922      	ldr	r2, [r4, #16]
 800ab9a:	bf0c      	ite	eq
 800ab9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aba0:	2500      	movne	r5, #0
 800aba2:	4293      	cmp	r3, r2
 800aba4:	bfc4      	itt	gt
 800aba6:	1a9b      	subgt	r3, r3, r2
 800aba8:	18ed      	addgt	r5, r5, r3
 800abaa:	2600      	movs	r6, #0
 800abac:	341a      	adds	r4, #26
 800abae:	42b5      	cmp	r5, r6
 800abb0:	d11a      	bne.n	800abe8 <_printf_common+0xc8>
 800abb2:	2000      	movs	r0, #0
 800abb4:	e008      	b.n	800abc8 <_printf_common+0xa8>
 800abb6:	2301      	movs	r3, #1
 800abb8:	4652      	mov	r2, sl
 800abba:	4649      	mov	r1, r9
 800abbc:	4638      	mov	r0, r7
 800abbe:	47c0      	blx	r8
 800abc0:	3001      	adds	r0, #1
 800abc2:	d103      	bne.n	800abcc <_printf_common+0xac>
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abcc:	3501      	adds	r5, #1
 800abce:	e7c6      	b.n	800ab5e <_printf_common+0x3e>
 800abd0:	18e1      	adds	r1, r4, r3
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	2030      	movs	r0, #48	; 0x30
 800abd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abda:	4422      	add	r2, r4
 800abdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abe4:	3302      	adds	r3, #2
 800abe6:	e7c7      	b.n	800ab78 <_printf_common+0x58>
 800abe8:	2301      	movs	r3, #1
 800abea:	4622      	mov	r2, r4
 800abec:	4649      	mov	r1, r9
 800abee:	4638      	mov	r0, r7
 800abf0:	47c0      	blx	r8
 800abf2:	3001      	adds	r0, #1
 800abf4:	d0e6      	beq.n	800abc4 <_printf_common+0xa4>
 800abf6:	3601      	adds	r6, #1
 800abf8:	e7d9      	b.n	800abae <_printf_common+0x8e>
	...

0800abfc <_printf_i>:
 800abfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac00:	7e0f      	ldrb	r7, [r1, #24]
 800ac02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac04:	2f78      	cmp	r7, #120	; 0x78
 800ac06:	4691      	mov	r9, r2
 800ac08:	4680      	mov	r8, r0
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	469a      	mov	sl, r3
 800ac0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac12:	d807      	bhi.n	800ac24 <_printf_i+0x28>
 800ac14:	2f62      	cmp	r7, #98	; 0x62
 800ac16:	d80a      	bhi.n	800ac2e <_printf_i+0x32>
 800ac18:	2f00      	cmp	r7, #0
 800ac1a:	f000 80d8 	beq.w	800adce <_printf_i+0x1d2>
 800ac1e:	2f58      	cmp	r7, #88	; 0x58
 800ac20:	f000 80a3 	beq.w	800ad6a <_printf_i+0x16e>
 800ac24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac2c:	e03a      	b.n	800aca4 <_printf_i+0xa8>
 800ac2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac32:	2b15      	cmp	r3, #21
 800ac34:	d8f6      	bhi.n	800ac24 <_printf_i+0x28>
 800ac36:	a101      	add	r1, pc, #4	; (adr r1, 800ac3c <_printf_i+0x40>)
 800ac38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac3c:	0800ac95 	.word	0x0800ac95
 800ac40:	0800aca9 	.word	0x0800aca9
 800ac44:	0800ac25 	.word	0x0800ac25
 800ac48:	0800ac25 	.word	0x0800ac25
 800ac4c:	0800ac25 	.word	0x0800ac25
 800ac50:	0800ac25 	.word	0x0800ac25
 800ac54:	0800aca9 	.word	0x0800aca9
 800ac58:	0800ac25 	.word	0x0800ac25
 800ac5c:	0800ac25 	.word	0x0800ac25
 800ac60:	0800ac25 	.word	0x0800ac25
 800ac64:	0800ac25 	.word	0x0800ac25
 800ac68:	0800adb5 	.word	0x0800adb5
 800ac6c:	0800acd9 	.word	0x0800acd9
 800ac70:	0800ad97 	.word	0x0800ad97
 800ac74:	0800ac25 	.word	0x0800ac25
 800ac78:	0800ac25 	.word	0x0800ac25
 800ac7c:	0800add7 	.word	0x0800add7
 800ac80:	0800ac25 	.word	0x0800ac25
 800ac84:	0800acd9 	.word	0x0800acd9
 800ac88:	0800ac25 	.word	0x0800ac25
 800ac8c:	0800ac25 	.word	0x0800ac25
 800ac90:	0800ad9f 	.word	0x0800ad9f
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	1d1a      	adds	r2, r3, #4
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	602a      	str	r2, [r5, #0]
 800ac9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aca4:	2301      	movs	r3, #1
 800aca6:	e0a3      	b.n	800adf0 <_printf_i+0x1f4>
 800aca8:	6820      	ldr	r0, [r4, #0]
 800acaa:	6829      	ldr	r1, [r5, #0]
 800acac:	0606      	lsls	r6, r0, #24
 800acae:	f101 0304 	add.w	r3, r1, #4
 800acb2:	d50a      	bpl.n	800acca <_printf_i+0xce>
 800acb4:	680e      	ldr	r6, [r1, #0]
 800acb6:	602b      	str	r3, [r5, #0]
 800acb8:	2e00      	cmp	r6, #0
 800acba:	da03      	bge.n	800acc4 <_printf_i+0xc8>
 800acbc:	232d      	movs	r3, #45	; 0x2d
 800acbe:	4276      	negs	r6, r6
 800acc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc4:	485e      	ldr	r0, [pc, #376]	; (800ae40 <_printf_i+0x244>)
 800acc6:	230a      	movs	r3, #10
 800acc8:	e019      	b.n	800acfe <_printf_i+0x102>
 800acca:	680e      	ldr	r6, [r1, #0]
 800accc:	602b      	str	r3, [r5, #0]
 800acce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acd2:	bf18      	it	ne
 800acd4:	b236      	sxthne	r6, r6
 800acd6:	e7ef      	b.n	800acb8 <_printf_i+0xbc>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	6820      	ldr	r0, [r4, #0]
 800acdc:	1d19      	adds	r1, r3, #4
 800acde:	6029      	str	r1, [r5, #0]
 800ace0:	0601      	lsls	r1, r0, #24
 800ace2:	d501      	bpl.n	800ace8 <_printf_i+0xec>
 800ace4:	681e      	ldr	r6, [r3, #0]
 800ace6:	e002      	b.n	800acee <_printf_i+0xf2>
 800ace8:	0646      	lsls	r6, r0, #25
 800acea:	d5fb      	bpl.n	800ace4 <_printf_i+0xe8>
 800acec:	881e      	ldrh	r6, [r3, #0]
 800acee:	4854      	ldr	r0, [pc, #336]	; (800ae40 <_printf_i+0x244>)
 800acf0:	2f6f      	cmp	r7, #111	; 0x6f
 800acf2:	bf0c      	ite	eq
 800acf4:	2308      	moveq	r3, #8
 800acf6:	230a      	movne	r3, #10
 800acf8:	2100      	movs	r1, #0
 800acfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acfe:	6865      	ldr	r5, [r4, #4]
 800ad00:	60a5      	str	r5, [r4, #8]
 800ad02:	2d00      	cmp	r5, #0
 800ad04:	bfa2      	ittt	ge
 800ad06:	6821      	ldrge	r1, [r4, #0]
 800ad08:	f021 0104 	bicge.w	r1, r1, #4
 800ad0c:	6021      	strge	r1, [r4, #0]
 800ad0e:	b90e      	cbnz	r6, 800ad14 <_printf_i+0x118>
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	d04d      	beq.n	800adb0 <_printf_i+0x1b4>
 800ad14:	4615      	mov	r5, r2
 800ad16:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad1a:	fb03 6711 	mls	r7, r3, r1, r6
 800ad1e:	5dc7      	ldrb	r7, [r0, r7]
 800ad20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad24:	4637      	mov	r7, r6
 800ad26:	42bb      	cmp	r3, r7
 800ad28:	460e      	mov	r6, r1
 800ad2a:	d9f4      	bls.n	800ad16 <_printf_i+0x11a>
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d10b      	bne.n	800ad48 <_printf_i+0x14c>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	07de      	lsls	r6, r3, #31
 800ad34:	d508      	bpl.n	800ad48 <_printf_i+0x14c>
 800ad36:	6923      	ldr	r3, [r4, #16]
 800ad38:	6861      	ldr	r1, [r4, #4]
 800ad3a:	4299      	cmp	r1, r3
 800ad3c:	bfde      	ittt	le
 800ad3e:	2330      	movle	r3, #48	; 0x30
 800ad40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad48:	1b52      	subs	r2, r2, r5
 800ad4a:	6122      	str	r2, [r4, #16]
 800ad4c:	f8cd a000 	str.w	sl, [sp]
 800ad50:	464b      	mov	r3, r9
 800ad52:	aa03      	add	r2, sp, #12
 800ad54:	4621      	mov	r1, r4
 800ad56:	4640      	mov	r0, r8
 800ad58:	f7ff fee2 	bl	800ab20 <_printf_common>
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d14c      	bne.n	800adfa <_printf_i+0x1fe>
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295
 800ad64:	b004      	add	sp, #16
 800ad66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6a:	4835      	ldr	r0, [pc, #212]	; (800ae40 <_printf_i+0x244>)
 800ad6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad70:	6829      	ldr	r1, [r5, #0]
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad78:	6029      	str	r1, [r5, #0]
 800ad7a:	061d      	lsls	r5, r3, #24
 800ad7c:	d514      	bpl.n	800ada8 <_printf_i+0x1ac>
 800ad7e:	07df      	lsls	r7, r3, #31
 800ad80:	bf44      	itt	mi
 800ad82:	f043 0320 	orrmi.w	r3, r3, #32
 800ad86:	6023      	strmi	r3, [r4, #0]
 800ad88:	b91e      	cbnz	r6, 800ad92 <_printf_i+0x196>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	f023 0320 	bic.w	r3, r3, #32
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	2310      	movs	r3, #16
 800ad94:	e7b0      	b.n	800acf8 <_printf_i+0xfc>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	f043 0320 	orr.w	r3, r3, #32
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	2378      	movs	r3, #120	; 0x78
 800ada0:	4828      	ldr	r0, [pc, #160]	; (800ae44 <_printf_i+0x248>)
 800ada2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ada6:	e7e3      	b.n	800ad70 <_printf_i+0x174>
 800ada8:	0659      	lsls	r1, r3, #25
 800adaa:	bf48      	it	mi
 800adac:	b2b6      	uxthmi	r6, r6
 800adae:	e7e6      	b.n	800ad7e <_printf_i+0x182>
 800adb0:	4615      	mov	r5, r2
 800adb2:	e7bb      	b.n	800ad2c <_printf_i+0x130>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	6826      	ldr	r6, [r4, #0]
 800adb8:	6961      	ldr	r1, [r4, #20]
 800adba:	1d18      	adds	r0, r3, #4
 800adbc:	6028      	str	r0, [r5, #0]
 800adbe:	0635      	lsls	r5, r6, #24
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	d501      	bpl.n	800adc8 <_printf_i+0x1cc>
 800adc4:	6019      	str	r1, [r3, #0]
 800adc6:	e002      	b.n	800adce <_printf_i+0x1d2>
 800adc8:	0670      	lsls	r0, r6, #25
 800adca:	d5fb      	bpl.n	800adc4 <_printf_i+0x1c8>
 800adcc:	8019      	strh	r1, [r3, #0]
 800adce:	2300      	movs	r3, #0
 800add0:	6123      	str	r3, [r4, #16]
 800add2:	4615      	mov	r5, r2
 800add4:	e7ba      	b.n	800ad4c <_printf_i+0x150>
 800add6:	682b      	ldr	r3, [r5, #0]
 800add8:	1d1a      	adds	r2, r3, #4
 800adda:	602a      	str	r2, [r5, #0]
 800addc:	681d      	ldr	r5, [r3, #0]
 800adde:	6862      	ldr	r2, [r4, #4]
 800ade0:	2100      	movs	r1, #0
 800ade2:	4628      	mov	r0, r5
 800ade4:	f7f5 fa14 	bl	8000210 <memchr>
 800ade8:	b108      	cbz	r0, 800adee <_printf_i+0x1f2>
 800adea:	1b40      	subs	r0, r0, r5
 800adec:	6060      	str	r0, [r4, #4]
 800adee:	6863      	ldr	r3, [r4, #4]
 800adf0:	6123      	str	r3, [r4, #16]
 800adf2:	2300      	movs	r3, #0
 800adf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adf8:	e7a8      	b.n	800ad4c <_printf_i+0x150>
 800adfa:	6923      	ldr	r3, [r4, #16]
 800adfc:	462a      	mov	r2, r5
 800adfe:	4649      	mov	r1, r9
 800ae00:	4640      	mov	r0, r8
 800ae02:	47d0      	blx	sl
 800ae04:	3001      	adds	r0, #1
 800ae06:	d0ab      	beq.n	800ad60 <_printf_i+0x164>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	079b      	lsls	r3, r3, #30
 800ae0c:	d413      	bmi.n	800ae36 <_printf_i+0x23a>
 800ae0e:	68e0      	ldr	r0, [r4, #12]
 800ae10:	9b03      	ldr	r3, [sp, #12]
 800ae12:	4298      	cmp	r0, r3
 800ae14:	bfb8      	it	lt
 800ae16:	4618      	movlt	r0, r3
 800ae18:	e7a4      	b.n	800ad64 <_printf_i+0x168>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	4649      	mov	r1, r9
 800ae20:	4640      	mov	r0, r8
 800ae22:	47d0      	blx	sl
 800ae24:	3001      	adds	r0, #1
 800ae26:	d09b      	beq.n	800ad60 <_printf_i+0x164>
 800ae28:	3501      	adds	r5, #1
 800ae2a:	68e3      	ldr	r3, [r4, #12]
 800ae2c:	9903      	ldr	r1, [sp, #12]
 800ae2e:	1a5b      	subs	r3, r3, r1
 800ae30:	42ab      	cmp	r3, r5
 800ae32:	dcf2      	bgt.n	800ae1a <_printf_i+0x21e>
 800ae34:	e7eb      	b.n	800ae0e <_printf_i+0x212>
 800ae36:	2500      	movs	r5, #0
 800ae38:	f104 0619 	add.w	r6, r4, #25
 800ae3c:	e7f5      	b.n	800ae2a <_printf_i+0x22e>
 800ae3e:	bf00      	nop
 800ae40:	0800ee1c 	.word	0x0800ee1c
 800ae44:	0800ee2d 	.word	0x0800ee2d

0800ae48 <_sbrk_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4d06      	ldr	r5, [pc, #24]	; (800ae64 <_sbrk_r+0x1c>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4604      	mov	r4, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	602b      	str	r3, [r5, #0]
 800ae54:	f7f8 ffa6 	bl	8003da4 <_sbrk>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_sbrk_r+0x1a>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_sbrk_r+0x1a>
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	20000c28 	.word	0x20000c28

0800ae68 <siprintf>:
 800ae68:	b40e      	push	{r1, r2, r3}
 800ae6a:	b500      	push	{lr}
 800ae6c:	b09c      	sub	sp, #112	; 0x70
 800ae6e:	ab1d      	add	r3, sp, #116	; 0x74
 800ae70:	9002      	str	r0, [sp, #8]
 800ae72:	9006      	str	r0, [sp, #24]
 800ae74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae78:	4809      	ldr	r0, [pc, #36]	; (800aea0 <siprintf+0x38>)
 800ae7a:	9107      	str	r1, [sp, #28]
 800ae7c:	9104      	str	r1, [sp, #16]
 800ae7e:	4909      	ldr	r1, [pc, #36]	; (800aea4 <siprintf+0x3c>)
 800ae80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae84:	9105      	str	r1, [sp, #20]
 800ae86:	6800      	ldr	r0, [r0, #0]
 800ae88:	9301      	str	r3, [sp, #4]
 800ae8a:	a902      	add	r1, sp, #8
 800ae8c:	f001 fbf8 	bl	800c680 <_svfiprintf_r>
 800ae90:	9b02      	ldr	r3, [sp, #8]
 800ae92:	2200      	movs	r2, #0
 800ae94:	701a      	strb	r2, [r3, #0]
 800ae96:	b01c      	add	sp, #112	; 0x70
 800ae98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae9c:	b003      	add	sp, #12
 800ae9e:	4770      	bx	lr
 800aea0:	200001d8 	.word	0x200001d8
 800aea4:	ffff0208 	.word	0xffff0208

0800aea8 <siscanf>:
 800aea8:	b40e      	push	{r1, r2, r3}
 800aeaa:	b510      	push	{r4, lr}
 800aeac:	b09f      	sub	sp, #124	; 0x7c
 800aeae:	ac21      	add	r4, sp, #132	; 0x84
 800aeb0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800aeb4:	f854 2b04 	ldr.w	r2, [r4], #4
 800aeb8:	9201      	str	r2, [sp, #4]
 800aeba:	f8ad 101c 	strh.w	r1, [sp, #28]
 800aebe:	9004      	str	r0, [sp, #16]
 800aec0:	9008      	str	r0, [sp, #32]
 800aec2:	f7f5 f997 	bl	80001f4 <strlen>
 800aec6:	4b0c      	ldr	r3, [pc, #48]	; (800aef8 <siscanf+0x50>)
 800aec8:	9005      	str	r0, [sp, #20]
 800aeca:	9009      	str	r0, [sp, #36]	; 0x24
 800aecc:	930d      	str	r3, [sp, #52]	; 0x34
 800aece:	480b      	ldr	r0, [pc, #44]	; (800aefc <siscanf+0x54>)
 800aed0:	9a01      	ldr	r2, [sp, #4]
 800aed2:	6800      	ldr	r0, [r0, #0]
 800aed4:	9403      	str	r4, [sp, #12]
 800aed6:	2300      	movs	r3, #0
 800aed8:	9311      	str	r3, [sp, #68]	; 0x44
 800aeda:	9316      	str	r3, [sp, #88]	; 0x58
 800aedc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aee0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	4623      	mov	r3, r4
 800aee8:	f001 fd24 	bl	800c934 <__ssvfiscanf_r>
 800aeec:	b01f      	add	sp, #124	; 0x7c
 800aeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef2:	b003      	add	sp, #12
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	0800af23 	.word	0x0800af23
 800aefc:	200001d8 	.word	0x200001d8

0800af00 <__sread>:
 800af00:	b510      	push	{r4, lr}
 800af02:	460c      	mov	r4, r1
 800af04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af08:	f001 ffde 	bl	800cec8 <_read_r>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	bfab      	itete	ge
 800af10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af12:	89a3      	ldrhlt	r3, [r4, #12]
 800af14:	181b      	addge	r3, r3, r0
 800af16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af1a:	bfac      	ite	ge
 800af1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af1e:	81a3      	strhlt	r3, [r4, #12]
 800af20:	bd10      	pop	{r4, pc}

0800af22 <__seofread>:
 800af22:	2000      	movs	r0, #0
 800af24:	4770      	bx	lr

0800af26 <__swrite>:
 800af26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2a:	461f      	mov	r7, r3
 800af2c:	898b      	ldrh	r3, [r1, #12]
 800af2e:	05db      	lsls	r3, r3, #23
 800af30:	4605      	mov	r5, r0
 800af32:	460c      	mov	r4, r1
 800af34:	4616      	mov	r6, r2
 800af36:	d505      	bpl.n	800af44 <__swrite+0x1e>
 800af38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af3c:	2302      	movs	r3, #2
 800af3e:	2200      	movs	r2, #0
 800af40:	f000 ff7c 	bl	800be3c <_lseek_r>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	4632      	mov	r2, r6
 800af52:	463b      	mov	r3, r7
 800af54:	4628      	mov	r0, r5
 800af56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af5a:	f000 b8cd 	b.w	800b0f8 <_write_r>

0800af5e <__sseek>:
 800af5e:	b510      	push	{r4, lr}
 800af60:	460c      	mov	r4, r1
 800af62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af66:	f000 ff69 	bl	800be3c <_lseek_r>
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	bf15      	itete	ne
 800af70:	6560      	strne	r0, [r4, #84]	; 0x54
 800af72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af7a:	81a3      	strheq	r3, [r4, #12]
 800af7c:	bf18      	it	ne
 800af7e:	81a3      	strhne	r3, [r4, #12]
 800af80:	bd10      	pop	{r4, pc}

0800af82 <__sclose>:
 800af82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af86:	f000 b8c9 	b.w	800b11c <_close_r>

0800af8a <strchr>:
 800af8a:	b2c9      	uxtb	r1, r1
 800af8c:	4603      	mov	r3, r0
 800af8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af92:	b11a      	cbz	r2, 800af9c <strchr+0x12>
 800af94:	428a      	cmp	r2, r1
 800af96:	d1f9      	bne.n	800af8c <strchr+0x2>
 800af98:	4618      	mov	r0, r3
 800af9a:	4770      	bx	lr
 800af9c:	2900      	cmp	r1, #0
 800af9e:	bf18      	it	ne
 800afa0:	2300      	movne	r3, #0
 800afa2:	e7f9      	b.n	800af98 <strchr+0xe>

0800afa4 <strcpy>:
 800afa4:	4603      	mov	r3, r0
 800afa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afaa:	f803 2b01 	strb.w	r2, [r3], #1
 800afae:	2a00      	cmp	r2, #0
 800afb0:	d1f9      	bne.n	800afa6 <strcpy+0x2>
 800afb2:	4770      	bx	lr

0800afb4 <strncmp>:
 800afb4:	b510      	push	{r4, lr}
 800afb6:	b17a      	cbz	r2, 800afd8 <strncmp+0x24>
 800afb8:	4603      	mov	r3, r0
 800afba:	3901      	subs	r1, #1
 800afbc:	1884      	adds	r4, r0, r2
 800afbe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800afc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800afc6:	4290      	cmp	r0, r2
 800afc8:	d101      	bne.n	800afce <strncmp+0x1a>
 800afca:	42a3      	cmp	r3, r4
 800afcc:	d101      	bne.n	800afd2 <strncmp+0x1e>
 800afce:	1a80      	subs	r0, r0, r2
 800afd0:	bd10      	pop	{r4, pc}
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d1f3      	bne.n	800afbe <strncmp+0xa>
 800afd6:	e7fa      	b.n	800afce <strncmp+0x1a>
 800afd8:	4610      	mov	r0, r2
 800afda:	e7f9      	b.n	800afd0 <strncmp+0x1c>

0800afdc <_strtol_l.constprop.0>:
 800afdc:	2b01      	cmp	r3, #1
 800afde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe2:	d001      	beq.n	800afe8 <_strtol_l.constprop.0+0xc>
 800afe4:	2b24      	cmp	r3, #36	; 0x24
 800afe6:	d906      	bls.n	800aff6 <_strtol_l.constprop.0+0x1a>
 800afe8:	f7ff f9a2 	bl	800a330 <__errno>
 800afec:	2316      	movs	r3, #22
 800afee:	6003      	str	r3, [r0, #0]
 800aff0:	2000      	movs	r0, #0
 800aff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b0dc <_strtol_l.constprop.0+0x100>
 800affa:	460d      	mov	r5, r1
 800affc:	462e      	mov	r6, r5
 800affe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b002:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b006:	f017 0708 	ands.w	r7, r7, #8
 800b00a:	d1f7      	bne.n	800affc <_strtol_l.constprop.0+0x20>
 800b00c:	2c2d      	cmp	r4, #45	; 0x2d
 800b00e:	d132      	bne.n	800b076 <_strtol_l.constprop.0+0x9a>
 800b010:	782c      	ldrb	r4, [r5, #0]
 800b012:	2701      	movs	r7, #1
 800b014:	1cb5      	adds	r5, r6, #2
 800b016:	2b00      	cmp	r3, #0
 800b018:	d05b      	beq.n	800b0d2 <_strtol_l.constprop.0+0xf6>
 800b01a:	2b10      	cmp	r3, #16
 800b01c:	d109      	bne.n	800b032 <_strtol_l.constprop.0+0x56>
 800b01e:	2c30      	cmp	r4, #48	; 0x30
 800b020:	d107      	bne.n	800b032 <_strtol_l.constprop.0+0x56>
 800b022:	782c      	ldrb	r4, [r5, #0]
 800b024:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b028:	2c58      	cmp	r4, #88	; 0x58
 800b02a:	d14d      	bne.n	800b0c8 <_strtol_l.constprop.0+0xec>
 800b02c:	786c      	ldrb	r4, [r5, #1]
 800b02e:	2310      	movs	r3, #16
 800b030:	3502      	adds	r5, #2
 800b032:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b036:	f108 38ff 	add.w	r8, r8, #4294967295
 800b03a:	f04f 0c00 	mov.w	ip, #0
 800b03e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b042:	4666      	mov	r6, ip
 800b044:	fb03 8a19 	mls	sl, r3, r9, r8
 800b048:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b04c:	f1be 0f09 	cmp.w	lr, #9
 800b050:	d816      	bhi.n	800b080 <_strtol_l.constprop.0+0xa4>
 800b052:	4674      	mov	r4, lr
 800b054:	42a3      	cmp	r3, r4
 800b056:	dd24      	ble.n	800b0a2 <_strtol_l.constprop.0+0xc6>
 800b058:	f1bc 0f00 	cmp.w	ip, #0
 800b05c:	db1e      	blt.n	800b09c <_strtol_l.constprop.0+0xc0>
 800b05e:	45b1      	cmp	r9, r6
 800b060:	d31c      	bcc.n	800b09c <_strtol_l.constprop.0+0xc0>
 800b062:	d101      	bne.n	800b068 <_strtol_l.constprop.0+0x8c>
 800b064:	45a2      	cmp	sl, r4
 800b066:	db19      	blt.n	800b09c <_strtol_l.constprop.0+0xc0>
 800b068:	fb06 4603 	mla	r6, r6, r3, r4
 800b06c:	f04f 0c01 	mov.w	ip, #1
 800b070:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b074:	e7e8      	b.n	800b048 <_strtol_l.constprop.0+0x6c>
 800b076:	2c2b      	cmp	r4, #43	; 0x2b
 800b078:	bf04      	itt	eq
 800b07a:	782c      	ldrbeq	r4, [r5, #0]
 800b07c:	1cb5      	addeq	r5, r6, #2
 800b07e:	e7ca      	b.n	800b016 <_strtol_l.constprop.0+0x3a>
 800b080:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b084:	f1be 0f19 	cmp.w	lr, #25
 800b088:	d801      	bhi.n	800b08e <_strtol_l.constprop.0+0xb2>
 800b08a:	3c37      	subs	r4, #55	; 0x37
 800b08c:	e7e2      	b.n	800b054 <_strtol_l.constprop.0+0x78>
 800b08e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b092:	f1be 0f19 	cmp.w	lr, #25
 800b096:	d804      	bhi.n	800b0a2 <_strtol_l.constprop.0+0xc6>
 800b098:	3c57      	subs	r4, #87	; 0x57
 800b09a:	e7db      	b.n	800b054 <_strtol_l.constprop.0+0x78>
 800b09c:	f04f 3cff 	mov.w	ip, #4294967295
 800b0a0:	e7e6      	b.n	800b070 <_strtol_l.constprop.0+0x94>
 800b0a2:	f1bc 0f00 	cmp.w	ip, #0
 800b0a6:	da05      	bge.n	800b0b4 <_strtol_l.constprop.0+0xd8>
 800b0a8:	2322      	movs	r3, #34	; 0x22
 800b0aa:	6003      	str	r3, [r0, #0]
 800b0ac:	4646      	mov	r6, r8
 800b0ae:	b942      	cbnz	r2, 800b0c2 <_strtol_l.constprop.0+0xe6>
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	e79e      	b.n	800aff2 <_strtol_l.constprop.0+0x16>
 800b0b4:	b107      	cbz	r7, 800b0b8 <_strtol_l.constprop.0+0xdc>
 800b0b6:	4276      	negs	r6, r6
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	d0f9      	beq.n	800b0b0 <_strtol_l.constprop.0+0xd4>
 800b0bc:	f1bc 0f00 	cmp.w	ip, #0
 800b0c0:	d000      	beq.n	800b0c4 <_strtol_l.constprop.0+0xe8>
 800b0c2:	1e69      	subs	r1, r5, #1
 800b0c4:	6011      	str	r1, [r2, #0]
 800b0c6:	e7f3      	b.n	800b0b0 <_strtol_l.constprop.0+0xd4>
 800b0c8:	2430      	movs	r4, #48	; 0x30
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1b1      	bne.n	800b032 <_strtol_l.constprop.0+0x56>
 800b0ce:	2308      	movs	r3, #8
 800b0d0:	e7af      	b.n	800b032 <_strtol_l.constprop.0+0x56>
 800b0d2:	2c30      	cmp	r4, #48	; 0x30
 800b0d4:	d0a5      	beq.n	800b022 <_strtol_l.constprop.0+0x46>
 800b0d6:	230a      	movs	r3, #10
 800b0d8:	e7ab      	b.n	800b032 <_strtol_l.constprop.0+0x56>
 800b0da:	bf00      	nop
 800b0dc:	0800ee3f 	.word	0x0800ee3f

0800b0e0 <_strtol_r>:
 800b0e0:	f7ff bf7c 	b.w	800afdc <_strtol_l.constprop.0>

0800b0e4 <strtol>:
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	460a      	mov	r2, r1
 800b0e8:	4601      	mov	r1, r0
 800b0ea:	4802      	ldr	r0, [pc, #8]	; (800b0f4 <strtol+0x10>)
 800b0ec:	6800      	ldr	r0, [r0, #0]
 800b0ee:	f7ff bf75 	b.w	800afdc <_strtol_l.constprop.0>
 800b0f2:	bf00      	nop
 800b0f4:	200001d8 	.word	0x200001d8

0800b0f8 <_write_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4d07      	ldr	r5, [pc, #28]	; (800b118 <_write_r+0x20>)
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	4608      	mov	r0, r1
 800b100:	4611      	mov	r1, r2
 800b102:	2200      	movs	r2, #0
 800b104:	602a      	str	r2, [r5, #0]
 800b106:	461a      	mov	r2, r3
 800b108:	f7f8 fdfb 	bl	8003d02 <_write>
 800b10c:	1c43      	adds	r3, r0, #1
 800b10e:	d102      	bne.n	800b116 <_write_r+0x1e>
 800b110:	682b      	ldr	r3, [r5, #0]
 800b112:	b103      	cbz	r3, 800b116 <_write_r+0x1e>
 800b114:	6023      	str	r3, [r4, #0]
 800b116:	bd38      	pop	{r3, r4, r5, pc}
 800b118:	20000c28 	.word	0x20000c28

0800b11c <_close_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	4d06      	ldr	r5, [pc, #24]	; (800b138 <_close_r+0x1c>)
 800b120:	2300      	movs	r3, #0
 800b122:	4604      	mov	r4, r0
 800b124:	4608      	mov	r0, r1
 800b126:	602b      	str	r3, [r5, #0]
 800b128:	f7f8 fe07 	bl	8003d3a <_close>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	d102      	bne.n	800b136 <_close_r+0x1a>
 800b130:	682b      	ldr	r3, [r5, #0]
 800b132:	b103      	cbz	r3, 800b136 <_close_r+0x1a>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	bd38      	pop	{r3, r4, r5, pc}
 800b138:	20000c28 	.word	0x20000c28

0800b13c <quorem>:
 800b13c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	6903      	ldr	r3, [r0, #16]
 800b142:	690c      	ldr	r4, [r1, #16]
 800b144:	42a3      	cmp	r3, r4
 800b146:	4607      	mov	r7, r0
 800b148:	f2c0 8081 	blt.w	800b24e <quorem+0x112>
 800b14c:	3c01      	subs	r4, #1
 800b14e:	f101 0814 	add.w	r8, r1, #20
 800b152:	f100 0514 	add.w	r5, r0, #20
 800b156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b160:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b164:	3301      	adds	r3, #1
 800b166:	429a      	cmp	r2, r3
 800b168:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b16c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b170:	fbb2 f6f3 	udiv	r6, r2, r3
 800b174:	d331      	bcc.n	800b1da <quorem+0x9e>
 800b176:	f04f 0e00 	mov.w	lr, #0
 800b17a:	4640      	mov	r0, r8
 800b17c:	46ac      	mov	ip, r5
 800b17e:	46f2      	mov	sl, lr
 800b180:	f850 2b04 	ldr.w	r2, [r0], #4
 800b184:	b293      	uxth	r3, r2
 800b186:	fb06 e303 	mla	r3, r6, r3, lr
 800b18a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b18e:	b29b      	uxth	r3, r3
 800b190:	ebaa 0303 	sub.w	r3, sl, r3
 800b194:	f8dc a000 	ldr.w	sl, [ip]
 800b198:	0c12      	lsrs	r2, r2, #16
 800b19a:	fa13 f38a 	uxtah	r3, r3, sl
 800b19e:	fb06 e202 	mla	r2, r6, r2, lr
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	9b00      	ldr	r3, [sp, #0]
 800b1a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b1aa:	b292      	uxth	r2, r2
 800b1ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b1b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1b4:	f8bd 3000 	ldrh.w	r3, [sp]
 800b1b8:	4581      	cmp	r9, r0
 800b1ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1be:	f84c 3b04 	str.w	r3, [ip], #4
 800b1c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1c6:	d2db      	bcs.n	800b180 <quorem+0x44>
 800b1c8:	f855 300b 	ldr.w	r3, [r5, fp]
 800b1cc:	b92b      	cbnz	r3, 800b1da <quorem+0x9e>
 800b1ce:	9b01      	ldr	r3, [sp, #4]
 800b1d0:	3b04      	subs	r3, #4
 800b1d2:	429d      	cmp	r5, r3
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	d32e      	bcc.n	800b236 <quorem+0xfa>
 800b1d8:	613c      	str	r4, [r7, #16]
 800b1da:	4638      	mov	r0, r7
 800b1dc:	f001 f8dc 	bl	800c398 <__mcmp>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	db24      	blt.n	800b22e <quorem+0xf2>
 800b1e4:	3601      	adds	r6, #1
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f04f 0c00 	mov.w	ip, #0
 800b1ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1f0:	f8d0 e000 	ldr.w	lr, [r0]
 800b1f4:	b293      	uxth	r3, r2
 800b1f6:	ebac 0303 	sub.w	r3, ip, r3
 800b1fa:	0c12      	lsrs	r2, r2, #16
 800b1fc:	fa13 f38e 	uxtah	r3, r3, lr
 800b200:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b204:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b208:	b29b      	uxth	r3, r3
 800b20a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b20e:	45c1      	cmp	r9, r8
 800b210:	f840 3b04 	str.w	r3, [r0], #4
 800b214:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b218:	d2e8      	bcs.n	800b1ec <quorem+0xb0>
 800b21a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b21e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b222:	b922      	cbnz	r2, 800b22e <quorem+0xf2>
 800b224:	3b04      	subs	r3, #4
 800b226:	429d      	cmp	r5, r3
 800b228:	461a      	mov	r2, r3
 800b22a:	d30a      	bcc.n	800b242 <quorem+0x106>
 800b22c:	613c      	str	r4, [r7, #16]
 800b22e:	4630      	mov	r0, r6
 800b230:	b003      	add	sp, #12
 800b232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b236:	6812      	ldr	r2, [r2, #0]
 800b238:	3b04      	subs	r3, #4
 800b23a:	2a00      	cmp	r2, #0
 800b23c:	d1cc      	bne.n	800b1d8 <quorem+0x9c>
 800b23e:	3c01      	subs	r4, #1
 800b240:	e7c7      	b.n	800b1d2 <quorem+0x96>
 800b242:	6812      	ldr	r2, [r2, #0]
 800b244:	3b04      	subs	r3, #4
 800b246:	2a00      	cmp	r2, #0
 800b248:	d1f0      	bne.n	800b22c <quorem+0xf0>
 800b24a:	3c01      	subs	r4, #1
 800b24c:	e7eb      	b.n	800b226 <quorem+0xea>
 800b24e:	2000      	movs	r0, #0
 800b250:	e7ee      	b.n	800b230 <quorem+0xf4>
 800b252:	0000      	movs	r0, r0
 800b254:	0000      	movs	r0, r0
	...

0800b258 <_dtoa_r>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	ed2d 8b04 	vpush	{d8-d9}
 800b260:	ec57 6b10 	vmov	r6, r7, d0
 800b264:	b093      	sub	sp, #76	; 0x4c
 800b266:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b268:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b26c:	9106      	str	r1, [sp, #24]
 800b26e:	ee10 aa10 	vmov	sl, s0
 800b272:	4604      	mov	r4, r0
 800b274:	9209      	str	r2, [sp, #36]	; 0x24
 800b276:	930c      	str	r3, [sp, #48]	; 0x30
 800b278:	46bb      	mov	fp, r7
 800b27a:	b975      	cbnz	r5, 800b29a <_dtoa_r+0x42>
 800b27c:	2010      	movs	r0, #16
 800b27e:	f7ff f881 	bl	800a384 <malloc>
 800b282:	4602      	mov	r2, r0
 800b284:	6260      	str	r0, [r4, #36]	; 0x24
 800b286:	b920      	cbnz	r0, 800b292 <_dtoa_r+0x3a>
 800b288:	4ba7      	ldr	r3, [pc, #668]	; (800b528 <_dtoa_r+0x2d0>)
 800b28a:	21ea      	movs	r1, #234	; 0xea
 800b28c:	48a7      	ldr	r0, [pc, #668]	; (800b52c <_dtoa_r+0x2d4>)
 800b28e:	f001 ff13 	bl	800d0b8 <__assert_func>
 800b292:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b296:	6005      	str	r5, [r0, #0]
 800b298:	60c5      	str	r5, [r0, #12]
 800b29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b29c:	6819      	ldr	r1, [r3, #0]
 800b29e:	b151      	cbz	r1, 800b2b6 <_dtoa_r+0x5e>
 800b2a0:	685a      	ldr	r2, [r3, #4]
 800b2a2:	604a      	str	r2, [r1, #4]
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	4093      	lsls	r3, r2
 800b2a8:	608b      	str	r3, [r1, #8]
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f000 fe32 	bl	800bf14 <_Bfree>
 800b2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	1e3b      	subs	r3, r7, #0
 800b2b8:	bfaa      	itet	ge
 800b2ba:	2300      	movge	r3, #0
 800b2bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b2c0:	f8c8 3000 	strge.w	r3, [r8]
 800b2c4:	4b9a      	ldr	r3, [pc, #616]	; (800b530 <_dtoa_r+0x2d8>)
 800b2c6:	bfbc      	itt	lt
 800b2c8:	2201      	movlt	r2, #1
 800b2ca:	f8c8 2000 	strlt.w	r2, [r8]
 800b2ce:	ea33 030b 	bics.w	r3, r3, fp
 800b2d2:	d11b      	bne.n	800b30c <_dtoa_r+0xb4>
 800b2d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2da:	6013      	str	r3, [r2, #0]
 800b2dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2e0:	4333      	orrs	r3, r6
 800b2e2:	f000 8592 	beq.w	800be0a <_dtoa_r+0xbb2>
 800b2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e8:	b963      	cbnz	r3, 800b304 <_dtoa_r+0xac>
 800b2ea:	4b92      	ldr	r3, [pc, #584]	; (800b534 <_dtoa_r+0x2dc>)
 800b2ec:	e022      	b.n	800b334 <_dtoa_r+0xdc>
 800b2ee:	4b92      	ldr	r3, [pc, #584]	; (800b538 <_dtoa_r+0x2e0>)
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	9801      	ldr	r0, [sp, #4]
 800b2fa:	b013      	add	sp, #76	; 0x4c
 800b2fc:	ecbd 8b04 	vpop	{d8-d9}
 800b300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b304:	4b8b      	ldr	r3, [pc, #556]	; (800b534 <_dtoa_r+0x2dc>)
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	3303      	adds	r3, #3
 800b30a:	e7f3      	b.n	800b2f4 <_dtoa_r+0x9c>
 800b30c:	2200      	movs	r2, #0
 800b30e:	2300      	movs	r3, #0
 800b310:	4650      	mov	r0, sl
 800b312:	4659      	mov	r1, fp
 800b314:	f7f5 fbf0 	bl	8000af8 <__aeabi_dcmpeq>
 800b318:	ec4b ab19 	vmov	d9, sl, fp
 800b31c:	4680      	mov	r8, r0
 800b31e:	b158      	cbz	r0, 800b338 <_dtoa_r+0xe0>
 800b320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b322:	2301      	movs	r3, #1
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 856b 	beq.w	800be04 <_dtoa_r+0xbac>
 800b32e:	4883      	ldr	r0, [pc, #524]	; (800b53c <_dtoa_r+0x2e4>)
 800b330:	6018      	str	r0, [r3, #0]
 800b332:	1e43      	subs	r3, r0, #1
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	e7df      	b.n	800b2f8 <_dtoa_r+0xa0>
 800b338:	ec4b ab10 	vmov	d0, sl, fp
 800b33c:	aa10      	add	r2, sp, #64	; 0x40
 800b33e:	a911      	add	r1, sp, #68	; 0x44
 800b340:	4620      	mov	r0, r4
 800b342:	f001 f8cf 	bl	800c4e4 <__d2b>
 800b346:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b34a:	ee08 0a10 	vmov	s16, r0
 800b34e:	2d00      	cmp	r5, #0
 800b350:	f000 8084 	beq.w	800b45c <_dtoa_r+0x204>
 800b354:	ee19 3a90 	vmov	r3, s19
 800b358:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b35c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b360:	4656      	mov	r6, sl
 800b362:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b36a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b36e:	4b74      	ldr	r3, [pc, #464]	; (800b540 <_dtoa_r+0x2e8>)
 800b370:	2200      	movs	r2, #0
 800b372:	4630      	mov	r0, r6
 800b374:	4639      	mov	r1, r7
 800b376:	f7f4 ff9f 	bl	80002b8 <__aeabi_dsub>
 800b37a:	a365      	add	r3, pc, #404	; (adr r3, 800b510 <_dtoa_r+0x2b8>)
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	f7f5 f952 	bl	8000628 <__aeabi_dmul>
 800b384:	a364      	add	r3, pc, #400	; (adr r3, 800b518 <_dtoa_r+0x2c0>)
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f7f4 ff97 	bl	80002bc <__adddf3>
 800b38e:	4606      	mov	r6, r0
 800b390:	4628      	mov	r0, r5
 800b392:	460f      	mov	r7, r1
 800b394:	f7f5 f8de 	bl	8000554 <__aeabi_i2d>
 800b398:	a361      	add	r3, pc, #388	; (adr r3, 800b520 <_dtoa_r+0x2c8>)
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	f7f5 f943 	bl	8000628 <__aeabi_dmul>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	f7f4 ff87 	bl	80002bc <__adddf3>
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	460f      	mov	r7, r1
 800b3b2:	f7f5 fbe9 	bl	8000b88 <__aeabi_d2iz>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	9000      	str	r0, [sp, #0]
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	4630      	mov	r0, r6
 800b3be:	4639      	mov	r1, r7
 800b3c0:	f7f5 fba4 	bl	8000b0c <__aeabi_dcmplt>
 800b3c4:	b150      	cbz	r0, 800b3dc <_dtoa_r+0x184>
 800b3c6:	9800      	ldr	r0, [sp, #0]
 800b3c8:	f7f5 f8c4 	bl	8000554 <__aeabi_i2d>
 800b3cc:	4632      	mov	r2, r6
 800b3ce:	463b      	mov	r3, r7
 800b3d0:	f7f5 fb92 	bl	8000af8 <__aeabi_dcmpeq>
 800b3d4:	b910      	cbnz	r0, 800b3dc <_dtoa_r+0x184>
 800b3d6:	9b00      	ldr	r3, [sp, #0]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	9b00      	ldr	r3, [sp, #0]
 800b3de:	2b16      	cmp	r3, #22
 800b3e0:	d85a      	bhi.n	800b498 <_dtoa_r+0x240>
 800b3e2:	9a00      	ldr	r2, [sp, #0]
 800b3e4:	4b57      	ldr	r3, [pc, #348]	; (800b544 <_dtoa_r+0x2ec>)
 800b3e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	ec51 0b19 	vmov	r0, r1, d9
 800b3f2:	f7f5 fb8b 	bl	8000b0c <__aeabi_dcmplt>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d050      	beq.n	800b49c <_dtoa_r+0x244>
 800b3fa:	9b00      	ldr	r3, [sp, #0]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	2300      	movs	r3, #0
 800b402:	930b      	str	r3, [sp, #44]	; 0x2c
 800b404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b406:	1b5d      	subs	r5, r3, r5
 800b408:	1e6b      	subs	r3, r5, #1
 800b40a:	9305      	str	r3, [sp, #20]
 800b40c:	bf45      	ittet	mi
 800b40e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b412:	9304      	strmi	r3, [sp, #16]
 800b414:	2300      	movpl	r3, #0
 800b416:	2300      	movmi	r3, #0
 800b418:	bf4c      	ite	mi
 800b41a:	9305      	strmi	r3, [sp, #20]
 800b41c:	9304      	strpl	r3, [sp, #16]
 800b41e:	9b00      	ldr	r3, [sp, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	db3d      	blt.n	800b4a0 <_dtoa_r+0x248>
 800b424:	9b05      	ldr	r3, [sp, #20]
 800b426:	9a00      	ldr	r2, [sp, #0]
 800b428:	920a      	str	r2, [sp, #40]	; 0x28
 800b42a:	4413      	add	r3, r2
 800b42c:	9305      	str	r3, [sp, #20]
 800b42e:	2300      	movs	r3, #0
 800b430:	9307      	str	r3, [sp, #28]
 800b432:	9b06      	ldr	r3, [sp, #24]
 800b434:	2b09      	cmp	r3, #9
 800b436:	f200 8089 	bhi.w	800b54c <_dtoa_r+0x2f4>
 800b43a:	2b05      	cmp	r3, #5
 800b43c:	bfc4      	itt	gt
 800b43e:	3b04      	subgt	r3, #4
 800b440:	9306      	strgt	r3, [sp, #24]
 800b442:	9b06      	ldr	r3, [sp, #24]
 800b444:	f1a3 0302 	sub.w	r3, r3, #2
 800b448:	bfcc      	ite	gt
 800b44a:	2500      	movgt	r5, #0
 800b44c:	2501      	movle	r5, #1
 800b44e:	2b03      	cmp	r3, #3
 800b450:	f200 8087 	bhi.w	800b562 <_dtoa_r+0x30a>
 800b454:	e8df f003 	tbb	[pc, r3]
 800b458:	59383a2d 	.word	0x59383a2d
 800b45c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b460:	441d      	add	r5, r3
 800b462:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b466:	2b20      	cmp	r3, #32
 800b468:	bfc1      	itttt	gt
 800b46a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b46e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b472:	fa0b f303 	lslgt.w	r3, fp, r3
 800b476:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b47a:	bfda      	itte	le
 800b47c:	f1c3 0320 	rsble	r3, r3, #32
 800b480:	fa06 f003 	lslle.w	r0, r6, r3
 800b484:	4318      	orrgt	r0, r3
 800b486:	f7f5 f855 	bl	8000534 <__aeabi_ui2d>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4606      	mov	r6, r0
 800b48e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b492:	3d01      	subs	r5, #1
 800b494:	930e      	str	r3, [sp, #56]	; 0x38
 800b496:	e76a      	b.n	800b36e <_dtoa_r+0x116>
 800b498:	2301      	movs	r3, #1
 800b49a:	e7b2      	b.n	800b402 <_dtoa_r+0x1aa>
 800b49c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b49e:	e7b1      	b.n	800b404 <_dtoa_r+0x1ac>
 800b4a0:	9b04      	ldr	r3, [sp, #16]
 800b4a2:	9a00      	ldr	r2, [sp, #0]
 800b4a4:	1a9b      	subs	r3, r3, r2
 800b4a6:	9304      	str	r3, [sp, #16]
 800b4a8:	4253      	negs	r3, r2
 800b4aa:	9307      	str	r3, [sp, #28]
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b4b0:	e7bf      	b.n	800b432 <_dtoa_r+0x1da>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	9308      	str	r3, [sp, #32]
 800b4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	dc55      	bgt.n	800b568 <_dtoa_r+0x310>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4c6:	e00c      	b.n	800b4e2 <_dtoa_r+0x28a>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e7f3      	b.n	800b4b4 <_dtoa_r+0x25c>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d0:	9308      	str	r3, [sp, #32]
 800b4d2:	9b00      	ldr	r3, [sp, #0]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	9302      	str	r3, [sp, #8]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	9303      	str	r3, [sp, #12]
 800b4de:	bfb8      	it	lt
 800b4e0:	2301      	movlt	r3, #1
 800b4e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	6042      	str	r2, [r0, #4]
 800b4e8:	2204      	movs	r2, #4
 800b4ea:	f102 0614 	add.w	r6, r2, #20
 800b4ee:	429e      	cmp	r6, r3
 800b4f0:	6841      	ldr	r1, [r0, #4]
 800b4f2:	d93d      	bls.n	800b570 <_dtoa_r+0x318>
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 fccd 	bl	800be94 <_Balloc>
 800b4fa:	9001      	str	r0, [sp, #4]
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d13b      	bne.n	800b578 <_dtoa_r+0x320>
 800b500:	4b11      	ldr	r3, [pc, #68]	; (800b548 <_dtoa_r+0x2f0>)
 800b502:	4602      	mov	r2, r0
 800b504:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b508:	e6c0      	b.n	800b28c <_dtoa_r+0x34>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e7df      	b.n	800b4ce <_dtoa_r+0x276>
 800b50e:	bf00      	nop
 800b510:	636f4361 	.word	0x636f4361
 800b514:	3fd287a7 	.word	0x3fd287a7
 800b518:	8b60c8b3 	.word	0x8b60c8b3
 800b51c:	3fc68a28 	.word	0x3fc68a28
 800b520:	509f79fb 	.word	0x509f79fb
 800b524:	3fd34413 	.word	0x3fd34413
 800b528:	0800ef4c 	.word	0x0800ef4c
 800b52c:	0800ef63 	.word	0x0800ef63
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	0800ef48 	.word	0x0800ef48
 800b538:	0800ef3f 	.word	0x0800ef3f
 800b53c:	0800f142 	.word	0x0800f142
 800b540:	3ff80000 	.word	0x3ff80000
 800b544:	0800f058 	.word	0x0800f058
 800b548:	0800efbe 	.word	0x0800efbe
 800b54c:	2501      	movs	r5, #1
 800b54e:	2300      	movs	r3, #0
 800b550:	9306      	str	r3, [sp, #24]
 800b552:	9508      	str	r5, [sp, #32]
 800b554:	f04f 33ff 	mov.w	r3, #4294967295
 800b558:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b55c:	2200      	movs	r2, #0
 800b55e:	2312      	movs	r3, #18
 800b560:	e7b0      	b.n	800b4c4 <_dtoa_r+0x26c>
 800b562:	2301      	movs	r3, #1
 800b564:	9308      	str	r3, [sp, #32]
 800b566:	e7f5      	b.n	800b554 <_dtoa_r+0x2fc>
 800b568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b56e:	e7b8      	b.n	800b4e2 <_dtoa_r+0x28a>
 800b570:	3101      	adds	r1, #1
 800b572:	6041      	str	r1, [r0, #4]
 800b574:	0052      	lsls	r2, r2, #1
 800b576:	e7b8      	b.n	800b4ea <_dtoa_r+0x292>
 800b578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b57a:	9a01      	ldr	r2, [sp, #4]
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	2b0e      	cmp	r3, #14
 800b582:	f200 809d 	bhi.w	800b6c0 <_dtoa_r+0x468>
 800b586:	2d00      	cmp	r5, #0
 800b588:	f000 809a 	beq.w	800b6c0 <_dtoa_r+0x468>
 800b58c:	9b00      	ldr	r3, [sp, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	dd32      	ble.n	800b5f8 <_dtoa_r+0x3a0>
 800b592:	4ab7      	ldr	r2, [pc, #732]	; (800b870 <_dtoa_r+0x618>)
 800b594:	f003 030f 	and.w	r3, r3, #15
 800b598:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b59c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5a0:	9b00      	ldr	r3, [sp, #0]
 800b5a2:	05d8      	lsls	r0, r3, #23
 800b5a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b5a8:	d516      	bpl.n	800b5d8 <_dtoa_r+0x380>
 800b5aa:	4bb2      	ldr	r3, [pc, #712]	; (800b874 <_dtoa_r+0x61c>)
 800b5ac:	ec51 0b19 	vmov	r0, r1, d9
 800b5b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5b4:	f7f5 f962 	bl	800087c <__aeabi_ddiv>
 800b5b8:	f007 070f 	and.w	r7, r7, #15
 800b5bc:	4682      	mov	sl, r0
 800b5be:	468b      	mov	fp, r1
 800b5c0:	2503      	movs	r5, #3
 800b5c2:	4eac      	ldr	r6, [pc, #688]	; (800b874 <_dtoa_r+0x61c>)
 800b5c4:	b957      	cbnz	r7, 800b5dc <_dtoa_r+0x384>
 800b5c6:	4642      	mov	r2, r8
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	4659      	mov	r1, fp
 800b5ce:	f7f5 f955 	bl	800087c <__aeabi_ddiv>
 800b5d2:	4682      	mov	sl, r0
 800b5d4:	468b      	mov	fp, r1
 800b5d6:	e028      	b.n	800b62a <_dtoa_r+0x3d2>
 800b5d8:	2502      	movs	r5, #2
 800b5da:	e7f2      	b.n	800b5c2 <_dtoa_r+0x36a>
 800b5dc:	07f9      	lsls	r1, r7, #31
 800b5de:	d508      	bpl.n	800b5f2 <_dtoa_r+0x39a>
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5e8:	f7f5 f81e 	bl	8000628 <__aeabi_dmul>
 800b5ec:	3501      	adds	r5, #1
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	4689      	mov	r9, r1
 800b5f2:	107f      	asrs	r7, r7, #1
 800b5f4:	3608      	adds	r6, #8
 800b5f6:	e7e5      	b.n	800b5c4 <_dtoa_r+0x36c>
 800b5f8:	f000 809b 	beq.w	800b732 <_dtoa_r+0x4da>
 800b5fc:	9b00      	ldr	r3, [sp, #0]
 800b5fe:	4f9d      	ldr	r7, [pc, #628]	; (800b874 <_dtoa_r+0x61c>)
 800b600:	425e      	negs	r6, r3
 800b602:	4b9b      	ldr	r3, [pc, #620]	; (800b870 <_dtoa_r+0x618>)
 800b604:	f006 020f 	and.w	r2, r6, #15
 800b608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b610:	ec51 0b19 	vmov	r0, r1, d9
 800b614:	f7f5 f808 	bl	8000628 <__aeabi_dmul>
 800b618:	1136      	asrs	r6, r6, #4
 800b61a:	4682      	mov	sl, r0
 800b61c:	468b      	mov	fp, r1
 800b61e:	2300      	movs	r3, #0
 800b620:	2502      	movs	r5, #2
 800b622:	2e00      	cmp	r6, #0
 800b624:	d17a      	bne.n	800b71c <_dtoa_r+0x4c4>
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1d3      	bne.n	800b5d2 <_dtoa_r+0x37a>
 800b62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 8082 	beq.w	800b736 <_dtoa_r+0x4de>
 800b632:	4b91      	ldr	r3, [pc, #580]	; (800b878 <_dtoa_r+0x620>)
 800b634:	2200      	movs	r2, #0
 800b636:	4650      	mov	r0, sl
 800b638:	4659      	mov	r1, fp
 800b63a:	f7f5 fa67 	bl	8000b0c <__aeabi_dcmplt>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d079      	beq.n	800b736 <_dtoa_r+0x4de>
 800b642:	9b03      	ldr	r3, [sp, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d076      	beq.n	800b736 <_dtoa_r+0x4de>
 800b648:	9b02      	ldr	r3, [sp, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	dd36      	ble.n	800b6bc <_dtoa_r+0x464>
 800b64e:	9b00      	ldr	r3, [sp, #0]
 800b650:	4650      	mov	r0, sl
 800b652:	4659      	mov	r1, fp
 800b654:	1e5f      	subs	r7, r3, #1
 800b656:	2200      	movs	r2, #0
 800b658:	4b88      	ldr	r3, [pc, #544]	; (800b87c <_dtoa_r+0x624>)
 800b65a:	f7f4 ffe5 	bl	8000628 <__aeabi_dmul>
 800b65e:	9e02      	ldr	r6, [sp, #8]
 800b660:	4682      	mov	sl, r0
 800b662:	468b      	mov	fp, r1
 800b664:	3501      	adds	r5, #1
 800b666:	4628      	mov	r0, r5
 800b668:	f7f4 ff74 	bl	8000554 <__aeabi_i2d>
 800b66c:	4652      	mov	r2, sl
 800b66e:	465b      	mov	r3, fp
 800b670:	f7f4 ffda 	bl	8000628 <__aeabi_dmul>
 800b674:	4b82      	ldr	r3, [pc, #520]	; (800b880 <_dtoa_r+0x628>)
 800b676:	2200      	movs	r2, #0
 800b678:	f7f4 fe20 	bl	80002bc <__adddf3>
 800b67c:	46d0      	mov	r8, sl
 800b67e:	46d9      	mov	r9, fp
 800b680:	4682      	mov	sl, r0
 800b682:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b686:	2e00      	cmp	r6, #0
 800b688:	d158      	bne.n	800b73c <_dtoa_r+0x4e4>
 800b68a:	4b7e      	ldr	r3, [pc, #504]	; (800b884 <_dtoa_r+0x62c>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	4640      	mov	r0, r8
 800b690:	4649      	mov	r1, r9
 800b692:	f7f4 fe11 	bl	80002b8 <__aeabi_dsub>
 800b696:	4652      	mov	r2, sl
 800b698:	465b      	mov	r3, fp
 800b69a:	4680      	mov	r8, r0
 800b69c:	4689      	mov	r9, r1
 800b69e:	f7f5 fa53 	bl	8000b48 <__aeabi_dcmpgt>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	f040 8295 	bne.w	800bbd2 <_dtoa_r+0x97a>
 800b6a8:	4652      	mov	r2, sl
 800b6aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	f7f5 fa2b 	bl	8000b0c <__aeabi_dcmplt>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	f040 8289 	bne.w	800bbce <_dtoa_r+0x976>
 800b6bc:	ec5b ab19 	vmov	sl, fp, d9
 800b6c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f2c0 8148 	blt.w	800b958 <_dtoa_r+0x700>
 800b6c8:	9a00      	ldr	r2, [sp, #0]
 800b6ca:	2a0e      	cmp	r2, #14
 800b6cc:	f300 8144 	bgt.w	800b958 <_dtoa_r+0x700>
 800b6d0:	4b67      	ldr	r3, [pc, #412]	; (800b870 <_dtoa_r+0x618>)
 800b6d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f280 80d5 	bge.w	800b88c <_dtoa_r+0x634>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f300 80d1 	bgt.w	800b88c <_dtoa_r+0x634>
 800b6ea:	f040 826f 	bne.w	800bbcc <_dtoa_r+0x974>
 800b6ee:	4b65      	ldr	r3, [pc, #404]	; (800b884 <_dtoa_r+0x62c>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	f7f4 ff97 	bl	8000628 <__aeabi_dmul>
 800b6fa:	4652      	mov	r2, sl
 800b6fc:	465b      	mov	r3, fp
 800b6fe:	f7f5 fa19 	bl	8000b34 <__aeabi_dcmpge>
 800b702:	9e03      	ldr	r6, [sp, #12]
 800b704:	4637      	mov	r7, r6
 800b706:	2800      	cmp	r0, #0
 800b708:	f040 8245 	bne.w	800bb96 <_dtoa_r+0x93e>
 800b70c:	9d01      	ldr	r5, [sp, #4]
 800b70e:	2331      	movs	r3, #49	; 0x31
 800b710:	f805 3b01 	strb.w	r3, [r5], #1
 800b714:	9b00      	ldr	r3, [sp, #0]
 800b716:	3301      	adds	r3, #1
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	e240      	b.n	800bb9e <_dtoa_r+0x946>
 800b71c:	07f2      	lsls	r2, r6, #31
 800b71e:	d505      	bpl.n	800b72c <_dtoa_r+0x4d4>
 800b720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b724:	f7f4 ff80 	bl	8000628 <__aeabi_dmul>
 800b728:	3501      	adds	r5, #1
 800b72a:	2301      	movs	r3, #1
 800b72c:	1076      	asrs	r6, r6, #1
 800b72e:	3708      	adds	r7, #8
 800b730:	e777      	b.n	800b622 <_dtoa_r+0x3ca>
 800b732:	2502      	movs	r5, #2
 800b734:	e779      	b.n	800b62a <_dtoa_r+0x3d2>
 800b736:	9f00      	ldr	r7, [sp, #0]
 800b738:	9e03      	ldr	r6, [sp, #12]
 800b73a:	e794      	b.n	800b666 <_dtoa_r+0x40e>
 800b73c:	9901      	ldr	r1, [sp, #4]
 800b73e:	4b4c      	ldr	r3, [pc, #304]	; (800b870 <_dtoa_r+0x618>)
 800b740:	4431      	add	r1, r6
 800b742:	910d      	str	r1, [sp, #52]	; 0x34
 800b744:	9908      	ldr	r1, [sp, #32]
 800b746:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b74a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b74e:	2900      	cmp	r1, #0
 800b750:	d043      	beq.n	800b7da <_dtoa_r+0x582>
 800b752:	494d      	ldr	r1, [pc, #308]	; (800b888 <_dtoa_r+0x630>)
 800b754:	2000      	movs	r0, #0
 800b756:	f7f5 f891 	bl	800087c <__aeabi_ddiv>
 800b75a:	4652      	mov	r2, sl
 800b75c:	465b      	mov	r3, fp
 800b75e:	f7f4 fdab 	bl	80002b8 <__aeabi_dsub>
 800b762:	9d01      	ldr	r5, [sp, #4]
 800b764:	4682      	mov	sl, r0
 800b766:	468b      	mov	fp, r1
 800b768:	4649      	mov	r1, r9
 800b76a:	4640      	mov	r0, r8
 800b76c:	f7f5 fa0c 	bl	8000b88 <__aeabi_d2iz>
 800b770:	4606      	mov	r6, r0
 800b772:	f7f4 feef 	bl	8000554 <__aeabi_i2d>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4640      	mov	r0, r8
 800b77c:	4649      	mov	r1, r9
 800b77e:	f7f4 fd9b 	bl	80002b8 <__aeabi_dsub>
 800b782:	3630      	adds	r6, #48	; 0x30
 800b784:	f805 6b01 	strb.w	r6, [r5], #1
 800b788:	4652      	mov	r2, sl
 800b78a:	465b      	mov	r3, fp
 800b78c:	4680      	mov	r8, r0
 800b78e:	4689      	mov	r9, r1
 800b790:	f7f5 f9bc 	bl	8000b0c <__aeabi_dcmplt>
 800b794:	2800      	cmp	r0, #0
 800b796:	d163      	bne.n	800b860 <_dtoa_r+0x608>
 800b798:	4642      	mov	r2, r8
 800b79a:	464b      	mov	r3, r9
 800b79c:	4936      	ldr	r1, [pc, #216]	; (800b878 <_dtoa_r+0x620>)
 800b79e:	2000      	movs	r0, #0
 800b7a0:	f7f4 fd8a 	bl	80002b8 <__aeabi_dsub>
 800b7a4:	4652      	mov	r2, sl
 800b7a6:	465b      	mov	r3, fp
 800b7a8:	f7f5 f9b0 	bl	8000b0c <__aeabi_dcmplt>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	f040 80b5 	bne.w	800b91c <_dtoa_r+0x6c4>
 800b7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7b4:	429d      	cmp	r5, r3
 800b7b6:	d081      	beq.n	800b6bc <_dtoa_r+0x464>
 800b7b8:	4b30      	ldr	r3, [pc, #192]	; (800b87c <_dtoa_r+0x624>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	4650      	mov	r0, sl
 800b7be:	4659      	mov	r1, fp
 800b7c0:	f7f4 ff32 	bl	8000628 <__aeabi_dmul>
 800b7c4:	4b2d      	ldr	r3, [pc, #180]	; (800b87c <_dtoa_r+0x624>)
 800b7c6:	4682      	mov	sl, r0
 800b7c8:	468b      	mov	fp, r1
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f7f4 ff2a 	bl	8000628 <__aeabi_dmul>
 800b7d4:	4680      	mov	r8, r0
 800b7d6:	4689      	mov	r9, r1
 800b7d8:	e7c6      	b.n	800b768 <_dtoa_r+0x510>
 800b7da:	4650      	mov	r0, sl
 800b7dc:	4659      	mov	r1, fp
 800b7de:	f7f4 ff23 	bl	8000628 <__aeabi_dmul>
 800b7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7e4:	9d01      	ldr	r5, [sp, #4]
 800b7e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7e8:	4682      	mov	sl, r0
 800b7ea:	468b      	mov	fp, r1
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	f7f5 f9ca 	bl	8000b88 <__aeabi_d2iz>
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	f7f4 fead 	bl	8000554 <__aeabi_i2d>
 800b7fa:	3630      	adds	r6, #48	; 0x30
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4640      	mov	r0, r8
 800b802:	4649      	mov	r1, r9
 800b804:	f7f4 fd58 	bl	80002b8 <__aeabi_dsub>
 800b808:	f805 6b01 	strb.w	r6, [r5], #1
 800b80c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b80e:	429d      	cmp	r5, r3
 800b810:	4680      	mov	r8, r0
 800b812:	4689      	mov	r9, r1
 800b814:	f04f 0200 	mov.w	r2, #0
 800b818:	d124      	bne.n	800b864 <_dtoa_r+0x60c>
 800b81a:	4b1b      	ldr	r3, [pc, #108]	; (800b888 <_dtoa_r+0x630>)
 800b81c:	4650      	mov	r0, sl
 800b81e:	4659      	mov	r1, fp
 800b820:	f7f4 fd4c 	bl	80002bc <__adddf3>
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	4640      	mov	r0, r8
 800b82a:	4649      	mov	r1, r9
 800b82c:	f7f5 f98c 	bl	8000b48 <__aeabi_dcmpgt>
 800b830:	2800      	cmp	r0, #0
 800b832:	d173      	bne.n	800b91c <_dtoa_r+0x6c4>
 800b834:	4652      	mov	r2, sl
 800b836:	465b      	mov	r3, fp
 800b838:	4913      	ldr	r1, [pc, #76]	; (800b888 <_dtoa_r+0x630>)
 800b83a:	2000      	movs	r0, #0
 800b83c:	f7f4 fd3c 	bl	80002b8 <__aeabi_dsub>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	4640      	mov	r0, r8
 800b846:	4649      	mov	r1, r9
 800b848:	f7f5 f960 	bl	8000b0c <__aeabi_dcmplt>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f43f af35 	beq.w	800b6bc <_dtoa_r+0x464>
 800b852:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b854:	1e6b      	subs	r3, r5, #1
 800b856:	930f      	str	r3, [sp, #60]	; 0x3c
 800b858:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b85c:	2b30      	cmp	r3, #48	; 0x30
 800b85e:	d0f8      	beq.n	800b852 <_dtoa_r+0x5fa>
 800b860:	9700      	str	r7, [sp, #0]
 800b862:	e049      	b.n	800b8f8 <_dtoa_r+0x6a0>
 800b864:	4b05      	ldr	r3, [pc, #20]	; (800b87c <_dtoa_r+0x624>)
 800b866:	f7f4 fedf 	bl	8000628 <__aeabi_dmul>
 800b86a:	4680      	mov	r8, r0
 800b86c:	4689      	mov	r9, r1
 800b86e:	e7bd      	b.n	800b7ec <_dtoa_r+0x594>
 800b870:	0800f058 	.word	0x0800f058
 800b874:	0800f030 	.word	0x0800f030
 800b878:	3ff00000 	.word	0x3ff00000
 800b87c:	40240000 	.word	0x40240000
 800b880:	401c0000 	.word	0x401c0000
 800b884:	40140000 	.word	0x40140000
 800b888:	3fe00000 	.word	0x3fe00000
 800b88c:	9d01      	ldr	r5, [sp, #4]
 800b88e:	4656      	mov	r6, sl
 800b890:	465f      	mov	r7, fp
 800b892:	4642      	mov	r2, r8
 800b894:	464b      	mov	r3, r9
 800b896:	4630      	mov	r0, r6
 800b898:	4639      	mov	r1, r7
 800b89a:	f7f4 ffef 	bl	800087c <__aeabi_ddiv>
 800b89e:	f7f5 f973 	bl	8000b88 <__aeabi_d2iz>
 800b8a2:	4682      	mov	sl, r0
 800b8a4:	f7f4 fe56 	bl	8000554 <__aeabi_i2d>
 800b8a8:	4642      	mov	r2, r8
 800b8aa:	464b      	mov	r3, r9
 800b8ac:	f7f4 febc 	bl	8000628 <__aeabi_dmul>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b8bc:	f7f4 fcfc 	bl	80002b8 <__aeabi_dsub>
 800b8c0:	f805 6b01 	strb.w	r6, [r5], #1
 800b8c4:	9e01      	ldr	r6, [sp, #4]
 800b8c6:	9f03      	ldr	r7, [sp, #12]
 800b8c8:	1bae      	subs	r6, r5, r6
 800b8ca:	42b7      	cmp	r7, r6
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	d135      	bne.n	800b93e <_dtoa_r+0x6e6>
 800b8d2:	f7f4 fcf3 	bl	80002bc <__adddf3>
 800b8d6:	4642      	mov	r2, r8
 800b8d8:	464b      	mov	r3, r9
 800b8da:	4606      	mov	r6, r0
 800b8dc:	460f      	mov	r7, r1
 800b8de:	f7f5 f933 	bl	8000b48 <__aeabi_dcmpgt>
 800b8e2:	b9d0      	cbnz	r0, 800b91a <_dtoa_r+0x6c2>
 800b8e4:	4642      	mov	r2, r8
 800b8e6:	464b      	mov	r3, r9
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f7f5 f904 	bl	8000af8 <__aeabi_dcmpeq>
 800b8f0:	b110      	cbz	r0, 800b8f8 <_dtoa_r+0x6a0>
 800b8f2:	f01a 0f01 	tst.w	sl, #1
 800b8f6:	d110      	bne.n	800b91a <_dtoa_r+0x6c2>
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	ee18 1a10 	vmov	r1, s16
 800b8fe:	f000 fb09 	bl	800bf14 <_Bfree>
 800b902:	2300      	movs	r3, #0
 800b904:	9800      	ldr	r0, [sp, #0]
 800b906:	702b      	strb	r3, [r5, #0]
 800b908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b90a:	3001      	adds	r0, #1
 800b90c:	6018      	str	r0, [r3, #0]
 800b90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b910:	2b00      	cmp	r3, #0
 800b912:	f43f acf1 	beq.w	800b2f8 <_dtoa_r+0xa0>
 800b916:	601d      	str	r5, [r3, #0]
 800b918:	e4ee      	b.n	800b2f8 <_dtoa_r+0xa0>
 800b91a:	9f00      	ldr	r7, [sp, #0]
 800b91c:	462b      	mov	r3, r5
 800b91e:	461d      	mov	r5, r3
 800b920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b924:	2a39      	cmp	r2, #57	; 0x39
 800b926:	d106      	bne.n	800b936 <_dtoa_r+0x6de>
 800b928:	9a01      	ldr	r2, [sp, #4]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d1f7      	bne.n	800b91e <_dtoa_r+0x6c6>
 800b92e:	9901      	ldr	r1, [sp, #4]
 800b930:	2230      	movs	r2, #48	; 0x30
 800b932:	3701      	adds	r7, #1
 800b934:	700a      	strb	r2, [r1, #0]
 800b936:	781a      	ldrb	r2, [r3, #0]
 800b938:	3201      	adds	r2, #1
 800b93a:	701a      	strb	r2, [r3, #0]
 800b93c:	e790      	b.n	800b860 <_dtoa_r+0x608>
 800b93e:	4ba6      	ldr	r3, [pc, #664]	; (800bbd8 <_dtoa_r+0x980>)
 800b940:	2200      	movs	r2, #0
 800b942:	f7f4 fe71 	bl	8000628 <__aeabi_dmul>
 800b946:	2200      	movs	r2, #0
 800b948:	2300      	movs	r3, #0
 800b94a:	4606      	mov	r6, r0
 800b94c:	460f      	mov	r7, r1
 800b94e:	f7f5 f8d3 	bl	8000af8 <__aeabi_dcmpeq>
 800b952:	2800      	cmp	r0, #0
 800b954:	d09d      	beq.n	800b892 <_dtoa_r+0x63a>
 800b956:	e7cf      	b.n	800b8f8 <_dtoa_r+0x6a0>
 800b958:	9a08      	ldr	r2, [sp, #32]
 800b95a:	2a00      	cmp	r2, #0
 800b95c:	f000 80d7 	beq.w	800bb0e <_dtoa_r+0x8b6>
 800b960:	9a06      	ldr	r2, [sp, #24]
 800b962:	2a01      	cmp	r2, #1
 800b964:	f300 80ba 	bgt.w	800badc <_dtoa_r+0x884>
 800b968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b96a:	2a00      	cmp	r2, #0
 800b96c:	f000 80b2 	beq.w	800bad4 <_dtoa_r+0x87c>
 800b970:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b974:	9e07      	ldr	r6, [sp, #28]
 800b976:	9d04      	ldr	r5, [sp, #16]
 800b978:	9a04      	ldr	r2, [sp, #16]
 800b97a:	441a      	add	r2, r3
 800b97c:	9204      	str	r2, [sp, #16]
 800b97e:	9a05      	ldr	r2, [sp, #20]
 800b980:	2101      	movs	r1, #1
 800b982:	441a      	add	r2, r3
 800b984:	4620      	mov	r0, r4
 800b986:	9205      	str	r2, [sp, #20]
 800b988:	f000 fb7c 	bl	800c084 <__i2b>
 800b98c:	4607      	mov	r7, r0
 800b98e:	2d00      	cmp	r5, #0
 800b990:	dd0c      	ble.n	800b9ac <_dtoa_r+0x754>
 800b992:	9b05      	ldr	r3, [sp, #20]
 800b994:	2b00      	cmp	r3, #0
 800b996:	dd09      	ble.n	800b9ac <_dtoa_r+0x754>
 800b998:	42ab      	cmp	r3, r5
 800b99a:	9a04      	ldr	r2, [sp, #16]
 800b99c:	bfa8      	it	ge
 800b99e:	462b      	movge	r3, r5
 800b9a0:	1ad2      	subs	r2, r2, r3
 800b9a2:	9204      	str	r2, [sp, #16]
 800b9a4:	9a05      	ldr	r2, [sp, #20]
 800b9a6:	1aed      	subs	r5, r5, r3
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	9305      	str	r3, [sp, #20]
 800b9ac:	9b07      	ldr	r3, [sp, #28]
 800b9ae:	b31b      	cbz	r3, 800b9f8 <_dtoa_r+0x7a0>
 800b9b0:	9b08      	ldr	r3, [sp, #32]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 80af 	beq.w	800bb16 <_dtoa_r+0x8be>
 800b9b8:	2e00      	cmp	r6, #0
 800b9ba:	dd13      	ble.n	800b9e4 <_dtoa_r+0x78c>
 800b9bc:	4639      	mov	r1, r7
 800b9be:	4632      	mov	r2, r6
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f000 fc1f 	bl	800c204 <__pow5mult>
 800b9c6:	ee18 2a10 	vmov	r2, s16
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fb6e 	bl	800c0b0 <__multiply>
 800b9d4:	ee18 1a10 	vmov	r1, s16
 800b9d8:	4680      	mov	r8, r0
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 fa9a 	bl	800bf14 <_Bfree>
 800b9e0:	ee08 8a10 	vmov	s16, r8
 800b9e4:	9b07      	ldr	r3, [sp, #28]
 800b9e6:	1b9a      	subs	r2, r3, r6
 800b9e8:	d006      	beq.n	800b9f8 <_dtoa_r+0x7a0>
 800b9ea:	ee18 1a10 	vmov	r1, s16
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 fc08 	bl	800c204 <__pow5mult>
 800b9f4:	ee08 0a10 	vmov	s16, r0
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 fb42 	bl	800c084 <__i2b>
 800ba00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	4606      	mov	r6, r0
 800ba06:	f340 8088 	ble.w	800bb1a <_dtoa_r+0x8c2>
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	4601      	mov	r1, r0
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f000 fbf8 	bl	800c204 <__pow5mult>
 800ba14:	9b06      	ldr	r3, [sp, #24]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	4606      	mov	r6, r0
 800ba1a:	f340 8081 	ble.w	800bb20 <_dtoa_r+0x8c8>
 800ba1e:	f04f 0800 	mov.w	r8, #0
 800ba22:	6933      	ldr	r3, [r6, #16]
 800ba24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba28:	6918      	ldr	r0, [r3, #16]
 800ba2a:	f000 fadb 	bl	800bfe4 <__hi0bits>
 800ba2e:	f1c0 0020 	rsb	r0, r0, #32
 800ba32:	9b05      	ldr	r3, [sp, #20]
 800ba34:	4418      	add	r0, r3
 800ba36:	f010 001f 	ands.w	r0, r0, #31
 800ba3a:	f000 8092 	beq.w	800bb62 <_dtoa_r+0x90a>
 800ba3e:	f1c0 0320 	rsb	r3, r0, #32
 800ba42:	2b04      	cmp	r3, #4
 800ba44:	f340 808a 	ble.w	800bb5c <_dtoa_r+0x904>
 800ba48:	f1c0 001c 	rsb	r0, r0, #28
 800ba4c:	9b04      	ldr	r3, [sp, #16]
 800ba4e:	4403      	add	r3, r0
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	9b05      	ldr	r3, [sp, #20]
 800ba54:	4403      	add	r3, r0
 800ba56:	4405      	add	r5, r0
 800ba58:	9305      	str	r3, [sp, #20]
 800ba5a:	9b04      	ldr	r3, [sp, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	dd07      	ble.n	800ba70 <_dtoa_r+0x818>
 800ba60:	ee18 1a10 	vmov	r1, s16
 800ba64:	461a      	mov	r2, r3
 800ba66:	4620      	mov	r0, r4
 800ba68:	f000 fc26 	bl	800c2b8 <__lshift>
 800ba6c:	ee08 0a10 	vmov	s16, r0
 800ba70:	9b05      	ldr	r3, [sp, #20]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	dd05      	ble.n	800ba82 <_dtoa_r+0x82a>
 800ba76:	4631      	mov	r1, r6
 800ba78:	461a      	mov	r2, r3
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 fc1c 	bl	800c2b8 <__lshift>
 800ba80:	4606      	mov	r6, r0
 800ba82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d06e      	beq.n	800bb66 <_dtoa_r+0x90e>
 800ba88:	ee18 0a10 	vmov	r0, s16
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	f000 fc83 	bl	800c398 <__mcmp>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	da67      	bge.n	800bb66 <_dtoa_r+0x90e>
 800ba96:	9b00      	ldr	r3, [sp, #0]
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	ee18 1a10 	vmov	r1, s16
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	220a      	movs	r2, #10
 800baa2:	2300      	movs	r3, #0
 800baa4:	4620      	mov	r0, r4
 800baa6:	f000 fa57 	bl	800bf58 <__multadd>
 800baaa:	9b08      	ldr	r3, [sp, #32]
 800baac:	ee08 0a10 	vmov	s16, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 81b1 	beq.w	800be18 <_dtoa_r+0xbc0>
 800bab6:	2300      	movs	r3, #0
 800bab8:	4639      	mov	r1, r7
 800baba:	220a      	movs	r2, #10
 800babc:	4620      	mov	r0, r4
 800babe:	f000 fa4b 	bl	800bf58 <__multadd>
 800bac2:	9b02      	ldr	r3, [sp, #8]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	4607      	mov	r7, r0
 800bac8:	f300 808e 	bgt.w	800bbe8 <_dtoa_r+0x990>
 800bacc:	9b06      	ldr	r3, [sp, #24]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	dc51      	bgt.n	800bb76 <_dtoa_r+0x91e>
 800bad2:	e089      	b.n	800bbe8 <_dtoa_r+0x990>
 800bad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bada:	e74b      	b.n	800b974 <_dtoa_r+0x71c>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	1e5e      	subs	r6, r3, #1
 800bae0:	9b07      	ldr	r3, [sp, #28]
 800bae2:	42b3      	cmp	r3, r6
 800bae4:	bfbf      	itttt	lt
 800bae6:	9b07      	ldrlt	r3, [sp, #28]
 800bae8:	9607      	strlt	r6, [sp, #28]
 800baea:	1af2      	sublt	r2, r6, r3
 800baec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800baee:	bfb6      	itet	lt
 800baf0:	189b      	addlt	r3, r3, r2
 800baf2:	1b9e      	subge	r6, r3, r6
 800baf4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	bfb8      	it	lt
 800bafa:	2600      	movlt	r6, #0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	bfb7      	itett	lt
 800bb00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bb04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bb08:	1a9d      	sublt	r5, r3, r2
 800bb0a:	2300      	movlt	r3, #0
 800bb0c:	e734      	b.n	800b978 <_dtoa_r+0x720>
 800bb0e:	9e07      	ldr	r6, [sp, #28]
 800bb10:	9d04      	ldr	r5, [sp, #16]
 800bb12:	9f08      	ldr	r7, [sp, #32]
 800bb14:	e73b      	b.n	800b98e <_dtoa_r+0x736>
 800bb16:	9a07      	ldr	r2, [sp, #28]
 800bb18:	e767      	b.n	800b9ea <_dtoa_r+0x792>
 800bb1a:	9b06      	ldr	r3, [sp, #24]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	dc18      	bgt.n	800bb52 <_dtoa_r+0x8fa>
 800bb20:	f1ba 0f00 	cmp.w	sl, #0
 800bb24:	d115      	bne.n	800bb52 <_dtoa_r+0x8fa>
 800bb26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb2a:	b993      	cbnz	r3, 800bb52 <_dtoa_r+0x8fa>
 800bb2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb30:	0d1b      	lsrs	r3, r3, #20
 800bb32:	051b      	lsls	r3, r3, #20
 800bb34:	b183      	cbz	r3, 800bb58 <_dtoa_r+0x900>
 800bb36:	9b04      	ldr	r3, [sp, #16]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	9304      	str	r3, [sp, #16]
 800bb3c:	9b05      	ldr	r3, [sp, #20]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	9305      	str	r3, [sp, #20]
 800bb42:	f04f 0801 	mov.w	r8, #1
 800bb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f47f af6a 	bne.w	800ba22 <_dtoa_r+0x7ca>
 800bb4e:	2001      	movs	r0, #1
 800bb50:	e76f      	b.n	800ba32 <_dtoa_r+0x7da>
 800bb52:	f04f 0800 	mov.w	r8, #0
 800bb56:	e7f6      	b.n	800bb46 <_dtoa_r+0x8ee>
 800bb58:	4698      	mov	r8, r3
 800bb5a:	e7f4      	b.n	800bb46 <_dtoa_r+0x8ee>
 800bb5c:	f43f af7d 	beq.w	800ba5a <_dtoa_r+0x802>
 800bb60:	4618      	mov	r0, r3
 800bb62:	301c      	adds	r0, #28
 800bb64:	e772      	b.n	800ba4c <_dtoa_r+0x7f4>
 800bb66:	9b03      	ldr	r3, [sp, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dc37      	bgt.n	800bbdc <_dtoa_r+0x984>
 800bb6c:	9b06      	ldr	r3, [sp, #24]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	dd34      	ble.n	800bbdc <_dtoa_r+0x984>
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	9302      	str	r3, [sp, #8]
 800bb76:	9b02      	ldr	r3, [sp, #8]
 800bb78:	b96b      	cbnz	r3, 800bb96 <_dtoa_r+0x93e>
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	2205      	movs	r2, #5
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f000 f9ea 	bl	800bf58 <__multadd>
 800bb84:	4601      	mov	r1, r0
 800bb86:	4606      	mov	r6, r0
 800bb88:	ee18 0a10 	vmov	r0, s16
 800bb8c:	f000 fc04 	bl	800c398 <__mcmp>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	f73f adbb 	bgt.w	800b70c <_dtoa_r+0x4b4>
 800bb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb98:	9d01      	ldr	r5, [sp, #4]
 800bb9a:	43db      	mvns	r3, r3
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	f04f 0800 	mov.w	r8, #0
 800bba2:	4631      	mov	r1, r6
 800bba4:	4620      	mov	r0, r4
 800bba6:	f000 f9b5 	bl	800bf14 <_Bfree>
 800bbaa:	2f00      	cmp	r7, #0
 800bbac:	f43f aea4 	beq.w	800b8f8 <_dtoa_r+0x6a0>
 800bbb0:	f1b8 0f00 	cmp.w	r8, #0
 800bbb4:	d005      	beq.n	800bbc2 <_dtoa_r+0x96a>
 800bbb6:	45b8      	cmp	r8, r7
 800bbb8:	d003      	beq.n	800bbc2 <_dtoa_r+0x96a>
 800bbba:	4641      	mov	r1, r8
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f000 f9a9 	bl	800bf14 <_Bfree>
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f000 f9a5 	bl	800bf14 <_Bfree>
 800bbca:	e695      	b.n	800b8f8 <_dtoa_r+0x6a0>
 800bbcc:	2600      	movs	r6, #0
 800bbce:	4637      	mov	r7, r6
 800bbd0:	e7e1      	b.n	800bb96 <_dtoa_r+0x93e>
 800bbd2:	9700      	str	r7, [sp, #0]
 800bbd4:	4637      	mov	r7, r6
 800bbd6:	e599      	b.n	800b70c <_dtoa_r+0x4b4>
 800bbd8:	40240000 	.word	0x40240000
 800bbdc:	9b08      	ldr	r3, [sp, #32]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 80ca 	beq.w	800bd78 <_dtoa_r+0xb20>
 800bbe4:	9b03      	ldr	r3, [sp, #12]
 800bbe6:	9302      	str	r3, [sp, #8]
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	dd05      	ble.n	800bbf8 <_dtoa_r+0x9a0>
 800bbec:	4639      	mov	r1, r7
 800bbee:	462a      	mov	r2, r5
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fb61 	bl	800c2b8 <__lshift>
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	f1b8 0f00 	cmp.w	r8, #0
 800bbfc:	d05b      	beq.n	800bcb6 <_dtoa_r+0xa5e>
 800bbfe:	6879      	ldr	r1, [r7, #4]
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 f947 	bl	800be94 <_Balloc>
 800bc06:	4605      	mov	r5, r0
 800bc08:	b928      	cbnz	r0, 800bc16 <_dtoa_r+0x9be>
 800bc0a:	4b87      	ldr	r3, [pc, #540]	; (800be28 <_dtoa_r+0xbd0>)
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc12:	f7ff bb3b 	b.w	800b28c <_dtoa_r+0x34>
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	3202      	adds	r2, #2
 800bc1a:	0092      	lsls	r2, r2, #2
 800bc1c:	f107 010c 	add.w	r1, r7, #12
 800bc20:	300c      	adds	r0, #12
 800bc22:	f000 f91d 	bl	800be60 <memcpy>
 800bc26:	2201      	movs	r2, #1
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 fb44 	bl	800c2b8 <__lshift>
 800bc30:	9b01      	ldr	r3, [sp, #4]
 800bc32:	f103 0901 	add.w	r9, r3, #1
 800bc36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	f00a 0301 	and.w	r3, sl, #1
 800bc42:	46b8      	mov	r8, r7
 800bc44:	9304      	str	r3, [sp, #16]
 800bc46:	4607      	mov	r7, r0
 800bc48:	4631      	mov	r1, r6
 800bc4a:	ee18 0a10 	vmov	r0, s16
 800bc4e:	f7ff fa75 	bl	800b13c <quorem>
 800bc52:	4641      	mov	r1, r8
 800bc54:	9002      	str	r0, [sp, #8]
 800bc56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc5a:	ee18 0a10 	vmov	r0, s16
 800bc5e:	f000 fb9b 	bl	800c398 <__mcmp>
 800bc62:	463a      	mov	r2, r7
 800bc64:	9003      	str	r0, [sp, #12]
 800bc66:	4631      	mov	r1, r6
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 fbb1 	bl	800c3d0 <__mdiff>
 800bc6e:	68c2      	ldr	r2, [r0, #12]
 800bc70:	f109 3bff 	add.w	fp, r9, #4294967295
 800bc74:	4605      	mov	r5, r0
 800bc76:	bb02      	cbnz	r2, 800bcba <_dtoa_r+0xa62>
 800bc78:	4601      	mov	r1, r0
 800bc7a:	ee18 0a10 	vmov	r0, s16
 800bc7e:	f000 fb8b 	bl	800c398 <__mcmp>
 800bc82:	4602      	mov	r2, r0
 800bc84:	4629      	mov	r1, r5
 800bc86:	4620      	mov	r0, r4
 800bc88:	9207      	str	r2, [sp, #28]
 800bc8a:	f000 f943 	bl	800bf14 <_Bfree>
 800bc8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bc92:	ea43 0102 	orr.w	r1, r3, r2
 800bc96:	9b04      	ldr	r3, [sp, #16]
 800bc98:	430b      	orrs	r3, r1
 800bc9a:	464d      	mov	r5, r9
 800bc9c:	d10f      	bne.n	800bcbe <_dtoa_r+0xa66>
 800bc9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bca2:	d02a      	beq.n	800bcfa <_dtoa_r+0xaa2>
 800bca4:	9b03      	ldr	r3, [sp, #12]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	dd02      	ble.n	800bcb0 <_dtoa_r+0xa58>
 800bcaa:	9b02      	ldr	r3, [sp, #8]
 800bcac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bcb0:	f88b a000 	strb.w	sl, [fp]
 800bcb4:	e775      	b.n	800bba2 <_dtoa_r+0x94a>
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	e7ba      	b.n	800bc30 <_dtoa_r+0x9d8>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	e7e2      	b.n	800bc84 <_dtoa_r+0xa2c>
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	db04      	blt.n	800bcce <_dtoa_r+0xa76>
 800bcc4:	9906      	ldr	r1, [sp, #24]
 800bcc6:	430b      	orrs	r3, r1
 800bcc8:	9904      	ldr	r1, [sp, #16]
 800bcca:	430b      	orrs	r3, r1
 800bccc:	d122      	bne.n	800bd14 <_dtoa_r+0xabc>
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	ddee      	ble.n	800bcb0 <_dtoa_r+0xa58>
 800bcd2:	ee18 1a10 	vmov	r1, s16
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 faed 	bl	800c2b8 <__lshift>
 800bcde:	4631      	mov	r1, r6
 800bce0:	ee08 0a10 	vmov	s16, r0
 800bce4:	f000 fb58 	bl	800c398 <__mcmp>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	dc03      	bgt.n	800bcf4 <_dtoa_r+0xa9c>
 800bcec:	d1e0      	bne.n	800bcb0 <_dtoa_r+0xa58>
 800bcee:	f01a 0f01 	tst.w	sl, #1
 800bcf2:	d0dd      	beq.n	800bcb0 <_dtoa_r+0xa58>
 800bcf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcf8:	d1d7      	bne.n	800bcaa <_dtoa_r+0xa52>
 800bcfa:	2339      	movs	r3, #57	; 0x39
 800bcfc:	f88b 3000 	strb.w	r3, [fp]
 800bd00:	462b      	mov	r3, r5
 800bd02:	461d      	mov	r5, r3
 800bd04:	3b01      	subs	r3, #1
 800bd06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd0a:	2a39      	cmp	r2, #57	; 0x39
 800bd0c:	d071      	beq.n	800bdf2 <_dtoa_r+0xb9a>
 800bd0e:	3201      	adds	r2, #1
 800bd10:	701a      	strb	r2, [r3, #0]
 800bd12:	e746      	b.n	800bba2 <_dtoa_r+0x94a>
 800bd14:	2a00      	cmp	r2, #0
 800bd16:	dd07      	ble.n	800bd28 <_dtoa_r+0xad0>
 800bd18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd1c:	d0ed      	beq.n	800bcfa <_dtoa_r+0xaa2>
 800bd1e:	f10a 0301 	add.w	r3, sl, #1
 800bd22:	f88b 3000 	strb.w	r3, [fp]
 800bd26:	e73c      	b.n	800bba2 <_dtoa_r+0x94a>
 800bd28:	9b05      	ldr	r3, [sp, #20]
 800bd2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bd2e:	4599      	cmp	r9, r3
 800bd30:	d047      	beq.n	800bdc2 <_dtoa_r+0xb6a>
 800bd32:	ee18 1a10 	vmov	r1, s16
 800bd36:	2300      	movs	r3, #0
 800bd38:	220a      	movs	r2, #10
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 f90c 	bl	800bf58 <__multadd>
 800bd40:	45b8      	cmp	r8, r7
 800bd42:	ee08 0a10 	vmov	s16, r0
 800bd46:	f04f 0300 	mov.w	r3, #0
 800bd4a:	f04f 020a 	mov.w	r2, #10
 800bd4e:	4641      	mov	r1, r8
 800bd50:	4620      	mov	r0, r4
 800bd52:	d106      	bne.n	800bd62 <_dtoa_r+0xb0a>
 800bd54:	f000 f900 	bl	800bf58 <__multadd>
 800bd58:	4680      	mov	r8, r0
 800bd5a:	4607      	mov	r7, r0
 800bd5c:	f109 0901 	add.w	r9, r9, #1
 800bd60:	e772      	b.n	800bc48 <_dtoa_r+0x9f0>
 800bd62:	f000 f8f9 	bl	800bf58 <__multadd>
 800bd66:	4639      	mov	r1, r7
 800bd68:	4680      	mov	r8, r0
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	220a      	movs	r2, #10
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 f8f2 	bl	800bf58 <__multadd>
 800bd74:	4607      	mov	r7, r0
 800bd76:	e7f1      	b.n	800bd5c <_dtoa_r+0xb04>
 800bd78:	9b03      	ldr	r3, [sp, #12]
 800bd7a:	9302      	str	r3, [sp, #8]
 800bd7c:	9d01      	ldr	r5, [sp, #4]
 800bd7e:	ee18 0a10 	vmov	r0, s16
 800bd82:	4631      	mov	r1, r6
 800bd84:	f7ff f9da 	bl	800b13c <quorem>
 800bd88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd8c:	9b01      	ldr	r3, [sp, #4]
 800bd8e:	f805 ab01 	strb.w	sl, [r5], #1
 800bd92:	1aea      	subs	r2, r5, r3
 800bd94:	9b02      	ldr	r3, [sp, #8]
 800bd96:	4293      	cmp	r3, r2
 800bd98:	dd09      	ble.n	800bdae <_dtoa_r+0xb56>
 800bd9a:	ee18 1a10 	vmov	r1, s16
 800bd9e:	2300      	movs	r3, #0
 800bda0:	220a      	movs	r2, #10
 800bda2:	4620      	mov	r0, r4
 800bda4:	f000 f8d8 	bl	800bf58 <__multadd>
 800bda8:	ee08 0a10 	vmov	s16, r0
 800bdac:	e7e7      	b.n	800bd7e <_dtoa_r+0xb26>
 800bdae:	9b02      	ldr	r3, [sp, #8]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	bfc8      	it	gt
 800bdb4:	461d      	movgt	r5, r3
 800bdb6:	9b01      	ldr	r3, [sp, #4]
 800bdb8:	bfd8      	it	le
 800bdba:	2501      	movle	r5, #1
 800bdbc:	441d      	add	r5, r3
 800bdbe:	f04f 0800 	mov.w	r8, #0
 800bdc2:	ee18 1a10 	vmov	r1, s16
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f000 fa75 	bl	800c2b8 <__lshift>
 800bdce:	4631      	mov	r1, r6
 800bdd0:	ee08 0a10 	vmov	s16, r0
 800bdd4:	f000 fae0 	bl	800c398 <__mcmp>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	dc91      	bgt.n	800bd00 <_dtoa_r+0xaa8>
 800bddc:	d102      	bne.n	800bde4 <_dtoa_r+0xb8c>
 800bdde:	f01a 0f01 	tst.w	sl, #1
 800bde2:	d18d      	bne.n	800bd00 <_dtoa_r+0xaa8>
 800bde4:	462b      	mov	r3, r5
 800bde6:	461d      	mov	r5, r3
 800bde8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdec:	2a30      	cmp	r2, #48	; 0x30
 800bdee:	d0fa      	beq.n	800bde6 <_dtoa_r+0xb8e>
 800bdf0:	e6d7      	b.n	800bba2 <_dtoa_r+0x94a>
 800bdf2:	9a01      	ldr	r2, [sp, #4]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d184      	bne.n	800bd02 <_dtoa_r+0xaaa>
 800bdf8:	9b00      	ldr	r3, [sp, #0]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	2331      	movs	r3, #49	; 0x31
 800be00:	7013      	strb	r3, [r2, #0]
 800be02:	e6ce      	b.n	800bba2 <_dtoa_r+0x94a>
 800be04:	4b09      	ldr	r3, [pc, #36]	; (800be2c <_dtoa_r+0xbd4>)
 800be06:	f7ff ba95 	b.w	800b334 <_dtoa_r+0xdc>
 800be0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f47f aa6e 	bne.w	800b2ee <_dtoa_r+0x96>
 800be12:	4b07      	ldr	r3, [pc, #28]	; (800be30 <_dtoa_r+0xbd8>)
 800be14:	f7ff ba8e 	b.w	800b334 <_dtoa_r+0xdc>
 800be18:	9b02      	ldr	r3, [sp, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	dcae      	bgt.n	800bd7c <_dtoa_r+0xb24>
 800be1e:	9b06      	ldr	r3, [sp, #24]
 800be20:	2b02      	cmp	r3, #2
 800be22:	f73f aea8 	bgt.w	800bb76 <_dtoa_r+0x91e>
 800be26:	e7a9      	b.n	800bd7c <_dtoa_r+0xb24>
 800be28:	0800efbe 	.word	0x0800efbe
 800be2c:	0800f141 	.word	0x0800f141
 800be30:	0800ef3f 	.word	0x0800ef3f

0800be34 <_localeconv_r>:
 800be34:	4800      	ldr	r0, [pc, #0]	; (800be38 <_localeconv_r+0x4>)
 800be36:	4770      	bx	lr
 800be38:	2000032c 	.word	0x2000032c

0800be3c <_lseek_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4d07      	ldr	r5, [pc, #28]	; (800be5c <_lseek_r+0x20>)
 800be40:	4604      	mov	r4, r0
 800be42:	4608      	mov	r0, r1
 800be44:	4611      	mov	r1, r2
 800be46:	2200      	movs	r2, #0
 800be48:	602a      	str	r2, [r5, #0]
 800be4a:	461a      	mov	r2, r3
 800be4c:	f7f7 ff9c 	bl	8003d88 <_lseek>
 800be50:	1c43      	adds	r3, r0, #1
 800be52:	d102      	bne.n	800be5a <_lseek_r+0x1e>
 800be54:	682b      	ldr	r3, [r5, #0]
 800be56:	b103      	cbz	r3, 800be5a <_lseek_r+0x1e>
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	bd38      	pop	{r3, r4, r5, pc}
 800be5c:	20000c28 	.word	0x20000c28

0800be60 <memcpy>:
 800be60:	440a      	add	r2, r1
 800be62:	4291      	cmp	r1, r2
 800be64:	f100 33ff 	add.w	r3, r0, #4294967295
 800be68:	d100      	bne.n	800be6c <memcpy+0xc>
 800be6a:	4770      	bx	lr
 800be6c:	b510      	push	{r4, lr}
 800be6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be76:	4291      	cmp	r1, r2
 800be78:	d1f9      	bne.n	800be6e <memcpy+0xe>
 800be7a:	bd10      	pop	{r4, pc}

0800be7c <__malloc_lock>:
 800be7c:	4801      	ldr	r0, [pc, #4]	; (800be84 <__malloc_lock+0x8>)
 800be7e:	f001 bb03 	b.w	800d488 <__retarget_lock_acquire_recursive>
 800be82:	bf00      	nop
 800be84:	20000c2c 	.word	0x20000c2c

0800be88 <__malloc_unlock>:
 800be88:	4801      	ldr	r0, [pc, #4]	; (800be90 <__malloc_unlock+0x8>)
 800be8a:	f001 bafe 	b.w	800d48a <__retarget_lock_release_recursive>
 800be8e:	bf00      	nop
 800be90:	20000c2c 	.word	0x20000c2c

0800be94 <_Balloc>:
 800be94:	b570      	push	{r4, r5, r6, lr}
 800be96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be98:	4604      	mov	r4, r0
 800be9a:	460d      	mov	r5, r1
 800be9c:	b976      	cbnz	r6, 800bebc <_Balloc+0x28>
 800be9e:	2010      	movs	r0, #16
 800bea0:	f7fe fa70 	bl	800a384 <malloc>
 800bea4:	4602      	mov	r2, r0
 800bea6:	6260      	str	r0, [r4, #36]	; 0x24
 800bea8:	b920      	cbnz	r0, 800beb4 <_Balloc+0x20>
 800beaa:	4b18      	ldr	r3, [pc, #96]	; (800bf0c <_Balloc+0x78>)
 800beac:	4818      	ldr	r0, [pc, #96]	; (800bf10 <_Balloc+0x7c>)
 800beae:	2166      	movs	r1, #102	; 0x66
 800beb0:	f001 f902 	bl	800d0b8 <__assert_func>
 800beb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800beb8:	6006      	str	r6, [r0, #0]
 800beba:	60c6      	str	r6, [r0, #12]
 800bebc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bebe:	68f3      	ldr	r3, [r6, #12]
 800bec0:	b183      	cbz	r3, 800bee4 <_Balloc+0x50>
 800bec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800beca:	b9b8      	cbnz	r0, 800befc <_Balloc+0x68>
 800becc:	2101      	movs	r1, #1
 800bece:	fa01 f605 	lsl.w	r6, r1, r5
 800bed2:	1d72      	adds	r2, r6, #5
 800bed4:	0092      	lsls	r2, r2, #2
 800bed6:	4620      	mov	r0, r4
 800bed8:	f000 fb60 	bl	800c59c <_calloc_r>
 800bedc:	b160      	cbz	r0, 800bef8 <_Balloc+0x64>
 800bede:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bee2:	e00e      	b.n	800bf02 <_Balloc+0x6e>
 800bee4:	2221      	movs	r2, #33	; 0x21
 800bee6:	2104      	movs	r1, #4
 800bee8:	4620      	mov	r0, r4
 800beea:	f000 fb57 	bl	800c59c <_calloc_r>
 800beee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bef0:	60f0      	str	r0, [r6, #12]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1e4      	bne.n	800bec2 <_Balloc+0x2e>
 800bef8:	2000      	movs	r0, #0
 800befa:	bd70      	pop	{r4, r5, r6, pc}
 800befc:	6802      	ldr	r2, [r0, #0]
 800befe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf02:	2300      	movs	r3, #0
 800bf04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf08:	e7f7      	b.n	800befa <_Balloc+0x66>
 800bf0a:	bf00      	nop
 800bf0c:	0800ef4c 	.word	0x0800ef4c
 800bf10:	0800efcf 	.word	0x0800efcf

0800bf14 <_Bfree>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf18:	4605      	mov	r5, r0
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	b976      	cbnz	r6, 800bf3c <_Bfree+0x28>
 800bf1e:	2010      	movs	r0, #16
 800bf20:	f7fe fa30 	bl	800a384 <malloc>
 800bf24:	4602      	mov	r2, r0
 800bf26:	6268      	str	r0, [r5, #36]	; 0x24
 800bf28:	b920      	cbnz	r0, 800bf34 <_Bfree+0x20>
 800bf2a:	4b09      	ldr	r3, [pc, #36]	; (800bf50 <_Bfree+0x3c>)
 800bf2c:	4809      	ldr	r0, [pc, #36]	; (800bf54 <_Bfree+0x40>)
 800bf2e:	218a      	movs	r1, #138	; 0x8a
 800bf30:	f001 f8c2 	bl	800d0b8 <__assert_func>
 800bf34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf38:	6006      	str	r6, [r0, #0]
 800bf3a:	60c6      	str	r6, [r0, #12]
 800bf3c:	b13c      	cbz	r4, 800bf4e <_Bfree+0x3a>
 800bf3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf40:	6862      	ldr	r2, [r4, #4]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf48:	6021      	str	r1, [r4, #0]
 800bf4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}
 800bf50:	0800ef4c 	.word	0x0800ef4c
 800bf54:	0800efcf 	.word	0x0800efcf

0800bf58 <__multadd>:
 800bf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf5c:	690d      	ldr	r5, [r1, #16]
 800bf5e:	4607      	mov	r7, r0
 800bf60:	460c      	mov	r4, r1
 800bf62:	461e      	mov	r6, r3
 800bf64:	f101 0c14 	add.w	ip, r1, #20
 800bf68:	2000      	movs	r0, #0
 800bf6a:	f8dc 3000 	ldr.w	r3, [ip]
 800bf6e:	b299      	uxth	r1, r3
 800bf70:	fb02 6101 	mla	r1, r2, r1, r6
 800bf74:	0c1e      	lsrs	r6, r3, #16
 800bf76:	0c0b      	lsrs	r3, r1, #16
 800bf78:	fb02 3306 	mla	r3, r2, r6, r3
 800bf7c:	b289      	uxth	r1, r1
 800bf7e:	3001      	adds	r0, #1
 800bf80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf84:	4285      	cmp	r5, r0
 800bf86:	f84c 1b04 	str.w	r1, [ip], #4
 800bf8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf8e:	dcec      	bgt.n	800bf6a <__multadd+0x12>
 800bf90:	b30e      	cbz	r6, 800bfd6 <__multadd+0x7e>
 800bf92:	68a3      	ldr	r3, [r4, #8]
 800bf94:	42ab      	cmp	r3, r5
 800bf96:	dc19      	bgt.n	800bfcc <__multadd+0x74>
 800bf98:	6861      	ldr	r1, [r4, #4]
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	3101      	adds	r1, #1
 800bf9e:	f7ff ff79 	bl	800be94 <_Balloc>
 800bfa2:	4680      	mov	r8, r0
 800bfa4:	b928      	cbnz	r0, 800bfb2 <__multadd+0x5a>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	4b0c      	ldr	r3, [pc, #48]	; (800bfdc <__multadd+0x84>)
 800bfaa:	480d      	ldr	r0, [pc, #52]	; (800bfe0 <__multadd+0x88>)
 800bfac:	21b5      	movs	r1, #181	; 0xb5
 800bfae:	f001 f883 	bl	800d0b8 <__assert_func>
 800bfb2:	6922      	ldr	r2, [r4, #16]
 800bfb4:	3202      	adds	r2, #2
 800bfb6:	f104 010c 	add.w	r1, r4, #12
 800bfba:	0092      	lsls	r2, r2, #2
 800bfbc:	300c      	adds	r0, #12
 800bfbe:	f7ff ff4f 	bl	800be60 <memcpy>
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	f7ff ffa5 	bl	800bf14 <_Bfree>
 800bfca:	4644      	mov	r4, r8
 800bfcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfd0:	3501      	adds	r5, #1
 800bfd2:	615e      	str	r6, [r3, #20]
 800bfd4:	6125      	str	r5, [r4, #16]
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfdc:	0800efbe 	.word	0x0800efbe
 800bfe0:	0800efcf 	.word	0x0800efcf

0800bfe4 <__hi0bits>:
 800bfe4:	0c03      	lsrs	r3, r0, #16
 800bfe6:	041b      	lsls	r3, r3, #16
 800bfe8:	b9d3      	cbnz	r3, 800c020 <__hi0bits+0x3c>
 800bfea:	0400      	lsls	r0, r0, #16
 800bfec:	2310      	movs	r3, #16
 800bfee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bff2:	bf04      	itt	eq
 800bff4:	0200      	lsleq	r0, r0, #8
 800bff6:	3308      	addeq	r3, #8
 800bff8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bffc:	bf04      	itt	eq
 800bffe:	0100      	lsleq	r0, r0, #4
 800c000:	3304      	addeq	r3, #4
 800c002:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c006:	bf04      	itt	eq
 800c008:	0080      	lsleq	r0, r0, #2
 800c00a:	3302      	addeq	r3, #2
 800c00c:	2800      	cmp	r0, #0
 800c00e:	db05      	blt.n	800c01c <__hi0bits+0x38>
 800c010:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c014:	f103 0301 	add.w	r3, r3, #1
 800c018:	bf08      	it	eq
 800c01a:	2320      	moveq	r3, #32
 800c01c:	4618      	mov	r0, r3
 800c01e:	4770      	bx	lr
 800c020:	2300      	movs	r3, #0
 800c022:	e7e4      	b.n	800bfee <__hi0bits+0xa>

0800c024 <__lo0bits>:
 800c024:	6803      	ldr	r3, [r0, #0]
 800c026:	f013 0207 	ands.w	r2, r3, #7
 800c02a:	4601      	mov	r1, r0
 800c02c:	d00b      	beq.n	800c046 <__lo0bits+0x22>
 800c02e:	07da      	lsls	r2, r3, #31
 800c030:	d423      	bmi.n	800c07a <__lo0bits+0x56>
 800c032:	0798      	lsls	r0, r3, #30
 800c034:	bf49      	itett	mi
 800c036:	085b      	lsrmi	r3, r3, #1
 800c038:	089b      	lsrpl	r3, r3, #2
 800c03a:	2001      	movmi	r0, #1
 800c03c:	600b      	strmi	r3, [r1, #0]
 800c03e:	bf5c      	itt	pl
 800c040:	600b      	strpl	r3, [r1, #0]
 800c042:	2002      	movpl	r0, #2
 800c044:	4770      	bx	lr
 800c046:	b298      	uxth	r0, r3
 800c048:	b9a8      	cbnz	r0, 800c076 <__lo0bits+0x52>
 800c04a:	0c1b      	lsrs	r3, r3, #16
 800c04c:	2010      	movs	r0, #16
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	b90a      	cbnz	r2, 800c056 <__lo0bits+0x32>
 800c052:	3008      	adds	r0, #8
 800c054:	0a1b      	lsrs	r3, r3, #8
 800c056:	071a      	lsls	r2, r3, #28
 800c058:	bf04      	itt	eq
 800c05a:	091b      	lsreq	r3, r3, #4
 800c05c:	3004      	addeq	r0, #4
 800c05e:	079a      	lsls	r2, r3, #30
 800c060:	bf04      	itt	eq
 800c062:	089b      	lsreq	r3, r3, #2
 800c064:	3002      	addeq	r0, #2
 800c066:	07da      	lsls	r2, r3, #31
 800c068:	d403      	bmi.n	800c072 <__lo0bits+0x4e>
 800c06a:	085b      	lsrs	r3, r3, #1
 800c06c:	f100 0001 	add.w	r0, r0, #1
 800c070:	d005      	beq.n	800c07e <__lo0bits+0x5a>
 800c072:	600b      	str	r3, [r1, #0]
 800c074:	4770      	bx	lr
 800c076:	4610      	mov	r0, r2
 800c078:	e7e9      	b.n	800c04e <__lo0bits+0x2a>
 800c07a:	2000      	movs	r0, #0
 800c07c:	4770      	bx	lr
 800c07e:	2020      	movs	r0, #32
 800c080:	4770      	bx	lr
	...

0800c084 <__i2b>:
 800c084:	b510      	push	{r4, lr}
 800c086:	460c      	mov	r4, r1
 800c088:	2101      	movs	r1, #1
 800c08a:	f7ff ff03 	bl	800be94 <_Balloc>
 800c08e:	4602      	mov	r2, r0
 800c090:	b928      	cbnz	r0, 800c09e <__i2b+0x1a>
 800c092:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <__i2b+0x24>)
 800c094:	4805      	ldr	r0, [pc, #20]	; (800c0ac <__i2b+0x28>)
 800c096:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c09a:	f001 f80d 	bl	800d0b8 <__assert_func>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	6144      	str	r4, [r0, #20]
 800c0a2:	6103      	str	r3, [r0, #16]
 800c0a4:	bd10      	pop	{r4, pc}
 800c0a6:	bf00      	nop
 800c0a8:	0800efbe 	.word	0x0800efbe
 800c0ac:	0800efcf 	.word	0x0800efcf

0800c0b0 <__multiply>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	4691      	mov	r9, r2
 800c0b6:	690a      	ldr	r2, [r1, #16]
 800c0b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	bfb8      	it	lt
 800c0c0:	460b      	movlt	r3, r1
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	bfbc      	itt	lt
 800c0c6:	464c      	movlt	r4, r9
 800c0c8:	4699      	movlt	r9, r3
 800c0ca:	6927      	ldr	r7, [r4, #16]
 800c0cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c0d0:	68a3      	ldr	r3, [r4, #8]
 800c0d2:	6861      	ldr	r1, [r4, #4]
 800c0d4:	eb07 060a 	add.w	r6, r7, sl
 800c0d8:	42b3      	cmp	r3, r6
 800c0da:	b085      	sub	sp, #20
 800c0dc:	bfb8      	it	lt
 800c0de:	3101      	addlt	r1, #1
 800c0e0:	f7ff fed8 	bl	800be94 <_Balloc>
 800c0e4:	b930      	cbnz	r0, 800c0f4 <__multiply+0x44>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	4b44      	ldr	r3, [pc, #272]	; (800c1fc <__multiply+0x14c>)
 800c0ea:	4845      	ldr	r0, [pc, #276]	; (800c200 <__multiply+0x150>)
 800c0ec:	f240 115d 	movw	r1, #349	; 0x15d
 800c0f0:	f000 ffe2 	bl	800d0b8 <__assert_func>
 800c0f4:	f100 0514 	add.w	r5, r0, #20
 800c0f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0fc:	462b      	mov	r3, r5
 800c0fe:	2200      	movs	r2, #0
 800c100:	4543      	cmp	r3, r8
 800c102:	d321      	bcc.n	800c148 <__multiply+0x98>
 800c104:	f104 0314 	add.w	r3, r4, #20
 800c108:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c10c:	f109 0314 	add.w	r3, r9, #20
 800c110:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c114:	9202      	str	r2, [sp, #8]
 800c116:	1b3a      	subs	r2, r7, r4
 800c118:	3a15      	subs	r2, #21
 800c11a:	f022 0203 	bic.w	r2, r2, #3
 800c11e:	3204      	adds	r2, #4
 800c120:	f104 0115 	add.w	r1, r4, #21
 800c124:	428f      	cmp	r7, r1
 800c126:	bf38      	it	cc
 800c128:	2204      	movcc	r2, #4
 800c12a:	9201      	str	r2, [sp, #4]
 800c12c:	9a02      	ldr	r2, [sp, #8]
 800c12e:	9303      	str	r3, [sp, #12]
 800c130:	429a      	cmp	r2, r3
 800c132:	d80c      	bhi.n	800c14e <__multiply+0x9e>
 800c134:	2e00      	cmp	r6, #0
 800c136:	dd03      	ble.n	800c140 <__multiply+0x90>
 800c138:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d05a      	beq.n	800c1f6 <__multiply+0x146>
 800c140:	6106      	str	r6, [r0, #16]
 800c142:	b005      	add	sp, #20
 800c144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c148:	f843 2b04 	str.w	r2, [r3], #4
 800c14c:	e7d8      	b.n	800c100 <__multiply+0x50>
 800c14e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c152:	f1ba 0f00 	cmp.w	sl, #0
 800c156:	d024      	beq.n	800c1a2 <__multiply+0xf2>
 800c158:	f104 0e14 	add.w	lr, r4, #20
 800c15c:	46a9      	mov	r9, r5
 800c15e:	f04f 0c00 	mov.w	ip, #0
 800c162:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c166:	f8d9 1000 	ldr.w	r1, [r9]
 800c16a:	fa1f fb82 	uxth.w	fp, r2
 800c16e:	b289      	uxth	r1, r1
 800c170:	fb0a 110b 	mla	r1, sl, fp, r1
 800c174:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c178:	f8d9 2000 	ldr.w	r2, [r9]
 800c17c:	4461      	add	r1, ip
 800c17e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c182:	fb0a c20b 	mla	r2, sl, fp, ip
 800c186:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c18a:	b289      	uxth	r1, r1
 800c18c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c190:	4577      	cmp	r7, lr
 800c192:	f849 1b04 	str.w	r1, [r9], #4
 800c196:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c19a:	d8e2      	bhi.n	800c162 <__multiply+0xb2>
 800c19c:	9a01      	ldr	r2, [sp, #4]
 800c19e:	f845 c002 	str.w	ip, [r5, r2]
 800c1a2:	9a03      	ldr	r2, [sp, #12]
 800c1a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	f1b9 0f00 	cmp.w	r9, #0
 800c1ae:	d020      	beq.n	800c1f2 <__multiply+0x142>
 800c1b0:	6829      	ldr	r1, [r5, #0]
 800c1b2:	f104 0c14 	add.w	ip, r4, #20
 800c1b6:	46ae      	mov	lr, r5
 800c1b8:	f04f 0a00 	mov.w	sl, #0
 800c1bc:	f8bc b000 	ldrh.w	fp, [ip]
 800c1c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c1c4:	fb09 220b 	mla	r2, r9, fp, r2
 800c1c8:	4492      	add	sl, r2
 800c1ca:	b289      	uxth	r1, r1
 800c1cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c1d0:	f84e 1b04 	str.w	r1, [lr], #4
 800c1d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c1d8:	f8be 1000 	ldrh.w	r1, [lr]
 800c1dc:	0c12      	lsrs	r2, r2, #16
 800c1de:	fb09 1102 	mla	r1, r9, r2, r1
 800c1e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c1e6:	4567      	cmp	r7, ip
 800c1e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1ec:	d8e6      	bhi.n	800c1bc <__multiply+0x10c>
 800c1ee:	9a01      	ldr	r2, [sp, #4]
 800c1f0:	50a9      	str	r1, [r5, r2]
 800c1f2:	3504      	adds	r5, #4
 800c1f4:	e79a      	b.n	800c12c <__multiply+0x7c>
 800c1f6:	3e01      	subs	r6, #1
 800c1f8:	e79c      	b.n	800c134 <__multiply+0x84>
 800c1fa:	bf00      	nop
 800c1fc:	0800efbe 	.word	0x0800efbe
 800c200:	0800efcf 	.word	0x0800efcf

0800c204 <__pow5mult>:
 800c204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c208:	4615      	mov	r5, r2
 800c20a:	f012 0203 	ands.w	r2, r2, #3
 800c20e:	4606      	mov	r6, r0
 800c210:	460f      	mov	r7, r1
 800c212:	d007      	beq.n	800c224 <__pow5mult+0x20>
 800c214:	4c25      	ldr	r4, [pc, #148]	; (800c2ac <__pow5mult+0xa8>)
 800c216:	3a01      	subs	r2, #1
 800c218:	2300      	movs	r3, #0
 800c21a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c21e:	f7ff fe9b 	bl	800bf58 <__multadd>
 800c222:	4607      	mov	r7, r0
 800c224:	10ad      	asrs	r5, r5, #2
 800c226:	d03d      	beq.n	800c2a4 <__pow5mult+0xa0>
 800c228:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c22a:	b97c      	cbnz	r4, 800c24c <__pow5mult+0x48>
 800c22c:	2010      	movs	r0, #16
 800c22e:	f7fe f8a9 	bl	800a384 <malloc>
 800c232:	4602      	mov	r2, r0
 800c234:	6270      	str	r0, [r6, #36]	; 0x24
 800c236:	b928      	cbnz	r0, 800c244 <__pow5mult+0x40>
 800c238:	4b1d      	ldr	r3, [pc, #116]	; (800c2b0 <__pow5mult+0xac>)
 800c23a:	481e      	ldr	r0, [pc, #120]	; (800c2b4 <__pow5mult+0xb0>)
 800c23c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c240:	f000 ff3a 	bl	800d0b8 <__assert_func>
 800c244:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c248:	6004      	str	r4, [r0, #0]
 800c24a:	60c4      	str	r4, [r0, #12]
 800c24c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c250:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c254:	b94c      	cbnz	r4, 800c26a <__pow5mult+0x66>
 800c256:	f240 2171 	movw	r1, #625	; 0x271
 800c25a:	4630      	mov	r0, r6
 800c25c:	f7ff ff12 	bl	800c084 <__i2b>
 800c260:	2300      	movs	r3, #0
 800c262:	f8c8 0008 	str.w	r0, [r8, #8]
 800c266:	4604      	mov	r4, r0
 800c268:	6003      	str	r3, [r0, #0]
 800c26a:	f04f 0900 	mov.w	r9, #0
 800c26e:	07eb      	lsls	r3, r5, #31
 800c270:	d50a      	bpl.n	800c288 <__pow5mult+0x84>
 800c272:	4639      	mov	r1, r7
 800c274:	4622      	mov	r2, r4
 800c276:	4630      	mov	r0, r6
 800c278:	f7ff ff1a 	bl	800c0b0 <__multiply>
 800c27c:	4639      	mov	r1, r7
 800c27e:	4680      	mov	r8, r0
 800c280:	4630      	mov	r0, r6
 800c282:	f7ff fe47 	bl	800bf14 <_Bfree>
 800c286:	4647      	mov	r7, r8
 800c288:	106d      	asrs	r5, r5, #1
 800c28a:	d00b      	beq.n	800c2a4 <__pow5mult+0xa0>
 800c28c:	6820      	ldr	r0, [r4, #0]
 800c28e:	b938      	cbnz	r0, 800c2a0 <__pow5mult+0x9c>
 800c290:	4622      	mov	r2, r4
 800c292:	4621      	mov	r1, r4
 800c294:	4630      	mov	r0, r6
 800c296:	f7ff ff0b 	bl	800c0b0 <__multiply>
 800c29a:	6020      	str	r0, [r4, #0]
 800c29c:	f8c0 9000 	str.w	r9, [r0]
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	e7e4      	b.n	800c26e <__pow5mult+0x6a>
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2aa:	bf00      	nop
 800c2ac:	0800f120 	.word	0x0800f120
 800c2b0:	0800ef4c 	.word	0x0800ef4c
 800c2b4:	0800efcf 	.word	0x0800efcf

0800c2b8 <__lshift>:
 800c2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2bc:	460c      	mov	r4, r1
 800c2be:	6849      	ldr	r1, [r1, #4]
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2c6:	68a3      	ldr	r3, [r4, #8]
 800c2c8:	4607      	mov	r7, r0
 800c2ca:	4691      	mov	r9, r2
 800c2cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2d0:	f108 0601 	add.w	r6, r8, #1
 800c2d4:	42b3      	cmp	r3, r6
 800c2d6:	db0b      	blt.n	800c2f0 <__lshift+0x38>
 800c2d8:	4638      	mov	r0, r7
 800c2da:	f7ff fddb 	bl	800be94 <_Balloc>
 800c2de:	4605      	mov	r5, r0
 800c2e0:	b948      	cbnz	r0, 800c2f6 <__lshift+0x3e>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	4b2a      	ldr	r3, [pc, #168]	; (800c390 <__lshift+0xd8>)
 800c2e6:	482b      	ldr	r0, [pc, #172]	; (800c394 <__lshift+0xdc>)
 800c2e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c2ec:	f000 fee4 	bl	800d0b8 <__assert_func>
 800c2f0:	3101      	adds	r1, #1
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	e7ee      	b.n	800c2d4 <__lshift+0x1c>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	f100 0114 	add.w	r1, r0, #20
 800c2fc:	f100 0210 	add.w	r2, r0, #16
 800c300:	4618      	mov	r0, r3
 800c302:	4553      	cmp	r3, sl
 800c304:	db37      	blt.n	800c376 <__lshift+0xbe>
 800c306:	6920      	ldr	r0, [r4, #16]
 800c308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c30c:	f104 0314 	add.w	r3, r4, #20
 800c310:	f019 091f 	ands.w	r9, r9, #31
 800c314:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c318:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c31c:	d02f      	beq.n	800c37e <__lshift+0xc6>
 800c31e:	f1c9 0e20 	rsb	lr, r9, #32
 800c322:	468a      	mov	sl, r1
 800c324:	f04f 0c00 	mov.w	ip, #0
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	fa02 f209 	lsl.w	r2, r2, r9
 800c32e:	ea42 020c 	orr.w	r2, r2, ip
 800c332:	f84a 2b04 	str.w	r2, [sl], #4
 800c336:	f853 2b04 	ldr.w	r2, [r3], #4
 800c33a:	4298      	cmp	r0, r3
 800c33c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c340:	d8f2      	bhi.n	800c328 <__lshift+0x70>
 800c342:	1b03      	subs	r3, r0, r4
 800c344:	3b15      	subs	r3, #21
 800c346:	f023 0303 	bic.w	r3, r3, #3
 800c34a:	3304      	adds	r3, #4
 800c34c:	f104 0215 	add.w	r2, r4, #21
 800c350:	4290      	cmp	r0, r2
 800c352:	bf38      	it	cc
 800c354:	2304      	movcc	r3, #4
 800c356:	f841 c003 	str.w	ip, [r1, r3]
 800c35a:	f1bc 0f00 	cmp.w	ip, #0
 800c35e:	d001      	beq.n	800c364 <__lshift+0xac>
 800c360:	f108 0602 	add.w	r6, r8, #2
 800c364:	3e01      	subs	r6, #1
 800c366:	4638      	mov	r0, r7
 800c368:	612e      	str	r6, [r5, #16]
 800c36a:	4621      	mov	r1, r4
 800c36c:	f7ff fdd2 	bl	800bf14 <_Bfree>
 800c370:	4628      	mov	r0, r5
 800c372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c376:	f842 0f04 	str.w	r0, [r2, #4]!
 800c37a:	3301      	adds	r3, #1
 800c37c:	e7c1      	b.n	800c302 <__lshift+0x4a>
 800c37e:	3904      	subs	r1, #4
 800c380:	f853 2b04 	ldr.w	r2, [r3], #4
 800c384:	f841 2f04 	str.w	r2, [r1, #4]!
 800c388:	4298      	cmp	r0, r3
 800c38a:	d8f9      	bhi.n	800c380 <__lshift+0xc8>
 800c38c:	e7ea      	b.n	800c364 <__lshift+0xac>
 800c38e:	bf00      	nop
 800c390:	0800efbe 	.word	0x0800efbe
 800c394:	0800efcf 	.word	0x0800efcf

0800c398 <__mcmp>:
 800c398:	b530      	push	{r4, r5, lr}
 800c39a:	6902      	ldr	r2, [r0, #16]
 800c39c:	690c      	ldr	r4, [r1, #16]
 800c39e:	1b12      	subs	r2, r2, r4
 800c3a0:	d10e      	bne.n	800c3c0 <__mcmp+0x28>
 800c3a2:	f100 0314 	add.w	r3, r0, #20
 800c3a6:	3114      	adds	r1, #20
 800c3a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c3ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c3b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c3b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c3b8:	42a5      	cmp	r5, r4
 800c3ba:	d003      	beq.n	800c3c4 <__mcmp+0x2c>
 800c3bc:	d305      	bcc.n	800c3ca <__mcmp+0x32>
 800c3be:	2201      	movs	r2, #1
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	bd30      	pop	{r4, r5, pc}
 800c3c4:	4283      	cmp	r3, r0
 800c3c6:	d3f3      	bcc.n	800c3b0 <__mcmp+0x18>
 800c3c8:	e7fa      	b.n	800c3c0 <__mcmp+0x28>
 800c3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ce:	e7f7      	b.n	800c3c0 <__mcmp+0x28>

0800c3d0 <__mdiff>:
 800c3d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	4611      	mov	r1, r2
 800c3da:	4620      	mov	r0, r4
 800c3dc:	4690      	mov	r8, r2
 800c3de:	f7ff ffdb 	bl	800c398 <__mcmp>
 800c3e2:	1e05      	subs	r5, r0, #0
 800c3e4:	d110      	bne.n	800c408 <__mdiff+0x38>
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f7ff fd53 	bl	800be94 <_Balloc>
 800c3ee:	b930      	cbnz	r0, 800c3fe <__mdiff+0x2e>
 800c3f0:	4b3a      	ldr	r3, [pc, #232]	; (800c4dc <__mdiff+0x10c>)
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	f240 2132 	movw	r1, #562	; 0x232
 800c3f8:	4839      	ldr	r0, [pc, #228]	; (800c4e0 <__mdiff+0x110>)
 800c3fa:	f000 fe5d 	bl	800d0b8 <__assert_func>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c408:	bfa4      	itt	ge
 800c40a:	4643      	movge	r3, r8
 800c40c:	46a0      	movge	r8, r4
 800c40e:	4630      	mov	r0, r6
 800c410:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c414:	bfa6      	itte	ge
 800c416:	461c      	movge	r4, r3
 800c418:	2500      	movge	r5, #0
 800c41a:	2501      	movlt	r5, #1
 800c41c:	f7ff fd3a 	bl	800be94 <_Balloc>
 800c420:	b920      	cbnz	r0, 800c42c <__mdiff+0x5c>
 800c422:	4b2e      	ldr	r3, [pc, #184]	; (800c4dc <__mdiff+0x10c>)
 800c424:	4602      	mov	r2, r0
 800c426:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c42a:	e7e5      	b.n	800c3f8 <__mdiff+0x28>
 800c42c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c430:	6926      	ldr	r6, [r4, #16]
 800c432:	60c5      	str	r5, [r0, #12]
 800c434:	f104 0914 	add.w	r9, r4, #20
 800c438:	f108 0514 	add.w	r5, r8, #20
 800c43c:	f100 0e14 	add.w	lr, r0, #20
 800c440:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c444:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c448:	f108 0210 	add.w	r2, r8, #16
 800c44c:	46f2      	mov	sl, lr
 800c44e:	2100      	movs	r1, #0
 800c450:	f859 3b04 	ldr.w	r3, [r9], #4
 800c454:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c458:	fa1f f883 	uxth.w	r8, r3
 800c45c:	fa11 f18b 	uxtah	r1, r1, fp
 800c460:	0c1b      	lsrs	r3, r3, #16
 800c462:	eba1 0808 	sub.w	r8, r1, r8
 800c466:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c46a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c46e:	fa1f f888 	uxth.w	r8, r8
 800c472:	1419      	asrs	r1, r3, #16
 800c474:	454e      	cmp	r6, r9
 800c476:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c47a:	f84a 3b04 	str.w	r3, [sl], #4
 800c47e:	d8e7      	bhi.n	800c450 <__mdiff+0x80>
 800c480:	1b33      	subs	r3, r6, r4
 800c482:	3b15      	subs	r3, #21
 800c484:	f023 0303 	bic.w	r3, r3, #3
 800c488:	3304      	adds	r3, #4
 800c48a:	3415      	adds	r4, #21
 800c48c:	42a6      	cmp	r6, r4
 800c48e:	bf38      	it	cc
 800c490:	2304      	movcc	r3, #4
 800c492:	441d      	add	r5, r3
 800c494:	4473      	add	r3, lr
 800c496:	469e      	mov	lr, r3
 800c498:	462e      	mov	r6, r5
 800c49a:	4566      	cmp	r6, ip
 800c49c:	d30e      	bcc.n	800c4bc <__mdiff+0xec>
 800c49e:	f10c 0203 	add.w	r2, ip, #3
 800c4a2:	1b52      	subs	r2, r2, r5
 800c4a4:	f022 0203 	bic.w	r2, r2, #3
 800c4a8:	3d03      	subs	r5, #3
 800c4aa:	45ac      	cmp	ip, r5
 800c4ac:	bf38      	it	cc
 800c4ae:	2200      	movcc	r2, #0
 800c4b0:	441a      	add	r2, r3
 800c4b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c4b6:	b17b      	cbz	r3, 800c4d8 <__mdiff+0x108>
 800c4b8:	6107      	str	r7, [r0, #16]
 800c4ba:	e7a3      	b.n	800c404 <__mdiff+0x34>
 800c4bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c4c0:	fa11 f288 	uxtah	r2, r1, r8
 800c4c4:	1414      	asrs	r4, r2, #16
 800c4c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c4ca:	b292      	uxth	r2, r2
 800c4cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c4d0:	f84e 2b04 	str.w	r2, [lr], #4
 800c4d4:	1421      	asrs	r1, r4, #16
 800c4d6:	e7e0      	b.n	800c49a <__mdiff+0xca>
 800c4d8:	3f01      	subs	r7, #1
 800c4da:	e7ea      	b.n	800c4b2 <__mdiff+0xe2>
 800c4dc:	0800efbe 	.word	0x0800efbe
 800c4e0:	0800efcf 	.word	0x0800efcf

0800c4e4 <__d2b>:
 800c4e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4e8:	4689      	mov	r9, r1
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	ec57 6b10 	vmov	r6, r7, d0
 800c4f0:	4690      	mov	r8, r2
 800c4f2:	f7ff fccf 	bl	800be94 <_Balloc>
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	b930      	cbnz	r0, 800c508 <__d2b+0x24>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	4b25      	ldr	r3, [pc, #148]	; (800c594 <__d2b+0xb0>)
 800c4fe:	4826      	ldr	r0, [pc, #152]	; (800c598 <__d2b+0xb4>)
 800c500:	f240 310a 	movw	r1, #778	; 0x30a
 800c504:	f000 fdd8 	bl	800d0b8 <__assert_func>
 800c508:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c50c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c510:	bb35      	cbnz	r5, 800c560 <__d2b+0x7c>
 800c512:	2e00      	cmp	r6, #0
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	d028      	beq.n	800c56a <__d2b+0x86>
 800c518:	4668      	mov	r0, sp
 800c51a:	9600      	str	r6, [sp, #0]
 800c51c:	f7ff fd82 	bl	800c024 <__lo0bits>
 800c520:	9900      	ldr	r1, [sp, #0]
 800c522:	b300      	cbz	r0, 800c566 <__d2b+0x82>
 800c524:	9a01      	ldr	r2, [sp, #4]
 800c526:	f1c0 0320 	rsb	r3, r0, #32
 800c52a:	fa02 f303 	lsl.w	r3, r2, r3
 800c52e:	430b      	orrs	r3, r1
 800c530:	40c2      	lsrs	r2, r0
 800c532:	6163      	str	r3, [r4, #20]
 800c534:	9201      	str	r2, [sp, #4]
 800c536:	9b01      	ldr	r3, [sp, #4]
 800c538:	61a3      	str	r3, [r4, #24]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	bf14      	ite	ne
 800c53e:	2202      	movne	r2, #2
 800c540:	2201      	moveq	r2, #1
 800c542:	6122      	str	r2, [r4, #16]
 800c544:	b1d5      	cbz	r5, 800c57c <__d2b+0x98>
 800c546:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c54a:	4405      	add	r5, r0
 800c54c:	f8c9 5000 	str.w	r5, [r9]
 800c550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c554:	f8c8 0000 	str.w	r0, [r8]
 800c558:	4620      	mov	r0, r4
 800c55a:	b003      	add	sp, #12
 800c55c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c564:	e7d5      	b.n	800c512 <__d2b+0x2e>
 800c566:	6161      	str	r1, [r4, #20]
 800c568:	e7e5      	b.n	800c536 <__d2b+0x52>
 800c56a:	a801      	add	r0, sp, #4
 800c56c:	f7ff fd5a 	bl	800c024 <__lo0bits>
 800c570:	9b01      	ldr	r3, [sp, #4]
 800c572:	6163      	str	r3, [r4, #20]
 800c574:	2201      	movs	r2, #1
 800c576:	6122      	str	r2, [r4, #16]
 800c578:	3020      	adds	r0, #32
 800c57a:	e7e3      	b.n	800c544 <__d2b+0x60>
 800c57c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c580:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c584:	f8c9 0000 	str.w	r0, [r9]
 800c588:	6918      	ldr	r0, [r3, #16]
 800c58a:	f7ff fd2b 	bl	800bfe4 <__hi0bits>
 800c58e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c592:	e7df      	b.n	800c554 <__d2b+0x70>
 800c594:	0800efbe 	.word	0x0800efbe
 800c598:	0800efcf 	.word	0x0800efcf

0800c59c <_calloc_r>:
 800c59c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c59e:	fba1 2402 	umull	r2, r4, r1, r2
 800c5a2:	b94c      	cbnz	r4, 800c5b8 <_calloc_r+0x1c>
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	9201      	str	r2, [sp, #4]
 800c5a8:	f7fd ff70 	bl	800a48c <_malloc_r>
 800c5ac:	9a01      	ldr	r2, [sp, #4]
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	b930      	cbnz	r0, 800c5c0 <_calloc_r+0x24>
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	b003      	add	sp, #12
 800c5b6:	bd30      	pop	{r4, r5, pc}
 800c5b8:	220c      	movs	r2, #12
 800c5ba:	6002      	str	r2, [r0, #0]
 800c5bc:	2500      	movs	r5, #0
 800c5be:	e7f8      	b.n	800c5b2 <_calloc_r+0x16>
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	f7fd feef 	bl	800a3a4 <memset>
 800c5c6:	e7f4      	b.n	800c5b2 <_calloc_r+0x16>

0800c5c8 <__ssputs_r>:
 800c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	688e      	ldr	r6, [r1, #8]
 800c5ce:	429e      	cmp	r6, r3
 800c5d0:	4682      	mov	sl, r0
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	4690      	mov	r8, r2
 800c5d6:	461f      	mov	r7, r3
 800c5d8:	d838      	bhi.n	800c64c <__ssputs_r+0x84>
 800c5da:	898a      	ldrh	r2, [r1, #12]
 800c5dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5e0:	d032      	beq.n	800c648 <__ssputs_r+0x80>
 800c5e2:	6825      	ldr	r5, [r4, #0]
 800c5e4:	6909      	ldr	r1, [r1, #16]
 800c5e6:	eba5 0901 	sub.w	r9, r5, r1
 800c5ea:	6965      	ldr	r5, [r4, #20]
 800c5ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	444b      	add	r3, r9
 800c5f8:	106d      	asrs	r5, r5, #1
 800c5fa:	429d      	cmp	r5, r3
 800c5fc:	bf38      	it	cc
 800c5fe:	461d      	movcc	r5, r3
 800c600:	0553      	lsls	r3, r2, #21
 800c602:	d531      	bpl.n	800c668 <__ssputs_r+0xa0>
 800c604:	4629      	mov	r1, r5
 800c606:	f7fd ff41 	bl	800a48c <_malloc_r>
 800c60a:	4606      	mov	r6, r0
 800c60c:	b950      	cbnz	r0, 800c624 <__ssputs_r+0x5c>
 800c60e:	230c      	movs	r3, #12
 800c610:	f8ca 3000 	str.w	r3, [sl]
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c624:	6921      	ldr	r1, [r4, #16]
 800c626:	464a      	mov	r2, r9
 800c628:	f7ff fc1a 	bl	800be60 <memcpy>
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c636:	81a3      	strh	r3, [r4, #12]
 800c638:	6126      	str	r6, [r4, #16]
 800c63a:	6165      	str	r5, [r4, #20]
 800c63c:	444e      	add	r6, r9
 800c63e:	eba5 0509 	sub.w	r5, r5, r9
 800c642:	6026      	str	r6, [r4, #0]
 800c644:	60a5      	str	r5, [r4, #8]
 800c646:	463e      	mov	r6, r7
 800c648:	42be      	cmp	r6, r7
 800c64a:	d900      	bls.n	800c64e <__ssputs_r+0x86>
 800c64c:	463e      	mov	r6, r7
 800c64e:	6820      	ldr	r0, [r4, #0]
 800c650:	4632      	mov	r2, r6
 800c652:	4641      	mov	r1, r8
 800c654:	f000 ff2c 	bl	800d4b0 <memmove>
 800c658:	68a3      	ldr	r3, [r4, #8]
 800c65a:	1b9b      	subs	r3, r3, r6
 800c65c:	60a3      	str	r3, [r4, #8]
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	4433      	add	r3, r6
 800c662:	6023      	str	r3, [r4, #0]
 800c664:	2000      	movs	r0, #0
 800c666:	e7db      	b.n	800c620 <__ssputs_r+0x58>
 800c668:	462a      	mov	r2, r5
 800c66a:	f000 ff3b 	bl	800d4e4 <_realloc_r>
 800c66e:	4606      	mov	r6, r0
 800c670:	2800      	cmp	r0, #0
 800c672:	d1e1      	bne.n	800c638 <__ssputs_r+0x70>
 800c674:	6921      	ldr	r1, [r4, #16]
 800c676:	4650      	mov	r0, sl
 800c678:	f7fd fe9c 	bl	800a3b4 <_free_r>
 800c67c:	e7c7      	b.n	800c60e <__ssputs_r+0x46>
	...

0800c680 <_svfiprintf_r>:
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	4698      	mov	r8, r3
 800c686:	898b      	ldrh	r3, [r1, #12]
 800c688:	061b      	lsls	r3, r3, #24
 800c68a:	b09d      	sub	sp, #116	; 0x74
 800c68c:	4607      	mov	r7, r0
 800c68e:	460d      	mov	r5, r1
 800c690:	4614      	mov	r4, r2
 800c692:	d50e      	bpl.n	800c6b2 <_svfiprintf_r+0x32>
 800c694:	690b      	ldr	r3, [r1, #16]
 800c696:	b963      	cbnz	r3, 800c6b2 <_svfiprintf_r+0x32>
 800c698:	2140      	movs	r1, #64	; 0x40
 800c69a:	f7fd fef7 	bl	800a48c <_malloc_r>
 800c69e:	6028      	str	r0, [r5, #0]
 800c6a0:	6128      	str	r0, [r5, #16]
 800c6a2:	b920      	cbnz	r0, 800c6ae <_svfiprintf_r+0x2e>
 800c6a4:	230c      	movs	r3, #12
 800c6a6:	603b      	str	r3, [r7, #0]
 800c6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ac:	e0d1      	b.n	800c852 <_svfiprintf_r+0x1d2>
 800c6ae:	2340      	movs	r3, #64	; 0x40
 800c6b0:	616b      	str	r3, [r5, #20]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b6:	2320      	movs	r3, #32
 800c6b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c0:	2330      	movs	r3, #48	; 0x30
 800c6c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c86c <_svfiprintf_r+0x1ec>
 800c6c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ca:	f04f 0901 	mov.w	r9, #1
 800c6ce:	4623      	mov	r3, r4
 800c6d0:	469a      	mov	sl, r3
 800c6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d6:	b10a      	cbz	r2, 800c6dc <_svfiprintf_r+0x5c>
 800c6d8:	2a25      	cmp	r2, #37	; 0x25
 800c6da:	d1f9      	bne.n	800c6d0 <_svfiprintf_r+0x50>
 800c6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e0:	d00b      	beq.n	800c6fa <_svfiprintf_r+0x7a>
 800c6e2:	465b      	mov	r3, fp
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	f7ff ff6d 	bl	800c5c8 <__ssputs_r>
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	f000 80aa 	beq.w	800c848 <_svfiprintf_r+0x1c8>
 800c6f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f6:	445a      	add	r2, fp
 800c6f8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 80a2 	beq.w	800c848 <_svfiprintf_r+0x1c8>
 800c704:	2300      	movs	r3, #0
 800c706:	f04f 32ff 	mov.w	r2, #4294967295
 800c70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c70e:	f10a 0a01 	add.w	sl, sl, #1
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	9307      	str	r3, [sp, #28]
 800c716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c71a:	931a      	str	r3, [sp, #104]	; 0x68
 800c71c:	4654      	mov	r4, sl
 800c71e:	2205      	movs	r2, #5
 800c720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c724:	4851      	ldr	r0, [pc, #324]	; (800c86c <_svfiprintf_r+0x1ec>)
 800c726:	f7f3 fd73 	bl	8000210 <memchr>
 800c72a:	9a04      	ldr	r2, [sp, #16]
 800c72c:	b9d8      	cbnz	r0, 800c766 <_svfiprintf_r+0xe6>
 800c72e:	06d0      	lsls	r0, r2, #27
 800c730:	bf44      	itt	mi
 800c732:	2320      	movmi	r3, #32
 800c734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c738:	0711      	lsls	r1, r2, #28
 800c73a:	bf44      	itt	mi
 800c73c:	232b      	movmi	r3, #43	; 0x2b
 800c73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c742:	f89a 3000 	ldrb.w	r3, [sl]
 800c746:	2b2a      	cmp	r3, #42	; 0x2a
 800c748:	d015      	beq.n	800c776 <_svfiprintf_r+0xf6>
 800c74a:	9a07      	ldr	r2, [sp, #28]
 800c74c:	4654      	mov	r4, sl
 800c74e:	2000      	movs	r0, #0
 800c750:	f04f 0c0a 	mov.w	ip, #10
 800c754:	4621      	mov	r1, r4
 800c756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c75a:	3b30      	subs	r3, #48	; 0x30
 800c75c:	2b09      	cmp	r3, #9
 800c75e:	d94e      	bls.n	800c7fe <_svfiprintf_r+0x17e>
 800c760:	b1b0      	cbz	r0, 800c790 <_svfiprintf_r+0x110>
 800c762:	9207      	str	r2, [sp, #28]
 800c764:	e014      	b.n	800c790 <_svfiprintf_r+0x110>
 800c766:	eba0 0308 	sub.w	r3, r0, r8
 800c76a:	fa09 f303 	lsl.w	r3, r9, r3
 800c76e:	4313      	orrs	r3, r2
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	46a2      	mov	sl, r4
 800c774:	e7d2      	b.n	800c71c <_svfiprintf_r+0x9c>
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	1d19      	adds	r1, r3, #4
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	9103      	str	r1, [sp, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	bfbb      	ittet	lt
 800c782:	425b      	neglt	r3, r3
 800c784:	f042 0202 	orrlt.w	r2, r2, #2
 800c788:	9307      	strge	r3, [sp, #28]
 800c78a:	9307      	strlt	r3, [sp, #28]
 800c78c:	bfb8      	it	lt
 800c78e:	9204      	strlt	r2, [sp, #16]
 800c790:	7823      	ldrb	r3, [r4, #0]
 800c792:	2b2e      	cmp	r3, #46	; 0x2e
 800c794:	d10c      	bne.n	800c7b0 <_svfiprintf_r+0x130>
 800c796:	7863      	ldrb	r3, [r4, #1]
 800c798:	2b2a      	cmp	r3, #42	; 0x2a
 800c79a:	d135      	bne.n	800c808 <_svfiprintf_r+0x188>
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	1d1a      	adds	r2, r3, #4
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	9203      	str	r2, [sp, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	bfb8      	it	lt
 800c7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7ac:	3402      	adds	r4, #2
 800c7ae:	9305      	str	r3, [sp, #20]
 800c7b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c87c <_svfiprintf_r+0x1fc>
 800c7b4:	7821      	ldrb	r1, [r4, #0]
 800c7b6:	2203      	movs	r2, #3
 800c7b8:	4650      	mov	r0, sl
 800c7ba:	f7f3 fd29 	bl	8000210 <memchr>
 800c7be:	b140      	cbz	r0, 800c7d2 <_svfiprintf_r+0x152>
 800c7c0:	2340      	movs	r3, #64	; 0x40
 800c7c2:	eba0 000a 	sub.w	r0, r0, sl
 800c7c6:	fa03 f000 	lsl.w	r0, r3, r0
 800c7ca:	9b04      	ldr	r3, [sp, #16]
 800c7cc:	4303      	orrs	r3, r0
 800c7ce:	3401      	adds	r4, #1
 800c7d0:	9304      	str	r3, [sp, #16]
 800c7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d6:	4826      	ldr	r0, [pc, #152]	; (800c870 <_svfiprintf_r+0x1f0>)
 800c7d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7dc:	2206      	movs	r2, #6
 800c7de:	f7f3 fd17 	bl	8000210 <memchr>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d038      	beq.n	800c858 <_svfiprintf_r+0x1d8>
 800c7e6:	4b23      	ldr	r3, [pc, #140]	; (800c874 <_svfiprintf_r+0x1f4>)
 800c7e8:	bb1b      	cbnz	r3, 800c832 <_svfiprintf_r+0x1b2>
 800c7ea:	9b03      	ldr	r3, [sp, #12]
 800c7ec:	3307      	adds	r3, #7
 800c7ee:	f023 0307 	bic.w	r3, r3, #7
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	9303      	str	r3, [sp, #12]
 800c7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f8:	4433      	add	r3, r6
 800c7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c7fc:	e767      	b.n	800c6ce <_svfiprintf_r+0x4e>
 800c7fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800c802:	460c      	mov	r4, r1
 800c804:	2001      	movs	r0, #1
 800c806:	e7a5      	b.n	800c754 <_svfiprintf_r+0xd4>
 800c808:	2300      	movs	r3, #0
 800c80a:	3401      	adds	r4, #1
 800c80c:	9305      	str	r3, [sp, #20]
 800c80e:	4619      	mov	r1, r3
 800c810:	f04f 0c0a 	mov.w	ip, #10
 800c814:	4620      	mov	r0, r4
 800c816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c81a:	3a30      	subs	r2, #48	; 0x30
 800c81c:	2a09      	cmp	r2, #9
 800c81e:	d903      	bls.n	800c828 <_svfiprintf_r+0x1a8>
 800c820:	2b00      	cmp	r3, #0
 800c822:	d0c5      	beq.n	800c7b0 <_svfiprintf_r+0x130>
 800c824:	9105      	str	r1, [sp, #20]
 800c826:	e7c3      	b.n	800c7b0 <_svfiprintf_r+0x130>
 800c828:	fb0c 2101 	mla	r1, ip, r1, r2
 800c82c:	4604      	mov	r4, r0
 800c82e:	2301      	movs	r3, #1
 800c830:	e7f0      	b.n	800c814 <_svfiprintf_r+0x194>
 800c832:	ab03      	add	r3, sp, #12
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	462a      	mov	r2, r5
 800c838:	4b0f      	ldr	r3, [pc, #60]	; (800c878 <_svfiprintf_r+0x1f8>)
 800c83a:	a904      	add	r1, sp, #16
 800c83c:	4638      	mov	r0, r7
 800c83e:	f7fd ff39 	bl	800a6b4 <_printf_float>
 800c842:	1c42      	adds	r2, r0, #1
 800c844:	4606      	mov	r6, r0
 800c846:	d1d6      	bne.n	800c7f6 <_svfiprintf_r+0x176>
 800c848:	89ab      	ldrh	r3, [r5, #12]
 800c84a:	065b      	lsls	r3, r3, #25
 800c84c:	f53f af2c 	bmi.w	800c6a8 <_svfiprintf_r+0x28>
 800c850:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c852:	b01d      	add	sp, #116	; 0x74
 800c854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c858:	ab03      	add	r3, sp, #12
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	462a      	mov	r2, r5
 800c85e:	4b06      	ldr	r3, [pc, #24]	; (800c878 <_svfiprintf_r+0x1f8>)
 800c860:	a904      	add	r1, sp, #16
 800c862:	4638      	mov	r0, r7
 800c864:	f7fe f9ca 	bl	800abfc <_printf_i>
 800c868:	e7eb      	b.n	800c842 <_svfiprintf_r+0x1c2>
 800c86a:	bf00      	nop
 800c86c:	0800f12c 	.word	0x0800f12c
 800c870:	0800f136 	.word	0x0800f136
 800c874:	0800a6b5 	.word	0x0800a6b5
 800c878:	0800c5c9 	.word	0x0800c5c9
 800c87c:	0800f132 	.word	0x0800f132

0800c880 <_sungetc_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	1c4b      	adds	r3, r1, #1
 800c884:	4614      	mov	r4, r2
 800c886:	d103      	bne.n	800c890 <_sungetc_r+0x10>
 800c888:	f04f 35ff 	mov.w	r5, #4294967295
 800c88c:	4628      	mov	r0, r5
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	8993      	ldrh	r3, [r2, #12]
 800c892:	f023 0320 	bic.w	r3, r3, #32
 800c896:	8193      	strh	r3, [r2, #12]
 800c898:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c89a:	6852      	ldr	r2, [r2, #4]
 800c89c:	b2cd      	uxtb	r5, r1
 800c89e:	b18b      	cbz	r3, 800c8c4 <_sungetc_r+0x44>
 800c8a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	dd08      	ble.n	800c8b8 <_sungetc_r+0x38>
 800c8a6:	6823      	ldr	r3, [r4, #0]
 800c8a8:	1e5a      	subs	r2, r3, #1
 800c8aa:	6022      	str	r2, [r4, #0]
 800c8ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c8b0:	6863      	ldr	r3, [r4, #4]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	6063      	str	r3, [r4, #4]
 800c8b6:	e7e9      	b.n	800c88c <_sungetc_r+0xc>
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	f000 fbc3 	bl	800d044 <__submore>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d0f1      	beq.n	800c8a6 <_sungetc_r+0x26>
 800c8c2:	e7e1      	b.n	800c888 <_sungetc_r+0x8>
 800c8c4:	6921      	ldr	r1, [r4, #16]
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	b151      	cbz	r1, 800c8e0 <_sungetc_r+0x60>
 800c8ca:	4299      	cmp	r1, r3
 800c8cc:	d208      	bcs.n	800c8e0 <_sungetc_r+0x60>
 800c8ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c8d2:	42a9      	cmp	r1, r5
 800c8d4:	d104      	bne.n	800c8e0 <_sungetc_r+0x60>
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	3201      	adds	r2, #1
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	6062      	str	r2, [r4, #4]
 800c8de:	e7d5      	b.n	800c88c <_sungetc_r+0xc>
 800c8e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c8e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c8ea:	2303      	movs	r3, #3
 800c8ec:	63a3      	str	r3, [r4, #56]	; 0x38
 800c8ee:	4623      	mov	r3, r4
 800c8f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e7dc      	b.n	800c8b4 <_sungetc_r+0x34>

0800c8fa <__ssrefill_r>:
 800c8fa:	b510      	push	{r4, lr}
 800c8fc:	460c      	mov	r4, r1
 800c8fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c900:	b169      	cbz	r1, 800c91e <__ssrefill_r+0x24>
 800c902:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c906:	4299      	cmp	r1, r3
 800c908:	d001      	beq.n	800c90e <__ssrefill_r+0x14>
 800c90a:	f7fd fd53 	bl	800a3b4 <_free_r>
 800c90e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c910:	6063      	str	r3, [r4, #4]
 800c912:	2000      	movs	r0, #0
 800c914:	6360      	str	r0, [r4, #52]	; 0x34
 800c916:	b113      	cbz	r3, 800c91e <__ssrefill_r+0x24>
 800c918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c91a:	6023      	str	r3, [r4, #0]
 800c91c:	bd10      	pop	{r4, pc}
 800c91e:	6923      	ldr	r3, [r4, #16]
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	2300      	movs	r3, #0
 800c924:	6063      	str	r3, [r4, #4]
 800c926:	89a3      	ldrh	r3, [r4, #12]
 800c928:	f043 0320 	orr.w	r3, r3, #32
 800c92c:	81a3      	strh	r3, [r4, #12]
 800c92e:	f04f 30ff 	mov.w	r0, #4294967295
 800c932:	e7f3      	b.n	800c91c <__ssrefill_r+0x22>

0800c934 <__ssvfiscanf_r>:
 800c934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c938:	460c      	mov	r4, r1
 800c93a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c93e:	2100      	movs	r1, #0
 800c940:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c944:	49a6      	ldr	r1, [pc, #664]	; (800cbe0 <__ssvfiscanf_r+0x2ac>)
 800c946:	91a0      	str	r1, [sp, #640]	; 0x280
 800c948:	f10d 0804 	add.w	r8, sp, #4
 800c94c:	49a5      	ldr	r1, [pc, #660]	; (800cbe4 <__ssvfiscanf_r+0x2b0>)
 800c94e:	4fa6      	ldr	r7, [pc, #664]	; (800cbe8 <__ssvfiscanf_r+0x2b4>)
 800c950:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cbec <__ssvfiscanf_r+0x2b8>
 800c954:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c958:	4606      	mov	r6, r0
 800c95a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	7813      	ldrb	r3, [r2, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	f000 815a 	beq.w	800cc1a <__ssvfiscanf_r+0x2e6>
 800c966:	5dd9      	ldrb	r1, [r3, r7]
 800c968:	f011 0108 	ands.w	r1, r1, #8
 800c96c:	f102 0501 	add.w	r5, r2, #1
 800c970:	d019      	beq.n	800c9a6 <__ssvfiscanf_r+0x72>
 800c972:	6863      	ldr	r3, [r4, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	dd0f      	ble.n	800c998 <__ssvfiscanf_r+0x64>
 800c978:	6823      	ldr	r3, [r4, #0]
 800c97a:	781a      	ldrb	r2, [r3, #0]
 800c97c:	5cba      	ldrb	r2, [r7, r2]
 800c97e:	0712      	lsls	r2, r2, #28
 800c980:	d401      	bmi.n	800c986 <__ssvfiscanf_r+0x52>
 800c982:	462a      	mov	r2, r5
 800c984:	e7eb      	b.n	800c95e <__ssvfiscanf_r+0x2a>
 800c986:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c988:	3201      	adds	r2, #1
 800c98a:	9245      	str	r2, [sp, #276]	; 0x114
 800c98c:	6862      	ldr	r2, [r4, #4]
 800c98e:	3301      	adds	r3, #1
 800c990:	3a01      	subs	r2, #1
 800c992:	6062      	str	r2, [r4, #4]
 800c994:	6023      	str	r3, [r4, #0]
 800c996:	e7ec      	b.n	800c972 <__ssvfiscanf_r+0x3e>
 800c998:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c99a:	4621      	mov	r1, r4
 800c99c:	4630      	mov	r0, r6
 800c99e:	4798      	blx	r3
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d0e9      	beq.n	800c978 <__ssvfiscanf_r+0x44>
 800c9a4:	e7ed      	b.n	800c982 <__ssvfiscanf_r+0x4e>
 800c9a6:	2b25      	cmp	r3, #37	; 0x25
 800c9a8:	d012      	beq.n	800c9d0 <__ssvfiscanf_r+0x9c>
 800c9aa:	469a      	mov	sl, r3
 800c9ac:	6863      	ldr	r3, [r4, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f340 8091 	ble.w	800cad6 <__ssvfiscanf_r+0x1a2>
 800c9b4:	6822      	ldr	r2, [r4, #0]
 800c9b6:	7813      	ldrb	r3, [r2, #0]
 800c9b8:	4553      	cmp	r3, sl
 800c9ba:	f040 812e 	bne.w	800cc1a <__ssvfiscanf_r+0x2e6>
 800c9be:	6863      	ldr	r3, [r4, #4]
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	6063      	str	r3, [r4, #4]
 800c9c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c9c6:	3201      	adds	r2, #1
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	6022      	str	r2, [r4, #0]
 800c9cc:	9345      	str	r3, [sp, #276]	; 0x114
 800c9ce:	e7d8      	b.n	800c982 <__ssvfiscanf_r+0x4e>
 800c9d0:	9141      	str	r1, [sp, #260]	; 0x104
 800c9d2:	9143      	str	r1, [sp, #268]	; 0x10c
 800c9d4:	7853      	ldrb	r3, [r2, #1]
 800c9d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9d8:	bf02      	ittt	eq
 800c9da:	2310      	moveq	r3, #16
 800c9dc:	1c95      	addeq	r5, r2, #2
 800c9de:	9341      	streq	r3, [sp, #260]	; 0x104
 800c9e0:	220a      	movs	r2, #10
 800c9e2:	46aa      	mov	sl, r5
 800c9e4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c9e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c9ec:	2b09      	cmp	r3, #9
 800c9ee:	d91d      	bls.n	800ca2c <__ssvfiscanf_r+0xf8>
 800c9f0:	487e      	ldr	r0, [pc, #504]	; (800cbec <__ssvfiscanf_r+0x2b8>)
 800c9f2:	2203      	movs	r2, #3
 800c9f4:	f7f3 fc0c 	bl	8000210 <memchr>
 800c9f8:	b140      	cbz	r0, 800ca0c <__ssvfiscanf_r+0xd8>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	eba0 0009 	sub.w	r0, r0, r9
 800ca00:	fa03 f000 	lsl.w	r0, r3, r0
 800ca04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca06:	4318      	orrs	r0, r3
 800ca08:	9041      	str	r0, [sp, #260]	; 0x104
 800ca0a:	4655      	mov	r5, sl
 800ca0c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ca10:	2b78      	cmp	r3, #120	; 0x78
 800ca12:	d806      	bhi.n	800ca22 <__ssvfiscanf_r+0xee>
 800ca14:	2b57      	cmp	r3, #87	; 0x57
 800ca16:	d810      	bhi.n	800ca3a <__ssvfiscanf_r+0x106>
 800ca18:	2b25      	cmp	r3, #37	; 0x25
 800ca1a:	d0c6      	beq.n	800c9aa <__ssvfiscanf_r+0x76>
 800ca1c:	d856      	bhi.n	800cacc <__ssvfiscanf_r+0x198>
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d064      	beq.n	800caec <__ssvfiscanf_r+0x1b8>
 800ca22:	2303      	movs	r3, #3
 800ca24:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca26:	230a      	movs	r3, #10
 800ca28:	9342      	str	r3, [sp, #264]	; 0x108
 800ca2a:	e071      	b.n	800cb10 <__ssvfiscanf_r+0x1dc>
 800ca2c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ca2e:	fb02 1103 	mla	r1, r2, r3, r1
 800ca32:	3930      	subs	r1, #48	; 0x30
 800ca34:	9143      	str	r1, [sp, #268]	; 0x10c
 800ca36:	4655      	mov	r5, sl
 800ca38:	e7d3      	b.n	800c9e2 <__ssvfiscanf_r+0xae>
 800ca3a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ca3e:	2a20      	cmp	r2, #32
 800ca40:	d8ef      	bhi.n	800ca22 <__ssvfiscanf_r+0xee>
 800ca42:	a101      	add	r1, pc, #4	; (adr r1, 800ca48 <__ssvfiscanf_r+0x114>)
 800ca44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca48:	0800cafb 	.word	0x0800cafb
 800ca4c:	0800ca23 	.word	0x0800ca23
 800ca50:	0800ca23 	.word	0x0800ca23
 800ca54:	0800cb59 	.word	0x0800cb59
 800ca58:	0800ca23 	.word	0x0800ca23
 800ca5c:	0800ca23 	.word	0x0800ca23
 800ca60:	0800ca23 	.word	0x0800ca23
 800ca64:	0800ca23 	.word	0x0800ca23
 800ca68:	0800ca23 	.word	0x0800ca23
 800ca6c:	0800ca23 	.word	0x0800ca23
 800ca70:	0800ca23 	.word	0x0800ca23
 800ca74:	0800cb6f 	.word	0x0800cb6f
 800ca78:	0800cb45 	.word	0x0800cb45
 800ca7c:	0800cad3 	.word	0x0800cad3
 800ca80:	0800cad3 	.word	0x0800cad3
 800ca84:	0800cad3 	.word	0x0800cad3
 800ca88:	0800ca23 	.word	0x0800ca23
 800ca8c:	0800cb49 	.word	0x0800cb49
 800ca90:	0800ca23 	.word	0x0800ca23
 800ca94:	0800ca23 	.word	0x0800ca23
 800ca98:	0800ca23 	.word	0x0800ca23
 800ca9c:	0800ca23 	.word	0x0800ca23
 800caa0:	0800cb7f 	.word	0x0800cb7f
 800caa4:	0800cb51 	.word	0x0800cb51
 800caa8:	0800caf3 	.word	0x0800caf3
 800caac:	0800ca23 	.word	0x0800ca23
 800cab0:	0800ca23 	.word	0x0800ca23
 800cab4:	0800cb7b 	.word	0x0800cb7b
 800cab8:	0800ca23 	.word	0x0800ca23
 800cabc:	0800cb45 	.word	0x0800cb45
 800cac0:	0800ca23 	.word	0x0800ca23
 800cac4:	0800ca23 	.word	0x0800ca23
 800cac8:	0800cafb 	.word	0x0800cafb
 800cacc:	3b45      	subs	r3, #69	; 0x45
 800cace:	2b02      	cmp	r3, #2
 800cad0:	d8a7      	bhi.n	800ca22 <__ssvfiscanf_r+0xee>
 800cad2:	2305      	movs	r3, #5
 800cad4:	e01b      	b.n	800cb0e <__ssvfiscanf_r+0x1da>
 800cad6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cad8:	4621      	mov	r1, r4
 800cada:	4630      	mov	r0, r6
 800cadc:	4798      	blx	r3
 800cade:	2800      	cmp	r0, #0
 800cae0:	f43f af68 	beq.w	800c9b4 <__ssvfiscanf_r+0x80>
 800cae4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cae6:	2800      	cmp	r0, #0
 800cae8:	f040 808d 	bne.w	800cc06 <__ssvfiscanf_r+0x2d2>
 800caec:	f04f 30ff 	mov.w	r0, #4294967295
 800caf0:	e08f      	b.n	800cc12 <__ssvfiscanf_r+0x2de>
 800caf2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800caf4:	f042 0220 	orr.w	r2, r2, #32
 800caf8:	9241      	str	r2, [sp, #260]	; 0x104
 800cafa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cafc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb00:	9241      	str	r2, [sp, #260]	; 0x104
 800cb02:	2210      	movs	r2, #16
 800cb04:	2b6f      	cmp	r3, #111	; 0x6f
 800cb06:	9242      	str	r2, [sp, #264]	; 0x108
 800cb08:	bf34      	ite	cc
 800cb0a:	2303      	movcc	r3, #3
 800cb0c:	2304      	movcs	r3, #4
 800cb0e:	9347      	str	r3, [sp, #284]	; 0x11c
 800cb10:	6863      	ldr	r3, [r4, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	dd42      	ble.n	800cb9c <__ssvfiscanf_r+0x268>
 800cb16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb18:	0659      	lsls	r1, r3, #25
 800cb1a:	d404      	bmi.n	800cb26 <__ssvfiscanf_r+0x1f2>
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	781a      	ldrb	r2, [r3, #0]
 800cb20:	5cba      	ldrb	r2, [r7, r2]
 800cb22:	0712      	lsls	r2, r2, #28
 800cb24:	d441      	bmi.n	800cbaa <__ssvfiscanf_r+0x276>
 800cb26:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cb28:	2b02      	cmp	r3, #2
 800cb2a:	dc50      	bgt.n	800cbce <__ssvfiscanf_r+0x29a>
 800cb2c:	466b      	mov	r3, sp
 800cb2e:	4622      	mov	r2, r4
 800cb30:	a941      	add	r1, sp, #260	; 0x104
 800cb32:	4630      	mov	r0, r6
 800cb34:	f000 f876 	bl	800cc24 <_scanf_chars>
 800cb38:	2801      	cmp	r0, #1
 800cb3a:	d06e      	beq.n	800cc1a <__ssvfiscanf_r+0x2e6>
 800cb3c:	2802      	cmp	r0, #2
 800cb3e:	f47f af20 	bne.w	800c982 <__ssvfiscanf_r+0x4e>
 800cb42:	e7cf      	b.n	800cae4 <__ssvfiscanf_r+0x1b0>
 800cb44:	220a      	movs	r2, #10
 800cb46:	e7dd      	b.n	800cb04 <__ssvfiscanf_r+0x1d0>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	9342      	str	r3, [sp, #264]	; 0x108
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e7de      	b.n	800cb0e <__ssvfiscanf_r+0x1da>
 800cb50:	2308      	movs	r3, #8
 800cb52:	9342      	str	r3, [sp, #264]	; 0x108
 800cb54:	2304      	movs	r3, #4
 800cb56:	e7da      	b.n	800cb0e <__ssvfiscanf_r+0x1da>
 800cb58:	4629      	mov	r1, r5
 800cb5a:	4640      	mov	r0, r8
 800cb5c:	f000 f9c6 	bl	800ceec <__sccl>
 800cb60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb66:	9341      	str	r3, [sp, #260]	; 0x104
 800cb68:	4605      	mov	r5, r0
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e7cf      	b.n	800cb0e <__ssvfiscanf_r+0x1da>
 800cb6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb74:	9341      	str	r3, [sp, #260]	; 0x104
 800cb76:	2300      	movs	r3, #0
 800cb78:	e7c9      	b.n	800cb0e <__ssvfiscanf_r+0x1da>
 800cb7a:	2302      	movs	r3, #2
 800cb7c:	e7c7      	b.n	800cb0e <__ssvfiscanf_r+0x1da>
 800cb7e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cb80:	06c3      	lsls	r3, r0, #27
 800cb82:	f53f aefe 	bmi.w	800c982 <__ssvfiscanf_r+0x4e>
 800cb86:	9b00      	ldr	r3, [sp, #0]
 800cb88:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb8a:	1d19      	adds	r1, r3, #4
 800cb8c:	9100      	str	r1, [sp, #0]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f010 0f01 	tst.w	r0, #1
 800cb94:	bf14      	ite	ne
 800cb96:	801a      	strhne	r2, [r3, #0]
 800cb98:	601a      	streq	r2, [r3, #0]
 800cb9a:	e6f2      	b.n	800c982 <__ssvfiscanf_r+0x4e>
 800cb9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4630      	mov	r0, r6
 800cba2:	4798      	blx	r3
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d0b6      	beq.n	800cb16 <__ssvfiscanf_r+0x1e2>
 800cba8:	e79c      	b.n	800cae4 <__ssvfiscanf_r+0x1b0>
 800cbaa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cbac:	3201      	adds	r2, #1
 800cbae:	9245      	str	r2, [sp, #276]	; 0x114
 800cbb0:	6862      	ldr	r2, [r4, #4]
 800cbb2:	3a01      	subs	r2, #1
 800cbb4:	2a00      	cmp	r2, #0
 800cbb6:	6062      	str	r2, [r4, #4]
 800cbb8:	dd02      	ble.n	800cbc0 <__ssvfiscanf_r+0x28c>
 800cbba:	3301      	adds	r3, #1
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	e7ad      	b.n	800cb1c <__ssvfiscanf_r+0x1e8>
 800cbc0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cbc2:	4621      	mov	r1, r4
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	4798      	blx	r3
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d0a7      	beq.n	800cb1c <__ssvfiscanf_r+0x1e8>
 800cbcc:	e78a      	b.n	800cae4 <__ssvfiscanf_r+0x1b0>
 800cbce:	2b04      	cmp	r3, #4
 800cbd0:	dc0e      	bgt.n	800cbf0 <__ssvfiscanf_r+0x2bc>
 800cbd2:	466b      	mov	r3, sp
 800cbd4:	4622      	mov	r2, r4
 800cbd6:	a941      	add	r1, sp, #260	; 0x104
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f000 f87d 	bl	800ccd8 <_scanf_i>
 800cbde:	e7ab      	b.n	800cb38 <__ssvfiscanf_r+0x204>
 800cbe0:	0800c881 	.word	0x0800c881
 800cbe4:	0800c8fb 	.word	0x0800c8fb
 800cbe8:	0800ee3f 	.word	0x0800ee3f
 800cbec:	0800f132 	.word	0x0800f132
 800cbf0:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <__ssvfiscanf_r+0x2ec>)
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f43f aec5 	beq.w	800c982 <__ssvfiscanf_r+0x4e>
 800cbf8:	466b      	mov	r3, sp
 800cbfa:	4622      	mov	r2, r4
 800cbfc:	a941      	add	r1, sp, #260	; 0x104
 800cbfe:	4630      	mov	r0, r6
 800cc00:	f3af 8000 	nop.w
 800cc04:	e798      	b.n	800cb38 <__ssvfiscanf_r+0x204>
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cc0c:	bf18      	it	ne
 800cc0e:	f04f 30ff 	movne.w	r0, #4294967295
 800cc12:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc1a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cc1c:	e7f9      	b.n	800cc12 <__ssvfiscanf_r+0x2de>
 800cc1e:	bf00      	nop
 800cc20:	00000000 	.word	0x00000000

0800cc24 <_scanf_chars>:
 800cc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc28:	4615      	mov	r5, r2
 800cc2a:	688a      	ldr	r2, [r1, #8]
 800cc2c:	4680      	mov	r8, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	b932      	cbnz	r2, 800cc40 <_scanf_chars+0x1c>
 800cc32:	698a      	ldr	r2, [r1, #24]
 800cc34:	2a00      	cmp	r2, #0
 800cc36:	bf0c      	ite	eq
 800cc38:	2201      	moveq	r2, #1
 800cc3a:	f04f 32ff 	movne.w	r2, #4294967295
 800cc3e:	608a      	str	r2, [r1, #8]
 800cc40:	6822      	ldr	r2, [r4, #0]
 800cc42:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ccd4 <_scanf_chars+0xb0>
 800cc46:	06d1      	lsls	r1, r2, #27
 800cc48:	bf5f      	itttt	pl
 800cc4a:	681a      	ldrpl	r2, [r3, #0]
 800cc4c:	1d11      	addpl	r1, r2, #4
 800cc4e:	6019      	strpl	r1, [r3, #0]
 800cc50:	6816      	ldrpl	r6, [r2, #0]
 800cc52:	2700      	movs	r7, #0
 800cc54:	69a0      	ldr	r0, [r4, #24]
 800cc56:	b188      	cbz	r0, 800cc7c <_scanf_chars+0x58>
 800cc58:	2801      	cmp	r0, #1
 800cc5a:	d107      	bne.n	800cc6c <_scanf_chars+0x48>
 800cc5c:	682a      	ldr	r2, [r5, #0]
 800cc5e:	7811      	ldrb	r1, [r2, #0]
 800cc60:	6962      	ldr	r2, [r4, #20]
 800cc62:	5c52      	ldrb	r2, [r2, r1]
 800cc64:	b952      	cbnz	r2, 800cc7c <_scanf_chars+0x58>
 800cc66:	2f00      	cmp	r7, #0
 800cc68:	d031      	beq.n	800ccce <_scanf_chars+0xaa>
 800cc6a:	e022      	b.n	800ccb2 <_scanf_chars+0x8e>
 800cc6c:	2802      	cmp	r0, #2
 800cc6e:	d120      	bne.n	800ccb2 <_scanf_chars+0x8e>
 800cc70:	682b      	ldr	r3, [r5, #0]
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cc78:	071b      	lsls	r3, r3, #28
 800cc7a:	d41a      	bmi.n	800ccb2 <_scanf_chars+0x8e>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	06da      	lsls	r2, r3, #27
 800cc80:	bf5e      	ittt	pl
 800cc82:	682b      	ldrpl	r3, [r5, #0]
 800cc84:	781b      	ldrbpl	r3, [r3, #0]
 800cc86:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cc8a:	682a      	ldr	r2, [r5, #0]
 800cc8c:	686b      	ldr	r3, [r5, #4]
 800cc8e:	3201      	adds	r2, #1
 800cc90:	602a      	str	r2, [r5, #0]
 800cc92:	68a2      	ldr	r2, [r4, #8]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	3a01      	subs	r2, #1
 800cc98:	606b      	str	r3, [r5, #4]
 800cc9a:	3701      	adds	r7, #1
 800cc9c:	60a2      	str	r2, [r4, #8]
 800cc9e:	b142      	cbz	r2, 800ccb2 <_scanf_chars+0x8e>
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	dcd7      	bgt.n	800cc54 <_scanf_chars+0x30>
 800cca4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cca8:	4629      	mov	r1, r5
 800ccaa:	4640      	mov	r0, r8
 800ccac:	4798      	blx	r3
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d0d0      	beq.n	800cc54 <_scanf_chars+0x30>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	f013 0310 	ands.w	r3, r3, #16
 800ccb8:	d105      	bne.n	800ccc6 <_scanf_chars+0xa2>
 800ccba:	68e2      	ldr	r2, [r4, #12]
 800ccbc:	3201      	adds	r2, #1
 800ccbe:	60e2      	str	r2, [r4, #12]
 800ccc0:	69a2      	ldr	r2, [r4, #24]
 800ccc2:	b102      	cbz	r2, 800ccc6 <_scanf_chars+0xa2>
 800ccc4:	7033      	strb	r3, [r6, #0]
 800ccc6:	6923      	ldr	r3, [r4, #16]
 800ccc8:	443b      	add	r3, r7
 800ccca:	6123      	str	r3, [r4, #16]
 800cccc:	2000      	movs	r0, #0
 800ccce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd2:	bf00      	nop
 800ccd4:	0800ee3f 	.word	0x0800ee3f

0800ccd8 <_scanf_i>:
 800ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccdc:	4698      	mov	r8, r3
 800ccde:	4b76      	ldr	r3, [pc, #472]	; (800ceb8 <_scanf_i+0x1e0>)
 800cce0:	460c      	mov	r4, r1
 800cce2:	4682      	mov	sl, r0
 800cce4:	4616      	mov	r6, r2
 800cce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccea:	b087      	sub	sp, #28
 800ccec:	ab03      	add	r3, sp, #12
 800ccee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ccf2:	4b72      	ldr	r3, [pc, #456]	; (800cebc <_scanf_i+0x1e4>)
 800ccf4:	69a1      	ldr	r1, [r4, #24]
 800ccf6:	4a72      	ldr	r2, [pc, #456]	; (800cec0 <_scanf_i+0x1e8>)
 800ccf8:	2903      	cmp	r1, #3
 800ccfa:	bf18      	it	ne
 800ccfc:	461a      	movne	r2, r3
 800ccfe:	68a3      	ldr	r3, [r4, #8]
 800cd00:	9201      	str	r2, [sp, #4]
 800cd02:	1e5a      	subs	r2, r3, #1
 800cd04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cd08:	bf88      	it	hi
 800cd0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cd0e:	4627      	mov	r7, r4
 800cd10:	bf82      	ittt	hi
 800cd12:	eb03 0905 	addhi.w	r9, r3, r5
 800cd16:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cd1a:	60a3      	strhi	r3, [r4, #8]
 800cd1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cd20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cd24:	bf98      	it	ls
 800cd26:	f04f 0900 	movls.w	r9, #0
 800cd2a:	6023      	str	r3, [r4, #0]
 800cd2c:	463d      	mov	r5, r7
 800cd2e:	f04f 0b00 	mov.w	fp, #0
 800cd32:	6831      	ldr	r1, [r6, #0]
 800cd34:	ab03      	add	r3, sp, #12
 800cd36:	7809      	ldrb	r1, [r1, #0]
 800cd38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cd3c:	2202      	movs	r2, #2
 800cd3e:	f7f3 fa67 	bl	8000210 <memchr>
 800cd42:	b328      	cbz	r0, 800cd90 <_scanf_i+0xb8>
 800cd44:	f1bb 0f01 	cmp.w	fp, #1
 800cd48:	d159      	bne.n	800cdfe <_scanf_i+0x126>
 800cd4a:	6862      	ldr	r2, [r4, #4]
 800cd4c:	b92a      	cbnz	r2, 800cd5a <_scanf_i+0x82>
 800cd4e:	6822      	ldr	r2, [r4, #0]
 800cd50:	2308      	movs	r3, #8
 800cd52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd56:	6063      	str	r3, [r4, #4]
 800cd58:	6022      	str	r2, [r4, #0]
 800cd5a:	6822      	ldr	r2, [r4, #0]
 800cd5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cd60:	6022      	str	r2, [r4, #0]
 800cd62:	68a2      	ldr	r2, [r4, #8]
 800cd64:	1e51      	subs	r1, r2, #1
 800cd66:	60a1      	str	r1, [r4, #8]
 800cd68:	b192      	cbz	r2, 800cd90 <_scanf_i+0xb8>
 800cd6a:	6832      	ldr	r2, [r6, #0]
 800cd6c:	1c51      	adds	r1, r2, #1
 800cd6e:	6031      	str	r1, [r6, #0]
 800cd70:	7812      	ldrb	r2, [r2, #0]
 800cd72:	f805 2b01 	strb.w	r2, [r5], #1
 800cd76:	6872      	ldr	r2, [r6, #4]
 800cd78:	3a01      	subs	r2, #1
 800cd7a:	2a00      	cmp	r2, #0
 800cd7c:	6072      	str	r2, [r6, #4]
 800cd7e:	dc07      	bgt.n	800cd90 <_scanf_i+0xb8>
 800cd80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cd84:	4631      	mov	r1, r6
 800cd86:	4650      	mov	r0, sl
 800cd88:	4790      	blx	r2
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	f040 8085 	bne.w	800ce9a <_scanf_i+0x1c2>
 800cd90:	f10b 0b01 	add.w	fp, fp, #1
 800cd94:	f1bb 0f03 	cmp.w	fp, #3
 800cd98:	d1cb      	bne.n	800cd32 <_scanf_i+0x5a>
 800cd9a:	6863      	ldr	r3, [r4, #4]
 800cd9c:	b90b      	cbnz	r3, 800cda2 <_scanf_i+0xca>
 800cd9e:	230a      	movs	r3, #10
 800cda0:	6063      	str	r3, [r4, #4]
 800cda2:	6863      	ldr	r3, [r4, #4]
 800cda4:	4947      	ldr	r1, [pc, #284]	; (800cec4 <_scanf_i+0x1ec>)
 800cda6:	6960      	ldr	r0, [r4, #20]
 800cda8:	1ac9      	subs	r1, r1, r3
 800cdaa:	f000 f89f 	bl	800ceec <__sccl>
 800cdae:	f04f 0b00 	mov.w	fp, #0
 800cdb2:	68a3      	ldr	r3, [r4, #8]
 800cdb4:	6822      	ldr	r2, [r4, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d03d      	beq.n	800ce36 <_scanf_i+0x15e>
 800cdba:	6831      	ldr	r1, [r6, #0]
 800cdbc:	6960      	ldr	r0, [r4, #20]
 800cdbe:	f891 c000 	ldrb.w	ip, [r1]
 800cdc2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d035      	beq.n	800ce36 <_scanf_i+0x15e>
 800cdca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cdce:	d124      	bne.n	800ce1a <_scanf_i+0x142>
 800cdd0:	0510      	lsls	r0, r2, #20
 800cdd2:	d522      	bpl.n	800ce1a <_scanf_i+0x142>
 800cdd4:	f10b 0b01 	add.w	fp, fp, #1
 800cdd8:	f1b9 0f00 	cmp.w	r9, #0
 800cddc:	d003      	beq.n	800cde6 <_scanf_i+0x10e>
 800cdde:	3301      	adds	r3, #1
 800cde0:	f109 39ff 	add.w	r9, r9, #4294967295
 800cde4:	60a3      	str	r3, [r4, #8]
 800cde6:	6873      	ldr	r3, [r6, #4]
 800cde8:	3b01      	subs	r3, #1
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	6073      	str	r3, [r6, #4]
 800cdee:	dd1b      	ble.n	800ce28 <_scanf_i+0x150>
 800cdf0:	6833      	ldr	r3, [r6, #0]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	6033      	str	r3, [r6, #0]
 800cdf6:	68a3      	ldr	r3, [r4, #8]
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	60a3      	str	r3, [r4, #8]
 800cdfc:	e7d9      	b.n	800cdb2 <_scanf_i+0xda>
 800cdfe:	f1bb 0f02 	cmp.w	fp, #2
 800ce02:	d1ae      	bne.n	800cd62 <_scanf_i+0x8a>
 800ce04:	6822      	ldr	r2, [r4, #0]
 800ce06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ce0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ce0e:	d1bf      	bne.n	800cd90 <_scanf_i+0xb8>
 800ce10:	2310      	movs	r3, #16
 800ce12:	6063      	str	r3, [r4, #4]
 800ce14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce18:	e7a2      	b.n	800cd60 <_scanf_i+0x88>
 800ce1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ce1e:	6022      	str	r2, [r4, #0]
 800ce20:	780b      	ldrb	r3, [r1, #0]
 800ce22:	f805 3b01 	strb.w	r3, [r5], #1
 800ce26:	e7de      	b.n	800cde6 <_scanf_i+0x10e>
 800ce28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	4650      	mov	r0, sl
 800ce30:	4798      	blx	r3
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d0df      	beq.n	800cdf6 <_scanf_i+0x11e>
 800ce36:	6823      	ldr	r3, [r4, #0]
 800ce38:	05db      	lsls	r3, r3, #23
 800ce3a:	d50d      	bpl.n	800ce58 <_scanf_i+0x180>
 800ce3c:	42bd      	cmp	r5, r7
 800ce3e:	d909      	bls.n	800ce54 <_scanf_i+0x17c>
 800ce40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ce44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce48:	4632      	mov	r2, r6
 800ce4a:	4650      	mov	r0, sl
 800ce4c:	4798      	blx	r3
 800ce4e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ce52:	464d      	mov	r5, r9
 800ce54:	42bd      	cmp	r5, r7
 800ce56:	d02d      	beq.n	800ceb4 <_scanf_i+0x1dc>
 800ce58:	6822      	ldr	r2, [r4, #0]
 800ce5a:	f012 0210 	ands.w	r2, r2, #16
 800ce5e:	d113      	bne.n	800ce88 <_scanf_i+0x1b0>
 800ce60:	702a      	strb	r2, [r5, #0]
 800ce62:	6863      	ldr	r3, [r4, #4]
 800ce64:	9e01      	ldr	r6, [sp, #4]
 800ce66:	4639      	mov	r1, r7
 800ce68:	4650      	mov	r0, sl
 800ce6a:	47b0      	blx	r6
 800ce6c:	6821      	ldr	r1, [r4, #0]
 800ce6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce72:	f011 0f20 	tst.w	r1, #32
 800ce76:	d013      	beq.n	800cea0 <_scanf_i+0x1c8>
 800ce78:	1d1a      	adds	r2, r3, #4
 800ce7a:	f8c8 2000 	str.w	r2, [r8]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6018      	str	r0, [r3, #0]
 800ce82:	68e3      	ldr	r3, [r4, #12]
 800ce84:	3301      	adds	r3, #1
 800ce86:	60e3      	str	r3, [r4, #12]
 800ce88:	1bed      	subs	r5, r5, r7
 800ce8a:	44ab      	add	fp, r5
 800ce8c:	6925      	ldr	r5, [r4, #16]
 800ce8e:	445d      	add	r5, fp
 800ce90:	6125      	str	r5, [r4, #16]
 800ce92:	2000      	movs	r0, #0
 800ce94:	b007      	add	sp, #28
 800ce96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9a:	f04f 0b00 	mov.w	fp, #0
 800ce9e:	e7ca      	b.n	800ce36 <_scanf_i+0x15e>
 800cea0:	1d1a      	adds	r2, r3, #4
 800cea2:	f8c8 2000 	str.w	r2, [r8]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f011 0f01 	tst.w	r1, #1
 800ceac:	bf14      	ite	ne
 800ceae:	8018      	strhne	r0, [r3, #0]
 800ceb0:	6018      	streq	r0, [r3, #0]
 800ceb2:	e7e6      	b.n	800ce82 <_scanf_i+0x1aa>
 800ceb4:	2001      	movs	r0, #1
 800ceb6:	e7ed      	b.n	800ce94 <_scanf_i+0x1bc>
 800ceb8:	0800e8c4 	.word	0x0800e8c4
 800cebc:	0800d041 	.word	0x0800d041
 800cec0:	0800b0e1 	.word	0x0800b0e1
 800cec4:	0800f156 	.word	0x0800f156

0800cec8 <_read_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	4d07      	ldr	r5, [pc, #28]	; (800cee8 <_read_r+0x20>)
 800cecc:	4604      	mov	r4, r0
 800cece:	4608      	mov	r0, r1
 800ced0:	4611      	mov	r1, r2
 800ced2:	2200      	movs	r2, #0
 800ced4:	602a      	str	r2, [r5, #0]
 800ced6:	461a      	mov	r2, r3
 800ced8:	f7f6 fef6 	bl	8003cc8 <_read>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d102      	bne.n	800cee6 <_read_r+0x1e>
 800cee0:	682b      	ldr	r3, [r5, #0]
 800cee2:	b103      	cbz	r3, 800cee6 <_read_r+0x1e>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	20000c28 	.word	0x20000c28

0800ceec <__sccl>:
 800ceec:	b570      	push	{r4, r5, r6, lr}
 800ceee:	780b      	ldrb	r3, [r1, #0]
 800cef0:	4604      	mov	r4, r0
 800cef2:	2b5e      	cmp	r3, #94	; 0x5e
 800cef4:	bf0b      	itete	eq
 800cef6:	784b      	ldrbeq	r3, [r1, #1]
 800cef8:	1c48      	addne	r0, r1, #1
 800cefa:	1c88      	addeq	r0, r1, #2
 800cefc:	2200      	movne	r2, #0
 800cefe:	bf08      	it	eq
 800cf00:	2201      	moveq	r2, #1
 800cf02:	1e61      	subs	r1, r4, #1
 800cf04:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cf08:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cf0c:	42a9      	cmp	r1, r5
 800cf0e:	d1fb      	bne.n	800cf08 <__sccl+0x1c>
 800cf10:	b90b      	cbnz	r3, 800cf16 <__sccl+0x2a>
 800cf12:	3801      	subs	r0, #1
 800cf14:	bd70      	pop	{r4, r5, r6, pc}
 800cf16:	f082 0201 	eor.w	r2, r2, #1
 800cf1a:	54e2      	strb	r2, [r4, r3]
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	4628      	mov	r0, r5
 800cf20:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cf24:	292d      	cmp	r1, #45	; 0x2d
 800cf26:	d006      	beq.n	800cf36 <__sccl+0x4a>
 800cf28:	295d      	cmp	r1, #93	; 0x5d
 800cf2a:	d0f3      	beq.n	800cf14 <__sccl+0x28>
 800cf2c:	b909      	cbnz	r1, 800cf32 <__sccl+0x46>
 800cf2e:	4628      	mov	r0, r5
 800cf30:	e7f0      	b.n	800cf14 <__sccl+0x28>
 800cf32:	460b      	mov	r3, r1
 800cf34:	e7f1      	b.n	800cf1a <__sccl+0x2e>
 800cf36:	786e      	ldrb	r6, [r5, #1]
 800cf38:	2e5d      	cmp	r6, #93	; 0x5d
 800cf3a:	d0fa      	beq.n	800cf32 <__sccl+0x46>
 800cf3c:	42b3      	cmp	r3, r6
 800cf3e:	dcf8      	bgt.n	800cf32 <__sccl+0x46>
 800cf40:	3502      	adds	r5, #2
 800cf42:	4619      	mov	r1, r3
 800cf44:	3101      	adds	r1, #1
 800cf46:	428e      	cmp	r6, r1
 800cf48:	5462      	strb	r2, [r4, r1]
 800cf4a:	dcfb      	bgt.n	800cf44 <__sccl+0x58>
 800cf4c:	1af1      	subs	r1, r6, r3
 800cf4e:	3901      	subs	r1, #1
 800cf50:	1c58      	adds	r0, r3, #1
 800cf52:	42b3      	cmp	r3, r6
 800cf54:	bfa8      	it	ge
 800cf56:	2100      	movge	r1, #0
 800cf58:	1843      	adds	r3, r0, r1
 800cf5a:	e7e0      	b.n	800cf1e <__sccl+0x32>

0800cf5c <_strtoul_l.constprop.0>:
 800cf5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf60:	4f36      	ldr	r7, [pc, #216]	; (800d03c <_strtoul_l.constprop.0+0xe0>)
 800cf62:	4686      	mov	lr, r0
 800cf64:	460d      	mov	r5, r1
 800cf66:	4628      	mov	r0, r5
 800cf68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf6c:	5de6      	ldrb	r6, [r4, r7]
 800cf6e:	f016 0608 	ands.w	r6, r6, #8
 800cf72:	d1f8      	bne.n	800cf66 <_strtoul_l.constprop.0+0xa>
 800cf74:	2c2d      	cmp	r4, #45	; 0x2d
 800cf76:	d12f      	bne.n	800cfd8 <_strtoul_l.constprop.0+0x7c>
 800cf78:	782c      	ldrb	r4, [r5, #0]
 800cf7a:	2601      	movs	r6, #1
 800cf7c:	1c85      	adds	r5, r0, #2
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d057      	beq.n	800d032 <_strtoul_l.constprop.0+0xd6>
 800cf82:	2b10      	cmp	r3, #16
 800cf84:	d109      	bne.n	800cf9a <_strtoul_l.constprop.0+0x3e>
 800cf86:	2c30      	cmp	r4, #48	; 0x30
 800cf88:	d107      	bne.n	800cf9a <_strtoul_l.constprop.0+0x3e>
 800cf8a:	7828      	ldrb	r0, [r5, #0]
 800cf8c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cf90:	2858      	cmp	r0, #88	; 0x58
 800cf92:	d149      	bne.n	800d028 <_strtoul_l.constprop.0+0xcc>
 800cf94:	786c      	ldrb	r4, [r5, #1]
 800cf96:	2310      	movs	r3, #16
 800cf98:	3502      	adds	r5, #2
 800cf9a:	f04f 38ff 	mov.w	r8, #4294967295
 800cf9e:	2700      	movs	r7, #0
 800cfa0:	fbb8 f8f3 	udiv	r8, r8, r3
 800cfa4:	fb03 f908 	mul.w	r9, r3, r8
 800cfa8:	ea6f 0909 	mvn.w	r9, r9
 800cfac:	4638      	mov	r0, r7
 800cfae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cfb2:	f1bc 0f09 	cmp.w	ip, #9
 800cfb6:	d814      	bhi.n	800cfe2 <_strtoul_l.constprop.0+0x86>
 800cfb8:	4664      	mov	r4, ip
 800cfba:	42a3      	cmp	r3, r4
 800cfbc:	dd22      	ble.n	800d004 <_strtoul_l.constprop.0+0xa8>
 800cfbe:	2f00      	cmp	r7, #0
 800cfc0:	db1d      	blt.n	800cffe <_strtoul_l.constprop.0+0xa2>
 800cfc2:	4580      	cmp	r8, r0
 800cfc4:	d31b      	bcc.n	800cffe <_strtoul_l.constprop.0+0xa2>
 800cfc6:	d101      	bne.n	800cfcc <_strtoul_l.constprop.0+0x70>
 800cfc8:	45a1      	cmp	r9, r4
 800cfca:	db18      	blt.n	800cffe <_strtoul_l.constprop.0+0xa2>
 800cfcc:	fb00 4003 	mla	r0, r0, r3, r4
 800cfd0:	2701      	movs	r7, #1
 800cfd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfd6:	e7ea      	b.n	800cfae <_strtoul_l.constprop.0+0x52>
 800cfd8:	2c2b      	cmp	r4, #43	; 0x2b
 800cfda:	bf04      	itt	eq
 800cfdc:	782c      	ldrbeq	r4, [r5, #0]
 800cfde:	1c85      	addeq	r5, r0, #2
 800cfe0:	e7cd      	b.n	800cf7e <_strtoul_l.constprop.0+0x22>
 800cfe2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cfe6:	f1bc 0f19 	cmp.w	ip, #25
 800cfea:	d801      	bhi.n	800cff0 <_strtoul_l.constprop.0+0x94>
 800cfec:	3c37      	subs	r4, #55	; 0x37
 800cfee:	e7e4      	b.n	800cfba <_strtoul_l.constprop.0+0x5e>
 800cff0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cff4:	f1bc 0f19 	cmp.w	ip, #25
 800cff8:	d804      	bhi.n	800d004 <_strtoul_l.constprop.0+0xa8>
 800cffa:	3c57      	subs	r4, #87	; 0x57
 800cffc:	e7dd      	b.n	800cfba <_strtoul_l.constprop.0+0x5e>
 800cffe:	f04f 37ff 	mov.w	r7, #4294967295
 800d002:	e7e6      	b.n	800cfd2 <_strtoul_l.constprop.0+0x76>
 800d004:	2f00      	cmp	r7, #0
 800d006:	da07      	bge.n	800d018 <_strtoul_l.constprop.0+0xbc>
 800d008:	2322      	movs	r3, #34	; 0x22
 800d00a:	f8ce 3000 	str.w	r3, [lr]
 800d00e:	f04f 30ff 	mov.w	r0, #4294967295
 800d012:	b932      	cbnz	r2, 800d022 <_strtoul_l.constprop.0+0xc6>
 800d014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d018:	b106      	cbz	r6, 800d01c <_strtoul_l.constprop.0+0xc0>
 800d01a:	4240      	negs	r0, r0
 800d01c:	2a00      	cmp	r2, #0
 800d01e:	d0f9      	beq.n	800d014 <_strtoul_l.constprop.0+0xb8>
 800d020:	b107      	cbz	r7, 800d024 <_strtoul_l.constprop.0+0xc8>
 800d022:	1e69      	subs	r1, r5, #1
 800d024:	6011      	str	r1, [r2, #0]
 800d026:	e7f5      	b.n	800d014 <_strtoul_l.constprop.0+0xb8>
 800d028:	2430      	movs	r4, #48	; 0x30
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1b5      	bne.n	800cf9a <_strtoul_l.constprop.0+0x3e>
 800d02e:	2308      	movs	r3, #8
 800d030:	e7b3      	b.n	800cf9a <_strtoul_l.constprop.0+0x3e>
 800d032:	2c30      	cmp	r4, #48	; 0x30
 800d034:	d0a9      	beq.n	800cf8a <_strtoul_l.constprop.0+0x2e>
 800d036:	230a      	movs	r3, #10
 800d038:	e7af      	b.n	800cf9a <_strtoul_l.constprop.0+0x3e>
 800d03a:	bf00      	nop
 800d03c:	0800ee3f 	.word	0x0800ee3f

0800d040 <_strtoul_r>:
 800d040:	f7ff bf8c 	b.w	800cf5c <_strtoul_l.constprop.0>

0800d044 <__submore>:
 800d044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d048:	460c      	mov	r4, r1
 800d04a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d050:	4299      	cmp	r1, r3
 800d052:	d11d      	bne.n	800d090 <__submore+0x4c>
 800d054:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d058:	f7fd fa18 	bl	800a48c <_malloc_r>
 800d05c:	b918      	cbnz	r0, 800d066 <__submore+0x22>
 800d05e:	f04f 30ff 	mov.w	r0, #4294967295
 800d062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d06a:	63a3      	str	r3, [r4, #56]	; 0x38
 800d06c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d070:	6360      	str	r0, [r4, #52]	; 0x34
 800d072:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d076:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d07a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d07e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d082:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d086:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d08a:	6020      	str	r0, [r4, #0]
 800d08c:	2000      	movs	r0, #0
 800d08e:	e7e8      	b.n	800d062 <__submore+0x1e>
 800d090:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d092:	0077      	lsls	r7, r6, #1
 800d094:	463a      	mov	r2, r7
 800d096:	f000 fa25 	bl	800d4e4 <_realloc_r>
 800d09a:	4605      	mov	r5, r0
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d0de      	beq.n	800d05e <__submore+0x1a>
 800d0a0:	eb00 0806 	add.w	r8, r0, r6
 800d0a4:	4601      	mov	r1, r0
 800d0a6:	4632      	mov	r2, r6
 800d0a8:	4640      	mov	r0, r8
 800d0aa:	f7fe fed9 	bl	800be60 <memcpy>
 800d0ae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d0b2:	f8c4 8000 	str.w	r8, [r4]
 800d0b6:	e7e9      	b.n	800d08c <__submore+0x48>

0800d0b8 <__assert_func>:
 800d0b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0ba:	4614      	mov	r4, r2
 800d0bc:	461a      	mov	r2, r3
 800d0be:	4b09      	ldr	r3, [pc, #36]	; (800d0e4 <__assert_func+0x2c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4605      	mov	r5, r0
 800d0c4:	68d8      	ldr	r0, [r3, #12]
 800d0c6:	b14c      	cbz	r4, 800d0dc <__assert_func+0x24>
 800d0c8:	4b07      	ldr	r3, [pc, #28]	; (800d0e8 <__assert_func+0x30>)
 800d0ca:	9100      	str	r1, [sp, #0]
 800d0cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0d0:	4906      	ldr	r1, [pc, #24]	; (800d0ec <__assert_func+0x34>)
 800d0d2:	462b      	mov	r3, r5
 800d0d4:	f000 f9a6 	bl	800d424 <fiprintf>
 800d0d8:	f000 fc5a 	bl	800d990 <abort>
 800d0dc:	4b04      	ldr	r3, [pc, #16]	; (800d0f0 <__assert_func+0x38>)
 800d0de:	461c      	mov	r4, r3
 800d0e0:	e7f3      	b.n	800d0ca <__assert_func+0x12>
 800d0e2:	bf00      	nop
 800d0e4:	200001d8 	.word	0x200001d8
 800d0e8:	0800f158 	.word	0x0800f158
 800d0ec:	0800f165 	.word	0x0800f165
 800d0f0:	0800f193 	.word	0x0800f193

0800d0f4 <__sflush_r>:
 800d0f4:	898a      	ldrh	r2, [r1, #12]
 800d0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	0710      	lsls	r0, r2, #28
 800d0fe:	460c      	mov	r4, r1
 800d100:	d458      	bmi.n	800d1b4 <__sflush_r+0xc0>
 800d102:	684b      	ldr	r3, [r1, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	dc05      	bgt.n	800d114 <__sflush_r+0x20>
 800d108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	dc02      	bgt.n	800d114 <__sflush_r+0x20>
 800d10e:	2000      	movs	r0, #0
 800d110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d116:	2e00      	cmp	r6, #0
 800d118:	d0f9      	beq.n	800d10e <__sflush_r+0x1a>
 800d11a:	2300      	movs	r3, #0
 800d11c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d120:	682f      	ldr	r7, [r5, #0]
 800d122:	602b      	str	r3, [r5, #0]
 800d124:	d032      	beq.n	800d18c <__sflush_r+0x98>
 800d126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d128:	89a3      	ldrh	r3, [r4, #12]
 800d12a:	075a      	lsls	r2, r3, #29
 800d12c:	d505      	bpl.n	800d13a <__sflush_r+0x46>
 800d12e:	6863      	ldr	r3, [r4, #4]
 800d130:	1ac0      	subs	r0, r0, r3
 800d132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d134:	b10b      	cbz	r3, 800d13a <__sflush_r+0x46>
 800d136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d138:	1ac0      	subs	r0, r0, r3
 800d13a:	2300      	movs	r3, #0
 800d13c:	4602      	mov	r2, r0
 800d13e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d140:	6a21      	ldr	r1, [r4, #32]
 800d142:	4628      	mov	r0, r5
 800d144:	47b0      	blx	r6
 800d146:	1c43      	adds	r3, r0, #1
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	d106      	bne.n	800d15a <__sflush_r+0x66>
 800d14c:	6829      	ldr	r1, [r5, #0]
 800d14e:	291d      	cmp	r1, #29
 800d150:	d82c      	bhi.n	800d1ac <__sflush_r+0xb8>
 800d152:	4a2a      	ldr	r2, [pc, #168]	; (800d1fc <__sflush_r+0x108>)
 800d154:	40ca      	lsrs	r2, r1
 800d156:	07d6      	lsls	r6, r2, #31
 800d158:	d528      	bpl.n	800d1ac <__sflush_r+0xb8>
 800d15a:	2200      	movs	r2, #0
 800d15c:	6062      	str	r2, [r4, #4]
 800d15e:	04d9      	lsls	r1, r3, #19
 800d160:	6922      	ldr	r2, [r4, #16]
 800d162:	6022      	str	r2, [r4, #0]
 800d164:	d504      	bpl.n	800d170 <__sflush_r+0x7c>
 800d166:	1c42      	adds	r2, r0, #1
 800d168:	d101      	bne.n	800d16e <__sflush_r+0x7a>
 800d16a:	682b      	ldr	r3, [r5, #0]
 800d16c:	b903      	cbnz	r3, 800d170 <__sflush_r+0x7c>
 800d16e:	6560      	str	r0, [r4, #84]	; 0x54
 800d170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d172:	602f      	str	r7, [r5, #0]
 800d174:	2900      	cmp	r1, #0
 800d176:	d0ca      	beq.n	800d10e <__sflush_r+0x1a>
 800d178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d17c:	4299      	cmp	r1, r3
 800d17e:	d002      	beq.n	800d186 <__sflush_r+0x92>
 800d180:	4628      	mov	r0, r5
 800d182:	f7fd f917 	bl	800a3b4 <_free_r>
 800d186:	2000      	movs	r0, #0
 800d188:	6360      	str	r0, [r4, #52]	; 0x34
 800d18a:	e7c1      	b.n	800d110 <__sflush_r+0x1c>
 800d18c:	6a21      	ldr	r1, [r4, #32]
 800d18e:	2301      	movs	r3, #1
 800d190:	4628      	mov	r0, r5
 800d192:	47b0      	blx	r6
 800d194:	1c41      	adds	r1, r0, #1
 800d196:	d1c7      	bne.n	800d128 <__sflush_r+0x34>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0c4      	beq.n	800d128 <__sflush_r+0x34>
 800d19e:	2b1d      	cmp	r3, #29
 800d1a0:	d001      	beq.n	800d1a6 <__sflush_r+0xb2>
 800d1a2:	2b16      	cmp	r3, #22
 800d1a4:	d101      	bne.n	800d1aa <__sflush_r+0xb6>
 800d1a6:	602f      	str	r7, [r5, #0]
 800d1a8:	e7b1      	b.n	800d10e <__sflush_r+0x1a>
 800d1aa:	89a3      	ldrh	r3, [r4, #12]
 800d1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1b0:	81a3      	strh	r3, [r4, #12]
 800d1b2:	e7ad      	b.n	800d110 <__sflush_r+0x1c>
 800d1b4:	690f      	ldr	r7, [r1, #16]
 800d1b6:	2f00      	cmp	r7, #0
 800d1b8:	d0a9      	beq.n	800d10e <__sflush_r+0x1a>
 800d1ba:	0793      	lsls	r3, r2, #30
 800d1bc:	680e      	ldr	r6, [r1, #0]
 800d1be:	bf08      	it	eq
 800d1c0:	694b      	ldreq	r3, [r1, #20]
 800d1c2:	600f      	str	r7, [r1, #0]
 800d1c4:	bf18      	it	ne
 800d1c6:	2300      	movne	r3, #0
 800d1c8:	eba6 0807 	sub.w	r8, r6, r7
 800d1cc:	608b      	str	r3, [r1, #8]
 800d1ce:	f1b8 0f00 	cmp.w	r8, #0
 800d1d2:	dd9c      	ble.n	800d10e <__sflush_r+0x1a>
 800d1d4:	6a21      	ldr	r1, [r4, #32]
 800d1d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1d8:	4643      	mov	r3, r8
 800d1da:	463a      	mov	r2, r7
 800d1dc:	4628      	mov	r0, r5
 800d1de:	47b0      	blx	r6
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	dc06      	bgt.n	800d1f2 <__sflush_r+0xfe>
 800d1e4:	89a3      	ldrh	r3, [r4, #12]
 800d1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1ea:	81a3      	strh	r3, [r4, #12]
 800d1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f0:	e78e      	b.n	800d110 <__sflush_r+0x1c>
 800d1f2:	4407      	add	r7, r0
 800d1f4:	eba8 0800 	sub.w	r8, r8, r0
 800d1f8:	e7e9      	b.n	800d1ce <__sflush_r+0xda>
 800d1fa:	bf00      	nop
 800d1fc:	20400001 	.word	0x20400001

0800d200 <_fflush_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	690b      	ldr	r3, [r1, #16]
 800d204:	4605      	mov	r5, r0
 800d206:	460c      	mov	r4, r1
 800d208:	b913      	cbnz	r3, 800d210 <_fflush_r+0x10>
 800d20a:	2500      	movs	r5, #0
 800d20c:	4628      	mov	r0, r5
 800d20e:	bd38      	pop	{r3, r4, r5, pc}
 800d210:	b118      	cbz	r0, 800d21a <_fflush_r+0x1a>
 800d212:	6983      	ldr	r3, [r0, #24]
 800d214:	b90b      	cbnz	r3, 800d21a <_fflush_r+0x1a>
 800d216:	f000 f887 	bl	800d328 <__sinit>
 800d21a:	4b14      	ldr	r3, [pc, #80]	; (800d26c <_fflush_r+0x6c>)
 800d21c:	429c      	cmp	r4, r3
 800d21e:	d11b      	bne.n	800d258 <_fflush_r+0x58>
 800d220:	686c      	ldr	r4, [r5, #4]
 800d222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d0ef      	beq.n	800d20a <_fflush_r+0xa>
 800d22a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d22c:	07d0      	lsls	r0, r2, #31
 800d22e:	d404      	bmi.n	800d23a <_fflush_r+0x3a>
 800d230:	0599      	lsls	r1, r3, #22
 800d232:	d402      	bmi.n	800d23a <_fflush_r+0x3a>
 800d234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d236:	f000 f927 	bl	800d488 <__retarget_lock_acquire_recursive>
 800d23a:	4628      	mov	r0, r5
 800d23c:	4621      	mov	r1, r4
 800d23e:	f7ff ff59 	bl	800d0f4 <__sflush_r>
 800d242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d244:	07da      	lsls	r2, r3, #31
 800d246:	4605      	mov	r5, r0
 800d248:	d4e0      	bmi.n	800d20c <_fflush_r+0xc>
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	059b      	lsls	r3, r3, #22
 800d24e:	d4dd      	bmi.n	800d20c <_fflush_r+0xc>
 800d250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d252:	f000 f91a 	bl	800d48a <__retarget_lock_release_recursive>
 800d256:	e7d9      	b.n	800d20c <_fflush_r+0xc>
 800d258:	4b05      	ldr	r3, [pc, #20]	; (800d270 <_fflush_r+0x70>)
 800d25a:	429c      	cmp	r4, r3
 800d25c:	d101      	bne.n	800d262 <_fflush_r+0x62>
 800d25e:	68ac      	ldr	r4, [r5, #8]
 800d260:	e7df      	b.n	800d222 <_fflush_r+0x22>
 800d262:	4b04      	ldr	r3, [pc, #16]	; (800d274 <_fflush_r+0x74>)
 800d264:	429c      	cmp	r4, r3
 800d266:	bf08      	it	eq
 800d268:	68ec      	ldreq	r4, [r5, #12]
 800d26a:	e7da      	b.n	800d222 <_fflush_r+0x22>
 800d26c:	0800f1b4 	.word	0x0800f1b4
 800d270:	0800f1d4 	.word	0x0800f1d4
 800d274:	0800f194 	.word	0x0800f194

0800d278 <std>:
 800d278:	2300      	movs	r3, #0
 800d27a:	b510      	push	{r4, lr}
 800d27c:	4604      	mov	r4, r0
 800d27e:	e9c0 3300 	strd	r3, r3, [r0]
 800d282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d286:	6083      	str	r3, [r0, #8]
 800d288:	8181      	strh	r1, [r0, #12]
 800d28a:	6643      	str	r3, [r0, #100]	; 0x64
 800d28c:	81c2      	strh	r2, [r0, #14]
 800d28e:	6183      	str	r3, [r0, #24]
 800d290:	4619      	mov	r1, r3
 800d292:	2208      	movs	r2, #8
 800d294:	305c      	adds	r0, #92	; 0x5c
 800d296:	f7fd f885 	bl	800a3a4 <memset>
 800d29a:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <std+0x38>)
 800d29c:	6263      	str	r3, [r4, #36]	; 0x24
 800d29e:	4b05      	ldr	r3, [pc, #20]	; (800d2b4 <std+0x3c>)
 800d2a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2a2:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <std+0x40>)
 800d2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d2a6:	4b05      	ldr	r3, [pc, #20]	; (800d2bc <std+0x44>)
 800d2a8:	6224      	str	r4, [r4, #32]
 800d2aa:	6323      	str	r3, [r4, #48]	; 0x30
 800d2ac:	bd10      	pop	{r4, pc}
 800d2ae:	bf00      	nop
 800d2b0:	0800af01 	.word	0x0800af01
 800d2b4:	0800af27 	.word	0x0800af27
 800d2b8:	0800af5f 	.word	0x0800af5f
 800d2bc:	0800af83 	.word	0x0800af83

0800d2c0 <_cleanup_r>:
 800d2c0:	4901      	ldr	r1, [pc, #4]	; (800d2c8 <_cleanup_r+0x8>)
 800d2c2:	f000 b8c1 	b.w	800d448 <_fwalk_reent>
 800d2c6:	bf00      	nop
 800d2c8:	0800d201 	.word	0x0800d201

0800d2cc <__sfmoreglue>:
 800d2cc:	b570      	push	{r4, r5, r6, lr}
 800d2ce:	2268      	movs	r2, #104	; 0x68
 800d2d0:	1e4d      	subs	r5, r1, #1
 800d2d2:	4355      	muls	r5, r2
 800d2d4:	460e      	mov	r6, r1
 800d2d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d2da:	f7fd f8d7 	bl	800a48c <_malloc_r>
 800d2de:	4604      	mov	r4, r0
 800d2e0:	b140      	cbz	r0, 800d2f4 <__sfmoreglue+0x28>
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	e9c0 1600 	strd	r1, r6, [r0]
 800d2e8:	300c      	adds	r0, #12
 800d2ea:	60a0      	str	r0, [r4, #8]
 800d2ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d2f0:	f7fd f858 	bl	800a3a4 <memset>
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}

0800d2f8 <__sfp_lock_acquire>:
 800d2f8:	4801      	ldr	r0, [pc, #4]	; (800d300 <__sfp_lock_acquire+0x8>)
 800d2fa:	f000 b8c5 	b.w	800d488 <__retarget_lock_acquire_recursive>
 800d2fe:	bf00      	nop
 800d300:	20000c2d 	.word	0x20000c2d

0800d304 <__sfp_lock_release>:
 800d304:	4801      	ldr	r0, [pc, #4]	; (800d30c <__sfp_lock_release+0x8>)
 800d306:	f000 b8c0 	b.w	800d48a <__retarget_lock_release_recursive>
 800d30a:	bf00      	nop
 800d30c:	20000c2d 	.word	0x20000c2d

0800d310 <__sinit_lock_acquire>:
 800d310:	4801      	ldr	r0, [pc, #4]	; (800d318 <__sinit_lock_acquire+0x8>)
 800d312:	f000 b8b9 	b.w	800d488 <__retarget_lock_acquire_recursive>
 800d316:	bf00      	nop
 800d318:	20000c2e 	.word	0x20000c2e

0800d31c <__sinit_lock_release>:
 800d31c:	4801      	ldr	r0, [pc, #4]	; (800d324 <__sinit_lock_release+0x8>)
 800d31e:	f000 b8b4 	b.w	800d48a <__retarget_lock_release_recursive>
 800d322:	bf00      	nop
 800d324:	20000c2e 	.word	0x20000c2e

0800d328 <__sinit>:
 800d328:	b510      	push	{r4, lr}
 800d32a:	4604      	mov	r4, r0
 800d32c:	f7ff fff0 	bl	800d310 <__sinit_lock_acquire>
 800d330:	69a3      	ldr	r3, [r4, #24]
 800d332:	b11b      	cbz	r3, 800d33c <__sinit+0x14>
 800d334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d338:	f7ff bff0 	b.w	800d31c <__sinit_lock_release>
 800d33c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d340:	6523      	str	r3, [r4, #80]	; 0x50
 800d342:	4b13      	ldr	r3, [pc, #76]	; (800d390 <__sinit+0x68>)
 800d344:	4a13      	ldr	r2, [pc, #76]	; (800d394 <__sinit+0x6c>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	62a2      	str	r2, [r4, #40]	; 0x28
 800d34a:	42a3      	cmp	r3, r4
 800d34c:	bf04      	itt	eq
 800d34e:	2301      	moveq	r3, #1
 800d350:	61a3      	streq	r3, [r4, #24]
 800d352:	4620      	mov	r0, r4
 800d354:	f000 f820 	bl	800d398 <__sfp>
 800d358:	6060      	str	r0, [r4, #4]
 800d35a:	4620      	mov	r0, r4
 800d35c:	f000 f81c 	bl	800d398 <__sfp>
 800d360:	60a0      	str	r0, [r4, #8]
 800d362:	4620      	mov	r0, r4
 800d364:	f000 f818 	bl	800d398 <__sfp>
 800d368:	2200      	movs	r2, #0
 800d36a:	60e0      	str	r0, [r4, #12]
 800d36c:	2104      	movs	r1, #4
 800d36e:	6860      	ldr	r0, [r4, #4]
 800d370:	f7ff ff82 	bl	800d278 <std>
 800d374:	68a0      	ldr	r0, [r4, #8]
 800d376:	2201      	movs	r2, #1
 800d378:	2109      	movs	r1, #9
 800d37a:	f7ff ff7d 	bl	800d278 <std>
 800d37e:	68e0      	ldr	r0, [r4, #12]
 800d380:	2202      	movs	r2, #2
 800d382:	2112      	movs	r1, #18
 800d384:	f7ff ff78 	bl	800d278 <std>
 800d388:	2301      	movs	r3, #1
 800d38a:	61a3      	str	r3, [r4, #24]
 800d38c:	e7d2      	b.n	800d334 <__sinit+0xc>
 800d38e:	bf00      	nop
 800d390:	0800ee08 	.word	0x0800ee08
 800d394:	0800d2c1 	.word	0x0800d2c1

0800d398 <__sfp>:
 800d398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39a:	4607      	mov	r7, r0
 800d39c:	f7ff ffac 	bl	800d2f8 <__sfp_lock_acquire>
 800d3a0:	4b1e      	ldr	r3, [pc, #120]	; (800d41c <__sfp+0x84>)
 800d3a2:	681e      	ldr	r6, [r3, #0]
 800d3a4:	69b3      	ldr	r3, [r6, #24]
 800d3a6:	b913      	cbnz	r3, 800d3ae <__sfp+0x16>
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f7ff ffbd 	bl	800d328 <__sinit>
 800d3ae:	3648      	adds	r6, #72	; 0x48
 800d3b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	d503      	bpl.n	800d3c0 <__sfp+0x28>
 800d3b8:	6833      	ldr	r3, [r6, #0]
 800d3ba:	b30b      	cbz	r3, 800d400 <__sfp+0x68>
 800d3bc:	6836      	ldr	r6, [r6, #0]
 800d3be:	e7f7      	b.n	800d3b0 <__sfp+0x18>
 800d3c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d3c4:	b9d5      	cbnz	r5, 800d3fc <__sfp+0x64>
 800d3c6:	4b16      	ldr	r3, [pc, #88]	; (800d420 <__sfp+0x88>)
 800d3c8:	60e3      	str	r3, [r4, #12]
 800d3ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d3ce:	6665      	str	r5, [r4, #100]	; 0x64
 800d3d0:	f000 f859 	bl	800d486 <__retarget_lock_init_recursive>
 800d3d4:	f7ff ff96 	bl	800d304 <__sfp_lock_release>
 800d3d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d3dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d3e0:	6025      	str	r5, [r4, #0]
 800d3e2:	61a5      	str	r5, [r4, #24]
 800d3e4:	2208      	movs	r2, #8
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d3ec:	f7fc ffda 	bl	800a3a4 <memset>
 800d3f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d3f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3fc:	3468      	adds	r4, #104	; 0x68
 800d3fe:	e7d9      	b.n	800d3b4 <__sfp+0x1c>
 800d400:	2104      	movs	r1, #4
 800d402:	4638      	mov	r0, r7
 800d404:	f7ff ff62 	bl	800d2cc <__sfmoreglue>
 800d408:	4604      	mov	r4, r0
 800d40a:	6030      	str	r0, [r6, #0]
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d1d5      	bne.n	800d3bc <__sfp+0x24>
 800d410:	f7ff ff78 	bl	800d304 <__sfp_lock_release>
 800d414:	230c      	movs	r3, #12
 800d416:	603b      	str	r3, [r7, #0]
 800d418:	e7ee      	b.n	800d3f8 <__sfp+0x60>
 800d41a:	bf00      	nop
 800d41c:	0800ee08 	.word	0x0800ee08
 800d420:	ffff0001 	.word	0xffff0001

0800d424 <fiprintf>:
 800d424:	b40e      	push	{r1, r2, r3}
 800d426:	b503      	push	{r0, r1, lr}
 800d428:	4601      	mov	r1, r0
 800d42a:	ab03      	add	r3, sp, #12
 800d42c:	4805      	ldr	r0, [pc, #20]	; (800d444 <fiprintf+0x20>)
 800d42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d432:	6800      	ldr	r0, [r0, #0]
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	f000 f8ad 	bl	800d594 <_vfiprintf_r>
 800d43a:	b002      	add	sp, #8
 800d43c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d440:	b003      	add	sp, #12
 800d442:	4770      	bx	lr
 800d444:	200001d8 	.word	0x200001d8

0800d448 <_fwalk_reent>:
 800d448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d44c:	4606      	mov	r6, r0
 800d44e:	4688      	mov	r8, r1
 800d450:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d454:	2700      	movs	r7, #0
 800d456:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d45a:	f1b9 0901 	subs.w	r9, r9, #1
 800d45e:	d505      	bpl.n	800d46c <_fwalk_reent+0x24>
 800d460:	6824      	ldr	r4, [r4, #0]
 800d462:	2c00      	cmp	r4, #0
 800d464:	d1f7      	bne.n	800d456 <_fwalk_reent+0xe>
 800d466:	4638      	mov	r0, r7
 800d468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46c:	89ab      	ldrh	r3, [r5, #12]
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d907      	bls.n	800d482 <_fwalk_reent+0x3a>
 800d472:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d476:	3301      	adds	r3, #1
 800d478:	d003      	beq.n	800d482 <_fwalk_reent+0x3a>
 800d47a:	4629      	mov	r1, r5
 800d47c:	4630      	mov	r0, r6
 800d47e:	47c0      	blx	r8
 800d480:	4307      	orrs	r7, r0
 800d482:	3568      	adds	r5, #104	; 0x68
 800d484:	e7e9      	b.n	800d45a <_fwalk_reent+0x12>

0800d486 <__retarget_lock_init_recursive>:
 800d486:	4770      	bx	lr

0800d488 <__retarget_lock_acquire_recursive>:
 800d488:	4770      	bx	lr

0800d48a <__retarget_lock_release_recursive>:
 800d48a:	4770      	bx	lr

0800d48c <__ascii_mbtowc>:
 800d48c:	b082      	sub	sp, #8
 800d48e:	b901      	cbnz	r1, 800d492 <__ascii_mbtowc+0x6>
 800d490:	a901      	add	r1, sp, #4
 800d492:	b142      	cbz	r2, 800d4a6 <__ascii_mbtowc+0x1a>
 800d494:	b14b      	cbz	r3, 800d4aa <__ascii_mbtowc+0x1e>
 800d496:	7813      	ldrb	r3, [r2, #0]
 800d498:	600b      	str	r3, [r1, #0]
 800d49a:	7812      	ldrb	r2, [r2, #0]
 800d49c:	1e10      	subs	r0, r2, #0
 800d49e:	bf18      	it	ne
 800d4a0:	2001      	movne	r0, #1
 800d4a2:	b002      	add	sp, #8
 800d4a4:	4770      	bx	lr
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	e7fb      	b.n	800d4a2 <__ascii_mbtowc+0x16>
 800d4aa:	f06f 0001 	mvn.w	r0, #1
 800d4ae:	e7f8      	b.n	800d4a2 <__ascii_mbtowc+0x16>

0800d4b0 <memmove>:
 800d4b0:	4288      	cmp	r0, r1
 800d4b2:	b510      	push	{r4, lr}
 800d4b4:	eb01 0402 	add.w	r4, r1, r2
 800d4b8:	d902      	bls.n	800d4c0 <memmove+0x10>
 800d4ba:	4284      	cmp	r4, r0
 800d4bc:	4623      	mov	r3, r4
 800d4be:	d807      	bhi.n	800d4d0 <memmove+0x20>
 800d4c0:	1e43      	subs	r3, r0, #1
 800d4c2:	42a1      	cmp	r1, r4
 800d4c4:	d008      	beq.n	800d4d8 <memmove+0x28>
 800d4c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4ce:	e7f8      	b.n	800d4c2 <memmove+0x12>
 800d4d0:	4402      	add	r2, r0
 800d4d2:	4601      	mov	r1, r0
 800d4d4:	428a      	cmp	r2, r1
 800d4d6:	d100      	bne.n	800d4da <memmove+0x2a>
 800d4d8:	bd10      	pop	{r4, pc}
 800d4da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4e2:	e7f7      	b.n	800d4d4 <memmove+0x24>

0800d4e4 <_realloc_r>:
 800d4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e8:	4680      	mov	r8, r0
 800d4ea:	4614      	mov	r4, r2
 800d4ec:	460e      	mov	r6, r1
 800d4ee:	b921      	cbnz	r1, 800d4fa <_realloc_r+0x16>
 800d4f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	f7fc bfc9 	b.w	800a48c <_malloc_r>
 800d4fa:	b92a      	cbnz	r2, 800d508 <_realloc_r+0x24>
 800d4fc:	f7fc ff5a 	bl	800a3b4 <_free_r>
 800d500:	4625      	mov	r5, r4
 800d502:	4628      	mov	r0, r5
 800d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d508:	f000 faae 	bl	800da68 <_malloc_usable_size_r>
 800d50c:	4284      	cmp	r4, r0
 800d50e:	4607      	mov	r7, r0
 800d510:	d802      	bhi.n	800d518 <_realloc_r+0x34>
 800d512:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d516:	d812      	bhi.n	800d53e <_realloc_r+0x5a>
 800d518:	4621      	mov	r1, r4
 800d51a:	4640      	mov	r0, r8
 800d51c:	f7fc ffb6 	bl	800a48c <_malloc_r>
 800d520:	4605      	mov	r5, r0
 800d522:	2800      	cmp	r0, #0
 800d524:	d0ed      	beq.n	800d502 <_realloc_r+0x1e>
 800d526:	42bc      	cmp	r4, r7
 800d528:	4622      	mov	r2, r4
 800d52a:	4631      	mov	r1, r6
 800d52c:	bf28      	it	cs
 800d52e:	463a      	movcs	r2, r7
 800d530:	f7fe fc96 	bl	800be60 <memcpy>
 800d534:	4631      	mov	r1, r6
 800d536:	4640      	mov	r0, r8
 800d538:	f7fc ff3c 	bl	800a3b4 <_free_r>
 800d53c:	e7e1      	b.n	800d502 <_realloc_r+0x1e>
 800d53e:	4635      	mov	r5, r6
 800d540:	e7df      	b.n	800d502 <_realloc_r+0x1e>

0800d542 <__sfputc_r>:
 800d542:	6893      	ldr	r3, [r2, #8]
 800d544:	3b01      	subs	r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	b410      	push	{r4}
 800d54a:	6093      	str	r3, [r2, #8]
 800d54c:	da08      	bge.n	800d560 <__sfputc_r+0x1e>
 800d54e:	6994      	ldr	r4, [r2, #24]
 800d550:	42a3      	cmp	r3, r4
 800d552:	db01      	blt.n	800d558 <__sfputc_r+0x16>
 800d554:	290a      	cmp	r1, #10
 800d556:	d103      	bne.n	800d560 <__sfputc_r+0x1e>
 800d558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d55c:	f000 b94a 	b.w	800d7f4 <__swbuf_r>
 800d560:	6813      	ldr	r3, [r2, #0]
 800d562:	1c58      	adds	r0, r3, #1
 800d564:	6010      	str	r0, [r2, #0]
 800d566:	7019      	strb	r1, [r3, #0]
 800d568:	4608      	mov	r0, r1
 800d56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <__sfputs_r>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	4606      	mov	r6, r0
 800d574:	460f      	mov	r7, r1
 800d576:	4614      	mov	r4, r2
 800d578:	18d5      	adds	r5, r2, r3
 800d57a:	42ac      	cmp	r4, r5
 800d57c:	d101      	bne.n	800d582 <__sfputs_r+0x12>
 800d57e:	2000      	movs	r0, #0
 800d580:	e007      	b.n	800d592 <__sfputs_r+0x22>
 800d582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d586:	463a      	mov	r2, r7
 800d588:	4630      	mov	r0, r6
 800d58a:	f7ff ffda 	bl	800d542 <__sfputc_r>
 800d58e:	1c43      	adds	r3, r0, #1
 800d590:	d1f3      	bne.n	800d57a <__sfputs_r+0xa>
 800d592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d594 <_vfiprintf_r>:
 800d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d598:	460d      	mov	r5, r1
 800d59a:	b09d      	sub	sp, #116	; 0x74
 800d59c:	4614      	mov	r4, r2
 800d59e:	4698      	mov	r8, r3
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	b118      	cbz	r0, 800d5ac <_vfiprintf_r+0x18>
 800d5a4:	6983      	ldr	r3, [r0, #24]
 800d5a6:	b90b      	cbnz	r3, 800d5ac <_vfiprintf_r+0x18>
 800d5a8:	f7ff febe 	bl	800d328 <__sinit>
 800d5ac:	4b89      	ldr	r3, [pc, #548]	; (800d7d4 <_vfiprintf_r+0x240>)
 800d5ae:	429d      	cmp	r5, r3
 800d5b0:	d11b      	bne.n	800d5ea <_vfiprintf_r+0x56>
 800d5b2:	6875      	ldr	r5, [r6, #4]
 800d5b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5b6:	07d9      	lsls	r1, r3, #31
 800d5b8:	d405      	bmi.n	800d5c6 <_vfiprintf_r+0x32>
 800d5ba:	89ab      	ldrh	r3, [r5, #12]
 800d5bc:	059a      	lsls	r2, r3, #22
 800d5be:	d402      	bmi.n	800d5c6 <_vfiprintf_r+0x32>
 800d5c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5c2:	f7ff ff61 	bl	800d488 <__retarget_lock_acquire_recursive>
 800d5c6:	89ab      	ldrh	r3, [r5, #12]
 800d5c8:	071b      	lsls	r3, r3, #28
 800d5ca:	d501      	bpl.n	800d5d0 <_vfiprintf_r+0x3c>
 800d5cc:	692b      	ldr	r3, [r5, #16]
 800d5ce:	b9eb      	cbnz	r3, 800d60c <_vfiprintf_r+0x78>
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	f000 f96e 	bl	800d8b4 <__swsetup_r>
 800d5d8:	b1c0      	cbz	r0, 800d60c <_vfiprintf_r+0x78>
 800d5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5dc:	07dc      	lsls	r4, r3, #31
 800d5de:	d50e      	bpl.n	800d5fe <_vfiprintf_r+0x6a>
 800d5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e4:	b01d      	add	sp, #116	; 0x74
 800d5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ea:	4b7b      	ldr	r3, [pc, #492]	; (800d7d8 <_vfiprintf_r+0x244>)
 800d5ec:	429d      	cmp	r5, r3
 800d5ee:	d101      	bne.n	800d5f4 <_vfiprintf_r+0x60>
 800d5f0:	68b5      	ldr	r5, [r6, #8]
 800d5f2:	e7df      	b.n	800d5b4 <_vfiprintf_r+0x20>
 800d5f4:	4b79      	ldr	r3, [pc, #484]	; (800d7dc <_vfiprintf_r+0x248>)
 800d5f6:	429d      	cmp	r5, r3
 800d5f8:	bf08      	it	eq
 800d5fa:	68f5      	ldreq	r5, [r6, #12]
 800d5fc:	e7da      	b.n	800d5b4 <_vfiprintf_r+0x20>
 800d5fe:	89ab      	ldrh	r3, [r5, #12]
 800d600:	0598      	lsls	r0, r3, #22
 800d602:	d4ed      	bmi.n	800d5e0 <_vfiprintf_r+0x4c>
 800d604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d606:	f7ff ff40 	bl	800d48a <__retarget_lock_release_recursive>
 800d60a:	e7e9      	b.n	800d5e0 <_vfiprintf_r+0x4c>
 800d60c:	2300      	movs	r3, #0
 800d60e:	9309      	str	r3, [sp, #36]	; 0x24
 800d610:	2320      	movs	r3, #32
 800d612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d616:	f8cd 800c 	str.w	r8, [sp, #12]
 800d61a:	2330      	movs	r3, #48	; 0x30
 800d61c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7e0 <_vfiprintf_r+0x24c>
 800d620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d624:	f04f 0901 	mov.w	r9, #1
 800d628:	4623      	mov	r3, r4
 800d62a:	469a      	mov	sl, r3
 800d62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d630:	b10a      	cbz	r2, 800d636 <_vfiprintf_r+0xa2>
 800d632:	2a25      	cmp	r2, #37	; 0x25
 800d634:	d1f9      	bne.n	800d62a <_vfiprintf_r+0x96>
 800d636:	ebba 0b04 	subs.w	fp, sl, r4
 800d63a:	d00b      	beq.n	800d654 <_vfiprintf_r+0xc0>
 800d63c:	465b      	mov	r3, fp
 800d63e:	4622      	mov	r2, r4
 800d640:	4629      	mov	r1, r5
 800d642:	4630      	mov	r0, r6
 800d644:	f7ff ff94 	bl	800d570 <__sfputs_r>
 800d648:	3001      	adds	r0, #1
 800d64a:	f000 80aa 	beq.w	800d7a2 <_vfiprintf_r+0x20e>
 800d64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d650:	445a      	add	r2, fp
 800d652:	9209      	str	r2, [sp, #36]	; 0x24
 800d654:	f89a 3000 	ldrb.w	r3, [sl]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 80a2 	beq.w	800d7a2 <_vfiprintf_r+0x20e>
 800d65e:	2300      	movs	r3, #0
 800d660:	f04f 32ff 	mov.w	r2, #4294967295
 800d664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d668:	f10a 0a01 	add.w	sl, sl, #1
 800d66c:	9304      	str	r3, [sp, #16]
 800d66e:	9307      	str	r3, [sp, #28]
 800d670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d674:	931a      	str	r3, [sp, #104]	; 0x68
 800d676:	4654      	mov	r4, sl
 800d678:	2205      	movs	r2, #5
 800d67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d67e:	4858      	ldr	r0, [pc, #352]	; (800d7e0 <_vfiprintf_r+0x24c>)
 800d680:	f7f2 fdc6 	bl	8000210 <memchr>
 800d684:	9a04      	ldr	r2, [sp, #16]
 800d686:	b9d8      	cbnz	r0, 800d6c0 <_vfiprintf_r+0x12c>
 800d688:	06d1      	lsls	r1, r2, #27
 800d68a:	bf44      	itt	mi
 800d68c:	2320      	movmi	r3, #32
 800d68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d692:	0713      	lsls	r3, r2, #28
 800d694:	bf44      	itt	mi
 800d696:	232b      	movmi	r3, #43	; 0x2b
 800d698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d69c:	f89a 3000 	ldrb.w	r3, [sl]
 800d6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d6a2:	d015      	beq.n	800d6d0 <_vfiprintf_r+0x13c>
 800d6a4:	9a07      	ldr	r2, [sp, #28]
 800d6a6:	4654      	mov	r4, sl
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	f04f 0c0a 	mov.w	ip, #10
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6b4:	3b30      	subs	r3, #48	; 0x30
 800d6b6:	2b09      	cmp	r3, #9
 800d6b8:	d94e      	bls.n	800d758 <_vfiprintf_r+0x1c4>
 800d6ba:	b1b0      	cbz	r0, 800d6ea <_vfiprintf_r+0x156>
 800d6bc:	9207      	str	r2, [sp, #28]
 800d6be:	e014      	b.n	800d6ea <_vfiprintf_r+0x156>
 800d6c0:	eba0 0308 	sub.w	r3, r0, r8
 800d6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	9304      	str	r3, [sp, #16]
 800d6cc:	46a2      	mov	sl, r4
 800d6ce:	e7d2      	b.n	800d676 <_vfiprintf_r+0xe2>
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	1d19      	adds	r1, r3, #4
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	9103      	str	r1, [sp, #12]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	bfbb      	ittet	lt
 800d6dc:	425b      	neglt	r3, r3
 800d6de:	f042 0202 	orrlt.w	r2, r2, #2
 800d6e2:	9307      	strge	r3, [sp, #28]
 800d6e4:	9307      	strlt	r3, [sp, #28]
 800d6e6:	bfb8      	it	lt
 800d6e8:	9204      	strlt	r2, [sp, #16]
 800d6ea:	7823      	ldrb	r3, [r4, #0]
 800d6ec:	2b2e      	cmp	r3, #46	; 0x2e
 800d6ee:	d10c      	bne.n	800d70a <_vfiprintf_r+0x176>
 800d6f0:	7863      	ldrb	r3, [r4, #1]
 800d6f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6f4:	d135      	bne.n	800d762 <_vfiprintf_r+0x1ce>
 800d6f6:	9b03      	ldr	r3, [sp, #12]
 800d6f8:	1d1a      	adds	r2, r3, #4
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	9203      	str	r2, [sp, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	bfb8      	it	lt
 800d702:	f04f 33ff 	movlt.w	r3, #4294967295
 800d706:	3402      	adds	r4, #2
 800d708:	9305      	str	r3, [sp, #20]
 800d70a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7f0 <_vfiprintf_r+0x25c>
 800d70e:	7821      	ldrb	r1, [r4, #0]
 800d710:	2203      	movs	r2, #3
 800d712:	4650      	mov	r0, sl
 800d714:	f7f2 fd7c 	bl	8000210 <memchr>
 800d718:	b140      	cbz	r0, 800d72c <_vfiprintf_r+0x198>
 800d71a:	2340      	movs	r3, #64	; 0x40
 800d71c:	eba0 000a 	sub.w	r0, r0, sl
 800d720:	fa03 f000 	lsl.w	r0, r3, r0
 800d724:	9b04      	ldr	r3, [sp, #16]
 800d726:	4303      	orrs	r3, r0
 800d728:	3401      	adds	r4, #1
 800d72a:	9304      	str	r3, [sp, #16]
 800d72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d730:	482c      	ldr	r0, [pc, #176]	; (800d7e4 <_vfiprintf_r+0x250>)
 800d732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d736:	2206      	movs	r2, #6
 800d738:	f7f2 fd6a 	bl	8000210 <memchr>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d03f      	beq.n	800d7c0 <_vfiprintf_r+0x22c>
 800d740:	4b29      	ldr	r3, [pc, #164]	; (800d7e8 <_vfiprintf_r+0x254>)
 800d742:	bb1b      	cbnz	r3, 800d78c <_vfiprintf_r+0x1f8>
 800d744:	9b03      	ldr	r3, [sp, #12]
 800d746:	3307      	adds	r3, #7
 800d748:	f023 0307 	bic.w	r3, r3, #7
 800d74c:	3308      	adds	r3, #8
 800d74e:	9303      	str	r3, [sp, #12]
 800d750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d752:	443b      	add	r3, r7
 800d754:	9309      	str	r3, [sp, #36]	; 0x24
 800d756:	e767      	b.n	800d628 <_vfiprintf_r+0x94>
 800d758:	fb0c 3202 	mla	r2, ip, r2, r3
 800d75c:	460c      	mov	r4, r1
 800d75e:	2001      	movs	r0, #1
 800d760:	e7a5      	b.n	800d6ae <_vfiprintf_r+0x11a>
 800d762:	2300      	movs	r3, #0
 800d764:	3401      	adds	r4, #1
 800d766:	9305      	str	r3, [sp, #20]
 800d768:	4619      	mov	r1, r3
 800d76a:	f04f 0c0a 	mov.w	ip, #10
 800d76e:	4620      	mov	r0, r4
 800d770:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d774:	3a30      	subs	r2, #48	; 0x30
 800d776:	2a09      	cmp	r2, #9
 800d778:	d903      	bls.n	800d782 <_vfiprintf_r+0x1ee>
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d0c5      	beq.n	800d70a <_vfiprintf_r+0x176>
 800d77e:	9105      	str	r1, [sp, #20]
 800d780:	e7c3      	b.n	800d70a <_vfiprintf_r+0x176>
 800d782:	fb0c 2101 	mla	r1, ip, r1, r2
 800d786:	4604      	mov	r4, r0
 800d788:	2301      	movs	r3, #1
 800d78a:	e7f0      	b.n	800d76e <_vfiprintf_r+0x1da>
 800d78c:	ab03      	add	r3, sp, #12
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	462a      	mov	r2, r5
 800d792:	4b16      	ldr	r3, [pc, #88]	; (800d7ec <_vfiprintf_r+0x258>)
 800d794:	a904      	add	r1, sp, #16
 800d796:	4630      	mov	r0, r6
 800d798:	f7fc ff8c 	bl	800a6b4 <_printf_float>
 800d79c:	4607      	mov	r7, r0
 800d79e:	1c78      	adds	r0, r7, #1
 800d7a0:	d1d6      	bne.n	800d750 <_vfiprintf_r+0x1bc>
 800d7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7a4:	07d9      	lsls	r1, r3, #31
 800d7a6:	d405      	bmi.n	800d7b4 <_vfiprintf_r+0x220>
 800d7a8:	89ab      	ldrh	r3, [r5, #12]
 800d7aa:	059a      	lsls	r2, r3, #22
 800d7ac:	d402      	bmi.n	800d7b4 <_vfiprintf_r+0x220>
 800d7ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7b0:	f7ff fe6b 	bl	800d48a <__retarget_lock_release_recursive>
 800d7b4:	89ab      	ldrh	r3, [r5, #12]
 800d7b6:	065b      	lsls	r3, r3, #25
 800d7b8:	f53f af12 	bmi.w	800d5e0 <_vfiprintf_r+0x4c>
 800d7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7be:	e711      	b.n	800d5e4 <_vfiprintf_r+0x50>
 800d7c0:	ab03      	add	r3, sp, #12
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	462a      	mov	r2, r5
 800d7c6:	4b09      	ldr	r3, [pc, #36]	; (800d7ec <_vfiprintf_r+0x258>)
 800d7c8:	a904      	add	r1, sp, #16
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	f7fd fa16 	bl	800abfc <_printf_i>
 800d7d0:	e7e4      	b.n	800d79c <_vfiprintf_r+0x208>
 800d7d2:	bf00      	nop
 800d7d4:	0800f1b4 	.word	0x0800f1b4
 800d7d8:	0800f1d4 	.word	0x0800f1d4
 800d7dc:	0800f194 	.word	0x0800f194
 800d7e0:	0800f12c 	.word	0x0800f12c
 800d7e4:	0800f136 	.word	0x0800f136
 800d7e8:	0800a6b5 	.word	0x0800a6b5
 800d7ec:	0800d571 	.word	0x0800d571
 800d7f0:	0800f132 	.word	0x0800f132

0800d7f4 <__swbuf_r>:
 800d7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f6:	460e      	mov	r6, r1
 800d7f8:	4614      	mov	r4, r2
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	b118      	cbz	r0, 800d806 <__swbuf_r+0x12>
 800d7fe:	6983      	ldr	r3, [r0, #24]
 800d800:	b90b      	cbnz	r3, 800d806 <__swbuf_r+0x12>
 800d802:	f7ff fd91 	bl	800d328 <__sinit>
 800d806:	4b21      	ldr	r3, [pc, #132]	; (800d88c <__swbuf_r+0x98>)
 800d808:	429c      	cmp	r4, r3
 800d80a:	d12b      	bne.n	800d864 <__swbuf_r+0x70>
 800d80c:	686c      	ldr	r4, [r5, #4]
 800d80e:	69a3      	ldr	r3, [r4, #24]
 800d810:	60a3      	str	r3, [r4, #8]
 800d812:	89a3      	ldrh	r3, [r4, #12]
 800d814:	071a      	lsls	r2, r3, #28
 800d816:	d52f      	bpl.n	800d878 <__swbuf_r+0x84>
 800d818:	6923      	ldr	r3, [r4, #16]
 800d81a:	b36b      	cbz	r3, 800d878 <__swbuf_r+0x84>
 800d81c:	6923      	ldr	r3, [r4, #16]
 800d81e:	6820      	ldr	r0, [r4, #0]
 800d820:	1ac0      	subs	r0, r0, r3
 800d822:	6963      	ldr	r3, [r4, #20]
 800d824:	b2f6      	uxtb	r6, r6
 800d826:	4283      	cmp	r3, r0
 800d828:	4637      	mov	r7, r6
 800d82a:	dc04      	bgt.n	800d836 <__swbuf_r+0x42>
 800d82c:	4621      	mov	r1, r4
 800d82e:	4628      	mov	r0, r5
 800d830:	f7ff fce6 	bl	800d200 <_fflush_r>
 800d834:	bb30      	cbnz	r0, 800d884 <__swbuf_r+0x90>
 800d836:	68a3      	ldr	r3, [r4, #8]
 800d838:	3b01      	subs	r3, #1
 800d83a:	60a3      	str	r3, [r4, #8]
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	1c5a      	adds	r2, r3, #1
 800d840:	6022      	str	r2, [r4, #0]
 800d842:	701e      	strb	r6, [r3, #0]
 800d844:	6963      	ldr	r3, [r4, #20]
 800d846:	3001      	adds	r0, #1
 800d848:	4283      	cmp	r3, r0
 800d84a:	d004      	beq.n	800d856 <__swbuf_r+0x62>
 800d84c:	89a3      	ldrh	r3, [r4, #12]
 800d84e:	07db      	lsls	r3, r3, #31
 800d850:	d506      	bpl.n	800d860 <__swbuf_r+0x6c>
 800d852:	2e0a      	cmp	r6, #10
 800d854:	d104      	bne.n	800d860 <__swbuf_r+0x6c>
 800d856:	4621      	mov	r1, r4
 800d858:	4628      	mov	r0, r5
 800d85a:	f7ff fcd1 	bl	800d200 <_fflush_r>
 800d85e:	b988      	cbnz	r0, 800d884 <__swbuf_r+0x90>
 800d860:	4638      	mov	r0, r7
 800d862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d864:	4b0a      	ldr	r3, [pc, #40]	; (800d890 <__swbuf_r+0x9c>)
 800d866:	429c      	cmp	r4, r3
 800d868:	d101      	bne.n	800d86e <__swbuf_r+0x7a>
 800d86a:	68ac      	ldr	r4, [r5, #8]
 800d86c:	e7cf      	b.n	800d80e <__swbuf_r+0x1a>
 800d86e:	4b09      	ldr	r3, [pc, #36]	; (800d894 <__swbuf_r+0xa0>)
 800d870:	429c      	cmp	r4, r3
 800d872:	bf08      	it	eq
 800d874:	68ec      	ldreq	r4, [r5, #12]
 800d876:	e7ca      	b.n	800d80e <__swbuf_r+0x1a>
 800d878:	4621      	mov	r1, r4
 800d87a:	4628      	mov	r0, r5
 800d87c:	f000 f81a 	bl	800d8b4 <__swsetup_r>
 800d880:	2800      	cmp	r0, #0
 800d882:	d0cb      	beq.n	800d81c <__swbuf_r+0x28>
 800d884:	f04f 37ff 	mov.w	r7, #4294967295
 800d888:	e7ea      	b.n	800d860 <__swbuf_r+0x6c>
 800d88a:	bf00      	nop
 800d88c:	0800f1b4 	.word	0x0800f1b4
 800d890:	0800f1d4 	.word	0x0800f1d4
 800d894:	0800f194 	.word	0x0800f194

0800d898 <__ascii_wctomb>:
 800d898:	b149      	cbz	r1, 800d8ae <__ascii_wctomb+0x16>
 800d89a:	2aff      	cmp	r2, #255	; 0xff
 800d89c:	bf85      	ittet	hi
 800d89e:	238a      	movhi	r3, #138	; 0x8a
 800d8a0:	6003      	strhi	r3, [r0, #0]
 800d8a2:	700a      	strbls	r2, [r1, #0]
 800d8a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d8a8:	bf98      	it	ls
 800d8aa:	2001      	movls	r0, #1
 800d8ac:	4770      	bx	lr
 800d8ae:	4608      	mov	r0, r1
 800d8b0:	4770      	bx	lr
	...

0800d8b4 <__swsetup_r>:
 800d8b4:	4b32      	ldr	r3, [pc, #200]	; (800d980 <__swsetup_r+0xcc>)
 800d8b6:	b570      	push	{r4, r5, r6, lr}
 800d8b8:	681d      	ldr	r5, [r3, #0]
 800d8ba:	4606      	mov	r6, r0
 800d8bc:	460c      	mov	r4, r1
 800d8be:	b125      	cbz	r5, 800d8ca <__swsetup_r+0x16>
 800d8c0:	69ab      	ldr	r3, [r5, #24]
 800d8c2:	b913      	cbnz	r3, 800d8ca <__swsetup_r+0x16>
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	f7ff fd2f 	bl	800d328 <__sinit>
 800d8ca:	4b2e      	ldr	r3, [pc, #184]	; (800d984 <__swsetup_r+0xd0>)
 800d8cc:	429c      	cmp	r4, r3
 800d8ce:	d10f      	bne.n	800d8f0 <__swsetup_r+0x3c>
 800d8d0:	686c      	ldr	r4, [r5, #4]
 800d8d2:	89a3      	ldrh	r3, [r4, #12]
 800d8d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8d8:	0719      	lsls	r1, r3, #28
 800d8da:	d42c      	bmi.n	800d936 <__swsetup_r+0x82>
 800d8dc:	06dd      	lsls	r5, r3, #27
 800d8de:	d411      	bmi.n	800d904 <__swsetup_r+0x50>
 800d8e0:	2309      	movs	r3, #9
 800d8e2:	6033      	str	r3, [r6, #0]
 800d8e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8e8:	81a3      	strh	r3, [r4, #12]
 800d8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ee:	e03e      	b.n	800d96e <__swsetup_r+0xba>
 800d8f0:	4b25      	ldr	r3, [pc, #148]	; (800d988 <__swsetup_r+0xd4>)
 800d8f2:	429c      	cmp	r4, r3
 800d8f4:	d101      	bne.n	800d8fa <__swsetup_r+0x46>
 800d8f6:	68ac      	ldr	r4, [r5, #8]
 800d8f8:	e7eb      	b.n	800d8d2 <__swsetup_r+0x1e>
 800d8fa:	4b24      	ldr	r3, [pc, #144]	; (800d98c <__swsetup_r+0xd8>)
 800d8fc:	429c      	cmp	r4, r3
 800d8fe:	bf08      	it	eq
 800d900:	68ec      	ldreq	r4, [r5, #12]
 800d902:	e7e6      	b.n	800d8d2 <__swsetup_r+0x1e>
 800d904:	0758      	lsls	r0, r3, #29
 800d906:	d512      	bpl.n	800d92e <__swsetup_r+0x7a>
 800d908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d90a:	b141      	cbz	r1, 800d91e <__swsetup_r+0x6a>
 800d90c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d910:	4299      	cmp	r1, r3
 800d912:	d002      	beq.n	800d91a <__swsetup_r+0x66>
 800d914:	4630      	mov	r0, r6
 800d916:	f7fc fd4d 	bl	800a3b4 <_free_r>
 800d91a:	2300      	movs	r3, #0
 800d91c:	6363      	str	r3, [r4, #52]	; 0x34
 800d91e:	89a3      	ldrh	r3, [r4, #12]
 800d920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d924:	81a3      	strh	r3, [r4, #12]
 800d926:	2300      	movs	r3, #0
 800d928:	6063      	str	r3, [r4, #4]
 800d92a:	6923      	ldr	r3, [r4, #16]
 800d92c:	6023      	str	r3, [r4, #0]
 800d92e:	89a3      	ldrh	r3, [r4, #12]
 800d930:	f043 0308 	orr.w	r3, r3, #8
 800d934:	81a3      	strh	r3, [r4, #12]
 800d936:	6923      	ldr	r3, [r4, #16]
 800d938:	b94b      	cbnz	r3, 800d94e <__swsetup_r+0x9a>
 800d93a:	89a3      	ldrh	r3, [r4, #12]
 800d93c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d944:	d003      	beq.n	800d94e <__swsetup_r+0x9a>
 800d946:	4621      	mov	r1, r4
 800d948:	4630      	mov	r0, r6
 800d94a:	f000 f84d 	bl	800d9e8 <__smakebuf_r>
 800d94e:	89a0      	ldrh	r0, [r4, #12]
 800d950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d954:	f010 0301 	ands.w	r3, r0, #1
 800d958:	d00a      	beq.n	800d970 <__swsetup_r+0xbc>
 800d95a:	2300      	movs	r3, #0
 800d95c:	60a3      	str	r3, [r4, #8]
 800d95e:	6963      	ldr	r3, [r4, #20]
 800d960:	425b      	negs	r3, r3
 800d962:	61a3      	str	r3, [r4, #24]
 800d964:	6923      	ldr	r3, [r4, #16]
 800d966:	b943      	cbnz	r3, 800d97a <__swsetup_r+0xc6>
 800d968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d96c:	d1ba      	bne.n	800d8e4 <__swsetup_r+0x30>
 800d96e:	bd70      	pop	{r4, r5, r6, pc}
 800d970:	0781      	lsls	r1, r0, #30
 800d972:	bf58      	it	pl
 800d974:	6963      	ldrpl	r3, [r4, #20]
 800d976:	60a3      	str	r3, [r4, #8]
 800d978:	e7f4      	b.n	800d964 <__swsetup_r+0xb0>
 800d97a:	2000      	movs	r0, #0
 800d97c:	e7f7      	b.n	800d96e <__swsetup_r+0xba>
 800d97e:	bf00      	nop
 800d980:	200001d8 	.word	0x200001d8
 800d984:	0800f1b4 	.word	0x0800f1b4
 800d988:	0800f1d4 	.word	0x0800f1d4
 800d98c:	0800f194 	.word	0x0800f194

0800d990 <abort>:
 800d990:	b508      	push	{r3, lr}
 800d992:	2006      	movs	r0, #6
 800d994:	f000 f898 	bl	800dac8 <raise>
 800d998:	2001      	movs	r0, #1
 800d99a:	f7f6 f98b 	bl	8003cb4 <_exit>

0800d99e <__swhatbuf_r>:
 800d99e:	b570      	push	{r4, r5, r6, lr}
 800d9a0:	460e      	mov	r6, r1
 800d9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a6:	2900      	cmp	r1, #0
 800d9a8:	b096      	sub	sp, #88	; 0x58
 800d9aa:	4614      	mov	r4, r2
 800d9ac:	461d      	mov	r5, r3
 800d9ae:	da08      	bge.n	800d9c2 <__swhatbuf_r+0x24>
 800d9b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	602a      	str	r2, [r5, #0]
 800d9b8:	061a      	lsls	r2, r3, #24
 800d9ba:	d410      	bmi.n	800d9de <__swhatbuf_r+0x40>
 800d9bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9c0:	e00e      	b.n	800d9e0 <__swhatbuf_r+0x42>
 800d9c2:	466a      	mov	r2, sp
 800d9c4:	f000 f89c 	bl	800db00 <_fstat_r>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	dbf1      	blt.n	800d9b0 <__swhatbuf_r+0x12>
 800d9cc:	9a01      	ldr	r2, [sp, #4]
 800d9ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9d6:	425a      	negs	r2, r3
 800d9d8:	415a      	adcs	r2, r3
 800d9da:	602a      	str	r2, [r5, #0]
 800d9dc:	e7ee      	b.n	800d9bc <__swhatbuf_r+0x1e>
 800d9de:	2340      	movs	r3, #64	; 0x40
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	6023      	str	r3, [r4, #0]
 800d9e4:	b016      	add	sp, #88	; 0x58
 800d9e6:	bd70      	pop	{r4, r5, r6, pc}

0800d9e8 <__smakebuf_r>:
 800d9e8:	898b      	ldrh	r3, [r1, #12]
 800d9ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9ec:	079d      	lsls	r5, r3, #30
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	460c      	mov	r4, r1
 800d9f2:	d507      	bpl.n	800da04 <__smakebuf_r+0x1c>
 800d9f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9f8:	6023      	str	r3, [r4, #0]
 800d9fa:	6123      	str	r3, [r4, #16]
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	6163      	str	r3, [r4, #20]
 800da00:	b002      	add	sp, #8
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	ab01      	add	r3, sp, #4
 800da06:	466a      	mov	r2, sp
 800da08:	f7ff ffc9 	bl	800d99e <__swhatbuf_r>
 800da0c:	9900      	ldr	r1, [sp, #0]
 800da0e:	4605      	mov	r5, r0
 800da10:	4630      	mov	r0, r6
 800da12:	f7fc fd3b 	bl	800a48c <_malloc_r>
 800da16:	b948      	cbnz	r0, 800da2c <__smakebuf_r+0x44>
 800da18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da1c:	059a      	lsls	r2, r3, #22
 800da1e:	d4ef      	bmi.n	800da00 <__smakebuf_r+0x18>
 800da20:	f023 0303 	bic.w	r3, r3, #3
 800da24:	f043 0302 	orr.w	r3, r3, #2
 800da28:	81a3      	strh	r3, [r4, #12]
 800da2a:	e7e3      	b.n	800d9f4 <__smakebuf_r+0xc>
 800da2c:	4b0d      	ldr	r3, [pc, #52]	; (800da64 <__smakebuf_r+0x7c>)
 800da2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800da30:	89a3      	ldrh	r3, [r4, #12]
 800da32:	6020      	str	r0, [r4, #0]
 800da34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da38:	81a3      	strh	r3, [r4, #12]
 800da3a:	9b00      	ldr	r3, [sp, #0]
 800da3c:	6163      	str	r3, [r4, #20]
 800da3e:	9b01      	ldr	r3, [sp, #4]
 800da40:	6120      	str	r0, [r4, #16]
 800da42:	b15b      	cbz	r3, 800da5c <__smakebuf_r+0x74>
 800da44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da48:	4630      	mov	r0, r6
 800da4a:	f000 f86b 	bl	800db24 <_isatty_r>
 800da4e:	b128      	cbz	r0, 800da5c <__smakebuf_r+0x74>
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	f023 0303 	bic.w	r3, r3, #3
 800da56:	f043 0301 	orr.w	r3, r3, #1
 800da5a:	81a3      	strh	r3, [r4, #12]
 800da5c:	89a0      	ldrh	r0, [r4, #12]
 800da5e:	4305      	orrs	r5, r0
 800da60:	81a5      	strh	r5, [r4, #12]
 800da62:	e7cd      	b.n	800da00 <__smakebuf_r+0x18>
 800da64:	0800d2c1 	.word	0x0800d2c1

0800da68 <_malloc_usable_size_r>:
 800da68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da6c:	1f18      	subs	r0, r3, #4
 800da6e:	2b00      	cmp	r3, #0
 800da70:	bfbc      	itt	lt
 800da72:	580b      	ldrlt	r3, [r1, r0]
 800da74:	18c0      	addlt	r0, r0, r3
 800da76:	4770      	bx	lr

0800da78 <_raise_r>:
 800da78:	291f      	cmp	r1, #31
 800da7a:	b538      	push	{r3, r4, r5, lr}
 800da7c:	4604      	mov	r4, r0
 800da7e:	460d      	mov	r5, r1
 800da80:	d904      	bls.n	800da8c <_raise_r+0x14>
 800da82:	2316      	movs	r3, #22
 800da84:	6003      	str	r3, [r0, #0]
 800da86:	f04f 30ff 	mov.w	r0, #4294967295
 800da8a:	bd38      	pop	{r3, r4, r5, pc}
 800da8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da8e:	b112      	cbz	r2, 800da96 <_raise_r+0x1e>
 800da90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da94:	b94b      	cbnz	r3, 800daaa <_raise_r+0x32>
 800da96:	4620      	mov	r0, r4
 800da98:	f000 f830 	bl	800dafc <_getpid_r>
 800da9c:	462a      	mov	r2, r5
 800da9e:	4601      	mov	r1, r0
 800daa0:	4620      	mov	r0, r4
 800daa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daa6:	f000 b817 	b.w	800dad8 <_kill_r>
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d00a      	beq.n	800dac4 <_raise_r+0x4c>
 800daae:	1c59      	adds	r1, r3, #1
 800dab0:	d103      	bne.n	800daba <_raise_r+0x42>
 800dab2:	2316      	movs	r3, #22
 800dab4:	6003      	str	r3, [r0, #0]
 800dab6:	2001      	movs	r0, #1
 800dab8:	e7e7      	b.n	800da8a <_raise_r+0x12>
 800daba:	2400      	movs	r4, #0
 800dabc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dac0:	4628      	mov	r0, r5
 800dac2:	4798      	blx	r3
 800dac4:	2000      	movs	r0, #0
 800dac6:	e7e0      	b.n	800da8a <_raise_r+0x12>

0800dac8 <raise>:
 800dac8:	4b02      	ldr	r3, [pc, #8]	; (800dad4 <raise+0xc>)
 800daca:	4601      	mov	r1, r0
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f7ff bfd3 	b.w	800da78 <_raise_r>
 800dad2:	bf00      	nop
 800dad4:	200001d8 	.word	0x200001d8

0800dad8 <_kill_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4d07      	ldr	r5, [pc, #28]	; (800daf8 <_kill_r+0x20>)
 800dadc:	2300      	movs	r3, #0
 800dade:	4604      	mov	r4, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	4611      	mov	r1, r2
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	f7f6 f8d5 	bl	8003c94 <_kill>
 800daea:	1c43      	adds	r3, r0, #1
 800daec:	d102      	bne.n	800daf4 <_kill_r+0x1c>
 800daee:	682b      	ldr	r3, [r5, #0]
 800daf0:	b103      	cbz	r3, 800daf4 <_kill_r+0x1c>
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	bd38      	pop	{r3, r4, r5, pc}
 800daf6:	bf00      	nop
 800daf8:	20000c28 	.word	0x20000c28

0800dafc <_getpid_r>:
 800dafc:	f7f6 b8c2 	b.w	8003c84 <_getpid>

0800db00 <_fstat_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	4d07      	ldr	r5, [pc, #28]	; (800db20 <_fstat_r+0x20>)
 800db04:	2300      	movs	r3, #0
 800db06:	4604      	mov	r4, r0
 800db08:	4608      	mov	r0, r1
 800db0a:	4611      	mov	r1, r2
 800db0c:	602b      	str	r3, [r5, #0]
 800db0e:	f7f6 f920 	bl	8003d52 <_fstat>
 800db12:	1c43      	adds	r3, r0, #1
 800db14:	d102      	bne.n	800db1c <_fstat_r+0x1c>
 800db16:	682b      	ldr	r3, [r5, #0]
 800db18:	b103      	cbz	r3, 800db1c <_fstat_r+0x1c>
 800db1a:	6023      	str	r3, [r4, #0]
 800db1c:	bd38      	pop	{r3, r4, r5, pc}
 800db1e:	bf00      	nop
 800db20:	20000c28 	.word	0x20000c28

0800db24 <_isatty_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	4d06      	ldr	r5, [pc, #24]	; (800db40 <_isatty_r+0x1c>)
 800db28:	2300      	movs	r3, #0
 800db2a:	4604      	mov	r4, r0
 800db2c:	4608      	mov	r0, r1
 800db2e:	602b      	str	r3, [r5, #0]
 800db30:	f7f6 f91f 	bl	8003d72 <_isatty>
 800db34:	1c43      	adds	r3, r0, #1
 800db36:	d102      	bne.n	800db3e <_isatty_r+0x1a>
 800db38:	682b      	ldr	r3, [r5, #0]
 800db3a:	b103      	cbz	r3, 800db3e <_isatty_r+0x1a>
 800db3c:	6023      	str	r3, [r4, #0]
 800db3e:	bd38      	pop	{r3, r4, r5, pc}
 800db40:	20000c28 	.word	0x20000c28
 800db44:	00000000 	.word	0x00000000

0800db48 <atan>:
 800db48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db4c:	ec55 4b10 	vmov	r4, r5, d0
 800db50:	4bc3      	ldr	r3, [pc, #780]	; (800de60 <atan+0x318>)
 800db52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db56:	429e      	cmp	r6, r3
 800db58:	46ab      	mov	fp, r5
 800db5a:	dd18      	ble.n	800db8e <atan+0x46>
 800db5c:	4bc1      	ldr	r3, [pc, #772]	; (800de64 <atan+0x31c>)
 800db5e:	429e      	cmp	r6, r3
 800db60:	dc01      	bgt.n	800db66 <atan+0x1e>
 800db62:	d109      	bne.n	800db78 <atan+0x30>
 800db64:	b144      	cbz	r4, 800db78 <atan+0x30>
 800db66:	4622      	mov	r2, r4
 800db68:	462b      	mov	r3, r5
 800db6a:	4620      	mov	r0, r4
 800db6c:	4629      	mov	r1, r5
 800db6e:	f7f2 fba5 	bl	80002bc <__adddf3>
 800db72:	4604      	mov	r4, r0
 800db74:	460d      	mov	r5, r1
 800db76:	e006      	b.n	800db86 <atan+0x3e>
 800db78:	f1bb 0f00 	cmp.w	fp, #0
 800db7c:	f300 8131 	bgt.w	800dde2 <atan+0x29a>
 800db80:	a59b      	add	r5, pc, #620	; (adr r5, 800ddf0 <atan+0x2a8>)
 800db82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db86:	ec45 4b10 	vmov	d0, r4, r5
 800db8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8e:	4bb6      	ldr	r3, [pc, #728]	; (800de68 <atan+0x320>)
 800db90:	429e      	cmp	r6, r3
 800db92:	dc14      	bgt.n	800dbbe <atan+0x76>
 800db94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800db98:	429e      	cmp	r6, r3
 800db9a:	dc0d      	bgt.n	800dbb8 <atan+0x70>
 800db9c:	a396      	add	r3, pc, #600	; (adr r3, 800ddf8 <atan+0x2b0>)
 800db9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba2:	ee10 0a10 	vmov	r0, s0
 800dba6:	4629      	mov	r1, r5
 800dba8:	f7f2 fb88 	bl	80002bc <__adddf3>
 800dbac:	4baf      	ldr	r3, [pc, #700]	; (800de6c <atan+0x324>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f7f2 ffca 	bl	8000b48 <__aeabi_dcmpgt>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d1e6      	bne.n	800db86 <atan+0x3e>
 800dbb8:	f04f 3aff 	mov.w	sl, #4294967295
 800dbbc:	e02b      	b.n	800dc16 <atan+0xce>
 800dbbe:	f000 f963 	bl	800de88 <fabs>
 800dbc2:	4bab      	ldr	r3, [pc, #684]	; (800de70 <atan+0x328>)
 800dbc4:	429e      	cmp	r6, r3
 800dbc6:	ec55 4b10 	vmov	r4, r5, d0
 800dbca:	f300 80bf 	bgt.w	800dd4c <atan+0x204>
 800dbce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dbd2:	429e      	cmp	r6, r3
 800dbd4:	f300 80a0 	bgt.w	800dd18 <atan+0x1d0>
 800dbd8:	ee10 2a10 	vmov	r2, s0
 800dbdc:	ee10 0a10 	vmov	r0, s0
 800dbe0:	462b      	mov	r3, r5
 800dbe2:	4629      	mov	r1, r5
 800dbe4:	f7f2 fb6a 	bl	80002bc <__adddf3>
 800dbe8:	4ba0      	ldr	r3, [pc, #640]	; (800de6c <atan+0x324>)
 800dbea:	2200      	movs	r2, #0
 800dbec:	f7f2 fb64 	bl	80002b8 <__aeabi_dsub>
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	4606      	mov	r6, r0
 800dbf4:	460f      	mov	r7, r1
 800dbf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	f7f2 fb5d 	bl	80002bc <__adddf3>
 800dc02:	4602      	mov	r2, r0
 800dc04:	460b      	mov	r3, r1
 800dc06:	4630      	mov	r0, r6
 800dc08:	4639      	mov	r1, r7
 800dc0a:	f7f2 fe37 	bl	800087c <__aeabi_ddiv>
 800dc0e:	f04f 0a00 	mov.w	sl, #0
 800dc12:	4604      	mov	r4, r0
 800dc14:	460d      	mov	r5, r1
 800dc16:	4622      	mov	r2, r4
 800dc18:	462b      	mov	r3, r5
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	f7f2 fd03 	bl	8000628 <__aeabi_dmul>
 800dc22:	4602      	mov	r2, r0
 800dc24:	460b      	mov	r3, r1
 800dc26:	4680      	mov	r8, r0
 800dc28:	4689      	mov	r9, r1
 800dc2a:	f7f2 fcfd 	bl	8000628 <__aeabi_dmul>
 800dc2e:	a374      	add	r3, pc, #464	; (adr r3, 800de00 <atan+0x2b8>)
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	4606      	mov	r6, r0
 800dc36:	460f      	mov	r7, r1
 800dc38:	f7f2 fcf6 	bl	8000628 <__aeabi_dmul>
 800dc3c:	a372      	add	r3, pc, #456	; (adr r3, 800de08 <atan+0x2c0>)
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	f7f2 fb3b 	bl	80002bc <__adddf3>
 800dc46:	4632      	mov	r2, r6
 800dc48:	463b      	mov	r3, r7
 800dc4a:	f7f2 fced 	bl	8000628 <__aeabi_dmul>
 800dc4e:	a370      	add	r3, pc, #448	; (adr r3, 800de10 <atan+0x2c8>)
 800dc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc54:	f7f2 fb32 	bl	80002bc <__adddf3>
 800dc58:	4632      	mov	r2, r6
 800dc5a:	463b      	mov	r3, r7
 800dc5c:	f7f2 fce4 	bl	8000628 <__aeabi_dmul>
 800dc60:	a36d      	add	r3, pc, #436	; (adr r3, 800de18 <atan+0x2d0>)
 800dc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc66:	f7f2 fb29 	bl	80002bc <__adddf3>
 800dc6a:	4632      	mov	r2, r6
 800dc6c:	463b      	mov	r3, r7
 800dc6e:	f7f2 fcdb 	bl	8000628 <__aeabi_dmul>
 800dc72:	a36b      	add	r3, pc, #428	; (adr r3, 800de20 <atan+0x2d8>)
 800dc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc78:	f7f2 fb20 	bl	80002bc <__adddf3>
 800dc7c:	4632      	mov	r2, r6
 800dc7e:	463b      	mov	r3, r7
 800dc80:	f7f2 fcd2 	bl	8000628 <__aeabi_dmul>
 800dc84:	a368      	add	r3, pc, #416	; (adr r3, 800de28 <atan+0x2e0>)
 800dc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8a:	f7f2 fb17 	bl	80002bc <__adddf3>
 800dc8e:	4642      	mov	r2, r8
 800dc90:	464b      	mov	r3, r9
 800dc92:	f7f2 fcc9 	bl	8000628 <__aeabi_dmul>
 800dc96:	a366      	add	r3, pc, #408	; (adr r3, 800de30 <atan+0x2e8>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	4680      	mov	r8, r0
 800dc9e:	4689      	mov	r9, r1
 800dca0:	4630      	mov	r0, r6
 800dca2:	4639      	mov	r1, r7
 800dca4:	f7f2 fcc0 	bl	8000628 <__aeabi_dmul>
 800dca8:	a363      	add	r3, pc, #396	; (adr r3, 800de38 <atan+0x2f0>)
 800dcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcae:	f7f2 fb03 	bl	80002b8 <__aeabi_dsub>
 800dcb2:	4632      	mov	r2, r6
 800dcb4:	463b      	mov	r3, r7
 800dcb6:	f7f2 fcb7 	bl	8000628 <__aeabi_dmul>
 800dcba:	a361      	add	r3, pc, #388	; (adr r3, 800de40 <atan+0x2f8>)
 800dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc0:	f7f2 fafa 	bl	80002b8 <__aeabi_dsub>
 800dcc4:	4632      	mov	r2, r6
 800dcc6:	463b      	mov	r3, r7
 800dcc8:	f7f2 fcae 	bl	8000628 <__aeabi_dmul>
 800dccc:	a35e      	add	r3, pc, #376	; (adr r3, 800de48 <atan+0x300>)
 800dcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd2:	f7f2 faf1 	bl	80002b8 <__aeabi_dsub>
 800dcd6:	4632      	mov	r2, r6
 800dcd8:	463b      	mov	r3, r7
 800dcda:	f7f2 fca5 	bl	8000628 <__aeabi_dmul>
 800dcde:	a35c      	add	r3, pc, #368	; (adr r3, 800de50 <atan+0x308>)
 800dce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce4:	f7f2 fae8 	bl	80002b8 <__aeabi_dsub>
 800dce8:	4632      	mov	r2, r6
 800dcea:	463b      	mov	r3, r7
 800dcec:	f7f2 fc9c 	bl	8000628 <__aeabi_dmul>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	4649      	mov	r1, r9
 800dcf8:	f7f2 fae0 	bl	80002bc <__adddf3>
 800dcfc:	4622      	mov	r2, r4
 800dcfe:	462b      	mov	r3, r5
 800dd00:	f7f2 fc92 	bl	8000628 <__aeabi_dmul>
 800dd04:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dd08:	4602      	mov	r2, r0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	d14b      	bne.n	800dda6 <atan+0x25e>
 800dd0e:	4620      	mov	r0, r4
 800dd10:	4629      	mov	r1, r5
 800dd12:	f7f2 fad1 	bl	80002b8 <__aeabi_dsub>
 800dd16:	e72c      	b.n	800db72 <atan+0x2a>
 800dd18:	ee10 0a10 	vmov	r0, s0
 800dd1c:	4b53      	ldr	r3, [pc, #332]	; (800de6c <atan+0x324>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	4629      	mov	r1, r5
 800dd22:	f7f2 fac9 	bl	80002b8 <__aeabi_dsub>
 800dd26:	4b51      	ldr	r3, [pc, #324]	; (800de6c <atan+0x324>)
 800dd28:	4606      	mov	r6, r0
 800dd2a:	460f      	mov	r7, r1
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	4620      	mov	r0, r4
 800dd30:	4629      	mov	r1, r5
 800dd32:	f7f2 fac3 	bl	80002bc <__adddf3>
 800dd36:	4602      	mov	r2, r0
 800dd38:	460b      	mov	r3, r1
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	4639      	mov	r1, r7
 800dd3e:	f7f2 fd9d 	bl	800087c <__aeabi_ddiv>
 800dd42:	f04f 0a01 	mov.w	sl, #1
 800dd46:	4604      	mov	r4, r0
 800dd48:	460d      	mov	r5, r1
 800dd4a:	e764      	b.n	800dc16 <atan+0xce>
 800dd4c:	4b49      	ldr	r3, [pc, #292]	; (800de74 <atan+0x32c>)
 800dd4e:	429e      	cmp	r6, r3
 800dd50:	da1d      	bge.n	800dd8e <atan+0x246>
 800dd52:	ee10 0a10 	vmov	r0, s0
 800dd56:	4b48      	ldr	r3, [pc, #288]	; (800de78 <atan+0x330>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	4629      	mov	r1, r5
 800dd5c:	f7f2 faac 	bl	80002b8 <__aeabi_dsub>
 800dd60:	4b45      	ldr	r3, [pc, #276]	; (800de78 <atan+0x330>)
 800dd62:	4606      	mov	r6, r0
 800dd64:	460f      	mov	r7, r1
 800dd66:	2200      	movs	r2, #0
 800dd68:	4620      	mov	r0, r4
 800dd6a:	4629      	mov	r1, r5
 800dd6c:	f7f2 fc5c 	bl	8000628 <__aeabi_dmul>
 800dd70:	4b3e      	ldr	r3, [pc, #248]	; (800de6c <atan+0x324>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	f7f2 faa2 	bl	80002bc <__adddf3>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	4639      	mov	r1, r7
 800dd80:	f7f2 fd7c 	bl	800087c <__aeabi_ddiv>
 800dd84:	f04f 0a02 	mov.w	sl, #2
 800dd88:	4604      	mov	r4, r0
 800dd8a:	460d      	mov	r5, r1
 800dd8c:	e743      	b.n	800dc16 <atan+0xce>
 800dd8e:	462b      	mov	r3, r5
 800dd90:	ee10 2a10 	vmov	r2, s0
 800dd94:	4939      	ldr	r1, [pc, #228]	; (800de7c <atan+0x334>)
 800dd96:	2000      	movs	r0, #0
 800dd98:	f7f2 fd70 	bl	800087c <__aeabi_ddiv>
 800dd9c:	f04f 0a03 	mov.w	sl, #3
 800dda0:	4604      	mov	r4, r0
 800dda2:	460d      	mov	r5, r1
 800dda4:	e737      	b.n	800dc16 <atan+0xce>
 800dda6:	4b36      	ldr	r3, [pc, #216]	; (800de80 <atan+0x338>)
 800dda8:	4e36      	ldr	r6, [pc, #216]	; (800de84 <atan+0x33c>)
 800ddaa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ddae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ddb2:	e9da 2300 	ldrd	r2, r3, [sl]
 800ddb6:	f7f2 fa7f 	bl	80002b8 <__aeabi_dsub>
 800ddba:	4622      	mov	r2, r4
 800ddbc:	462b      	mov	r3, r5
 800ddbe:	f7f2 fa7b 	bl	80002b8 <__aeabi_dsub>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ddca:	f7f2 fa75 	bl	80002b8 <__aeabi_dsub>
 800ddce:	f1bb 0f00 	cmp.w	fp, #0
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	460d      	mov	r5, r1
 800ddd6:	f6bf aed6 	bge.w	800db86 <atan+0x3e>
 800ddda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddde:	461d      	mov	r5, r3
 800dde0:	e6d1      	b.n	800db86 <atan+0x3e>
 800dde2:	a51d      	add	r5, pc, #116	; (adr r5, 800de58 <atan+0x310>)
 800dde4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dde8:	e6cd      	b.n	800db86 <atan+0x3e>
 800ddea:	bf00      	nop
 800ddec:	f3af 8000 	nop.w
 800ddf0:	54442d18 	.word	0x54442d18
 800ddf4:	bff921fb 	.word	0xbff921fb
 800ddf8:	8800759c 	.word	0x8800759c
 800ddfc:	7e37e43c 	.word	0x7e37e43c
 800de00:	e322da11 	.word	0xe322da11
 800de04:	3f90ad3a 	.word	0x3f90ad3a
 800de08:	24760deb 	.word	0x24760deb
 800de0c:	3fa97b4b 	.word	0x3fa97b4b
 800de10:	a0d03d51 	.word	0xa0d03d51
 800de14:	3fb10d66 	.word	0x3fb10d66
 800de18:	c54c206e 	.word	0xc54c206e
 800de1c:	3fb745cd 	.word	0x3fb745cd
 800de20:	920083ff 	.word	0x920083ff
 800de24:	3fc24924 	.word	0x3fc24924
 800de28:	5555550d 	.word	0x5555550d
 800de2c:	3fd55555 	.word	0x3fd55555
 800de30:	2c6a6c2f 	.word	0x2c6a6c2f
 800de34:	bfa2b444 	.word	0xbfa2b444
 800de38:	52defd9a 	.word	0x52defd9a
 800de3c:	3fadde2d 	.word	0x3fadde2d
 800de40:	af749a6d 	.word	0xaf749a6d
 800de44:	3fb3b0f2 	.word	0x3fb3b0f2
 800de48:	fe231671 	.word	0xfe231671
 800de4c:	3fbc71c6 	.word	0x3fbc71c6
 800de50:	9998ebc4 	.word	0x9998ebc4
 800de54:	3fc99999 	.word	0x3fc99999
 800de58:	54442d18 	.word	0x54442d18
 800de5c:	3ff921fb 	.word	0x3ff921fb
 800de60:	440fffff 	.word	0x440fffff
 800de64:	7ff00000 	.word	0x7ff00000
 800de68:	3fdbffff 	.word	0x3fdbffff
 800de6c:	3ff00000 	.word	0x3ff00000
 800de70:	3ff2ffff 	.word	0x3ff2ffff
 800de74:	40038000 	.word	0x40038000
 800de78:	3ff80000 	.word	0x3ff80000
 800de7c:	bff00000 	.word	0xbff00000
 800de80:	0800f220 	.word	0x0800f220
 800de84:	0800f200 	.word	0x0800f200

0800de88 <fabs>:
 800de88:	ec51 0b10 	vmov	r0, r1, d0
 800de8c:	ee10 2a10 	vmov	r2, s0
 800de90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de94:	ec43 2b10 	vmov	d0, r2, r3
 800de98:	4770      	bx	lr

0800de9a <atan2>:
 800de9a:	f000 b82d 	b.w	800def8 <__ieee754_atan2>

0800de9e <sqrt>:
 800de9e:	b538      	push	{r3, r4, r5, lr}
 800dea0:	ed2d 8b02 	vpush	{d8}
 800dea4:	ec55 4b10 	vmov	r4, r5, d0
 800dea8:	f000 f8f0 	bl	800e08c <__ieee754_sqrt>
 800deac:	4622      	mov	r2, r4
 800deae:	462b      	mov	r3, r5
 800deb0:	4620      	mov	r0, r4
 800deb2:	4629      	mov	r1, r5
 800deb4:	eeb0 8a40 	vmov.f32	s16, s0
 800deb8:	eef0 8a60 	vmov.f32	s17, s1
 800debc:	f7f2 fe4e 	bl	8000b5c <__aeabi_dcmpun>
 800dec0:	b990      	cbnz	r0, 800dee8 <sqrt+0x4a>
 800dec2:	2200      	movs	r2, #0
 800dec4:	2300      	movs	r3, #0
 800dec6:	4620      	mov	r0, r4
 800dec8:	4629      	mov	r1, r5
 800deca:	f7f2 fe1f 	bl	8000b0c <__aeabi_dcmplt>
 800dece:	b158      	cbz	r0, 800dee8 <sqrt+0x4a>
 800ded0:	f7fc fa2e 	bl	800a330 <__errno>
 800ded4:	2321      	movs	r3, #33	; 0x21
 800ded6:	6003      	str	r3, [r0, #0]
 800ded8:	2200      	movs	r2, #0
 800deda:	2300      	movs	r3, #0
 800dedc:	4610      	mov	r0, r2
 800dede:	4619      	mov	r1, r3
 800dee0:	f7f2 fccc 	bl	800087c <__aeabi_ddiv>
 800dee4:	ec41 0b18 	vmov	d8, r0, r1
 800dee8:	eeb0 0a48 	vmov.f32	s0, s16
 800deec:	eef0 0a68 	vmov.f32	s1, s17
 800def0:	ecbd 8b02 	vpop	{d8}
 800def4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800def8 <__ieee754_atan2>:
 800def8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800defc:	ec57 6b11 	vmov	r6, r7, d1
 800df00:	4273      	negs	r3, r6
 800df02:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e088 <__ieee754_atan2+0x190>
 800df06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800df0a:	4333      	orrs	r3, r6
 800df0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800df10:	4573      	cmp	r3, lr
 800df12:	ec51 0b10 	vmov	r0, r1, d0
 800df16:	ee11 8a10 	vmov	r8, s2
 800df1a:	d80a      	bhi.n	800df32 <__ieee754_atan2+0x3a>
 800df1c:	4244      	negs	r4, r0
 800df1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df22:	4304      	orrs	r4, r0
 800df24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800df28:	4574      	cmp	r4, lr
 800df2a:	ee10 9a10 	vmov	r9, s0
 800df2e:	468c      	mov	ip, r1
 800df30:	d907      	bls.n	800df42 <__ieee754_atan2+0x4a>
 800df32:	4632      	mov	r2, r6
 800df34:	463b      	mov	r3, r7
 800df36:	f7f2 f9c1 	bl	80002bc <__adddf3>
 800df3a:	ec41 0b10 	vmov	d0, r0, r1
 800df3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800df46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800df4a:	4334      	orrs	r4, r6
 800df4c:	d103      	bne.n	800df56 <__ieee754_atan2+0x5e>
 800df4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df52:	f7ff bdf9 	b.w	800db48 <atan>
 800df56:	17bc      	asrs	r4, r7, #30
 800df58:	f004 0402 	and.w	r4, r4, #2
 800df5c:	ea53 0909 	orrs.w	r9, r3, r9
 800df60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800df64:	d107      	bne.n	800df76 <__ieee754_atan2+0x7e>
 800df66:	2c02      	cmp	r4, #2
 800df68:	d060      	beq.n	800e02c <__ieee754_atan2+0x134>
 800df6a:	2c03      	cmp	r4, #3
 800df6c:	d1e5      	bne.n	800df3a <__ieee754_atan2+0x42>
 800df6e:	a142      	add	r1, pc, #264	; (adr r1, 800e078 <__ieee754_atan2+0x180>)
 800df70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df74:	e7e1      	b.n	800df3a <__ieee754_atan2+0x42>
 800df76:	ea52 0808 	orrs.w	r8, r2, r8
 800df7a:	d106      	bne.n	800df8a <__ieee754_atan2+0x92>
 800df7c:	f1bc 0f00 	cmp.w	ip, #0
 800df80:	da5f      	bge.n	800e042 <__ieee754_atan2+0x14a>
 800df82:	a13f      	add	r1, pc, #252	; (adr r1, 800e080 <__ieee754_atan2+0x188>)
 800df84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df88:	e7d7      	b.n	800df3a <__ieee754_atan2+0x42>
 800df8a:	4572      	cmp	r2, lr
 800df8c:	d10f      	bne.n	800dfae <__ieee754_atan2+0xb6>
 800df8e:	4293      	cmp	r3, r2
 800df90:	f104 34ff 	add.w	r4, r4, #4294967295
 800df94:	d107      	bne.n	800dfa6 <__ieee754_atan2+0xae>
 800df96:	2c02      	cmp	r4, #2
 800df98:	d84c      	bhi.n	800e034 <__ieee754_atan2+0x13c>
 800df9a:	4b35      	ldr	r3, [pc, #212]	; (800e070 <__ieee754_atan2+0x178>)
 800df9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800dfa0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800dfa4:	e7c9      	b.n	800df3a <__ieee754_atan2+0x42>
 800dfa6:	2c02      	cmp	r4, #2
 800dfa8:	d848      	bhi.n	800e03c <__ieee754_atan2+0x144>
 800dfaa:	4b32      	ldr	r3, [pc, #200]	; (800e074 <__ieee754_atan2+0x17c>)
 800dfac:	e7f6      	b.n	800df9c <__ieee754_atan2+0xa4>
 800dfae:	4573      	cmp	r3, lr
 800dfb0:	d0e4      	beq.n	800df7c <__ieee754_atan2+0x84>
 800dfb2:	1a9b      	subs	r3, r3, r2
 800dfb4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800dfb8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dfbc:	da1e      	bge.n	800dffc <__ieee754_atan2+0x104>
 800dfbe:	2f00      	cmp	r7, #0
 800dfc0:	da01      	bge.n	800dfc6 <__ieee754_atan2+0xce>
 800dfc2:	323c      	adds	r2, #60	; 0x3c
 800dfc4:	db1e      	blt.n	800e004 <__ieee754_atan2+0x10c>
 800dfc6:	4632      	mov	r2, r6
 800dfc8:	463b      	mov	r3, r7
 800dfca:	f7f2 fc57 	bl	800087c <__aeabi_ddiv>
 800dfce:	ec41 0b10 	vmov	d0, r0, r1
 800dfd2:	f7ff ff59 	bl	800de88 <fabs>
 800dfd6:	f7ff fdb7 	bl	800db48 <atan>
 800dfda:	ec51 0b10 	vmov	r0, r1, d0
 800dfde:	2c01      	cmp	r4, #1
 800dfe0:	d013      	beq.n	800e00a <__ieee754_atan2+0x112>
 800dfe2:	2c02      	cmp	r4, #2
 800dfe4:	d015      	beq.n	800e012 <__ieee754_atan2+0x11a>
 800dfe6:	2c00      	cmp	r4, #0
 800dfe8:	d0a7      	beq.n	800df3a <__ieee754_atan2+0x42>
 800dfea:	a319      	add	r3, pc, #100	; (adr r3, 800e050 <__ieee754_atan2+0x158>)
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	f7f2 f962 	bl	80002b8 <__aeabi_dsub>
 800dff4:	a318      	add	r3, pc, #96	; (adr r3, 800e058 <__ieee754_atan2+0x160>)
 800dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffa:	e014      	b.n	800e026 <__ieee754_atan2+0x12e>
 800dffc:	a118      	add	r1, pc, #96	; (adr r1, 800e060 <__ieee754_atan2+0x168>)
 800dffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e002:	e7ec      	b.n	800dfde <__ieee754_atan2+0xe6>
 800e004:	2000      	movs	r0, #0
 800e006:	2100      	movs	r1, #0
 800e008:	e7e9      	b.n	800dfde <__ieee754_atan2+0xe6>
 800e00a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e00e:	4619      	mov	r1, r3
 800e010:	e793      	b.n	800df3a <__ieee754_atan2+0x42>
 800e012:	a30f      	add	r3, pc, #60	; (adr r3, 800e050 <__ieee754_atan2+0x158>)
 800e014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e018:	f7f2 f94e 	bl	80002b8 <__aeabi_dsub>
 800e01c:	4602      	mov	r2, r0
 800e01e:	460b      	mov	r3, r1
 800e020:	a10d      	add	r1, pc, #52	; (adr r1, 800e058 <__ieee754_atan2+0x160>)
 800e022:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e026:	f7f2 f947 	bl	80002b8 <__aeabi_dsub>
 800e02a:	e786      	b.n	800df3a <__ieee754_atan2+0x42>
 800e02c:	a10a      	add	r1, pc, #40	; (adr r1, 800e058 <__ieee754_atan2+0x160>)
 800e02e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e032:	e782      	b.n	800df3a <__ieee754_atan2+0x42>
 800e034:	a10c      	add	r1, pc, #48	; (adr r1, 800e068 <__ieee754_atan2+0x170>)
 800e036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e03a:	e77e      	b.n	800df3a <__ieee754_atan2+0x42>
 800e03c:	2000      	movs	r0, #0
 800e03e:	2100      	movs	r1, #0
 800e040:	e77b      	b.n	800df3a <__ieee754_atan2+0x42>
 800e042:	a107      	add	r1, pc, #28	; (adr r1, 800e060 <__ieee754_atan2+0x168>)
 800e044:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e048:	e777      	b.n	800df3a <__ieee754_atan2+0x42>
 800e04a:	bf00      	nop
 800e04c:	f3af 8000 	nop.w
 800e050:	33145c07 	.word	0x33145c07
 800e054:	3ca1a626 	.word	0x3ca1a626
 800e058:	54442d18 	.word	0x54442d18
 800e05c:	400921fb 	.word	0x400921fb
 800e060:	54442d18 	.word	0x54442d18
 800e064:	3ff921fb 	.word	0x3ff921fb
 800e068:	54442d18 	.word	0x54442d18
 800e06c:	3fe921fb 	.word	0x3fe921fb
 800e070:	0800f240 	.word	0x0800f240
 800e074:	0800f258 	.word	0x0800f258
 800e078:	54442d18 	.word	0x54442d18
 800e07c:	c00921fb 	.word	0xc00921fb
 800e080:	54442d18 	.word	0x54442d18
 800e084:	bff921fb 	.word	0xbff921fb
 800e088:	7ff00000 	.word	0x7ff00000

0800e08c <__ieee754_sqrt>:
 800e08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e090:	ec55 4b10 	vmov	r4, r5, d0
 800e094:	4e55      	ldr	r6, [pc, #340]	; (800e1ec <__ieee754_sqrt+0x160>)
 800e096:	43ae      	bics	r6, r5
 800e098:	ee10 0a10 	vmov	r0, s0
 800e09c:	ee10 3a10 	vmov	r3, s0
 800e0a0:	462a      	mov	r2, r5
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	d110      	bne.n	800e0c8 <__ieee754_sqrt+0x3c>
 800e0a6:	ee10 2a10 	vmov	r2, s0
 800e0aa:	462b      	mov	r3, r5
 800e0ac:	f7f2 fabc 	bl	8000628 <__aeabi_dmul>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	4629      	mov	r1, r5
 800e0b8:	f7f2 f900 	bl	80002bc <__adddf3>
 800e0bc:	4604      	mov	r4, r0
 800e0be:	460d      	mov	r5, r1
 800e0c0:	ec45 4b10 	vmov	d0, r4, r5
 800e0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c8:	2d00      	cmp	r5, #0
 800e0ca:	dc10      	bgt.n	800e0ee <__ieee754_sqrt+0x62>
 800e0cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e0d0:	4330      	orrs	r0, r6
 800e0d2:	d0f5      	beq.n	800e0c0 <__ieee754_sqrt+0x34>
 800e0d4:	b15d      	cbz	r5, 800e0ee <__ieee754_sqrt+0x62>
 800e0d6:	ee10 2a10 	vmov	r2, s0
 800e0da:	462b      	mov	r3, r5
 800e0dc:	ee10 0a10 	vmov	r0, s0
 800e0e0:	f7f2 f8ea 	bl	80002b8 <__aeabi_dsub>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	f7f2 fbc8 	bl	800087c <__aeabi_ddiv>
 800e0ec:	e7e6      	b.n	800e0bc <__ieee754_sqrt+0x30>
 800e0ee:	1512      	asrs	r2, r2, #20
 800e0f0:	d074      	beq.n	800e1dc <__ieee754_sqrt+0x150>
 800e0f2:	07d4      	lsls	r4, r2, #31
 800e0f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e0f8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e0fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e100:	bf5e      	ittt	pl
 800e102:	0fda      	lsrpl	r2, r3, #31
 800e104:	005b      	lslpl	r3, r3, #1
 800e106:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e10a:	2400      	movs	r4, #0
 800e10c:	0fda      	lsrs	r2, r3, #31
 800e10e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e112:	107f      	asrs	r7, r7, #1
 800e114:	005b      	lsls	r3, r3, #1
 800e116:	2516      	movs	r5, #22
 800e118:	4620      	mov	r0, r4
 800e11a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e11e:	1886      	adds	r6, r0, r2
 800e120:	428e      	cmp	r6, r1
 800e122:	bfde      	ittt	le
 800e124:	1b89      	suble	r1, r1, r6
 800e126:	18b0      	addle	r0, r6, r2
 800e128:	18a4      	addle	r4, r4, r2
 800e12a:	0049      	lsls	r1, r1, #1
 800e12c:	3d01      	subs	r5, #1
 800e12e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e132:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e136:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e13a:	d1f0      	bne.n	800e11e <__ieee754_sqrt+0x92>
 800e13c:	462a      	mov	r2, r5
 800e13e:	f04f 0e20 	mov.w	lr, #32
 800e142:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e146:	4281      	cmp	r1, r0
 800e148:	eb06 0c05 	add.w	ip, r6, r5
 800e14c:	dc02      	bgt.n	800e154 <__ieee754_sqrt+0xc8>
 800e14e:	d113      	bne.n	800e178 <__ieee754_sqrt+0xec>
 800e150:	459c      	cmp	ip, r3
 800e152:	d811      	bhi.n	800e178 <__ieee754_sqrt+0xec>
 800e154:	f1bc 0f00 	cmp.w	ip, #0
 800e158:	eb0c 0506 	add.w	r5, ip, r6
 800e15c:	da43      	bge.n	800e1e6 <__ieee754_sqrt+0x15a>
 800e15e:	2d00      	cmp	r5, #0
 800e160:	db41      	blt.n	800e1e6 <__ieee754_sqrt+0x15a>
 800e162:	f100 0801 	add.w	r8, r0, #1
 800e166:	1a09      	subs	r1, r1, r0
 800e168:	459c      	cmp	ip, r3
 800e16a:	bf88      	it	hi
 800e16c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e170:	eba3 030c 	sub.w	r3, r3, ip
 800e174:	4432      	add	r2, r6
 800e176:	4640      	mov	r0, r8
 800e178:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e17c:	f1be 0e01 	subs.w	lr, lr, #1
 800e180:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e184:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e188:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e18c:	d1db      	bne.n	800e146 <__ieee754_sqrt+0xba>
 800e18e:	430b      	orrs	r3, r1
 800e190:	d006      	beq.n	800e1a0 <__ieee754_sqrt+0x114>
 800e192:	1c50      	adds	r0, r2, #1
 800e194:	bf13      	iteet	ne
 800e196:	3201      	addne	r2, #1
 800e198:	3401      	addeq	r4, #1
 800e19a:	4672      	moveq	r2, lr
 800e19c:	f022 0201 	bicne.w	r2, r2, #1
 800e1a0:	1063      	asrs	r3, r4, #1
 800e1a2:	0852      	lsrs	r2, r2, #1
 800e1a4:	07e1      	lsls	r1, r4, #31
 800e1a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e1aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e1ae:	bf48      	it	mi
 800e1b0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e1b4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e1b8:	4614      	mov	r4, r2
 800e1ba:	e781      	b.n	800e0c0 <__ieee754_sqrt+0x34>
 800e1bc:	0ad9      	lsrs	r1, r3, #11
 800e1be:	3815      	subs	r0, #21
 800e1c0:	055b      	lsls	r3, r3, #21
 800e1c2:	2900      	cmp	r1, #0
 800e1c4:	d0fa      	beq.n	800e1bc <__ieee754_sqrt+0x130>
 800e1c6:	02cd      	lsls	r5, r1, #11
 800e1c8:	d50a      	bpl.n	800e1e0 <__ieee754_sqrt+0x154>
 800e1ca:	f1c2 0420 	rsb	r4, r2, #32
 800e1ce:	fa23 f404 	lsr.w	r4, r3, r4
 800e1d2:	1e55      	subs	r5, r2, #1
 800e1d4:	4093      	lsls	r3, r2
 800e1d6:	4321      	orrs	r1, r4
 800e1d8:	1b42      	subs	r2, r0, r5
 800e1da:	e78a      	b.n	800e0f2 <__ieee754_sqrt+0x66>
 800e1dc:	4610      	mov	r0, r2
 800e1de:	e7f0      	b.n	800e1c2 <__ieee754_sqrt+0x136>
 800e1e0:	0049      	lsls	r1, r1, #1
 800e1e2:	3201      	adds	r2, #1
 800e1e4:	e7ef      	b.n	800e1c6 <__ieee754_sqrt+0x13a>
 800e1e6:	4680      	mov	r8, r0
 800e1e8:	e7bd      	b.n	800e166 <__ieee754_sqrt+0xda>
 800e1ea:	bf00      	nop
 800e1ec:	7ff00000 	.word	0x7ff00000

0800e1f0 <_init>:
 800e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f2:	bf00      	nop
 800e1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f6:	bc08      	pop	{r3}
 800e1f8:	469e      	mov	lr, r3
 800e1fa:	4770      	bx	lr

0800e1fc <_fini>:
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	bf00      	nop
 800e200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e202:	bc08      	pop	{r3}
 800e204:	469e      	mov	lr, r3
 800e206:	4770      	bx	lr
