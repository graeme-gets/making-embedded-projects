
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .systemConfig 00000004  0807e800  0807e800  0002e800  2**0
                  ALLOC, READONLY
  2 .text         0000e5f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001420  0800e798  0800e798  0001e798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800fbb8  0800fbb8  0002046c  2**0
                  CONTENTS
  5 .ARM          00000008  0800fbb8  0800fbb8  0001fbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800fbc0  0800fbc0  0002046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800fbc0  0800fbc0  0001fbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800fbc4  0800fbc4  0001fbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000046c  20000000  0800fbc8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000006d0  2000046c  08010034  0002046c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b3c  08010034  00020b3c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e340  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000545e  00000000  00000000  0003e7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a18  00000000  00000000  00043c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001798  00000000  00000000  00045658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d9a3  00000000  00000000  00046df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026e83  00000000  00000000  00064793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c88d  00000000  00000000  0008b616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127ea3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f3c  00000000  00000000  00127ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000046c 	.word	0x2000046c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e780 	.word	0x0800e780

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000470 	.word	0x20000470
 80001dc:	0800e780 	.word	0x0800e780

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f009 fd13 	bl	800a938 <memset>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	cbuffer->buffer[cbuffer->write] = data;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	7992      	ldrb	r2, [r2, #6]
 8000f2e:	4413      	add	r3, r2
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b25a      	sxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	757b      	strb	r3, [r7, #21]
	uint8_t length;
	uint8_t read = cbuffer->read;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	795b      	ldrb	r3, [r3, #5]
 8000f7c:	74bb      	strb	r3, [r7, #18]
	uint8_t ch;
	length = cBuffer_Length(cbuffer);
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f89a 	bl	80010b8 <cBuffer_Length>
 8000f84:	4603      	mov	r3, r0
 8000f86:	753b      	strb	r3, [r7, #20]

	for (i=0; i < length;i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
 8000f8c:	e012      	b.n	8000fb4 <cBuffer_GetString+0x54>
	{
		err = cBuffer_Peek(cbuffer, &ch, &read);
 8000f8e:	f107 0212 	add.w	r2, r7, #18
 8000f92:	f107 0311 	add.w	r3, r7, #17
 8000f96:	4619      	mov	r1, r3
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f863 	bl	8001064 <cBuffer_Peek>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	757b      	strb	r3, [r7, #21]

		if (ch == '\r') // A string is found - copy it to the outgoing buffer
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	2b0d      	cmp	r3, #13
 8000fa6:	d102      	bne.n	8000fae <cBuffer_GetString+0x4e>
		{
			found = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75bb      	strb	r3, [r7, #22]
			break;
 8000fac:	e006      	b.n	8000fbc <cBuffer_GetString+0x5c>
	for (i=0; i < length;i++)
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	7d3b      	ldrb	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3e8      	bcc.n	8000f8e <cBuffer_GetString+0x2e>
		}
	}
	if (found)
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d020      	beq.n	8001004 <cBuffer_GetString+0xa4>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, read);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	7cba      	ldrb	r2, [r7, #18]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f88d 	bl	80010ea <cBuffer_LengthCustom>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000fd8:	f107 0313 	add.w	r3, r7, #19
 8000fdc:	4619      	mov	r1, r3
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f817 	bl	8001012 <cBuffer_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	757b      	strb	r3, [r7, #21]
			*string = chr;
 8000fe8:	7cfa      	ldrb	r2, [r7, #19]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	701a      	strb	r2, [r3, #0]
			string++;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
		} while (chr != sTerminator || err != CBUFFER_OK);
 8000ff4:	7cfb      	ldrb	r3, [r7, #19]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d1ed      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8000ffc:	7d7b      	ldrb	r3, [r7, #21]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1ea      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8001002:	e001      	b.n	8001008 <cBuffer_GetString+0xa8>
	}
	else
		err = CBUFFER_NO_STRING;
 8001004:	2303      	movs	r3, #3
 8001006:	757b      	strb	r3, [r7, #21]


	return err;
 8001008:	7d7b      	ldrb	r3, [r7, #21]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f84b 	bl	80010b8 <cBuffer_Length>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8001028:	2302      	movs	r3, #2
 800102a:	e017      	b.n	800105c <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	7952      	ldrb	r2, [r2, #5]
 8001034:	4413      	add	r3, r2
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	3301      	adds	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b25a      	sxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4013      	ands	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <cBuffer_Peek>:

CBUFFER_ERR cBuffer_Peek(cBuffer_t* cbuffer,uint8_t* data, uint8_t*read)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (cBuffer_Length(cbuffer) == 0)
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f821 	bl	80010b8 <cBuffer_Length>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <cBuffer_Peek+0x1c>
	{
		return CBUFFER_EMPTY;
 800107c:	2302      	movs	r3, #2
 800107e:	e017      	b.n	80010b0 <cBuffer_Peek+0x4c>
	}
	*data = cbuffer->buffer[*read];
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	701a      	strb	r2, [r3, #0]
	*read = ((*read)+1) & (cbuffer->size-1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25a      	sxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
	return CBUFFER_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	799a      	ldrb	r2, [r3, #6]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3

}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
 80010f6:	4613      	mov	r3, r2
 80010f8:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b25a      	sxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 800112a:	2120      	movs	r1, #32
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f00a f9f6 	bl	800b51e <strchr>
 8001132:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0 || cmdEnd-buffer != strlen(name))
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d009      	beq.n	800114e <ConsoleCommandMatch+0x2e>
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	461c      	mov	r4, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff f856 	bl	80001f4 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	429c      	cmp	r4, r3
 800114c:	d00b      	beq.n	8001166 <ConsoleCommandMatch+0x46>
	{
			r =  strcmp(name,buffer) == 0;
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f845 	bl	80001e0 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e00f      	b.n	8001186 <ConsoleCommandMatch+0x66>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff f844 	bl	80001f4 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f00a f9e8 	bl	800b548 <strncmp>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	60fb      	str	r3, [r7, #12]

	}

	return r;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}

08001190 <ConsoleInit>:


// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001196:	f001 f8ff 	bl	8002398 <ConsoleIoInit>
	ConsoleIoSendString("Dodeca Timer - A Thousand Projects");
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <ConsoleInit+0x44>)
 800119c:	f001 f934 	bl	8002408 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <ConsoleInit+0x48>)
 80011a2:	f001 f931 	bl	8002408 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <ConsoleInit+0x4c>)
 80011a8:	f001 f92e 	bl	8002408 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	e007      	b.n	80011c2 <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <ConsoleInit+0x50>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3301      	adds	r3, #1
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b63      	cmp	r3, #99	; 0x63
 80011c6:	d9f4      	bls.n	80011b2 <ConsoleInit+0x22>
	}

}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800e798 	.word	0x0800e798
 80011d8:	0800e7bc 	.word	0x0800e7bc
 80011dc:	0800e7c0 	.word	0x0800e7c0
 80011e0:	20000488 	.word	0x20000488

080011e4 <ConsolePrintPrompt>:

void ConsolePrintPrompt()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	ConsoleIoSendString(STR_ENDLINE);
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ConsolePrintPrompt+0x14>)
 80011ea:	f001 f90d 	bl	8002408 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <ConsolePrintPrompt+0x18>)
 80011f0:	f001 f90a 	bl	8002408 <ConsoleIoSendString>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800e7bc 	.word	0x0800e7bc
 80011fc:	0800e7c0 	.word	0x0800e7c0

08001200 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;
	eConsoleError consoleResult;

	consoleResult = ConsoleIoReceive(mReceiveBuffer);
 8001206:	4841      	ldr	r0, [pc, #260]	; (800130c <ConsoleProcess+0x10c>)
 8001208:	f001 f8de 	bl	80023c8 <ConsoleIoReceive>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]

	switch (consoleResult)
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d075      	beq.n	8001302 <ConsoleProcess+0x102>
 8001216:	2b03      	cmp	r3, #3
 8001218:	dc74      	bgt.n	8001304 <ConsoleProcess+0x104>
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <ConsoleProcess+0x28>
 800121e:	2b00      	cmp	r3, #0
 8001220:	db70      	blt.n	8001304 <ConsoleProcess+0x104>
 8001222:	3b01      	subs	r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	e06d      	b.n	8001304 <ConsoleProcess+0x104>
	{
		case CONSOLE_ERROR:
		case CONSOLE_NO_STRING:
			break;
		case CONSOLE_SUCCESS:
			if ('\0' == mReceiveBuffer[0] )
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <ConsoleProcess+0x10c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <ConsoleProcess+0x3e>
			{
				ConsoleIoSendString(STR_ENDLINE);
 8001230:	4837      	ldr	r0, [pc, #220]	; (8001310 <ConsoleProcess+0x110>)
 8001232:	f001 f8e9 	bl	8002408 <ConsoleIoSendString>
				ConsoleIoSendString(CONSOLE_PROMPT);
 8001236:	4837      	ldr	r0, [pc, #220]	; (8001314 <ConsoleProcess+0x114>)
 8001238:	f001 f8e6 	bl	8002408 <ConsoleIoSendString>
				return;
 800123c:	e062      	b.n	8001304 <ConsoleProcess+0x104>
			}
			commandTable = ConsoleCommandsGetTable();
 800123e:	f001 f883 	bl	8002348 <ConsoleCommandsGetTable>
 8001242:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	613b      	str	r3, [r7, #16]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800124e:	e03a      	b.n	80012c6 <ConsoleProcess+0xc6>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	226c      	movs	r2, #108	; 0x6c
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	492b      	ldr	r1, [pc, #172]	; (800130c <ConsoleProcess+0x10c>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <ConsoleCommandMatch>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d029      	beq.n	80012c0 <ConsoleProcess+0xc0>
				{
					result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	226c      	movs	r2, #108	; 0x6c
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	4413      	add	r3, r2
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4824      	ldr	r0, [pc, #144]	; (800130c <ConsoleProcess+0x10c>)
 800127c:	4798      	blx	r3
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d018      	beq.n	80012ba <ConsoleProcess+0xba>
					{
						ConsoleIoSendString("Error: ");
 8001288:	4823      	ldr	r0, [pc, #140]	; (8001318 <ConsoleProcess+0x118>)
 800128a:	f001 f8bd 	bl	8002408 <ConsoleIoSendString>
						ConsoleIoSendString((char*)mReceiveBuffer);
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <ConsoleProcess+0x10c>)
 8001290:	f001 f8ba 	bl	8002408 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8001294:	481e      	ldr	r0, [pc, #120]	; (8001310 <ConsoleProcess+0x110>)
 8001296:	f001 f8b7 	bl	8002408 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800129a:	4820      	ldr	r0, [pc, #128]	; (800131c <ConsoleProcess+0x11c>)
 800129c:	f001 f8b4 	bl	8002408 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	226c      	movs	r2, #108	; 0x6c
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	4413      	add	r3, r2
 80012ac:	3308      	adds	r3, #8
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 f8aa 	bl	8002408 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80012b4:	4816      	ldr	r0, [pc, #88]	; (8001310 <ConsoleProcess+0x110>)
 80012b6:	f001 f8a7 	bl	8002408 <ConsoleIoSendString>
					}
					found = cmdIndex;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	e002      	b.n	80012c6 <ConsoleProcess+0xc6>
				}
				else
				{
					cmdIndex++;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	226c      	movs	r2, #108	; 0x6c
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	4413      	add	r3, r2
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <ConsoleProcess+0xe0>
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012de:	d0b7      	beq.n	8001250 <ConsoleProcess+0x50>
				}
			}
			if (found == NOT_FOUND)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e6:	d105      	bne.n	80012f4 <ConsoleProcess+0xf4>
			{
				ConsoleIoSendString("Command not found: ");
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <ConsoleProcess+0x120>)
 80012ea:	f001 f88d 	bl	8002408 <ConsoleIoSendString>
				ConsoleIoSendString((char*)mReceiveBuffer);
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <ConsoleProcess+0x10c>)
 80012f0:	f001 f88a 	bl	8002408 <ConsoleIoSendString>

			}
			ConsoleIoSendString(STR_ENDLINE);
 80012f4:	4806      	ldr	r0, [pc, #24]	; (8001310 <ConsoleProcess+0x110>)
 80012f6:	f001 f887 	bl	8002408 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <ConsoleProcess+0x114>)
 80012fc:	f001 f884 	bl	8002408 <ConsoleIoSendString>

			break;
 8001300:	e000      	b.n	8001304 <ConsoleProcess+0x104>
		case CONSOLE_BUFFER_FULL:

		break;
 8001302:	bf00      	nop
	}

}
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000488 	.word	0x20000488
 8001310:	0800e7bc 	.word	0x0800e7bc
 8001314:	0800e7c0 	.word	0x0800e7c0
 8001318:	0800e7c4 	.word	0x0800e7c4
 800131c:	0800e7cc 	.word	0x0800e7cc
 8001320:	0800e7d4 	.word	0x0800e7d4

08001324 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	460b      	mov	r3, r1
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800133e:	e00b      	b.n	8001358 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b20      	cmp	r3, #32
 800134a:	d102      	bne.n	8001352 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	3301      	adds	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	429a      	cmp	r2, r3
 800135e:	d002      	beq.n	8001366 <ConsoleParamFindN+0x42>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b63      	cmp	r3, #99	; 0x63
 8001364:	d9ec      	bls.n	8001340 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	2b64      	cmp	r3, #100	; 0x64
 800136a:	d102      	bne.n	8001372 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 800136c:	2310      	movs	r3, #16
 800136e:	75fb      	strb	r3, [r7, #23]
 8001370:	e002      	b.n	8001378 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	601a      	str	r2, [r3, #0]
	}
	return result;
 8001378:	7dfb      	ldrb	r3, [r7, #23]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <ConsoleReceiveParamString>:

// Assume the string is the last parameter and the the end is a null
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char* string, uint32_t maxLen)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	460b      	mov	r3, r1
 8001394:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
	eCommandResult_T result;
	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800139a:	f107 0210 	add.w	r2, r7, #16
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	4619      	mov	r1, r3
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff ffbe 	bl	8001324 <ConsoleParamFindN>
 80013a8:	4603      	mov	r3, r0
 80013aa:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <ConsoleReceiveParamString+0x30>
		return result;
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	e013      	b.n	80013de <ConsoleReceiveParamString+0x58>



	// Check the length of the string
	if (strlen(&buffer[startIndex]) > maxLen)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7fe ff19 	bl	80001f4 <strlen>
 80013c2:	4602      	mov	r2, r0
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d201      	bcs.n	80013ce <ConsoleReceiveParamString+0x48>
	{
		return COMMAND_ERROR;
 80013ca:	23ff      	movs	r3, #255	; 0xff
 80013cc:	e007      	b.n	80013de <ConsoleReceiveParamString+0x58>
	}

	// set the end of the string to a NULL for string termination
	strcpy(string,&buffer[startIndex]);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f00a f8ae 	bl	800b538 <strcpy>

	return COMMAND_SUCCESS;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b08a      	sub	sp, #40	; 0x28
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	460b      	mov	r3, r1
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80013f8:	f107 021c 	add.w	r2, r7, #28
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	4619      	mov	r1, r3
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff ff8f 	bl	8001324 <ConsoleParamFindN>
 8001406:	4603      	mov	r3, r0
 8001408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	4413      	add	r3, r2
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 8001420:	e011      	b.n	8001446 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8001422:	f107 0214 	add.w	r2, r7, #20
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	4413      	add	r3, r2
 800142a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800142e:	701a      	strb	r2, [r3, #0]
		i++;
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	3301      	adds	r3, #1
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	4413      	add	r3, r2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 8001446:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 800144e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001452:	2b20      	cmp	r3, #32
 8001454:	d002      	beq.n	800145c <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	2b07      	cmp	r3, #7
 800145a:	d9e2      	bls.n	8001422 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	2b08      	cmp	r3, #8
 8001460:	d102      	bne.n	8001468 <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001462:	2310      	movs	r3, #16
 8001464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8001468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800146c:	2b00      	cmp	r3, #0
 800146e:	d11a      	bne.n	80014a6 <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8001470:	f107 0214 	add.w	r2, r7, #20
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	4413      	add	r3, r2
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4618      	mov	r0, r3
 8001482:	f001 ff75 	bl	8003370 <isNumber>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4618      	mov	r0, r3
 8001492:	f009 fa13 	bl	800a8bc <atoi>
 8001496:	4603      	mov	r3, r0
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	801a      	strh	r2, [r3, #0]
 800149e:	e002      	b.n	80014a6 <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 80014a0:	2310      	movs	r3, #16
 80014a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	return result;
 80014a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b08a      	sub	sp, #40	; 0x28
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	460b      	mov	r3, r1
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80014c8:	f107 0218 	add.w	r2, r7, #24
 80014cc:	7afb      	ldrb	r3, [r7, #11]
 80014ce:	4619      	mov	r1, r3
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff ff27 	bl	8001324 <ConsoleParamFindN>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 80014da:	7ffb      	ldrb	r3, [r7, #31]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d12c      	bne.n	800153a <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	e01e      	b.n	8001524 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10d      	bne.n	8001508 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	4413      	add	r3, r2
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f107 0217 	add.w	r2, r7, #23
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f820 	bl	8001544 <ConsoleUtilHexCharToInt>
 8001504:	4603      	mov	r3, r0
 8001506:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8001508:	7ffb      	ldrb	r3, [r7, #31]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 800150e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	b29a      	uxth	r2, r3
 8001518:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800151a:	4413      	add	r3, r2
 800151c:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	3301      	adds	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d9dd      	bls.n	80014e6 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 800152a:	7ffb      	ldrb	r3, [r7, #31]
 800152c:	2b11      	cmp	r3, #17
 800152e:	d101      	bne.n	8001534 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001538:	801a      	strh	r2, [r3, #0]
	}
	return result;
 800153a:	7ffb      	ldrb	r3, [r7, #31]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b2f      	cmp	r3, #47	; 0x2f
 8001558:	d908      	bls.n	800156c <ConsoleUtilHexCharToInt+0x28>
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b39      	cmp	r3, #57	; 0x39
 800155e:	d805      	bhi.n	800156c <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	3b30      	subs	r3, #48	; 0x30
 8001564:	b2da      	uxtb	r2, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e025      	b.n	80015b8 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b40      	cmp	r3, #64	; 0x40
 8001570:	d908      	bls.n	8001584 <ConsoleUtilHexCharToInt+0x40>
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b46      	cmp	r3, #70	; 0x46
 8001576:	d805      	bhi.n	8001584 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3b37      	subs	r3, #55	; 0x37
 800157c:	b2da      	uxtb	r2, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e019      	b.n	80015b8 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b60      	cmp	r3, #96	; 0x60
 8001588:	d908      	bls.n	800159c <ConsoleUtilHexCharToInt+0x58>
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b66      	cmp	r3, #102	; 0x66
 800158e:	d805      	bhi.n	800159c <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	3b57      	subs	r3, #87	; 0x57
 8001594:	b2da      	uxtb	r2, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e00d      	b.n	80015b8 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b0a      	cmp	r3, #10
 80015a0:	d105      	bne.n	80015ae <ConsoleUtilHexCharToInt+0x6a>
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b0d      	cmp	r3, #13
 80015a6:	d102      	bne.n	80015ae <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b20      	cmp	r3, #32
 80015ac:	d102      	bne.n	80015b4 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 80015ae:	2311      	movs	r3, #17
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e001      	b.n	80015b8 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 80015b4:	2310      	movs	r3, #16
 80015b6:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 ff1a 	bl	8002408 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 ff0d 	bl	8002408 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80015ee:	4804      	ldr	r0, [pc, #16]	; (8001600 <ConsoleSendLine+0x20>)
 80015f0:	f000 ff0a 	bl	8002408 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	0800e7bc 	.word	0x0800e7bc

08001604 <displayDodeca>:




static void displayDodeca(uint8_t id)
{
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b0ac      	sub	sp, #176	; 0xb0
 8001608:	af04      	add	r7, sp, #16
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
	char msg[120];
	char statename[20];
	colour_t *colour;
	dodecaItem_t *dodeca = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	dodeca = dodecaGet(id);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f000 ffbe 	bl	8002598 <dodecaGet>
 800161c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c


	dodecaGetStateName(dodeca->state,statename);
 8001620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f107 020c 	add.w	r2, r7, #12
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f000 ffcb 	bl	80025c8 <dodecaGetStateName>
	colour = colourFindByCode(dodeca->colour);
 8001632:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fefb 	bl	8002434 <colourFindByCode>
 800163e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	sprintf(msg,"Dodeca: %i - %s\n\tState: %s\n\tColour: %s\n\tMin Time: %d\n\tMax Time: %d\n",id,dodeca->name,statename, colour->name ,dodeca->minTimeMins,dodeca->maxTimeMins);
 8001642:	79f9      	ldrb	r1, [r7, #7]
 8001644:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8001648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800164c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001650:	7e12      	ldrb	r2, [r2, #24]
 8001652:	4615      	mov	r5, r2
 8001654:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001658:	7e52      	ldrb	r2, [r2, #25]
 800165a:	f107 0020 	add.w	r0, r7, #32
 800165e:	9203      	str	r2, [sp, #12]
 8001660:	9502      	str	r5, [sp, #8]
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	4623      	mov	r3, r4
 800166c:	460a      	mov	r2, r1
 800166e:	4906      	ldr	r1, [pc, #24]	; (8001688 <displayDodeca+0x84>)
 8001670:	f009 fec4 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ffb1 	bl	80015e0 <ConsoleSendLine>
}
 800167e:	bf00      	nop
 8001680:	37a0      	adds	r7, #160	; 0xa0
 8001682:	46bd      	mov	sp, r7
 8001684:	bdb0      	pop	{r4, r5, r7, pc}
 8001686:	bf00      	nop
 8001688:	0800e860 	.word	0x0800e860

0800168c <ConsoleCommandReset>:

static eCommandResult_T ConsoleCommandReset(const char buffer[])
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	ConsoleSendLine("Resetting Configuration to factory default");
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <ConsoleCommandReset+0x28>)
 8001696:	f7ff ffa3 	bl	80015e0 <ConsoleSendLine>
	dodecaReset();
 800169a:	f000 ff1f 	bl	80024dc <dodecaReset>
	sysConfigSave();
 800169e:	f002 ffa3 	bl	80045e8 <sysConfigSave>
	ConsoleSendLine("Done");
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <ConsoleCommandReset+0x2c>)
 80016a4:	f7ff ff9c 	bl	80015e0 <ConsoleSendLine>
	return COMMAND_SUCCESS;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	0800e8a4 	.word	0x0800e8a4
 80016b8:	0800e8d0 	.word	0x0800e8d0

080016bc <ConsoleCommandDodecaSet>:

static eCommandResult_T ConsoleCommandDodecaSet(const char buffer[])
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0b0      	sub	sp, #192	; 0xc0
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	dodecaItem_t *dodeca;
	char msg[50];

		// get the command
		uint32_t cmdIndex;
		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &cmdIndex))
 80016c4:	f107 0320 	add.w	r3, r7, #32
 80016c8:	461a      	mov	r2, r3
 80016ca:	2101      	movs	r1, #1
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fe29 	bl	8001324 <ConsoleParamFindN>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <ConsoleCommandDodecaSet+0x26>
		{
			ConsoleSendLine("Please supply a command");
 80016d8:	486c      	ldr	r0, [pc, #432]	; (800188c <ConsoleCommandDodecaSet+0x1d0>)
 80016da:	f7ff ff81 	bl	80015e0 <ConsoleSendLine>
			return COMMAND_PARAMETER_ERROR;
 80016de:	2310      	movs	r3, #16
 80016e0:	e0cf      	b.n	8001882 <ConsoleCommandDodecaSet+0x1c6>
		}

		MPU6050ReadStable(&data);
 80016e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016e6:	4618      	mov	r0, r3
 80016e8:	f001 fa4c 	bl	8002b84 <MPU6050ReadStable>
		dodecaId = detectFace(data.KalmanAngleX, data.KalmanAngleY);
 80016ec:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 80016f0:	ed97 6b2a 	vldr	d6, [r7, #168]	; 0xa8
 80016f4:	eeb0 1a46 	vmov.f32	s2, s12
 80016f8:	eef0 1a66 	vmov.f32	s3, s13
 80016fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001700:	eef0 0a67 	vmov.f32	s1, s15
 8001704:	f001 ff64 	bl	80035d0 <detectFace>
 8001708:	4603      	mov	r3, r0
 800170a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe


		if (dodecaId< 0)
 800170e:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8001712:	2b00      	cmp	r3, #0
 8001714:	da04      	bge.n	8001720 <ConsoleCommandDodecaSet+0x64>
		{
			ConsoleSendLine("Face not detected");
 8001716:	485e      	ldr	r0, [pc, #376]	; (8001890 <ConsoleCommandDodecaSet+0x1d4>)
 8001718:	f7ff ff62 	bl	80015e0 <ConsoleSendLine>
			return COMMAND_ERROR;
 800171c:	23ff      	movs	r3, #255	; 0xff
 800171e:	e0b0      	b.n	8001882 <ConsoleCommandDodecaSet+0x1c6>
		}
		sprintf(msg,"Detected face: %i",dodecaId);
 8001720:	f9b7 20be 	ldrsh.w	r2, [r7, #190]	; 0xbe
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	495a      	ldr	r1, [pc, #360]	; (8001894 <ConsoleCommandDodecaSet+0x1d8>)
 800172a:	4618      	mov	r0, r3
 800172c:	f009 fe66 	bl	800b3fc <siprintf>
		ConsoleSendLine(msg);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff53 	bl	80015e0 <ConsoleSendLine>

		dodeca = dodecaGet(dodecaId);
 800173a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4618      	mov	r0, r3
 8001742:	f000 ff29 	bl	8002598 <dodecaGet>
 8001746:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

		char name[DODECA_NAME_MAX];
		int16_t colourId;

		switch (buffer[cmdIndex])
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	3b63      	subs	r3, #99	; 0x63
 8001754:	2b0b      	cmp	r3, #11
 8001756:	f200 808d 	bhi.w	8001874 <ConsoleCommandDodecaSet+0x1b8>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <ConsoleCommandDodecaSet+0xa4>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017cb 	.word	0x080017cb
 8001764:	08001875 	.word	0x08001875
 8001768:	08001875 	.word	0x08001875
 800176c:	08001875 	.word	0x08001875
 8001770:	08001875 	.word	0x08001875
 8001774:	08001875 	.word	0x08001875
 8001778:	08001847 	.word	0x08001847
 800177c:	08001875 	.word	0x08001875
 8001780:	08001875 	.word	0x08001875
 8001784:	08001875 	.word	0x08001875
 8001788:	08001819 	.word	0x08001819
 800178c:	08001791 	.word	0x08001791
		{

		case 'n':
					// Get the task Name
					ConsoleReceiveParamString(buffer, 3, name,DODECA_NAME_MAX );
 8001790:	f107 020c 	add.w	r2, r7, #12
 8001794:	2314      	movs	r3, #20
 8001796:	2103      	movs	r1, #3
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fdf4 	bl	8001386 <ConsoleReceiveParamString>
					// Check Length
					if (strlen(name)< DODECA_NAME_MAX)
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fd26 	bl	80001f4 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b13      	cmp	r3, #19
 80017ac:	d804      	bhi.n	80017b8 <ConsoleCommandDodecaSet+0xfc>
					{
						ConsoleSendLine("Name too short");
 80017ae:	483a      	ldr	r0, [pc, #232]	; (8001898 <ConsoleCommandDodecaSet+0x1dc>)
 80017b0:	f7ff ff16 	bl	80015e0 <ConsoleSendLine>
						return COMMAND_PARAMETER_ERROR;
 80017b4:	2310      	movs	r3, #16
 80017b6:	e064      	b.n	8001882 <ConsoleCommandDodecaSet+0x1c6>
					}
					strcpy(dodeca->name,name);
 80017b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017bc:	f107 020c 	add.w	r2, r7, #12
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f009 feb8 	bl	800b538 <strcpy>
					break;
 80017c8:	e054      	b.n	8001874 <ConsoleCommandDodecaSet+0x1b8>
			case 'c':
					// get the colour number

					ConsoleReceiveParamInt16(buffer, 3, &colourId);
 80017ca:	f107 030a 	add.w	r3, r7, #10
 80017ce:	461a      	mov	r2, r3
 80017d0:	2103      	movs	r1, #3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fe07 	bl	80013e6 <ConsoleReceiveParamInt16>
					if (colourId > COLOUR_COUNT_MAX)
 80017d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017dc:	2b0c      	cmp	r3, #12
 80017de:	dd04      	ble.n	80017ea <ConsoleCommandDodecaSet+0x12e>
					{
						ConsoleSendLine("Invalid Colour");
 80017e0:	482e      	ldr	r0, [pc, #184]	; (800189c <ConsoleCommandDodecaSet+0x1e0>)
 80017e2:	f7ff fefd 	bl	80015e0 <ConsoleSendLine>
						return COMMAND_PARAMETER_ERROR;
 80017e6:	2310      	movs	r3, #16
 80017e8:	e04b      	b.n	8001882 <ConsoleCommandDodecaSet+0x1c6>
					}

					dodeca->colour = colourFindByid(colourId)->code;
 80017ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fe49 	bl	8002488 <colourFindByid>
 80017f6:	4603      	mov	r3, r0
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017fe:	615a      	str	r2, [r3, #20]

					ConsoleSendString("Colour set : ");
 8001800:	4827      	ldr	r0, [pc, #156]	; (80018a0 <ConsoleCommandDodecaSet+0x1e4>)
 8001802:	f7ff fee0 	bl	80015c6 <ConsoleSendString>
					ConsoleSendLine(colourFindByCode(colourId)->name);
 8001806:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fe12 	bl	8002434 <colourFindByCode>
 8001810:	4603      	mov	r3, r0
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fee4 	bl	80015e0 <ConsoleSendLine>

		case 'm':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001818:	f107 03b6 	add.w	r3, r7, #182	; 0xb6
 800181c:	461a      	mov	r2, r3
 800181e:	2102      	movs	r1, #2
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fde0 	bl	80013e6 <ConsoleReceiveParamInt16>
				if (value <0)
 8001826:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800182a:	2b00      	cmp	r3, #0
 800182c:	da04      	bge.n	8001838 <ConsoleCommandDodecaSet+0x17c>
				{
					ConsoleSendLine("Invalid Max time");
 800182e:	481d      	ldr	r0, [pc, #116]	; (80018a4 <ConsoleCommandDodecaSet+0x1e8>)
 8001830:	f7ff fed6 	bl	80015e0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8001834:	2310      	movs	r3, #16
 8001836:	e024      	b.n	8001882 <ConsoleCommandDodecaSet+0x1c6>
				}
				dodeca->maxTimeMins = value;
 8001838:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800183c:	b2da      	uxtb	r2, r3
 800183e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001842:	765a      	strb	r2, [r3, #25]
			break;
 8001844:	e016      	b.n	8001874 <ConsoleCommandDodecaSet+0x1b8>
		case 'i':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001846:	f107 03b6 	add.w	r3, r7, #182	; 0xb6
 800184a:	461a      	mov	r2, r3
 800184c:	2102      	movs	r1, #2
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fdc9 	bl	80013e6 <ConsoleReceiveParamInt16>
				if (value <0)
 8001854:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8001858:	2b00      	cmp	r3, #0
 800185a:	da04      	bge.n	8001866 <ConsoleCommandDodecaSet+0x1aa>
				{
					ConsoleSendLine("Invalid Min time");
 800185c:	4812      	ldr	r0, [pc, #72]	; (80018a8 <ConsoleCommandDodecaSet+0x1ec>)
 800185e:	f7ff febf 	bl	80015e0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8001862:	2310      	movs	r3, #16
 8001864:	e00d      	b.n	8001882 <ConsoleCommandDodecaSet+0x1c6>
				}
				dodeca->minTimeMins = value;
 8001866:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800186a:	b2da      	uxtb	r2, r3
 800186c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001870:	761a      	strb	r2, [r3, #24]
			break;
 8001872:	bf00      	nop
		}
		// Show the current face info
		displayDodeca(dodecaId);
 8001874:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fec2 	bl	8001604 <displayDodeca>
		return COMMAND_SUCCESS;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	37c0      	adds	r7, #192	; 0xc0
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	0800e8d8 	.word	0x0800e8d8
 8001890:	0800e8f0 	.word	0x0800e8f0
 8001894:	0800e904 	.word	0x0800e904
 8001898:	0800e918 	.word	0x0800e918
 800189c:	0800e928 	.word	0x0800e928
 80018a0:	0800e938 	.word	0x0800e938
 80018a4:	0800e948 	.word	0x0800e948
 80018a8:	0800e95c 	.word	0x0800e95c

080018ac <ConsoleCommandDodecaQuery>:

static eCommandResult_T ConsoleCommandDodecaQuery(const char buffer[])
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	uint32_t param1;

		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &param1))
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	461a      	mov	r2, r3
 80018ba:	2101      	movs	r1, #1
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fd31 	bl	8001324 <ConsoleParamFindN>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00d      	beq.n	80018e4 <ConsoleCommandDodecaQuery+0x38>
		{
			// List all tasks
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	75fb      	strb	r3, [r7, #23]
 80018cc:	e006      	b.n	80018dc <ConsoleCommandDodecaQuery+0x30>
			{
				displayDodeca(f);
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fe97 	bl	8001604 <displayDodeca>
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	3301      	adds	r3, #1
 80018da:	75fb      	strb	r3, [r7, #23]
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	2b0b      	cmp	r3, #11
 80018e0:	d9f5      	bls.n	80018ce <ConsoleCommandDodecaQuery+0x22>
 80018e2:	e019      	b.n	8001918 <ConsoleCommandDodecaQuery+0x6c>
			}
		}
		else
		{
			int16_t taskId;
			ConsoleReceiveParamInt16(buffer, 1, &taskId );
 80018e4:	f107 030e 	add.w	r3, r7, #14
 80018e8:	461a      	mov	r2, r3
 80018ea:	2101      	movs	r1, #1
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fd7a 	bl	80013e6 <ConsoleReceiveParamInt16>

			if (taskId < 0 || taskId > DODECA_COUNT_MAX-1)
 80018f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db03      	blt.n	8001902 <ConsoleCommandDodecaQuery+0x56>
 80018fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018fe:	2b0b      	cmp	r3, #11
 8001900:	dd04      	ble.n	800190c <ConsoleCommandDodecaQuery+0x60>
			{
				ConsoleSendLine("Invalid Task number");
 8001902:	4808      	ldr	r0, [pc, #32]	; (8001924 <ConsoleCommandDodecaQuery+0x78>)
 8001904:	f7ff fe6c 	bl	80015e0 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001908:	2310      	movs	r3, #16
 800190a:	e006      	b.n	800191a <ConsoleCommandDodecaQuery+0x6e>
			}

			displayDodeca(taskId);
 800190c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe76 	bl	8001604 <displayDodeca>

		}
		return COMMAND_SUCCESS;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	0800e970 	.word	0x0800e970

08001928 <ConsoleCommandSaveConfig>:


static eCommandResult_T ConsoleCommandSaveConfig(const char buffer[])
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	sysConfigSave();
 8001930:	f002 fe5a 	bl	80045e8 <sysConfigSave>
	ConsoleSendLine("Config Saved!");
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <ConsoleCommandSaveConfig+0x1c>)
 8001936:	f7ff fe53 	bl	80015e0 <ConsoleSendLine>
	return COMMAND_SUCCESS;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	0800e984 	.word	0x0800e984

08001948 <ConsoleCommandFaceUpQuery>:
	return COMMAND_SUCCESS;
}

*/
static eCommandResult_T ConsoleCommandFaceUpQuery(const char buffer[])
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b0a5      	sub	sp, #148	; 0x94
 800194c:	af02      	add	r7, sp, #8
 800194e:	6078      	str	r0, [r7, #4]

	uint8_t face;
	char msg[30];

	MPU6050_t data;
	MPU6050ReadStable(&data);
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	4618      	mov	r0, r3
 8001956:	f001 f915 	bl	8002b84 <MPU6050ReadStable>


	sprintf(msg,"Angle X: %f Y: %f",data.KalmanAngleX, data.KalmanAngleY);
 800195a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800195e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001962:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001966:	e9cd 2300 	strd	r2, r3, [sp]
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	492f      	ldr	r1, [pc, #188]	; (8001a2c <ConsoleCommandFaceUpQuery+0xe4>)
 8001970:	4620      	mov	r0, r4
 8001972:	f009 fd43 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001976:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fe30 	bl	80015e0 <ConsoleSendLine>

	face = detectFace(data.KalmanAngleX, data.KalmanAngleY);
 8001980:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001984:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8001988:	eeb0 1a46 	vmov.f32	s2, s12
 800198c:	eef0 1a66 	vmov.f32	s3, s13
 8001990:	eeb0 0a47 	vmov.f32	s0, s14
 8001994:	eef0 0a67 	vmov.f32	s1, s15
 8001998:	f001 fe1a 	bl	80035d0 <detectFace>
 800199c:	4603      	mov	r3, r0
 800199e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (face < FACE_COUNT)
 80019a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80019a6:	2b0b      	cmp	r3, #11
 80019a8:	d82e      	bhi.n	8001a08 <ConsoleCommandFaceUpQuery+0xc0>
	{
		sprintf(msg,"Detected face %i is up",face);
 80019aa:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80019ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019b2:	491f      	ldr	r1, [pc, #124]	; (8001a30 <ConsoleCommandFaceUpQuery+0xe8>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f009 fd21 	bl	800b3fc <siprintf>
		ConsoleSendLine(msg);
 80019ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fe0e 	bl	80015e0 <ConsoleSendLine>
		uint32_t rgb_color = hsl_to_rgb((face*30), 255, 127);
 80019c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80019c8:	461a      	mov	r2, r3
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	227f      	movs	r2, #127	; 0x7f
 80019d4:	21ff      	movs	r1, #255	; 0xff
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 f856 	bl	8004a88 <hsl_to_rgb>
 80019dc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		ledAllOff();
 80019e0:	f001 fd5c 	bl	800349c <ledAllOff>
		ledSetFaceColour(face, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 80019e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	b2d9      	uxtb	r1, r3
 80019ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f897 0087 	ldrb.w	r0, [r7, #135]	; 0x87
 80019fe:	f001 fd6a 	bl	80034d6 <ledSetFaceColour>
		ledRender();
 8001a02:	f001 fd62 	bl	80034ca <ledRender>
 8001a06:	e00c      	b.n	8001a22 <ConsoleCommandFaceUpQuery+0xda>

	}
	else
	{
		sprintf(msg,"** Face NOT detected %i",face);
 8001a08:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001a0c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a10:	4908      	ldr	r1, [pc, #32]	; (8001a34 <ConsoleCommandFaceUpQuery+0xec>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f009 fcf2 	bl	800b3fc <siprintf>
		ConsoleSendLine(msg);
 8001a18:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fddf 	bl	80015e0 <ConsoleSendLine>





	return COMMAND_SUCCESS;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	378c      	adds	r7, #140	; 0x8c
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	0800e994 	.word	0x0800e994
 8001a30:	0800e9a8 	.word	0x0800e9a8
 8001a34:	0800e9c0 	.word	0x0800e9c0

08001a38 <ConsoleCommandLEDSet>:

static eCommandResult_T ConsoleCommandLEDSet(const char buffer[])
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	uint32_t startIndex;
	eCommandResult_T result;
	int16_t faceNumber;
	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	461a      	mov	r2, r3
 8001a46:	2101      	movs	r1, #1
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fc6b 	bl	8001324 <ConsoleParamFindN>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <ConsoleCommandLEDSet+0x24>
		return result;
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	e066      	b.n	8001b2a <ConsoleCommandLEDSet+0xf2>

	uint8_t command = buffer[startIndex];
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	75bb      	strb	r3, [r7, #22]
	switch (command)
 8001a66:	7dbb      	ldrb	r3, [r7, #22]
 8001a68:	2b6f      	cmp	r3, #111	; 0x6f
 8001a6a:	d053      	beq.n	8001b14 <ConsoleCommandLEDSet+0xdc>
 8001a6c:	2b6f      	cmp	r3, #111	; 0x6f
 8001a6e:	dc59      	bgt.n	8001b24 <ConsoleCommandLEDSet+0xec>
 8001a70:	2b64      	cmp	r3, #100	; 0x64
 8001a72:	d054      	beq.n	8001b1e <ConsoleCommandLEDSet+0xe6>
 8001a74:	2b66      	cmp	r3, #102	; 0x66
 8001a76:	d155      	bne.n	8001b24 <ConsoleCommandLEDSet+0xec>
	{
		case 'f':

			result = ConsoleReceiveParamInt16(buffer, 2, &faceNumber);
 8001a78:	f107 030e 	add.w	r3, r7, #14
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2102      	movs	r1, #2
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fcb0 	bl	80013e6 <ConsoleReceiveParamInt16>
 8001a86:	4603      	mov	r3, r0
 8001a88:	75fb      	strb	r3, [r7, #23]
			if (result != COMMAND_SUCCESS)
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <ConsoleCommandLEDSet+0x62>
			{
				ConsoleSendLine("Invalid Face ID");
 8001a90:	4828      	ldr	r0, [pc, #160]	; (8001b34 <ConsoleCommandLEDSet+0xfc>)
 8001a92:	f7ff fda5 	bl	80015e0 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001a96:	2310      	movs	r3, #16
 8001a98:	e047      	b.n	8001b2a <ConsoleCommandLEDSet+0xf2>
			}

			if (faceNumber >= PIXEL_RINGS)
 8001a9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a9e:	2b0b      	cmp	r3, #11
 8001aa0:	dd04      	ble.n	8001aac <ConsoleCommandLEDSet+0x74>
			{
				ConsoleSendLine("Invalid Face ID - Must be Zero Index");
 8001aa2:	4825      	ldr	r0, [pc, #148]	; (8001b38 <ConsoleCommandLEDSet+0x100>)
 8001aa4:	f7ff fd9c 	bl	80015e0 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	e03e      	b.n	8001b2a <ConsoleCommandLEDSet+0xf2>
			}


			result = ConsoleParamFindN(buffer,3,&startIndex);
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2103      	movs	r1, #3
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff fc35 	bl	8001324 <ConsoleParamFindN>
 8001aba:	4603      	mov	r3, r0
 8001abc:	75fb      	strb	r3, [r7, #23]
			uint8_t colour = buffer[startIndex];
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	757b      	strb	r3, [r7, #21]
			if ('r' == colour)
 8001ac8:	7d7b      	ldrb	r3, [r7, #21]
 8001aca:	2b72      	cmp	r3, #114	; 0x72
 8001acc:	d108      	bne.n	8001ae0 <ConsoleCommandLEDSet+0xa8>
				ledSetFaceColour(faceNumber,0xAA,00,0);
 8001ace:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ad2:	b2d8      	uxtb	r0, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	21aa      	movs	r1, #170	; 0xaa
 8001ada:	f001 fcfc 	bl	80034d6 <ledSetFaceColour>
 8001ade:	e016      	b.n	8001b0e <ConsoleCommandLEDSet+0xd6>
			else if ('g' == colour)
 8001ae0:	7d7b      	ldrb	r3, [r7, #21]
 8001ae2:	2b67      	cmp	r3, #103	; 0x67
 8001ae4:	d108      	bne.n	8001af8 <ConsoleCommandLEDSet+0xc0>
				ledSetFaceColour(faceNumber,0x0,0xAA,0);
 8001ae6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aea:	b2d8      	uxtb	r0, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	22aa      	movs	r2, #170	; 0xaa
 8001af0:	2100      	movs	r1, #0
 8001af2:	f001 fcf0 	bl	80034d6 <ledSetFaceColour>
 8001af6:	e00a      	b.n	8001b0e <ConsoleCommandLEDSet+0xd6>
			else if ('b' == colour)
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
 8001afa:	2b62      	cmp	r3, #98	; 0x62
 8001afc:	d107      	bne.n	8001b0e <ConsoleCommandLEDSet+0xd6>
				ledSetFaceColour(faceNumber,0x0,0x0,0xAA);
 8001afe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b02:	b2d8      	uxtb	r0, r3
 8001b04:	23aa      	movs	r3, #170	; 0xaa
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	f001 fce4 	bl	80034d6 <ledSetFaceColour>

			ledRender();
 8001b0e:	f001 fcdc 	bl	80034ca <ledRender>

			break;
 8001b12:	e009      	b.n	8001b28 <ConsoleCommandLEDSet+0xf0>
		case 'o':
			ledAllOff();
 8001b14:	f001 fcc2 	bl	800349c <ledAllOff>
			ledRender();
 8001b18:	f001 fcd7 	bl	80034ca <ledRender>
			break;
 8001b1c:	e004      	b.n	8001b28 <ConsoleCommandLEDSet+0xf0>
		case'd':
				ledDance();
 8001b1e:	f001 fd08 	bl	8003532 <ledDance>
			break;
 8001b22:	e001      	b.n	8001b28 <ConsoleCommandLEDSet+0xf0>
		default :
			return CONSOLE_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <ConsoleCommandLEDSet+0xf2>
			break;
	}


	return CONSOLE_SUCCESS;
 8001b28:	2300      	movs	r3, #0

}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	0800e9d8 	.word	0x0800e9d8
 8001b38:	0800e9e8 	.word	0x0800e9e8

08001b3c <ConsoleCommandMemTest>:

static eCommandResult_T ConsoleCommandMemTest(const char buffer[])
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
//
//	HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, 1);
//	Temp = (temp0 << 16) | (temp1 << 8) | temp2;
//	sprintf(msg,"Flash Mem Id \t%#02x %#02x %#02x %#02x %#02x %#02x %#02x %#02x ",id[0],id[1],id[2],id[3],id[4],id[5],id[6],id[7]);
//	ConsoleSendLine(msg);
	ConsoleSendLine("Commented out");
 8001b44:	4803      	ldr	r0, [pc, #12]	; (8001b54 <ConsoleCommandMemTest+0x18>)
 8001b46:	f7ff fd4b 	bl	80015e0 <ConsoleSendLine>
	return CONSOLE_SUCCESS;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	0800ea10 	.word	0x0800ea10

08001b58 <ConsoleCommandCPUQuery>:

static eCommandResult_T ConsoleCommandCPUQuery(const char buffer[])
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

	char msg[30];
	register int SP __asm("r13");


	sprintf(msg,"-- CPU Details --");
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	492b      	ldr	r1, [pc, #172]	; (8001c14 <ConsoleCommandCPUQuery+0xbc>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f009 fc48 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fd35 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Stack Pointer \t\t%#08x",SP);
 8001b76:	466a      	mov	r2, sp
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4926      	ldr	r1, [pc, #152]	; (8001c18 <ConsoleCommandCPUQuery+0xc0>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f009 fc3c 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fd29 	bl	80015e0 <ConsoleSendLine>

	unsigned int* HP = malloc(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f008 fec2 	bl	800a918 <malloc>
 8001b94:	4603      	mov	r3, r0
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
	*HP=0xAB;
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	22ab      	movs	r2, #171	; 0xab
 8001b9c:	601a      	str	r2, [r3, #0]

	sprintf(msg,"Heap Pointer \t\t%#08x",(unsigned int)HP-1);
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	1e5a      	subs	r2, r3, #1
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	491d      	ldr	r1, [pc, #116]	; (8001c1c <ConsoleCommandCPUQuery+0xc4>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f009 fc27 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fd14 	bl	80015e0 <ConsoleSendLine>
	free(HP);
 8001bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bba:	f008 feb5 	bl	800a928 <free>
//	ConsoleSendLine(msg);

//	sprintf(msg,"Un-initialised global variable \t\t%#08x",(unsigned int)&uninitGlobalVar);
//	ConsoleSendLine(msg);

	sprintf(msg,"Const variable \t\t%#08x",(unsigned int)&constVar);
 8001bbe:	4a18      	ldr	r2, [pc, #96]	; (8001c20 <ConsoleCommandCPUQuery+0xc8>)
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	4917      	ldr	r1, [pc, #92]	; (8001c24 <ConsoleCommandCPUQuery+0xcc>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f009 fc18 	bl	800b3fc <siprintf>
		ConsoleSendLine(msg);
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fd05 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Static variable \t\t%#08x",(unsigned int)&staticVar);
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <ConsoleCommandCPUQuery+0xd0>)
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4913      	ldr	r1, [pc, #76]	; (8001c2c <ConsoleCommandCPUQuery+0xd4>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f009 fc0c 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fcf9 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Function variable \t\t%#08x",(unsigned int)&funcVar);
 8001bee:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	490e      	ldr	r1, [pc, #56]	; (8001c30 <ConsoleCommandCPUQuery+0xd8>)
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f009 fbff 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fcec 	bl	80015e0 <ConsoleSendLine>

	return CONSOLE_SUCCESS;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3730      	adds	r7, #48	; 0x30
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	0800ea20 	.word	0x0800ea20
 8001c18:	0800ea34 	.word	0x0800ea34
 8001c1c:	0800ea4c 	.word	0x0800ea4c
 8001c20:	0800ee80 	.word	0x0800ee80
 8001c24:	0800ea64 	.word	0x0800ea64
 8001c28:	200004ec 	.word	0x200004ec
 8001c2c:	0800ea7c 	.word	0x0800ea7c
 8001c30:	0800ea94 	.word	0x0800ea94

08001c34 <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	461a      	mov	r2, r3
 8001c42:	2101      	movs	r1, #1
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fb6d 	bl	8001324 <ConsoleParamFindN>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 8001c4e:	7ffb      	ldrb	r3, [r7, #31]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 8001c54:	2310      	movs	r3, #16
 8001c56:	e049      	b.n	8001cec <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	18d0      	adds	r0, r2, r3
 8001c5e:	f107 0114 	add.w	r1, r7, #20
 8001c62:	f107 0218 	add.w	r2, r7, #24
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4921      	ldr	r1, [pc, #132]	; (8001cf4 <ConsoleCommandDateSet+0xc0>)
 8001c70:	f009 fbe4 	bl	800b43c <siscanf>

	if (!IS_RTC_DATE(day) )
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <ConsoleCommandDateSet+0x4c>
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b1f      	cmp	r3, #31
 8001c7e:	d904      	bls.n	8001c8a <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 8001c80:	481d      	ldr	r0, [pc, #116]	; (8001cf8 <ConsoleCommandDateSet+0xc4>)
 8001c82:	f7ff fcad 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001c86:	2310      	movs	r3, #16
 8001c88:	e030      	b.n	8001cec <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <ConsoleCommandDateSet+0x62>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d904      	bls.n	8001ca0 <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 8001c96:	4819      	ldr	r0, [pc, #100]	; (8001cfc <ConsoleCommandDateSet+0xc8>)
 8001c98:	f7ff fca2 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	e025      	b.n	8001cec <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b63      	cmp	r3, #99	; 0x63
 8001ca4:	d904      	bls.n	8001cb0 <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8001ca6:	4816      	ldr	r0, [pc, #88]	; (8001d00 <ConsoleCommandDateSet+0xcc>)
 8001ca8:	f7ff fc9a 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001cac:	2310      	movs	r3, #16
 8001cae:	e01d      	b.n	8001cec <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <ConsoleCommandDateSet+0xd0>)
 8001cd0:	f006 f8b8 	bl	8007e44 <HAL_RTC_SetDate>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 8001cda:	480b      	ldr	r0, [pc, #44]	; (8001d08 <ConsoleCommandDateSet+0xd4>)
 8001cdc:	f7ff fc80 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001ce0:	2310      	movs	r3, #16
 8001ce2:	e003      	b.n	8001cec <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8001ce4:	4809      	ldr	r0, [pc, #36]	; (8001d0c <ConsoleCommandDateSet+0xd8>)
 8001ce6:	f7ff fc7b 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001cea:	2300      	movs	r3, #0
	}
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	0800eab0 	.word	0x0800eab0
 8001cf8:	0800eabc 	.word	0x0800eabc
 8001cfc:	0800eae0 	.word	0x0800eae0
 8001d00:	0800eb04 	.word	0x0800eb04
 8001d04:	200005b4 	.word	0x200005b4
 8001d08:	0800eb28 	.word	0x0800eb28
 8001d0c:	0800eb4c 	.word	0x0800eb4c

08001d10 <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08e      	sub	sp, #56	; 0x38
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2101      	movs	r1, #1
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff faff 	bl	8001324 <ConsoleParamFindN>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 8001d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 8001d34:	2310      	movs	r3, #16
 8001d36:	e041      	b.n	8001dbc <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	18d0      	adds	r0, r2, r3
 8001d3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d42:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d46:	f107 0320 	add.w	r3, r7, #32
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	491d      	ldr	r1, [pc, #116]	; (8001dc4 <ConsoleCommandTimeSet+0xb4>)
 8001d50:	f009 fb74 	bl	800b43c <siscanf>

	if (!IS_RTC_MINUTES(min) )
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	2b3b      	cmp	r3, #59	; 0x3b
 8001d58:	d904      	bls.n	8001d64 <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 8001d5a:	481b      	ldr	r0, [pc, #108]	; (8001dc8 <ConsoleCommandTimeSet+0xb8>)
 8001d5c:	f7ff fc40 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d60:	2310      	movs	r3, #16
 8001d62:	e02b      	b.n	8001dbc <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	2b3b      	cmp	r3, #59	; 0x3b
 8001d68:	d904      	bls.n	8001d74 <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 8001d6a:	4818      	ldr	r0, [pc, #96]	; (8001dcc <ConsoleCommandTimeSet+0xbc>)
 8001d6c:	f7ff fc38 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d70:	2310      	movs	r3, #16
 8001d72:	e023      	b.n	8001dbc <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	2b17      	cmp	r3, #23
 8001d78:	d904      	bls.n	8001d84 <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 8001d7a:	4815      	ldr	r0, [pc, #84]	; (8001dd0 <ConsoleCommandTimeSet+0xc0>)
 8001d7c:	f7ff fc30 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d80:	2310      	movs	r3, #16
 8001d82:	e01b      	b.n	8001dbc <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 8001d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <ConsoleCommandTimeSet+0xc4>)
 8001da0:	f005 ff58 	bl	8007c54 <HAL_RTC_SetTime>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 8001daa:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <ConsoleCommandTimeSet+0xc8>)
 8001dac:	f7ff fc18 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001db0:	2310      	movs	r3, #16
 8001db2:	e003      	b.n	8001dbc <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Time Set");
 8001db4:	4809      	ldr	r0, [pc, #36]	; (8001ddc <ConsoleCommandTimeSet+0xcc>)
 8001db6:	f7ff fc13 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001dba:	2300      	movs	r3, #0
	}
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3730      	adds	r7, #48	; 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	0800eb58 	.word	0x0800eb58
 8001dc8:	0800eb64 	.word	0x0800eb64
 8001dcc:	0800eb88 	.word	0x0800eb88
 8001dd0:	0800ebb0 	.word	0x0800ebb0
 8001dd4:	200005b4 	.word	0x200005b4
 8001dd8:	0800ebd4 	.word	0x0800ebd4
 8001ddc:	0800ebf8 	.word	0x0800ebf8

08001de0 <ConsoleCommandLipoQuery>:


static eCommandResult_T ConsoleCommandLipoQuery(const char buffer[])
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b090      	sub	sp, #64	; 0x40
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	uint16_t voltage;
	uint16_t temp;
	uint16_t version;
	char msg[50];
	lc709203_getCellVoltage(&voltage);
 8001de8:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 fb0c 	bl	800340a <lc709203_getCellVoltage>
	lc709203_getCellTemp(&temp);
 8001df2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 fb14 	bl	8003424 <lc709203_getCellTemp>
	lc709203_getId(&version);
 8001dfc:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8001e00:	4618      	mov	r0, r3
 8001e02:	f001 fb1c 	bl	800343e <lc709203_getId>

	sprintf(msg,"-- Lipo Cell Details --");
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	4922      	ldr	r1, [pc, #136]	; (8001e94 <ConsoleCommandLipoQuery+0xb4>)
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f009 faf5 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fbe2 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Monitor Version: %d",version);
 8001e1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	491c      	ldr	r1, [pc, #112]	; (8001e98 <ConsoleCommandLipoQuery+0xb8>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	f009 fae8 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fbd5 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Cell Voltage: %1.4f v",((double)voltage/1000));
 8001e36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb7b 	bl	8000534 <__aeabi_ui2d>
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <ConsoleCommandLipoQuery+0xbc>)
 8001e44:	f7fe fd1a 	bl	800087c <__aeabi_ddiv>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	f107 0008 	add.w	r0, r7, #8
 8001e50:	4913      	ldr	r1, [pc, #76]	; (8001ea0 <ConsoleCommandLipoQuery+0xc0>)
 8001e52:	f009 fad3 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fbc0 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Cell Temp: %1.2f v",((double)temp/100));
 8001e60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb66 	bl	8000534 <__aeabi_ui2d>
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <ConsoleCommandLipoQuery+0xc4>)
 8001e6e:	f7fe fd05 	bl	800087c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	f107 0008 	add.w	r0, r7, #8
 8001e7a:	490b      	ldr	r1, [pc, #44]	; (8001ea8 <ConsoleCommandLipoQuery+0xc8>)
 8001e7c:	f009 fabe 	bl	800b3fc <siprintf>
	ConsoleSendLine(msg);
 8001e80:	f107 0308 	add.w	r3, r7, #8
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fbab 	bl	80015e0 <ConsoleSendLine>



	return COMMAND_SUCCESS;
 8001e8a:	2300      	movs	r3, #0

}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3740      	adds	r7, #64	; 0x40
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	0800ec04 	.word	0x0800ec04
 8001e98:	0800ec1c 	.word	0x0800ec1c
 8001e9c:	408f4000 	.word	0x408f4000
 8001ea0:	0800ec30 	.word	0x0800ec30
 8001ea4:	40590000 	.word	0x40590000
 8001ea8:	0800ec48 	.word	0x0800ec48

08001eac <ConsoleCommandAccelQuery>:
 * @param: Buffer
 * @return: eCommandResult_T
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandAccelQuery(const char buffer[])
{
 8001eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eb0:	b0c3      	sub	sp, #268	; 0x10c
 8001eb2:	af08      	add	r7, sp, #32
 8001eb4:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	char binStr[9];
	MPU6050_t data;
	char msg[100];
	uint32_t paramIndex;
	float rawAveX = 0;
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	float rawAveY = 0;
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float rawAveZ = 0;
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	ConsoleParamFindN(buffer, 1 , &paramIndex);
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fa24 	bl	8001324 <ConsoleParamFindN>

	if (0 == paramIndex)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11a      	bne.n	8001f18 <ConsoleCommandAccelQuery+0x6c>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 8001ee2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	48bd      	ldr	r0, [pc, #756]	; (80021e0 <ConsoleCommandAccelQuery+0x334>)
 8001eea:	f000 fe65 	bl	8002bb8 <MPU6050_Read_All>
		sprintf(msg,"X Angle\t: %f \t\t Y Angle\t: %f\n",data.KalmanAngleX, data.KalmanAngleY);
 8001eee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001ef2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001ef6:	f107 040c 	add.w	r4, r7, #12
 8001efa:	e9cd 2300 	strd	r2, r3, [sp]
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	49b8      	ldr	r1, [pc, #736]	; (80021e4 <ConsoleCommandAccelQuery+0x338>)
 8001f04:	4620      	mov	r0, r4
 8001f06:	f009 fa79 	bl	800b3fc <siprintf>
		ConsoleSendLine(msg);
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fb66 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e15d      	b.n	80021d4 <ConsoleCommandAccelQuery+0x328>
	}


	// Read Raw n Times (Param r n where n = number of reads
	switch (buffer[paramIndex])
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	3b67      	subs	r3, #103	; 0x67
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d824      	bhi.n	8001f70 <ConsoleCommandAccelQuery+0xc4>
 8001f26:	a201      	add	r2, pc, #4	; (adr r2, 8001f2c <ConsoleCommandAccelQuery+0x80>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	0800211f 	.word	0x0800211f
 8001f30:	08001f71 	.word	0x08001f71
 8001f34:	08001f71 	.word	0x08001f71
 8001f38:	08001f71 	.word	0x08001f71
 8001f3c:	080020cb 	.word	0x080020cb
 8001f40:	08001f71 	.word	0x08001f71
 8001f44:	08001f71 	.word	0x08001f71
 8001f48:	08001f71 	.word	0x08001f71
 8001f4c:	08001f71 	.word	0x08001f71
 8001f50:	08001f71 	.word	0x08001f71
 8001f54:	08001f71 	.word	0x08001f71
 8001f58:	08001f75 	.word	0x08001f75
 8001f5c:	08001f71 	.word	0x08001f71
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f71 	.word	0x08001f71
 8001f68:	08001f71 	.word	0x08001f71
 8001f6c:	0800217d 	.word	0x0800217d
	{
		default:
				return COMMAND_PARAMETER_ERROR;
 8001f70:	2310      	movs	r3, #16
 8001f72:	e12f      	b.n	80021d4 <ConsoleCommandAccelQuery+0x328>
		case 'r':
				ConsoleReceiveParamInt16(buffer, 2, &n);
 8001f74:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fa32 	bl	80013e6 <ConsoleReceiveParamInt16>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8001f88:	e052      	b.n	8002030 <ConsoleCommandAccelQuery+0x184>
				{
					MPU6050_Read_Accel(&I2C_MPU6050, &data);
 8001f8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4893      	ldr	r0, [pc, #588]	; (80021e0 <ConsoleCommandAccelQuery+0x334>)
 8001f92:	f000 fd25 	bl	80029e0 <MPU6050_Read_Accel>
					rawAveX += data.Accel_X_RAW;
 8001f96:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa2:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
					rawAveY += data.Accel_Y_RAW;
 8001fae:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fba:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc2:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
					rawAveZ += data.Accel_Z_RAW;
 8001fc6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
					sprintf(msg,"RAW:[X:%5i Y:%5i Z:5%i] G:[X:%2f Y:%2f Z:%2f]",data.Accel_X_RAW, data.Accel_Y_RAW,data.Accel_Z_RAW, data.Ax,data.Ay,data.Az);
 8001fde:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8001fe2:	469c      	mov	ip, r3
 8001fe4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001fe8:	469e      	mov	lr, r3
 8001fea:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001ff4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ff8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001ffc:	f107 060c 	add.w	r6, r7, #12
 8002000:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002008:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4673      	mov	r3, lr
 8002012:	4662      	mov	r2, ip
 8002014:	4974      	ldr	r1, [pc, #464]	; (80021e8 <ConsoleCommandAccelQuery+0x33c>)
 8002016:	4630      	mov	r0, r6
 8002018:	f009 f9f0 	bl	800b3fc <siprintf>
					ConsoleSendLine(msg);
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fadd 	bl	80015e0 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8002026:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800202a:	3301      	adds	r3, #1
 800202c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8002030:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002034:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8002038:	4293      	cmp	r3, r2
 800203a:	dba6      	blt.n	8001f8a <ConsoleCommandAccelQuery+0xde>
				}
				rawAveX = rawAveX/n;
 800203c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002048:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 800204c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002050:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				rawAveY = rawAveY/n;
 8002054:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002060:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 8002064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002068:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				rawAveZ = rawAveZ/n;
 800206c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002078:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 800207c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002080:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
				sprintf(msg,"\nRAW Average :[X:%5f Y:%5f Z:5%f]\n",rawAveX,rawAveY,rawAveZ);
 8002084:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8002088:	f7fe fa76 	bl	8000578 <__aeabi_f2d>
 800208c:	4680      	mov	r8, r0
 800208e:	4689      	mov	r9, r1
 8002090:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8002094:	f7fe fa70 	bl	8000578 <__aeabi_f2d>
 8002098:	4604      	mov	r4, r0
 800209a:	460d      	mov	r5, r1
 800209c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80020a0:	f7fe fa6a 	bl	8000578 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	f107 000c 	add.w	r0, r7, #12
 80020ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020b0:	e9cd 4500 	strd	r4, r5, [sp]
 80020b4:	4642      	mov	r2, r8
 80020b6:	464b      	mov	r3, r9
 80020b8:	494c      	ldr	r1, [pc, #304]	; (80021ec <ConsoleCommandAccelQuery+0x340>)
 80020ba:	f009 f99f 	bl	800b3fc <siprintf>
				ConsoleSendLine(msg);
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fa8c 	bl	80015e0 <ConsoleSendLine>
				break;
 80020c8:	e083      	b.n	80021d2 <ConsoleCommandAccelQuery+0x326>

		case 'k':
				ConsoleSendLine("--* Kalman Angle *--");
 80020ca:	4849      	ldr	r0, [pc, #292]	; (80021f0 <ConsoleCommandAccelQuery+0x344>)
 80020cc:	f7ff fa88 	bl	80015e0 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80020d6:	e00a      	b.n	80020ee <ConsoleCommandAccelQuery+0x242>
				{
					MPU6050_Read_All(&I2C_MPU6050, &data);
 80020d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020dc:	4619      	mov	r1, r3
 80020de:	4840      	ldr	r0, [pc, #256]	; (80021e0 <ConsoleCommandAccelQuery+0x334>)
 80020e0:	f000 fd6a 	bl	8002bb8 <MPU6050_Read_All>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 80020e4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80020e8:	3301      	adds	r3, #1
 80020ea:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80020ee:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80020f2:	2b31      	cmp	r3, #49	; 0x31
 80020f4:	d9f0      	bls.n	80020d8 <ConsoleCommandAccelQuery+0x22c>
				}
				sprintf(msg,"[X:%2f Y:%2f]\n",data.KalmanAngleX, data.KalmanAngleY);
 80020f6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80020fa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80020fe:	f107 040c 	add.w	r4, r7, #12
 8002102:	e9cd 2300 	strd	r2, r3, [sp]
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	493a      	ldr	r1, [pc, #232]	; (80021f4 <ConsoleCommandAccelQuery+0x348>)
 800210c:	4620      	mov	r0, r4
 800210e:	f009 f975 	bl	800b3fc <siprintf>
				ConsoleSendLine(msg);
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fa62 	bl	80015e0 <ConsoleSendLine>
			break;
 800211c:	e059      	b.n	80021d2 <ConsoleCommandAccelQuery+0x326>
		case 'g':
			ConsoleReceiveParamHexUint16(buffer, 2, &reg);
 800211e:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 8002122:	461a      	mov	r2, r3
 8002124:	2102      	movs	r1, #2
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff f9c3 	bl	80014b2 <ConsoleReceiveParamHexUint16>
			regData =  MPU6050_ReadReg(&I2C_MPU6050,reg);
 800212c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002130:	4619      	mov	r1, r3
 8002132:	482b      	ldr	r0, [pc, #172]	; (80021e0 <ConsoleCommandAccelQuery+0x334>)
 8002134:	f000 fcf6 	bl	8002b24 <MPU6050_ReadReg>
 8002138:	4603      	mov	r3, r0
 800213a:	b29b      	uxth	r3, r3
 800213c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			byteToBin(regData, binStr);
 8002140:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f001 f92c 	bl	80033aa <byteToBin>
			sprintf(msg,"Reg [0x%x] = %x, %s",reg,regData,binStr);
 8002152:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002156:	461a      	mov	r2, r3
 8002158:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800215c:	4619      	mov	r1, r3
 800215e:	f107 000c 	add.w	r0, r7, #12
 8002162:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	460b      	mov	r3, r1
 800216a:	4923      	ldr	r1, [pc, #140]	; (80021f8 <ConsoleCommandAccelQuery+0x34c>)
 800216c:	f009 f946 	bl	800b3fc <siprintf>
			ConsoleSendLine(msg);
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fa33 	bl	80015e0 <ConsoleSendLine>
		break;
 800217a:	e02a      	b.n	80021d2 <ConsoleCommandAccelQuery+0x326>
		case 'w':
				if (COMMAND_SUCCESS != ConsoleReceiveParamHexUint16(buffer, 2, &reg))
 800217c:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 8002180:	461a      	mov	r2, r3
 8002182:	2102      	movs	r1, #2
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff f994 	bl	80014b2 <ConsoleReceiveParamHexUint16>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <ConsoleCommandAccelQuery+0x2ee>
				{
					ConsoleSendLine("Register missing");
 8002190:	481a      	ldr	r0, [pc, #104]	; (80021fc <ConsoleCommandAccelQuery+0x350>)
 8002192:	f7ff fa25 	bl	80015e0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8002196:	2310      	movs	r3, #16
 8002198:	e01c      	b.n	80021d4 <ConsoleCommandAccelQuery+0x328>
				};

				if (COMMAND_SUCCESS != ConsoleReceiveParamHexUint16(buffer, 3, &regData))
 800219a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800219e:	461a      	mov	r2, r3
 80021a0:	2103      	movs	r1, #3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff f985 	bl	80014b2 <ConsoleReceiveParamHexUint16>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d004      	beq.n	80021b8 <ConsoleCommandAccelQuery+0x30c>
				{
					ConsoleSendLine("Register Data missing");
 80021ae:	4814      	ldr	r0, [pc, #80]	; (8002200 <ConsoleCommandAccelQuery+0x354>)
 80021b0:	f7ff fa16 	bl	80015e0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 80021b4:	2310      	movs	r3, #16
 80021b6:	e00d      	b.n	80021d4 <ConsoleCommandAccelQuery+0x328>
				};
				MPU6050_WriteReg(&I2C_MPU6050,reg,regData );
 80021b8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80021bc:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4806      	ldr	r0, [pc, #24]	; (80021e0 <ConsoleCommandAccelQuery+0x334>)
 80021c6:	f000 fcc5 	bl	8002b54 <MPU6050_WriteReg>

				ConsoleSendLine("done.");
 80021ca:	480e      	ldr	r0, [pc, #56]	; (8002204 <ConsoleCommandAccelQuery+0x358>)
 80021cc:	f7ff fa08 	bl	80015e0 <ConsoleSendLine>
				break;
 80021d0:	bf00      	nop
	}

	return COMMAND_SUCCESS;
 80021d2:	2300      	movs	r3, #0



}
 80021d4:	4618      	mov	r0, r3
 80021d6:	37ec      	adds	r7, #236	; 0xec
 80021d8:	46bd      	mov	sp, r7
 80021da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021de:	bf00      	nop
 80021e0:	20000560 	.word	0x20000560
 80021e4:	0800ec5c 	.word	0x0800ec5c
 80021e8:	0800ec7c 	.word	0x0800ec7c
 80021ec:	0800ecac 	.word	0x0800ecac
 80021f0:	0800ecd0 	.word	0x0800ecd0
 80021f4:	0800ece8 	.word	0x0800ece8
 80021f8:	0800ecf8 	.word	0x0800ecf8
 80021fc:	0800ed0c 	.word	0x0800ed0c
 8002200:	0800ed20 	.word	0x0800ed20
 8002204:	0800ed38 	.word	0x0800ed38

08002208 <ConsoleCommandTimeQuery>:


static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b092      	sub	sp, #72	; 0x48
 800220c:	af02      	add	r7, sp, #8
 800220e:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	2200      	movs	r2, #0
 8002216:	4619      	mov	r1, r3
 8002218:	480f      	ldr	r0, [pc, #60]	; (8002258 <ConsoleCommandTimeQuery+0x50>)
 800221a:	f005 fdb5 	bl	8007d88 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	2200      	movs	r2, #0
 8002224:	4619      	mov	r1, r3
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <ConsoleCommandTimeQuery+0x50>)
 8002228:	f005 fe90 	bl	8007f4c <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 800222c:	7b3b      	ldrb	r3, [r7, #12]
 800222e:	461a      	mov	r2, r3
 8002230:	7b7b      	ldrb	r3, [r7, #13]
 8002232:	4619      	mov	r1, r3
 8002234:	7bbb      	ldrb	r3, [r7, #14]
 8002236:	f107 0020 	add.w	r0, r7, #32
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	460b      	mov	r3, r1
 800223e:	4907      	ldr	r1, [pc, #28]	; (800225c <ConsoleCommandTimeQuery+0x54>)
 8002240:	f009 f8dc 	bl	800b3fc <siprintf>
	ConsoleSendString(time);
 8002244:	f107 0320 	add.w	r3, r7, #32
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff f9bc 	bl	80015c6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3740      	adds	r7, #64	; 0x40
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200005b4 	.word	0x200005b4
 800225c:	0800ed40 	.word	0x0800ed40

08002260 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af02      	add	r7, sp, #8
 8002266:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	2200      	movs	r2, #0
 800226e:	4619      	mov	r1, r3
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <ConsoleCommandDateQuery+0x44>)
 8002272:	f005 fe6b 	bl	8007f4c <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8002276:	7bbb      	ldrb	r3, [r7, #14]
 8002278:	461a      	mov	r2, r3
 800227a:	7b7b      	ldrb	r3, [r7, #13]
 800227c:	4619      	mov	r1, r3
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	f107 0010 	add.w	r0, r7, #16
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	460b      	mov	r3, r1
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <ConsoleCommandDateQuery+0x48>)
 800228a:	f009 f8b7 	bl	800b3fc <siprintf>
	ConsoleSendString(date);
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f997 	bl	80015c6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3730      	adds	r7, #48	; 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200005b4 	.word	0x200005b4
 80022a8:	0800ed58 	.word	0x0800ed58

080022ac <ConsoleCommandHelp>:




static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 80022b4:	2300      	movs	r3, #0
 80022b6:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 80022b8:	2311      	movs	r3, #17
 80022ba:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e01c      	b.n	80022fc <ConsoleCommandHelp+0x50>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 80022c2:	4a13      	ldr	r2, [pc, #76]	; (8002310 <ConsoleCommandHelp+0x64>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	216c      	movs	r1, #108	; 0x6c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f899 	bl	8002408 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 80022d6:	480f      	ldr	r0, [pc, #60]	; (8002314 <ConsoleCommandHelp+0x68>)
 80022d8:	f000 f896 	bl	8002408 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	226c      	movs	r2, #108	; 0x6c
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	3308      	adds	r3, #8
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <ConsoleCommandHelp+0x64>)
 80022e8:	4413      	add	r3, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f88c 	bl	8002408 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 80022f0:	4809      	ldr	r0, [pc, #36]	; (8002318 <ConsoleCommandHelp+0x6c>)
 80022f2:	f000 f889 	bl	8002408 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3b01      	subs	r3, #1
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	429a      	cmp	r2, r3
 8002304:	d3dd      	bcc.n	80022c2 <ConsoleCommandHelp+0x16>
	}
	return result;
 8002306:	7cfb      	ldrb	r3, [r7, #19]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	0800ee84 	.word	0x0800ee84
 8002314:	0800ed70 	.word	0x0800ed70
 8002318:	0800ed74 	.word	0x0800ed74

0800231c <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8002328:	4805      	ldr	r0, [pc, #20]	; (8002340 <ConsoleCommandVer+0x24>)
 800232a:	f000 f86d 	bl	8002408 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <ConsoleCommandVer+0x28>)
 8002330:	f000 f86a 	bl	8002408 <ConsoleIoSendString>
	return result;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	0800ed78 	.word	0x0800ed78
 8002344:	0800ed74 	.word	0x0800ed74

08002348 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 800234c:	4b02      	ldr	r3, [pc, #8]	; (8002358 <ConsoleCommandsGetTable+0x10>)
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	0800ee84 	.word	0x0800ee84

0800235c <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8002364:	2201      	movs	r2, #1
 8002366:	4909      	ldr	r1, [pc, #36]	; (800238c <HAL_UART_RxCpltCallback+0x30>)
 8002368:	4809      	ldr	r0, [pc, #36]	; (8002390 <HAL_UART_RxCpltCallback+0x34>)
 800236a:	f007 fb0e 	bl	800998a <HAL_UART_Receive_IT>
    }



    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <HAL_UART_RxCpltCallback+0x30>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b0a      	cmp	r3, #10
 8002374:	d005      	beq.n	8002382 <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_UART_RxCpltCallback+0x30>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <HAL_UART_RxCpltCallback+0x38>)
 800237e:	f7fe fdcc 	bl	8000f1a <cBuffer_Write>

    }
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000538 	.word	0x20000538
 8002390:	20000720 	.word	0x20000720
 8002394:	20000530 	.word	0x20000530

08002398 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	4906      	ldr	r1, [pc, #24]	; (80023b8 <ConsoleIoInit+0x20>)
 80023a0:	4806      	ldr	r0, [pc, #24]	; (80023bc <ConsoleIoInit+0x24>)
 80023a2:	f7fe fd9b 	bl	8000edc <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 80023a6:	2201      	movs	r2, #1
 80023a8:	4905      	ldr	r1, [pc, #20]	; (80023c0 <ConsoleIoInit+0x28>)
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <ConsoleIoInit+0x2c>)
 80023ac:	f007 faed 	bl	800998a <HAL_UART_Receive_IT>

	return CONSOLE_SUCCESS;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200004f0 	.word	0x200004f0
 80023bc:	20000530 	.word	0x20000530
 80023c0:	20000538 	.word	0x20000538
 80023c4:	20000720 	.word	0x20000720

080023c8 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	uint8_t len;




	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 80023d0:	f107 030f 	add.w	r3, r7, #15
 80023d4:	220d      	movs	r2, #13
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	480a      	ldr	r0, [pc, #40]	; (8002404 <ConsoleIoReceive+0x3c>)
 80023da:	f7fe fdc1 	bl	8000f60 <cBuffer_GetString>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len-1]  = 0x0; //Terminate String in C Style
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 ff7e 	bl	80032f2 <manageBackSpace>
		return CONSOLE_SUCCESS;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <ConsoleIoReceive+0x34>
	}
	return CONSOLE_NO_STRING;
 80023fa:	2302      	movs	r3, #2

}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000530 	.word	0x20000530

08002408 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7fd feef 	bl	80001f4 <strlen>
 8002416:	4603      	mov	r3, r0
 8002418:	b29a      	uxth	r2, r3
 800241a:	2364      	movs	r3, #100	; 0x64
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4804      	ldr	r0, [pc, #16]	; (8002430 <ConsoleIoSendString+0x28>)
 8002420:	f007 fa21 	bl	8009866 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000720 	.word	0x20000720

08002434 <colourFindByCode>:
			{"BRICK",0x640032}

};

colour_t * colourFindByCode(const uint32_t code)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e016      	b.n	8002470 <colourFindByCode+0x3c>
	{
		if (code == colours[i].code)
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	490f      	ldr	r1, [pc, #60]	; (8002484 <colourFindByCode+0x50>)
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3310      	adds	r3, #16
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d107      	bne.n	800246a <colourFindByCode+0x36>
		{
			return &colours[i];
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4a07      	ldr	r2, [pc, #28]	; (8002484 <colourFindByCode+0x50>)
 8002466:	4413      	add	r3, r2
 8002468:	e006      	b.n	8002478 <colourFindByCode+0x44>
	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	3301      	adds	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b0b      	cmp	r3, #11
 8002474:	d9e5      	bls.n	8002442 <colourFindByCode+0xe>
		}
	}
	return NULL;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	20000000 	.word	0x20000000

08002488 <colourFindByid>:

	return NULL;
}

colour_t *colourFindByid(const uint8_t id )
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]

	if (id < COLOUR_COUNT_MAX)
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b0b      	cmp	r3, #11
 8002496:	d807      	bhi.n	80024a8 <colourFindByid+0x20>
		return &colours[id];
 8002498:	79fa      	ldrb	r2, [r7, #7]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <colourFindByid+0x30>)
 80024a4:	4413      	add	r3, r2
 80024a6:	e000      	b.n	80024aa <colourFindByid+0x22>
	else
		return NULL;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000000 	.word	0x20000000

080024bc <dodecaInit>:
		}
};


eDodecaErr_t dodecaInit(dodecaItems_t * items)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	dodecaItems = items;
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <dodecaInit+0x1c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
	return DODECA_ERR_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	2000053c 	.word	0x2000053c

080024dc <dodecaReset>:

eDodecaErr_t dodecaReset()
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<DODECA_COUNT_MAX;i++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	71fb      	strb	r3, [r7, #7]
 80024e6:	e04b      	b.n	8002580 <dodecaReset+0xa4>
	{
		dodecaItems->items[i].colour = colourFindByid(defaultDoceca.items[i].colour)->code;
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	4a29      	ldr	r2, [pc, #164]	; (8002590 <dodecaReset+0xb4>)
 80024ec:	015b      	lsls	r3, r3, #5
 80024ee:	4413      	add	r3, r2
 80024f0:	3314      	adds	r3, #20
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ffc6 	bl	8002488 <colourFindByid>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b25      	ldr	r3, [pc, #148]	; (8002594 <dodecaReset+0xb8>)
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	6912      	ldr	r2, [r2, #16]
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	440b      	add	r3, r1
 800250a:	3314      	adds	r3, #20
 800250c:	601a      	str	r2, [r3, #0]
		dodecaItems->items[i].maxTimeMins = defaultDoceca.items[i].maxTimeMins;
 800250e:	79f9      	ldrb	r1, [r7, #7]
 8002510:	4b20      	ldr	r3, [pc, #128]	; (8002594 <dodecaReset+0xb8>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	481e      	ldr	r0, [pc, #120]	; (8002590 <dodecaReset+0xb4>)
 8002518:	0149      	lsls	r1, r1, #5
 800251a:	4401      	add	r1, r0
 800251c:	3119      	adds	r1, #25
 800251e:	7809      	ldrb	r1, [r1, #0]
 8002520:	015b      	lsls	r3, r3, #5
 8002522:	4413      	add	r3, r2
 8002524:	3319      	adds	r3, #25
 8002526:	460a      	mov	r2, r1
 8002528:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].minTimeMins = defaultDoceca.items[i].minTimeMins;
 800252a:	79f9      	ldrb	r1, [r7, #7]
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <dodecaReset+0xb8>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	4817      	ldr	r0, [pc, #92]	; (8002590 <dodecaReset+0xb4>)
 8002534:	0149      	lsls	r1, r1, #5
 8002536:	4401      	add	r1, r0
 8002538:	3118      	adds	r1, #24
 800253a:	7809      	ldrb	r1, [r1, #0]
 800253c:	015b      	lsls	r3, r3, #5
 800253e:	4413      	add	r3, r2
 8002540:	3318      	adds	r3, #24
 8002542:	460a      	mov	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].state = defaultDoceca.items[i].state;
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <dodecaReset+0xb8>)
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	4810      	ldr	r0, [pc, #64]	; (8002590 <dodecaReset+0xb4>)
 8002550:	0152      	lsls	r2, r2, #5
 8002552:	4402      	add	r2, r0
 8002554:	321c      	adds	r2, #28
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	015b      	lsls	r3, r3, #5
 800255a:	440b      	add	r3, r1
 800255c:	331c      	adds	r3, #28
 800255e:	601a      	str	r2, [r3, #0]
		strcpy(dodecaItems->items[i].name,defaultDoceca.items[i].name);
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <dodecaReset+0xb8>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	015b      	lsls	r3, r3, #5
 8002568:	441a      	add	r2, r3
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	015b      	lsls	r3, r3, #5
 800256e:	4908      	ldr	r1, [pc, #32]	; (8002590 <dodecaReset+0xb4>)
 8002570:	440b      	add	r3, r1
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f008 ffdf 	bl	800b538 <strcpy>
	for (uint8_t i=0;i<DODECA_COUNT_MAX;i++)
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	3301      	adds	r3, #1
 800257e:	71fb      	strb	r3, [r7, #7]
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b0b      	cmp	r3, #11
 8002584:	d9b0      	bls.n	80024e8 <dodecaReset+0xc>
	}
	return DODECA_ERR_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	0800f5b0 	.word	0x0800f5b0
 8002594:	2000053c 	.word	0x2000053c

08002598 <dodecaGet>:

dodecaItem_t *dodecaGet(uint8_t id)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
	if (id > DODECA_COUNT_MAX )
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b0c      	cmp	r3, #12
 80025a6:	d901      	bls.n	80025ac <dodecaGet+0x14>
	{
		return 0x0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e004      	b.n	80025b6 <dodecaGet+0x1e>
	}

	return &dodecaItems->items[id];
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <dodecaGet+0x2c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	015b      	lsls	r3, r3, #5
 80025b4:	4413      	add	r3, r2
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	2000053c 	.word	0x2000053c

080025c8 <dodecaGetStateName>:




eDodecaErr_t dodecaGetStateName(eDodecaState_t state,char* name)
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]

	switch (state)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d016      	beq.n	8002606 <dodecaGetStateName+0x3e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d824      	bhi.n	8002628 <dodecaGetStateName+0x60>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d003      	beq.n	80025ec <dodecaGetStateName+0x24>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d015      	beq.n	8002616 <dodecaGetStateName+0x4e>
 80025ea:	e01d      	b.n	8002628 <dodecaGetStateName+0x60>
	{
		case DODECA_STATE_NOT_CONFIGURED : strcpy(name,"Not Configured"); break;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4a16      	ldr	r2, [pc, #88]	; (8002648 <dodecaGetStateName+0x80>)
 80025f0:	461c      	mov	r4, r3
 80025f2:	4613      	mov	r3, r2
 80025f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025f6:	6020      	str	r0, [r4, #0]
 80025f8:	6061      	str	r1, [r4, #4]
 80025fa:	60a2      	str	r2, [r4, #8]
 80025fc:	881a      	ldrh	r2, [r3, #0]
 80025fe:	789b      	ldrb	r3, [r3, #2]
 8002600:	81a2      	strh	r2, [r4, #12]
 8002602:	73a3      	strb	r3, [r4, #14]
 8002604:	e01a      	b.n	800263c <dodecaGetStateName+0x74>
		case DODECA_STATE_STOPPED : strcpy(name,"Stopped"); break;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	4910      	ldr	r1, [pc, #64]	; (800264c <dodecaGetStateName+0x84>)
 800260a:	461a      	mov	r2, r3
 800260c:	460b      	mov	r3, r1
 800260e:	cb03      	ldmia	r3!, {r0, r1}
 8002610:	6010      	str	r0, [r2, #0]
 8002612:	6051      	str	r1, [r2, #4]
 8002614:	e012      	b.n	800263c <dodecaGetStateName+0x74>
		case DODECA_STATE_ACTIVE : strcpy(name,"Active"); break;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <dodecaGetStateName+0x88>)
 800261a:	6810      	ldr	r0, [r2, #0]
 800261c:	6018      	str	r0, [r3, #0]
 800261e:	8891      	ldrh	r1, [r2, #4]
 8002620:	7992      	ldrb	r2, [r2, #6]
 8002622:	8099      	strh	r1, [r3, #4]
 8002624:	719a      	strb	r2, [r3, #6]
 8002626:	e009      	b.n	800263c <dodecaGetStateName+0x74>
		default: strcpy(name,"undefined"); break;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	490a      	ldr	r1, [pc, #40]	; (8002654 <dodecaGetStateName+0x8c>)
 800262c:	461a      	mov	r2, r3
 800262e:	460b      	mov	r3, r1
 8002630:	cb03      	ldmia	r3!, {r0, r1}
 8002632:	6010      	str	r0, [r2, #0]
 8002634:	6051      	str	r1, [r2, #4]
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	8113      	strh	r3, [r2, #8]
 800263a:	bf00      	nop
	}

	return DODECA_ERR_OK;
 800263c:	2300      	movs	r3, #0


}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bc90      	pop	{r4, r7}
 8002646:	4770      	bx	lr
 8002648:	0800ed84 	.word	0x0800ed84
 800264c:	0800ed94 	.word	0x0800ed94
 8002650:	0800ed9c 	.word	0x0800ed9c
 8002654:	0800eda4 	.word	0x0800eda4

08002658 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <GetSector+0xc8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d806      	bhi.n	800267a <GetSector+0x22>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002672:	d302      	bcc.n	800267a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e04b      	b.n	8002712 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a29      	ldr	r2, [pc, #164]	; (8002724 <GetSector+0xcc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d806      	bhi.n	8002690 <GetSector+0x38>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a28      	ldr	r2, [pc, #160]	; (8002728 <GetSector+0xd0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d302      	bcc.n	8002690 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800268a:	2301      	movs	r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e040      	b.n	8002712 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a26      	ldr	r2, [pc, #152]	; (800272c <GetSector+0xd4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d806      	bhi.n	80026a6 <GetSector+0x4e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a25      	ldr	r2, [pc, #148]	; (8002730 <GetSector+0xd8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d302      	bcc.n	80026a6 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80026a0:	2302      	movs	r3, #2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e035      	b.n	8002712 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a22      	ldr	r2, [pc, #136]	; (8002734 <GetSector+0xdc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d206      	bcs.n	80026bc <GetSector+0x64>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a21      	ldr	r2, [pc, #132]	; (8002738 <GetSector+0xe0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d302      	bcc.n	80026bc <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80026b6:	2303      	movs	r3, #3
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	e02a      	b.n	8002712 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a1f      	ldr	r2, [pc, #124]	; (800273c <GetSector+0xe4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d206      	bcs.n	80026d2 <GetSector+0x7a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a1b      	ldr	r2, [pc, #108]	; (8002734 <GetSector+0xdc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d902      	bls.n	80026d2 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80026cc:	2304      	movs	r3, #4
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e01f      	b.n	8002712 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <GetSector+0xe8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d206      	bcs.n	80026e8 <GetSector+0x90>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a17      	ldr	r2, [pc, #92]	; (800273c <GetSector+0xe4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d902      	bls.n	80026e8 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 80026e2:	2305      	movs	r3, #5
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e014      	b.n	8002712 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a16      	ldr	r2, [pc, #88]	; (8002744 <GetSector+0xec>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d206      	bcs.n	80026fe <GetSector+0xa6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <GetSector+0xe8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d902      	bls.n	80026fe <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80026f8:	2306      	movs	r3, #6
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e009      	b.n	8002712 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <GetSector+0xf0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d205      	bcs.n	8002712 <GetSector+0xba>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <GetSector+0xec>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 800270e:	2307      	movs	r3, #7
 8002710:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	08003ffe 	.word	0x08003ffe
 8002724:	08007ffe 	.word	0x08007ffe
 8002728:	08004000 	.word	0x08004000
 800272c:	0800bffe 	.word	0x0800bffe
 8002730:	08008000 	.word	0x08008000
 8002734:	0800ffff 	.word	0x0800ffff
 8002738:	0800c000 	.word	0x0800c000
 800273c:	0801ffff 	.word	0x0801ffff
 8002740:	0803ffff 	.word	0x0803ffff
 8002744:	0805ffff 	.word	0x0805ffff
 8002748:	0807ffff 	.word	0x0807ffff

0800274c <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, const uint16_t numberofwords)
{
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800275e:	f003 f8a5 	bl	80058ac <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7ff ff78 	bl	8002658 <GetSector>
 8002768:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8002776:	69f8      	ldr	r0, [r7, #28]
 8002778:	f7ff ff6e 	bl	8002658 <GetSector>
 800277c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800277e:	4b21      	ldr	r3, [pc, #132]	; (8002804 <Flash_Write_Data+0xb8>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <Flash_Write_Data+0xb8>)
 8002786:	2202      	movs	r2, #2
 8002788:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800278a:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <Flash_Write_Data+0xb8>)
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	3301      	adds	r3, #1
 8002798:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <Flash_Write_Data+0xb8>)
 800279a:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	4818      	ldr	r0, [pc, #96]	; (8002804 <Flash_Write_Data+0xb8>)
 80027a4:	f003 fa00 	bl	8005ba8 <HAL_FLASHEx_Erase>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01f      	beq.n	80027ee <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 80027ae:	f003 f8af 	bl	8005910 <HAL_FLASH_GetError>
 80027b2:	4603      	mov	r3, r0
 80027b4:	e022      	b.n	80027fc <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	4413      	add	r3, r2
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	461c      	mov	r4, r3
 80027c4:	4615      	mov	r5, r2
 80027c6:	4622      	mov	r2, r4
 80027c8:	462b      	mov	r3, r5
 80027ca:	68f9      	ldr	r1, [r7, #12]
 80027cc:	2002      	movs	r0, #2
 80027ce:	f003 f819 	bl	8005804 <HAL_FLASH_Program>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d106      	bne.n	80027e6 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3304      	adds	r3, #4
 80027dc:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	3301      	adds	r3, #1
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
 80027e4:	e003      	b.n	80027ee <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80027e6:	f003 f893 	bl	8005910 <HAL_FLASH_GetError>
 80027ea:	4603      	mov	r3, r0
 80027ec:	e006      	b.n	80027fc <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	429a      	cmp	r2, r3
 80027f4:	dbdf      	blt.n	80027b6 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 80027f6:	f003 f87b 	bl	80058f0 <HAL_FLASH_Lock>

	   return 0;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3728      	adds	r7, #40	; 0x28
 8002800:	46bd      	mov	sp, r7
 8002802:	bdb0      	pop	{r4, r5, r7, pc}
 8002804:	20000540 	.word	0x20000540

08002808 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, const uint16_t numberofwords)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	4613      	mov	r3, r2
 8002814:	80fb      	strh	r3, [r7, #6]
	uint32_t sofar = numberofwords;
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	617b      	str	r3, [r7, #20]
	while (sofar)
 800281a:	e00c      	b.n	8002836 <Flash_Read_Data+0x2e>
	{
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3304      	adds	r3, #4
 8002828:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3304      	adds	r3, #4
 800282e:	60bb      	str	r3, [r7, #8]
		sofar--;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3b01      	subs	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
	while (sofar)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ef      	bne.n	800281c <Flash_Read_Data+0x14>
	}
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_GPIO_EXTI_Callback>:
};



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	80fb      	strh	r3, [r7, #6]

}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <MPU6050_Init>:



uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af04      	add	r7, sp, #16
 8002866:	6078      	str	r0, [r7, #4]
    uint8_t Data;

    // check device ID WHO_AM_I
	Data = 0x4F;
 8002868:	234f      	movs	r3, #79	; 0x4f
 800286a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800286c:	2364      	movs	r3, #100	; 0x64
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	2301      	movs	r3, #1
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	f107 030f 	add.w	r3, r7, #15
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	2219      	movs	r2, #25
 800287e:	21d0      	movs	r1, #208	; 0xd0
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f003 fdad 	bl	80063e0 <HAL_I2C_Mem_Write>

	// power management register 0X6B we should write all 0's to wake the sensor up
	Data = 1;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800288a:	2364      	movs	r3, #100	; 0x64
 800288c:	9302      	str	r3, [sp, #8]
 800288e:	2301      	movs	r3, #1
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	f107 030f 	add.w	r3, r7, #15
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2301      	movs	r3, #1
 800289a:	226b      	movs	r2, #107	; 0x6b
 800289c:	21d0      	movs	r1, #208	; 0xd0
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f003 fd9e 	bl	80063e0 <HAL_I2C_Mem_Write>
	Data = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80028a8:	2364      	movs	r3, #100	; 0x64
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	2301      	movs	r3, #1
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	f107 030f 	add.w	r3, r7, #15
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2301      	movs	r3, #1
 80028b8:	226b      	movs	r2, #107	; 0x6b
 80028ba:	21d0      	movs	r1, #208	; 0xd0
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f003 fd8f 	bl	80063e0 <HAL_I2C_Mem_Write>

	Data = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_REG_CONFIG, 1, &Data, 1, i2c_timeout);
 80028c6:	2364      	movs	r3, #100	; 0x64
 80028c8:	9302      	str	r3, [sp, #8]
 80028ca:	2301      	movs	r3, #1
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	f107 030f 	add.w	r3, r7, #15
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2301      	movs	r3, #1
 80028d6:	221a      	movs	r2, #26
 80028d8:	21d0      	movs	r1, #208	; 0xd0
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f003 fd80 	bl	80063e0 <HAL_I2C_Mem_Write>

	Data = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_REG_FIFO_EN, 1, &Data, 1, i2c_timeout);
 80028e4:	2364      	movs	r3, #100	; 0x64
 80028e6:	9302      	str	r3, [sp, #8]
 80028e8:	2301      	movs	r3, #1
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	f107 030f 	add.w	r3, r7, #15
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	2301      	movs	r3, #1
 80028f4:	2223      	movs	r2, #35	; 0x23
 80028f6:	21d0      	movs	r1, #208	; 0xd0
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f003 fd71 	bl	80063e0 <HAL_I2C_Mem_Write>

	// Reset Signal Path
	Data = 0x7; // Reset All
 80028fe:	2307      	movs	r3, #7
 8002900:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SIG_PATH_RESET, 1, &Data, 1, i2c_timeout);
 8002902:	2364      	movs	r3, #100	; 0x64
 8002904:	9302      	str	r3, [sp, #8]
 8002906:	2301      	movs	r3, #1
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	f107 030f 	add.w	r3, r7, #15
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2301      	movs	r3, #1
 8002912:	2268      	movs	r2, #104	; 0x68
 8002914:	21d0      	movs	r1, #208	; 0xd0
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f003 fd62 	bl	80063e0 <HAL_I2C_Mem_Write>

	// Set the Interupt Pin
	Data = 0;// MPU6050_INT_LEVEL; // Active Low
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, INT_PIN_CFG, 1, &Data, 1, i2c_timeout);
 8002920:	2364      	movs	r3, #100	; 0x64
 8002922:	9302      	str	r3, [sp, #8]
 8002924:	2301      	movs	r3, #1
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	f107 030f 	add.w	r3, r7, #15
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	2301      	movs	r3, #1
 8002930:	2237      	movs	r2, #55	; 0x37
 8002932:	21d0      	movs	r1, #208	; 0xd0
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f003 fd53 	bl	80063e0 <HAL_I2C_Mem_Write>

	// Set accelerometer configuration in ACCEL_CONFIG Register
	// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
	Data =0;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800293e:	2364      	movs	r3, #100	; 0x64
 8002940:	9302      	str	r3, [sp, #8]
 8002942:	2301      	movs	r3, #1
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	f107 030f 	add.w	r3, r7, #15
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	221c      	movs	r2, #28
 8002950:	21d0      	movs	r1, #208	; 0xd0
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f003 fd44 	bl	80063e0 <HAL_I2C_Mem_Write>


	// Set Motion Threshold
	Data = 10;
 8002958:	230a      	movs	r3, #10
 800295a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MOT_THR, 1, &Data, 1, i2c_timeout);
 800295c:	2364      	movs	r3, #100	; 0x64
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	2301      	movs	r3, #1
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	f107 030f 	add.w	r3, r7, #15
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2301      	movs	r3, #1
 800296c:	221f      	movs	r2, #31
 800296e:	21d0      	movs	r1, #208	; 0xd0
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f003 fd35 	bl	80063e0 <HAL_I2C_Mem_Write>

	// Set Motion Duration
	Data = 1; //milli seconds
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MOT_DUR, 1, &Data, 1, i2c_timeout);
 800297a:	2364      	movs	r3, #100	; 0x64
 800297c:	9302      	str	r3, [sp, #8]
 800297e:	2301      	movs	r3, #1
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	f107 030f 	add.w	r3, r7, #15
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2301      	movs	r3, #1
 800298a:	2220      	movs	r2, #32
 800298c:	21d0      	movs	r1, #208	; 0xd0
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f003 fd26 	bl	80063e0 <HAL_I2C_Mem_Write>

	// Set Detection Decrement oand others
	Data = 20; // Decrement = 3
 8002994:	2314      	movs	r3, #20
 8002996:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MOT_DETECT_CTRL, 1, &Data, 1, i2c_timeout);
 8002998:	2364      	movs	r3, #100	; 0x64
 800299a:	9302      	str	r3, [sp, #8]
 800299c:	2301      	movs	r3, #1
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	f107 030f 	add.w	r3, r7, #15
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2301      	movs	r3, #1
 80029a8:	2269      	movs	r2, #105	; 0x69
 80029aa:	21d0      	movs	r1, #208	; 0xd0
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f003 fd17 	bl	80063e0 <HAL_I2C_Mem_Write>

	// Enable the Interrupt
	Data = 1<<6; //MPU6050_MOT_EN;
 80029b2:	2340      	movs	r3, #64	; 0x40
 80029b4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, INT_ENABLE,1, &Data, 1, i2c_timeout);
 80029b6:	2364      	movs	r3, #100	; 0x64
 80029b8:	9302      	str	r3, [sp, #8]
 80029ba:	2301      	movs	r3, #1
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	f107 030f 	add.w	r3, r7, #15
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2301      	movs	r3, #1
 80029c6:	2238      	movs	r2, #56	; 0x38
 80029c8:	21d0      	movs	r1, #208	; 0xd0
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f003 fd08 	bl	80063e0 <HAL_I2C_Mem_Write>



    return 0;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	0000      	movs	r0, r0
 80029dc:	0000      	movs	r0, r0
	...

080029e0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af04      	add	r7, sp, #16
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80029ea:	2364      	movs	r3, #100	; 0x64
 80029ec:	9302      	str	r3, [sp, #8]
 80029ee:	2306      	movs	r3, #6
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2301      	movs	r3, #1
 80029fa:	223b      	movs	r2, #59	; 0x3b
 80029fc:	21d0      	movs	r1, #208	; 0xd0
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f003 fde8 	bl	80065d4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002a04:	7a3b      	ldrb	r3, [r7, #8]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	b21a      	sxth	r2, r3
 8002a0a:	7a7b      	ldrb	r3, [r7, #9]
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	b21a      	sxth	r2, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002a16:	7abb      	ldrb	r3, [r7, #10]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	7afb      	ldrb	r3, [r7, #11]
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	4313      	orrs	r3, r2
 8002a22:	b21a      	sxth	r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002a28:	7b3b      	ldrb	r3, [r7, #12]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	7b7b      	ldrb	r3, [r7, #13]
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b21a      	sxth	r2, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	809a      	strh	r2, [r3, #4]
   // DataStruct->Accel_X_RAW += CAL_X;
   // DataStruct->Accel_Y_RAW += CAL_Y;
  //  DataStruct->Accel_Z_RAW += CAL_Y;


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd87 	bl	8000554 <__aeabi_i2d>
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <MPU6050_Read_Accel+0x140>)
 8002a4c:	f7fd ff16 	bl	800087c <__aeabi_ddiv>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	6839      	ldr	r1, [r7, #0]
 8002a56:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd77 	bl	8000554 <__aeabi_i2d>
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <MPU6050_Read_Accel+0x140>)
 8002a6c:	f7fd ff06 	bl	800087c <__aeabi_ddiv>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fd67 	bl	8000554 <__aeabi_i2d>
 8002a86:	a322      	add	r3, pc, #136	; (adr r3, 8002b10 <MPU6050_Read_Accel+0x130>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fef6 	bl	800087c <__aeabi_ddiv>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	6839      	ldr	r1, [r7, #0]
 8002a96:	e9c1 2306 	strd	r2, r3, [r1, #24]


    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002aa0:	a31d      	add	r3, pc, #116	; (adr r3, 8002b18 <MPU6050_Read_Accel+0x138>)
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	f7fe f831 	bl	8000b0c <__aeabi_dcmplt>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <MPU6050_Read_Accel+0xde>
 8002ab0:	6839      	ldr	r1, [r7, #0]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002ac4:	a314      	add	r3, pc, #80	; (adr r3, 8002b18 <MPU6050_Read_Accel+0x138>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fe f81f 	bl	8000b0c <__aeabi_dcmplt>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <MPU6050_Read_Accel+0x102>
 8002ad4:	6839      	ldr	r1, [r7, #0]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9c1 2304 	strd	r2, r3, [r1, #16]
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002ae8:	a30b      	add	r3, pc, #44	; (adr r3, 8002b18 <MPU6050_Read_Accel+0x138>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fe f80d 	bl	8000b0c <__aeabi_dcmplt>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d100      	bne.n	8002afa <MPU6050_Read_Accel+0x11a>


}
 8002af8:	e006      	b.n	8002b08 <MPU6050_Read_Accel+0x128>
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002afa:	6839      	ldr	r1, [r7, #0]
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	00000000 	.word	0x00000000
 8002b14:	40cc2900 	.word	0x40cc2900
 8002b18:	70a3d70a 	.word	0x70a3d70a
 8002b1c:	3fb70a3d 	.word	0x3fb70a3d
 8002b20:	40d00000 	.word	0x40d00000

08002b24 <MPU6050_ReadReg>:


uint8_t  MPU6050_ReadReg(I2C_HandleTypeDef *I2Cx,uint16_t reg) // NOTE : Only for 1 Byte Reg at the moment
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af04      	add	r7, sp, #16
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
	uint8_t result;


	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, reg, 1, &result, 1, i2c_timeout);
 8002b30:	2364      	movs	r3, #100	; 0x64
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	2301      	movs	r3, #1
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	f107 030f 	add.w	r3, r7, #15
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2301      	movs	r3, #1
 8002b42:	21d0      	movs	r1, #208	; 0xd0
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f003 fd45 	bl	80065d4 <HAL_I2C_Mem_Read>
	return result;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <MPU6050_WriteReg>:

void MPU6050_WriteReg(I2C_HandleTypeDef *I2Cx,uint16_t reg, uint8_t data) // NOTE : Only for 1 Byte Reg at the moment
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af04      	add	r7, sp, #16
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, reg, 1, &data, 1, i2c_timeout);
 8002b64:	2364      	movs	r3, #100	; 0x64
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	9302      	str	r3, [sp, #8]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	1c7b      	adds	r3, r7, #1
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2301      	movs	r3, #1
 8002b74:	21d0      	movs	r1, #208	; 0xd0
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f003 fc32 	bl	80063e0 <HAL_I2C_Mem_Write>

}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <MPU6050ReadStable>:
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}


void MPU6050ReadStable(MPU6050_t *data)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	for (uint8_t cnt=0;cnt<30;cnt++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	e006      	b.n	8002ba0 <MPU6050ReadStable+0x1c>
		{
			MPU6050_Read_All(&I2C_MPU6050, data);
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4806      	ldr	r0, [pc, #24]	; (8002bb0 <MPU6050ReadStable+0x2c>)
 8002b96:	f000 f80f 	bl	8002bb8 <MPU6050_Read_All>
	for (uint8_t cnt=0;cnt<30;cnt++)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b1d      	cmp	r3, #29
 8002ba4:	d9f5      	bls.n	8002b92 <MPU6050ReadStable+0xe>
		}
}
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000560 	.word	0x20000560
 8002bb4:	00000000 	.word	0x00000000

08002bb8 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bbc:	b094      	sub	sp, #80	; 0x50
 8002bbe:	af04      	add	r7, sp, #16
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002bc4:	2364      	movs	r3, #100	; 0x64
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	230e      	movs	r3, #14
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	223b      	movs	r2, #59	; 0x3b
 8002bd6:	21d0      	movs	r1, #208	; 0xd0
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f003 fcfb 	bl	80065d4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002bde:	7a3b      	ldrb	r3, [r7, #8]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	b21a      	sxth	r2, r3
 8002be4:	7a7b      	ldrb	r3, [r7, #9]
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002bf0:	7abb      	ldrb	r3, [r7, #10]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002c02:	7b3b      	ldrb	r3, [r7, #12]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	7b7b      	ldrb	r3, [r7, #13]
 8002c0a:	b21b      	sxth	r3, r3
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	b21a      	sxth	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002c14:	7bbb      	ldrb	r3, [r7, #14]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	b21a      	sxth	r2, r3
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002c22:	7c3b      	ldrb	r3, [r7, #16]
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	b21a      	sxth	r2, r3
 8002c28:	7c7b      	ldrb	r3, [r7, #17]
 8002c2a:	b21b      	sxth	r3, r3
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002c34:	7cbb      	ldrb	r3, [r7, #18]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	b21b      	sxth	r3, r3
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	b21a      	sxth	r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002c46:	7d3b      	ldrb	r3, [r7, #20]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	b21a      	sxth	r2, r3
 8002c4c:	7d7b      	ldrb	r3, [r7, #21]
 8002c4e:	b21b      	sxth	r3, r3
 8002c50:	4313      	orrs	r3, r2
 8002c52:	b21a      	sxth	r2, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	849a      	strh	r2, [r3, #36]	; 0x24

    // Callibrate
	DataStruct->Accel_X_RAW += CAL_X;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW += CAL_Y;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	b21a      	sxth	r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW += CAL_Y;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	b21a      	sxth	r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	809a      	strh	r2, [r3, #4]


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fc5a 	bl	8000554 <__aeabi_i2d>
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	4bb6      	ldr	r3, [pc, #728]	; (8002f80 <MPU6050_Read_All+0x3c8>)
 8002ca6:	f7fd fde9 	bl	800087c <__aeabi_ddiv>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	6839      	ldr	r1, [r7, #0]
 8002cb0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd fc4a 	bl	8000554 <__aeabi_i2d>
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	4bae      	ldr	r3, [pc, #696]	; (8002f80 <MPU6050_Read_All+0x3c8>)
 8002cc6:	f7fd fdd9 	bl	800087c <__aeabi_ddiv>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	6839      	ldr	r1, [r7, #0]
 8002cd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fc3a 	bl	8000554 <__aeabi_i2d>
 8002ce0:	a39f      	add	r3, pc, #636	; (adr r3, 8002f60 <MPU6050_Read_All+0x3a8>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fdc9 	bl	800087c <__aeabi_ddiv>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	6839      	ldr	r1, [r7, #0]
 8002cf0:	e9c1 2306 	strd	r2, r3, [r1, #24]





    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002cfa:	a39b      	add	r3, pc, #620	; (adr r3, 8002f68 <MPU6050_Read_All+0x3b0>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f7fd ff04 	bl	8000b0c <__aeabi_dcmplt>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <MPU6050_Read_All+0x160>
 8002d0a:	6839      	ldr	r1, [r7, #0]
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002d1e:	a392      	add	r3, pc, #584	; (adr r3, 8002f68 <MPU6050_Read_All+0x3b0>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fef2 	bl	8000b0c <__aeabi_dcmplt>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <MPU6050_Read_All+0x184>
 8002d2e:	6839      	ldr	r1, [r7, #0]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002d42:	a389      	add	r3, pc, #548	; (adr r3, 8002f68 <MPU6050_Read_All+0x3b0>)
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f7fd fee0 	bl	8000b0c <__aeabi_dcmplt>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <MPU6050_Read_All+0x1a8>
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9c1 2306 	strd	r2, r3, [r1, #24]


    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002d60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d6c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002f84 <MPU6050_Read_All+0x3cc>
 8002d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d74:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002f88 <MPU6050_Read_All+0x3d0>
 8002d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fbe3 	bl	8000554 <__aeabi_i2d>
 8002d8e:	a378      	add	r3, pc, #480	; (adr r3, 8002f70 <MPU6050_Read_All+0x3b8>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fd72 	bl	800087c <__aeabi_ddiv>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	6839      	ldr	r1, [r7, #0]
 8002d9e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fbd3 	bl	8000554 <__aeabi_i2d>
 8002dae:	a370      	add	r3, pc, #448	; (adr r3, 8002f70 <MPU6050_Read_All+0x3b8>)
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f7fd fd62 	bl	800087c <__aeabi_ddiv>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fbc3 	bl	8000554 <__aeabi_i2d>
 8002dce:	a368      	add	r3, pc, #416	; (adr r3, 8002f70 <MPU6050_Read_All+0x3b8>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fd52 	bl	800087c <__aeabi_ddiv>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002de2:	f001 ff7d 	bl	8004ce0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b68      	ldr	r3, [pc, #416]	; (8002f8c <MPU6050_Read_All+0x3d4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fba0 	bl	8000534 <__aeabi_ui2d>
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <MPU6050_Read_All+0x3d8>)
 8002dfa:	f7fd fd3f 	bl	800087c <__aeabi_ddiv>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002e06:	f001 ff6b 	bl	8004ce0 <HAL_GetTick>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4a5f      	ldr	r2, [pc, #380]	; (8002f8c <MPU6050_Read_All+0x3d4>)
 8002e0e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e16:	461a      	mov	r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1e:	fb03 f202 	mul.w	r2, r3, r2
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fb8c 	bl	8000554 <__aeabi_i2d>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	ec43 2b10 	vmov	d0, r2, r3
 8002e44:	f00b faf3 	bl	800e42e <sqrt>
 8002e48:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e58:	f7fd fe4e 	bl	8000af8 <__aeabi_dcmpeq>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11f      	bne.n	8002ea2 <MPU6050_Read_All+0x2ea>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fb73 	bl	8000554 <__aeabi_i2d>
 8002e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e72:	f7fd fd03 	bl	800087c <__aeabi_ddiv>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	ec43 2b17 	vmov	d7, r2, r3
 8002e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e82:	eef0 0a67 	vmov.f32	s1, s15
 8002e86:	f00b f927 	bl	800e0d8 <atan>
 8002e8a:	ec51 0b10 	vmov	r0, r1, d0
 8002e8e:	a33a      	add	r3, pc, #232	; (adr r3, 8002f78 <MPU6050_Read_All+0x3c0>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fbc8 	bl	8000628 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002ea0:	e005      	b.n	8002eae <MPU6050_Read_All+0x2f6>
    } else {
        roll = 0.0;
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb4:	425b      	negs	r3, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fb4c 	bl	8000554 <__aeabi_i2d>
 8002ebc:	4682      	mov	sl, r0
 8002ebe:	468b      	mov	fp, r1
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb44 	bl	8000554 <__aeabi_i2d>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	ec43 2b11 	vmov	d1, r2, r3
 8002ed4:	ec4b ab10 	vmov	d0, sl, fp
 8002ed8:	f00b faa7 	bl	800e42a <atan2>
 8002edc:	ec51 0b10 	vmov	r0, r1, d0
 8002ee0:	a325      	add	r3, pc, #148	; (adr r3, 8002f78 <MPU6050_Read_All+0x3c0>)
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	f7fd fb9f 	bl	8000628 <__aeabi_dmul>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <MPU6050_Read_All+0x3dc>)
 8002ef8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002efc:	f7fd fe06 	bl	8000b0c <__aeabi_dcmplt>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <MPU6050_Read_All+0x364>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <MPU6050_Read_All+0x3e0>)
 8002f12:	f7fd fe19 	bl	8000b48 <__aeabi_dcmpgt>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d114      	bne.n	8002f46 <MPU6050_Read_All+0x38e>
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <MPU6050_Read_All+0x3e0>)
 8002f22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f26:	f7fd fe0f 	bl	8000b48 <__aeabi_dcmpgt>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d037      	beq.n	8002fa0 <MPU6050_Read_All+0x3e8>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <MPU6050_Read_All+0x3dc>)
 8002f3c:	f7fd fde6 	bl	8000b0c <__aeabi_dcmplt>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d02c      	beq.n	8002fa0 <MPU6050_Read_All+0x3e8>
        KalmanY.angle = pitch;
 8002f46:	4915      	ldr	r1, [pc, #84]	; (8002f9c <MPU6050_Read_All+0x3e4>)
 8002f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002f50:	6839      	ldr	r1, [r7, #0]
 8002f52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f56:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002f5a:	e036      	b.n	8002fca <MPU6050_Read_All+0x412>
 8002f5c:	f3af 8000 	nop.w
 8002f60:	00000000 	.word	0x00000000
 8002f64:	40cc2900 	.word	0x40cc2900
 8002f68:	70a3d70a 	.word	0x70a3d70a
 8002f6c:	3fb70a3d 	.word	0x3fb70a3d
 8002f70:	00000000 	.word	0x00000000
 8002f74:	40606000 	.word	0x40606000
 8002f78:	1a63c1f8 	.word	0x1a63c1f8
 8002f7c:	404ca5dc 	.word	0x404ca5dc
 8002f80:	40d00000 	.word	0x40d00000
 8002f84:	43aa0000 	.word	0x43aa0000
 8002f88:	42121eb8 	.word	0x42121eb8
 8002f8c:	20000554 	.word	0x20000554
 8002f90:	408f4000 	.word	0x408f4000
 8002f94:	c0568000 	.word	0xc0568000
 8002f98:	40568000 	.word	0x40568000
 8002f9c:	20000138 	.word	0x20000138
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002fa6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002faa:	eeb0 1a47 	vmov.f32	s2, s14
 8002fae:	eef0 1a67 	vmov.f32	s3, s15
 8002fb2:	ed97 0b06 	vldr	d0, [r7, #24]
 8002fb6:	481e      	ldr	r0, [pc, #120]	; (8003030 <MPU6050_Read_All+0x478>)
 8002fb8:	f000 f840 	bl	800303c <Kalman_getAngle>
 8002fbc:	eeb0 7a40 	vmov.f32	s14, s0
 8002fc0:	eef0 7a60 	vmov.f32	s15, s1
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002fd0:	4690      	mov	r8, r2
 8002fd2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <MPU6050_Read_All+0x47c>)
 8002fdc:	4640      	mov	r0, r8
 8002fde:	4649      	mov	r1, r9
 8002fe0:	f7fd fdb2 	bl	8000b48 <__aeabi_dcmpgt>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <MPU6050_Read_All+0x444>
        DataStruct->Gx = -DataStruct->Gx;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003002:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003006:	eeb0 1a47 	vmov.f32	s2, s14
 800300a:	eef0 1a67 	vmov.f32	s3, s15
 800300e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003012:	4809      	ldr	r0, [pc, #36]	; (8003038 <MPU6050_Read_All+0x480>)
 8003014:	f000 f812 	bl	800303c <Kalman_getAngle>
 8003018:	eeb0 7a40 	vmov.f32	s14, s0
 800301c:	eef0 7a60 	vmov.f32	s15, s1
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8003026:	bf00      	nop
 8003028:	3740      	adds	r7, #64	; 0x40
 800302a:	46bd      	mov	sp, r7
 800302c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003030:	20000138 	.word	0x20000138
 8003034:	40568000 	.word	0x40568000
 8003038:	200000f0 	.word	0x200000f0

0800303c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800303c:	b5b0      	push	{r4, r5, r7, lr}
 800303e:	b096      	sub	sp, #88	; 0x58
 8003040:	af00      	add	r7, sp, #0
 8003042:	61f8      	str	r0, [r7, #28]
 8003044:	ed87 0b04 	vstr	d0, [r7, #16]
 8003048:	ed87 1b02 	vstr	d1, [r7, #8]
 800304c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800305a:	f7fd f92d 	bl	80002b8 <__aeabi_dsub>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800306c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003070:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003074:	f7fd fad8 	bl	8000628 <__aeabi_dmul>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4620      	mov	r0, r4
 800307e:	4629      	mov	r1, r5
 8003080:	f7fd f91c 	bl	80002bc <__adddf3>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	69f9      	ldr	r1, [r7, #28]
 800308a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800309a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800309e:	f7fd fac3 	bl	8000628 <__aeabi_dmul>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80030b0:	f7fd f902 	bl	80002b8 <__aeabi_dsub>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80030c2:	f7fd f8f9 	bl	80002b8 <__aeabi_dsub>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd f8f2 	bl	80002bc <__adddf3>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030e4:	f7fd faa0 	bl	8000628 <__aeabi_dmul>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4620      	mov	r0, r4
 80030ee:	4629      	mov	r1, r5
 80030f0:	f7fd f8e4 	bl	80002bc <__adddf3>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	69f9      	ldr	r1, [r7, #28]
 80030fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800310a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800310e:	f7fd fa8b 	bl	8000628 <__aeabi_dmul>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4620      	mov	r0, r4
 8003118:	4629      	mov	r1, r5
 800311a:	f7fd f8cd 	bl	80002b8 <__aeabi_dsub>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	69f9      	ldr	r1, [r7, #28]
 8003124:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003138:	f7fd fa76 	bl	8000628 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd f8b8 	bl	80002b8 <__aeabi_dsub>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	69f9      	ldr	r1, [r7, #28]
 800314e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800315e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003162:	f7fd fa61 	bl	8000628 <__aeabi_dmul>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4620      	mov	r0, r4
 800316c:	4629      	mov	r1, r5
 800316e:	f7fd f8a5 	bl	80002bc <__adddf3>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	69f9      	ldr	r1, [r7, #28]
 8003178:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003188:	f7fd f898 	bl	80002bc <__adddf3>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800319a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800319e:	f7fd fb6d 	bl	800087c <__aeabi_ddiv>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80031b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031b4:	f7fd fb62 	bl	800087c <__aeabi_ddiv>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031ca:	f7fd f875 	bl	80002b8 <__aeabi_dsub>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80031dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031e4:	f7fd fa20 	bl	8000628 <__aeabi_dmul>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4620      	mov	r0, r4
 80031ee:	4629      	mov	r1, r5
 80031f0:	f7fd f864 	bl	80002bc <__adddf3>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	69f9      	ldr	r1, [r7, #28]
 80031fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003204:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003208:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800320c:	f7fd fa0c 	bl	8000628 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4620      	mov	r0, r4
 8003216:	4629      	mov	r1, r5
 8003218:	f7fd f850 	bl	80002bc <__adddf3>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	69f9      	ldr	r1, [r7, #28]
 8003222:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800322c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003236:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003240:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003248:	f7fd f9ee 	bl	8000628 <__aeabi_dmul>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4620      	mov	r0, r4
 8003252:	4629      	mov	r1, r5
 8003254:	f7fd f830 	bl	80002b8 <__aeabi_dsub>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	69f9      	ldr	r1, [r7, #28]
 800325e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003268:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800326c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003270:	f7fd f9da 	bl	8000628 <__aeabi_dmul>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4620      	mov	r0, r4
 800327a:	4629      	mov	r1, r5
 800327c:	f7fd f81c 	bl	80002b8 <__aeabi_dsub>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	69f9      	ldr	r1, [r7, #28]
 8003286:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003290:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003298:	f7fd f9c6 	bl	8000628 <__aeabi_dmul>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4620      	mov	r0, r4
 80032a2:	4629      	mov	r1, r5
 80032a4:	f7fd f808 	bl	80002b8 <__aeabi_dsub>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	69f9      	ldr	r1, [r7, #28]
 80032ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80032b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032c0:	f7fd f9b2 	bl	8000628 <__aeabi_dmul>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4620      	mov	r0, r4
 80032ca:	4629      	mov	r1, r5
 80032cc:	f7fc fff4 	bl	80002b8 <__aeabi_dsub>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	69f9      	ldr	r1, [r7, #28]
 80032d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80032e0:	ec43 2b17 	vmov	d7, r2, r3
};
 80032e4:	eeb0 0a47 	vmov.f32	s0, s14
 80032e8:	eef0 0a67 	vmov.f32	s1, s15
 80032ec:	3758      	adds	r7, #88	; 0x58
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bdb0      	pop	{r4, r5, r7, pc}

080032f2 <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 80032fe:	217f      	movs	r1, #127	; 0x7f
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f008 f90c 	bl	800b51e <strchr>
 8003306:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8003308:	e029      	b.n	800335e <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b7f      	cmp	r3, #127	; 0x7f
 8003310:	d106      	bne.n	8003320 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3301      	adds	r3, #1
 8003316:	4619      	mov	r1, r3
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f008 f90d 	bl	800b538 <strcpy>
 800331e:	e019      	b.n	8003354 <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b7f      	cmp	r3, #127	; 0x7f
 8003326:	d109      	bne.n	800333c <manageBackSpace+0x4a>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3301      	adds	r3, #1
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d104      	bne.n	800333c <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3b01      	subs	r3, #1
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e00b      	b.n	8003354 <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b7f      	cmp	r3, #127	; 0x7f
 8003342:	d107      	bne.n	8003354 <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e5a      	subs	r2, r3, #1
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3301      	adds	r3, #1
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f008 f8f2 	bl	800b538 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 8003354:	217f      	movs	r1, #127	; 0x7f
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f008 f8e1 	bl	800b51e <strchr>
 800335c:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1d1      	bne.n	800330a <manageBackSpace+0x18>
		}
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 8003378:	e00c      	b.n	8003394 <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b2f      	cmp	r3, #47	; 0x2f
 8003380:	d903      	bls.n	800338a <isNumber+0x1a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b39      	cmp	r3, #57	; 0x39
 8003388:	d901      	bls.n	800338e <isNumber+0x1e>
			return 0;
 800338a:	2300      	movs	r3, #0
 800338c:	e007      	b.n	800339e <isNumber+0x2e>
		string++;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3301      	adds	r3, #1
 8003392:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ee      	bne.n	800337a <isNumber+0xa>
	}
	return 1;
 800339c:	2301      	movs	r3, #1
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <byteToBin>:


void byteToBin(uint8_t b, char*text)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	6039      	str	r1, [r7, #0]
 80033b4:	71fb      	strb	r3, [r7, #7]
	uint8_t pos;
	for (uint8_t cnt = 0;cnt<8;cnt++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e019      	b.n	80033f0 <byteToBin+0x46>
	{
		pos = 7-cnt;
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	f1c3 0307 	rsb	r3, r3, #7
 80033c2:	73bb      	strb	r3, [r7, #14]
		if (b & 1<< cnt)
 80033c4:	79fa      	ldrb	r2, [r7, #7]
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	fa42 f303 	asr.w	r3, r2, r3
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <byteToBin+0x36>
			text[pos] = '1';
 80033d4:	7bbb      	ldrb	r3, [r7, #14]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	2231      	movs	r2, #49	; 0x31
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e004      	b.n	80033ea <byteToBin+0x40>
		else
			text[pos] = '0';
 80033e0:	7bbb      	ldrb	r3, [r7, #14]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	4413      	add	r3, r2
 80033e6:	2230      	movs	r2, #48	; 0x30
 80033e8:	701a      	strb	r2, [r3, #0]
	for (uint8_t cnt = 0;cnt<8;cnt++)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	3301      	adds	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b07      	cmp	r3, #7
 80033f4:	d9e2      	bls.n	80033bc <byteToBin+0x12>

	}
	text[8] = 0x0;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	3308      	adds	r3, #8
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <lc709203_getCellVoltage>:
 * @param: 16bit pointer to value
 * @return: Error Code
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getCellVoltage(uint16_t *voltage)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_VOLTAGE,voltage);
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	2009      	movs	r0, #9
 8003416:	f000 f81f 	bl	8003458 <lc709203_getRegisterValue>
 800341a:	4603      	mov	r3, r0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <lc709203_getCellTemp>:

eLC709203_Error_t lc709203_getCellTemp(uint16_t *voltage)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_TEMP,voltage);
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	2008      	movs	r0, #8
 8003430:	f000 f812 	bl	8003458 <lc709203_getRegisterValue>
 8003434:	4603      	mov	r3, r0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <lc709203_getId>:

eLC709203_Error_t lc709203_getId(uint16_t *version)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_IC_VERSION,version);
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	2011      	movs	r0, #17
 800344a:	f000 f805 	bl	8003458 <lc709203_getRegisterValue>
 800344e:	4603      	mov	r3, r0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <lc709203_getRegisterValue>:
 * @param: value - a 16 bit pointer to the value to be used
 * @return: Error code foe the function
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getRegisterValue (uint8_t reg,uint16_t *value)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af04      	add	r7, sp, #16
 800345e:	4603      	mov	r3, r0
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c1, LC709302_ADRESS, reg, 1, (uint8_t*)value, 2, 100);
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	b29a      	uxth	r2, r3
 8003468:	2364      	movs	r3, #100	; 0x64
 800346a:	9302      	str	r3, [sp, #8]
 800346c:	2302      	movs	r3, #2
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2301      	movs	r3, #1
 8003476:	2116      	movs	r1, #22
 8003478:	4807      	ldr	r0, [pc, #28]	; (8003498 <lc709203_getRegisterValue+0x40>)
 800347a:	f003 f8ab 	bl	80065d4 <HAL_I2C_Mem_Read>
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]

	if (result != HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <lc709203_getRegisterValue+0x34>
	{
		return LC798_COMM_ERROR;
 8003488:	2302      	movs	r3, #2
 800348a:	e000      	b.n	800348e <lc709203_getRegisterValue+0x36>
	}
	else
		return LC798_OK;
 800348c:	2301      	movs	r3, #1

}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000560 	.word	0x20000560

0800349c <ledAllOff>:




void ledAllOff()
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	71fb      	strb	r3, [r7, #7]
 80034a6:	e008      	b.n	80034ba <ledAllOff+0x1e>
	{
		led_set_RGB(i,0x0,0,0);
 80034a8:	79f8      	ldrb	r0, [r7, #7]
 80034aa:	2300      	movs	r3, #0
 80034ac:	2200      	movs	r2, #0
 80034ae:	2100      	movs	r1, #0
 80034b0:	f001 f8ca 	bl	8004648 <led_set_RGB>
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	3301      	adds	r3, #1
 80034b8:	71fb      	strb	r3, [r7, #7]
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	2b8f      	cmp	r3, #143	; 0x8f
 80034be:	d9f3      	bls.n	80034a8 <ledAllOff+0xc>
	}

}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <ledRender>:

void ledRender()
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	af00      	add	r7, sp, #0
	led_render();
 80034ce:	f001 f923 	bl	8004718 <led_render>
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <ledSetFaceColour>:

void ledSetFaceColour(uint8_t face, uint8_t red, uint8_t green, uint8_t blue)
{
 80034d6:	b590      	push	{r4, r7, lr}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4604      	mov	r4, r0
 80034de:	4608      	mov	r0, r1
 80034e0:	4611      	mov	r1, r2
 80034e2:	461a      	mov	r2, r3
 80034e4:	4623      	mov	r3, r4
 80034e6:	71fb      	strb	r3, [r7, #7]
 80034e8:	4603      	mov	r3, r0
 80034ea:	71bb      	strb	r3, [r7, #6]
 80034ec:	460b      	mov	r3, r1
 80034ee:	717b      	strb	r3, [r7, #5]
 80034f0:	4613      	mov	r3, r2
 80034f2:	713b      	strb	r3, [r7, #4]
	uint16_t offset = face * 12;
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	0052      	lsls	r2, r2, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	81bb      	strh	r3, [r7, #12]

	for (uint16_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 8003502:	89bb      	ldrh	r3, [r7, #12]
 8003504:	81fb      	strh	r3, [r7, #14]
 8003506:	e009      	b.n	800351c <ledSetFaceColour+0x46>
	{
		led_set_RGB(i,red,green,blue);
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	b2d8      	uxtb	r0, r3
 800350c:	793b      	ldrb	r3, [r7, #4]
 800350e:	797a      	ldrb	r2, [r7, #5]
 8003510:	79b9      	ldrb	r1, [r7, #6]
 8003512:	f001 f899 	bl	8004648 <led_set_RGB>
	for (uint16_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 8003516:	89fb      	ldrh	r3, [r7, #14]
 8003518:	3301      	adds	r3, #1
 800351a:	81fb      	strh	r3, [r7, #14]
 800351c:	89bb      	ldrh	r3, [r7, #12]
 800351e:	f103 020b 	add.w	r2, r3, #11
 8003522:	89fb      	ldrh	r3, [r7, #14]
 8003524:	429a      	cmp	r2, r3
 8003526:	daef      	bge.n	8003508 <ledSetFaceColour+0x32>
	}

}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bd90      	pop	{r4, r7, pc}

08003532 <ledDance>:


void ledDance()
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
	int i=0;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
	while (i<10){
 800353c:	e040      	b.n	80035c0 <ledDance+0x8e>
	 uint8_t angle = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	72fb      	strb	r3, [r7, #11]
	 const uint8_t angle_difference = 11;
 8003542:	230b      	movs	r3, #11
 8003544:	727b      	strb	r3, [r7, #9]
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8003546:	2300      	movs	r3, #0
 8003548:	72bb      	strb	r3, [r7, #10]
 800354a:	e02e      	b.n	80035aa <ledDance+0x78>
		  // Calculate color
			 HAL_Delay(100);
 800354c:	2064      	movs	r0, #100	; 0x64
 800354e:	f001 fbd3 	bl	8004cf8 <HAL_Delay>
			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8003552:	7aba      	ldrb	r2, [r7, #10]
 8003554:	7a7b      	ldrb	r3, [r7, #9]
 8003556:	fb12 f303 	smulbb	r3, r2, r3
 800355a:	b2da      	uxtb	r2, r3
 800355c:	7afb      	ldrb	r3, [r7, #11]
 800355e:	4413      	add	r3, r2
 8003560:	b2db      	uxtb	r3, r3
 8003562:	227f      	movs	r2, #127	; 0x7f
 8003564:	21ff      	movs	r1, #255	; 0xff
 8003566:	4618      	mov	r0, r3
 8003568:	f001 fa8e 	bl	8004a88 <hsl_to_rgb>
 800356c:	6078      	str	r0, [r7, #4]
			// Set color
			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	b2d9      	uxtb	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	b2da      	uxtb	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	7ab8      	ldrb	r0, [r7, #10]
 8003580:	f001 f862 	bl	8004648 <led_set_RGB>
			if (i>1)
 8003584:	7abb      	ldrb	r3, [r7, #10]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d907      	bls.n	800359a <ledDance+0x68>
				led_set_RGB(i-1, 0,0,0);
 800358a:	7abb      	ldrb	r3, [r7, #10]
 800358c:	3b01      	subs	r3, #1
 800358e:	b2d8      	uxtb	r0, r3
 8003590:	2300      	movs	r3, #0
 8003592:	2200      	movs	r2, #0
 8003594:	2100      	movs	r1, #0
 8003596:	f001 f857 	bl	8004648 <led_set_RGB>
			++angle;
 800359a:	7afb      	ldrb	r3, [r7, #11]
 800359c:	3301      	adds	r3, #1
 800359e:	72fb      	strb	r3, [r7, #11]
			led_render();
 80035a0:	f001 f8ba 	bl	8004718 <led_render>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 80035a4:	7abb      	ldrb	r3, [r7, #10]
 80035a6:	3301      	adds	r3, #1
 80035a8:	72bb      	strb	r3, [r7, #10]
 80035aa:	7abb      	ldrb	r3, [r7, #10]
 80035ac:	2b8f      	cmp	r3, #143	; 0x8f
 80035ae:	d9cd      	bls.n	800354c <ledDance+0x1a>

		}
	  HAL_Delay(10);
 80035b0:	200a      	movs	r0, #10
 80035b2:	f001 fba1 	bl	8004cf8 <HAL_Delay>
		// Write to LED
	  ledAllOff();
 80035b6:	f7ff ff71 	bl	800349c <ledAllOff>
	  i++;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3301      	adds	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
	while (i<10){
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b09      	cmp	r3, #9
 80035c4:	ddbb      	ble.n	800353e <ledDance+0xc>
	}
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <detectFace>:

};


int8_t detectFace(double x, double y)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	ed87 0b02 	vstr	d0, [r7, #8]
 80035da:	ed87 1b00 	vstr	d1, [r7]
	uint8_t face;
	for (face=0; face<FACE_COUNT; face++)
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]
 80035e2:	e05d      	b.n	80036a0 <detectFace+0xd0>
	{
		if ( x > faceTable[face].xRTop && x < faceTable[face].xRBottom && y > faceTable[face].yRTop && y < faceTable[face].yRBottom )
 80035e4:	7dfa      	ldrb	r2, [r7, #23]
 80035e6:	4933      	ldr	r1, [pc, #204]	; (80036b4 <detectFace+0xe4>)
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	440b      	add	r3, r1
 80035f2:	3302      	adds	r3, #2
 80035f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ffab 	bl	8000554 <__aeabi_i2d>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003606:	f7fd fa9f 	bl	8000b48 <__aeabi_dcmpgt>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d044      	beq.n	800369a <detectFace+0xca>
 8003610:	7dfa      	ldrb	r2, [r7, #23]
 8003612:	4928      	ldr	r1, [pc, #160]	; (80036b4 <detectFace+0xe4>)
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	440b      	add	r3, r1
 800361e:	3304      	adds	r3, #4
 8003620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fc ff95 	bl	8000554 <__aeabi_i2d>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003632:	f7fd fa6b 	bl	8000b0c <__aeabi_dcmplt>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02e      	beq.n	800369a <detectFace+0xca>
 800363c:	7dfa      	ldrb	r2, [r7, #23]
 800363e:	491d      	ldr	r1, [pc, #116]	; (80036b4 <detectFace+0xe4>)
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	440b      	add	r3, r1
 800364a:	3306      	adds	r3, #6
 800364c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fc ff7f 	bl	8000554 <__aeabi_i2d>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800365e:	f7fd fa73 	bl	8000b48 <__aeabi_dcmpgt>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d018      	beq.n	800369a <detectFace+0xca>
 8003668:	7dfa      	ldrb	r2, [r7, #23]
 800366a:	4912      	ldr	r1, [pc, #72]	; (80036b4 <detectFace+0xe4>)
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	440b      	add	r3, r1
 8003676:	3308      	adds	r3, #8
 8003678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fc ff69 	bl	8000554 <__aeabi_i2d>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	e9d7 0100 	ldrd	r0, r1, [r7]
 800368a:	f7fd fa3f 	bl	8000b0c <__aeabi_dcmplt>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <detectFace+0xca>
			return face;
 8003694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003698:	e007      	b.n	80036aa <detectFace+0xda>
	for (face=0; face<FACE_COUNT; face++)
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	3301      	adds	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b0b      	cmp	r3, #11
 80036a4:	d99e      	bls.n	80035e4 <detectFace+0x14>
	}
	return -1;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000180 	.word	0x20000180

080036b8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <MX_CRC_Init+0x20>)
 80036be:	4a07      	ldr	r2, [pc, #28]	; (80036dc <MX_CRC_Init+0x24>)
 80036c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80036c2:	4805      	ldr	r0, [pc, #20]	; (80036d8 <MX_CRC_Init+0x20>)
 80036c4:	f001 fc4d 	bl	8004f62 <HAL_CRC_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80036ce:	f000 fa11 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000558 	.word	0x20000558
 80036dc:	40023000 	.word	0x40023000

080036e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <HAL_CRC_MspInit+0x3c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d10d      	bne.n	800370e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_CRC_MspInit+0x40>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <HAL_CRC_MspInit+0x40>)
 80036fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003700:	6313      	str	r3, [r2, #48]	; 0x30
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_CRC_MspInit+0x40>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40023000 	.word	0x40023000
 8003720:	40023800 	.word	0x40023800

08003724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <MX_DMA_Init+0x3c>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	4a0b      	ldr	r2, [pc, #44]	; (8003760 <MX_DMA_Init+0x3c>)
 8003734:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003738:	6313      	str	r3, [r2, #48]	; 0x30
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <MX_DMA_Init+0x3c>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	2100      	movs	r1, #0
 800374a:	2039      	movs	r0, #57	; 0x39
 800374c:	f001 fbd3 	bl	8004ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003750:	2039      	movs	r0, #57	; 0x39
 8003752:	f001 fbec 	bl	8004f2e <HAL_NVIC_EnableIRQ>

}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800

08003764 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	4b3c      	ldr	r3, [pc, #240]	; (8003870 <MX_GPIO_Init+0x10c>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a3b      	ldr	r2, [pc, #236]	; (8003870 <MX_GPIO_Init+0x10c>)
 8003784:	f043 0304 	orr.w	r3, r3, #4
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <MX_GPIO_Init+0x10c>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b35      	ldr	r3, [pc, #212]	; (8003870 <MX_GPIO_Init+0x10c>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4a34      	ldr	r2, [pc, #208]	; (8003870 <MX_GPIO_Init+0x10c>)
 80037a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a4:	6313      	str	r3, [r2, #48]	; 0x30
 80037a6:	4b32      	ldr	r3, [pc, #200]	; (8003870 <MX_GPIO_Init+0x10c>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <MX_GPIO_Init+0x10c>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <MX_GPIO_Init+0x10c>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	6313      	str	r3, [r2, #48]	; 0x30
 80037c2:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <MX_GPIO_Init+0x10c>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	4b27      	ldr	r3, [pc, #156]	; (8003870 <MX_GPIO_Init+0x10c>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a26      	ldr	r2, [pc, #152]	; (8003870 <MX_GPIO_Init+0x10c>)
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <MX_GPIO_Init+0x10c>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80037ea:	2200      	movs	r2, #0
 80037ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037f0:	4820      	ldr	r0, [pc, #128]	; (8003874 <MX_GPIO_Init+0x110>)
 80037f2:	f002 fc7f 	bl	80060f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, GPIO_PIN_RESET);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2110      	movs	r1, #16
 80037fa:	481f      	ldr	r0, [pc, #124]	; (8003878 <MX_GPIO_Init+0x114>)
 80037fc:	f002 fc7a 	bl	80060f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003806:	2301      	movs	r3, #1
 8003808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380e:	2300      	movs	r3, #0
 8003810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003812:	f107 0314 	add.w	r3, r7, #20
 8003816:	4619      	mov	r1, r3
 8003818:	4816      	ldr	r0, [pc, #88]	; (8003874 <MX_GPIO_Init+0x110>)
 800381a:	f002 fae7 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_MEM_CS_Pin;
 800381e:	2310      	movs	r3, #16
 8003820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003822:	2301      	movs	r3, #1
 8003824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_MEM_CS_GPIO_Port, &GPIO_InitStruct);
 800382e:	f107 0314 	add.w	r3, r7, #20
 8003832:	4619      	mov	r1, r3
 8003834:	4810      	ldr	r0, [pc, #64]	; (8003878 <MX_GPIO_Init+0x114>)
 8003836:	f002 fad9 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 800383a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800383e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003840:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003846:	2301      	movs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 800384a:	f107 0314 	add.w	r3, r7, #20
 800384e:	4619      	mov	r1, r3
 8003850:	480a      	ldr	r0, [pc, #40]	; (800387c <MX_GPIO_Init+0x118>)
 8003852:	f002 facb 	bl	8005dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	2100      	movs	r1, #0
 800385a:	2017      	movs	r0, #23
 800385c:	f001 fb4b 	bl	8004ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003860:	2017      	movs	r0, #23
 8003862:	f001 fb64 	bl	8004f2e <HAL_NVIC_EnableIRQ>

}
 8003866:	bf00      	nop
 8003868:	3728      	adds	r7, #40	; 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	40020800 	.word	0x40020800
 8003878:	40020000 	.word	0x40020000
 800387c:	40020400 	.word	0x40020400

08003880 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <MX_I2C1_Init+0x54>)
 8003886:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <MX_I2C1_Init+0x58>)
 8003888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <MX_I2C1_Init+0x54>)
 800388c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003890:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <MX_I2C1_Init+0x54>)
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <MX_I2C1_Init+0x54>)
 800389a:	2200      	movs	r2, #0
 800389c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <MX_I2C1_Init+0x54>)
 80038a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <MX_I2C1_Init+0x54>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <MX_I2C1_Init+0x54>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <MX_I2C1_Init+0x54>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <MX_I2C1_Init+0x54>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038be:	4805      	ldr	r0, [pc, #20]	; (80038d4 <MX_I2C1_Init+0x54>)
 80038c0:	f002 fc4a 	bl	8006158 <HAL_I2C_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80038ca:	f000 f913 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000560 	.word	0x20000560
 80038d8:	40005400 	.word	0x40005400

080038dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a19      	ldr	r2, [pc, #100]	; (8003960 <HAL_I2C_MspInit+0x84>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d12b      	bne.n	8003956 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_I2C_MspInit+0x88>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a17      	ldr	r2, [pc, #92]	; (8003964 <HAL_I2C_MspInit+0x88>)
 8003908:	f043 0302 	orr.w	r3, r3, #2
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <HAL_I2C_MspInit+0x88>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800391a:	23c0      	movs	r3, #192	; 0xc0
 800391c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800391e:	2312      	movs	r3, #18
 8003920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003926:	2303      	movs	r3, #3
 8003928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800392a:	2304      	movs	r3, #4
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800392e:	f107 0314 	add.w	r3, r7, #20
 8003932:	4619      	mov	r1, r3
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <HAL_I2C_MspInit+0x8c>)
 8003936:	f002 fa59 	bl	8005dec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_I2C_MspInit+0x88>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	4a08      	ldr	r2, [pc, #32]	; (8003964 <HAL_I2C_MspInit+0x88>)
 8003944:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003948:	6413      	str	r3, [r2, #64]	; 0x40
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_I2C_MspInit+0x88>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003956:	bf00      	nop
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40005400 	.word	0x40005400
 8003964:	40023800 	.word	0x40023800
 8003968:	40020400 	.word	0x40020400

0800396c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003972:	f001 f94f 	bl	8004c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003976:	f000 f853 	bl	8003a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800397a:	f7ff fef3 	bl	8003764 <MX_GPIO_Init>
  MX_RTC_Init();
 800397e:	f000 f8bf 	bl	8003b00 <MX_RTC_Init>
  MX_DMA_Init();
 8003982:	f7ff fecf 	bl	8003724 <MX_DMA_Init>
  MX_I2C1_Init();
 8003986:	f7ff ff7b 	bl	8003880 <MX_I2C1_Init>
  MX_TIM1_Init();
 800398a:	f000 fadd 	bl	8003f48 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800398e:	f000 fc69 	bl	8004264 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8003992:	f000 f907 	bl	8003ba4 <MX_SPI1_Init>
  MX_CRC_Init();
 8003996:	f7ff fe8f 	bl	80036b8 <MX_CRC_Init>
  MX_TIM9_Init();
 800399a:	f000 fb75 	bl	8004088 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  ledAllOff();
 800399e:	f7ff fd7d 	bl	800349c <ledAllOff>
  sysConfigInit();
 80039a2:	f000 fdb7 	bl	8004514 <sysConfigInit>
  systemConfig_t * config = systemConfigGet();
 80039a6:	f000 fdcd 	bl	8004544 <systemConfigGet>
 80039aa:	6078      	str	r0, [r7, #4]
  dodecaItems_t *dodecaItems = &config->configItems.dodecaConfig;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	603b      	str	r3, [r7, #0]

  dodecaInit(dodecaItems);
 80039b0:	6838      	ldr	r0, [r7, #0]
 80039b2:	f7fe fd83 	bl	80024bc <dodecaInit>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
*/

  ConsoleInit();
 80039b6:	f7fd fbeb 	bl	8001190 <ConsoleInit>
  stateContollerInit(STATE_IDLE);
 80039ba:	2002      	movs	r0, #2
 80039bc:	f000 fd20 	bl	8004400 <stateContollerInit>

  HAL_TIM_Base_Start_IT(&htim9);
 80039c0:	4812      	ldr	r0, [pc, #72]	; (8003a0c <main+0xa0>)
 80039c2:	f004 fca7 	bl	8008314 <HAL_TIM_Base_Start_IT>

  if (SYS_CONFIG_BAD_DATA == sysConfigRead())
 80039c6:	f000 fdf5 	bl	80045b4 <sysConfigRead>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d106      	bne.n	80039de <main+0x72>
  {
	  ConsoleSendLine("*** CONFIG INVALID ***\nResetting to default");
 80039d0:	480f      	ldr	r0, [pc, #60]	; (8003a10 <main+0xa4>)
 80039d2:	f7fd fe05 	bl	80015e0 <ConsoleSendLine>
	  dodecaReset();
 80039d6:	f7fe fd81 	bl	80024dc <dodecaReset>
	  sysConfigSave();
 80039da:	f000 fe05 	bl	80045e8 <sysConfigSave>





  HAL_Delay(100);
 80039de:	2064      	movs	r0, #100	; 0x64
 80039e0:	f001 f98a 	bl	8004cf8 <HAL_Delay>
  if (MPU6050_Init(&hi2c1) == 1)
 80039e4:	480b      	ldr	r0, [pc, #44]	; (8003a14 <main+0xa8>)
 80039e6:	f7fe ff3b 	bl	8002860 <MPU6050_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d103      	bne.n	80039f8 <main+0x8c>
  {
	  ConsoleSendString("** ERROR Initialising MNP6050!\n");
 80039f0:	4809      	ldr	r0, [pc, #36]	; (8003a18 <main+0xac>)
 80039f2:	f7fd fde8 	bl	80015c6 <ConsoleSendString>
 80039f6:	e002      	b.n	80039fe <main+0x92>
  }
  else
  {
	  ConsoleSendString("MPU6050 Initialised\n");
 80039f8:	4808      	ldr	r0, [pc, #32]	; (8003a1c <main+0xb0>)
 80039fa:	f7fd fde4 	bl	80015c6 <ConsoleSendString>
  }
  ConsolePrintPrompt();
 80039fe:	f7fd fbf1 	bl	80011e4 <ConsolePrintPrompt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 8003a02:	f7fd fbfd 	bl	8001200 <ConsoleProcess>
	  stateController();
 8003a06:	f000 fd25 	bl	8004454 <stateController>
	  ConsoleProcess();
 8003a0a:	e7fa      	b.n	8003a02 <main+0x96>
 8003a0c:	20000678 	.word	0x20000678
 8003a10:	0800edb0 	.word	0x0800edb0
 8003a14:	20000560 	.word	0x20000560
 8003a18:	0800eddc 	.word	0x0800eddc
 8003a1c:	0800edfc 	.word	0x0800edfc

08003a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b094      	sub	sp, #80	; 0x50
 8003a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a26:	f107 0320 	add.w	r3, r7, #32
 8003a2a:	2230      	movs	r2, #48	; 0x30
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f006 ff82 	bl	800a938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a44:	2300      	movs	r3, #0
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	4b28      	ldr	r3, [pc, #160]	; (8003aec <SystemClock_Config+0xcc>)
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	4a27      	ldr	r2, [pc, #156]	; (8003aec <SystemClock_Config+0xcc>)
 8003a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a52:	6413      	str	r3, [r2, #64]	; 0x40
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <SystemClock_Config+0xcc>)
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a60:	2300      	movs	r3, #0
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <SystemClock_Config+0xd0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a21      	ldr	r2, [pc, #132]	; (8003af0 <SystemClock_Config+0xd0>)
 8003a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <SystemClock_Config+0xd0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003a7c:	2305      	movs	r3, #5
 8003a7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003a86:	2301      	movs	r3, #1
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003a94:	230c      	movs	r3, #12
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003a98:	2360      	movs	r3, #96	; 0x60
 8003a9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aa4:	f107 0320 	add.w	r3, r7, #32
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f003 fb15 	bl	80070d8 <HAL_RCC_OscConfig>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003ab4:	f000 f81e 	bl	8003af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ab8:	230f      	movs	r3, #15
 8003aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003abc:	2302      	movs	r3, #2
 8003abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003ace:	f107 030c 	add.w	r3, r7, #12
 8003ad2:	2103      	movs	r1, #3
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f003 fd77 	bl	80075c8 <HAL_RCC_ClockConfig>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003ae0:	f000 f808 	bl	8003af4 <Error_Handler>
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3750      	adds	r7, #80	; 0x50
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40007000 	.word	0x40007000

08003af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003af8:	b672      	cpsid	i
}
 8003afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003afc:	e7fe      	b.n	8003afc <Error_Handler+0x8>
	...

08003b00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <MX_RTC_Init+0x44>)
 8003b06:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <MX_RTC_Init+0x48>)
 8003b08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <MX_RTC_Init+0x44>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <MX_RTC_Init+0x44>)
 8003b12:	227f      	movs	r2, #127	; 0x7f
 8003b14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <MX_RTC_Init+0x44>)
 8003b18:	22ff      	movs	r2, #255	; 0xff
 8003b1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <MX_RTC_Init+0x44>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <MX_RTC_Init+0x44>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <MX_RTC_Init+0x44>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003b2e:	4805      	ldr	r0, [pc, #20]	; (8003b44 <MX_RTC_Init+0x44>)
 8003b30:	f004 f81a 	bl	8007b68 <HAL_RTC_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003b3a:	f7ff ffdb 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200005b4 	.word	0x200005b4
 8003b48:	40002800 	.word	0x40002800

08003b4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b54:	f107 0308 	add.w	r3, r7, #8
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	611a      	str	r2, [r3, #16]
 8003b64:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <HAL_RTC_MspInit+0x50>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d111      	bne.n	8003b94 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b70:	2302      	movs	r3, #2
 8003b72:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b78:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f003 ff02 	bl	8007988 <HAL_RCCEx_PeriphCLKConfig>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003b8a:	f7ff ffb3 	bl	8003af4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b8e:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <HAL_RTC_MspInit+0x54>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003b94:	bf00      	nop
 8003b96:	3720      	adds	r7, #32
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40002800 	.word	0x40002800
 8003ba0:	42470e3c 	.word	0x42470e3c

08003ba4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <MX_SPI1_Init+0x68>)
 8003bac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bae:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bf0:	220a      	movs	r2, #10
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bf4:	4804      	ldr	r0, [pc, #16]	; (8003c08 <MX_SPI1_Init+0x64>)
 8003bf6:	f004 fab5 	bl	8008164 <HAL_SPI_Init>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003c00:	f7ff ff78 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	200005d4 	.word	0x200005d4
 8003c0c:	40013000 	.word	0x40013000

08003c10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <HAL_SPI_MspInit+0x84>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d12b      	bne.n	8003c8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <HAL_SPI_MspInit+0x88>)
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <HAL_SPI_MspInit+0x88>)
 8003c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c40:	6453      	str	r3, [r2, #68]	; 0x44
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_SPI_MspInit+0x88>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_SPI_MspInit+0x88>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <HAL_SPI_MspInit+0x88>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <HAL_SPI_MspInit+0x88>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_MEM_SCK_Pin|SPI_MEM_MISO_Pin|SPI_MEM_MOSI_Pin;
 8003c6a:	23e0      	movs	r3, #224	; 0xe0
 8003c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c76:	2303      	movs	r3, #3
 8003c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c7a:	2305      	movs	r3, #5
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7e:	f107 0314 	add.w	r3, r7, #20
 8003c82:	4619      	mov	r1, r3
 8003c84:	4805      	ldr	r0, [pc, #20]	; (8003c9c <HAL_SPI_MspInit+0x8c>)
 8003c86:	f002 f8b1 	bl	8005dec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3728      	adds	r7, #40	; 0x28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40013000 	.word	0x40013000
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40020000 	.word	0x40020000

08003ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <HAL_MspInit+0x4c>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	4a0f      	ldr	r2, [pc, #60]	; (8003cec <HAL_MspInit+0x4c>)
 8003cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <HAL_MspInit+0x4c>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_MspInit+0x4c>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	4a08      	ldr	r2, [pc, #32]	; (8003cec <HAL_MspInit+0x4c>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_MspInit+0x4c>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800

08003cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cf4:	e7fe      	b.n	8003cf4 <NMI_Handler+0x4>

08003cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cfa:	e7fe      	b.n	8003cfa <HardFault_Handler+0x4>

08003cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d00:	e7fe      	b.n	8003d00 <MemManage_Handler+0x4>

08003d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d06:	e7fe      	b.n	8003d06 <BusFault_Handler+0x4>

08003d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <UsageFault_Handler+0x4>

08003d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d3c:	f000 ffbc 	bl	8004cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d40:	bf00      	nop
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 8003d48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003d4c:	f002 f9ec 	bl	8006128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d50:	bf00      	nop
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d58:	4803      	ldr	r0, [pc, #12]	; (8003d68 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003d5a:	f004 fe0d 	bl	8008978 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003d5e:	4803      	ldr	r0, [pc, #12]	; (8003d6c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003d60:	f004 fe0a 	bl	8008978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000630 	.word	0x20000630
 8003d6c:	20000678 	.word	0x20000678

08003d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <USART1_IRQHandler+0x10>)
 8003d76:	f005 fe39 	bl	80099ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000720 	.word	0x20000720

08003d84 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <DMA2_Stream1_IRQHandler+0x10>)
 8003d8a:	f001 fad1 	bl	8005330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200006c0 	.word	0x200006c0

08003d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
	return 1;
 8003d9c:	2301      	movs	r3, #1
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_kill>:

int _kill(int pid, int sig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003db2:	f006 fd87 	bl	800a8c4 <__errno>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2216      	movs	r2, #22
 8003dba:	601a      	str	r2, [r3, #0]
	return -1;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_exit>:

void _exit (int status)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ffe7 	bl	8003da8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dda:	e7fe      	b.n	8003dda <_exit+0x12>

08003ddc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e00a      	b.n	8003e04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dee:	f3af 8000 	nop.w
 8003df2:	4601      	mov	r1, r0
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	60ba      	str	r2, [r7, #8]
 8003dfa:	b2ca      	uxtb	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3301      	adds	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	dbf0      	blt.n	8003dee <_read+0x12>
	}

return len;
 8003e0c:	687b      	ldr	r3, [r7, #4]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e009      	b.n	8003e3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	60ba      	str	r2, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	dbf1      	blt.n	8003e28 <_write+0x12>
	}
	return len;
 8003e44:	687b      	ldr	r3, [r7, #4]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_close>:

int _close(int file)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
	return -1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e76:	605a      	str	r2, [r3, #4]
	return 0;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_isatty>:

int _isatty(int file)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
	return 1;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
	return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <_sbrk+0x5c>)
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <_sbrk+0x60>)
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <_sbrk+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <_sbrk+0x64>)
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <_sbrk+0x68>)
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <_sbrk+0x64>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d207      	bcs.n	8003ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ee8:	f006 fcec 	bl	800a8c4 <__errno>
 8003eec:	4603      	mov	r3, r0
 8003eee:	220c      	movs	r2, #12
 8003ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef6:	e009      	b.n	8003f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <_sbrk+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <_sbrk+0x64>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <_sbrk+0x64>)
 8003f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20020000 	.word	0x20020000
 8003f18:	00000400 	.word	0x00000400
 8003f1c:	2000062c 	.word	0x2000062c
 8003f20:	20000b40 	.word	0x20000b40

08003f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <SystemInit+0x20>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <SystemInit+0x20>)
 8003f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b096      	sub	sp, #88	; 0x58
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	611a      	str	r2, [r3, #16]
 8003f76:	615a      	str	r2, [r3, #20]
 8003f78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f006 fcd9 	bl	800a938 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f86:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <MX_TIM1_Init+0x138>)
 8003f88:	4a3e      	ldr	r2, [pc, #248]	; (8004084 <MX_TIM1_Init+0x13c>)
 8003f8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f8c:	4b3c      	ldr	r3, [pc, #240]	; (8004080 <MX_TIM1_Init+0x138>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f92:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <MX_TIM1_Init+0x138>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 8003f98:	4b39      	ldr	r3, [pc, #228]	; (8004080 <MX_TIM1_Init+0x138>)
 8003f9a:	227c      	movs	r2, #124	; 0x7c
 8003f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f9e:	4b38      	ldr	r3, [pc, #224]	; (8004080 <MX_TIM1_Init+0x138>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fa4:	4b36      	ldr	r3, [pc, #216]	; (8004080 <MX_TIM1_Init+0x138>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003faa:	4b35      	ldr	r3, [pc, #212]	; (8004080 <MX_TIM1_Init+0x138>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003fb0:	4833      	ldr	r0, [pc, #204]	; (8004080 <MX_TIM1_Init+0x138>)
 8003fb2:	f004 f960 	bl	8008276 <HAL_TIM_Base_Init>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003fbc:	f7ff fd9a 	bl	8003af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fca:	4619      	mov	r1, r3
 8003fcc:	482c      	ldr	r0, [pc, #176]	; (8004080 <MX_TIM1_Init+0x138>)
 8003fce:	f004 fe9d 	bl	8008d0c <HAL_TIM_ConfigClockSource>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003fd8:	f7ff fd8c 	bl	8003af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fdc:	4828      	ldr	r0, [pc, #160]	; (8004080 <MX_TIM1_Init+0x138>)
 8003fde:	f004 f9fb 	bl	80083d8 <HAL_TIM_PWM_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003fe8:	f7ff fd84 	bl	8003af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fec:	2300      	movs	r3, #0
 8003fee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ff4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4821      	ldr	r0, [pc, #132]	; (8004080 <MX_TIM1_Init+0x138>)
 8003ffc:	f005 fb12 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8004006:	f7ff fd75 	bl	8003af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800400a:	2360      	movs	r3, #96	; 0x60
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004012:	2300      	movs	r3, #0
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004016:	2300      	movs	r3, #0
 8004018:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800401a:	2300      	movs	r3, #0
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800402a:	2200      	movs	r2, #0
 800402c:	4619      	mov	r1, r3
 800402e:	4814      	ldr	r0, [pc, #80]	; (8004080 <MX_TIM1_Init+0x138>)
 8004030:	f004 fdaa 	bl	8008b88 <HAL_TIM_PWM_ConfigChannel>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800403a:	f7ff fd5b 	bl	8003af4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004042:	2300      	movs	r3, #0
 8004044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004058:	2300      	movs	r3, #0
 800405a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	4619      	mov	r1, r3
 8004060:	4807      	ldr	r0, [pc, #28]	; (8004080 <MX_TIM1_Init+0x138>)
 8004062:	f005 fb4d 	bl	8009700 <HAL_TIMEx_ConfigBreakDeadTime>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800406c:	f7ff fd42 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004070:	4803      	ldr	r0, [pc, #12]	; (8004080 <MX_TIM1_Init+0x138>)
 8004072:	f000 f8bd 	bl	80041f0 <HAL_TIM_MspPostInit>

}
 8004076:	bf00      	nop
 8004078:	3758      	adds	r7, #88	; 0x58
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000630 	.word	0x20000630
 8004084:	40010000 	.word	0x40010000

08004088 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800408e:	463b      	mov	r3, r7
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <MX_TIM9_Init+0x6c>)
 800409c:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <MX_TIM9_Init+0x70>)
 800409e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <MX_TIM9_Init+0x6c>)
 80040a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80040a6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a8:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <MX_TIM9_Init+0x6c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 40000-1;
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <MX_TIM9_Init+0x6c>)
 80040b0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80040b4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <MX_TIM9_Init+0x6c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <MX_TIM9_Init+0x6c>)
 80040be:	2200      	movs	r2, #0
 80040c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80040c2:	480c      	ldr	r0, [pc, #48]	; (80040f4 <MX_TIM9_Init+0x6c>)
 80040c4:	f004 f8d7 	bl	8008276 <HAL_TIM_Base_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80040ce:	f7ff fd11 	bl	8003af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80040d8:	463b      	mov	r3, r7
 80040da:	4619      	mov	r1, r3
 80040dc:	4805      	ldr	r0, [pc, #20]	; (80040f4 <MX_TIM9_Init+0x6c>)
 80040de:	f004 fe15 	bl	8008d0c <HAL_TIM_ConfigClockSource>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80040e8:	f7ff fd04 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000678 	.word	0x20000678
 80040f8:	40014000 	.word	0x40014000

080040fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a34      	ldr	r2, [pc, #208]	; (80041dc <HAL_TIM_Base_MspInit+0xe0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d147      	bne.n	800419e <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	4a32      	ldr	r2, [pc, #200]	; (80041e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6453      	str	r3, [r2, #68]	; 0x44
 800411e:	4b30      	ldr	r3, [pc, #192]	; (80041e0 <HAL_TIM_Base_MspInit+0xe4>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800412a:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 800412c:	4a2e      	ldr	r2, [pc, #184]	; (80041e8 <HAL_TIM_Base_MspInit+0xec>)
 800412e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8004130:	4b2c      	ldr	r3, [pc, #176]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 8004132:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004136:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004138:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 800413a:	2240      	movs	r2, #64	; 0x40
 800413c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800413e:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 8004140:	2200      	movs	r2, #0
 8004142:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004144:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 8004146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800414a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800414c:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 800414e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004152:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004154:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 8004156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800415a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800415c:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 800415e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004162:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004164:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 8004166:	2200      	movs	r2, #0
 8004168:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800416a:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 800416c:	2200      	movs	r2, #0
 800416e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004170:	481c      	ldr	r0, [pc, #112]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 8004172:	f000 ff45 	bl	8005000 <HAL_DMA_Init>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800417c:	f7ff fcba 	bl	8003af4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
 8004186:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <HAL_TIM_Base_MspInit+0xe8>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800418c:	2200      	movs	r2, #0
 800418e:	2100      	movs	r1, #0
 8004190:	2018      	movs	r0, #24
 8004192:	f000 feb0 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004196:	2018      	movs	r0, #24
 8004198:	f000 fec9 	bl	8004f2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800419c:	e01a      	b.n	80041d4 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM9)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <HAL_TIM_Base_MspInit+0xf0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d115      	bne.n	80041d4 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_TIM_Base_MspInit+0xe4>)
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <HAL_TIM_Base_MspInit+0xe4>)
 80041b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b6:	6453      	str	r3, [r2, #68]	; 0x44
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_TIM_Base_MspInit+0xe4>)
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80041c4:	2200      	movs	r2, #0
 80041c6:	2100      	movs	r1, #0
 80041c8:	2018      	movs	r0, #24
 80041ca:	f000 fe94 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80041ce:	2018      	movs	r0, #24
 80041d0:	f000 fead 	bl	8004f2e <HAL_NVIC_EnableIRQ>
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40023800 	.word	0x40023800
 80041e4:	200006c0 	.word	0x200006c0
 80041e8:	40026428 	.word	0x40026428
 80041ec:	40014000 	.word	0x40014000

080041f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f8:	f107 030c 	add.w	r3, r7, #12
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	60da      	str	r2, [r3, #12]
 8004206:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a12      	ldr	r2, [pc, #72]	; (8004258 <HAL_TIM_MspPostInit+0x68>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d11e      	bne.n	8004250 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <HAL_TIM_MspPostInit+0x6c>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	4a10      	ldr	r2, [pc, #64]	; (800425c <HAL_TIM_MspPostInit+0x6c>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6313      	str	r3, [r2, #48]	; 0x30
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <HAL_TIM_MspPostInit+0x6c>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 800422e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004232:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004234:	2302      	movs	r3, #2
 8004236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423c:	2300      	movs	r3, #0
 800423e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004240:	2301      	movs	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 8004244:	f107 030c 	add.w	r3, r7, #12
 8004248:	4619      	mov	r1, r3
 800424a:	4805      	ldr	r0, [pc, #20]	; (8004260 <HAL_TIM_MspPostInit+0x70>)
 800424c:	f001 fdce 	bl	8005dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004250:	bf00      	nop
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40010000 	.word	0x40010000
 800425c:	40023800 	.word	0x40023800
 8004260:	40020000 	.word	0x40020000

08004264 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <MX_USART1_UART_Init+0x4c>)
 800426a:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <MX_USART1_UART_Init+0x50>)
 800426c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <MX_USART1_UART_Init+0x4c>)
 8004270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004276:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <MX_USART1_UART_Init+0x4c>)
 8004278:	2200      	movs	r2, #0
 800427a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <MX_USART1_UART_Init+0x4c>)
 800427e:	2200      	movs	r2, #0
 8004280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <MX_USART1_UART_Init+0x4c>)
 8004284:	2200      	movs	r2, #0
 8004286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <MX_USART1_UART_Init+0x4c>)
 800428a:	220c      	movs	r2, #12
 800428c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <MX_USART1_UART_Init+0x4c>)
 8004290:	2200      	movs	r2, #0
 8004292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <MX_USART1_UART_Init+0x4c>)
 8004296:	2200      	movs	r2, #0
 8004298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800429a:	4805      	ldr	r0, [pc, #20]	; (80042b0 <MX_USART1_UART_Init+0x4c>)
 800429c:	f005 fa96 	bl	80097cc <HAL_UART_Init>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80042a6:	f7ff fc25 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000720 	.word	0x20000720
 80042b4:	40011000 	.word	0x40011000

080042b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c0:	f107 0314 	add.w	r3, r7, #20
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <HAL_UART_MspInit+0x94>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d134      	bne.n	8004344 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	4b1c      	ldr	r3, [pc, #112]	; (8004350 <HAL_UART_MspInit+0x98>)
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <HAL_UART_MspInit+0x98>)
 80042e4:	f043 0310 	orr.w	r3, r3, #16
 80042e8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ea:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_UART_MspInit+0x98>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	4b15      	ldr	r3, [pc, #84]	; (8004350 <HAL_UART_MspInit+0x98>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	4a14      	ldr	r2, [pc, #80]	; (8004350 <HAL_UART_MspInit+0x98>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6313      	str	r3, [r2, #48]	; 0x30
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_UART_MspInit+0x98>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004312:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004318:	2302      	movs	r3, #2
 800431a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004320:	2303      	movs	r3, #3
 8004322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004324:	2307      	movs	r3, #7
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	4619      	mov	r1, r3
 800432e:	4809      	ldr	r0, [pc, #36]	; (8004354 <HAL_UART_MspInit+0x9c>)
 8004330:	f001 fd5c 	bl	8005dec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004334:	2200      	movs	r2, #0
 8004336:	2100      	movs	r1, #0
 8004338:	2025      	movs	r0, #37	; 0x25
 800433a:	f000 fddc 	bl	8004ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800433e:	2025      	movs	r0, #37	; 0x25
 8004340:	f000 fdf5 	bl	8004f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004344:	bf00      	nop
 8004346:	3728      	adds	r7, #40	; 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40011000 	.word	0x40011000
 8004350:	40023800 	.word	0x40023800
 8004354:	40020000 	.word	0x40020000

08004358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004390 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800435c:	480d      	ldr	r0, [pc, #52]	; (8004394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800435e:	490e      	ldr	r1, [pc, #56]	; (8004398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004360:	4a0e      	ldr	r2, [pc, #56]	; (800439c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004364:	e002      	b.n	800436c <LoopCopyDataInit>

08004366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800436a:	3304      	adds	r3, #4

0800436c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800436c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800436e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004370:	d3f9      	bcc.n	8004366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004372:	4a0b      	ldr	r2, [pc, #44]	; (80043a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004374:	4c0b      	ldr	r4, [pc, #44]	; (80043a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004378:	e001      	b.n	800437e <LoopFillZerobss>

0800437a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800437a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800437c:	3204      	adds	r2, #4

0800437e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800437e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004380:	d3fb      	bcc.n	800437a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004382:	f7ff fdcf 	bl	8003f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004386:	f006 faa3 	bl	800a8d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800438a:	f7ff faef 	bl	800396c <main>
  bx  lr    
 800438e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004398:	2000046c 	.word	0x2000046c
  ldr r2, =_sidata
 800439c:	0800fbc8 	.word	0x0800fbc8
  ldr r2, =_sbss
 80043a0:	2000046c 	.word	0x2000046c
  ldr r4, =_ebss
 80043a4:	20000b3c 	.word	0x20000b3c

080043a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043a8:	e7fe      	b.n	80043a8 <ADC_IRQHandler>
	...

080043ac <findState>:

static stateControl_t *findState(const eState_t state);


static stateControl_t *findState(const eState_t state)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
	eState_t stateLoop = 0xff;
 80043b6:	23ff      	movs	r3, #255	; 0xff
 80043b8:	73bb      	strb	r3, [r7, #14]
	uint8_t cnt = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]
	while (STATE_NONE != stateLoop)
 80043be:	e00f      	b.n	80043e0 <findState+0x34>
	{
		if (state == stateTable[cnt].state)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	4a0e      	ldr	r2, [pc, #56]	; (80043fc <findState+0x50>)
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4413      	add	r3, r2
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	79fa      	ldrb	r2, [r7, #7]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d104      	bne.n	80043da <findState+0x2e>
			return &stateTable[cnt];
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	4a09      	ldr	r2, [pc, #36]	; (80043fc <findState+0x50>)
 80043d6:	4413      	add	r3, r2
 80043d8:	e009      	b.n	80043ee <findState+0x42>
		cnt++;
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	3301      	adds	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
	while (STATE_NONE != stateLoop)
 80043e0:	7bbb      	ldrb	r3, [r7, #14]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1ec      	bne.n	80043c0 <findState+0x14>
	}
	return &stateTable[cnt];
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	4a04      	ldr	r2, [pc, #16]	; (80043fc <findState+0x50>)
 80043ec:	4413      	add	r3, r2
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	200001fc 	.word	0x200001fc

08004400 <stateContollerInit>:


void stateContollerInit(eState_t state)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	71fb      	strb	r3, [r7, #7]
	currentState = state;
 800440a:	4a04      	ldr	r2, [pc, #16]	; (800441c <stateContollerInit+0x1c>)
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	7013      	strb	r3, [r2, #0]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	2000028c 	.word	0x2000028c

08004420 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a08      	ldr	r2, [pc, #32]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d106      	bne.n	800443e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		stateActionRegister |= STATE_ACTIONFLAG_SLEEP_OUT;
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800443c:	701a      	strb	r2, [r3, #0]
	}
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000678 	.word	0x20000678
 8004450:	20000764 	.word	0x20000764

08004454 <stateController>:


void stateController()
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b098      	sub	sp, #96	; 0x60
 8004458:	af00      	add	r7, sp, #0
	stateControl_t *nextState;
	MPU6050_t imuData;
	uint8_t detectedFace;

	switch (currentState)
 800445a:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <stateController+0xb4>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d84d      	bhi.n	80044fe <stateController+0xaa>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <stateController+0x14>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	080044f5 	.word	0x080044f5
 800446c:	080044f5 	.word	0x080044f5
 8004470:	0800448d 	.word	0x0800448d
 8004474:	080044d7 	.word	0x080044d7
 8004478:	080044f5 	.word	0x080044f5
 800447c:	080044ab 	.word	0x080044ab
 8004480:	080044f5 	.word	0x080044f5
 8004484:	080044f5 	.word	0x080044f5
 8004488:	080044f5 	.word	0x080044f5
	case STATE_CONFIG:

		break;
	case STATE_IDLE:

			if (stateActionRegister && STATE_ACTIONFLAG_SLEEP_OUT )
 800448c:	4b1f      	ldr	r3, [pc, #124]	; (800450c <stateController+0xb8>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d031      	beq.n	80044f8 <stateController+0xa4>
			{
				nextState = findState(currentState);
 8004494:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <stateController+0xb4>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff ff87 	bl	80043ac <findState>
 800449e:	65b8      	str	r0, [r7, #88]	; 0x58
				currentState = nextState->SleepTimeout;
 80044a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a2:	7ada      	ldrb	r2, [r3, #11]
 80044a4:	4b18      	ldr	r3, [pc, #96]	; (8004508 <stateController+0xb4>)
 80044a6:	701a      	strb	r2, [r3, #0]
			}
		break;
 80044a8:	e026      	b.n	80044f8 <stateController+0xa4>
	case STATE_CHECK_OREN:
			MPU6050ReadStable(&imuData);
 80044aa:	463b      	mov	r3, r7
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fb69 	bl	8002b84 <MPU6050ReadStable>
			detectedFace = detectFace(imuData.KalmanAngleX, imuData.KalmanAngleY);
 80044b2:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80044b6:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80044ba:	eeb0 1a46 	vmov.f32	s2, s12
 80044be:	eef0 1a66 	vmov.f32	s3, s13
 80044c2:	eeb0 0a47 	vmov.f32	s0, s14
 80044c6:	eef0 0a67 	vmov.f32	s1, s15
 80044ca:	f7ff f881 	bl	80035d0 <detectFace>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 80044d4:	e013      	b.n	80044fe <stateController+0xaa>
	case STATE_BATTERY_TEST:
		break;
	case STATE_END_TASK:
		break;
	case STATE_SLEEP:
		if (stateActionRegister && STATE_ACTIONFLAG_NEW_FACE )
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <stateController+0xb8>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00e      	beq.n	80044fc <stateController+0xa8>
					{
						nextState = findState(stateTable->state);
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <stateController+0xbc>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ff62 	bl	80043ac <findState>
 80044e8:	65b8      	str	r0, [r7, #88]	; 0x58
						stateTable->state = nextState->newFaceDetected;
 80044ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ec:	7a1a      	ldrb	r2, [r3, #8]
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <stateController+0xbc>)
 80044f0:	701a      	strb	r2, [r3, #0]
					}
		break;
 80044f2:	e003      	b.n	80044fc <stateController+0xa8>
	case STATE_NONE:
		break;
 80044f4:	bf00      	nop
 80044f6:	e002      	b.n	80044fe <stateController+0xaa>
		break;
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <stateController+0xaa>
		break;
 80044fc:	bf00      	nop
	}


}
 80044fe:	bf00      	nop
 8004500:	3760      	adds	r7, #96	; 0x60
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	2000028c 	.word	0x2000028c
 800450c:	20000764 	.word	0x20000764
 8004510:	200001fc 	.word	0x200001fc

08004514 <sysConfigInit>:
static uint16_t SYS_CONFIG_SIZE_DODEC;



void sysConfigInit()
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
	SYS_CONFIG_SIZE = sizeof(systemConfig.configItems)/4;
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <sysConfigInit+0x24>)
 800451a:	2260      	movs	r2, #96	; 0x60
 800451c:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_ALL_SIZE = sizeof(systemConfig)/4;
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <sysConfigInit+0x28>)
 8004520:	2261      	movs	r2, #97	; 0x61
 8004522:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_SIZE_DODEC = sizeof(systemConfig.configItems.dodecaConfig);
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <sysConfigInit+0x2c>)
 8004526:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800452a:	801a      	strh	r2, [r3, #0]
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	200008ec 	.word	0x200008ec
 800453c:	200008ee 	.word	0x200008ee
 8004540:	200008f0 	.word	0x200008f0

08004544 <systemConfigGet>:

systemConfig_t *systemConfigGet()
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
	return &systemConfig;
 8004548:	4b02      	ldr	r3, [pc, #8]	; (8004554 <systemConfigGet+0x10>)
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	20000768 	.word	0x20000768

08004558 <sysConfigValidateConfig>:

static eSYSConfig_t sysConfigValidateConfig()
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 800455e:	f000 f813 	bl	8004588 <sysConfigCalcChecksum>
 8004562:	6078      	str	r0, [r7, #4]
	uint32_t crcRO = systemConfigRO->checksum;
 8004564:	4b07      	ldr	r3, [pc, #28]	; (8004584 <sysConfigValidateConfig+0x2c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800456c:	603b      	str	r3, [r7, #0]
	if (crc == crcRO)
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d101      	bne.n	800457a <sysConfigValidateConfig+0x22>
		return SYS_CONFIG_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e000      	b.n	800457c <sysConfigValidateConfig+0x24>
	else
		return SYS_CONFIG_BAD_CHECKSUM;
 800457a:	2301      	movs	r3, #1
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20000290 	.word	0x20000290

08004588 <sysConfigCalcChecksum>:

uint32_t sysConfigCalcChecksum()
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
	uint32_t crc;
	crc =  HAL_CRC_Calculate(&hcrc,  (uint32_t*)&systemConfig.configItems, SYS_CONFIG_SIZE);
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <sysConfigCalcChecksum+0x20>)
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	4905      	ldr	r1, [pc, #20]	; (80045ac <sysConfigCalcChecksum+0x24>)
 8004596:	4806      	ldr	r0, [pc, #24]	; (80045b0 <sysConfigCalcChecksum+0x28>)
 8004598:	f000 fcff 	bl	8004f9a <HAL_CRC_Calculate>
 800459c:	6078      	str	r0, [r7, #4]
	return crc;
 800459e:	687b      	ldr	r3, [r7, #4]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	200008ec 	.word	0x200008ec
 80045ac:	20000768 	.word	0x20000768
 80045b0:	20000558 	.word	0x20000558

080045b4 <sysConfigRead>:




eSYSConfig_t sysConfigRead()
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
	Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,SYS_CONFIG_ALL_SIZE );
 80045b8:	4b08      	ldr	r3, [pc, #32]	; (80045dc <sysConfigRead+0x28>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <sysConfigRead+0x2c>)
 80045be:	8812      	ldrh	r2, [r2, #0]
 80045c0:	4908      	ldr	r1, [pc, #32]	; (80045e4 <sysConfigRead+0x30>)
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe f920 	bl	8002808 <Flash_Read_Data>
	//Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,5 );
	if (SYS_CONFIG_BAD_CHECKSUM == sysConfigValidateConfig())
 80045c8:	f7ff ffc6 	bl	8004558 <sysConfigValidateConfig>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <sysConfigRead+0x22>
		return SYS_CONFIG_BAD_DATA;
 80045d2:	2302      	movs	r3, #2
 80045d4:	e000      	b.n	80045d8 <sysConfigRead+0x24>
	else
		return SYS_CONFIG_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	0800f748 	.word	0x0800f748
 80045e0:	200008ee 	.word	0x200008ee
 80045e4:	20000768 	.word	0x20000768

080045e8 <sysConfigSave>:

void sysConfigSave()
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 80045ee:	f7ff ffcb 	bl	8004588 <sysConfigCalcChecksum>
 80045f2:	6078      	str	r0, [r7, #4]
	systemConfig.checksum = crc;
 80045f4:	4a07      	ldr	r2, [pc, #28]	; (8004614 <sysConfigSave+0x2c>)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

	Flash_Write_Data(SYSTEM_CONFIG_ADDRESS, (uint32_t *)&systemConfig, SYS_CONFIG_ALL_SIZE);
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <sysConfigSave+0x30>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a06      	ldr	r2, [pc, #24]	; (800461c <sysConfigSave+0x34>)
 8004602:	8812      	ldrh	r2, [r2, #0]
 8004604:	4903      	ldr	r1, [pc, #12]	; (8004614 <sysConfigSave+0x2c>)
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe f8a0 	bl	800274c <Flash_Write_Data>
	//TODO: Handle a Confug Save Error - Hard Fault!
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000768 	.word	0x20000768
 8004618:	0800f748 	.word	0x0800f748
 800461c:	200008ee 	.word	0x200008ee

08004620 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	460a      	mov	r2, r1
 800462a:	71fb      	strb	r3, [r7, #7]
 800462c:	4613      	mov	r3, r2
 800462e:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	79ba      	ldrb	r2, [r7, #6]
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	121b      	asrs	r3, r3, #8
 800463a:	b2db      	uxtb	r3, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4604      	mov	r4, r0
 8004650:	4608      	mov	r0, r1
 8004652:	4611      	mov	r1, r2
 8004654:	461a      	mov	r2, r3
 8004656:	4623      	mov	r3, r4
 8004658:	71fb      	strb	r3, [r7, #7]
 800465a:	4603      	mov	r3, r0
 800465c:	71bb      	strb	r3, [r7, #6]
 800465e:	460b      	mov	r3, r1
 8004660:	717b      	strb	r3, [r7, #5]
 8004662:	4613      	mov	r3, r2
 8004664:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 8004666:	79bb      	ldrb	r3, [r7, #6]
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004670:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004710 <led_set_RGB+0xc8>
 8004674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467c:	edc7 7a00 	vstr	s15, [r7]
 8004680:	783b      	ldrb	r3, [r7, #0]
 8004682:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 8004684:	797b      	ldrb	r3, [r7, #5]
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800468e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004710 <led_set_RGB+0xc8>
 8004692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469a:	edc7 7a00 	vstr	s15, [r7]
 800469e:	783b      	ldrb	r3, [r7, #0]
 80046a0:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 80046a2:	793b      	ldrb	r3, [r7, #4]
 80046a4:	ee07 3a90 	vmov	s15, r3
 80046a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004710 <led_set_RGB+0xc8>
 80046b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b8:	edc7 7a00 	vstr	s15, [r7]
 80046bc:	783b      	ldrb	r3, [r7, #0]
 80046be:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 80046c0:	79fa      	ldrb	r2, [r7, #7]
 80046c2:	4613      	mov	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	189c      	adds	r4, r3, r2
 80046c8:	797b      	ldrb	r3, [r7, #5]
 80046ca:	21b0      	movs	r1, #176	; 0xb0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ffa7 	bl	8004620 <scale8>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <led_set_RGB+0xcc>)
 80046d8:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 80046da:	79fa      	ldrb	r2, [r7, #7]
 80046dc:	4613      	mov	r3, r2
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	4413      	add	r3, r2
 80046e2:	3301      	adds	r3, #1
 80046e4:	490b      	ldr	r1, [pc, #44]	; (8004714 <led_set_RGB+0xcc>)
 80046e6:	79ba      	ldrb	r2, [r7, #6]
 80046e8:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 80046ea:	79fa      	ldrb	r2, [r7, #7]
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	1c9c      	adds	r4, r3, #2
 80046f4:	793b      	ldrb	r3, [r7, #4]
 80046f6:	21f0      	movs	r1, #240	; 0xf0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff91 	bl	8004620 <scale8>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <led_set_RGB+0xcc>)
 8004704:	551a      	strb	r2, [r3, r4]

}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bd90      	pop	{r4, r7, pc}
 800470e:	bf00      	nop
 8004710:	3e99999a 	.word	0x3e99999a
 8004714:	200008f4 	.word	0x200008f4

08004718 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 800471e:	4b50      	ldr	r3, [pc, #320]	; (8004860 <led_render+0x148>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d105      	bne.n	8004732 <led_render+0x1a>
 8004726:	4b4f      	ldr	r3, [pc, #316]	; (8004864 <led_render+0x14c>)
 8004728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b01      	cmp	r3, #1
 8004730:	d015      	beq.n	800475e <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	71fb      	strb	r3, [r7, #7]
 8004736:	e007      	b.n	8004748 <led_render+0x30>
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	4a4b      	ldr	r2, [pc, #300]	; (8004868 <led_render+0x150>)
 800473c:	2100      	movs	r1, #0
 800473e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	3301      	adds	r3, #1
 8004746:	71fb      	strb	r3, [r7, #7]
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	2b2f      	cmp	r3, #47	; 0x2f
 800474c:	d9f4      	bls.n	8004738 <led_render+0x20>
    wr_buf_p = 0;
 800474e:	4b44      	ldr	r3, [pc, #272]	; (8004860 <led_render+0x148>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8004754:	2100      	movs	r1, #0
 8004756:	4845      	ldr	r0, [pc, #276]	; (800486c <led_render+0x154>)
 8004758:	f004 f848 	bl	80087ec <HAL_TIM_PWM_Stop_DMA>
    return;
 800475c:	e07c      	b.n	8004858 <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800475e:	2300      	movs	r3, #0
 8004760:	603b      	str	r3, [r7, #0]
 8004762:	e06d      	b.n	8004840 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8004764:	4b42      	ldr	r3, [pc, #264]	; (8004870 <led_render+0x158>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	dd01      	ble.n	800477c <led_render+0x64>
 8004778:	2150      	movs	r1, #80	; 0x50
 800477a:	e000      	b.n	800477e <led_render+0x66>
 800477c:	2128      	movs	r1, #40	; 0x28
 800477e:	4a3a      	ldr	r2, [pc, #232]	; (8004868 <led_render+0x150>)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8004786:	4b3a      	ldr	r3, [pc, #232]	; (8004870 <led_render+0x158>)
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	461a      	mov	r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	dd01      	ble.n	800479e <led_render+0x86>
 800479a:	2150      	movs	r1, #80	; 0x50
 800479c:	e000      	b.n	80047a0 <led_render+0x88>
 800479e:	2128      	movs	r1, #40	; 0x28
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	4a30      	ldr	r2, [pc, #192]	; (8004868 <led_render+0x150>)
 80047a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 80047aa:	4b31      	ldr	r3, [pc, #196]	; (8004870 <led_render+0x158>)
 80047ac:	789b      	ldrb	r3, [r3, #2]
 80047ae:	461a      	mov	r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	dd01      	ble.n	80047c2 <led_render+0xaa>
 80047be:	2150      	movs	r1, #80	; 0x50
 80047c0:	e000      	b.n	80047c4 <led_render+0xac>
 80047c2:	2128      	movs	r1, #40	; 0x28
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	3310      	adds	r3, #16
 80047c8:	4a27      	ldr	r2, [pc, #156]	; (8004868 <led_render+0x150>)
 80047ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 80047ce:	4b28      	ldr	r3, [pc, #160]	; (8004870 <led_render+0x158>)
 80047d0:	78db      	ldrb	r3, [r3, #3]
 80047d2:	461a      	mov	r2, r3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	dd01      	ble.n	80047e6 <led_render+0xce>
 80047e2:	2150      	movs	r1, #80	; 0x50
 80047e4:	e000      	b.n	80047e8 <led_render+0xd0>
 80047e6:	2128      	movs	r1, #40	; 0x28
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	3318      	adds	r3, #24
 80047ec:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <led_render+0x150>)
 80047ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 80047f2:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <led_render+0x158>)
 80047f4:	791b      	ldrb	r3, [r3, #4]
 80047f6:	461a      	mov	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004802:	2b00      	cmp	r3, #0
 8004804:	dd01      	ble.n	800480a <led_render+0xf2>
 8004806:	2150      	movs	r1, #80	; 0x50
 8004808:	e000      	b.n	800480c <led_render+0xf4>
 800480a:	2128      	movs	r1, #40	; 0x28
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	3320      	adds	r3, #32
 8004810:	4a15      	ldr	r2, [pc, #84]	; (8004868 <led_render+0x150>)
 8004812:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <led_render+0x158>)
 8004818:	795b      	ldrb	r3, [r3, #5]
 800481a:	461a      	mov	r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	dd01      	ble.n	800482e <led_render+0x116>
 800482a:	2150      	movs	r1, #80	; 0x50
 800482c:	e000      	b.n	8004830 <led_render+0x118>
 800482e:	2128      	movs	r1, #40	; 0x28
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	3328      	adds	r3, #40	; 0x28
 8004834:	4a0c      	ldr	r2, [pc, #48]	; (8004868 <led_render+0x150>)
 8004836:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b07      	cmp	r3, #7
 8004844:	d98e      	bls.n	8004764 <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 8004846:	2330      	movs	r3, #48	; 0x30
 8004848:	4a07      	ldr	r2, [pc, #28]	; (8004868 <led_render+0x150>)
 800484a:	2100      	movs	r1, #0
 800484c:	4807      	ldr	r0, [pc, #28]	; (800486c <led_render+0x154>)
 800484e:	f003 fe1d 	bl	800848c <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8004852:	4b03      	ldr	r3, [pc, #12]	; (8004860 <led_render+0x148>)
 8004854:	2202      	movs	r2, #2
 8004856:	601a      	str	r2, [r3, #0]
}
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000b04 	.word	0x20000b04
 8004864:	200006c0 	.word	0x200006c0
 8004868:	20000aa4 	.word	0x20000aa4
 800486c:	20000630 	.word	0x20000630
 8004870:	200008f4 	.word	0x200008f4

08004874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 800487c:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b8f      	cmp	r3, #143	; 0x8f
 8004882:	d854      	bhi.n	800492e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e048      	b.n	800491c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4413      	add	r3, r2
 8004894:	4a35      	ldr	r2, [pc, #212]	; (800496c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8004896:	5cd3      	ldrb	r3, [r2, r3]
 8004898:	461a      	mov	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	dd01      	ble.n	80048ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 80048a8:	2150      	movs	r1, #80	; 0x50
 80048aa:	e000      	b.n	80048ae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 80048ac:	2128      	movs	r1, #40	; 0x28
 80048ae:	4a30      	ldr	r2, [pc, #192]	; (8004970 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80048b6:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a2a      	ldr	r2, [pc, #168]	; (800496c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80048c4:	5cd3      	ldrb	r3, [r2, r3]
 80048c6:	461a      	mov	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	dd01      	ble.n	80048da <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 80048d6:	2150      	movs	r1, #80	; 0x50
 80048d8:	e000      	b.n	80048dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 80048da:	2128      	movs	r1, #40	; 0x28
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3308      	adds	r3, #8
 80048e0:	4a23      	ldr	r2, [pc, #140]	; (8004970 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80048e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	3302      	adds	r3, #2
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80048f4:	5cd3      	ldrb	r3, [r2, r3]
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b00      	cmp	r3, #0
 8004904:	dd01      	ble.n	800490a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8004906:	2150      	movs	r1, #80	; 0x50
 8004908:	e000      	b.n	800490c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800490a:	2128      	movs	r1, #40	; 0x28
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3310      	adds	r3, #16
 8004910:	4a17      	ldr	r2, [pc, #92]	; (8004970 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8004912:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3301      	adds	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b07      	cmp	r3, #7
 8004920:	d9b3      	bls.n	800488a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3301      	adds	r3, #1
 8004928:	4a0f      	ldr	r2, [pc, #60]	; (8004968 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800492a:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 800492c:	e016      	b.n	800495c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 800492e:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b91      	cmp	r3, #145	; 0x91
 8004934:	d812      	bhi.n	800495c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	72fb      	strb	r3, [r7, #11]
 800493a:	e007      	b.n	800494c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 800493c:	7afb      	ldrb	r3, [r7, #11]
 800493e:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8004940:	2100      	movs	r1, #0
 8004942:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004946:	7afb      	ldrb	r3, [r7, #11]
 8004948:	3301      	adds	r3, #1
 800494a:	72fb      	strb	r3, [r7, #11]
 800494c:	7afb      	ldrb	r3, [r7, #11]
 800494e:	2b17      	cmp	r3, #23
 8004950:	d9f4      	bls.n	800493c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3301      	adds	r3, #1
 8004958:	4a03      	ldr	r2, [pc, #12]	; (8004968 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800495a:	6013      	str	r3, [r2, #0]
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	20000b04 	.word	0x20000b04
 800496c:	200008f4 	.word	0x200008f4
 8004970:	20000aa4 	.word	0x20000aa4

08004974 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 800497c:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b8f      	cmp	r3, #143	; 0x8f
 8004982:	d855      	bhi.n	8004a30 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e049      	b.n	8004a1e <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800498a:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	4a39      	ldr	r2, [pc, #228]	; (8004a7c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	461a      	mov	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dd01      	ble.n	80049ac <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 80049a8:	2150      	movs	r1, #80	; 0x50
 80049aa:	e000      	b.n	80049ae <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 80049ac:	2128      	movs	r1, #40	; 0x28
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3318      	adds	r3, #24
 80049b2:	4a33      	ldr	r2, [pc, #204]	; (8004a80 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80049b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80049b8:	4b2f      	ldr	r3, [pc, #188]	; (8004a78 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4413      	add	r3, r2
 80049c2:	3301      	adds	r3, #1
 80049c4:	4a2d      	ldr	r2, [pc, #180]	; (8004a7c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80049c6:	5cd3      	ldrb	r3, [r2, r3]
 80049c8:	461a      	mov	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dd01      	ble.n	80049dc <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 80049d8:	2150      	movs	r1, #80	; 0x50
 80049da:	e000      	b.n	80049de <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 80049dc:	2128      	movs	r1, #40	; 0x28
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3320      	adds	r3, #32
 80049e2:	4a27      	ldr	r2, [pc, #156]	; (8004a80 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80049e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80049e8:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4613      	mov	r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	4413      	add	r3, r2
 80049f2:	3302      	adds	r3, #2
 80049f4:	4a21      	ldr	r2, [pc, #132]	; (8004a7c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80049f6:	5cd3      	ldrb	r3, [r2, r3]
 80049f8:	461a      	mov	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	dd01      	ble.n	8004a0c <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8004a08:	2150      	movs	r1, #80	; 0x50
 8004a0a:	e000      	b.n	8004a0e <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8004a0c:	2128      	movs	r1, #40	; 0x28
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3328      	adds	r3, #40	; 0x28
 8004a12:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8004a14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b07      	cmp	r3, #7
 8004a22:	d9b2      	bls.n	800498a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 8004a24:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004a2c:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 8004a2e:	e01e      	b.n	8004a6e <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b91      	cmp	r3, #145	; 0x91
 8004a36:	d813      	bhi.n	8004a60 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8004a38:	2318      	movs	r3, #24
 8004a3a:	72fb      	strb	r3, [r7, #11]
 8004a3c:	e007      	b.n	8004a4e <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
 8004a40:	4a0f      	ldr	r2, [pc, #60]	; (8004a80 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8004a42:	2100      	movs	r1, #0
 8004a44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004a48:	7afb      	ldrb	r3, [r7, #11]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	72fb      	strb	r3, [r7, #11]
 8004a4e:	7afb      	ldrb	r3, [r7, #11]
 8004a50:	2b2f      	cmp	r3, #47	; 0x2f
 8004a52:	d9f4      	bls.n	8004a3e <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 8004a54:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	4a07      	ldr	r2, [pc, #28]	; (8004a78 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004a5c:	6013      	str	r3, [r2, #0]
}
 8004a5e:	e006      	b.n	8004a6e <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8004a66:	2100      	movs	r1, #0
 8004a68:	4806      	ldr	r0, [pc, #24]	; (8004a84 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8004a6a:	f003 febf 	bl	80087ec <HAL_TIM_PWM_Stop_DMA>
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000b04 	.word	0x20000b04
 8004a7c:	200008f4 	.word	0x200008f4
 8004a80:	20000aa4 	.word	0x20000aa4
 8004a84:	20000630 	.word	0x20000630

08004a88 <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
 8004a92:	460b      	mov	r3, r1
 8004a94:	71bb      	strb	r3, [r7, #6]
 8004a96:	4613      	mov	r3, r2
 8004a98:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8004a9a:	797b      	ldrb	r3, [r7, #5]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <hsl_to_rgb+0x1c>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e0b1      	b.n	8004c08 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8004aa4:	797b      	ldrb	r3, [r7, #5]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8004aae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	db09      	blt.n	8004aca <hsl_to_rgb+0x42>
 8004ab6:	89bb      	ldrh	r3, [r7, #12]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	79ba      	ldrb	r2, [r7, #6]
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	121b      	asrs	r3, r3, #8
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	74fb      	strb	r3, [r7, #19]
 8004ac8:	e00a      	b.n	8004ae0 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8004aca:	89bb      	ldrh	r3, [r7, #12]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004ad4:	79ba      	ldrb	r2, [r7, #6]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	121b      	asrs	r3, r3, #8
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	0052      	lsls	r2, r2, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8004af0:	897b      	ldrh	r3, [r7, #10]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8004af8:	7d3b      	ldrb	r3, [r7, #20]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3301      	adds	r3, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8004b04:	897b      	ldrh	r3, [r7, #10]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <hsl_to_rgb+0x9c>
 8004b10:	89fb      	ldrh	r3, [r7, #14]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	7cfa      	ldrb	r2, [r7, #19]
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	fb02 f303 	mul.w	r3, r2, r3
 8004b1c:	121b      	asrs	r3, r3, #8
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	74bb      	strb	r3, [r7, #18]
 8004b22:	e00a      	b.n	8004b3a <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8004b24:	89fb      	ldrh	r3, [r7, #14]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004b2c:	7cfa      	ldrb	r2, [r7, #19]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	121b      	asrs	r3, r3, #8
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	797a      	ldrb	r2, [r7, #5]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8004b4a:	897b      	ldrh	r3, [r7, #10]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d839      	bhi.n	8004bca <hsl_to_rgb+0x142>
 8004b56:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <hsl_to_rgb+0xd4>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004b71 	.word	0x08004b71
 8004b60:	08004b83 	.word	0x08004b83
 8004b64:	08004b95 	.word	0x08004b95
 8004b68:	08004ba7 	.word	0x08004ba7
 8004b6c:	08004bb9 	.word	0x08004bb9
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	75fb      	strb	r3, [r7, #23]
 8004b76:	7cbb      	ldrb	r3, [r7, #18]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	75bb      	strb	r3, [r7, #22]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	757b      	strb	r3, [r7, #21]
 8004b80:	e02c      	b.n	8004bdc <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8004b82:	7cbb      	ldrb	r3, [r7, #18]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	75fb      	strb	r3, [r7, #23]
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	75bb      	strb	r3, [r7, #22]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	757b      	strb	r3, [r7, #21]
 8004b92:	e023      	b.n	8004bdc <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8004b94:	2300      	movs	r3, #0
 8004b96:	75fb      	strb	r3, [r7, #23]
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	75bb      	strb	r3, [r7, #22]
 8004b9e:	7cbb      	ldrb	r3, [r7, #18]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	757b      	strb	r3, [r7, #21]
 8004ba4:	e01a      	b.n	8004bdc <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	75fb      	strb	r3, [r7, #23]
 8004baa:	7cbb      	ldrb	r3, [r7, #18]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	75bb      	strb	r3, [r7, #22]
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	757b      	strb	r3, [r7, #21]
 8004bb6:	e011      	b.n	8004bdc <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8004bb8:	7cbb      	ldrb	r3, [r7, #18]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	75fb      	strb	r3, [r7, #23]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	75bb      	strb	r3, [r7, #22]
 8004bc2:	7cfb      	ldrb	r3, [r7, #19]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	757b      	strb	r3, [r7, #21]
 8004bc8:	e008      	b.n	8004bdc <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8004bca:	7cfb      	ldrb	r3, [r7, #19]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	75fb      	strb	r3, [r7, #23]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	75bb      	strb	r3, [r7, #22]
 8004bd4:	7cbb      	ldrb	r3, [r7, #18]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	757b      	strb	r3, [r7, #21]
 8004bda:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	7c7b      	ldrb	r3, [r7, #17]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	041a      	lsls	r2, r3, #16
 8004bea:	7dbb      	ldrb	r3, [r7, #22]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	4619      	mov	r1, r3
 8004bf0:	7c7b      	ldrb	r3, [r7, #17]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	440b      	add	r3, r1
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	7d7b      	ldrb	r3, [r7, #21]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	4619      	mov	r1, r3
 8004c00:	7c7b      	ldrb	r3, [r7, #17]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	440b      	add	r3, r1
 8004c06:	4313      	orrs	r3, r2
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c18:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <HAL_Init+0x40>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a0d      	ldr	r2, [pc, #52]	; (8004c54 <HAL_Init+0x40>)
 8004c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_Init+0x40>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <HAL_Init+0x40>)
 8004c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c30:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_Init+0x40>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <HAL_Init+0x40>)
 8004c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c3c:	2003      	movs	r0, #3
 8004c3e:	f000 f94f 	bl	8004ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c42:	200f      	movs	r0, #15
 8004c44:	f000 f808 	bl	8004c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c48:	f7ff f82a 	bl	8003ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40023c00 	.word	0x40023c00

08004c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c60:	4b12      	ldr	r3, [pc, #72]	; (8004cac <HAL_InitTick+0x54>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <HAL_InitTick+0x58>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f967 	bl	8004f4a <HAL_SYSTICK_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e00e      	b.n	8004ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b0f      	cmp	r3, #15
 8004c8a:	d80a      	bhi.n	8004ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295
 8004c94:	f000 f92f 	bl	8004ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c98:	4a06      	ldr	r2, [pc, #24]	; (8004cb4 <HAL_InitTick+0x5c>)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	200001f8 	.word	0x200001f8
 8004cb0:	20000298 	.word	0x20000298
 8004cb4:	20000294 	.word	0x20000294

08004cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_IncTick+0x20>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_IncTick+0x24>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <HAL_IncTick+0x24>)
 8004cca:	6013      	str	r3, [r2, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000298 	.word	0x20000298
 8004cdc:	20000b08 	.word	0x20000b08

08004ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <HAL_GetTick+0x14>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000b08 	.word	0x20000b08

08004cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d00:	f7ff ffee 	bl	8004ce0 <HAL_GetTick>
 8004d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d005      	beq.n	8004d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <HAL_Delay+0x44>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d1e:	bf00      	nop
 8004d20:	f7ff ffde 	bl	8004ce0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d8f7      	bhi.n	8004d20 <HAL_Delay+0x28>
  {
  }
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000298 	.word	0x20000298

08004d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <__NVIC_SetPriorityGrouping+0x44>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d72:	4a04      	ldr	r2, [pc, #16]	; (8004d84 <__NVIC_SetPriorityGrouping+0x44>)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	60d3      	str	r3, [r2, #12]
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	e000ed00 	.word	0xe000ed00

08004d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <__NVIC_GetPriorityGrouping+0x18>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	f003 0307 	and.w	r3, r3, #7
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	e000ed00 	.word	0xe000ed00

08004da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	db0b      	blt.n	8004dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	f003 021f 	and.w	r2, r3, #31
 8004dbc:	4907      	ldr	r1, [pc, #28]	; (8004ddc <__NVIC_EnableIRQ+0x38>)
 8004dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	e000e100 	.word	0xe000e100

08004de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	db0a      	blt.n	8004e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	490c      	ldr	r1, [pc, #48]	; (8004e2c <__NVIC_SetPriority+0x4c>)
 8004dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfe:	0112      	lsls	r2, r2, #4
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	440b      	add	r3, r1
 8004e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e08:	e00a      	b.n	8004e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	4908      	ldr	r1, [pc, #32]	; (8004e30 <__NVIC_SetPriority+0x50>)
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	3b04      	subs	r3, #4
 8004e18:	0112      	lsls	r2, r2, #4
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	761a      	strb	r2, [r3, #24]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	e000e100 	.word	0xe000e100
 8004e30:	e000ed00 	.word	0xe000ed00

08004e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b089      	sub	sp, #36	; 0x24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f1c3 0307 	rsb	r3, r3, #7
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	bf28      	it	cs
 8004e52:	2304      	movcs	r3, #4
 8004e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	2b06      	cmp	r3, #6
 8004e5c:	d902      	bls.n	8004e64 <NVIC_EncodePriority+0x30>
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3b03      	subs	r3, #3
 8004e62:	e000      	b.n	8004e66 <NVIC_EncodePriority+0x32>
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	43da      	mvns	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	401a      	ands	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	fa01 f303 	lsl.w	r3, r1, r3
 8004e86:	43d9      	mvns	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e8c:	4313      	orrs	r3, r2
         );
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3724      	adds	r7, #36	; 0x24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004eac:	d301      	bcc.n	8004eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e00f      	b.n	8004ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eb2:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <SysTick_Config+0x40>)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eba:	210f      	movs	r1, #15
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	f7ff ff8e 	bl	8004de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <SysTick_Config+0x40>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eca:	4b04      	ldr	r3, [pc, #16]	; (8004edc <SysTick_Config+0x40>)
 8004ecc:	2207      	movs	r2, #7
 8004ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	e000e010 	.word	0xe000e010

08004ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff ff29 	bl	8004d40 <__NVIC_SetPriorityGrouping>
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b086      	sub	sp, #24
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	4603      	mov	r3, r0
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f08:	f7ff ff3e 	bl	8004d88 <__NVIC_GetPriorityGrouping>
 8004f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	6978      	ldr	r0, [r7, #20]
 8004f14:	f7ff ff8e 	bl	8004e34 <NVIC_EncodePriority>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff ff5d 	bl	8004de0 <__NVIC_SetPriority>
}
 8004f26:	bf00      	nop
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	4603      	mov	r3, r0
 8004f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff ff31 	bl	8004da4 <__NVIC_EnableIRQ>
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff ffa2 	bl	8004e9c <SysTick_Config>
 8004f58:	4603      	mov	r3, r0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e00e      	b.n	8004f92 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	795b      	ldrb	r3, [r3, #5]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d105      	bne.n	8004f8a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7fe fbab 	bl	80036e0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b087      	sub	sp, #28
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2202      	movs	r2, #2
 8004fae:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e00a      	b.n	8004fdc <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	441a      	add	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d3f0      	bcc.n	8004fc6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004ff2:	693b      	ldr	r3, [r7, #16]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800500c:	f7ff fe68 	bl	8004ce0 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e099      	b.n	8005150 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800503c:	e00f      	b.n	800505e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800503e:	f7ff fe4f 	bl	8004ce0 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b05      	cmp	r3, #5
 800504a:	d908      	bls.n	800505e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2203      	movs	r2, #3
 8005056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e078      	b.n	8005150 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e8      	bne.n	800503e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4b38      	ldr	r3, [pc, #224]	; (8005158 <HAL_DMA_Init+0x158>)
 8005078:	4013      	ands	r3, r2
 800507a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800508a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d107      	bne.n	80050c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	4313      	orrs	r3, r2
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0307 	bic.w	r3, r3, #7
 80050de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d117      	bne.n	8005122 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00e      	beq.n	8005122 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fb01 	bl	800570c <DMA_CheckFifoParam>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2240      	movs	r2, #64	; 0x40
 8005114:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800511e:	2301      	movs	r3, #1
 8005120:	e016      	b.n	8005150 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fab8 	bl	80056a0 <DMA_CalcBaseAndBitshift>
 8005130:	4603      	mov	r3, r0
 8005132:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005138:	223f      	movs	r2, #63	; 0x3f
 800513a:	409a      	lsls	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	f010803f 	.word	0xf010803f

0800515c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005172:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_DMA_Start_IT+0x26>
 800517e:	2302      	movs	r3, #2
 8005180:	e040      	b.n	8005204 <HAL_DMA_Start_IT+0xa8>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	d12f      	bne.n	80051f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fa4a 	bl	8005644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b4:	223f      	movs	r2, #63	; 0x3f
 80051b6:	409a      	lsls	r2, r3
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0216 	orr.w	r2, r2, #22
 80051ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0208 	orr.w	r2, r2, #8
 80051e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e005      	b.n	8005202 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051fe:	2302      	movs	r3, #2
 8005200:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005202:	7dfb      	ldrb	r3, [r7, #23]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005218:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800521a:	f7ff fd61 	bl	8004ce0 <HAL_GetTick>
 800521e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d008      	beq.n	800523e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2280      	movs	r2, #128	; 0x80
 8005230:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e052      	b.n	80052e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0216 	bic.w	r2, r2, #22
 800524c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695a      	ldr	r2, [r3, #20]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800525c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <HAL_DMA_Abort+0x62>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0208 	bic.w	r2, r2, #8
 800527c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800528e:	e013      	b.n	80052b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005290:	f7ff fd26 	bl	8004ce0 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b05      	cmp	r3, #5
 800529c:	d90c      	bls.n	80052b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2203      	movs	r2, #3
 80052a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e015      	b.n	80052e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e4      	bne.n	8005290 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ca:	223f      	movs	r2, #63	; 0x3f
 80052cc:	409a      	lsls	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d004      	beq.n	800530a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2280      	movs	r2, #128	; 0x80
 8005304:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e00c      	b.n	8005324 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2205      	movs	r2, #5
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800533c:	4b8e      	ldr	r3, [pc, #568]	; (8005578 <HAL_DMA_IRQHandler+0x248>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a8e      	ldr	r2, [pc, #568]	; (800557c <HAL_DMA_IRQHandler+0x24c>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	0a9b      	lsrs	r3, r3, #10
 8005348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535a:	2208      	movs	r2, #8
 800535c:	409a      	lsls	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01a      	beq.n	800539c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	2208      	movs	r2, #8
 800538a:	409a      	lsls	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f043 0201 	orr.w	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a0:	2201      	movs	r2, #1
 80053a2:	409a      	lsls	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d012      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053be:	2201      	movs	r2, #1
 80053c0:	409a      	lsls	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f043 0202 	orr.w	r2, r3, #2
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d6:	2204      	movs	r2, #4
 80053d8:	409a      	lsls	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4013      	ands	r3, r2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d012      	beq.n	8005408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f4:	2204      	movs	r2, #4
 80053f6:	409a      	lsls	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005400:	f043 0204 	orr.w	r2, r3, #4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540c:	2210      	movs	r2, #16
 800540e:	409a      	lsls	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4013      	ands	r3, r2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d043      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d03c      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542a:	2210      	movs	r2, #16
 800542c:	409a      	lsls	r2, r3
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d018      	beq.n	8005472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d108      	bne.n	8005460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d024      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4798      	blx	r3
 800545e:	e01f      	b.n	80054a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01b      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
 8005470:	e016      	b.n	80054a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0208 	bic.w	r2, r2, #8
 800548e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a4:	2220      	movs	r2, #32
 80054a6:	409a      	lsls	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 808f 	beq.w	80055d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8087 	beq.w	80055d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c6:	2220      	movs	r2, #32
 80054c8:	409a      	lsls	r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d136      	bne.n	8005548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0216 	bic.w	r2, r2, #22
 80054e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <HAL_DMA_IRQHandler+0x1da>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0208 	bic.w	r2, r2, #8
 8005518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551e:	223f      	movs	r2, #63	; 0x3f
 8005520:	409a      	lsls	r2, r3
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553a:	2b00      	cmp	r3, #0
 800553c:	d07e      	beq.n	800563c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
        }
        return;
 8005546:	e079      	b.n	800563c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01d      	beq.n	8005592 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	2b00      	cmp	r3, #0
 800556a:	d031      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
 8005574:	e02c      	b.n	80055d0 <HAL_DMA_IRQHandler+0x2a0>
 8005576:	bf00      	nop
 8005578:	200001f8 	.word	0x200001f8
 800557c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d023      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4798      	blx	r3
 8005590:	e01e      	b.n	80055d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10f      	bne.n	80055c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0210 	bic.w	r2, r2, #16
 80055ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d032      	beq.n	800563e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d022      	beq.n	800562a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2205      	movs	r2, #5
 80055e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	3301      	adds	r3, #1
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	429a      	cmp	r2, r3
 8005606:	d307      	bcc.n	8005618 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f2      	bne.n	80055fc <HAL_DMA_IRQHandler+0x2cc>
 8005616:	e000      	b.n	800561a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005618:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	4798      	blx	r3
 800563a:	e000      	b.n	800563e <HAL_DMA_IRQHandler+0x30e>
        return;
 800563c:	bf00      	nop
    }
  }
}
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d108      	bne.n	8005684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005682:	e007      	b.n	8005694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	60da      	str	r2, [r3, #12]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	3b10      	subs	r3, #16
 80056b0:	4a14      	ldr	r2, [pc, #80]	; (8005704 <DMA_CalcBaseAndBitshift+0x64>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	091b      	lsrs	r3, r3, #4
 80056b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056ba:	4a13      	ldr	r2, [pc, #76]	; (8005708 <DMA_CalcBaseAndBitshift+0x68>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d909      	bls.n	80056e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	1d1a      	adds	r2, r3, #4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	659a      	str	r2, [r3, #88]	; 0x58
 80056e0:	e007      	b.n	80056f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056ea:	f023 0303 	bic.w	r3, r3, #3
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	aaaaaaab 	.word	0xaaaaaaab
 8005708:	0800f74c 	.word	0x0800f74c

0800570c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11f      	bne.n	8005766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d856      	bhi.n	80057da <DMA_CheckFifoParam+0xce>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <DMA_CheckFifoParam+0x28>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005745 	.word	0x08005745
 8005738:	08005757 	.word	0x08005757
 800573c:	08005745 	.word	0x08005745
 8005740:	080057db 	.word	0x080057db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d046      	beq.n	80057de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005754:	e043      	b.n	80057de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800575e:	d140      	bne.n	80057e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005764:	e03d      	b.n	80057e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576e:	d121      	bne.n	80057b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d837      	bhi.n	80057e6 <DMA_CheckFifoParam+0xda>
 8005776:	a201      	add	r2, pc, #4	; (adr r2, 800577c <DMA_CheckFifoParam+0x70>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	0800578d 	.word	0x0800578d
 8005780:	08005793 	.word	0x08005793
 8005784:	0800578d 	.word	0x0800578d
 8005788:	080057a5 	.word	0x080057a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      break;
 8005790:	e030      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d025      	beq.n	80057ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a2:	e022      	b.n	80057ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057ac:	d11f      	bne.n	80057ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057b2:	e01c      	b.n	80057ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d903      	bls.n	80057c2 <DMA_CheckFifoParam+0xb6>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d003      	beq.n	80057c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057c0:	e018      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
      break;
 80057c6:	e015      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00e      	beq.n	80057f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]
      break;
 80057d8:	e00b      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
      break;
 80057da:	bf00      	nop
 80057dc:	e00a      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;
 80057de:	bf00      	nop
 80057e0:	e008      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;
 80057e2:	bf00      	nop
 80057e4:	e006      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;
 80057e6:	bf00      	nop
 80057e8:	e004      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;
 80057ea:	bf00      	nop
 80057ec:	e002      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80057ee:	bf00      	nop
 80057f0:	e000      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;
 80057f2:	bf00      	nop
    }
  } 
  
  return status; 
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop

08005804 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005816:	4b23      	ldr	r3, [pc, #140]	; (80058a4 <HAL_FLASH_Program+0xa0>)
 8005818:	7e1b      	ldrb	r3, [r3, #24]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_FLASH_Program+0x1e>
 800581e:	2302      	movs	r3, #2
 8005820:	e03b      	b.n	800589a <HAL_FLASH_Program+0x96>
 8005822:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <HAL_FLASH_Program+0xa0>)
 8005824:	2201      	movs	r2, #1
 8005826:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005828:	f24c 3050 	movw	r0, #50000	; 0xc350
 800582c:	f000 f87c 	bl	8005928 <FLASH_WaitForLastOperation>
 8005830:	4603      	mov	r3, r0
 8005832:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d12b      	bne.n	8005892 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005840:	783b      	ldrb	r3, [r7, #0]
 8005842:	4619      	mov	r1, r3
 8005844:	68b8      	ldr	r0, [r7, #8]
 8005846:	f000 f927 	bl	8005a98 <FLASH_Program_Byte>
 800584a:	e016      	b.n	800587a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005852:	883b      	ldrh	r3, [r7, #0]
 8005854:	4619      	mov	r1, r3
 8005856:	68b8      	ldr	r0, [r7, #8]
 8005858:	f000 f8fa 	bl	8005a50 <FLASH_Program_HalfWord>
 800585c:	e00d      	b.n	800587a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d105      	bne.n	8005870 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	4619      	mov	r1, r3
 8005868:	68b8      	ldr	r0, [r7, #8]
 800586a:	f000 f8cf 	bl	8005a0c <FLASH_Program_Word>
 800586e:	e004      	b.n	800587a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005874:	68b8      	ldr	r0, [r7, #8]
 8005876:	f000 f897 	bl	80059a8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800587a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800587e:	f000 f853 	bl	8005928 <FLASH_WaitForLastOperation>
 8005882:	4603      	mov	r3, r0
 8005884:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <HAL_FLASH_Program+0xa4>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	4a07      	ldr	r2, [pc, #28]	; (80058a8 <HAL_FLASH_Program+0xa4>)
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005892:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <HAL_FLASH_Program+0xa0>)
 8005894:	2200      	movs	r2, #0
 8005896:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005898:	7dfb      	ldrb	r3, [r7, #23]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000b0c 	.word	0x20000b0c
 80058a8:	40023c00 	.word	0x40023c00

080058ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <HAL_FLASH_Unlock+0x38>)
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da0b      	bge.n	80058d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <HAL_FLASH_Unlock+0x38>)
 80058c0:	4a09      	ldr	r2, [pc, #36]	; (80058e8 <HAL_FLASH_Unlock+0x3c>)
 80058c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <HAL_FLASH_Unlock+0x38>)
 80058c6:	4a09      	ldr	r2, [pc, #36]	; (80058ec <HAL_FLASH_Unlock+0x40>)
 80058c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <HAL_FLASH_Unlock+0x38>)
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	da01      	bge.n	80058d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80058d6:	79fb      	ldrb	r3, [r7, #7]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	40023c00 	.word	0x40023c00
 80058e8:	45670123 	.word	0x45670123
 80058ec:	cdef89ab 	.word	0xcdef89ab

080058f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_FLASH_Lock+0x1c>)
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	4a04      	ldr	r2, [pc, #16]	; (800590c <HAL_FLASH_Lock+0x1c>)
 80058fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	40023c00 	.word	0x40023c00

08005910 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005914:	4b03      	ldr	r3, [pc, #12]	; (8005924 <HAL_FLASH_GetError+0x14>)
 8005916:	69db      	ldr	r3, [r3, #28]
}  
 8005918:	4618      	mov	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20000b0c 	.word	0x20000b0c

08005928 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <FLASH_WaitForLastOperation+0x78>)
 8005936:	2200      	movs	r2, #0
 8005938:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800593a:	f7ff f9d1 	bl	8004ce0 <HAL_GetTick>
 800593e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005940:	e010      	b.n	8005964 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005948:	d00c      	beq.n	8005964 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <FLASH_WaitForLastOperation+0x38>
 8005950:	f7ff f9c6 	bl	8004ce0 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d201      	bcs.n	8005964 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e019      	b.n	8005998 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <FLASH_WaitForLastOperation+0x7c>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e8      	bne.n	8005942 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <FLASH_WaitForLastOperation+0x7c>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800597c:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <FLASH_WaitForLastOperation+0x7c>)
 800597e:	2201      	movs	r2, #1
 8005980:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <FLASH_WaitForLastOperation+0x7c>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800598e:	f000 f8a5 	bl	8005adc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
  
}  
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000b0c 	.word	0x20000b0c
 80059a4:	40023c00 	.word	0x40023c00

080059a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80059b4:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <FLASH_Program_DoubleWord+0x60>)
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <FLASH_Program_DoubleWord+0x60>)
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80059c0:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <FLASH_Program_DoubleWord+0x60>)
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	4a10      	ldr	r2, [pc, #64]	; (8005a08 <FLASH_Program_DoubleWord+0x60>)
 80059c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80059ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <FLASH_Program_DoubleWord+0x60>)
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	4a0d      	ldr	r2, [pc, #52]	; (8005a08 <FLASH_Program_DoubleWord+0x60>)
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80059de:	f3bf 8f6f 	isb	sy
}
 80059e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80059e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	000a      	movs	r2, r1
 80059f2:	2300      	movs	r3, #0
 80059f4:	68f9      	ldr	r1, [r7, #12]
 80059f6:	3104      	adds	r1, #4
 80059f8:	4613      	mov	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	40023c00 	.word	0x40023c00

08005a0c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a16:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <FLASH_Program_Word+0x40>)
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <FLASH_Program_Word+0x40>)
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <FLASH_Program_Word+0x40>)
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <FLASH_Program_Word+0x40>)
 8005a28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <FLASH_Program_Word+0x40>)
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	4a06      	ldr	r2, [pc, #24]	; (8005a4c <FLASH_Program_Word+0x40>)
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	601a      	str	r2, [r3, #0]
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	40023c00 	.word	0x40023c00

08005a50 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a5c:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <FLASH_Program_HalfWord+0x44>)
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <FLASH_Program_HalfWord+0x44>)
 8005a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <FLASH_Program_HalfWord+0x44>)
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <FLASH_Program_HalfWord+0x44>)
 8005a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005a74:	4b07      	ldr	r3, [pc, #28]	; (8005a94 <FLASH_Program_HalfWord+0x44>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	4a06      	ldr	r2, [pc, #24]	; (8005a94 <FLASH_Program_HalfWord+0x44>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	887a      	ldrh	r2, [r7, #2]
 8005a84:	801a      	strh	r2, [r3, #0]
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40023c00 	.word	0x40023c00

08005a98 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <FLASH_Program_Byte+0x40>)
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	4a0b      	ldr	r2, [pc, #44]	; (8005ad8 <FLASH_Program_Byte+0x40>)
 8005aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <FLASH_Program_Byte+0x40>)
 8005ab2:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <FLASH_Program_Byte+0x40>)
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ab8:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <FLASH_Program_Byte+0x40>)
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	4a06      	ldr	r2, [pc, #24]	; (8005ad8 <FLASH_Program_Byte+0x40>)
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	78fa      	ldrb	r2, [r7, #3]
 8005ac8:	701a      	strb	r2, [r3, #0]
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40023c00 	.word	0x40023c00

08005adc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005ae0:	4b2f      	ldr	r3, [pc, #188]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005aec:	4b2d      	ldr	r3, [pc, #180]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f043 0310 	orr.w	r3, r3, #16
 8005af4:	4a2b      	ldr	r2, [pc, #172]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005af6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005af8:	4b29      	ldr	r3, [pc, #164]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005afa:	2210      	movs	r2, #16
 8005afc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005afe:	4b28      	ldr	r3, [pc, #160]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005b0a:	4b26      	ldr	r3, [pc, #152]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f043 0308 	orr.w	r3, r3, #8
 8005b12:	4a24      	ldr	r2, [pc, #144]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005b14:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005b16:	4b22      	ldr	r3, [pc, #136]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005b18:	2220      	movs	r2, #32
 8005b1a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005b1c:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005b28:	4b1e      	ldr	r3, [pc, #120]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	f043 0304 	orr.w	r3, r3, #4
 8005b30:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005b32:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005b34:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005b36:	2240      	movs	r2, #64	; 0x40
 8005b38:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005b3a:	4b19      	ldr	r3, [pc, #100]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d008      	beq.n	8005b58 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005b46:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f043 0302 	orr.w	r3, r3, #2
 8005b4e:	4a15      	ldr	r2, [pc, #84]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005b50:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005b52:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005b54:	2280      	movs	r2, #128	; 0x80
 8005b56:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005b58:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d009      	beq.n	8005b78 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005b64:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005b6e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b76:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005b78:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f043 0320 	orr.w	r3, r3, #32
 8005b8c:	4a05      	ldr	r2, [pc, #20]	; (8005ba4 <FLASH_SetErrorCode+0xc8>)
 8005b8e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <FLASH_SetErrorCode+0xc4>)
 8005b92:	2202      	movs	r2, #2
 8005b94:	60da      	str	r2, [r3, #12]
  }
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	40023c00 	.word	0x40023c00
 8005ba4:	20000b0c 	.word	0x20000b0c

08005ba8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005bba:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <HAL_FLASHEx_Erase+0xd8>)
 8005bbc:	7e1b      	ldrb	r3, [r3, #24]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d101      	bne.n	8005bc6 <HAL_FLASHEx_Erase+0x1e>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e058      	b.n	8005c78 <HAL_FLASHEx_Erase+0xd0>
 8005bc6:	4b2e      	ldr	r3, [pc, #184]	; (8005c80 <HAL_FLASHEx_Erase+0xd8>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bd0:	f7ff feaa 	bl	8005928 <FLASH_WaitForLastOperation>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d148      	bne.n	8005c70 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295
 8005be4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d115      	bne.n	8005c1a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f000 f844 	bl	8005c88 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c04:	f7ff fe90 	bl	8005928 <FLASH_WaitForLastOperation>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	; (8005c84 <HAL_FLASHEx_Erase+0xdc>)
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <HAL_FLASHEx_Erase+0xdc>)
 8005c12:	f023 0304 	bic.w	r3, r3, #4
 8005c16:	6113      	str	r3, [r2, #16]
 8005c18:	e028      	b.n	8005c6c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	e01c      	b.n	8005c5c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	4619      	mov	r1, r3
 8005c2a:	68b8      	ldr	r0, [r7, #8]
 8005c2c:	f000 f850 	bl	8005cd0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c34:	f7ff fe78 	bl	8005928 <FLASH_WaitForLastOperation>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005c3c:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <HAL_FLASHEx_Erase+0xdc>)
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	4a10      	ldr	r2, [pc, #64]	; (8005c84 <HAL_FLASHEx_Erase+0xdc>)
 8005c42:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005c46:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	601a      	str	r2, [r3, #0]
          break;
 8005c54:	e00a      	b.n	8005c6c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60bb      	str	r3, [r7, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	4413      	add	r3, r2
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d3da      	bcc.n	8005c22 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005c6c:	f000 f878 	bl	8005d60 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <HAL_FLASHEx_Erase+0xd8>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	761a      	strb	r2, [r3, #24]

  return status;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000b0c 	.word	0x20000b0c
 8005c84:	40023c00 	.word	0x40023c00

08005c88 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	6039      	str	r1, [r7, #0]
 8005c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c94:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <FLASH_MassErase+0x44>)
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	4a0c      	ldr	r2, [pc, #48]	; (8005ccc <FLASH_MassErase+0x44>)
 8005c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005ca0:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <FLASH_MassErase+0x44>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <FLASH_MassErase+0x44>)
 8005ca6:	f043 0304 	orr.w	r3, r3, #4
 8005caa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005cac:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <FLASH_MassErase+0x44>)
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	4a05      	ldr	r2, [pc, #20]	; (8005ccc <FLASH_MassErase+0x44>)
 8005cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cbc:	6113      	str	r3, [r2, #16]
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40023c00 	.word	0x40023c00

08005cd0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d102      	bne.n	8005cec <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e010      	b.n	8005d0e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d103      	bne.n	8005cfa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e009      	b.n	8005d0e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d103      	bne.n	8005d08 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	e002      	b.n	8005d0e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005d08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d0e:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <FLASH_Erase_Sector+0x8c>)
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <FLASH_Erase_Sector+0x8c>)
 8005d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <FLASH_Erase_Sector+0x8c>)
 8005d1c:	691a      	ldr	r2, [r3, #16]
 8005d1e:	490f      	ldr	r1, [pc, #60]	; (8005d5c <FLASH_Erase_Sector+0x8c>)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <FLASH_Erase_Sector+0x8c>)
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	4a0c      	ldr	r2, [pc, #48]	; (8005d5c <FLASH_Erase_Sector+0x8c>)
 8005d2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005d32:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <FLASH_Erase_Sector+0x8c>)
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	4a07      	ldr	r2, [pc, #28]	; (8005d5c <FLASH_Erase_Sector+0x8c>)
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
 8005d42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <FLASH_Erase_Sector+0x8c>)
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	4a04      	ldr	r2, [pc, #16]	; (8005d5c <FLASH_Erase_Sector+0x8c>)
 8005d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d4e:	6113      	str	r3, [r2, #16]
}
 8005d50:	bf00      	nop
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	40023c00 	.word	0x40023c00

08005d60 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005d64:	4b20      	ldr	r3, [pc, #128]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d017      	beq.n	8005da0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005d70:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005d76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d7a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005d7c:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a19      	ldr	r2, [pc, #100]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005d82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d92:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d94:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d9e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005da0:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d017      	beq.n	8005ddc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005dac:	4b0e      	ldr	r3, [pc, #56]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a0d      	ldr	r2, [pc, #52]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005db8:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005dbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a07      	ldr	r2, [pc, #28]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a04      	ldr	r2, [pc, #16]	; (8005de8 <FLASH_FlushCaches+0x88>)
 8005dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dda:	6013      	str	r3, [r2, #0]
  }
}
 8005ddc:	bf00      	nop
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40023c00 	.word	0x40023c00

08005dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	; 0x24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	e159      	b.n	80060bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e08:	2201      	movs	r2, #1
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	f040 8148 	bne.w	80060b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d005      	beq.n	8005e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d130      	bne.n	8005ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	2203      	movs	r2, #3
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4013      	ands	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e74:	2201      	movs	r2, #1
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 0201 	and.w	r2, r3, #1
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d017      	beq.n	8005edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d123      	bne.n	8005f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	08da      	lsrs	r2, r3, #3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3208      	adds	r2, #8
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	220f      	movs	r2, #15
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	08da      	lsrs	r2, r3, #3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3208      	adds	r2, #8
 8005f2a:	69b9      	ldr	r1, [r7, #24]
 8005f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f003 0203 	and.w	r2, r3, #3
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	fa02 f303 	lsl.w	r3, r2, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80a2 	beq.w	80060b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	4b57      	ldr	r3, [pc, #348]	; (80060d4 <HAL_GPIO_Init+0x2e8>)
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	4a56      	ldr	r2, [pc, #344]	; (80060d4 <HAL_GPIO_Init+0x2e8>)
 8005f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f80:	6453      	str	r3, [r2, #68]	; 0x44
 8005f82:	4b54      	ldr	r3, [pc, #336]	; (80060d4 <HAL_GPIO_Init+0x2e8>)
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f8e:	4a52      	ldr	r2, [pc, #328]	; (80060d8 <HAL_GPIO_Init+0x2ec>)
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	089b      	lsrs	r3, r3, #2
 8005f94:	3302      	adds	r3, #2
 8005f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	220f      	movs	r2, #15
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	43db      	mvns	r3, r3
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a49      	ldr	r2, [pc, #292]	; (80060dc <HAL_GPIO_Init+0x2f0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d019      	beq.n	8005fee <HAL_GPIO_Init+0x202>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a48      	ldr	r2, [pc, #288]	; (80060e0 <HAL_GPIO_Init+0x2f4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d013      	beq.n	8005fea <HAL_GPIO_Init+0x1fe>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a47      	ldr	r2, [pc, #284]	; (80060e4 <HAL_GPIO_Init+0x2f8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00d      	beq.n	8005fe6 <HAL_GPIO_Init+0x1fa>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a46      	ldr	r2, [pc, #280]	; (80060e8 <HAL_GPIO_Init+0x2fc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d007      	beq.n	8005fe2 <HAL_GPIO_Init+0x1f6>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a45      	ldr	r2, [pc, #276]	; (80060ec <HAL_GPIO_Init+0x300>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d101      	bne.n	8005fde <HAL_GPIO_Init+0x1f2>
 8005fda:	2304      	movs	r3, #4
 8005fdc:	e008      	b.n	8005ff0 <HAL_GPIO_Init+0x204>
 8005fde:	2307      	movs	r3, #7
 8005fe0:	e006      	b.n	8005ff0 <HAL_GPIO_Init+0x204>
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e004      	b.n	8005ff0 <HAL_GPIO_Init+0x204>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e002      	b.n	8005ff0 <HAL_GPIO_Init+0x204>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <HAL_GPIO_Init+0x204>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	f002 0203 	and.w	r2, r2, #3
 8005ff6:	0092      	lsls	r2, r2, #2
 8005ff8:	4093      	lsls	r3, r2
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006000:	4935      	ldr	r1, [pc, #212]	; (80060d8 <HAL_GPIO_Init+0x2ec>)
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	089b      	lsrs	r3, r3, #2
 8006006:	3302      	adds	r3, #2
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800600e:	4b38      	ldr	r3, [pc, #224]	; (80060f0 <HAL_GPIO_Init+0x304>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	43db      	mvns	r3, r3
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	4013      	ands	r3, r2
 800601c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006032:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <HAL_GPIO_Init+0x304>)
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006038:	4b2d      	ldr	r3, [pc, #180]	; (80060f0 <HAL_GPIO_Init+0x304>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	43db      	mvns	r3, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4013      	ands	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800605c:	4a24      	ldr	r2, [pc, #144]	; (80060f0 <HAL_GPIO_Init+0x304>)
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006062:	4b23      	ldr	r3, [pc, #140]	; (80060f0 <HAL_GPIO_Init+0x304>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	43db      	mvns	r3, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4013      	ands	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006086:	4a1a      	ldr	r2, [pc, #104]	; (80060f0 <HAL_GPIO_Init+0x304>)
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800608c:	4b18      	ldr	r3, [pc, #96]	; (80060f0 <HAL_GPIO_Init+0x304>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	43db      	mvns	r3, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	4013      	ands	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060b0:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <HAL_GPIO_Init+0x304>)
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	3301      	adds	r3, #1
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	f67f aea2 	bls.w	8005e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	3724      	adds	r7, #36	; 0x24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40013800 	.word	0x40013800
 80060dc:	40020000 	.word	0x40020000
 80060e0:	40020400 	.word	0x40020400
 80060e4:	40020800 	.word	0x40020800
 80060e8:	40020c00 	.word	0x40020c00
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40013c00 	.word	0x40013c00

080060f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	807b      	strh	r3, [r7, #2]
 8006100:	4613      	mov	r3, r2
 8006102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006104:	787b      	ldrb	r3, [r7, #1]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800610a:	887a      	ldrh	r2, [r7, #2]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006110:	e003      	b.n	800611a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006112:	887b      	ldrh	r3, [r7, #2]
 8006114:	041a      	lsls	r2, r3, #16
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	619a      	str	r2, [r3, #24]
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
	...

08006128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800613e:	4a05      	ldr	r2, [pc, #20]	; (8006154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006144:	88fb      	ldrh	r3, [r7, #6]
 8006146:	4618      	mov	r0, r3
 8006148:	f7fc fb7f 	bl	800284a <HAL_GPIO_EXTI_Callback>
  }
}
 800614c:	bf00      	nop
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40013c00 	.word	0x40013c00

08006158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e12b      	b.n	80063c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fd fbac 	bl	80038dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2224      	movs	r2, #36	; 0x24
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061bc:	f001 fbbc 	bl	8007938 <HAL_RCC_GetPCLK1Freq>
 80061c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	4a81      	ldr	r2, [pc, #516]	; (80063cc <HAL_I2C_Init+0x274>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d807      	bhi.n	80061dc <HAL_I2C_Init+0x84>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a80      	ldr	r2, [pc, #512]	; (80063d0 <HAL_I2C_Init+0x278>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bf94      	ite	ls
 80061d4:	2301      	movls	r3, #1
 80061d6:	2300      	movhi	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	e006      	b.n	80061ea <HAL_I2C_Init+0x92>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4a7d      	ldr	r2, [pc, #500]	; (80063d4 <HAL_I2C_Init+0x27c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	bf94      	ite	ls
 80061e4:	2301      	movls	r3, #1
 80061e6:	2300      	movhi	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0e7      	b.n	80063c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a78      	ldr	r2, [pc, #480]	; (80063d8 <HAL_I2C_Init+0x280>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	0c9b      	lsrs	r3, r3, #18
 80061fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a6a      	ldr	r2, [pc, #424]	; (80063cc <HAL_I2C_Init+0x274>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d802      	bhi.n	800622c <HAL_I2C_Init+0xd4>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	3301      	adds	r3, #1
 800622a:	e009      	b.n	8006240 <HAL_I2C_Init+0xe8>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	4a69      	ldr	r2, [pc, #420]	; (80063dc <HAL_I2C_Init+0x284>)
 8006238:	fba2 2303 	umull	r2, r3, r2, r3
 800623c:	099b      	lsrs	r3, r3, #6
 800623e:	3301      	adds	r3, #1
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	430b      	orrs	r3, r1
 8006246:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006252:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	495c      	ldr	r1, [pc, #368]	; (80063cc <HAL_I2C_Init+0x274>)
 800625c:	428b      	cmp	r3, r1
 800625e:	d819      	bhi.n	8006294 <HAL_I2C_Init+0x13c>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1e59      	subs	r1, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	fbb1 f3f3 	udiv	r3, r1, r3
 800626e:	1c59      	adds	r1, r3, #1
 8006270:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006274:	400b      	ands	r3, r1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <HAL_I2C_Init+0x138>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1e59      	subs	r1, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	fbb1 f3f3 	udiv	r3, r1, r3
 8006288:	3301      	adds	r3, #1
 800628a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628e:	e051      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 8006290:	2304      	movs	r3, #4
 8006292:	e04f      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d111      	bne.n	80062c0 <HAL_I2C_Init+0x168>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	1e58      	subs	r0, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	440b      	add	r3, r1
 80062aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ae:	3301      	adds	r3, #1
 80062b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf0c      	ite	eq
 80062b8:	2301      	moveq	r3, #1
 80062ba:	2300      	movne	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	e012      	b.n	80062e6 <HAL_I2C_Init+0x18e>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	1e58      	subs	r0, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	0099      	lsls	r1, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062d6:	3301      	adds	r3, #1
 80062d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf0c      	ite	eq
 80062e0:	2301      	moveq	r3, #1
 80062e2:	2300      	movne	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_I2C_Init+0x196>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e022      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10e      	bne.n	8006314 <HAL_I2C_Init+0x1bc>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1e58      	subs	r0, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6859      	ldr	r1, [r3, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	440b      	add	r3, r1
 8006304:	fbb0 f3f3 	udiv	r3, r0, r3
 8006308:	3301      	adds	r3, #1
 800630a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006312:	e00f      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	1e58      	subs	r0, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6859      	ldr	r1, [r3, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	0099      	lsls	r1, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	fbb0 f3f3 	udiv	r3, r0, r3
 800632a:	3301      	adds	r3, #1
 800632c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	6809      	ldr	r1, [r1, #0]
 8006338:	4313      	orrs	r3, r2
 800633a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69da      	ldr	r2, [r3, #28]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006362:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6911      	ldr	r1, [r2, #16]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	68d2      	ldr	r2, [r2, #12]
 800636e:	4311      	orrs	r1, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	430b      	orrs	r3, r1
 8006376:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	000186a0 	.word	0x000186a0
 80063d0:	001e847f 	.word	0x001e847f
 80063d4:	003d08ff 	.word	0x003d08ff
 80063d8:	431bde83 	.word	0x431bde83
 80063dc:	10624dd3 	.word	0x10624dd3

080063e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	4608      	mov	r0, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	461a      	mov	r2, r3
 80063ee:	4603      	mov	r3, r0
 80063f0:	817b      	strh	r3, [r7, #10]
 80063f2:	460b      	mov	r3, r1
 80063f4:	813b      	strh	r3, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063fa:	f7fe fc71 	bl	8004ce0 <HAL_GetTick>
 80063fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b20      	cmp	r3, #32
 800640a:	f040 80d9 	bne.w	80065c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	2319      	movs	r3, #25
 8006414:	2201      	movs	r2, #1
 8006416:	496d      	ldr	r1, [pc, #436]	; (80065cc <HAL_I2C_Mem_Write+0x1ec>)
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fc7f 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006424:	2302      	movs	r3, #2
 8006426:	e0cc      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800642e:	2b01      	cmp	r3, #1
 8006430:	d101      	bne.n	8006436 <HAL_I2C_Mem_Write+0x56>
 8006432:	2302      	movs	r3, #2
 8006434:	e0c5      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b01      	cmp	r3, #1
 800644a:	d007      	beq.n	800645c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800646a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2221      	movs	r2, #33	; 0x21
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2240      	movs	r2, #64	; 0x40
 8006478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800648c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4a4d      	ldr	r2, [pc, #308]	; (80065d0 <HAL_I2C_Mem_Write+0x1f0>)
 800649c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800649e:	88f8      	ldrh	r0, [r7, #6]
 80064a0:	893a      	ldrh	r2, [r7, #8]
 80064a2:	8979      	ldrh	r1, [r7, #10]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	4603      	mov	r3, r0
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 fab6 	bl	8006a20 <I2C_RequestMemoryWrite>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d052      	beq.n	8006560 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e081      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 fd00 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d107      	bne.n	80064e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e06b      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	781a      	ldrb	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b04      	cmp	r3, #4
 8006526:	d11b      	bne.n	8006560 <HAL_I2C_Mem_Write+0x180>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652c:	2b00      	cmp	r3, #0
 800652e:	d017      	beq.n	8006560 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1aa      	bne.n	80064be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 fcec 	bl	8006f4a <I2C_WaitOnBTFFlagUntilTimeout>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00d      	beq.n	8006594 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	2b04      	cmp	r3, #4
 800657e:	d107      	bne.n	8006590 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e016      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	e000      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80065c0:	2302      	movs	r3, #2
  }
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	00100002 	.word	0x00100002
 80065d0:	ffff0000 	.word	0xffff0000

080065d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08c      	sub	sp, #48	; 0x30
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	4608      	mov	r0, r1
 80065de:	4611      	mov	r1, r2
 80065e0:	461a      	mov	r2, r3
 80065e2:	4603      	mov	r3, r0
 80065e4:	817b      	strh	r3, [r7, #10]
 80065e6:	460b      	mov	r3, r1
 80065e8:	813b      	strh	r3, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065ee:	f7fe fb77 	bl	8004ce0 <HAL_GetTick>
 80065f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	f040 8208 	bne.w	8006a12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	2319      	movs	r3, #25
 8006608:	2201      	movs	r2, #1
 800660a:	497b      	ldr	r1, [pc, #492]	; (80067f8 <HAL_I2C_Mem_Read+0x224>)
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fb85 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006618:	2302      	movs	r3, #2
 800661a:	e1fb      	b.n	8006a14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_I2C_Mem_Read+0x56>
 8006626:	2302      	movs	r3, #2
 8006628:	e1f4      	b.n	8006a14 <HAL_I2C_Mem_Read+0x440>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b01      	cmp	r3, #1
 800663e:	d007      	beq.n	8006650 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800665e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2222      	movs	r2, #34	; 0x22
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2240      	movs	r2, #64	; 0x40
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800667a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4a5b      	ldr	r2, [pc, #364]	; (80067fc <HAL_I2C_Mem_Read+0x228>)
 8006690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006692:	88f8      	ldrh	r0, [r7, #6]
 8006694:	893a      	ldrh	r2, [r7, #8]
 8006696:	8979      	ldrh	r1, [r7, #10]
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	4603      	mov	r3, r0
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 fa52 	bl	8006b4c <I2C_RequestMemoryRead>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e1b0      	b.n	8006a14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d113      	bne.n	80066e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ba:	2300      	movs	r3, #0
 80066bc:	623b      	str	r3, [r7, #32]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	623b      	str	r3, [r7, #32]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	623b      	str	r3, [r7, #32]
 80066ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	e184      	b.n	80069ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d11b      	bne.n	8006722 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	e164      	b.n	80069ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006726:	2b02      	cmp	r3, #2
 8006728:	d11b      	bne.n	8006762 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006738:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006748:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800674a:	2300      	movs	r3, #0
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	e144      	b.n	80069ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006778:	e138      	b.n	80069ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677e:	2b03      	cmp	r3, #3
 8006780:	f200 80f1 	bhi.w	8006966 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006788:	2b01      	cmp	r3, #1
 800678a:	d123      	bne.n	80067d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800678c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fc1b 	bl	8006fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e139      	b.n	8006a14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067d2:	e10b      	b.n	80069ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d14e      	bne.n	800687a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	2200      	movs	r2, #0
 80067e4:	4906      	ldr	r1, [pc, #24]	; (8006800 <HAL_I2C_Mem_Read+0x22c>)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fa98 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d008      	beq.n	8006804 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e10e      	b.n	8006a14 <HAL_I2C_Mem_Read+0x440>
 80067f6:	bf00      	nop
 80067f8:	00100002 	.word	0x00100002
 80067fc:	ffff0000 	.word	0xffff0000
 8006800:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006878:	e0b8      	b.n	80069ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	2200      	movs	r2, #0
 8006882:	4966      	ldr	r1, [pc, #408]	; (8006a1c <HAL_I2C_Mem_Read+0x448>)
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fa49 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0bf      	b.n	8006a14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	2200      	movs	r2, #0
 80068de:	494f      	ldr	r1, [pc, #316]	; (8006a1c <HAL_I2C_Mem_Read+0x448>)
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 fa1b 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e091      	b.n	8006a14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691a      	ldr	r2, [r3, #16]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006964:	e042      	b.n	80069ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006968:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fb2e 	bl	8006fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e04c      	b.n	8006a14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d118      	bne.n	80069ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f47f aec2 	bne.w	800677a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e000      	b.n	8006a14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a12:	2302      	movs	r3, #2
  }
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3728      	adds	r7, #40	; 0x28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	00010004 	.word	0x00010004

08006a20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af02      	add	r7, sp, #8
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	4608      	mov	r0, r1
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	817b      	strh	r3, [r7, #10]
 8006a32:	460b      	mov	r3, r1
 8006a34:	813b      	strh	r3, [r7, #8]
 8006a36:	4613      	mov	r3, r2
 8006a38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f960 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a70:	d103      	bne.n	8006a7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e05f      	b.n	8006b3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a7e:	897b      	ldrh	r3, [r7, #10]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	6a3a      	ldr	r2, [r7, #32]
 8006a92:	492d      	ldr	r1, [pc, #180]	; (8006b48 <I2C_RequestMemoryWrite+0x128>)
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f998 	bl	8006dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e04c      	b.n	8006b3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abc:	6a39      	ldr	r1, [r7, #32]
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 fa02 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00d      	beq.n	8006ae6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d107      	bne.n	8006ae2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e02b      	b.n	8006b3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d105      	bne.n	8006af8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aec:	893b      	ldrh	r3, [r7, #8]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	611a      	str	r2, [r3, #16]
 8006af6:	e021      	b.n	8006b3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006af8:	893b      	ldrh	r3, [r7, #8]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b08:	6a39      	ldr	r1, [r7, #32]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f9dc 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00d      	beq.n	8006b32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d107      	bne.n	8006b2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e005      	b.n	8006b3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b32:	893b      	ldrh	r3, [r7, #8]
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	00010002 	.word	0x00010002

08006b4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	4608      	mov	r0, r1
 8006b56:	4611      	mov	r1, r2
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	817b      	strh	r3, [r7, #10]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	813b      	strh	r3, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f8c2 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00d      	beq.n	8006bba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bac:	d103      	bne.n	8006bb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e0aa      	b.n	8006d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bba:	897b      	ldrh	r3, [r7, #10]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	6a3a      	ldr	r2, [r7, #32]
 8006bce:	4952      	ldr	r1, [pc, #328]	; (8006d18 <I2C_RequestMemoryRead+0x1cc>)
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f8fa 	bl	8006dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e097      	b.n	8006d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf8:	6a39      	ldr	r1, [r7, #32]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f964 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00d      	beq.n	8006c22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d107      	bne.n	8006c1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e076      	b.n	8006d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d105      	bne.n	8006c34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c28:	893b      	ldrh	r3, [r7, #8]
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	611a      	str	r2, [r3, #16]
 8006c32:	e021      	b.n	8006c78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c34:	893b      	ldrh	r3, [r7, #8]
 8006c36:	0a1b      	lsrs	r3, r3, #8
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c44:	6a39      	ldr	r1, [r7, #32]
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 f93e 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00d      	beq.n	8006c6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d107      	bne.n	8006c6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e050      	b.n	8006d10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c6e:	893b      	ldrh	r3, [r7, #8]
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7a:	6a39      	ldr	r1, [r7, #32]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f923 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00d      	beq.n	8006ca4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d107      	bne.n	8006ca0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e035      	b.n	8006d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f82b 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00d      	beq.n	8006ce8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cda:	d103      	bne.n	8006ce4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e013      	b.n	8006d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ce8:	897b      	ldrh	r3, [r7, #10]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f043 0301 	orr.w	r3, r3, #1
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	6a3a      	ldr	r2, [r7, #32]
 8006cfc:	4906      	ldr	r1, [pc, #24]	; (8006d18 <I2C_RequestMemoryRead+0x1cc>)
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f863 	bl	8006dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	00010002 	.word	0x00010002

08006d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d2c:	e025      	b.n	8006d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d34:	d021      	beq.n	8006d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d36:	f7fd ffd3 	bl	8004ce0 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d302      	bcc.n	8006d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d116      	bne.n	8006d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f043 0220 	orr.w	r2, r3, #32
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e023      	b.n	8006dc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	0c1b      	lsrs	r3, r3, #16
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d10d      	bne.n	8006da0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	43da      	mvns	r2, r3
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bf0c      	ite	eq
 8006d96:	2301      	moveq	r3, #1
 8006d98:	2300      	movne	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	e00c      	b.n	8006dba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	43da      	mvns	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4013      	ands	r3, r2
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bf0c      	ite	eq
 8006db2:	2301      	moveq	r3, #1
 8006db4:	2300      	movne	r3, #0
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d0b6      	beq.n	8006d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dd8:	e051      	b.n	8006e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de8:	d123      	bne.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f043 0204 	orr.w	r2, r3, #4
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e046      	b.n	8006ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e38:	d021      	beq.n	8006e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3a:	f7fd ff51 	bl	8004ce0 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d302      	bcc.n	8006e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d116      	bne.n	8006e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	f043 0220 	orr.w	r2, r3, #32
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e020      	b.n	8006ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10c      	bne.n	8006ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	43da      	mvns	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4013      	ands	r3, r2
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bf14      	ite	ne
 8006e9a:	2301      	movne	r3, #1
 8006e9c:	2300      	moveq	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	e00b      	b.n	8006eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	43da      	mvns	r2, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	4013      	ands	r3, r2
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d18d      	bne.n	8006dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ed4:	e02d      	b.n	8006f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 f8ce 	bl	8007078 <I2C_IsAcknowledgeFailed>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e02d      	b.n	8006f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d021      	beq.n	8006f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eee:	f7fd fef7 	bl	8004ce0 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d302      	bcc.n	8006f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d116      	bne.n	8006f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	f043 0220 	orr.w	r2, r3, #32
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e007      	b.n	8006f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3c:	2b80      	cmp	r3, #128	; 0x80
 8006f3e:	d1ca      	bne.n	8006ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f56:	e02d      	b.n	8006fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f88d 	bl	8007078 <I2C_IsAcknowledgeFailed>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e02d      	b.n	8006fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6e:	d021      	beq.n	8006fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f70:	f7fd feb6 	bl	8004ce0 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d302      	bcc.n	8006f86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d116      	bne.n	8006fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	f043 0220 	orr.w	r2, r3, #32
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e007      	b.n	8006fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d1ca      	bne.n	8006f58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fd8:	e042      	b.n	8007060 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b10      	cmp	r3, #16
 8006fe6:	d119      	bne.n	800701c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0210 	mvn.w	r2, #16
 8006ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e029      	b.n	8007070 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701c:	f7fd fe60 	bl	8004ce0 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	429a      	cmp	r2, r3
 800702a:	d302      	bcc.n	8007032 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d116      	bne.n	8007060 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	f043 0220 	orr.w	r2, r3, #32
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e007      	b.n	8007070 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706a:	2b40      	cmp	r3, #64	; 0x40
 800706c:	d1b5      	bne.n	8006fda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800708a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708e:	d11b      	bne.n	80070c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007098:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	f043 0204 	orr.w	r2, r3, #4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
	...

080070d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e267      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d075      	beq.n	80071e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070f6:	4b88      	ldr	r3, [pc, #544]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 030c 	and.w	r3, r3, #12
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d00c      	beq.n	800711c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007102:	4b85      	ldr	r3, [pc, #532]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800710a:	2b08      	cmp	r3, #8
 800710c:	d112      	bne.n	8007134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800710e:	4b82      	ldr	r3, [pc, #520]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800711a:	d10b      	bne.n	8007134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800711c:	4b7e      	ldr	r3, [pc, #504]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d05b      	beq.n	80071e0 <HAL_RCC_OscConfig+0x108>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d157      	bne.n	80071e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e242      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713c:	d106      	bne.n	800714c <HAL_RCC_OscConfig+0x74>
 800713e:	4b76      	ldr	r3, [pc, #472]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a75      	ldr	r2, [pc, #468]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	e01d      	b.n	8007188 <HAL_RCC_OscConfig+0xb0>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007154:	d10c      	bne.n	8007170 <HAL_RCC_OscConfig+0x98>
 8007156:	4b70      	ldr	r3, [pc, #448]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a6f      	ldr	r2, [pc, #444]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 800715c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	4b6d      	ldr	r3, [pc, #436]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a6c      	ldr	r2, [pc, #432]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	e00b      	b.n	8007188 <HAL_RCC_OscConfig+0xb0>
 8007170:	4b69      	ldr	r3, [pc, #420]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a68      	ldr	r2, [pc, #416]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	4b66      	ldr	r3, [pc, #408]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a65      	ldr	r2, [pc, #404]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d013      	beq.n	80071b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007190:	f7fd fda6 	bl	8004ce0 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007198:	f7fd fda2 	bl	8004ce0 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b64      	cmp	r3, #100	; 0x64
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e207      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071aa:	4b5b      	ldr	r3, [pc, #364]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0f0      	beq.n	8007198 <HAL_RCC_OscConfig+0xc0>
 80071b6:	e014      	b.n	80071e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b8:	f7fd fd92 	bl	8004ce0 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071c0:	f7fd fd8e 	bl	8004ce0 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b64      	cmp	r3, #100	; 0x64
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e1f3      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071d2:	4b51      	ldr	r3, [pc, #324]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f0      	bne.n	80071c0 <HAL_RCC_OscConfig+0xe8>
 80071de:	e000      	b.n	80071e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d063      	beq.n	80072b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ee:	4b4a      	ldr	r3, [pc, #296]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 030c 	and.w	r3, r3, #12
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00b      	beq.n	8007212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071fa:	4b47      	ldr	r3, [pc, #284]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007202:	2b08      	cmp	r3, #8
 8007204:	d11c      	bne.n	8007240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007206:	4b44      	ldr	r3, [pc, #272]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d116      	bne.n	8007240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007212:	4b41      	ldr	r3, [pc, #260]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_RCC_OscConfig+0x152>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d001      	beq.n	800722a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e1c7      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800722a:	4b3b      	ldr	r3, [pc, #236]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	4937      	ldr	r1, [pc, #220]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 800723a:	4313      	orrs	r3, r2
 800723c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800723e:	e03a      	b.n	80072b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d020      	beq.n	800728a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007248:	4b34      	ldr	r3, [pc, #208]	; (800731c <HAL_RCC_OscConfig+0x244>)
 800724a:	2201      	movs	r2, #1
 800724c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724e:	f7fd fd47 	bl	8004ce0 <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007256:	f7fd fd43 	bl	8004ce0 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e1a8      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007268:	4b2b      	ldr	r3, [pc, #172]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0f0      	beq.n	8007256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007274:	4b28      	ldr	r3, [pc, #160]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	4925      	ldr	r1, [pc, #148]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 8007284:	4313      	orrs	r3, r2
 8007286:	600b      	str	r3, [r1, #0]
 8007288:	e015      	b.n	80072b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800728a:	4b24      	ldr	r3, [pc, #144]	; (800731c <HAL_RCC_OscConfig+0x244>)
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007290:	f7fd fd26 	bl	8004ce0 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007298:	f7fd fd22 	bl	8004ce0 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e187      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1f0      	bne.n	8007298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d036      	beq.n	8007330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d016      	beq.n	80072f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072ca:	4b15      	ldr	r3, [pc, #84]	; (8007320 <HAL_RCC_OscConfig+0x248>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d0:	f7fd fd06 	bl	8004ce0 <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072d8:	f7fd fd02 	bl	8004ce0 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e167      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ea:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <HAL_RCC_OscConfig+0x240>)
 80072ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0f0      	beq.n	80072d8 <HAL_RCC_OscConfig+0x200>
 80072f6:	e01b      	b.n	8007330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072f8:	4b09      	ldr	r3, [pc, #36]	; (8007320 <HAL_RCC_OscConfig+0x248>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072fe:	f7fd fcef 	bl	8004ce0 <HAL_GetTick>
 8007302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007304:	e00e      	b.n	8007324 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007306:	f7fd fceb 	bl	8004ce0 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d907      	bls.n	8007324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e150      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
 8007318:	40023800 	.word	0x40023800
 800731c:	42470000 	.word	0x42470000
 8007320:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007324:	4b88      	ldr	r3, [pc, #544]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1ea      	bne.n	8007306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8097 	beq.w	800746c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007342:	4b81      	ldr	r3, [pc, #516]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10f      	bne.n	800736e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800734e:	2300      	movs	r3, #0
 8007350:	60bb      	str	r3, [r7, #8]
 8007352:	4b7d      	ldr	r3, [pc, #500]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	4a7c      	ldr	r2, [pc, #496]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800735c:	6413      	str	r3, [r2, #64]	; 0x40
 800735e:	4b7a      	ldr	r3, [pc, #488]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007366:	60bb      	str	r3, [r7, #8]
 8007368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800736a:	2301      	movs	r3, #1
 800736c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800736e:	4b77      	ldr	r3, [pc, #476]	; (800754c <HAL_RCC_OscConfig+0x474>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007376:	2b00      	cmp	r3, #0
 8007378:	d118      	bne.n	80073ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800737a:	4b74      	ldr	r3, [pc, #464]	; (800754c <HAL_RCC_OscConfig+0x474>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a73      	ldr	r2, [pc, #460]	; (800754c <HAL_RCC_OscConfig+0x474>)
 8007380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007386:	f7fd fcab 	bl	8004ce0 <HAL_GetTick>
 800738a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800738c:	e008      	b.n	80073a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800738e:	f7fd fca7 	bl	8004ce0 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e10c      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073a0:	4b6a      	ldr	r3, [pc, #424]	; (800754c <HAL_RCC_OscConfig+0x474>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0f0      	beq.n	800738e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d106      	bne.n	80073c2 <HAL_RCC_OscConfig+0x2ea>
 80073b4:	4b64      	ldr	r3, [pc, #400]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b8:	4a63      	ldr	r2, [pc, #396]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80073ba:	f043 0301 	orr.w	r3, r3, #1
 80073be:	6713      	str	r3, [r2, #112]	; 0x70
 80073c0:	e01c      	b.n	80073fc <HAL_RCC_OscConfig+0x324>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	d10c      	bne.n	80073e4 <HAL_RCC_OscConfig+0x30c>
 80073ca:	4b5f      	ldr	r3, [pc, #380]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80073cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ce:	4a5e      	ldr	r2, [pc, #376]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80073d0:	f043 0304 	orr.w	r3, r3, #4
 80073d4:	6713      	str	r3, [r2, #112]	; 0x70
 80073d6:	4b5c      	ldr	r3, [pc, #368]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80073d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073da:	4a5b      	ldr	r2, [pc, #364]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	6713      	str	r3, [r2, #112]	; 0x70
 80073e2:	e00b      	b.n	80073fc <HAL_RCC_OscConfig+0x324>
 80073e4:	4b58      	ldr	r3, [pc, #352]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	4a57      	ldr	r2, [pc, #348]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80073ea:	f023 0301 	bic.w	r3, r3, #1
 80073ee:	6713      	str	r3, [r2, #112]	; 0x70
 80073f0:	4b55      	ldr	r3, [pc, #340]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80073f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f4:	4a54      	ldr	r2, [pc, #336]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80073f6:	f023 0304 	bic.w	r3, r3, #4
 80073fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d015      	beq.n	8007430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007404:	f7fd fc6c 	bl	8004ce0 <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740a:	e00a      	b.n	8007422 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800740c:	f7fd fc68 	bl	8004ce0 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	f241 3288 	movw	r2, #5000	; 0x1388
 800741a:	4293      	cmp	r3, r2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e0cb      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007422:	4b49      	ldr	r3, [pc, #292]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0ee      	beq.n	800740c <HAL_RCC_OscConfig+0x334>
 800742e:	e014      	b.n	800745a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007430:	f7fd fc56 	bl	8004ce0 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007436:	e00a      	b.n	800744e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007438:	f7fd fc52 	bl	8004ce0 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	f241 3288 	movw	r2, #5000	; 0x1388
 8007446:	4293      	cmp	r3, r2
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e0b5      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800744e:	4b3e      	ldr	r3, [pc, #248]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1ee      	bne.n	8007438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d105      	bne.n	800746c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007460:	4b39      	ldr	r3, [pc, #228]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	4a38      	ldr	r2, [pc, #224]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800746a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80a1 	beq.w	80075b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007476:	4b34      	ldr	r3, [pc, #208]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 030c 	and.w	r3, r3, #12
 800747e:	2b08      	cmp	r3, #8
 8007480:	d05c      	beq.n	800753c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d141      	bne.n	800750e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800748a:	4b31      	ldr	r3, [pc, #196]	; (8007550 <HAL_RCC_OscConfig+0x478>)
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007490:	f7fd fc26 	bl	8004ce0 <HAL_GetTick>
 8007494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007496:	e008      	b.n	80074aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007498:	f7fd fc22 	bl	8004ce0 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d901      	bls.n	80074aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e087      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074aa:	4b27      	ldr	r3, [pc, #156]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1f0      	bne.n	8007498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69da      	ldr	r2, [r3, #28]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	019b      	lsls	r3, r3, #6
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	085b      	lsrs	r3, r3, #1
 80074ce:	3b01      	subs	r3, #1
 80074d0:	041b      	lsls	r3, r3, #16
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	061b      	lsls	r3, r3, #24
 80074da:	491b      	ldr	r1, [pc, #108]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e0:	4b1b      	ldr	r3, [pc, #108]	; (8007550 <HAL_RCC_OscConfig+0x478>)
 80074e2:	2201      	movs	r2, #1
 80074e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e6:	f7fd fbfb 	bl	8004ce0 <HAL_GetTick>
 80074ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ec:	e008      	b.n	8007500 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ee:	f7fd fbf7 	bl	8004ce0 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d901      	bls.n	8007500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e05c      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007500:	4b11      	ldr	r3, [pc, #68]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0f0      	beq.n	80074ee <HAL_RCC_OscConfig+0x416>
 800750c:	e054      	b.n	80075b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800750e:	4b10      	ldr	r3, [pc, #64]	; (8007550 <HAL_RCC_OscConfig+0x478>)
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007514:	f7fd fbe4 	bl	8004ce0 <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800751c:	f7fd fbe0 	bl	8004ce0 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e045      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800752e:	4b06      	ldr	r3, [pc, #24]	; (8007548 <HAL_RCC_OscConfig+0x470>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1f0      	bne.n	800751c <HAL_RCC_OscConfig+0x444>
 800753a:	e03d      	b.n	80075b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d107      	bne.n	8007554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e038      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
 8007548:	40023800 	.word	0x40023800
 800754c:	40007000 	.word	0x40007000
 8007550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007554:	4b1b      	ldr	r3, [pc, #108]	; (80075c4 <HAL_RCC_OscConfig+0x4ec>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d028      	beq.n	80075b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800756c:	429a      	cmp	r2, r3
 800756e:	d121      	bne.n	80075b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800757a:	429a      	cmp	r2, r3
 800757c:	d11a      	bne.n	80075b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007584:	4013      	ands	r3, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800758a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800758c:	4293      	cmp	r3, r2
 800758e:	d111      	bne.n	80075b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	3b01      	subs	r3, #1
 800759e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d107      	bne.n	80075b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d001      	beq.n	80075b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	40023800 	.word	0x40023800

080075c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0cc      	b.n	8007776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075dc:	4b68      	ldr	r3, [pc, #416]	; (8007780 <HAL_RCC_ClockConfig+0x1b8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d90c      	bls.n	8007604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ea:	4b65      	ldr	r3, [pc, #404]	; (8007780 <HAL_RCC_ClockConfig+0x1b8>)
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f2:	4b63      	ldr	r3, [pc, #396]	; (8007780 <HAL_RCC_ClockConfig+0x1b8>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d001      	beq.n	8007604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e0b8      	b.n	8007776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d020      	beq.n	8007652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800761c:	4b59      	ldr	r3, [pc, #356]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	4a58      	ldr	r2, [pc, #352]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 8007622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0308 	and.w	r3, r3, #8
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007634:	4b53      	ldr	r3, [pc, #332]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	4a52      	ldr	r2, [pc, #328]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800763e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007640:	4b50      	ldr	r3, [pc, #320]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	494d      	ldr	r1, [pc, #308]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 800764e:	4313      	orrs	r3, r2
 8007650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d044      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d107      	bne.n	8007676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007666:	4b47      	ldr	r3, [pc, #284]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d119      	bne.n	80076a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e07f      	b.n	8007776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d003      	beq.n	8007686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007682:	2b03      	cmp	r3, #3
 8007684:	d107      	bne.n	8007696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007686:	4b3f      	ldr	r3, [pc, #252]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d109      	bne.n	80076a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e06f      	b.n	8007776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007696:	4b3b      	ldr	r3, [pc, #236]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e067      	b.n	8007776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076a6:	4b37      	ldr	r3, [pc, #220]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f023 0203 	bic.w	r2, r3, #3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	4934      	ldr	r1, [pc, #208]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076b8:	f7fd fb12 	bl	8004ce0 <HAL_GetTick>
 80076bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076be:	e00a      	b.n	80076d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c0:	f7fd fb0e 	bl	8004ce0 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e04f      	b.n	8007776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d6:	4b2b      	ldr	r3, [pc, #172]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f003 020c 	and.w	r2, r3, #12
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d1eb      	bne.n	80076c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076e8:	4b25      	ldr	r3, [pc, #148]	; (8007780 <HAL_RCC_ClockConfig+0x1b8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d20c      	bcs.n	8007710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f6:	4b22      	ldr	r3, [pc, #136]	; (8007780 <HAL_RCC_ClockConfig+0x1b8>)
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076fe:	4b20      	ldr	r3, [pc, #128]	; (8007780 <HAL_RCC_ClockConfig+0x1b8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d001      	beq.n	8007710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e032      	b.n	8007776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d008      	beq.n	800772e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800771c:	4b19      	ldr	r3, [pc, #100]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	4916      	ldr	r1, [pc, #88]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 800772a:	4313      	orrs	r3, r2
 800772c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800773a:	4b12      	ldr	r3, [pc, #72]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	490e      	ldr	r1, [pc, #56]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 800774a:	4313      	orrs	r3, r2
 800774c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800774e:	f000 f821 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8007752:	4602      	mov	r2, r0
 8007754:	4b0b      	ldr	r3, [pc, #44]	; (8007784 <HAL_RCC_ClockConfig+0x1bc>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	091b      	lsrs	r3, r3, #4
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	490a      	ldr	r1, [pc, #40]	; (8007788 <HAL_RCC_ClockConfig+0x1c0>)
 8007760:	5ccb      	ldrb	r3, [r1, r3]
 8007762:	fa22 f303 	lsr.w	r3, r2, r3
 8007766:	4a09      	ldr	r2, [pc, #36]	; (800778c <HAL_RCC_ClockConfig+0x1c4>)
 8007768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800776a:	4b09      	ldr	r3, [pc, #36]	; (8007790 <HAL_RCC_ClockConfig+0x1c8>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4618      	mov	r0, r3
 8007770:	f7fd fa72 	bl	8004c58 <HAL_InitTick>

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	40023c00 	.word	0x40023c00
 8007784:	40023800 	.word	0x40023800
 8007788:	0800f730 	.word	0x0800f730
 800778c:	200001f8 	.word	0x200001f8
 8007790:	20000294 	.word	0x20000294

08007794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007798:	b090      	sub	sp, #64	; 0x40
 800779a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
 80077a0:	2300      	movs	r3, #0
 80077a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077a4:	2300      	movs	r3, #0
 80077a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077ac:	4b59      	ldr	r3, [pc, #356]	; (8007914 <HAL_RCC_GetSysClockFreq+0x180>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f003 030c 	and.w	r3, r3, #12
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d00d      	beq.n	80077d4 <HAL_RCC_GetSysClockFreq+0x40>
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	f200 80a1 	bhi.w	8007900 <HAL_RCC_GetSysClockFreq+0x16c>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <HAL_RCC_GetSysClockFreq+0x34>
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d003      	beq.n	80077ce <HAL_RCC_GetSysClockFreq+0x3a>
 80077c6:	e09b      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077c8:	4b53      	ldr	r3, [pc, #332]	; (8007918 <HAL_RCC_GetSysClockFreq+0x184>)
 80077ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80077cc:	e09b      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077ce:	4b53      	ldr	r3, [pc, #332]	; (800791c <HAL_RCC_GetSysClockFreq+0x188>)
 80077d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80077d2:	e098      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077d4:	4b4f      	ldr	r3, [pc, #316]	; (8007914 <HAL_RCC_GetSysClockFreq+0x180>)
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077de:	4b4d      	ldr	r3, [pc, #308]	; (8007914 <HAL_RCC_GetSysClockFreq+0x180>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d028      	beq.n	800783c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ea:	4b4a      	ldr	r3, [pc, #296]	; (8007914 <HAL_RCC_GetSysClockFreq+0x180>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	099b      	lsrs	r3, r3, #6
 80077f0:	2200      	movs	r2, #0
 80077f2:	623b      	str	r3, [r7, #32]
 80077f4:	627a      	str	r2, [r7, #36]	; 0x24
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80077fc:	2100      	movs	r1, #0
 80077fe:	4b47      	ldr	r3, [pc, #284]	; (800791c <HAL_RCC_GetSysClockFreq+0x188>)
 8007800:	fb03 f201 	mul.w	r2, r3, r1
 8007804:	2300      	movs	r3, #0
 8007806:	fb00 f303 	mul.w	r3, r0, r3
 800780a:	4413      	add	r3, r2
 800780c:	4a43      	ldr	r2, [pc, #268]	; (800791c <HAL_RCC_GetSysClockFreq+0x188>)
 800780e:	fba0 1202 	umull	r1, r2, r0, r2
 8007812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007814:	460a      	mov	r2, r1
 8007816:	62ba      	str	r2, [r7, #40]	; 0x28
 8007818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800781a:	4413      	add	r3, r2
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800781e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007820:	2200      	movs	r2, #0
 8007822:	61bb      	str	r3, [r7, #24]
 8007824:	61fa      	str	r2, [r7, #28]
 8007826:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800782a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800782e:	f7f9 f9d3 	bl	8000bd8 <__aeabi_uldivmod>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4613      	mov	r3, r2
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800783a:	e053      	b.n	80078e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800783c:	4b35      	ldr	r3, [pc, #212]	; (8007914 <HAL_RCC_GetSysClockFreq+0x180>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	099b      	lsrs	r3, r3, #6
 8007842:	2200      	movs	r2, #0
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	617a      	str	r2, [r7, #20]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800784e:	f04f 0b00 	mov.w	fp, #0
 8007852:	4652      	mov	r2, sl
 8007854:	465b      	mov	r3, fp
 8007856:	f04f 0000 	mov.w	r0, #0
 800785a:	f04f 0100 	mov.w	r1, #0
 800785e:	0159      	lsls	r1, r3, #5
 8007860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007864:	0150      	lsls	r0, r2, #5
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	ebb2 080a 	subs.w	r8, r2, sl
 800786e:	eb63 090b 	sbc.w	r9, r3, fp
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800787e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007882:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007886:	ebb2 0408 	subs.w	r4, r2, r8
 800788a:	eb63 0509 	sbc.w	r5, r3, r9
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	00eb      	lsls	r3, r5, #3
 8007898:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800789c:	00e2      	lsls	r2, r4, #3
 800789e:	4614      	mov	r4, r2
 80078a0:	461d      	mov	r5, r3
 80078a2:	eb14 030a 	adds.w	r3, r4, sl
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	eb45 030b 	adc.w	r3, r5, fp
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	f04f 0200 	mov.w	r2, #0
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078ba:	4629      	mov	r1, r5
 80078bc:	028b      	lsls	r3, r1, #10
 80078be:	4621      	mov	r1, r4
 80078c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078c4:	4621      	mov	r1, r4
 80078c6:	028a      	lsls	r2, r1, #10
 80078c8:	4610      	mov	r0, r2
 80078ca:	4619      	mov	r1, r3
 80078cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ce:	2200      	movs	r2, #0
 80078d0:	60bb      	str	r3, [r7, #8]
 80078d2:	60fa      	str	r2, [r7, #12]
 80078d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078d8:	f7f9 f97e 	bl	8000bd8 <__aeabi_uldivmod>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4613      	mov	r3, r2
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078e4:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <HAL_RCC_GetSysClockFreq+0x180>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	0c1b      	lsrs	r3, r3, #16
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	3301      	adds	r3, #1
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80078f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80078fe:	e002      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <HAL_RCC_GetSysClockFreq+0x184>)
 8007902:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007908:	4618      	mov	r0, r3
 800790a:	3740      	adds	r7, #64	; 0x40
 800790c:	46bd      	mov	sp, r7
 800790e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007912:	bf00      	nop
 8007914:	40023800 	.word	0x40023800
 8007918:	00f42400 	.word	0x00f42400
 800791c:	017d7840 	.word	0x017d7840

08007920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007924:	4b03      	ldr	r3, [pc, #12]	; (8007934 <HAL_RCC_GetHCLKFreq+0x14>)
 8007926:	681b      	ldr	r3, [r3, #0]
}
 8007928:	4618      	mov	r0, r3
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	200001f8 	.word	0x200001f8

08007938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800793c:	f7ff fff0 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 8007940:	4602      	mov	r2, r0
 8007942:	4b05      	ldr	r3, [pc, #20]	; (8007958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	0a9b      	lsrs	r3, r3, #10
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	4903      	ldr	r1, [pc, #12]	; (800795c <HAL_RCC_GetPCLK1Freq+0x24>)
 800794e:	5ccb      	ldrb	r3, [r1, r3]
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007954:	4618      	mov	r0, r3
 8007956:	bd80      	pop	{r7, pc}
 8007958:	40023800 	.word	0x40023800
 800795c:	0800f740 	.word	0x0800f740

08007960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007964:	f7ff ffdc 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 8007968:	4602      	mov	r2, r0
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	0b5b      	lsrs	r3, r3, #13
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	4903      	ldr	r1, [pc, #12]	; (8007984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007976:	5ccb      	ldrb	r3, [r1, r3]
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800797c:	4618      	mov	r0, r3
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40023800 	.word	0x40023800
 8007984:	0800f740 	.word	0x0800f740

08007988 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d038      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079b0:	4b68      	ldr	r3, [pc, #416]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079b6:	f7fd f993 	bl	8004ce0 <HAL_GetTick>
 80079ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079bc:	e008      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079be:	f7fd f98f 	bl	8004ce0 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d901      	bls.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e0bd      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079d0:	4b61      	ldr	r3, [pc, #388]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1f0      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	019b      	lsls	r3, r3, #6
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	071b      	lsls	r3, r3, #28
 80079ee:	495a      	ldr	r1, [pc, #360]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079f6:	4b57      	ldr	r3, [pc, #348]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079fc:	f7fd f970 	bl	8004ce0 <HAL_GetTick>
 8007a00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a02:	e008      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a04:	f7fd f96c 	bl	8004ce0 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e09a      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a16:	4b50      	ldr	r3, [pc, #320]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0f0      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8083 	beq.w	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	4b48      	ldr	r3, [pc, #288]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	4a47      	ldr	r2, [pc, #284]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8007a40:	4b45      	ldr	r3, [pc, #276]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a48:	60fb      	str	r3, [r7, #12]
 8007a4a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007a4c:	4b43      	ldr	r3, [pc, #268]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a42      	ldr	r2, [pc, #264]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a56:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a58:	f7fd f942 	bl	8004ce0 <HAL_GetTick>
 8007a5c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a60:	f7fd f93e 	bl	8004ce0 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e06c      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a72:	4b3a      	ldr	r3, [pc, #232]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0f0      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a7e:	4b36      	ldr	r3, [pc, #216]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a86:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d02f      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d028      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a9c:	4b2e      	ldr	r3, [pc, #184]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007aa6:	4b2e      	ldr	r3, [pc, #184]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007aac:	4b2c      	ldr	r3, [pc, #176]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007ab2:	4a29      	ldr	r2, [pc, #164]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ab8:	4b27      	ldr	r3, [pc, #156]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d114      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ac4:	f7fd f90c 	bl	8004ce0 <HAL_GetTick>
 8007ac8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aca:	e00a      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007acc:	f7fd f908 	bl	8004ce0 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e034      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae2:	4b1d      	ldr	r3, [pc, #116]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0ee      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007afa:	d10d      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007afc:	4b16      	ldr	r3, [pc, #88]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b10:	4911      	ldr	r1, [pc, #68]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	608b      	str	r3, [r1, #8]
 8007b16:	e005      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007b18:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4a0e      	ldr	r2, [pc, #56]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b22:	6093      	str	r3, [r2, #8]
 8007b24:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b30:	4909      	ldr	r1, [pc, #36]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	7d1a      	ldrb	r2, [r3, #20]
 8007b46:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007b48:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	42470068 	.word	0x42470068
 8007b58:	40023800 	.word	0x40023800
 8007b5c:	40007000 	.word	0x40007000
 8007b60:	42470e40 	.word	0x42470e40
 8007b64:	424711e0 	.word	0x424711e0

08007b68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e066      	b.n	8007c4c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7f5b      	ldrb	r3, [r3, #29]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d105      	bne.n	8007b94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7fb ffdc 	bl	8003b4c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	22ca      	movs	r2, #202	; 0xca
 8007ba0:	625a      	str	r2, [r3, #36]	; 0x24
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2253      	movs	r2, #83	; 0x53
 8007ba8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa45 	bl	800803a <RTC_EnterInitMode>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d12c      	bne.n	8007c14 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6812      	ldr	r2, [r2, #0]
 8007bc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bcc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6899      	ldr	r1, [r3, #8]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	431a      	orrs	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	68d2      	ldr	r2, [r2, #12]
 8007bf4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6919      	ldr	r1, [r3, #16]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	041a      	lsls	r2, r3, #16
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fa4c 	bl	80080a8 <RTC_ExitInitMode>
 8007c10:	4603      	mov	r3, r0
 8007c12:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d113      	bne.n	8007c42 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c28:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699a      	ldr	r2, [r3, #24]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	22ff      	movs	r2, #255	; 0xff
 8007c48:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007c54:	b590      	push	{r4, r7, lr}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	7f1b      	ldrb	r3, [r3, #28]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_RTC_SetTime+0x1c>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e087      	b.n	8007d80 <HAL_RTC_SetTime+0x12c>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d126      	bne.n	8007cd0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d102      	bne.n	8007c96 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fa29 	bl	80080f2 <RTC_ByteToBcd2>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fa22 	bl	80080f2 <RTC_ByteToBcd2>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007cb2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	789b      	ldrb	r3, [r3, #2]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 fa1a 	bl	80080f2 <RTC_ByteToBcd2>
 8007cbe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007cc0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	78db      	ldrb	r3, [r3, #3]
 8007cc8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	e018      	b.n	8007d02 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d102      	bne.n	8007ce4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007cf0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007cf6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	78db      	ldrb	r3, [r3, #3]
 8007cfc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	22ca      	movs	r2, #202	; 0xca
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2253      	movs	r2, #83	; 0x53
 8007d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 f991 	bl	800803a <RTC_EnterInitMode>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007d1c:	7cfb      	ldrb	r3, [r7, #19]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d120      	bne.n	8007d64 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007d2c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007d30:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6899      	ldr	r1, [r3, #8]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	431a      	orrs	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f9a4 	bl	80080a8 <RTC_ExitInitMode>
 8007d60:	4603      	mov	r3, r0
 8007d62:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007d64:	7cfb      	ldrb	r3, [r7, #19]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d102      	bne.n	8007d70 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	22ff      	movs	r2, #255	; 0xff
 8007d76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	771a      	strb	r2, [r3, #28]

  return status;
 8007d7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	371c      	adds	r7, #28
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd90      	pop	{r4, r7, pc}

08007d88 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007dba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007dbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	0a1b      	lsrs	r3, r3, #8
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	0d9b      	lsrs	r3, r3, #22
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d11a      	bne.n	8007e3a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 f98f 	bl	800812c <RTC_Bcd2ToByte>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	461a      	mov	r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	785b      	ldrb	r3, [r3, #1]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f986 	bl	800812c <RTC_Bcd2ToByte>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	789b      	ldrb	r3, [r3, #2]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 f97d 	bl	800812c <RTC_Bcd2ToByte>
 8007e32:	4603      	mov	r3, r0
 8007e34:	461a      	mov	r2, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e44:	b590      	push	{r4, r7, lr}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	7f1b      	ldrb	r3, [r3, #28]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <HAL_RTC_SetDate+0x1c>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e071      	b.n	8007f44 <HAL_RTC_SetDate+0x100>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2202      	movs	r2, #2
 8007e6a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10e      	bne.n	8007e90 <HAL_RTC_SetDate+0x4c>
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d008      	beq.n	8007e90 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	f023 0310 	bic.w	r3, r3, #16
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	330a      	adds	r3, #10
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d11c      	bne.n	8007ed0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	78db      	ldrb	r3, [r3, #3]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 f929 	bl	80080f2 <RTC_ByteToBcd2>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 f922 	bl	80080f2 <RTC_ByteToBcd2>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007eb2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	789b      	ldrb	r3, [r3, #2]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 f91a 	bl	80080f2 <RTC_ByteToBcd2>
 8007ebe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007ec0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	e00e      	b.n	8007eee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	78db      	ldrb	r3, [r3, #3]
 8007ed4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	785b      	ldrb	r3, [r3, #1]
 8007eda:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007edc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007ee2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007eea:	4313      	orrs	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	22ca      	movs	r2, #202	; 0xca
 8007ef4:	625a      	str	r2, [r3, #36]	; 0x24
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2253      	movs	r2, #83	; 0x53
 8007efc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 f89b 	bl	800803a <RTC_EnterInitMode>
 8007f04:	4603      	mov	r3, r0
 8007f06:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007f08:	7cfb      	ldrb	r3, [r7, #19]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10c      	bne.n	8007f28 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f1c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f8c2 	bl	80080a8 <RTC_ExitInitMode>
 8007f24:	4603      	mov	r3, r0
 8007f26:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007f28:	7cfb      	ldrb	r3, [r7, #19]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d102      	bne.n	8007f34 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	22ff      	movs	r2, #255	; 0xff
 8007f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	771a      	strb	r2, [r3, #28]

  return status;
 8007f42:	7cfb      	ldrb	r3, [r7, #19]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd90      	pop	{r4, r7, pc}

08007f4c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	0c1b      	lsrs	r3, r3, #16
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	0a1b      	lsrs	r3, r3, #8
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	0b5b      	lsrs	r3, r3, #13
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d11a      	bne.n	8007fe0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	78db      	ldrb	r3, [r3, #3]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f8bc 	bl	800812c <RTC_Bcd2ToByte>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 f8b3 	bl	800812c <RTC_Bcd2ToByte>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	461a      	mov	r2, r3
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	789b      	ldrb	r3, [r3, #2]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f8aa 	bl	800812c <RTC_Bcd2ToByte>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008004:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008006:	f7fc fe6b 	bl	8004ce0 <HAL_GetTick>
 800800a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800800c:	e009      	b.n	8008022 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800800e:	f7fc fe67 	bl	8004ce0 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800801c:	d901      	bls.n	8008022 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e007      	b.n	8008032 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0ee      	beq.n	800800e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008054:	2b00      	cmp	r3, #0
 8008056:	d122      	bne.n	800809e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008066:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008068:	f7fc fe3a 	bl	8004ce0 <HAL_GetTick>
 800806c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800806e:	e00c      	b.n	800808a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008070:	f7fc fe36 	bl	8004ce0 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800807e:	d904      	bls.n	800808a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2204      	movs	r2, #4
 8008084:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <RTC_EnterInitMode+0x64>
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d1e8      	bne.n	8008070 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800809e:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080c2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff ff89 	bl	8007fea <HAL_RTC_WaitForSynchro>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d004      	beq.n	80080e8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2204      	movs	r2, #4
 80080e2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b085      	sub	sp, #20
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	4603      	mov	r3, r0
 80080fa:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008100:	e005      	b.n	800810e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	3301      	adds	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	3b0a      	subs	r3, #10
 800810c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	2b09      	cmp	r3, #9
 8008112:	d8f6      	bhi.n	8008102 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	011b      	lsls	r3, r3, #4
 8008118:	b2da      	uxtb	r2, r3
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	4313      	orrs	r3, r2
 800811e:	b2db      	uxtb	r3, r3
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	091b      	lsrs	r3, r3, #4
 800813e:	b2db      	uxtb	r3, r3
 8008140:	461a      	mov	r2, r3
 8008142:	0092      	lsls	r2, r2, #2
 8008144:	4413      	add	r3, r2
 8008146:	005b      	lsls	r3, r3, #1
 8008148:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	b2da      	uxtb	r2, r3
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	4413      	add	r3, r2
 8008156:	b2db      	uxtb	r3, r3
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e07b      	b.n	800826e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	2b00      	cmp	r3, #0
 800817c:	d108      	bne.n	8008190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008186:	d009      	beq.n	800819c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	61da      	str	r2, [r3, #28]
 800818e:	e005      	b.n	800819c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7fb fd2a 	bl	8003c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	431a      	orrs	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800820c:	431a      	orrs	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008220:	ea42 0103 	orr.w	r1, r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008228:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	0c1b      	lsrs	r3, r3, #16
 800823a:	f003 0104 	and.w	r1, r3, #4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	f003 0210 	and.w	r2, r3, #16
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	430a      	orrs	r2, r1
 800824c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800825c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e041      	b.n	800830c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d106      	bne.n	80082a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7fb ff2d 	bl	80040fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2202      	movs	r2, #2
 80082a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f000 fee9 	bl	800908c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b01      	cmp	r3, #1
 8008326:	d001      	beq.n	800832c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e044      	b.n	80083b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1e      	ldr	r2, [pc, #120]	; (80083c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d018      	beq.n	8008380 <HAL_TIM_Base_Start_IT+0x6c>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008356:	d013      	beq.n	8008380 <HAL_TIM_Base_Start_IT+0x6c>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a1a      	ldr	r2, [pc, #104]	; (80083c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00e      	beq.n	8008380 <HAL_TIM_Base_Start_IT+0x6c>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a19      	ldr	r2, [pc, #100]	; (80083cc <HAL_TIM_Base_Start_IT+0xb8>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d009      	beq.n	8008380 <HAL_TIM_Base_Start_IT+0x6c>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a17      	ldr	r2, [pc, #92]	; (80083d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d004      	beq.n	8008380 <HAL_TIM_Base_Start_IT+0x6c>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a16      	ldr	r2, [pc, #88]	; (80083d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d111      	bne.n	80083a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b06      	cmp	r3, #6
 8008390:	d010      	beq.n	80083b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f042 0201 	orr.w	r2, r2, #1
 80083a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083a2:	e007      	b.n	80083b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0201 	orr.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40010000 	.word	0x40010000
 80083c8:	40000400 	.word	0x40000400
 80083cc:	40000800 	.word	0x40000800
 80083d0:	40000c00 	.word	0x40000c00
 80083d4:	40014000 	.word	0x40014000

080083d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e041      	b.n	800846e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f839 	bl	8008476 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3304      	adds	r3, #4
 8008414:	4619      	mov	r1, r3
 8008416:	4610      	mov	r0, r2
 8008418:	f000 fe38 	bl	800908c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
	...

0800848c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	bf0c      	ite	eq
 80084b0:	2301      	moveq	r3, #1
 80084b2:	2300      	movne	r3, #0
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	e022      	b.n	80084fe <HAL_TIM_PWM_Start_DMA+0x72>
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d109      	bne.n	80084d2 <HAL_TIM_PWM_Start_DMA+0x46>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	bf0c      	ite	eq
 80084ca:	2301      	moveq	r3, #1
 80084cc:	2300      	movne	r3, #0
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	e015      	b.n	80084fe <HAL_TIM_PWM_Start_DMA+0x72>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d109      	bne.n	80084ec <HAL_TIM_PWM_Start_DMA+0x60>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	bf0c      	ite	eq
 80084e4:	2301      	moveq	r3, #1
 80084e6:	2300      	movne	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	e008      	b.n	80084fe <HAL_TIM_PWM_Start_DMA+0x72>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	bf0c      	ite	eq
 80084f8:	2301      	moveq	r3, #1
 80084fa:	2300      	movne	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008502:	2302      	movs	r3, #2
 8008504:	e15d      	b.n	80087c2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <HAL_TIM_PWM_Start_DMA+0x94>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b01      	cmp	r3, #1
 8008516:	bf0c      	ite	eq
 8008518:	2301      	moveq	r3, #1
 800851a:	2300      	movne	r3, #0
 800851c:	b2db      	uxtb	r3, r3
 800851e:	e022      	b.n	8008566 <HAL_TIM_PWM_Start_DMA+0xda>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b04      	cmp	r3, #4
 8008524:	d109      	bne.n	800853a <HAL_TIM_PWM_Start_DMA+0xae>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b01      	cmp	r3, #1
 8008530:	bf0c      	ite	eq
 8008532:	2301      	moveq	r3, #1
 8008534:	2300      	movne	r3, #0
 8008536:	b2db      	uxtb	r3, r3
 8008538:	e015      	b.n	8008566 <HAL_TIM_PWM_Start_DMA+0xda>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b08      	cmp	r3, #8
 800853e:	d109      	bne.n	8008554 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b01      	cmp	r3, #1
 800854a:	bf0c      	ite	eq
 800854c:	2301      	moveq	r3, #1
 800854e:	2300      	movne	r3, #0
 8008550:	b2db      	uxtb	r3, r3
 8008552:	e008      	b.n	8008566 <HAL_TIM_PWM_Start_DMA+0xda>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b01      	cmp	r3, #1
 800855e:	bf0c      	ite	eq
 8008560:	2301      	moveq	r3, #1
 8008562:	2300      	movne	r3, #0
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d024      	beq.n	80085b4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d104      	bne.n	800857a <HAL_TIM_PWM_Start_DMA+0xee>
 8008570:	887b      	ldrh	r3, [r7, #2]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e123      	b.n	80087c2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <HAL_TIM_PWM_Start_DMA+0xfe>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008588:	e016      	b.n	80085b8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b04      	cmp	r3, #4
 800858e:	d104      	bne.n	800859a <HAL_TIM_PWM_Start_DMA+0x10e>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008598:	e00e      	b.n	80085b8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b08      	cmp	r3, #8
 800859e:	d104      	bne.n	80085aa <HAL_TIM_PWM_Start_DMA+0x11e>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085a8:	e006      	b.n	80085b8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2202      	movs	r2, #2
 80085ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085b2:	e001      	b.n	80085b8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e104      	b.n	80087c2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b0c      	cmp	r3, #12
 80085bc:	f200 80ae 	bhi.w	800871c <HAL_TIM_PWM_Start_DMA+0x290>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085fd 	.word	0x080085fd
 80085cc:	0800871d 	.word	0x0800871d
 80085d0:	0800871d 	.word	0x0800871d
 80085d4:	0800871d 	.word	0x0800871d
 80085d8:	08008645 	.word	0x08008645
 80085dc:	0800871d 	.word	0x0800871d
 80085e0:	0800871d 	.word	0x0800871d
 80085e4:	0800871d 	.word	0x0800871d
 80085e8:	0800868d 	.word	0x0800868d
 80085ec:	0800871d 	.word	0x0800871d
 80085f0:	0800871d 	.word	0x0800871d
 80085f4:	0800871d 	.word	0x0800871d
 80085f8:	080086d5 	.word	0x080086d5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	4a72      	ldr	r2, [pc, #456]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x340>)
 8008602:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	4a71      	ldr	r2, [pc, #452]	; (80087d0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800860a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	4a70      	ldr	r2, [pc, #448]	; (80087d4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008612:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008618:	6879      	ldr	r1, [r7, #4]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3334      	adds	r3, #52	; 0x34
 8008620:	461a      	mov	r2, r3
 8008622:	887b      	ldrh	r3, [r7, #2]
 8008624:	f7fc fd9a 	bl	800515c <HAL_DMA_Start_IT>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e0c7      	b.n	80087c2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68da      	ldr	r2, [r3, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008640:	60da      	str	r2, [r3, #12]
      break;
 8008642:	e06e      	b.n	8008722 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008648:	4a60      	ldr	r2, [pc, #384]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x340>)
 800864a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	4a5f      	ldr	r2, [pc, #380]	; (80087d0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	4a5e      	ldr	r2, [pc, #376]	; (80087d4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800865a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008660:	6879      	ldr	r1, [r7, #4]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3338      	adds	r3, #56	; 0x38
 8008668:	461a      	mov	r2, r3
 800866a:	887b      	ldrh	r3, [r7, #2]
 800866c:	f7fc fd76 	bl	800515c <HAL_DMA_Start_IT>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e0a3      	b.n	80087c2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68da      	ldr	r2, [r3, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008688:	60da      	str	r2, [r3, #12]
      break;
 800868a:	e04a      	b.n	8008722 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	4a4e      	ldr	r2, [pc, #312]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x340>)
 8008692:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	4a4d      	ldr	r2, [pc, #308]	; (80087d0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800869a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	4a4c      	ldr	r2, [pc, #304]	; (80087d4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80086a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	333c      	adds	r3, #60	; 0x3c
 80086b0:	461a      	mov	r2, r3
 80086b2:	887b      	ldrh	r3, [r7, #2]
 80086b4:	f7fc fd52 	bl	800515c <HAL_DMA_Start_IT>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e07f      	b.n	80087c2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086d0:	60da      	str	r2, [r3, #12]
      break;
 80086d2:	e026      	b.n	8008722 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d8:	4a3c      	ldr	r2, [pc, #240]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x340>)
 80086da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	4a3b      	ldr	r2, [pc, #236]	; (80087d0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80086e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	4a3a      	ldr	r2, [pc, #232]	; (80087d4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80086ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3340      	adds	r3, #64	; 0x40
 80086f8:	461a      	mov	r2, r3
 80086fa:	887b      	ldrh	r3, [r7, #2]
 80086fc:	f7fc fd2e 	bl	800515c <HAL_DMA_Start_IT>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e05b      	b.n	80087c2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68da      	ldr	r2, [r3, #12]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008718:	60da      	str	r2, [r3, #12]
      break;
 800871a:	e002      	b.n	8008722 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	75fb      	strb	r3, [r7, #23]
      break;
 8008720:	bf00      	nop
  }

  if (status == HAL_OK)
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d14b      	bne.n	80087c0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2201      	movs	r2, #1
 800872e:	68b9      	ldr	r1, [r7, #8]
 8008730:	4618      	mov	r0, r3
 8008732:	f000 ff51 	bl	80095d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a27      	ldr	r2, [pc, #156]	; (80087d8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d107      	bne.n	8008750 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800874e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a20      	ldr	r2, [pc, #128]	; (80087d8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d018      	beq.n	800878c <HAL_TIM_PWM_Start_DMA+0x300>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008762:	d013      	beq.n	800878c <HAL_TIM_PWM_Start_DMA+0x300>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a1c      	ldr	r2, [pc, #112]	; (80087dc <HAL_TIM_PWM_Start_DMA+0x350>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d00e      	beq.n	800878c <HAL_TIM_PWM_Start_DMA+0x300>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a1b      	ldr	r2, [pc, #108]	; (80087e0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d009      	beq.n	800878c <HAL_TIM_PWM_Start_DMA+0x300>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a19      	ldr	r2, [pc, #100]	; (80087e4 <HAL_TIM_PWM_Start_DMA+0x358>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d004      	beq.n	800878c <HAL_TIM_PWM_Start_DMA+0x300>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a18      	ldr	r2, [pc, #96]	; (80087e8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d111      	bne.n	80087b0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 0307 	and.w	r3, r3, #7
 8008796:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	2b06      	cmp	r3, #6
 800879c:	d010      	beq.n	80087c0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0201 	orr.w	r2, r2, #1
 80087ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ae:	e007      	b.n	80087c0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	08008f7d 	.word	0x08008f7d
 80087d0:	08009025 	.word	0x08009025
 80087d4:	08008eeb 	.word	0x08008eeb
 80087d8:	40010000 	.word	0x40010000
 80087dc:	40000400 	.word	0x40000400
 80087e0:	40000800 	.word	0x40000800
 80087e4:	40000c00 	.word	0x40000c00
 80087e8:	40014000 	.word	0x40014000

080087ec <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b0c      	cmp	r3, #12
 80087fe:	d855      	bhi.n	80088ac <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008800:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	0800883d 	.word	0x0800883d
 800880c:	080088ad 	.word	0x080088ad
 8008810:	080088ad 	.word	0x080088ad
 8008814:	080088ad 	.word	0x080088ad
 8008818:	08008859 	.word	0x08008859
 800881c:	080088ad 	.word	0x080088ad
 8008820:	080088ad 	.word	0x080088ad
 8008824:	080088ad 	.word	0x080088ad
 8008828:	08008875 	.word	0x08008875
 800882c:	080088ad 	.word	0x080088ad
 8008830:	080088ad 	.word	0x080088ad
 8008834:	080088ad 	.word	0x080088ad
 8008838:	08008891 	.word	0x08008891
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800884a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	4618      	mov	r0, r3
 8008852:	f7fc fd4b 	bl	80052ec <HAL_DMA_Abort_IT>
      break;
 8008856:	e02c      	b.n	80088b2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008866:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886c:	4618      	mov	r0, r3
 800886e:	f7fc fd3d 	bl	80052ec <HAL_DMA_Abort_IT>
      break;
 8008872:	e01e      	b.n	80088b2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008882:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	4618      	mov	r0, r3
 800888a:	f7fc fd2f 	bl	80052ec <HAL_DMA_Abort_IT>
      break;
 800888e:	e010      	b.n	80088b2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800889e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fc fd21 	bl	80052ec <HAL_DMA_Abort_IT>
      break;
 80088aa:	e002      	b.n	80088b2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	73fb      	strb	r3, [r7, #15]
      break;
 80088b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d157      	bne.n	8008968 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2200      	movs	r2, #0
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fe89 	bl	80095d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a2a      	ldr	r2, [pc, #168]	; (8008974 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d117      	bne.n	8008900 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6a1a      	ldr	r2, [r3, #32]
 80088d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80088da:	4013      	ands	r3, r2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10f      	bne.n	8008900 <HAL_TIM_PWM_Stop_DMA+0x114>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6a1a      	ldr	r2, [r3, #32]
 80088e6:	f240 4344 	movw	r3, #1092	; 0x444
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d107      	bne.n	8008900 <HAL_TIM_PWM_Stop_DMA+0x114>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6a1a      	ldr	r2, [r3, #32]
 8008906:	f241 1311 	movw	r3, #4369	; 0x1111
 800890a:	4013      	ands	r3, r2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10f      	bne.n	8008930 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6a1a      	ldr	r2, [r3, #32]
 8008916:	f240 4344 	movw	r3, #1092	; 0x444
 800891a:	4013      	ands	r3, r2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d107      	bne.n	8008930 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0201 	bic.w	r2, r2, #1
 800892e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d104      	bne.n	8008940 <HAL_TIM_PWM_Stop_DMA+0x154>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800893e:	e013      	b.n	8008968 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b04      	cmp	r3, #4
 8008944:	d104      	bne.n	8008950 <HAL_TIM_PWM_Stop_DMA+0x164>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800894e:	e00b      	b.n	8008968 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	2b08      	cmp	r3, #8
 8008954:	d104      	bne.n	8008960 <HAL_TIM_PWM_Stop_DMA+0x174>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800895e:	e003      	b.n	8008968 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	40010000 	.word	0x40010000

08008978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b02      	cmp	r3, #2
 800898c:	d122      	bne.n	80089d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f003 0302 	and.w	r3, r3, #2
 8008998:	2b02      	cmp	r3, #2
 800899a:	d11b      	bne.n	80089d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f06f 0202 	mvn.w	r2, #2
 80089a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fa77 	bl	8008eae <HAL_TIM_IC_CaptureCallback>
 80089c0:	e005      	b.n	80089ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa69 	bl	8008e9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7fb ffd3 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d122      	bne.n	8008a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d11b      	bne.n	8008a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f06f 0204 	mvn.w	r2, #4
 80089f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2202      	movs	r2, #2
 80089fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa4d 	bl	8008eae <HAL_TIM_IC_CaptureCallback>
 8008a14:	e005      	b.n	8008a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fa3f 	bl	8008e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7fb ffa9 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d122      	bne.n	8008a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b08      	cmp	r3, #8
 8008a42:	d11b      	bne.n	8008a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f06f 0208 	mvn.w	r2, #8
 8008a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2204      	movs	r2, #4
 8008a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa23 	bl	8008eae <HAL_TIM_IC_CaptureCallback>
 8008a68:	e005      	b.n	8008a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa15 	bl	8008e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7fb ff7f 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f003 0310 	and.w	r3, r3, #16
 8008a86:	2b10      	cmp	r3, #16
 8008a88:	d122      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f003 0310 	and.w	r3, r3, #16
 8008a94:	2b10      	cmp	r3, #16
 8008a96:	d11b      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f06f 0210 	mvn.w	r2, #16
 8008aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2208      	movs	r2, #8
 8008aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f9f9 	bl	8008eae <HAL_TIM_IC_CaptureCallback>
 8008abc:	e005      	b.n	8008aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f9eb 	bl	8008e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7fb ff55 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d10e      	bne.n	8008afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d107      	bne.n	8008afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0201 	mvn.w	r2, #1
 8008af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7fb fc92 	bl	8004420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b06:	2b80      	cmp	r3, #128	; 0x80
 8008b08:	d10e      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b14:	2b80      	cmp	r3, #128	; 0x80
 8008b16:	d107      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fe48 	bl	80097b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b32:	2b40      	cmp	r3, #64	; 0x40
 8008b34:	d10e      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b40:	2b40      	cmp	r3, #64	; 0x40
 8008b42:	d107      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f9b7 	bl	8008ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b20      	cmp	r3, #32
 8008b60:	d10e      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f003 0320 	and.w	r3, r3, #32
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d107      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f06f 0220 	mvn.w	r2, #32
 8008b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fe12 	bl	80097a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d101      	bne.n	8008ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	e0ae      	b.n	8008d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b0c      	cmp	r3, #12
 8008bb2:	f200 809f 	bhi.w	8008cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008bb6:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbc:	08008bf1 	.word	0x08008bf1
 8008bc0:	08008cf5 	.word	0x08008cf5
 8008bc4:	08008cf5 	.word	0x08008cf5
 8008bc8:	08008cf5 	.word	0x08008cf5
 8008bcc:	08008c31 	.word	0x08008c31
 8008bd0:	08008cf5 	.word	0x08008cf5
 8008bd4:	08008cf5 	.word	0x08008cf5
 8008bd8:	08008cf5 	.word	0x08008cf5
 8008bdc:	08008c73 	.word	0x08008c73
 8008be0:	08008cf5 	.word	0x08008cf5
 8008be4:	08008cf5 	.word	0x08008cf5
 8008be8:	08008cf5 	.word	0x08008cf5
 8008bec:	08008cb3 	.word	0x08008cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68b9      	ldr	r1, [r7, #8]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fac8 	bl	800918c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f042 0208 	orr.w	r2, r2, #8
 8008c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0204 	bic.w	r2, r2, #4
 8008c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6999      	ldr	r1, [r3, #24]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	691a      	ldr	r2, [r3, #16]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	619a      	str	r2, [r3, #24]
      break;
 8008c2e:	e064      	b.n	8008cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fb0e 	bl	8009258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6999      	ldr	r1, [r3, #24]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	021a      	lsls	r2, r3, #8
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	619a      	str	r2, [r3, #24]
      break;
 8008c70:	e043      	b.n	8008cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fb59 	bl	8009330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69da      	ldr	r2, [r3, #28]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0208 	orr.w	r2, r2, #8
 8008c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69da      	ldr	r2, [r3, #28]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0204 	bic.w	r2, r2, #4
 8008c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69d9      	ldr	r1, [r3, #28]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	691a      	ldr	r2, [r3, #16]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	61da      	str	r2, [r3, #28]
      break;
 8008cb0:	e023      	b.n	8008cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68b9      	ldr	r1, [r7, #8]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fba3 	bl	8009404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69da      	ldr	r2, [r3, #28]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69d9      	ldr	r1, [r3, #28]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	021a      	lsls	r2, r3, #8
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	61da      	str	r2, [r3, #28]
      break;
 8008cf2:	e002      	b.n	8008cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d101      	bne.n	8008d28 <HAL_TIM_ConfigClockSource+0x1c>
 8008d24:	2302      	movs	r3, #2
 8008d26:	e0b4      	b.n	8008e92 <HAL_TIM_ConfigClockSource+0x186>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d60:	d03e      	beq.n	8008de0 <HAL_TIM_ConfigClockSource+0xd4>
 8008d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d66:	f200 8087 	bhi.w	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d6e:	f000 8086 	beq.w	8008e7e <HAL_TIM_ConfigClockSource+0x172>
 8008d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d76:	d87f      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d78:	2b70      	cmp	r3, #112	; 0x70
 8008d7a:	d01a      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0xa6>
 8008d7c:	2b70      	cmp	r3, #112	; 0x70
 8008d7e:	d87b      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d80:	2b60      	cmp	r3, #96	; 0x60
 8008d82:	d050      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x11a>
 8008d84:	2b60      	cmp	r3, #96	; 0x60
 8008d86:	d877      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d88:	2b50      	cmp	r3, #80	; 0x50
 8008d8a:	d03c      	beq.n	8008e06 <HAL_TIM_ConfigClockSource+0xfa>
 8008d8c:	2b50      	cmp	r3, #80	; 0x50
 8008d8e:	d873      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d90:	2b40      	cmp	r3, #64	; 0x40
 8008d92:	d058      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x13a>
 8008d94:	2b40      	cmp	r3, #64	; 0x40
 8008d96:	d86f      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008d98:	2b30      	cmp	r3, #48	; 0x30
 8008d9a:	d064      	beq.n	8008e66 <HAL_TIM_ConfigClockSource+0x15a>
 8008d9c:	2b30      	cmp	r3, #48	; 0x30
 8008d9e:	d86b      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008da0:	2b20      	cmp	r3, #32
 8008da2:	d060      	beq.n	8008e66 <HAL_TIM_ConfigClockSource+0x15a>
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d867      	bhi.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d05c      	beq.n	8008e66 <HAL_TIM_ConfigClockSource+0x15a>
 8008dac:	2b10      	cmp	r3, #16
 8008dae:	d05a      	beq.n	8008e66 <HAL_TIM_ConfigClockSource+0x15a>
 8008db0:	e062      	b.n	8008e78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	6899      	ldr	r1, [r3, #8]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f000 fbe9 	bl	8009598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	609a      	str	r2, [r3, #8]
      break;
 8008dde:	e04f      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	6899      	ldr	r1, [r3, #8]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f000 fbd2 	bl	8009598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e02:	609a      	str	r2, [r3, #8]
      break;
 8008e04:	e03c      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	6859      	ldr	r1, [r3, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f000 fb46 	bl	80094a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2150      	movs	r1, #80	; 0x50
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fb9f 	bl	8009562 <TIM_ITRx_SetConfig>
      break;
 8008e24:	e02c      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6859      	ldr	r1, [r3, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f000 fb65 	bl	8009502 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2160      	movs	r1, #96	; 0x60
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fb8f 	bl	8009562 <TIM_ITRx_SetConfig>
      break;
 8008e44:	e01c      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	6859      	ldr	r1, [r3, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	461a      	mov	r2, r3
 8008e54:	f000 fb26 	bl	80094a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2140      	movs	r1, #64	; 0x40
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fb7f 	bl	8009562 <TIM_ITRx_SetConfig>
      break;
 8008e64:	e00c      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f000 fb76 	bl	8009562 <TIM_ITRx_SetConfig>
      break;
 8008e76:	e003      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e7c:	e000      	b.n	8008e80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b083      	sub	sp, #12
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d107      	bne.n	8008f12 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f10:	e02a      	b.n	8008f68 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d107      	bne.n	8008f2c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f2a:	e01d      	b.n	8008f68 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d107      	bne.n	8008f46 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2204      	movs	r2, #4
 8008f3a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f44:	e010      	b.n	8008f68 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d107      	bne.n	8008f60 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2208      	movs	r2, #8
 8008f54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f5e:	e003      	b.n	8008f68 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f7ff ffb4 	bl	8008ed6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	771a      	strb	r2, [r3, #28]
}
 8008f74:	bf00      	nop
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d10b      	bne.n	8008fac <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d136      	bne.n	8009010 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008faa:	e031      	b.n	8009010 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d10b      	bne.n	8008fce <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d125      	bne.n	8009010 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fcc:	e020      	b.n	8009010 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d10b      	bne.n	8008ff0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d114      	bne.n	8009010 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fee:	e00f      	b.n	8009010 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d10a      	bne.n	8009010 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d103      	bne.n	8009010 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f7fb fcaf 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	771a      	strb	r2, [r3, #28]
}
 800901c:	bf00      	nop
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009030:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	429a      	cmp	r2, r3
 800903a:	d103      	bne.n	8009044 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	771a      	strb	r2, [r3, #28]
 8009042:	e019      	b.n	8009078 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	429a      	cmp	r2, r3
 800904c:	d103      	bne.n	8009056 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2202      	movs	r2, #2
 8009052:	771a      	strb	r2, [r3, #28]
 8009054:	e010      	b.n	8009078 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	429a      	cmp	r2, r3
 800905e:	d103      	bne.n	8009068 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2204      	movs	r2, #4
 8009064:	771a      	strb	r2, [r3, #28]
 8009066:	e007      	b.n	8009078 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	429a      	cmp	r2, r3
 8009070:	d102      	bne.n	8009078 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2208      	movs	r2, #8
 8009076:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f7fb fbfb 	bl	8004874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	771a      	strb	r2, [r3, #28]
}
 8009084:	bf00      	nop
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a34      	ldr	r2, [pc, #208]	; (8009170 <TIM_Base_SetConfig+0xe4>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d00f      	beq.n	80090c4 <TIM_Base_SetConfig+0x38>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090aa:	d00b      	beq.n	80090c4 <TIM_Base_SetConfig+0x38>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a31      	ldr	r2, [pc, #196]	; (8009174 <TIM_Base_SetConfig+0xe8>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d007      	beq.n	80090c4 <TIM_Base_SetConfig+0x38>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a30      	ldr	r2, [pc, #192]	; (8009178 <TIM_Base_SetConfig+0xec>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d003      	beq.n	80090c4 <TIM_Base_SetConfig+0x38>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a2f      	ldr	r2, [pc, #188]	; (800917c <TIM_Base_SetConfig+0xf0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d108      	bne.n	80090d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a25      	ldr	r2, [pc, #148]	; (8009170 <TIM_Base_SetConfig+0xe4>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d01b      	beq.n	8009116 <TIM_Base_SetConfig+0x8a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e4:	d017      	beq.n	8009116 <TIM_Base_SetConfig+0x8a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a22      	ldr	r2, [pc, #136]	; (8009174 <TIM_Base_SetConfig+0xe8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d013      	beq.n	8009116 <TIM_Base_SetConfig+0x8a>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a21      	ldr	r2, [pc, #132]	; (8009178 <TIM_Base_SetConfig+0xec>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00f      	beq.n	8009116 <TIM_Base_SetConfig+0x8a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a20      	ldr	r2, [pc, #128]	; (800917c <TIM_Base_SetConfig+0xf0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d00b      	beq.n	8009116 <TIM_Base_SetConfig+0x8a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a1f      	ldr	r2, [pc, #124]	; (8009180 <TIM_Base_SetConfig+0xf4>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d007      	beq.n	8009116 <TIM_Base_SetConfig+0x8a>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a1e      	ldr	r2, [pc, #120]	; (8009184 <TIM_Base_SetConfig+0xf8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d003      	beq.n	8009116 <TIM_Base_SetConfig+0x8a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a1d      	ldr	r2, [pc, #116]	; (8009188 <TIM_Base_SetConfig+0xfc>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d108      	bne.n	8009128 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800911c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4313      	orrs	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a08      	ldr	r2, [pc, #32]	; (8009170 <TIM_Base_SetConfig+0xe4>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d103      	bne.n	800915c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	691a      	ldr	r2, [r3, #16]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	615a      	str	r2, [r3, #20]
}
 8009162:	bf00      	nop
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	40010000 	.word	0x40010000
 8009174:	40000400 	.word	0x40000400
 8009178:	40000800 	.word	0x40000800
 800917c:	40000c00 	.word	0x40000c00
 8009180:	40014000 	.word	0x40014000
 8009184:	40014400 	.word	0x40014400
 8009188:	40014800 	.word	0x40014800

0800918c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	f023 0201 	bic.w	r2, r3, #1
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f023 0303 	bic.w	r3, r3, #3
 80091c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f023 0302 	bic.w	r3, r3, #2
 80091d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	4313      	orrs	r3, r2
 80091de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a1c      	ldr	r2, [pc, #112]	; (8009254 <TIM_OC1_SetConfig+0xc8>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d10c      	bne.n	8009202 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f023 0308 	bic.w	r3, r3, #8
 80091ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f023 0304 	bic.w	r3, r3, #4
 8009200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a13      	ldr	r2, [pc, #76]	; (8009254 <TIM_OC1_SetConfig+0xc8>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d111      	bne.n	800922e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4313      	orrs	r3, r2
 8009222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	4313      	orrs	r3, r2
 800922c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	621a      	str	r2, [r3, #32]
}
 8009248:	bf00      	nop
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	40010000 	.word	0x40010000

08009258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	f023 0210 	bic.w	r2, r3, #16
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800928e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	021b      	lsls	r3, r3, #8
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	4313      	orrs	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f023 0320 	bic.w	r3, r3, #32
 80092a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a1e      	ldr	r2, [pc, #120]	; (800932c <TIM_OC2_SetConfig+0xd4>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d10d      	bne.n	80092d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	011b      	lsls	r3, r3, #4
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a15      	ldr	r2, [pc, #84]	; (800932c <TIM_OC2_SetConfig+0xd4>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d113      	bne.n	8009304 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	4313      	orrs	r3, r2
 8009302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	621a      	str	r2, [r3, #32]
}
 800931e:	bf00      	nop
 8009320:	371c      	adds	r7, #28
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	40010000 	.word	0x40010000

08009330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800935e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 0303 	bic.w	r3, r3, #3
 8009366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	021b      	lsls	r3, r3, #8
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4313      	orrs	r3, r2
 8009384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a1d      	ldr	r2, [pc, #116]	; (8009400 <TIM_OC3_SetConfig+0xd0>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d10d      	bne.n	80093aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	021b      	lsls	r3, r3, #8
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	4313      	orrs	r3, r2
 80093a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a14      	ldr	r2, [pc, #80]	; (8009400 <TIM_OC3_SetConfig+0xd0>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d113      	bne.n	80093da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	621a      	str	r2, [r3, #32]
}
 80093f4:	bf00      	nop
 80093f6:	371c      	adds	r7, #28
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	40010000 	.word	0x40010000

08009404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800943a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	4313      	orrs	r3, r2
 8009446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800944e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	031b      	lsls	r3, r3, #12
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	4313      	orrs	r3, r2
 800945a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a10      	ldr	r2, [pc, #64]	; (80094a0 <TIM_OC4_SetConfig+0x9c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d109      	bne.n	8009478 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800946a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	019b      	lsls	r3, r3, #6
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	4313      	orrs	r3, r2
 8009476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	621a      	str	r2, [r3, #32]
}
 8009492:	bf00      	nop
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	40010000 	.word	0x40010000

080094a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	f023 0201 	bic.w	r2, r3, #1
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f023 030a 	bic.w	r3, r3, #10
 80094e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	621a      	str	r2, [r3, #32]
}
 80094f6:	bf00      	nop
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009502:	b480      	push	{r7}
 8009504:	b087      	sub	sp, #28
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	f023 0210 	bic.w	r2, r3, #16
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800952c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	031b      	lsls	r3, r3, #12
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	4313      	orrs	r3, r2
 8009536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800953e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	4313      	orrs	r3, r2
 8009548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	697a      	ldr	r2, [r7, #20]
 800954e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	621a      	str	r2, [r3, #32]
}
 8009556:	bf00      	nop
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4313      	orrs	r3, r2
 8009580:	f043 0307 	orr.w	r3, r3, #7
 8009584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	609a      	str	r2, [r3, #8]
}
 800958c:	bf00      	nop
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	021a      	lsls	r2, r3, #8
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	4313      	orrs	r3, r2
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	609a      	str	r2, [r3, #8]
}
 80095cc:	bf00      	nop
 80095ce:	371c      	adds	r7, #28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f003 031f 	and.w	r3, r3, #31
 80095ea:	2201      	movs	r2, #1
 80095ec:	fa02 f303 	lsl.w	r3, r2, r3
 80095f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a1a      	ldr	r2, [r3, #32]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	43db      	mvns	r3, r3
 80095fa:	401a      	ands	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a1a      	ldr	r2, [r3, #32]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f003 031f 	and.w	r3, r3, #31
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	fa01 f303 	lsl.w	r3, r1, r3
 8009610:	431a      	orrs	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	621a      	str	r2, [r3, #32]
}
 8009616:	bf00      	nop
 8009618:	371c      	adds	r7, #28
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
	...

08009624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009638:	2302      	movs	r3, #2
 800963a:	e050      	b.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a1c      	ldr	r2, [pc, #112]	; (80096ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d018      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009688:	d013      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a18      	ldr	r2, [pc, #96]	; (80096f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00e      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a16      	ldr	r2, [pc, #88]	; (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d009      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a15      	ldr	r2, [pc, #84]	; (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d004      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a13      	ldr	r2, [pc, #76]	; (80096fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d10c      	bne.n	80096cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40000800 	.word	0x40000800
 80096f8:	40000c00 	.word	0x40000c00
 80096fc:	40014000 	.word	0x40014000

08009700 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009714:	2b01      	cmp	r3, #1
 8009716:	d101      	bne.n	800971c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009718:	2302      	movs	r3, #2
 800971a:	e03d      	b.n	8009798 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	4313      	orrs	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	4313      	orrs	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4313      	orrs	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	4313      	orrs	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e03f      	b.n	800985e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d106      	bne.n	80097f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7fa fd60 	bl	80042b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2224      	movs	r2, #36	; 0x24
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800980e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fddf 	bl	800a3d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	695a      	ldr	r2, [r3, #20]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2220      	movs	r2, #32
 8009858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b08a      	sub	sp, #40	; 0x28
 800986a:	af02      	add	r7, sp, #8
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	603b      	str	r3, [r7, #0]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b20      	cmp	r3, #32
 8009884:	d17c      	bne.n	8009980 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <HAL_UART_Transmit+0x2c>
 800988c:	88fb      	ldrh	r3, [r7, #6]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e075      	b.n	8009982 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800989c:	2b01      	cmp	r3, #1
 800989e:	d101      	bne.n	80098a4 <HAL_UART_Transmit+0x3e>
 80098a0:	2302      	movs	r3, #2
 80098a2:	e06e      	b.n	8009982 <HAL_UART_Transmit+0x11c>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2221      	movs	r2, #33	; 0x21
 80098b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098ba:	f7fb fa11 	bl	8004ce0 <HAL_GetTick>
 80098be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	88fa      	ldrh	r2, [r7, #6]
 80098c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	88fa      	ldrh	r2, [r7, #6]
 80098ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d4:	d108      	bne.n	80098e8 <HAL_UART_Transmit+0x82>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d104      	bne.n	80098e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	61bb      	str	r3, [r7, #24]
 80098e6:	e003      	b.n	80098f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098ec:	2300      	movs	r3, #0
 80098ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80098f8:	e02a      	b.n	8009950 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2200      	movs	r2, #0
 8009902:	2180      	movs	r1, #128	; 0x80
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 fb1f 	bl	8009f48 <UART_WaitOnFlagUntilTimeout>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e036      	b.n	8009982 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10b      	bne.n	8009932 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	881b      	ldrh	r3, [r3, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	3302      	adds	r3, #2
 800992e:	61bb      	str	r3, [r7, #24]
 8009930:	e007      	b.n	8009942 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	3301      	adds	r3, #1
 8009940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009946:	b29b      	uxth	r3, r3
 8009948:	3b01      	subs	r3, #1
 800994a:	b29a      	uxth	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009954:	b29b      	uxth	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1cf      	bne.n	80098fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2200      	movs	r2, #0
 8009962:	2140      	movs	r1, #64	; 0x40
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f000 faef 	bl	8009f48 <UART_WaitOnFlagUntilTimeout>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e006      	b.n	8009982 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2220      	movs	r2, #32
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	e000      	b.n	8009982 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009980:	2302      	movs	r3, #2
  }
}
 8009982:	4618      	mov	r0, r3
 8009984:	3720      	adds	r7, #32
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	4613      	mov	r3, r2
 8009996:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b20      	cmp	r3, #32
 80099a2:	d11d      	bne.n	80099e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <HAL_UART_Receive_IT+0x26>
 80099aa:	88fb      	ldrh	r3, [r7, #6]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e016      	b.n	80099e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d101      	bne.n	80099c2 <HAL_UART_Receive_IT+0x38>
 80099be:	2302      	movs	r3, #2
 80099c0:	e00f      	b.n	80099e2 <HAL_UART_Receive_IT+0x58>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80099d0:	88fb      	ldrh	r3, [r7, #6]
 80099d2:	461a      	mov	r2, r3
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 fb24 	bl	800a024 <UART_Start_Receive_IT>
 80099dc:	4603      	mov	r3, r0
 80099de:	e000      	b.n	80099e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80099e0:	2302      	movs	r3, #2
  }
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b0ba      	sub	sp, #232	; 0xe8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a22:	f003 030f 	and.w	r3, r3, #15
 8009a26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10f      	bne.n	8009a52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a36:	f003 0320 	and.w	r3, r3, #32
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d009      	beq.n	8009a52 <HAL_UART_IRQHandler+0x66>
 8009a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a42:	f003 0320 	and.w	r3, r3, #32
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fc07 	bl	800a25e <UART_Receive_IT>
      return;
 8009a50:	e256      	b.n	8009f00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 80de 	beq.w	8009c18 <HAL_UART_IRQHandler+0x22c>
 8009a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d106      	bne.n	8009a76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 80d1 	beq.w	8009c18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00b      	beq.n	8009a9a <HAL_UART_IRQHandler+0xae>
 8009a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d005      	beq.n	8009a9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	f043 0201 	orr.w	r2, r3, #1
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a9e:	f003 0304 	and.w	r3, r3, #4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00b      	beq.n	8009abe <HAL_UART_IRQHandler+0xd2>
 8009aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d005      	beq.n	8009abe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	f043 0202 	orr.w	r2, r3, #2
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ac2:	f003 0302 	and.w	r3, r3, #2
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00b      	beq.n	8009ae2 <HAL_UART_IRQHandler+0xf6>
 8009aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d005      	beq.n	8009ae2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ada:	f043 0204 	orr.w	r2, r3, #4
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae6:	f003 0308 	and.w	r3, r3, #8
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d011      	beq.n	8009b12 <HAL_UART_IRQHandler+0x126>
 8009aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009af2:	f003 0320 	and.w	r3, r3, #32
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d105      	bne.n	8009b06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d005      	beq.n	8009b12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0a:	f043 0208 	orr.w	r2, r3, #8
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 81ed 	beq.w	8009ef6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b20:	f003 0320 	and.w	r3, r3, #32
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d008      	beq.n	8009b3a <HAL_UART_IRQHandler+0x14e>
 8009b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b2c:	f003 0320 	and.w	r3, r3, #32
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d002      	beq.n	8009b3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fb92 	bl	800a25e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b44:	2b40      	cmp	r3, #64	; 0x40
 8009b46:	bf0c      	ite	eq
 8009b48:	2301      	moveq	r3, #1
 8009b4a:	2300      	movne	r3, #0
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b56:	f003 0308 	and.w	r3, r3, #8
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d103      	bne.n	8009b66 <HAL_UART_IRQHandler+0x17a>
 8009b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d04f      	beq.n	8009c06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa9a 	bl	800a0a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b76:	2b40      	cmp	r3, #64	; 0x40
 8009b78:	d141      	bne.n	8009bfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3314      	adds	r3, #20
 8009b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b88:	e853 3f00 	ldrex	r3, [r3]
 8009b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3314      	adds	r3, #20
 8009ba2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ba6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009bb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009bb6:	e841 2300 	strex	r3, r2, [r1]
 8009bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1d9      	bne.n	8009b7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d013      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	4a7d      	ldr	r2, [pc, #500]	; (8009dc8 <HAL_UART_IRQHandler+0x3dc>)
 8009bd4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fb fb86 	bl	80052ec <HAL_DMA_Abort_IT>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d016      	beq.n	8009c14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bf4:	e00e      	b.n	8009c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f990 	bl	8009f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bfc:	e00a      	b.n	8009c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f98c 	bl	8009f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c04:	e006      	b.n	8009c14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f988 	bl	8009f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009c12:	e170      	b.n	8009ef6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c14:	bf00      	nop
    return;
 8009c16:	e16e      	b.n	8009ef6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	f040 814a 	bne.w	8009eb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c26:	f003 0310 	and.w	r3, r3, #16
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 8143 	beq.w	8009eb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c34:	f003 0310 	and.w	r3, r3, #16
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 813c 	beq.w	8009eb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60bb      	str	r3, [r7, #8]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	60bb      	str	r3, [r7, #8]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	60bb      	str	r3, [r7, #8]
 8009c52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5e:	2b40      	cmp	r3, #64	; 0x40
 8009c60:	f040 80b4 	bne.w	8009dcc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 8140 	beq.w	8009efa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c82:	429a      	cmp	r2, r3
 8009c84:	f080 8139 	bcs.w	8009efa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c9a:	f000 8088 	beq.w	8009dae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	330c      	adds	r3, #12
 8009ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	330c      	adds	r3, #12
 8009cc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009cca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009cce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1d9      	bne.n	8009c9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3314      	adds	r3, #20
 8009cf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cfc:	f023 0301 	bic.w	r3, r3, #1
 8009d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3314      	adds	r3, #20
 8009d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d1a:	e841 2300 	strex	r3, r2, [r1]
 8009d1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1e1      	bne.n	8009cea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3314      	adds	r3, #20
 8009d2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d30:	e853 3f00 	ldrex	r3, [r3]
 8009d34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3314      	adds	r3, #20
 8009d46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d52:	e841 2300 	strex	r3, r2, [r1]
 8009d56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1e3      	bne.n	8009d26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2220      	movs	r2, #32
 8009d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	330c      	adds	r3, #12
 8009d72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d7e:	f023 0310 	bic.w	r3, r3, #16
 8009d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	330c      	adds	r3, #12
 8009d8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009d90:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e3      	bne.n	8009d6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fb fa2f 	bl	800520c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f8b6 	bl	8009f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009dc4:	e099      	b.n	8009efa <HAL_UART_IRQHandler+0x50e>
 8009dc6:	bf00      	nop
 8009dc8:	0800a167 	.word	0x0800a167
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 808b 	beq.w	8009efe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8086 	beq.w	8009efe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	330c      	adds	r3, #12
 8009df8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfc:	e853 3f00 	ldrex	r3, [r3]
 8009e00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	330c      	adds	r3, #12
 8009e12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009e16:	647a      	str	r2, [r7, #68]	; 0x44
 8009e18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e3      	bne.n	8009df2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3314      	adds	r3, #20
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	e853 3f00 	ldrex	r3, [r3]
 8009e38:	623b      	str	r3, [r7, #32]
   return(result);
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	f023 0301 	bic.w	r3, r3, #1
 8009e40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3314      	adds	r3, #20
 8009e4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e4e:	633a      	str	r2, [r7, #48]	; 0x30
 8009e50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e56:	e841 2300 	strex	r3, r2, [r1]
 8009e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1e3      	bne.n	8009e2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	330c      	adds	r3, #12
 8009e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	e853 3f00 	ldrex	r3, [r3]
 8009e7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 0310 	bic.w	r3, r3, #16
 8009e86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	330c      	adds	r3, #12
 8009e90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009e94:	61fa      	str	r2, [r7, #28]
 8009e96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e98:	69b9      	ldr	r1, [r7, #24]
 8009e9a:	69fa      	ldr	r2, [r7, #28]
 8009e9c:	e841 2300 	strex	r3, r2, [r1]
 8009ea0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1e3      	bne.n	8009e70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ea8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f83e 	bl	8009f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009eb4:	e023      	b.n	8009efe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d009      	beq.n	8009ed6 <HAL_UART_IRQHandler+0x4ea>
 8009ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f95d 	bl	800a18e <UART_Transmit_IT>
    return;
 8009ed4:	e014      	b.n	8009f00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00e      	beq.n	8009f00 <HAL_UART_IRQHandler+0x514>
 8009ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d008      	beq.n	8009f00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f99d 	bl	800a22e <UART_EndTransmit_IT>
    return;
 8009ef4:	e004      	b.n	8009f00 <HAL_UART_IRQHandler+0x514>
    return;
 8009ef6:	bf00      	nop
 8009ef8:	e002      	b.n	8009f00 <HAL_UART_IRQHandler+0x514>
      return;
 8009efa:	bf00      	nop
 8009efc:	e000      	b.n	8009f00 <HAL_UART_IRQHandler+0x514>
      return;
 8009efe:	bf00      	nop
  }
}
 8009f00:	37e8      	adds	r7, #232	; 0xe8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop

08009f08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b090      	sub	sp, #64	; 0x40
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	4613      	mov	r3, r2
 8009f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f58:	e050      	b.n	8009ffc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f60:	d04c      	beq.n	8009ffc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d007      	beq.n	8009f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f68:	f7fa feba 	bl	8004ce0 <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d241      	bcs.n	8009ffc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	330c      	adds	r3, #12
 8009f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	e853 3f00 	ldrex	r3, [r3]
 8009f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	330c      	adds	r3, #12
 8009f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f98:	637a      	str	r2, [r7, #52]	; 0x34
 8009f9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fa0:	e841 2300 	strex	r3, r2, [r1]
 8009fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1e5      	bne.n	8009f78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3314      	adds	r3, #20
 8009fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	e853 3f00 	ldrex	r3, [r3]
 8009fba:	613b      	str	r3, [r7, #16]
   return(result);
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f023 0301 	bic.w	r3, r3, #1
 8009fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3314      	adds	r3, #20
 8009fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fcc:	623a      	str	r2, [r7, #32]
 8009fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd0:	69f9      	ldr	r1, [r7, #28]
 8009fd2:	6a3a      	ldr	r2, [r7, #32]
 8009fd4:	e841 2300 	strex	r3, r2, [r1]
 8009fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1e5      	bne.n	8009fac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e00f      	b.n	800a01c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	4013      	ands	r3, r2
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	429a      	cmp	r2, r3
 800a00a:	bf0c      	ite	eq
 800a00c:	2301      	moveq	r3, #1
 800a00e:	2300      	movne	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	461a      	mov	r2, r3
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	429a      	cmp	r2, r3
 800a018:	d09f      	beq.n	8009f5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3740      	adds	r7, #64	; 0x40
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4613      	mov	r3, r2
 800a030:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	88fa      	ldrh	r2, [r7, #6]
 800a03c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	88fa      	ldrh	r2, [r7, #6]
 800a042:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2222      	movs	r2, #34	; 0x22
 800a04e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d007      	beq.n	800a072 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68da      	ldr	r2, [r3, #12]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a070:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	695a      	ldr	r2, [r3, #20]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f042 0201 	orr.w	r2, r2, #1
 800a080:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68da      	ldr	r2, [r3, #12]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f042 0220 	orr.w	r2, r2, #32
 800a090:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b095      	sub	sp, #84	; 0x54
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	330c      	adds	r3, #12
 800a0ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b2:	e853 3f00 	ldrex	r3, [r3]
 800a0b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	330c      	adds	r3, #12
 800a0c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0c8:	643a      	str	r2, [r7, #64]	; 0x40
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0d0:	e841 2300 	strex	r3, r2, [r1]
 800a0d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e5      	bne.n	800a0a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3314      	adds	r3, #20
 800a0e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	e853 3f00 	ldrex	r3, [r3]
 800a0ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	f023 0301 	bic.w	r3, r3, #1
 800a0f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3314      	adds	r3, #20
 800a0fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a104:	e841 2300 	strex	r3, r2, [r1]
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e5      	bne.n	800a0dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a114:	2b01      	cmp	r3, #1
 800a116:	d119      	bne.n	800a14c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	330c      	adds	r3, #12
 800a11e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	e853 3f00 	ldrex	r3, [r3]
 800a126:	60bb      	str	r3, [r7, #8]
   return(result);
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	f023 0310 	bic.w	r3, r3, #16
 800a12e:	647b      	str	r3, [r7, #68]	; 0x44
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	330c      	adds	r3, #12
 800a136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a138:	61ba      	str	r2, [r7, #24]
 800a13a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13c:	6979      	ldr	r1, [r7, #20]
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	e841 2300 	strex	r3, r2, [r1]
 800a144:	613b      	str	r3, [r7, #16]
   return(result);
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e5      	bne.n	800a118 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2220      	movs	r2, #32
 800a150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a15a:	bf00      	nop
 800a15c:	3754      	adds	r7, #84	; 0x54
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a172:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7ff fecb 	bl	8009f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a186:	bf00      	nop
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a18e:	b480      	push	{r7}
 800a190:	b085      	sub	sp, #20
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b21      	cmp	r3, #33	; 0x21
 800a1a0:	d13e      	bne.n	800a220 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1aa:	d114      	bne.n	800a1d6 <UART_Transmit_IT+0x48>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d110      	bne.n	800a1d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	1c9a      	adds	r2, r3, #2
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	621a      	str	r2, [r3, #32]
 800a1d4:	e008      	b.n	800a1e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	1c59      	adds	r1, r3, #1
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	6211      	str	r1, [r2, #32]
 800a1e0:	781a      	ldrb	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10f      	bne.n	800a21c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a20a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68da      	ldr	r2, [r3, #12]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a21a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	e000      	b.n	800a222 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a220:	2302      	movs	r3, #2
  }
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a244:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2220      	movs	r2, #32
 800a24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7ff fe5a 	bl	8009f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b08c      	sub	sp, #48	; 0x30
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b22      	cmp	r3, #34	; 0x22
 800a270:	f040 80ab 	bne.w	800a3ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a27c:	d117      	bne.n	800a2ae <UART_Receive_IT+0x50>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d113      	bne.n	800a2ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a286:	2300      	movs	r3, #0
 800a288:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	b29b      	uxth	r3, r3
 800a298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a6:	1c9a      	adds	r2, r3, #2
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	629a      	str	r2, [r3, #40]	; 0x28
 800a2ac:	e026      	b.n	800a2fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2c0:	d007      	beq.n	800a2d2 <UART_Receive_IT+0x74>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10a      	bne.n	800a2e0 <UART_Receive_IT+0x82>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d106      	bne.n	800a2e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	701a      	strb	r2, [r3, #0]
 800a2de:	e008      	b.n	800a2f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a300:	b29b      	uxth	r3, r3
 800a302:	3b01      	subs	r3, #1
 800a304:	b29b      	uxth	r3, r3
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	4619      	mov	r1, r3
 800a30a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d15a      	bne.n	800a3c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f022 0220 	bic.w	r2, r2, #32
 800a31e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a32e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	695a      	ldr	r2, [r3, #20]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f022 0201 	bic.w	r2, r2, #1
 800a33e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2220      	movs	r2, #32
 800a344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d135      	bne.n	800a3bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	330c      	adds	r3, #12
 800a35c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	e853 3f00 	ldrex	r3, [r3]
 800a364:	613b      	str	r3, [r7, #16]
   return(result);
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f023 0310 	bic.w	r3, r3, #16
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	330c      	adds	r3, #12
 800a374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a376:	623a      	str	r2, [r7, #32]
 800a378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37a:	69f9      	ldr	r1, [r7, #28]
 800a37c:	6a3a      	ldr	r2, [r7, #32]
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	61bb      	str	r3, [r7, #24]
   return(result);
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e5      	bne.n	800a356 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0310 	and.w	r3, r3, #16
 800a394:	2b10      	cmp	r3, #16
 800a396:	d10a      	bne.n	800a3ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff fdbb 	bl	8009f30 <HAL_UARTEx_RxEventCallback>
 800a3ba:	e002      	b.n	800a3c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7f7 ffcd 	bl	800235c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	e002      	b.n	800a3cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e000      	b.n	800a3cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a3ca:	2302      	movs	r3, #2
  }
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3730      	adds	r7, #48	; 0x30
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3d8:	b0c0      	sub	sp, #256	; 0x100
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f0:	68d9      	ldr	r1, [r3, #12]
 800a3f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	ea40 0301 	orr.w	r3, r0, r1
 800a3fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a3fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a402:	689a      	ldr	r2, [r3, #8]
 800a404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	431a      	orrs	r2, r3
 800a40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	431a      	orrs	r2, r3
 800a414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a42c:	f021 010c 	bic.w	r1, r1, #12
 800a430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a43a:	430b      	orrs	r3, r1
 800a43c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a43e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a44a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a44e:	6999      	ldr	r1, [r3, #24]
 800a450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	ea40 0301 	orr.w	r3, r0, r1
 800a45a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	4b8f      	ldr	r3, [pc, #572]	; (800a6a0 <UART_SetConfig+0x2cc>)
 800a464:	429a      	cmp	r2, r3
 800a466:	d005      	beq.n	800a474 <UART_SetConfig+0xa0>
 800a468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	4b8d      	ldr	r3, [pc, #564]	; (800a6a4 <UART_SetConfig+0x2d0>)
 800a470:	429a      	cmp	r2, r3
 800a472:	d104      	bne.n	800a47e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a474:	f7fd fa74 	bl	8007960 <HAL_RCC_GetPCLK2Freq>
 800a478:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a47c:	e003      	b.n	800a486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a47e:	f7fd fa5b 	bl	8007938 <HAL_RCC_GetPCLK1Freq>
 800a482:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a48a:	69db      	ldr	r3, [r3, #28]
 800a48c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a490:	f040 810c 	bne.w	800a6ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a498:	2200      	movs	r2, #0
 800a49a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a49e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a4a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	1891      	adds	r1, r2, r2
 800a4ac:	65b9      	str	r1, [r7, #88]	; 0x58
 800a4ae:	415b      	adcs	r3, r3
 800a4b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	eb12 0801 	adds.w	r8, r2, r1
 800a4bc:	4629      	mov	r1, r5
 800a4be:	eb43 0901 	adc.w	r9, r3, r1
 800a4c2:	f04f 0200 	mov.w	r2, #0
 800a4c6:	f04f 0300 	mov.w	r3, #0
 800a4ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a4ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a4d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a4d6:	4690      	mov	r8, r2
 800a4d8:	4699      	mov	r9, r3
 800a4da:	4623      	mov	r3, r4
 800a4dc:	eb18 0303 	adds.w	r3, r8, r3
 800a4e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4e4:	462b      	mov	r3, r5
 800a4e6:	eb49 0303 	adc.w	r3, r9, r3
 800a4ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a4ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a4fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a4fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a502:	460b      	mov	r3, r1
 800a504:	18db      	adds	r3, r3, r3
 800a506:	653b      	str	r3, [r7, #80]	; 0x50
 800a508:	4613      	mov	r3, r2
 800a50a:	eb42 0303 	adc.w	r3, r2, r3
 800a50e:	657b      	str	r3, [r7, #84]	; 0x54
 800a510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a518:	f7f6 fb5e 	bl	8000bd8 <__aeabi_uldivmod>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	4b61      	ldr	r3, [pc, #388]	; (800a6a8 <UART_SetConfig+0x2d4>)
 800a522:	fba3 2302 	umull	r2, r3, r3, r2
 800a526:	095b      	lsrs	r3, r3, #5
 800a528:	011c      	lsls	r4, r3, #4
 800a52a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a534:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a53c:	4642      	mov	r2, r8
 800a53e:	464b      	mov	r3, r9
 800a540:	1891      	adds	r1, r2, r2
 800a542:	64b9      	str	r1, [r7, #72]	; 0x48
 800a544:	415b      	adcs	r3, r3
 800a546:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a54c:	4641      	mov	r1, r8
 800a54e:	eb12 0a01 	adds.w	sl, r2, r1
 800a552:	4649      	mov	r1, r9
 800a554:	eb43 0b01 	adc.w	fp, r3, r1
 800a558:	f04f 0200 	mov.w	r2, #0
 800a55c:	f04f 0300 	mov.w	r3, #0
 800a560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a56c:	4692      	mov	sl, r2
 800a56e:	469b      	mov	fp, r3
 800a570:	4643      	mov	r3, r8
 800a572:	eb1a 0303 	adds.w	r3, sl, r3
 800a576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a57a:	464b      	mov	r3, r9
 800a57c:	eb4b 0303 	adc.w	r3, fp, r3
 800a580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a590:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a598:	460b      	mov	r3, r1
 800a59a:	18db      	adds	r3, r3, r3
 800a59c:	643b      	str	r3, [r7, #64]	; 0x40
 800a59e:	4613      	mov	r3, r2
 800a5a0:	eb42 0303 	adc.w	r3, r2, r3
 800a5a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a5a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a5ae:	f7f6 fb13 	bl	8000bd8 <__aeabi_uldivmod>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	4b3b      	ldr	r3, [pc, #236]	; (800a6a8 <UART_SetConfig+0x2d4>)
 800a5ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a5be:	095b      	lsrs	r3, r3, #5
 800a5c0:	2264      	movs	r2, #100	; 0x64
 800a5c2:	fb02 f303 	mul.w	r3, r2, r3
 800a5c6:	1acb      	subs	r3, r1, r3
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a5ce:	4b36      	ldr	r3, [pc, #216]	; (800a6a8 <UART_SetConfig+0x2d4>)
 800a5d0:	fba3 2302 	umull	r2, r3, r3, r2
 800a5d4:	095b      	lsrs	r3, r3, #5
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a5dc:	441c      	add	r4, r3
 800a5de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a5e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a5ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	1891      	adds	r1, r2, r2
 800a5f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a5f8:	415b      	adcs	r3, r3
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a600:	4641      	mov	r1, r8
 800a602:	1851      	adds	r1, r2, r1
 800a604:	6339      	str	r1, [r7, #48]	; 0x30
 800a606:	4649      	mov	r1, r9
 800a608:	414b      	adcs	r3, r1
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34
 800a60c:	f04f 0200 	mov.w	r2, #0
 800a610:	f04f 0300 	mov.w	r3, #0
 800a614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a618:	4659      	mov	r1, fp
 800a61a:	00cb      	lsls	r3, r1, #3
 800a61c:	4651      	mov	r1, sl
 800a61e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a622:	4651      	mov	r1, sl
 800a624:	00ca      	lsls	r2, r1, #3
 800a626:	4610      	mov	r0, r2
 800a628:	4619      	mov	r1, r3
 800a62a:	4603      	mov	r3, r0
 800a62c:	4642      	mov	r2, r8
 800a62e:	189b      	adds	r3, r3, r2
 800a630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a634:	464b      	mov	r3, r9
 800a636:	460a      	mov	r2, r1
 800a638:	eb42 0303 	adc.w	r3, r2, r3
 800a63c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a64c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a654:	460b      	mov	r3, r1
 800a656:	18db      	adds	r3, r3, r3
 800a658:	62bb      	str	r3, [r7, #40]	; 0x28
 800a65a:	4613      	mov	r3, r2
 800a65c:	eb42 0303 	adc.w	r3, r2, r3
 800a660:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a66a:	f7f6 fab5 	bl	8000bd8 <__aeabi_uldivmod>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	4b0d      	ldr	r3, [pc, #52]	; (800a6a8 <UART_SetConfig+0x2d4>)
 800a674:	fba3 1302 	umull	r1, r3, r3, r2
 800a678:	095b      	lsrs	r3, r3, #5
 800a67a:	2164      	movs	r1, #100	; 0x64
 800a67c:	fb01 f303 	mul.w	r3, r1, r3
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	3332      	adds	r3, #50	; 0x32
 800a686:	4a08      	ldr	r2, [pc, #32]	; (800a6a8 <UART_SetConfig+0x2d4>)
 800a688:	fba2 2303 	umull	r2, r3, r2, r3
 800a68c:	095b      	lsrs	r3, r3, #5
 800a68e:	f003 0207 	and.w	r2, r3, #7
 800a692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4422      	add	r2, r4
 800a69a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a69c:	e105      	b.n	800a8aa <UART_SetConfig+0x4d6>
 800a69e:	bf00      	nop
 800a6a0:	40011000 	.word	0x40011000
 800a6a4:	40011400 	.word	0x40011400
 800a6a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a6b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a6ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a6be:	4642      	mov	r2, r8
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	1891      	adds	r1, r2, r2
 800a6c4:	6239      	str	r1, [r7, #32]
 800a6c6:	415b      	adcs	r3, r3
 800a6c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6ce:	4641      	mov	r1, r8
 800a6d0:	1854      	adds	r4, r2, r1
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	eb43 0501 	adc.w	r5, r3, r1
 800a6d8:	f04f 0200 	mov.w	r2, #0
 800a6dc:	f04f 0300 	mov.w	r3, #0
 800a6e0:	00eb      	lsls	r3, r5, #3
 800a6e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a6e6:	00e2      	lsls	r2, r4, #3
 800a6e8:	4614      	mov	r4, r2
 800a6ea:	461d      	mov	r5, r3
 800a6ec:	4643      	mov	r3, r8
 800a6ee:	18e3      	adds	r3, r4, r3
 800a6f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a6f4:	464b      	mov	r3, r9
 800a6f6:	eb45 0303 	adc.w	r3, r5, r3
 800a6fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a6fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a70a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a70e:	f04f 0200 	mov.w	r2, #0
 800a712:	f04f 0300 	mov.w	r3, #0
 800a716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a71a:	4629      	mov	r1, r5
 800a71c:	008b      	lsls	r3, r1, #2
 800a71e:	4621      	mov	r1, r4
 800a720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a724:	4621      	mov	r1, r4
 800a726:	008a      	lsls	r2, r1, #2
 800a728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a72c:	f7f6 fa54 	bl	8000bd8 <__aeabi_uldivmod>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4b60      	ldr	r3, [pc, #384]	; (800a8b8 <UART_SetConfig+0x4e4>)
 800a736:	fba3 2302 	umull	r2, r3, r3, r2
 800a73a:	095b      	lsrs	r3, r3, #5
 800a73c:	011c      	lsls	r4, r3, #4
 800a73e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a742:	2200      	movs	r2, #0
 800a744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a74c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a750:	4642      	mov	r2, r8
 800a752:	464b      	mov	r3, r9
 800a754:	1891      	adds	r1, r2, r2
 800a756:	61b9      	str	r1, [r7, #24]
 800a758:	415b      	adcs	r3, r3
 800a75a:	61fb      	str	r3, [r7, #28]
 800a75c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a760:	4641      	mov	r1, r8
 800a762:	1851      	adds	r1, r2, r1
 800a764:	6139      	str	r1, [r7, #16]
 800a766:	4649      	mov	r1, r9
 800a768:	414b      	adcs	r3, r1
 800a76a:	617b      	str	r3, [r7, #20]
 800a76c:	f04f 0200 	mov.w	r2, #0
 800a770:	f04f 0300 	mov.w	r3, #0
 800a774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a778:	4659      	mov	r1, fp
 800a77a:	00cb      	lsls	r3, r1, #3
 800a77c:	4651      	mov	r1, sl
 800a77e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a782:	4651      	mov	r1, sl
 800a784:	00ca      	lsls	r2, r1, #3
 800a786:	4610      	mov	r0, r2
 800a788:	4619      	mov	r1, r3
 800a78a:	4603      	mov	r3, r0
 800a78c:	4642      	mov	r2, r8
 800a78e:	189b      	adds	r3, r3, r2
 800a790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a794:	464b      	mov	r3, r9
 800a796:	460a      	mov	r2, r1
 800a798:	eb42 0303 	adc.w	r3, r2, r3
 800a79c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a7ac:	f04f 0200 	mov.w	r2, #0
 800a7b0:	f04f 0300 	mov.w	r3, #0
 800a7b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	008b      	lsls	r3, r1, #2
 800a7bc:	4641      	mov	r1, r8
 800a7be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7c2:	4641      	mov	r1, r8
 800a7c4:	008a      	lsls	r2, r1, #2
 800a7c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a7ca:	f7f6 fa05 	bl	8000bd8 <__aeabi_uldivmod>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	4b39      	ldr	r3, [pc, #228]	; (800a8b8 <UART_SetConfig+0x4e4>)
 800a7d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a7d8:	095b      	lsrs	r3, r3, #5
 800a7da:	2164      	movs	r1, #100	; 0x64
 800a7dc:	fb01 f303 	mul.w	r3, r1, r3
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	011b      	lsls	r3, r3, #4
 800a7e4:	3332      	adds	r3, #50	; 0x32
 800a7e6:	4a34      	ldr	r2, [pc, #208]	; (800a8b8 <UART_SetConfig+0x4e4>)
 800a7e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ec:	095b      	lsrs	r3, r3, #5
 800a7ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7f2:	441c      	add	r4, r3
 800a7f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	673b      	str	r3, [r7, #112]	; 0x70
 800a7fc:	677a      	str	r2, [r7, #116]	; 0x74
 800a7fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a802:	4642      	mov	r2, r8
 800a804:	464b      	mov	r3, r9
 800a806:	1891      	adds	r1, r2, r2
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	415b      	adcs	r3, r3
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a812:	4641      	mov	r1, r8
 800a814:	1851      	adds	r1, r2, r1
 800a816:	6039      	str	r1, [r7, #0]
 800a818:	4649      	mov	r1, r9
 800a81a:	414b      	adcs	r3, r1
 800a81c:	607b      	str	r3, [r7, #4]
 800a81e:	f04f 0200 	mov.w	r2, #0
 800a822:	f04f 0300 	mov.w	r3, #0
 800a826:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a82a:	4659      	mov	r1, fp
 800a82c:	00cb      	lsls	r3, r1, #3
 800a82e:	4651      	mov	r1, sl
 800a830:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a834:	4651      	mov	r1, sl
 800a836:	00ca      	lsls	r2, r1, #3
 800a838:	4610      	mov	r0, r2
 800a83a:	4619      	mov	r1, r3
 800a83c:	4603      	mov	r3, r0
 800a83e:	4642      	mov	r2, r8
 800a840:	189b      	adds	r3, r3, r2
 800a842:	66bb      	str	r3, [r7, #104]	; 0x68
 800a844:	464b      	mov	r3, r9
 800a846:	460a      	mov	r2, r1
 800a848:	eb42 0303 	adc.w	r3, r2, r3
 800a84c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a84e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	663b      	str	r3, [r7, #96]	; 0x60
 800a858:	667a      	str	r2, [r7, #100]	; 0x64
 800a85a:	f04f 0200 	mov.w	r2, #0
 800a85e:	f04f 0300 	mov.w	r3, #0
 800a862:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a866:	4649      	mov	r1, r9
 800a868:	008b      	lsls	r3, r1, #2
 800a86a:	4641      	mov	r1, r8
 800a86c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a870:	4641      	mov	r1, r8
 800a872:	008a      	lsls	r2, r1, #2
 800a874:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a878:	f7f6 f9ae 	bl	8000bd8 <__aeabi_uldivmod>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	4b0d      	ldr	r3, [pc, #52]	; (800a8b8 <UART_SetConfig+0x4e4>)
 800a882:	fba3 1302 	umull	r1, r3, r3, r2
 800a886:	095b      	lsrs	r3, r3, #5
 800a888:	2164      	movs	r1, #100	; 0x64
 800a88a:	fb01 f303 	mul.w	r3, r1, r3
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	011b      	lsls	r3, r3, #4
 800a892:	3332      	adds	r3, #50	; 0x32
 800a894:	4a08      	ldr	r2, [pc, #32]	; (800a8b8 <UART_SetConfig+0x4e4>)
 800a896:	fba2 2303 	umull	r2, r3, r2, r3
 800a89a:	095b      	lsrs	r3, r3, #5
 800a89c:	f003 020f 	and.w	r2, r3, #15
 800a8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4422      	add	r2, r4
 800a8a8:	609a      	str	r2, [r3, #8]
}
 800a8aa:	bf00      	nop
 800a8ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8b6:	bf00      	nop
 800a8b8:	51eb851f 	.word	0x51eb851f

0800a8bc <atoi>:
 800a8bc:	220a      	movs	r2, #10
 800a8be:	2100      	movs	r1, #0
 800a8c0:	f000 beda 	b.w	800b678 <strtol>

0800a8c4 <__errno>:
 800a8c4:	4b01      	ldr	r3, [pc, #4]	; (800a8cc <__errno+0x8>)
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	2000029c 	.word	0x2000029c

0800a8d0 <__libc_init_array>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	4d0d      	ldr	r5, [pc, #52]	; (800a908 <__libc_init_array+0x38>)
 800a8d4:	4c0d      	ldr	r4, [pc, #52]	; (800a90c <__libc_init_array+0x3c>)
 800a8d6:	1b64      	subs	r4, r4, r5
 800a8d8:	10a4      	asrs	r4, r4, #2
 800a8da:	2600      	movs	r6, #0
 800a8dc:	42a6      	cmp	r6, r4
 800a8de:	d109      	bne.n	800a8f4 <__libc_init_array+0x24>
 800a8e0:	4d0b      	ldr	r5, [pc, #44]	; (800a910 <__libc_init_array+0x40>)
 800a8e2:	4c0c      	ldr	r4, [pc, #48]	; (800a914 <__libc_init_array+0x44>)
 800a8e4:	f003 ff4c 	bl	800e780 <_init>
 800a8e8:	1b64      	subs	r4, r4, r5
 800a8ea:	10a4      	asrs	r4, r4, #2
 800a8ec:	2600      	movs	r6, #0
 800a8ee:	42a6      	cmp	r6, r4
 800a8f0:	d105      	bne.n	800a8fe <__libc_init_array+0x2e>
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8f8:	4798      	blx	r3
 800a8fa:	3601      	adds	r6, #1
 800a8fc:	e7ee      	b.n	800a8dc <__libc_init_array+0xc>
 800a8fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a902:	4798      	blx	r3
 800a904:	3601      	adds	r6, #1
 800a906:	e7f2      	b.n	800a8ee <__libc_init_array+0x1e>
 800a908:	0800fbc0 	.word	0x0800fbc0
 800a90c:	0800fbc0 	.word	0x0800fbc0
 800a910:	0800fbc0 	.word	0x0800fbc0
 800a914:	0800fbc4 	.word	0x0800fbc4

0800a918 <malloc>:
 800a918:	4b02      	ldr	r3, [pc, #8]	; (800a924 <malloc+0xc>)
 800a91a:	4601      	mov	r1, r0
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	f000 b87f 	b.w	800aa20 <_malloc_r>
 800a922:	bf00      	nop
 800a924:	2000029c 	.word	0x2000029c

0800a928 <free>:
 800a928:	4b02      	ldr	r3, [pc, #8]	; (800a934 <free+0xc>)
 800a92a:	4601      	mov	r1, r0
 800a92c:	6818      	ldr	r0, [r3, #0]
 800a92e:	f000 b80b 	b.w	800a948 <_free_r>
 800a932:	bf00      	nop
 800a934:	2000029c 	.word	0x2000029c

0800a938 <memset>:
 800a938:	4402      	add	r2, r0
 800a93a:	4603      	mov	r3, r0
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d100      	bne.n	800a942 <memset+0xa>
 800a940:	4770      	bx	lr
 800a942:	f803 1b01 	strb.w	r1, [r3], #1
 800a946:	e7f9      	b.n	800a93c <memset+0x4>

0800a948 <_free_r>:
 800a948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a94a:	2900      	cmp	r1, #0
 800a94c:	d044      	beq.n	800a9d8 <_free_r+0x90>
 800a94e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a952:	9001      	str	r0, [sp, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	f1a1 0404 	sub.w	r4, r1, #4
 800a95a:	bfb8      	it	lt
 800a95c:	18e4      	addlt	r4, r4, r3
 800a95e:	f001 fd55 	bl	800c40c <__malloc_lock>
 800a962:	4a1e      	ldr	r2, [pc, #120]	; (800a9dc <_free_r+0x94>)
 800a964:	9801      	ldr	r0, [sp, #4]
 800a966:	6813      	ldr	r3, [r2, #0]
 800a968:	b933      	cbnz	r3, 800a978 <_free_r+0x30>
 800a96a:	6063      	str	r3, [r4, #4]
 800a96c:	6014      	str	r4, [r2, #0]
 800a96e:	b003      	add	sp, #12
 800a970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a974:	f001 bd50 	b.w	800c418 <__malloc_unlock>
 800a978:	42a3      	cmp	r3, r4
 800a97a:	d908      	bls.n	800a98e <_free_r+0x46>
 800a97c:	6825      	ldr	r5, [r4, #0]
 800a97e:	1961      	adds	r1, r4, r5
 800a980:	428b      	cmp	r3, r1
 800a982:	bf01      	itttt	eq
 800a984:	6819      	ldreq	r1, [r3, #0]
 800a986:	685b      	ldreq	r3, [r3, #4]
 800a988:	1949      	addeq	r1, r1, r5
 800a98a:	6021      	streq	r1, [r4, #0]
 800a98c:	e7ed      	b.n	800a96a <_free_r+0x22>
 800a98e:	461a      	mov	r2, r3
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	b10b      	cbz	r3, 800a998 <_free_r+0x50>
 800a994:	42a3      	cmp	r3, r4
 800a996:	d9fa      	bls.n	800a98e <_free_r+0x46>
 800a998:	6811      	ldr	r1, [r2, #0]
 800a99a:	1855      	adds	r5, r2, r1
 800a99c:	42a5      	cmp	r5, r4
 800a99e:	d10b      	bne.n	800a9b8 <_free_r+0x70>
 800a9a0:	6824      	ldr	r4, [r4, #0]
 800a9a2:	4421      	add	r1, r4
 800a9a4:	1854      	adds	r4, r2, r1
 800a9a6:	42a3      	cmp	r3, r4
 800a9a8:	6011      	str	r1, [r2, #0]
 800a9aa:	d1e0      	bne.n	800a96e <_free_r+0x26>
 800a9ac:	681c      	ldr	r4, [r3, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	6053      	str	r3, [r2, #4]
 800a9b2:	4421      	add	r1, r4
 800a9b4:	6011      	str	r1, [r2, #0]
 800a9b6:	e7da      	b.n	800a96e <_free_r+0x26>
 800a9b8:	d902      	bls.n	800a9c0 <_free_r+0x78>
 800a9ba:	230c      	movs	r3, #12
 800a9bc:	6003      	str	r3, [r0, #0]
 800a9be:	e7d6      	b.n	800a96e <_free_r+0x26>
 800a9c0:	6825      	ldr	r5, [r4, #0]
 800a9c2:	1961      	adds	r1, r4, r5
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	bf04      	itt	eq
 800a9c8:	6819      	ldreq	r1, [r3, #0]
 800a9ca:	685b      	ldreq	r3, [r3, #4]
 800a9cc:	6063      	str	r3, [r4, #4]
 800a9ce:	bf04      	itt	eq
 800a9d0:	1949      	addeq	r1, r1, r5
 800a9d2:	6021      	streq	r1, [r4, #0]
 800a9d4:	6054      	str	r4, [r2, #4]
 800a9d6:	e7ca      	b.n	800a96e <_free_r+0x26>
 800a9d8:	b003      	add	sp, #12
 800a9da:	bd30      	pop	{r4, r5, pc}
 800a9dc:	20000b2c 	.word	0x20000b2c

0800a9e0 <sbrk_aligned>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	4e0e      	ldr	r6, [pc, #56]	; (800aa1c <sbrk_aligned+0x3c>)
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	6831      	ldr	r1, [r6, #0]
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	b911      	cbnz	r1, 800a9f2 <sbrk_aligned+0x12>
 800a9ec:	f000 fcf6 	bl	800b3dc <_sbrk_r>
 800a9f0:	6030      	str	r0, [r6, #0]
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	f000 fcf1 	bl	800b3dc <_sbrk_r>
 800a9fa:	1c43      	adds	r3, r0, #1
 800a9fc:	d00a      	beq.n	800aa14 <sbrk_aligned+0x34>
 800a9fe:	1cc4      	adds	r4, r0, #3
 800aa00:	f024 0403 	bic.w	r4, r4, #3
 800aa04:	42a0      	cmp	r0, r4
 800aa06:	d007      	beq.n	800aa18 <sbrk_aligned+0x38>
 800aa08:	1a21      	subs	r1, r4, r0
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f000 fce6 	bl	800b3dc <_sbrk_r>
 800aa10:	3001      	adds	r0, #1
 800aa12:	d101      	bne.n	800aa18 <sbrk_aligned+0x38>
 800aa14:	f04f 34ff 	mov.w	r4, #4294967295
 800aa18:	4620      	mov	r0, r4
 800aa1a:	bd70      	pop	{r4, r5, r6, pc}
 800aa1c:	20000b30 	.word	0x20000b30

0800aa20 <_malloc_r>:
 800aa20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa24:	1ccd      	adds	r5, r1, #3
 800aa26:	f025 0503 	bic.w	r5, r5, #3
 800aa2a:	3508      	adds	r5, #8
 800aa2c:	2d0c      	cmp	r5, #12
 800aa2e:	bf38      	it	cc
 800aa30:	250c      	movcc	r5, #12
 800aa32:	2d00      	cmp	r5, #0
 800aa34:	4607      	mov	r7, r0
 800aa36:	db01      	blt.n	800aa3c <_malloc_r+0x1c>
 800aa38:	42a9      	cmp	r1, r5
 800aa3a:	d905      	bls.n	800aa48 <_malloc_r+0x28>
 800aa3c:	230c      	movs	r3, #12
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	2600      	movs	r6, #0
 800aa42:	4630      	mov	r0, r6
 800aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa48:	4e2e      	ldr	r6, [pc, #184]	; (800ab04 <_malloc_r+0xe4>)
 800aa4a:	f001 fcdf 	bl	800c40c <__malloc_lock>
 800aa4e:	6833      	ldr	r3, [r6, #0]
 800aa50:	461c      	mov	r4, r3
 800aa52:	bb34      	cbnz	r4, 800aaa2 <_malloc_r+0x82>
 800aa54:	4629      	mov	r1, r5
 800aa56:	4638      	mov	r0, r7
 800aa58:	f7ff ffc2 	bl	800a9e0 <sbrk_aligned>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	4604      	mov	r4, r0
 800aa60:	d14d      	bne.n	800aafe <_malloc_r+0xde>
 800aa62:	6834      	ldr	r4, [r6, #0]
 800aa64:	4626      	mov	r6, r4
 800aa66:	2e00      	cmp	r6, #0
 800aa68:	d140      	bne.n	800aaec <_malloc_r+0xcc>
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4638      	mov	r0, r7
 800aa70:	eb04 0803 	add.w	r8, r4, r3
 800aa74:	f000 fcb2 	bl	800b3dc <_sbrk_r>
 800aa78:	4580      	cmp	r8, r0
 800aa7a:	d13a      	bne.n	800aaf2 <_malloc_r+0xd2>
 800aa7c:	6821      	ldr	r1, [r4, #0]
 800aa7e:	3503      	adds	r5, #3
 800aa80:	1a6d      	subs	r5, r5, r1
 800aa82:	f025 0503 	bic.w	r5, r5, #3
 800aa86:	3508      	adds	r5, #8
 800aa88:	2d0c      	cmp	r5, #12
 800aa8a:	bf38      	it	cc
 800aa8c:	250c      	movcc	r5, #12
 800aa8e:	4629      	mov	r1, r5
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff ffa5 	bl	800a9e0 <sbrk_aligned>
 800aa96:	3001      	adds	r0, #1
 800aa98:	d02b      	beq.n	800aaf2 <_malloc_r+0xd2>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	442b      	add	r3, r5
 800aa9e:	6023      	str	r3, [r4, #0]
 800aaa0:	e00e      	b.n	800aac0 <_malloc_r+0xa0>
 800aaa2:	6822      	ldr	r2, [r4, #0]
 800aaa4:	1b52      	subs	r2, r2, r5
 800aaa6:	d41e      	bmi.n	800aae6 <_malloc_r+0xc6>
 800aaa8:	2a0b      	cmp	r2, #11
 800aaaa:	d916      	bls.n	800aada <_malloc_r+0xba>
 800aaac:	1961      	adds	r1, r4, r5
 800aaae:	42a3      	cmp	r3, r4
 800aab0:	6025      	str	r5, [r4, #0]
 800aab2:	bf18      	it	ne
 800aab4:	6059      	strne	r1, [r3, #4]
 800aab6:	6863      	ldr	r3, [r4, #4]
 800aab8:	bf08      	it	eq
 800aaba:	6031      	streq	r1, [r6, #0]
 800aabc:	5162      	str	r2, [r4, r5]
 800aabe:	604b      	str	r3, [r1, #4]
 800aac0:	4638      	mov	r0, r7
 800aac2:	f104 060b 	add.w	r6, r4, #11
 800aac6:	f001 fca7 	bl	800c418 <__malloc_unlock>
 800aaca:	f026 0607 	bic.w	r6, r6, #7
 800aace:	1d23      	adds	r3, r4, #4
 800aad0:	1af2      	subs	r2, r6, r3
 800aad2:	d0b6      	beq.n	800aa42 <_malloc_r+0x22>
 800aad4:	1b9b      	subs	r3, r3, r6
 800aad6:	50a3      	str	r3, [r4, r2]
 800aad8:	e7b3      	b.n	800aa42 <_malloc_r+0x22>
 800aada:	6862      	ldr	r2, [r4, #4]
 800aadc:	42a3      	cmp	r3, r4
 800aade:	bf0c      	ite	eq
 800aae0:	6032      	streq	r2, [r6, #0]
 800aae2:	605a      	strne	r2, [r3, #4]
 800aae4:	e7ec      	b.n	800aac0 <_malloc_r+0xa0>
 800aae6:	4623      	mov	r3, r4
 800aae8:	6864      	ldr	r4, [r4, #4]
 800aaea:	e7b2      	b.n	800aa52 <_malloc_r+0x32>
 800aaec:	4634      	mov	r4, r6
 800aaee:	6876      	ldr	r6, [r6, #4]
 800aaf0:	e7b9      	b.n	800aa66 <_malloc_r+0x46>
 800aaf2:	230c      	movs	r3, #12
 800aaf4:	603b      	str	r3, [r7, #0]
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f001 fc8e 	bl	800c418 <__malloc_unlock>
 800aafc:	e7a1      	b.n	800aa42 <_malloc_r+0x22>
 800aafe:	6025      	str	r5, [r4, #0]
 800ab00:	e7de      	b.n	800aac0 <_malloc_r+0xa0>
 800ab02:	bf00      	nop
 800ab04:	20000b2c 	.word	0x20000b2c

0800ab08 <__cvt>:
 800ab08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0c:	ec55 4b10 	vmov	r4, r5, d0
 800ab10:	2d00      	cmp	r5, #0
 800ab12:	460e      	mov	r6, r1
 800ab14:	4619      	mov	r1, r3
 800ab16:	462b      	mov	r3, r5
 800ab18:	bfbb      	ittet	lt
 800ab1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab1e:	461d      	movlt	r5, r3
 800ab20:	2300      	movge	r3, #0
 800ab22:	232d      	movlt	r3, #45	; 0x2d
 800ab24:	700b      	strb	r3, [r1, #0]
 800ab26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab2c:	4691      	mov	r9, r2
 800ab2e:	f023 0820 	bic.w	r8, r3, #32
 800ab32:	bfbc      	itt	lt
 800ab34:	4622      	movlt	r2, r4
 800ab36:	4614      	movlt	r4, r2
 800ab38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab3c:	d005      	beq.n	800ab4a <__cvt+0x42>
 800ab3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab42:	d100      	bne.n	800ab46 <__cvt+0x3e>
 800ab44:	3601      	adds	r6, #1
 800ab46:	2102      	movs	r1, #2
 800ab48:	e000      	b.n	800ab4c <__cvt+0x44>
 800ab4a:	2103      	movs	r1, #3
 800ab4c:	ab03      	add	r3, sp, #12
 800ab4e:	9301      	str	r3, [sp, #4]
 800ab50:	ab02      	add	r3, sp, #8
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	ec45 4b10 	vmov	d0, r4, r5
 800ab58:	4653      	mov	r3, sl
 800ab5a:	4632      	mov	r2, r6
 800ab5c:	f000 fe44 	bl	800b7e8 <_dtoa_r>
 800ab60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab64:	4607      	mov	r7, r0
 800ab66:	d102      	bne.n	800ab6e <__cvt+0x66>
 800ab68:	f019 0f01 	tst.w	r9, #1
 800ab6c:	d022      	beq.n	800abb4 <__cvt+0xac>
 800ab6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab72:	eb07 0906 	add.w	r9, r7, r6
 800ab76:	d110      	bne.n	800ab9a <__cvt+0x92>
 800ab78:	783b      	ldrb	r3, [r7, #0]
 800ab7a:	2b30      	cmp	r3, #48	; 0x30
 800ab7c:	d10a      	bne.n	800ab94 <__cvt+0x8c>
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2300      	movs	r3, #0
 800ab82:	4620      	mov	r0, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	f7f5 ffb7 	bl	8000af8 <__aeabi_dcmpeq>
 800ab8a:	b918      	cbnz	r0, 800ab94 <__cvt+0x8c>
 800ab8c:	f1c6 0601 	rsb	r6, r6, #1
 800ab90:	f8ca 6000 	str.w	r6, [sl]
 800ab94:	f8da 3000 	ldr.w	r3, [sl]
 800ab98:	4499      	add	r9, r3
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	f7f5 ffa9 	bl	8000af8 <__aeabi_dcmpeq>
 800aba6:	b108      	cbz	r0, 800abac <__cvt+0xa4>
 800aba8:	f8cd 900c 	str.w	r9, [sp, #12]
 800abac:	2230      	movs	r2, #48	; 0x30
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	454b      	cmp	r3, r9
 800abb2:	d307      	bcc.n	800abc4 <__cvt+0xbc>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abb8:	1bdb      	subs	r3, r3, r7
 800abba:	4638      	mov	r0, r7
 800abbc:	6013      	str	r3, [r2, #0]
 800abbe:	b004      	add	sp, #16
 800abc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc4:	1c59      	adds	r1, r3, #1
 800abc6:	9103      	str	r1, [sp, #12]
 800abc8:	701a      	strb	r2, [r3, #0]
 800abca:	e7f0      	b.n	800abae <__cvt+0xa6>

0800abcc <__exponent>:
 800abcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abce:	4603      	mov	r3, r0
 800abd0:	2900      	cmp	r1, #0
 800abd2:	bfb8      	it	lt
 800abd4:	4249      	neglt	r1, r1
 800abd6:	f803 2b02 	strb.w	r2, [r3], #2
 800abda:	bfb4      	ite	lt
 800abdc:	222d      	movlt	r2, #45	; 0x2d
 800abde:	222b      	movge	r2, #43	; 0x2b
 800abe0:	2909      	cmp	r1, #9
 800abe2:	7042      	strb	r2, [r0, #1]
 800abe4:	dd2a      	ble.n	800ac3c <__exponent+0x70>
 800abe6:	f10d 0407 	add.w	r4, sp, #7
 800abea:	46a4      	mov	ip, r4
 800abec:	270a      	movs	r7, #10
 800abee:	46a6      	mov	lr, r4
 800abf0:	460a      	mov	r2, r1
 800abf2:	fb91 f6f7 	sdiv	r6, r1, r7
 800abf6:	fb07 1516 	mls	r5, r7, r6, r1
 800abfa:	3530      	adds	r5, #48	; 0x30
 800abfc:	2a63      	cmp	r2, #99	; 0x63
 800abfe:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ac06:	4631      	mov	r1, r6
 800ac08:	dcf1      	bgt.n	800abee <__exponent+0x22>
 800ac0a:	3130      	adds	r1, #48	; 0x30
 800ac0c:	f1ae 0502 	sub.w	r5, lr, #2
 800ac10:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac14:	1c44      	adds	r4, r0, #1
 800ac16:	4629      	mov	r1, r5
 800ac18:	4561      	cmp	r1, ip
 800ac1a:	d30a      	bcc.n	800ac32 <__exponent+0x66>
 800ac1c:	f10d 0209 	add.w	r2, sp, #9
 800ac20:	eba2 020e 	sub.w	r2, r2, lr
 800ac24:	4565      	cmp	r5, ip
 800ac26:	bf88      	it	hi
 800ac28:	2200      	movhi	r2, #0
 800ac2a:	4413      	add	r3, r2
 800ac2c:	1a18      	subs	r0, r3, r0
 800ac2e:	b003      	add	sp, #12
 800ac30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac36:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac3a:	e7ed      	b.n	800ac18 <__exponent+0x4c>
 800ac3c:	2330      	movs	r3, #48	; 0x30
 800ac3e:	3130      	adds	r1, #48	; 0x30
 800ac40:	7083      	strb	r3, [r0, #2]
 800ac42:	70c1      	strb	r1, [r0, #3]
 800ac44:	1d03      	adds	r3, r0, #4
 800ac46:	e7f1      	b.n	800ac2c <__exponent+0x60>

0800ac48 <_printf_float>:
 800ac48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4c:	ed2d 8b02 	vpush	{d8}
 800ac50:	b08d      	sub	sp, #52	; 0x34
 800ac52:	460c      	mov	r4, r1
 800ac54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac58:	4616      	mov	r6, r2
 800ac5a:	461f      	mov	r7, r3
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	f001 fbb1 	bl	800c3c4 <_localeconv_r>
 800ac62:	f8d0 a000 	ldr.w	sl, [r0]
 800ac66:	4650      	mov	r0, sl
 800ac68:	f7f5 fac4 	bl	80001f4 <strlen>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	9305      	str	r3, [sp, #20]
 800ac74:	f8d8 3000 	ldr.w	r3, [r8]
 800ac78:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac7c:	3307      	adds	r3, #7
 800ac7e:	f023 0307 	bic.w	r3, r3, #7
 800ac82:	f103 0208 	add.w	r2, r3, #8
 800ac86:	f8c8 2000 	str.w	r2, [r8]
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac9a:	9307      	str	r3, [sp, #28]
 800ac9c:	f8cd 8018 	str.w	r8, [sp, #24]
 800aca0:	ee08 0a10 	vmov	s16, r0
 800aca4:	4b9f      	ldr	r3, [pc, #636]	; (800af24 <_printf_float+0x2dc>)
 800aca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acaa:	f04f 32ff 	mov.w	r2, #4294967295
 800acae:	f7f5 ff55 	bl	8000b5c <__aeabi_dcmpun>
 800acb2:	bb88      	cbnz	r0, 800ad18 <_printf_float+0xd0>
 800acb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acb8:	4b9a      	ldr	r3, [pc, #616]	; (800af24 <_printf_float+0x2dc>)
 800acba:	f04f 32ff 	mov.w	r2, #4294967295
 800acbe:	f7f5 ff2f 	bl	8000b20 <__aeabi_dcmple>
 800acc2:	bb48      	cbnz	r0, 800ad18 <_printf_float+0xd0>
 800acc4:	2200      	movs	r2, #0
 800acc6:	2300      	movs	r3, #0
 800acc8:	4640      	mov	r0, r8
 800acca:	4649      	mov	r1, r9
 800accc:	f7f5 ff1e 	bl	8000b0c <__aeabi_dcmplt>
 800acd0:	b110      	cbz	r0, 800acd8 <_printf_float+0x90>
 800acd2:	232d      	movs	r3, #45	; 0x2d
 800acd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acd8:	4b93      	ldr	r3, [pc, #588]	; (800af28 <_printf_float+0x2e0>)
 800acda:	4894      	ldr	r0, [pc, #592]	; (800af2c <_printf_float+0x2e4>)
 800acdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ace0:	bf94      	ite	ls
 800ace2:	4698      	movls	r8, r3
 800ace4:	4680      	movhi	r8, r0
 800ace6:	2303      	movs	r3, #3
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	9b05      	ldr	r3, [sp, #20]
 800acec:	f023 0204 	bic.w	r2, r3, #4
 800acf0:	6022      	str	r2, [r4, #0]
 800acf2:	f04f 0900 	mov.w	r9, #0
 800acf6:	9700      	str	r7, [sp, #0]
 800acf8:	4633      	mov	r3, r6
 800acfa:	aa0b      	add	r2, sp, #44	; 0x2c
 800acfc:	4621      	mov	r1, r4
 800acfe:	4628      	mov	r0, r5
 800ad00:	f000 f9d8 	bl	800b0b4 <_printf_common>
 800ad04:	3001      	adds	r0, #1
 800ad06:	f040 8090 	bne.w	800ae2a <_printf_float+0x1e2>
 800ad0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0e:	b00d      	add	sp, #52	; 0x34
 800ad10:	ecbd 8b02 	vpop	{d8}
 800ad14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad18:	4642      	mov	r2, r8
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4649      	mov	r1, r9
 800ad20:	f7f5 ff1c 	bl	8000b5c <__aeabi_dcmpun>
 800ad24:	b140      	cbz	r0, 800ad38 <_printf_float+0xf0>
 800ad26:	464b      	mov	r3, r9
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	bfbc      	itt	lt
 800ad2c:	232d      	movlt	r3, #45	; 0x2d
 800ad2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad32:	487f      	ldr	r0, [pc, #508]	; (800af30 <_printf_float+0x2e8>)
 800ad34:	4b7f      	ldr	r3, [pc, #508]	; (800af34 <_printf_float+0x2ec>)
 800ad36:	e7d1      	b.n	800acdc <_printf_float+0x94>
 800ad38:	6863      	ldr	r3, [r4, #4]
 800ad3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad3e:	9206      	str	r2, [sp, #24]
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	d13f      	bne.n	800adc4 <_printf_float+0x17c>
 800ad44:	2306      	movs	r3, #6
 800ad46:	6063      	str	r3, [r4, #4]
 800ad48:	9b05      	ldr	r3, [sp, #20]
 800ad4a:	6861      	ldr	r1, [r4, #4]
 800ad4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad50:	2300      	movs	r3, #0
 800ad52:	9303      	str	r3, [sp, #12]
 800ad54:	ab0a      	add	r3, sp, #40	; 0x28
 800ad56:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad5a:	ab09      	add	r3, sp, #36	; 0x24
 800ad5c:	ec49 8b10 	vmov	d0, r8, r9
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	6022      	str	r2, [r4, #0]
 800ad64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f7ff fecd 	bl	800ab08 <__cvt>
 800ad6e:	9b06      	ldr	r3, [sp, #24]
 800ad70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad72:	2b47      	cmp	r3, #71	; 0x47
 800ad74:	4680      	mov	r8, r0
 800ad76:	d108      	bne.n	800ad8a <_printf_float+0x142>
 800ad78:	1cc8      	adds	r0, r1, #3
 800ad7a:	db02      	blt.n	800ad82 <_printf_float+0x13a>
 800ad7c:	6863      	ldr	r3, [r4, #4]
 800ad7e:	4299      	cmp	r1, r3
 800ad80:	dd41      	ble.n	800ae06 <_printf_float+0x1be>
 800ad82:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad86:	fa5f fb8b 	uxtb.w	fp, fp
 800ad8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad8e:	d820      	bhi.n	800add2 <_printf_float+0x18a>
 800ad90:	3901      	subs	r1, #1
 800ad92:	465a      	mov	r2, fp
 800ad94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad98:	9109      	str	r1, [sp, #36]	; 0x24
 800ad9a:	f7ff ff17 	bl	800abcc <__exponent>
 800ad9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ada0:	1813      	adds	r3, r2, r0
 800ada2:	2a01      	cmp	r2, #1
 800ada4:	4681      	mov	r9, r0
 800ada6:	6123      	str	r3, [r4, #16]
 800ada8:	dc02      	bgt.n	800adb0 <_printf_float+0x168>
 800adaa:	6822      	ldr	r2, [r4, #0]
 800adac:	07d2      	lsls	r2, r2, #31
 800adae:	d501      	bpl.n	800adb4 <_printf_float+0x16c>
 800adb0:	3301      	adds	r3, #1
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d09c      	beq.n	800acf6 <_printf_float+0xae>
 800adbc:	232d      	movs	r3, #45	; 0x2d
 800adbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adc2:	e798      	b.n	800acf6 <_printf_float+0xae>
 800adc4:	9a06      	ldr	r2, [sp, #24]
 800adc6:	2a47      	cmp	r2, #71	; 0x47
 800adc8:	d1be      	bne.n	800ad48 <_printf_float+0x100>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1bc      	bne.n	800ad48 <_printf_float+0x100>
 800adce:	2301      	movs	r3, #1
 800add0:	e7b9      	b.n	800ad46 <_printf_float+0xfe>
 800add2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800add6:	d118      	bne.n	800ae0a <_printf_float+0x1c2>
 800add8:	2900      	cmp	r1, #0
 800adda:	6863      	ldr	r3, [r4, #4]
 800addc:	dd0b      	ble.n	800adf6 <_printf_float+0x1ae>
 800adde:	6121      	str	r1, [r4, #16]
 800ade0:	b913      	cbnz	r3, 800ade8 <_printf_float+0x1a0>
 800ade2:	6822      	ldr	r2, [r4, #0]
 800ade4:	07d0      	lsls	r0, r2, #31
 800ade6:	d502      	bpl.n	800adee <_printf_float+0x1a6>
 800ade8:	3301      	adds	r3, #1
 800adea:	440b      	add	r3, r1
 800adec:	6123      	str	r3, [r4, #16]
 800adee:	65a1      	str	r1, [r4, #88]	; 0x58
 800adf0:	f04f 0900 	mov.w	r9, #0
 800adf4:	e7de      	b.n	800adb4 <_printf_float+0x16c>
 800adf6:	b913      	cbnz	r3, 800adfe <_printf_float+0x1b6>
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	07d2      	lsls	r2, r2, #31
 800adfc:	d501      	bpl.n	800ae02 <_printf_float+0x1ba>
 800adfe:	3302      	adds	r3, #2
 800ae00:	e7f4      	b.n	800adec <_printf_float+0x1a4>
 800ae02:	2301      	movs	r3, #1
 800ae04:	e7f2      	b.n	800adec <_printf_float+0x1a4>
 800ae06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae0c:	4299      	cmp	r1, r3
 800ae0e:	db05      	blt.n	800ae1c <_printf_float+0x1d4>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	6121      	str	r1, [r4, #16]
 800ae14:	07d8      	lsls	r0, r3, #31
 800ae16:	d5ea      	bpl.n	800adee <_printf_float+0x1a6>
 800ae18:	1c4b      	adds	r3, r1, #1
 800ae1a:	e7e7      	b.n	800adec <_printf_float+0x1a4>
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	bfd4      	ite	le
 800ae20:	f1c1 0202 	rsble	r2, r1, #2
 800ae24:	2201      	movgt	r2, #1
 800ae26:	4413      	add	r3, r2
 800ae28:	e7e0      	b.n	800adec <_printf_float+0x1a4>
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	055a      	lsls	r2, r3, #21
 800ae2e:	d407      	bmi.n	800ae40 <_printf_float+0x1f8>
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	4642      	mov	r2, r8
 800ae34:	4631      	mov	r1, r6
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b8      	blx	r7
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	d12c      	bne.n	800ae98 <_printf_float+0x250>
 800ae3e:	e764      	b.n	800ad0a <_printf_float+0xc2>
 800ae40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae44:	f240 80e0 	bls.w	800b008 <_printf_float+0x3c0>
 800ae48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f7f5 fe52 	bl	8000af8 <__aeabi_dcmpeq>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d034      	beq.n	800aec2 <_printf_float+0x27a>
 800ae58:	4a37      	ldr	r2, [pc, #220]	; (800af38 <_printf_float+0x2f0>)
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	f43f af51 	beq.w	800ad0a <_printf_float+0xc2>
 800ae68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	db02      	blt.n	800ae76 <_printf_float+0x22e>
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	07d8      	lsls	r0, r3, #31
 800ae74:	d510      	bpl.n	800ae98 <_printf_float+0x250>
 800ae76:	ee18 3a10 	vmov	r3, s16
 800ae7a:	4652      	mov	r2, sl
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b8      	blx	r7
 800ae82:	3001      	adds	r0, #1
 800ae84:	f43f af41 	beq.w	800ad0a <_printf_float+0xc2>
 800ae88:	f04f 0800 	mov.w	r8, #0
 800ae8c:	f104 091a 	add.w	r9, r4, #26
 800ae90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae92:	3b01      	subs	r3, #1
 800ae94:	4543      	cmp	r3, r8
 800ae96:	dc09      	bgt.n	800aeac <_printf_float+0x264>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	079b      	lsls	r3, r3, #30
 800ae9c:	f100 8105 	bmi.w	800b0aa <_printf_float+0x462>
 800aea0:	68e0      	ldr	r0, [r4, #12]
 800aea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea4:	4298      	cmp	r0, r3
 800aea6:	bfb8      	it	lt
 800aea8:	4618      	movlt	r0, r3
 800aeaa:	e730      	b.n	800ad0e <_printf_float+0xc6>
 800aeac:	2301      	movs	r3, #1
 800aeae:	464a      	mov	r2, r9
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	47b8      	blx	r7
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	f43f af27 	beq.w	800ad0a <_printf_float+0xc2>
 800aebc:	f108 0801 	add.w	r8, r8, #1
 800aec0:	e7e6      	b.n	800ae90 <_printf_float+0x248>
 800aec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	dc39      	bgt.n	800af3c <_printf_float+0x2f4>
 800aec8:	4a1b      	ldr	r2, [pc, #108]	; (800af38 <_printf_float+0x2f0>)
 800aeca:	2301      	movs	r3, #1
 800aecc:	4631      	mov	r1, r6
 800aece:	4628      	mov	r0, r5
 800aed0:	47b8      	blx	r7
 800aed2:	3001      	adds	r0, #1
 800aed4:	f43f af19 	beq.w	800ad0a <_printf_float+0xc2>
 800aed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aedc:	4313      	orrs	r3, r2
 800aede:	d102      	bne.n	800aee6 <_printf_float+0x29e>
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	07d9      	lsls	r1, r3, #31
 800aee4:	d5d8      	bpl.n	800ae98 <_printf_float+0x250>
 800aee6:	ee18 3a10 	vmov	r3, s16
 800aeea:	4652      	mov	r2, sl
 800aeec:	4631      	mov	r1, r6
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b8      	blx	r7
 800aef2:	3001      	adds	r0, #1
 800aef4:	f43f af09 	beq.w	800ad0a <_printf_float+0xc2>
 800aef8:	f04f 0900 	mov.w	r9, #0
 800aefc:	f104 0a1a 	add.w	sl, r4, #26
 800af00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af02:	425b      	negs	r3, r3
 800af04:	454b      	cmp	r3, r9
 800af06:	dc01      	bgt.n	800af0c <_printf_float+0x2c4>
 800af08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af0a:	e792      	b.n	800ae32 <_printf_float+0x1ea>
 800af0c:	2301      	movs	r3, #1
 800af0e:	4652      	mov	r2, sl
 800af10:	4631      	mov	r1, r6
 800af12:	4628      	mov	r0, r5
 800af14:	47b8      	blx	r7
 800af16:	3001      	adds	r0, #1
 800af18:	f43f aef7 	beq.w	800ad0a <_printf_float+0xc2>
 800af1c:	f109 0901 	add.w	r9, r9, #1
 800af20:	e7ee      	b.n	800af00 <_printf_float+0x2b8>
 800af22:	bf00      	nop
 800af24:	7fefffff 	.word	0x7fefffff
 800af28:	0800f758 	.word	0x0800f758
 800af2c:	0800f75c 	.word	0x0800f75c
 800af30:	0800f764 	.word	0x0800f764
 800af34:	0800f760 	.word	0x0800f760
 800af38:	0800fa89 	.word	0x0800fa89
 800af3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af40:	429a      	cmp	r2, r3
 800af42:	bfa8      	it	ge
 800af44:	461a      	movge	r2, r3
 800af46:	2a00      	cmp	r2, #0
 800af48:	4691      	mov	r9, r2
 800af4a:	dc37      	bgt.n	800afbc <_printf_float+0x374>
 800af4c:	f04f 0b00 	mov.w	fp, #0
 800af50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af54:	f104 021a 	add.w	r2, r4, #26
 800af58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	eba3 0309 	sub.w	r3, r3, r9
 800af60:	455b      	cmp	r3, fp
 800af62:	dc33      	bgt.n	800afcc <_printf_float+0x384>
 800af64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af68:	429a      	cmp	r2, r3
 800af6a:	db3b      	blt.n	800afe4 <_printf_float+0x39c>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	07da      	lsls	r2, r3, #31
 800af70:	d438      	bmi.n	800afe4 <_printf_float+0x39c>
 800af72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af74:	9a05      	ldr	r2, [sp, #20]
 800af76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af78:	1a9a      	subs	r2, r3, r2
 800af7a:	eba3 0901 	sub.w	r9, r3, r1
 800af7e:	4591      	cmp	r9, r2
 800af80:	bfa8      	it	ge
 800af82:	4691      	movge	r9, r2
 800af84:	f1b9 0f00 	cmp.w	r9, #0
 800af88:	dc35      	bgt.n	800aff6 <_printf_float+0x3ae>
 800af8a:	f04f 0800 	mov.w	r8, #0
 800af8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af92:	f104 0a1a 	add.w	sl, r4, #26
 800af96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af9a:	1a9b      	subs	r3, r3, r2
 800af9c:	eba3 0309 	sub.w	r3, r3, r9
 800afa0:	4543      	cmp	r3, r8
 800afa2:	f77f af79 	ble.w	800ae98 <_printf_float+0x250>
 800afa6:	2301      	movs	r3, #1
 800afa8:	4652      	mov	r2, sl
 800afaa:	4631      	mov	r1, r6
 800afac:	4628      	mov	r0, r5
 800afae:	47b8      	blx	r7
 800afb0:	3001      	adds	r0, #1
 800afb2:	f43f aeaa 	beq.w	800ad0a <_printf_float+0xc2>
 800afb6:	f108 0801 	add.w	r8, r8, #1
 800afba:	e7ec      	b.n	800af96 <_printf_float+0x34e>
 800afbc:	4613      	mov	r3, r2
 800afbe:	4631      	mov	r1, r6
 800afc0:	4642      	mov	r2, r8
 800afc2:	4628      	mov	r0, r5
 800afc4:	47b8      	blx	r7
 800afc6:	3001      	adds	r0, #1
 800afc8:	d1c0      	bne.n	800af4c <_printf_float+0x304>
 800afca:	e69e      	b.n	800ad0a <_printf_float+0xc2>
 800afcc:	2301      	movs	r3, #1
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	9205      	str	r2, [sp, #20]
 800afd4:	47b8      	blx	r7
 800afd6:	3001      	adds	r0, #1
 800afd8:	f43f ae97 	beq.w	800ad0a <_printf_float+0xc2>
 800afdc:	9a05      	ldr	r2, [sp, #20]
 800afde:	f10b 0b01 	add.w	fp, fp, #1
 800afe2:	e7b9      	b.n	800af58 <_printf_float+0x310>
 800afe4:	ee18 3a10 	vmov	r3, s16
 800afe8:	4652      	mov	r2, sl
 800afea:	4631      	mov	r1, r6
 800afec:	4628      	mov	r0, r5
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	d1be      	bne.n	800af72 <_printf_float+0x32a>
 800aff4:	e689      	b.n	800ad0a <_printf_float+0xc2>
 800aff6:	9a05      	ldr	r2, [sp, #20]
 800aff8:	464b      	mov	r3, r9
 800affa:	4442      	add	r2, r8
 800affc:	4631      	mov	r1, r6
 800affe:	4628      	mov	r0, r5
 800b000:	47b8      	blx	r7
 800b002:	3001      	adds	r0, #1
 800b004:	d1c1      	bne.n	800af8a <_printf_float+0x342>
 800b006:	e680      	b.n	800ad0a <_printf_float+0xc2>
 800b008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b00a:	2a01      	cmp	r2, #1
 800b00c:	dc01      	bgt.n	800b012 <_printf_float+0x3ca>
 800b00e:	07db      	lsls	r3, r3, #31
 800b010:	d538      	bpl.n	800b084 <_printf_float+0x43c>
 800b012:	2301      	movs	r3, #1
 800b014:	4642      	mov	r2, r8
 800b016:	4631      	mov	r1, r6
 800b018:	4628      	mov	r0, r5
 800b01a:	47b8      	blx	r7
 800b01c:	3001      	adds	r0, #1
 800b01e:	f43f ae74 	beq.w	800ad0a <_printf_float+0xc2>
 800b022:	ee18 3a10 	vmov	r3, s16
 800b026:	4652      	mov	r2, sl
 800b028:	4631      	mov	r1, r6
 800b02a:	4628      	mov	r0, r5
 800b02c:	47b8      	blx	r7
 800b02e:	3001      	adds	r0, #1
 800b030:	f43f ae6b 	beq.w	800ad0a <_printf_float+0xc2>
 800b034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b038:	2200      	movs	r2, #0
 800b03a:	2300      	movs	r3, #0
 800b03c:	f7f5 fd5c 	bl	8000af8 <__aeabi_dcmpeq>
 800b040:	b9d8      	cbnz	r0, 800b07a <_printf_float+0x432>
 800b042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b044:	f108 0201 	add.w	r2, r8, #1
 800b048:	3b01      	subs	r3, #1
 800b04a:	4631      	mov	r1, r6
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b8      	blx	r7
 800b050:	3001      	adds	r0, #1
 800b052:	d10e      	bne.n	800b072 <_printf_float+0x42a>
 800b054:	e659      	b.n	800ad0a <_printf_float+0xc2>
 800b056:	2301      	movs	r3, #1
 800b058:	4652      	mov	r2, sl
 800b05a:	4631      	mov	r1, r6
 800b05c:	4628      	mov	r0, r5
 800b05e:	47b8      	blx	r7
 800b060:	3001      	adds	r0, #1
 800b062:	f43f ae52 	beq.w	800ad0a <_printf_float+0xc2>
 800b066:	f108 0801 	add.w	r8, r8, #1
 800b06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b06c:	3b01      	subs	r3, #1
 800b06e:	4543      	cmp	r3, r8
 800b070:	dcf1      	bgt.n	800b056 <_printf_float+0x40e>
 800b072:	464b      	mov	r3, r9
 800b074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b078:	e6dc      	b.n	800ae34 <_printf_float+0x1ec>
 800b07a:	f04f 0800 	mov.w	r8, #0
 800b07e:	f104 0a1a 	add.w	sl, r4, #26
 800b082:	e7f2      	b.n	800b06a <_printf_float+0x422>
 800b084:	2301      	movs	r3, #1
 800b086:	4642      	mov	r2, r8
 800b088:	e7df      	b.n	800b04a <_printf_float+0x402>
 800b08a:	2301      	movs	r3, #1
 800b08c:	464a      	mov	r2, r9
 800b08e:	4631      	mov	r1, r6
 800b090:	4628      	mov	r0, r5
 800b092:	47b8      	blx	r7
 800b094:	3001      	adds	r0, #1
 800b096:	f43f ae38 	beq.w	800ad0a <_printf_float+0xc2>
 800b09a:	f108 0801 	add.w	r8, r8, #1
 800b09e:	68e3      	ldr	r3, [r4, #12]
 800b0a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0a2:	1a5b      	subs	r3, r3, r1
 800b0a4:	4543      	cmp	r3, r8
 800b0a6:	dcf0      	bgt.n	800b08a <_printf_float+0x442>
 800b0a8:	e6fa      	b.n	800aea0 <_printf_float+0x258>
 800b0aa:	f04f 0800 	mov.w	r8, #0
 800b0ae:	f104 0919 	add.w	r9, r4, #25
 800b0b2:	e7f4      	b.n	800b09e <_printf_float+0x456>

0800b0b4 <_printf_common>:
 800b0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b8:	4616      	mov	r6, r2
 800b0ba:	4699      	mov	r9, r3
 800b0bc:	688a      	ldr	r2, [r1, #8]
 800b0be:	690b      	ldr	r3, [r1, #16]
 800b0c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	bfb8      	it	lt
 800b0c8:	4613      	movlt	r3, r2
 800b0ca:	6033      	str	r3, [r6, #0]
 800b0cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0d0:	4607      	mov	r7, r0
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	b10a      	cbz	r2, 800b0da <_printf_common+0x26>
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	6033      	str	r3, [r6, #0]
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	0699      	lsls	r1, r3, #26
 800b0de:	bf42      	ittt	mi
 800b0e0:	6833      	ldrmi	r3, [r6, #0]
 800b0e2:	3302      	addmi	r3, #2
 800b0e4:	6033      	strmi	r3, [r6, #0]
 800b0e6:	6825      	ldr	r5, [r4, #0]
 800b0e8:	f015 0506 	ands.w	r5, r5, #6
 800b0ec:	d106      	bne.n	800b0fc <_printf_common+0x48>
 800b0ee:	f104 0a19 	add.w	sl, r4, #25
 800b0f2:	68e3      	ldr	r3, [r4, #12]
 800b0f4:	6832      	ldr	r2, [r6, #0]
 800b0f6:	1a9b      	subs	r3, r3, r2
 800b0f8:	42ab      	cmp	r3, r5
 800b0fa:	dc26      	bgt.n	800b14a <_printf_common+0x96>
 800b0fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b100:	1e13      	subs	r3, r2, #0
 800b102:	6822      	ldr	r2, [r4, #0]
 800b104:	bf18      	it	ne
 800b106:	2301      	movne	r3, #1
 800b108:	0692      	lsls	r2, r2, #26
 800b10a:	d42b      	bmi.n	800b164 <_printf_common+0xb0>
 800b10c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b110:	4649      	mov	r1, r9
 800b112:	4638      	mov	r0, r7
 800b114:	47c0      	blx	r8
 800b116:	3001      	adds	r0, #1
 800b118:	d01e      	beq.n	800b158 <_printf_common+0xa4>
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	68e5      	ldr	r5, [r4, #12]
 800b11e:	6832      	ldr	r2, [r6, #0]
 800b120:	f003 0306 	and.w	r3, r3, #6
 800b124:	2b04      	cmp	r3, #4
 800b126:	bf08      	it	eq
 800b128:	1aad      	subeq	r5, r5, r2
 800b12a:	68a3      	ldr	r3, [r4, #8]
 800b12c:	6922      	ldr	r2, [r4, #16]
 800b12e:	bf0c      	ite	eq
 800b130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b134:	2500      	movne	r5, #0
 800b136:	4293      	cmp	r3, r2
 800b138:	bfc4      	itt	gt
 800b13a:	1a9b      	subgt	r3, r3, r2
 800b13c:	18ed      	addgt	r5, r5, r3
 800b13e:	2600      	movs	r6, #0
 800b140:	341a      	adds	r4, #26
 800b142:	42b5      	cmp	r5, r6
 800b144:	d11a      	bne.n	800b17c <_printf_common+0xc8>
 800b146:	2000      	movs	r0, #0
 800b148:	e008      	b.n	800b15c <_printf_common+0xa8>
 800b14a:	2301      	movs	r3, #1
 800b14c:	4652      	mov	r2, sl
 800b14e:	4649      	mov	r1, r9
 800b150:	4638      	mov	r0, r7
 800b152:	47c0      	blx	r8
 800b154:	3001      	adds	r0, #1
 800b156:	d103      	bne.n	800b160 <_printf_common+0xac>
 800b158:	f04f 30ff 	mov.w	r0, #4294967295
 800b15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b160:	3501      	adds	r5, #1
 800b162:	e7c6      	b.n	800b0f2 <_printf_common+0x3e>
 800b164:	18e1      	adds	r1, r4, r3
 800b166:	1c5a      	adds	r2, r3, #1
 800b168:	2030      	movs	r0, #48	; 0x30
 800b16a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b16e:	4422      	add	r2, r4
 800b170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b178:	3302      	adds	r3, #2
 800b17a:	e7c7      	b.n	800b10c <_printf_common+0x58>
 800b17c:	2301      	movs	r3, #1
 800b17e:	4622      	mov	r2, r4
 800b180:	4649      	mov	r1, r9
 800b182:	4638      	mov	r0, r7
 800b184:	47c0      	blx	r8
 800b186:	3001      	adds	r0, #1
 800b188:	d0e6      	beq.n	800b158 <_printf_common+0xa4>
 800b18a:	3601      	adds	r6, #1
 800b18c:	e7d9      	b.n	800b142 <_printf_common+0x8e>
	...

0800b190 <_printf_i>:
 800b190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b194:	7e0f      	ldrb	r7, [r1, #24]
 800b196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b198:	2f78      	cmp	r7, #120	; 0x78
 800b19a:	4691      	mov	r9, r2
 800b19c:	4680      	mov	r8, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	469a      	mov	sl, r3
 800b1a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1a6:	d807      	bhi.n	800b1b8 <_printf_i+0x28>
 800b1a8:	2f62      	cmp	r7, #98	; 0x62
 800b1aa:	d80a      	bhi.n	800b1c2 <_printf_i+0x32>
 800b1ac:	2f00      	cmp	r7, #0
 800b1ae:	f000 80d8 	beq.w	800b362 <_printf_i+0x1d2>
 800b1b2:	2f58      	cmp	r7, #88	; 0x58
 800b1b4:	f000 80a3 	beq.w	800b2fe <_printf_i+0x16e>
 800b1b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1c0:	e03a      	b.n	800b238 <_printf_i+0xa8>
 800b1c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1c6:	2b15      	cmp	r3, #21
 800b1c8:	d8f6      	bhi.n	800b1b8 <_printf_i+0x28>
 800b1ca:	a101      	add	r1, pc, #4	; (adr r1, 800b1d0 <_printf_i+0x40>)
 800b1cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1d0:	0800b229 	.word	0x0800b229
 800b1d4:	0800b23d 	.word	0x0800b23d
 800b1d8:	0800b1b9 	.word	0x0800b1b9
 800b1dc:	0800b1b9 	.word	0x0800b1b9
 800b1e0:	0800b1b9 	.word	0x0800b1b9
 800b1e4:	0800b1b9 	.word	0x0800b1b9
 800b1e8:	0800b23d 	.word	0x0800b23d
 800b1ec:	0800b1b9 	.word	0x0800b1b9
 800b1f0:	0800b1b9 	.word	0x0800b1b9
 800b1f4:	0800b1b9 	.word	0x0800b1b9
 800b1f8:	0800b1b9 	.word	0x0800b1b9
 800b1fc:	0800b349 	.word	0x0800b349
 800b200:	0800b26d 	.word	0x0800b26d
 800b204:	0800b32b 	.word	0x0800b32b
 800b208:	0800b1b9 	.word	0x0800b1b9
 800b20c:	0800b1b9 	.word	0x0800b1b9
 800b210:	0800b36b 	.word	0x0800b36b
 800b214:	0800b1b9 	.word	0x0800b1b9
 800b218:	0800b26d 	.word	0x0800b26d
 800b21c:	0800b1b9 	.word	0x0800b1b9
 800b220:	0800b1b9 	.word	0x0800b1b9
 800b224:	0800b333 	.word	0x0800b333
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	1d1a      	adds	r2, r3, #4
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	602a      	str	r2, [r5, #0]
 800b230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b238:	2301      	movs	r3, #1
 800b23a:	e0a3      	b.n	800b384 <_printf_i+0x1f4>
 800b23c:	6820      	ldr	r0, [r4, #0]
 800b23e:	6829      	ldr	r1, [r5, #0]
 800b240:	0606      	lsls	r6, r0, #24
 800b242:	f101 0304 	add.w	r3, r1, #4
 800b246:	d50a      	bpl.n	800b25e <_printf_i+0xce>
 800b248:	680e      	ldr	r6, [r1, #0]
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	2e00      	cmp	r6, #0
 800b24e:	da03      	bge.n	800b258 <_printf_i+0xc8>
 800b250:	232d      	movs	r3, #45	; 0x2d
 800b252:	4276      	negs	r6, r6
 800b254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b258:	485e      	ldr	r0, [pc, #376]	; (800b3d4 <_printf_i+0x244>)
 800b25a:	230a      	movs	r3, #10
 800b25c:	e019      	b.n	800b292 <_printf_i+0x102>
 800b25e:	680e      	ldr	r6, [r1, #0]
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b266:	bf18      	it	ne
 800b268:	b236      	sxthne	r6, r6
 800b26a:	e7ef      	b.n	800b24c <_printf_i+0xbc>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	6820      	ldr	r0, [r4, #0]
 800b270:	1d19      	adds	r1, r3, #4
 800b272:	6029      	str	r1, [r5, #0]
 800b274:	0601      	lsls	r1, r0, #24
 800b276:	d501      	bpl.n	800b27c <_printf_i+0xec>
 800b278:	681e      	ldr	r6, [r3, #0]
 800b27a:	e002      	b.n	800b282 <_printf_i+0xf2>
 800b27c:	0646      	lsls	r6, r0, #25
 800b27e:	d5fb      	bpl.n	800b278 <_printf_i+0xe8>
 800b280:	881e      	ldrh	r6, [r3, #0]
 800b282:	4854      	ldr	r0, [pc, #336]	; (800b3d4 <_printf_i+0x244>)
 800b284:	2f6f      	cmp	r7, #111	; 0x6f
 800b286:	bf0c      	ite	eq
 800b288:	2308      	moveq	r3, #8
 800b28a:	230a      	movne	r3, #10
 800b28c:	2100      	movs	r1, #0
 800b28e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b292:	6865      	ldr	r5, [r4, #4]
 800b294:	60a5      	str	r5, [r4, #8]
 800b296:	2d00      	cmp	r5, #0
 800b298:	bfa2      	ittt	ge
 800b29a:	6821      	ldrge	r1, [r4, #0]
 800b29c:	f021 0104 	bicge.w	r1, r1, #4
 800b2a0:	6021      	strge	r1, [r4, #0]
 800b2a2:	b90e      	cbnz	r6, 800b2a8 <_printf_i+0x118>
 800b2a4:	2d00      	cmp	r5, #0
 800b2a6:	d04d      	beq.n	800b344 <_printf_i+0x1b4>
 800b2a8:	4615      	mov	r5, r2
 800b2aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2ae:	fb03 6711 	mls	r7, r3, r1, r6
 800b2b2:	5dc7      	ldrb	r7, [r0, r7]
 800b2b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2b8:	4637      	mov	r7, r6
 800b2ba:	42bb      	cmp	r3, r7
 800b2bc:	460e      	mov	r6, r1
 800b2be:	d9f4      	bls.n	800b2aa <_printf_i+0x11a>
 800b2c0:	2b08      	cmp	r3, #8
 800b2c2:	d10b      	bne.n	800b2dc <_printf_i+0x14c>
 800b2c4:	6823      	ldr	r3, [r4, #0]
 800b2c6:	07de      	lsls	r6, r3, #31
 800b2c8:	d508      	bpl.n	800b2dc <_printf_i+0x14c>
 800b2ca:	6923      	ldr	r3, [r4, #16]
 800b2cc:	6861      	ldr	r1, [r4, #4]
 800b2ce:	4299      	cmp	r1, r3
 800b2d0:	bfde      	ittt	le
 800b2d2:	2330      	movle	r3, #48	; 0x30
 800b2d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2dc:	1b52      	subs	r2, r2, r5
 800b2de:	6122      	str	r2, [r4, #16]
 800b2e0:	f8cd a000 	str.w	sl, [sp]
 800b2e4:	464b      	mov	r3, r9
 800b2e6:	aa03      	add	r2, sp, #12
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	f7ff fee2 	bl	800b0b4 <_printf_common>
 800b2f0:	3001      	adds	r0, #1
 800b2f2:	d14c      	bne.n	800b38e <_printf_i+0x1fe>
 800b2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f8:	b004      	add	sp, #16
 800b2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fe:	4835      	ldr	r0, [pc, #212]	; (800b3d4 <_printf_i+0x244>)
 800b300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b304:	6829      	ldr	r1, [r5, #0]
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	f851 6b04 	ldr.w	r6, [r1], #4
 800b30c:	6029      	str	r1, [r5, #0]
 800b30e:	061d      	lsls	r5, r3, #24
 800b310:	d514      	bpl.n	800b33c <_printf_i+0x1ac>
 800b312:	07df      	lsls	r7, r3, #31
 800b314:	bf44      	itt	mi
 800b316:	f043 0320 	orrmi.w	r3, r3, #32
 800b31a:	6023      	strmi	r3, [r4, #0]
 800b31c:	b91e      	cbnz	r6, 800b326 <_printf_i+0x196>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	f023 0320 	bic.w	r3, r3, #32
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	2310      	movs	r3, #16
 800b328:	e7b0      	b.n	800b28c <_printf_i+0xfc>
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	f043 0320 	orr.w	r3, r3, #32
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	2378      	movs	r3, #120	; 0x78
 800b334:	4828      	ldr	r0, [pc, #160]	; (800b3d8 <_printf_i+0x248>)
 800b336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b33a:	e7e3      	b.n	800b304 <_printf_i+0x174>
 800b33c:	0659      	lsls	r1, r3, #25
 800b33e:	bf48      	it	mi
 800b340:	b2b6      	uxthmi	r6, r6
 800b342:	e7e6      	b.n	800b312 <_printf_i+0x182>
 800b344:	4615      	mov	r5, r2
 800b346:	e7bb      	b.n	800b2c0 <_printf_i+0x130>
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	6826      	ldr	r6, [r4, #0]
 800b34c:	6961      	ldr	r1, [r4, #20]
 800b34e:	1d18      	adds	r0, r3, #4
 800b350:	6028      	str	r0, [r5, #0]
 800b352:	0635      	lsls	r5, r6, #24
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	d501      	bpl.n	800b35c <_printf_i+0x1cc>
 800b358:	6019      	str	r1, [r3, #0]
 800b35a:	e002      	b.n	800b362 <_printf_i+0x1d2>
 800b35c:	0670      	lsls	r0, r6, #25
 800b35e:	d5fb      	bpl.n	800b358 <_printf_i+0x1c8>
 800b360:	8019      	strh	r1, [r3, #0]
 800b362:	2300      	movs	r3, #0
 800b364:	6123      	str	r3, [r4, #16]
 800b366:	4615      	mov	r5, r2
 800b368:	e7ba      	b.n	800b2e0 <_printf_i+0x150>
 800b36a:	682b      	ldr	r3, [r5, #0]
 800b36c:	1d1a      	adds	r2, r3, #4
 800b36e:	602a      	str	r2, [r5, #0]
 800b370:	681d      	ldr	r5, [r3, #0]
 800b372:	6862      	ldr	r2, [r4, #4]
 800b374:	2100      	movs	r1, #0
 800b376:	4628      	mov	r0, r5
 800b378:	f7f4 ff4a 	bl	8000210 <memchr>
 800b37c:	b108      	cbz	r0, 800b382 <_printf_i+0x1f2>
 800b37e:	1b40      	subs	r0, r0, r5
 800b380:	6060      	str	r0, [r4, #4]
 800b382:	6863      	ldr	r3, [r4, #4]
 800b384:	6123      	str	r3, [r4, #16]
 800b386:	2300      	movs	r3, #0
 800b388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b38c:	e7a8      	b.n	800b2e0 <_printf_i+0x150>
 800b38e:	6923      	ldr	r3, [r4, #16]
 800b390:	462a      	mov	r2, r5
 800b392:	4649      	mov	r1, r9
 800b394:	4640      	mov	r0, r8
 800b396:	47d0      	blx	sl
 800b398:	3001      	adds	r0, #1
 800b39a:	d0ab      	beq.n	800b2f4 <_printf_i+0x164>
 800b39c:	6823      	ldr	r3, [r4, #0]
 800b39e:	079b      	lsls	r3, r3, #30
 800b3a0:	d413      	bmi.n	800b3ca <_printf_i+0x23a>
 800b3a2:	68e0      	ldr	r0, [r4, #12]
 800b3a4:	9b03      	ldr	r3, [sp, #12]
 800b3a6:	4298      	cmp	r0, r3
 800b3a8:	bfb8      	it	lt
 800b3aa:	4618      	movlt	r0, r3
 800b3ac:	e7a4      	b.n	800b2f8 <_printf_i+0x168>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	47d0      	blx	sl
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	d09b      	beq.n	800b2f4 <_printf_i+0x164>
 800b3bc:	3501      	adds	r5, #1
 800b3be:	68e3      	ldr	r3, [r4, #12]
 800b3c0:	9903      	ldr	r1, [sp, #12]
 800b3c2:	1a5b      	subs	r3, r3, r1
 800b3c4:	42ab      	cmp	r3, r5
 800b3c6:	dcf2      	bgt.n	800b3ae <_printf_i+0x21e>
 800b3c8:	e7eb      	b.n	800b3a2 <_printf_i+0x212>
 800b3ca:	2500      	movs	r5, #0
 800b3cc:	f104 0619 	add.w	r6, r4, #25
 800b3d0:	e7f5      	b.n	800b3be <_printf_i+0x22e>
 800b3d2:	bf00      	nop
 800b3d4:	0800f768 	.word	0x0800f768
 800b3d8:	0800f779 	.word	0x0800f779

0800b3dc <_sbrk_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4d06      	ldr	r5, [pc, #24]	; (800b3f8 <_sbrk_r+0x1c>)
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	602b      	str	r3, [r5, #0]
 800b3e8:	f7f8 fd66 	bl	8003eb8 <_sbrk>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_sbrk_r+0x1a>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_sbrk_r+0x1a>
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	20000b34 	.word	0x20000b34

0800b3fc <siprintf>:
 800b3fc:	b40e      	push	{r1, r2, r3}
 800b3fe:	b500      	push	{lr}
 800b400:	b09c      	sub	sp, #112	; 0x70
 800b402:	ab1d      	add	r3, sp, #116	; 0x74
 800b404:	9002      	str	r0, [sp, #8]
 800b406:	9006      	str	r0, [sp, #24]
 800b408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b40c:	4809      	ldr	r0, [pc, #36]	; (800b434 <siprintf+0x38>)
 800b40e:	9107      	str	r1, [sp, #28]
 800b410:	9104      	str	r1, [sp, #16]
 800b412:	4909      	ldr	r1, [pc, #36]	; (800b438 <siprintf+0x3c>)
 800b414:	f853 2b04 	ldr.w	r2, [r3], #4
 800b418:	9105      	str	r1, [sp, #20]
 800b41a:	6800      	ldr	r0, [r0, #0]
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	a902      	add	r1, sp, #8
 800b420:	f001 fbf6 	bl	800cc10 <_svfiprintf_r>
 800b424:	9b02      	ldr	r3, [sp, #8]
 800b426:	2200      	movs	r2, #0
 800b428:	701a      	strb	r2, [r3, #0]
 800b42a:	b01c      	add	sp, #112	; 0x70
 800b42c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b430:	b003      	add	sp, #12
 800b432:	4770      	bx	lr
 800b434:	2000029c 	.word	0x2000029c
 800b438:	ffff0208 	.word	0xffff0208

0800b43c <siscanf>:
 800b43c:	b40e      	push	{r1, r2, r3}
 800b43e:	b510      	push	{r4, lr}
 800b440:	b09f      	sub	sp, #124	; 0x7c
 800b442:	ac21      	add	r4, sp, #132	; 0x84
 800b444:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b448:	f854 2b04 	ldr.w	r2, [r4], #4
 800b44c:	9201      	str	r2, [sp, #4]
 800b44e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b452:	9004      	str	r0, [sp, #16]
 800b454:	9008      	str	r0, [sp, #32]
 800b456:	f7f4 fecd 	bl	80001f4 <strlen>
 800b45a:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <siscanf+0x50>)
 800b45c:	9005      	str	r0, [sp, #20]
 800b45e:	9009      	str	r0, [sp, #36]	; 0x24
 800b460:	930d      	str	r3, [sp, #52]	; 0x34
 800b462:	480b      	ldr	r0, [pc, #44]	; (800b490 <siscanf+0x54>)
 800b464:	9a01      	ldr	r2, [sp, #4]
 800b466:	6800      	ldr	r0, [r0, #0]
 800b468:	9403      	str	r4, [sp, #12]
 800b46a:	2300      	movs	r3, #0
 800b46c:	9311      	str	r3, [sp, #68]	; 0x44
 800b46e:	9316      	str	r3, [sp, #88]	; 0x58
 800b470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b474:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b478:	a904      	add	r1, sp, #16
 800b47a:	4623      	mov	r3, r4
 800b47c:	f001 fd22 	bl	800cec4 <__ssvfiscanf_r>
 800b480:	b01f      	add	sp, #124	; 0x7c
 800b482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b486:	b003      	add	sp, #12
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	0800b4b7 	.word	0x0800b4b7
 800b490:	2000029c 	.word	0x2000029c

0800b494 <__sread>:
 800b494:	b510      	push	{r4, lr}
 800b496:	460c      	mov	r4, r1
 800b498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b49c:	f001 ffdc 	bl	800d458 <_read_r>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	bfab      	itete	ge
 800b4a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4a6:	89a3      	ldrhlt	r3, [r4, #12]
 800b4a8:	181b      	addge	r3, r3, r0
 800b4aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4ae:	bfac      	ite	ge
 800b4b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4b2:	81a3      	strhlt	r3, [r4, #12]
 800b4b4:	bd10      	pop	{r4, pc}

0800b4b6 <__seofread>:
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	4770      	bx	lr

0800b4ba <__swrite>:
 800b4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4be:	461f      	mov	r7, r3
 800b4c0:	898b      	ldrh	r3, [r1, #12]
 800b4c2:	05db      	lsls	r3, r3, #23
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	d505      	bpl.n	800b4d8 <__swrite+0x1e>
 800b4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f000 ff7a 	bl	800c3cc <_lseek_r>
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4e2:	81a3      	strh	r3, [r4, #12]
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ee:	f000 b8cd 	b.w	800b68c <_write_r>

0800b4f2 <__sseek>:
 800b4f2:	b510      	push	{r4, lr}
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fa:	f000 ff67 	bl	800c3cc <_lseek_r>
 800b4fe:	1c43      	adds	r3, r0, #1
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	bf15      	itete	ne
 800b504:	6560      	strne	r0, [r4, #84]	; 0x54
 800b506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b50e:	81a3      	strheq	r3, [r4, #12]
 800b510:	bf18      	it	ne
 800b512:	81a3      	strhne	r3, [r4, #12]
 800b514:	bd10      	pop	{r4, pc}

0800b516 <__sclose>:
 800b516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51a:	f000 b8c9 	b.w	800b6b0 <_close_r>

0800b51e <strchr>:
 800b51e:	b2c9      	uxtb	r1, r1
 800b520:	4603      	mov	r3, r0
 800b522:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b526:	b11a      	cbz	r2, 800b530 <strchr+0x12>
 800b528:	428a      	cmp	r2, r1
 800b52a:	d1f9      	bne.n	800b520 <strchr+0x2>
 800b52c:	4618      	mov	r0, r3
 800b52e:	4770      	bx	lr
 800b530:	2900      	cmp	r1, #0
 800b532:	bf18      	it	ne
 800b534:	2300      	movne	r3, #0
 800b536:	e7f9      	b.n	800b52c <strchr+0xe>

0800b538 <strcpy>:
 800b538:	4603      	mov	r3, r0
 800b53a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b53e:	f803 2b01 	strb.w	r2, [r3], #1
 800b542:	2a00      	cmp	r2, #0
 800b544:	d1f9      	bne.n	800b53a <strcpy+0x2>
 800b546:	4770      	bx	lr

0800b548 <strncmp>:
 800b548:	b510      	push	{r4, lr}
 800b54a:	b17a      	cbz	r2, 800b56c <strncmp+0x24>
 800b54c:	4603      	mov	r3, r0
 800b54e:	3901      	subs	r1, #1
 800b550:	1884      	adds	r4, r0, r2
 800b552:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b556:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b55a:	4290      	cmp	r0, r2
 800b55c:	d101      	bne.n	800b562 <strncmp+0x1a>
 800b55e:	42a3      	cmp	r3, r4
 800b560:	d101      	bne.n	800b566 <strncmp+0x1e>
 800b562:	1a80      	subs	r0, r0, r2
 800b564:	bd10      	pop	{r4, pc}
 800b566:	2800      	cmp	r0, #0
 800b568:	d1f3      	bne.n	800b552 <strncmp+0xa>
 800b56a:	e7fa      	b.n	800b562 <strncmp+0x1a>
 800b56c:	4610      	mov	r0, r2
 800b56e:	e7f9      	b.n	800b564 <strncmp+0x1c>

0800b570 <_strtol_l.constprop.0>:
 800b570:	2b01      	cmp	r3, #1
 800b572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b576:	d001      	beq.n	800b57c <_strtol_l.constprop.0+0xc>
 800b578:	2b24      	cmp	r3, #36	; 0x24
 800b57a:	d906      	bls.n	800b58a <_strtol_l.constprop.0+0x1a>
 800b57c:	f7ff f9a2 	bl	800a8c4 <__errno>
 800b580:	2316      	movs	r3, #22
 800b582:	6003      	str	r3, [r0, #0]
 800b584:	2000      	movs	r0, #0
 800b586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b58a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b670 <_strtol_l.constprop.0+0x100>
 800b58e:	460d      	mov	r5, r1
 800b590:	462e      	mov	r6, r5
 800b592:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b596:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b59a:	f017 0708 	ands.w	r7, r7, #8
 800b59e:	d1f7      	bne.n	800b590 <_strtol_l.constprop.0+0x20>
 800b5a0:	2c2d      	cmp	r4, #45	; 0x2d
 800b5a2:	d132      	bne.n	800b60a <_strtol_l.constprop.0+0x9a>
 800b5a4:	782c      	ldrb	r4, [r5, #0]
 800b5a6:	2701      	movs	r7, #1
 800b5a8:	1cb5      	adds	r5, r6, #2
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d05b      	beq.n	800b666 <_strtol_l.constprop.0+0xf6>
 800b5ae:	2b10      	cmp	r3, #16
 800b5b0:	d109      	bne.n	800b5c6 <_strtol_l.constprop.0+0x56>
 800b5b2:	2c30      	cmp	r4, #48	; 0x30
 800b5b4:	d107      	bne.n	800b5c6 <_strtol_l.constprop.0+0x56>
 800b5b6:	782c      	ldrb	r4, [r5, #0]
 800b5b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b5bc:	2c58      	cmp	r4, #88	; 0x58
 800b5be:	d14d      	bne.n	800b65c <_strtol_l.constprop.0+0xec>
 800b5c0:	786c      	ldrb	r4, [r5, #1]
 800b5c2:	2310      	movs	r3, #16
 800b5c4:	3502      	adds	r5, #2
 800b5c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b5ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5ce:	f04f 0c00 	mov.w	ip, #0
 800b5d2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b5d6:	4666      	mov	r6, ip
 800b5d8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b5dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b5e0:	f1be 0f09 	cmp.w	lr, #9
 800b5e4:	d816      	bhi.n	800b614 <_strtol_l.constprop.0+0xa4>
 800b5e6:	4674      	mov	r4, lr
 800b5e8:	42a3      	cmp	r3, r4
 800b5ea:	dd24      	ble.n	800b636 <_strtol_l.constprop.0+0xc6>
 800b5ec:	f1bc 0f00 	cmp.w	ip, #0
 800b5f0:	db1e      	blt.n	800b630 <_strtol_l.constprop.0+0xc0>
 800b5f2:	45b1      	cmp	r9, r6
 800b5f4:	d31c      	bcc.n	800b630 <_strtol_l.constprop.0+0xc0>
 800b5f6:	d101      	bne.n	800b5fc <_strtol_l.constprop.0+0x8c>
 800b5f8:	45a2      	cmp	sl, r4
 800b5fa:	db19      	blt.n	800b630 <_strtol_l.constprop.0+0xc0>
 800b5fc:	fb06 4603 	mla	r6, r6, r3, r4
 800b600:	f04f 0c01 	mov.w	ip, #1
 800b604:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b608:	e7e8      	b.n	800b5dc <_strtol_l.constprop.0+0x6c>
 800b60a:	2c2b      	cmp	r4, #43	; 0x2b
 800b60c:	bf04      	itt	eq
 800b60e:	782c      	ldrbeq	r4, [r5, #0]
 800b610:	1cb5      	addeq	r5, r6, #2
 800b612:	e7ca      	b.n	800b5aa <_strtol_l.constprop.0+0x3a>
 800b614:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b618:	f1be 0f19 	cmp.w	lr, #25
 800b61c:	d801      	bhi.n	800b622 <_strtol_l.constprop.0+0xb2>
 800b61e:	3c37      	subs	r4, #55	; 0x37
 800b620:	e7e2      	b.n	800b5e8 <_strtol_l.constprop.0+0x78>
 800b622:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b626:	f1be 0f19 	cmp.w	lr, #25
 800b62a:	d804      	bhi.n	800b636 <_strtol_l.constprop.0+0xc6>
 800b62c:	3c57      	subs	r4, #87	; 0x57
 800b62e:	e7db      	b.n	800b5e8 <_strtol_l.constprop.0+0x78>
 800b630:	f04f 3cff 	mov.w	ip, #4294967295
 800b634:	e7e6      	b.n	800b604 <_strtol_l.constprop.0+0x94>
 800b636:	f1bc 0f00 	cmp.w	ip, #0
 800b63a:	da05      	bge.n	800b648 <_strtol_l.constprop.0+0xd8>
 800b63c:	2322      	movs	r3, #34	; 0x22
 800b63e:	6003      	str	r3, [r0, #0]
 800b640:	4646      	mov	r6, r8
 800b642:	b942      	cbnz	r2, 800b656 <_strtol_l.constprop.0+0xe6>
 800b644:	4630      	mov	r0, r6
 800b646:	e79e      	b.n	800b586 <_strtol_l.constprop.0+0x16>
 800b648:	b107      	cbz	r7, 800b64c <_strtol_l.constprop.0+0xdc>
 800b64a:	4276      	negs	r6, r6
 800b64c:	2a00      	cmp	r2, #0
 800b64e:	d0f9      	beq.n	800b644 <_strtol_l.constprop.0+0xd4>
 800b650:	f1bc 0f00 	cmp.w	ip, #0
 800b654:	d000      	beq.n	800b658 <_strtol_l.constprop.0+0xe8>
 800b656:	1e69      	subs	r1, r5, #1
 800b658:	6011      	str	r1, [r2, #0]
 800b65a:	e7f3      	b.n	800b644 <_strtol_l.constprop.0+0xd4>
 800b65c:	2430      	movs	r4, #48	; 0x30
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1b1      	bne.n	800b5c6 <_strtol_l.constprop.0+0x56>
 800b662:	2308      	movs	r3, #8
 800b664:	e7af      	b.n	800b5c6 <_strtol_l.constprop.0+0x56>
 800b666:	2c30      	cmp	r4, #48	; 0x30
 800b668:	d0a5      	beq.n	800b5b6 <_strtol_l.constprop.0+0x46>
 800b66a:	230a      	movs	r3, #10
 800b66c:	e7ab      	b.n	800b5c6 <_strtol_l.constprop.0+0x56>
 800b66e:	bf00      	nop
 800b670:	0800f78b 	.word	0x0800f78b

0800b674 <_strtol_r>:
 800b674:	f7ff bf7c 	b.w	800b570 <_strtol_l.constprop.0>

0800b678 <strtol>:
 800b678:	4613      	mov	r3, r2
 800b67a:	460a      	mov	r2, r1
 800b67c:	4601      	mov	r1, r0
 800b67e:	4802      	ldr	r0, [pc, #8]	; (800b688 <strtol+0x10>)
 800b680:	6800      	ldr	r0, [r0, #0]
 800b682:	f7ff bf75 	b.w	800b570 <_strtol_l.constprop.0>
 800b686:	bf00      	nop
 800b688:	2000029c 	.word	0x2000029c

0800b68c <_write_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4d07      	ldr	r5, [pc, #28]	; (800b6ac <_write_r+0x20>)
 800b690:	4604      	mov	r4, r0
 800b692:	4608      	mov	r0, r1
 800b694:	4611      	mov	r1, r2
 800b696:	2200      	movs	r2, #0
 800b698:	602a      	str	r2, [r5, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	f7f8 fbbb 	bl	8003e16 <_write>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <_write_r+0x1e>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	b103      	cbz	r3, 800b6aa <_write_r+0x1e>
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	20000b34 	.word	0x20000b34

0800b6b0 <_close_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4d06      	ldr	r5, [pc, #24]	; (800b6cc <_close_r+0x1c>)
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	4608      	mov	r0, r1
 800b6ba:	602b      	str	r3, [r5, #0]
 800b6bc:	f7f8 fbc7 	bl	8003e4e <_close>
 800b6c0:	1c43      	adds	r3, r0, #1
 800b6c2:	d102      	bne.n	800b6ca <_close_r+0x1a>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	b103      	cbz	r3, 800b6ca <_close_r+0x1a>
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	20000b34 	.word	0x20000b34

0800b6d0 <quorem>:
 800b6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	6903      	ldr	r3, [r0, #16]
 800b6d6:	690c      	ldr	r4, [r1, #16]
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	4607      	mov	r7, r0
 800b6dc:	f2c0 8081 	blt.w	800b7e2 <quorem+0x112>
 800b6e0:	3c01      	subs	r4, #1
 800b6e2:	f101 0814 	add.w	r8, r1, #20
 800b6e6:	f100 0514 	add.w	r5, r0, #20
 800b6ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ee:	9301      	str	r3, [sp, #4]
 800b6f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b704:	fbb2 f6f3 	udiv	r6, r2, r3
 800b708:	d331      	bcc.n	800b76e <quorem+0x9e>
 800b70a:	f04f 0e00 	mov.w	lr, #0
 800b70e:	4640      	mov	r0, r8
 800b710:	46ac      	mov	ip, r5
 800b712:	46f2      	mov	sl, lr
 800b714:	f850 2b04 	ldr.w	r2, [r0], #4
 800b718:	b293      	uxth	r3, r2
 800b71a:	fb06 e303 	mla	r3, r6, r3, lr
 800b71e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b722:	b29b      	uxth	r3, r3
 800b724:	ebaa 0303 	sub.w	r3, sl, r3
 800b728:	f8dc a000 	ldr.w	sl, [ip]
 800b72c:	0c12      	lsrs	r2, r2, #16
 800b72e:	fa13 f38a 	uxtah	r3, r3, sl
 800b732:	fb06 e202 	mla	r2, r6, r2, lr
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	9b00      	ldr	r3, [sp, #0]
 800b73a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b73e:	b292      	uxth	r2, r2
 800b740:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b748:	f8bd 3000 	ldrh.w	r3, [sp]
 800b74c:	4581      	cmp	r9, r0
 800b74e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b752:	f84c 3b04 	str.w	r3, [ip], #4
 800b756:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b75a:	d2db      	bcs.n	800b714 <quorem+0x44>
 800b75c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b760:	b92b      	cbnz	r3, 800b76e <quorem+0x9e>
 800b762:	9b01      	ldr	r3, [sp, #4]
 800b764:	3b04      	subs	r3, #4
 800b766:	429d      	cmp	r5, r3
 800b768:	461a      	mov	r2, r3
 800b76a:	d32e      	bcc.n	800b7ca <quorem+0xfa>
 800b76c:	613c      	str	r4, [r7, #16]
 800b76e:	4638      	mov	r0, r7
 800b770:	f001 f8da 	bl	800c928 <__mcmp>
 800b774:	2800      	cmp	r0, #0
 800b776:	db24      	blt.n	800b7c2 <quorem+0xf2>
 800b778:	3601      	adds	r6, #1
 800b77a:	4628      	mov	r0, r5
 800b77c:	f04f 0c00 	mov.w	ip, #0
 800b780:	f858 2b04 	ldr.w	r2, [r8], #4
 800b784:	f8d0 e000 	ldr.w	lr, [r0]
 800b788:	b293      	uxth	r3, r2
 800b78a:	ebac 0303 	sub.w	r3, ip, r3
 800b78e:	0c12      	lsrs	r2, r2, #16
 800b790:	fa13 f38e 	uxtah	r3, r3, lr
 800b794:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7a2:	45c1      	cmp	r9, r8
 800b7a4:	f840 3b04 	str.w	r3, [r0], #4
 800b7a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7ac:	d2e8      	bcs.n	800b780 <quorem+0xb0>
 800b7ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7b6:	b922      	cbnz	r2, 800b7c2 <quorem+0xf2>
 800b7b8:	3b04      	subs	r3, #4
 800b7ba:	429d      	cmp	r5, r3
 800b7bc:	461a      	mov	r2, r3
 800b7be:	d30a      	bcc.n	800b7d6 <quorem+0x106>
 800b7c0:	613c      	str	r4, [r7, #16]
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	b003      	add	sp, #12
 800b7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ca:	6812      	ldr	r2, [r2, #0]
 800b7cc:	3b04      	subs	r3, #4
 800b7ce:	2a00      	cmp	r2, #0
 800b7d0:	d1cc      	bne.n	800b76c <quorem+0x9c>
 800b7d2:	3c01      	subs	r4, #1
 800b7d4:	e7c7      	b.n	800b766 <quorem+0x96>
 800b7d6:	6812      	ldr	r2, [r2, #0]
 800b7d8:	3b04      	subs	r3, #4
 800b7da:	2a00      	cmp	r2, #0
 800b7dc:	d1f0      	bne.n	800b7c0 <quorem+0xf0>
 800b7de:	3c01      	subs	r4, #1
 800b7e0:	e7eb      	b.n	800b7ba <quorem+0xea>
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	e7ee      	b.n	800b7c4 <quorem+0xf4>
	...

0800b7e8 <_dtoa_r>:
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	ed2d 8b04 	vpush	{d8-d9}
 800b7f0:	ec57 6b10 	vmov	r6, r7, d0
 800b7f4:	b093      	sub	sp, #76	; 0x4c
 800b7f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b7f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b7fc:	9106      	str	r1, [sp, #24]
 800b7fe:	ee10 aa10 	vmov	sl, s0
 800b802:	4604      	mov	r4, r0
 800b804:	9209      	str	r2, [sp, #36]	; 0x24
 800b806:	930c      	str	r3, [sp, #48]	; 0x30
 800b808:	46bb      	mov	fp, r7
 800b80a:	b975      	cbnz	r5, 800b82a <_dtoa_r+0x42>
 800b80c:	2010      	movs	r0, #16
 800b80e:	f7ff f883 	bl	800a918 <malloc>
 800b812:	4602      	mov	r2, r0
 800b814:	6260      	str	r0, [r4, #36]	; 0x24
 800b816:	b920      	cbnz	r0, 800b822 <_dtoa_r+0x3a>
 800b818:	4ba7      	ldr	r3, [pc, #668]	; (800bab8 <_dtoa_r+0x2d0>)
 800b81a:	21ea      	movs	r1, #234	; 0xea
 800b81c:	48a7      	ldr	r0, [pc, #668]	; (800babc <_dtoa_r+0x2d4>)
 800b81e:	f001 ff13 	bl	800d648 <__assert_func>
 800b822:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b826:	6005      	str	r5, [r0, #0]
 800b828:	60c5      	str	r5, [r0, #12]
 800b82a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b82c:	6819      	ldr	r1, [r3, #0]
 800b82e:	b151      	cbz	r1, 800b846 <_dtoa_r+0x5e>
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	604a      	str	r2, [r1, #4]
 800b834:	2301      	movs	r3, #1
 800b836:	4093      	lsls	r3, r2
 800b838:	608b      	str	r3, [r1, #8]
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 fe32 	bl	800c4a4 <_Bfree>
 800b840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]
 800b846:	1e3b      	subs	r3, r7, #0
 800b848:	bfaa      	itet	ge
 800b84a:	2300      	movge	r3, #0
 800b84c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b850:	f8c8 3000 	strge.w	r3, [r8]
 800b854:	4b9a      	ldr	r3, [pc, #616]	; (800bac0 <_dtoa_r+0x2d8>)
 800b856:	bfbc      	itt	lt
 800b858:	2201      	movlt	r2, #1
 800b85a:	f8c8 2000 	strlt.w	r2, [r8]
 800b85e:	ea33 030b 	bics.w	r3, r3, fp
 800b862:	d11b      	bne.n	800b89c <_dtoa_r+0xb4>
 800b864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b866:	f242 730f 	movw	r3, #9999	; 0x270f
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b870:	4333      	orrs	r3, r6
 800b872:	f000 8592 	beq.w	800c39a <_dtoa_r+0xbb2>
 800b876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b878:	b963      	cbnz	r3, 800b894 <_dtoa_r+0xac>
 800b87a:	4b92      	ldr	r3, [pc, #584]	; (800bac4 <_dtoa_r+0x2dc>)
 800b87c:	e022      	b.n	800b8c4 <_dtoa_r+0xdc>
 800b87e:	4b92      	ldr	r3, [pc, #584]	; (800bac8 <_dtoa_r+0x2e0>)
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	3308      	adds	r3, #8
 800b884:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	9801      	ldr	r0, [sp, #4]
 800b88a:	b013      	add	sp, #76	; 0x4c
 800b88c:	ecbd 8b04 	vpop	{d8-d9}
 800b890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b894:	4b8b      	ldr	r3, [pc, #556]	; (800bac4 <_dtoa_r+0x2dc>)
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	3303      	adds	r3, #3
 800b89a:	e7f3      	b.n	800b884 <_dtoa_r+0x9c>
 800b89c:	2200      	movs	r2, #0
 800b89e:	2300      	movs	r3, #0
 800b8a0:	4650      	mov	r0, sl
 800b8a2:	4659      	mov	r1, fp
 800b8a4:	f7f5 f928 	bl	8000af8 <__aeabi_dcmpeq>
 800b8a8:	ec4b ab19 	vmov	d9, sl, fp
 800b8ac:	4680      	mov	r8, r0
 800b8ae:	b158      	cbz	r0, 800b8c8 <_dtoa_r+0xe0>
 800b8b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	6013      	str	r3, [r2, #0]
 800b8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 856b 	beq.w	800c394 <_dtoa_r+0xbac>
 800b8be:	4883      	ldr	r0, [pc, #524]	; (800bacc <_dtoa_r+0x2e4>)
 800b8c0:	6018      	str	r0, [r3, #0]
 800b8c2:	1e43      	subs	r3, r0, #1
 800b8c4:	9301      	str	r3, [sp, #4]
 800b8c6:	e7df      	b.n	800b888 <_dtoa_r+0xa0>
 800b8c8:	ec4b ab10 	vmov	d0, sl, fp
 800b8cc:	aa10      	add	r2, sp, #64	; 0x40
 800b8ce:	a911      	add	r1, sp, #68	; 0x44
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f001 f8cf 	bl	800ca74 <__d2b>
 800b8d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b8da:	ee08 0a10 	vmov	s16, r0
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	f000 8084 	beq.w	800b9ec <_dtoa_r+0x204>
 800b8e4:	ee19 3a90 	vmov	r3, s19
 800b8e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b8f0:	4656      	mov	r6, sl
 800b8f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b8f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b8fe:	4b74      	ldr	r3, [pc, #464]	; (800bad0 <_dtoa_r+0x2e8>)
 800b900:	2200      	movs	r2, #0
 800b902:	4630      	mov	r0, r6
 800b904:	4639      	mov	r1, r7
 800b906:	f7f4 fcd7 	bl	80002b8 <__aeabi_dsub>
 800b90a:	a365      	add	r3, pc, #404	; (adr r3, 800baa0 <_dtoa_r+0x2b8>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fe8a 	bl	8000628 <__aeabi_dmul>
 800b914:	a364      	add	r3, pc, #400	; (adr r3, 800baa8 <_dtoa_r+0x2c0>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	f7f4 fccf 	bl	80002bc <__adddf3>
 800b91e:	4606      	mov	r6, r0
 800b920:	4628      	mov	r0, r5
 800b922:	460f      	mov	r7, r1
 800b924:	f7f4 fe16 	bl	8000554 <__aeabi_i2d>
 800b928:	a361      	add	r3, pc, #388	; (adr r3, 800bab0 <_dtoa_r+0x2c8>)
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f7f4 fe7b 	bl	8000628 <__aeabi_dmul>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f4 fcbf 	bl	80002bc <__adddf3>
 800b93e:	4606      	mov	r6, r0
 800b940:	460f      	mov	r7, r1
 800b942:	f7f5 f921 	bl	8000b88 <__aeabi_d2iz>
 800b946:	2200      	movs	r2, #0
 800b948:	9000      	str	r0, [sp, #0]
 800b94a:	2300      	movs	r3, #0
 800b94c:	4630      	mov	r0, r6
 800b94e:	4639      	mov	r1, r7
 800b950:	f7f5 f8dc 	bl	8000b0c <__aeabi_dcmplt>
 800b954:	b150      	cbz	r0, 800b96c <_dtoa_r+0x184>
 800b956:	9800      	ldr	r0, [sp, #0]
 800b958:	f7f4 fdfc 	bl	8000554 <__aeabi_i2d>
 800b95c:	4632      	mov	r2, r6
 800b95e:	463b      	mov	r3, r7
 800b960:	f7f5 f8ca 	bl	8000af8 <__aeabi_dcmpeq>
 800b964:	b910      	cbnz	r0, 800b96c <_dtoa_r+0x184>
 800b966:	9b00      	ldr	r3, [sp, #0]
 800b968:	3b01      	subs	r3, #1
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	9b00      	ldr	r3, [sp, #0]
 800b96e:	2b16      	cmp	r3, #22
 800b970:	d85a      	bhi.n	800ba28 <_dtoa_r+0x240>
 800b972:	9a00      	ldr	r2, [sp, #0]
 800b974:	4b57      	ldr	r3, [pc, #348]	; (800bad4 <_dtoa_r+0x2ec>)
 800b976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	ec51 0b19 	vmov	r0, r1, d9
 800b982:	f7f5 f8c3 	bl	8000b0c <__aeabi_dcmplt>
 800b986:	2800      	cmp	r0, #0
 800b988:	d050      	beq.n	800ba2c <_dtoa_r+0x244>
 800b98a:	9b00      	ldr	r3, [sp, #0]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	2300      	movs	r3, #0
 800b992:	930b      	str	r3, [sp, #44]	; 0x2c
 800b994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b996:	1b5d      	subs	r5, r3, r5
 800b998:	1e6b      	subs	r3, r5, #1
 800b99a:	9305      	str	r3, [sp, #20]
 800b99c:	bf45      	ittet	mi
 800b99e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9a2:	9304      	strmi	r3, [sp, #16]
 800b9a4:	2300      	movpl	r3, #0
 800b9a6:	2300      	movmi	r3, #0
 800b9a8:	bf4c      	ite	mi
 800b9aa:	9305      	strmi	r3, [sp, #20]
 800b9ac:	9304      	strpl	r3, [sp, #16]
 800b9ae:	9b00      	ldr	r3, [sp, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	db3d      	blt.n	800ba30 <_dtoa_r+0x248>
 800b9b4:	9b05      	ldr	r3, [sp, #20]
 800b9b6:	9a00      	ldr	r2, [sp, #0]
 800b9b8:	920a      	str	r2, [sp, #40]	; 0x28
 800b9ba:	4413      	add	r3, r2
 800b9bc:	9305      	str	r3, [sp, #20]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9307      	str	r3, [sp, #28]
 800b9c2:	9b06      	ldr	r3, [sp, #24]
 800b9c4:	2b09      	cmp	r3, #9
 800b9c6:	f200 8089 	bhi.w	800badc <_dtoa_r+0x2f4>
 800b9ca:	2b05      	cmp	r3, #5
 800b9cc:	bfc4      	itt	gt
 800b9ce:	3b04      	subgt	r3, #4
 800b9d0:	9306      	strgt	r3, [sp, #24]
 800b9d2:	9b06      	ldr	r3, [sp, #24]
 800b9d4:	f1a3 0302 	sub.w	r3, r3, #2
 800b9d8:	bfcc      	ite	gt
 800b9da:	2500      	movgt	r5, #0
 800b9dc:	2501      	movle	r5, #1
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	f200 8087 	bhi.w	800baf2 <_dtoa_r+0x30a>
 800b9e4:	e8df f003 	tbb	[pc, r3]
 800b9e8:	59383a2d 	.word	0x59383a2d
 800b9ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9f0:	441d      	add	r5, r3
 800b9f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9f6:	2b20      	cmp	r3, #32
 800b9f8:	bfc1      	itttt	gt
 800b9fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba02:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba06:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba0a:	bfda      	itte	le
 800ba0c:	f1c3 0320 	rsble	r3, r3, #32
 800ba10:	fa06 f003 	lslle.w	r0, r6, r3
 800ba14:	4318      	orrgt	r0, r3
 800ba16:	f7f4 fd8d 	bl	8000534 <__aeabi_ui2d>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba22:	3d01      	subs	r5, #1
 800ba24:	930e      	str	r3, [sp, #56]	; 0x38
 800ba26:	e76a      	b.n	800b8fe <_dtoa_r+0x116>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e7b2      	b.n	800b992 <_dtoa_r+0x1aa>
 800ba2c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba2e:	e7b1      	b.n	800b994 <_dtoa_r+0x1ac>
 800ba30:	9b04      	ldr	r3, [sp, #16]
 800ba32:	9a00      	ldr	r2, [sp, #0]
 800ba34:	1a9b      	subs	r3, r3, r2
 800ba36:	9304      	str	r3, [sp, #16]
 800ba38:	4253      	negs	r3, r2
 800ba3a:	9307      	str	r3, [sp, #28]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba40:	e7bf      	b.n	800b9c2 <_dtoa_r+0x1da>
 800ba42:	2300      	movs	r3, #0
 800ba44:	9308      	str	r3, [sp, #32]
 800ba46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	dc55      	bgt.n	800baf8 <_dtoa_r+0x310>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba52:	461a      	mov	r2, r3
 800ba54:	9209      	str	r2, [sp, #36]	; 0x24
 800ba56:	e00c      	b.n	800ba72 <_dtoa_r+0x28a>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e7f3      	b.n	800ba44 <_dtoa_r+0x25c>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba60:	9308      	str	r3, [sp, #32]
 800ba62:	9b00      	ldr	r3, [sp, #0]
 800ba64:	4413      	add	r3, r2
 800ba66:	9302      	str	r3, [sp, #8]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	9303      	str	r3, [sp, #12]
 800ba6e:	bfb8      	it	lt
 800ba70:	2301      	movlt	r3, #1
 800ba72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba74:	2200      	movs	r2, #0
 800ba76:	6042      	str	r2, [r0, #4]
 800ba78:	2204      	movs	r2, #4
 800ba7a:	f102 0614 	add.w	r6, r2, #20
 800ba7e:	429e      	cmp	r6, r3
 800ba80:	6841      	ldr	r1, [r0, #4]
 800ba82:	d93d      	bls.n	800bb00 <_dtoa_r+0x318>
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 fccd 	bl	800c424 <_Balloc>
 800ba8a:	9001      	str	r0, [sp, #4]
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d13b      	bne.n	800bb08 <_dtoa_r+0x320>
 800ba90:	4b11      	ldr	r3, [pc, #68]	; (800bad8 <_dtoa_r+0x2f0>)
 800ba92:	4602      	mov	r2, r0
 800ba94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba98:	e6c0      	b.n	800b81c <_dtoa_r+0x34>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e7df      	b.n	800ba5e <_dtoa_r+0x276>
 800ba9e:	bf00      	nop
 800baa0:	636f4361 	.word	0x636f4361
 800baa4:	3fd287a7 	.word	0x3fd287a7
 800baa8:	8b60c8b3 	.word	0x8b60c8b3
 800baac:	3fc68a28 	.word	0x3fc68a28
 800bab0:	509f79fb 	.word	0x509f79fb
 800bab4:	3fd34413 	.word	0x3fd34413
 800bab8:	0800f898 	.word	0x0800f898
 800babc:	0800f8af 	.word	0x0800f8af
 800bac0:	7ff00000 	.word	0x7ff00000
 800bac4:	0800f894 	.word	0x0800f894
 800bac8:	0800f88b 	.word	0x0800f88b
 800bacc:	0800fa8a 	.word	0x0800fa8a
 800bad0:	3ff80000 	.word	0x3ff80000
 800bad4:	0800f9a0 	.word	0x0800f9a0
 800bad8:	0800f90a 	.word	0x0800f90a
 800badc:	2501      	movs	r5, #1
 800bade:	2300      	movs	r3, #0
 800bae0:	9306      	str	r3, [sp, #24]
 800bae2:	9508      	str	r5, [sp, #32]
 800bae4:	f04f 33ff 	mov.w	r3, #4294967295
 800bae8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800baec:	2200      	movs	r2, #0
 800baee:	2312      	movs	r3, #18
 800baf0:	e7b0      	b.n	800ba54 <_dtoa_r+0x26c>
 800baf2:	2301      	movs	r3, #1
 800baf4:	9308      	str	r3, [sp, #32]
 800baf6:	e7f5      	b.n	800bae4 <_dtoa_r+0x2fc>
 800baf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bafa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bafe:	e7b8      	b.n	800ba72 <_dtoa_r+0x28a>
 800bb00:	3101      	adds	r1, #1
 800bb02:	6041      	str	r1, [r0, #4]
 800bb04:	0052      	lsls	r2, r2, #1
 800bb06:	e7b8      	b.n	800ba7a <_dtoa_r+0x292>
 800bb08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb0a:	9a01      	ldr	r2, [sp, #4]
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	2b0e      	cmp	r3, #14
 800bb12:	f200 809d 	bhi.w	800bc50 <_dtoa_r+0x468>
 800bb16:	2d00      	cmp	r5, #0
 800bb18:	f000 809a 	beq.w	800bc50 <_dtoa_r+0x468>
 800bb1c:	9b00      	ldr	r3, [sp, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	dd32      	ble.n	800bb88 <_dtoa_r+0x3a0>
 800bb22:	4ab7      	ldr	r2, [pc, #732]	; (800be00 <_dtoa_r+0x618>)
 800bb24:	f003 030f 	and.w	r3, r3, #15
 800bb28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb30:	9b00      	ldr	r3, [sp, #0]
 800bb32:	05d8      	lsls	r0, r3, #23
 800bb34:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb38:	d516      	bpl.n	800bb68 <_dtoa_r+0x380>
 800bb3a:	4bb2      	ldr	r3, [pc, #712]	; (800be04 <_dtoa_r+0x61c>)
 800bb3c:	ec51 0b19 	vmov	r0, r1, d9
 800bb40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb44:	f7f4 fe9a 	bl	800087c <__aeabi_ddiv>
 800bb48:	f007 070f 	and.w	r7, r7, #15
 800bb4c:	4682      	mov	sl, r0
 800bb4e:	468b      	mov	fp, r1
 800bb50:	2503      	movs	r5, #3
 800bb52:	4eac      	ldr	r6, [pc, #688]	; (800be04 <_dtoa_r+0x61c>)
 800bb54:	b957      	cbnz	r7, 800bb6c <_dtoa_r+0x384>
 800bb56:	4642      	mov	r2, r8
 800bb58:	464b      	mov	r3, r9
 800bb5a:	4650      	mov	r0, sl
 800bb5c:	4659      	mov	r1, fp
 800bb5e:	f7f4 fe8d 	bl	800087c <__aeabi_ddiv>
 800bb62:	4682      	mov	sl, r0
 800bb64:	468b      	mov	fp, r1
 800bb66:	e028      	b.n	800bbba <_dtoa_r+0x3d2>
 800bb68:	2502      	movs	r5, #2
 800bb6a:	e7f2      	b.n	800bb52 <_dtoa_r+0x36a>
 800bb6c:	07f9      	lsls	r1, r7, #31
 800bb6e:	d508      	bpl.n	800bb82 <_dtoa_r+0x39a>
 800bb70:	4640      	mov	r0, r8
 800bb72:	4649      	mov	r1, r9
 800bb74:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb78:	f7f4 fd56 	bl	8000628 <__aeabi_dmul>
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	4680      	mov	r8, r0
 800bb80:	4689      	mov	r9, r1
 800bb82:	107f      	asrs	r7, r7, #1
 800bb84:	3608      	adds	r6, #8
 800bb86:	e7e5      	b.n	800bb54 <_dtoa_r+0x36c>
 800bb88:	f000 809b 	beq.w	800bcc2 <_dtoa_r+0x4da>
 800bb8c:	9b00      	ldr	r3, [sp, #0]
 800bb8e:	4f9d      	ldr	r7, [pc, #628]	; (800be04 <_dtoa_r+0x61c>)
 800bb90:	425e      	negs	r6, r3
 800bb92:	4b9b      	ldr	r3, [pc, #620]	; (800be00 <_dtoa_r+0x618>)
 800bb94:	f006 020f 	and.w	r2, r6, #15
 800bb98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	ec51 0b19 	vmov	r0, r1, d9
 800bba4:	f7f4 fd40 	bl	8000628 <__aeabi_dmul>
 800bba8:	1136      	asrs	r6, r6, #4
 800bbaa:	4682      	mov	sl, r0
 800bbac:	468b      	mov	fp, r1
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2502      	movs	r5, #2
 800bbb2:	2e00      	cmp	r6, #0
 800bbb4:	d17a      	bne.n	800bcac <_dtoa_r+0x4c4>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1d3      	bne.n	800bb62 <_dtoa_r+0x37a>
 800bbba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8082 	beq.w	800bcc6 <_dtoa_r+0x4de>
 800bbc2:	4b91      	ldr	r3, [pc, #580]	; (800be08 <_dtoa_r+0x620>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	4650      	mov	r0, sl
 800bbc8:	4659      	mov	r1, fp
 800bbca:	f7f4 ff9f 	bl	8000b0c <__aeabi_dcmplt>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d079      	beq.n	800bcc6 <_dtoa_r+0x4de>
 800bbd2:	9b03      	ldr	r3, [sp, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d076      	beq.n	800bcc6 <_dtoa_r+0x4de>
 800bbd8:	9b02      	ldr	r3, [sp, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dd36      	ble.n	800bc4c <_dtoa_r+0x464>
 800bbde:	9b00      	ldr	r3, [sp, #0]
 800bbe0:	4650      	mov	r0, sl
 800bbe2:	4659      	mov	r1, fp
 800bbe4:	1e5f      	subs	r7, r3, #1
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	4b88      	ldr	r3, [pc, #544]	; (800be0c <_dtoa_r+0x624>)
 800bbea:	f7f4 fd1d 	bl	8000628 <__aeabi_dmul>
 800bbee:	9e02      	ldr	r6, [sp, #8]
 800bbf0:	4682      	mov	sl, r0
 800bbf2:	468b      	mov	fp, r1
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f7f4 fcac 	bl	8000554 <__aeabi_i2d>
 800bbfc:	4652      	mov	r2, sl
 800bbfe:	465b      	mov	r3, fp
 800bc00:	f7f4 fd12 	bl	8000628 <__aeabi_dmul>
 800bc04:	4b82      	ldr	r3, [pc, #520]	; (800be10 <_dtoa_r+0x628>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	f7f4 fb58 	bl	80002bc <__adddf3>
 800bc0c:	46d0      	mov	r8, sl
 800bc0e:	46d9      	mov	r9, fp
 800bc10:	4682      	mov	sl, r0
 800bc12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc16:	2e00      	cmp	r6, #0
 800bc18:	d158      	bne.n	800bccc <_dtoa_r+0x4e4>
 800bc1a:	4b7e      	ldr	r3, [pc, #504]	; (800be14 <_dtoa_r+0x62c>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	4640      	mov	r0, r8
 800bc20:	4649      	mov	r1, r9
 800bc22:	f7f4 fb49 	bl	80002b8 <__aeabi_dsub>
 800bc26:	4652      	mov	r2, sl
 800bc28:	465b      	mov	r3, fp
 800bc2a:	4680      	mov	r8, r0
 800bc2c:	4689      	mov	r9, r1
 800bc2e:	f7f4 ff8b 	bl	8000b48 <__aeabi_dcmpgt>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	f040 8295 	bne.w	800c162 <_dtoa_r+0x97a>
 800bc38:	4652      	mov	r2, sl
 800bc3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 ff63 	bl	8000b0c <__aeabi_dcmplt>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f040 8289 	bne.w	800c15e <_dtoa_r+0x976>
 800bc4c:	ec5b ab19 	vmov	sl, fp, d9
 800bc50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f2c0 8148 	blt.w	800bee8 <_dtoa_r+0x700>
 800bc58:	9a00      	ldr	r2, [sp, #0]
 800bc5a:	2a0e      	cmp	r2, #14
 800bc5c:	f300 8144 	bgt.w	800bee8 <_dtoa_r+0x700>
 800bc60:	4b67      	ldr	r3, [pc, #412]	; (800be00 <_dtoa_r+0x618>)
 800bc62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc66:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f280 80d5 	bge.w	800be1c <_dtoa_r+0x634>
 800bc72:	9b03      	ldr	r3, [sp, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f300 80d1 	bgt.w	800be1c <_dtoa_r+0x634>
 800bc7a:	f040 826f 	bne.w	800c15c <_dtoa_r+0x974>
 800bc7e:	4b65      	ldr	r3, [pc, #404]	; (800be14 <_dtoa_r+0x62c>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	f7f4 fccf 	bl	8000628 <__aeabi_dmul>
 800bc8a:	4652      	mov	r2, sl
 800bc8c:	465b      	mov	r3, fp
 800bc8e:	f7f4 ff51 	bl	8000b34 <__aeabi_dcmpge>
 800bc92:	9e03      	ldr	r6, [sp, #12]
 800bc94:	4637      	mov	r7, r6
 800bc96:	2800      	cmp	r0, #0
 800bc98:	f040 8245 	bne.w	800c126 <_dtoa_r+0x93e>
 800bc9c:	9d01      	ldr	r5, [sp, #4]
 800bc9e:	2331      	movs	r3, #49	; 0x31
 800bca0:	f805 3b01 	strb.w	r3, [r5], #1
 800bca4:	9b00      	ldr	r3, [sp, #0]
 800bca6:	3301      	adds	r3, #1
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	e240      	b.n	800c12e <_dtoa_r+0x946>
 800bcac:	07f2      	lsls	r2, r6, #31
 800bcae:	d505      	bpl.n	800bcbc <_dtoa_r+0x4d4>
 800bcb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcb4:	f7f4 fcb8 	bl	8000628 <__aeabi_dmul>
 800bcb8:	3501      	adds	r5, #1
 800bcba:	2301      	movs	r3, #1
 800bcbc:	1076      	asrs	r6, r6, #1
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	e777      	b.n	800bbb2 <_dtoa_r+0x3ca>
 800bcc2:	2502      	movs	r5, #2
 800bcc4:	e779      	b.n	800bbba <_dtoa_r+0x3d2>
 800bcc6:	9f00      	ldr	r7, [sp, #0]
 800bcc8:	9e03      	ldr	r6, [sp, #12]
 800bcca:	e794      	b.n	800bbf6 <_dtoa_r+0x40e>
 800bccc:	9901      	ldr	r1, [sp, #4]
 800bcce:	4b4c      	ldr	r3, [pc, #304]	; (800be00 <_dtoa_r+0x618>)
 800bcd0:	4431      	add	r1, r6
 800bcd2:	910d      	str	r1, [sp, #52]	; 0x34
 800bcd4:	9908      	ldr	r1, [sp, #32]
 800bcd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcde:	2900      	cmp	r1, #0
 800bce0:	d043      	beq.n	800bd6a <_dtoa_r+0x582>
 800bce2:	494d      	ldr	r1, [pc, #308]	; (800be18 <_dtoa_r+0x630>)
 800bce4:	2000      	movs	r0, #0
 800bce6:	f7f4 fdc9 	bl	800087c <__aeabi_ddiv>
 800bcea:	4652      	mov	r2, sl
 800bcec:	465b      	mov	r3, fp
 800bcee:	f7f4 fae3 	bl	80002b8 <__aeabi_dsub>
 800bcf2:	9d01      	ldr	r5, [sp, #4]
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	468b      	mov	fp, r1
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	f7f4 ff44 	bl	8000b88 <__aeabi_d2iz>
 800bd00:	4606      	mov	r6, r0
 800bd02:	f7f4 fc27 	bl	8000554 <__aeabi_i2d>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	f7f4 fad3 	bl	80002b8 <__aeabi_dsub>
 800bd12:	3630      	adds	r6, #48	; 0x30
 800bd14:	f805 6b01 	strb.w	r6, [r5], #1
 800bd18:	4652      	mov	r2, sl
 800bd1a:	465b      	mov	r3, fp
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	4689      	mov	r9, r1
 800bd20:	f7f4 fef4 	bl	8000b0c <__aeabi_dcmplt>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d163      	bne.n	800bdf0 <_dtoa_r+0x608>
 800bd28:	4642      	mov	r2, r8
 800bd2a:	464b      	mov	r3, r9
 800bd2c:	4936      	ldr	r1, [pc, #216]	; (800be08 <_dtoa_r+0x620>)
 800bd2e:	2000      	movs	r0, #0
 800bd30:	f7f4 fac2 	bl	80002b8 <__aeabi_dsub>
 800bd34:	4652      	mov	r2, sl
 800bd36:	465b      	mov	r3, fp
 800bd38:	f7f4 fee8 	bl	8000b0c <__aeabi_dcmplt>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	f040 80b5 	bne.w	800beac <_dtoa_r+0x6c4>
 800bd42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd44:	429d      	cmp	r5, r3
 800bd46:	d081      	beq.n	800bc4c <_dtoa_r+0x464>
 800bd48:	4b30      	ldr	r3, [pc, #192]	; (800be0c <_dtoa_r+0x624>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4650      	mov	r0, sl
 800bd4e:	4659      	mov	r1, fp
 800bd50:	f7f4 fc6a 	bl	8000628 <__aeabi_dmul>
 800bd54:	4b2d      	ldr	r3, [pc, #180]	; (800be0c <_dtoa_r+0x624>)
 800bd56:	4682      	mov	sl, r0
 800bd58:	468b      	mov	fp, r1
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f7f4 fc62 	bl	8000628 <__aeabi_dmul>
 800bd64:	4680      	mov	r8, r0
 800bd66:	4689      	mov	r9, r1
 800bd68:	e7c6      	b.n	800bcf8 <_dtoa_r+0x510>
 800bd6a:	4650      	mov	r0, sl
 800bd6c:	4659      	mov	r1, fp
 800bd6e:	f7f4 fc5b 	bl	8000628 <__aeabi_dmul>
 800bd72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd74:	9d01      	ldr	r5, [sp, #4]
 800bd76:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd78:	4682      	mov	sl, r0
 800bd7a:	468b      	mov	fp, r1
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	4640      	mov	r0, r8
 800bd80:	f7f4 ff02 	bl	8000b88 <__aeabi_d2iz>
 800bd84:	4606      	mov	r6, r0
 800bd86:	f7f4 fbe5 	bl	8000554 <__aeabi_i2d>
 800bd8a:	3630      	adds	r6, #48	; 0x30
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	4640      	mov	r0, r8
 800bd92:	4649      	mov	r1, r9
 800bd94:	f7f4 fa90 	bl	80002b8 <__aeabi_dsub>
 800bd98:	f805 6b01 	strb.w	r6, [r5], #1
 800bd9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd9e:	429d      	cmp	r5, r3
 800bda0:	4680      	mov	r8, r0
 800bda2:	4689      	mov	r9, r1
 800bda4:	f04f 0200 	mov.w	r2, #0
 800bda8:	d124      	bne.n	800bdf4 <_dtoa_r+0x60c>
 800bdaa:	4b1b      	ldr	r3, [pc, #108]	; (800be18 <_dtoa_r+0x630>)
 800bdac:	4650      	mov	r0, sl
 800bdae:	4659      	mov	r1, fp
 800bdb0:	f7f4 fa84 	bl	80002bc <__adddf3>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4640      	mov	r0, r8
 800bdba:	4649      	mov	r1, r9
 800bdbc:	f7f4 fec4 	bl	8000b48 <__aeabi_dcmpgt>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d173      	bne.n	800beac <_dtoa_r+0x6c4>
 800bdc4:	4652      	mov	r2, sl
 800bdc6:	465b      	mov	r3, fp
 800bdc8:	4913      	ldr	r1, [pc, #76]	; (800be18 <_dtoa_r+0x630>)
 800bdca:	2000      	movs	r0, #0
 800bdcc:	f7f4 fa74 	bl	80002b8 <__aeabi_dsub>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4640      	mov	r0, r8
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	f7f4 fe98 	bl	8000b0c <__aeabi_dcmplt>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f43f af35 	beq.w	800bc4c <_dtoa_r+0x464>
 800bde2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bde4:	1e6b      	subs	r3, r5, #1
 800bde6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bde8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdec:	2b30      	cmp	r3, #48	; 0x30
 800bdee:	d0f8      	beq.n	800bde2 <_dtoa_r+0x5fa>
 800bdf0:	9700      	str	r7, [sp, #0]
 800bdf2:	e049      	b.n	800be88 <_dtoa_r+0x6a0>
 800bdf4:	4b05      	ldr	r3, [pc, #20]	; (800be0c <_dtoa_r+0x624>)
 800bdf6:	f7f4 fc17 	bl	8000628 <__aeabi_dmul>
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	4689      	mov	r9, r1
 800bdfe:	e7bd      	b.n	800bd7c <_dtoa_r+0x594>
 800be00:	0800f9a0 	.word	0x0800f9a0
 800be04:	0800f978 	.word	0x0800f978
 800be08:	3ff00000 	.word	0x3ff00000
 800be0c:	40240000 	.word	0x40240000
 800be10:	401c0000 	.word	0x401c0000
 800be14:	40140000 	.word	0x40140000
 800be18:	3fe00000 	.word	0x3fe00000
 800be1c:	9d01      	ldr	r5, [sp, #4]
 800be1e:	4656      	mov	r6, sl
 800be20:	465f      	mov	r7, fp
 800be22:	4642      	mov	r2, r8
 800be24:	464b      	mov	r3, r9
 800be26:	4630      	mov	r0, r6
 800be28:	4639      	mov	r1, r7
 800be2a:	f7f4 fd27 	bl	800087c <__aeabi_ddiv>
 800be2e:	f7f4 feab 	bl	8000b88 <__aeabi_d2iz>
 800be32:	4682      	mov	sl, r0
 800be34:	f7f4 fb8e 	bl	8000554 <__aeabi_i2d>
 800be38:	4642      	mov	r2, r8
 800be3a:	464b      	mov	r3, r9
 800be3c:	f7f4 fbf4 	bl	8000628 <__aeabi_dmul>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4630      	mov	r0, r6
 800be46:	4639      	mov	r1, r7
 800be48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be4c:	f7f4 fa34 	bl	80002b8 <__aeabi_dsub>
 800be50:	f805 6b01 	strb.w	r6, [r5], #1
 800be54:	9e01      	ldr	r6, [sp, #4]
 800be56:	9f03      	ldr	r7, [sp, #12]
 800be58:	1bae      	subs	r6, r5, r6
 800be5a:	42b7      	cmp	r7, r6
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	d135      	bne.n	800bece <_dtoa_r+0x6e6>
 800be62:	f7f4 fa2b 	bl	80002bc <__adddf3>
 800be66:	4642      	mov	r2, r8
 800be68:	464b      	mov	r3, r9
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	f7f4 fe6b 	bl	8000b48 <__aeabi_dcmpgt>
 800be72:	b9d0      	cbnz	r0, 800beaa <_dtoa_r+0x6c2>
 800be74:	4642      	mov	r2, r8
 800be76:	464b      	mov	r3, r9
 800be78:	4630      	mov	r0, r6
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 fe3c 	bl	8000af8 <__aeabi_dcmpeq>
 800be80:	b110      	cbz	r0, 800be88 <_dtoa_r+0x6a0>
 800be82:	f01a 0f01 	tst.w	sl, #1
 800be86:	d110      	bne.n	800beaa <_dtoa_r+0x6c2>
 800be88:	4620      	mov	r0, r4
 800be8a:	ee18 1a10 	vmov	r1, s16
 800be8e:	f000 fb09 	bl	800c4a4 <_Bfree>
 800be92:	2300      	movs	r3, #0
 800be94:	9800      	ldr	r0, [sp, #0]
 800be96:	702b      	strb	r3, [r5, #0]
 800be98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be9a:	3001      	adds	r0, #1
 800be9c:	6018      	str	r0, [r3, #0]
 800be9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f43f acf1 	beq.w	800b888 <_dtoa_r+0xa0>
 800bea6:	601d      	str	r5, [r3, #0]
 800bea8:	e4ee      	b.n	800b888 <_dtoa_r+0xa0>
 800beaa:	9f00      	ldr	r7, [sp, #0]
 800beac:	462b      	mov	r3, r5
 800beae:	461d      	mov	r5, r3
 800beb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800beb4:	2a39      	cmp	r2, #57	; 0x39
 800beb6:	d106      	bne.n	800bec6 <_dtoa_r+0x6de>
 800beb8:	9a01      	ldr	r2, [sp, #4]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d1f7      	bne.n	800beae <_dtoa_r+0x6c6>
 800bebe:	9901      	ldr	r1, [sp, #4]
 800bec0:	2230      	movs	r2, #48	; 0x30
 800bec2:	3701      	adds	r7, #1
 800bec4:	700a      	strb	r2, [r1, #0]
 800bec6:	781a      	ldrb	r2, [r3, #0]
 800bec8:	3201      	adds	r2, #1
 800beca:	701a      	strb	r2, [r3, #0]
 800becc:	e790      	b.n	800bdf0 <_dtoa_r+0x608>
 800bece:	4ba6      	ldr	r3, [pc, #664]	; (800c168 <_dtoa_r+0x980>)
 800bed0:	2200      	movs	r2, #0
 800bed2:	f7f4 fba9 	bl	8000628 <__aeabi_dmul>
 800bed6:	2200      	movs	r2, #0
 800bed8:	2300      	movs	r3, #0
 800beda:	4606      	mov	r6, r0
 800bedc:	460f      	mov	r7, r1
 800bede:	f7f4 fe0b 	bl	8000af8 <__aeabi_dcmpeq>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d09d      	beq.n	800be22 <_dtoa_r+0x63a>
 800bee6:	e7cf      	b.n	800be88 <_dtoa_r+0x6a0>
 800bee8:	9a08      	ldr	r2, [sp, #32]
 800beea:	2a00      	cmp	r2, #0
 800beec:	f000 80d7 	beq.w	800c09e <_dtoa_r+0x8b6>
 800bef0:	9a06      	ldr	r2, [sp, #24]
 800bef2:	2a01      	cmp	r2, #1
 800bef4:	f300 80ba 	bgt.w	800c06c <_dtoa_r+0x884>
 800bef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800befa:	2a00      	cmp	r2, #0
 800befc:	f000 80b2 	beq.w	800c064 <_dtoa_r+0x87c>
 800bf00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf04:	9e07      	ldr	r6, [sp, #28]
 800bf06:	9d04      	ldr	r5, [sp, #16]
 800bf08:	9a04      	ldr	r2, [sp, #16]
 800bf0a:	441a      	add	r2, r3
 800bf0c:	9204      	str	r2, [sp, #16]
 800bf0e:	9a05      	ldr	r2, [sp, #20]
 800bf10:	2101      	movs	r1, #1
 800bf12:	441a      	add	r2, r3
 800bf14:	4620      	mov	r0, r4
 800bf16:	9205      	str	r2, [sp, #20]
 800bf18:	f000 fb7c 	bl	800c614 <__i2b>
 800bf1c:	4607      	mov	r7, r0
 800bf1e:	2d00      	cmp	r5, #0
 800bf20:	dd0c      	ble.n	800bf3c <_dtoa_r+0x754>
 800bf22:	9b05      	ldr	r3, [sp, #20]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	dd09      	ble.n	800bf3c <_dtoa_r+0x754>
 800bf28:	42ab      	cmp	r3, r5
 800bf2a:	9a04      	ldr	r2, [sp, #16]
 800bf2c:	bfa8      	it	ge
 800bf2e:	462b      	movge	r3, r5
 800bf30:	1ad2      	subs	r2, r2, r3
 800bf32:	9204      	str	r2, [sp, #16]
 800bf34:	9a05      	ldr	r2, [sp, #20]
 800bf36:	1aed      	subs	r5, r5, r3
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	9305      	str	r3, [sp, #20]
 800bf3c:	9b07      	ldr	r3, [sp, #28]
 800bf3e:	b31b      	cbz	r3, 800bf88 <_dtoa_r+0x7a0>
 800bf40:	9b08      	ldr	r3, [sp, #32]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 80af 	beq.w	800c0a6 <_dtoa_r+0x8be>
 800bf48:	2e00      	cmp	r6, #0
 800bf4a:	dd13      	ble.n	800bf74 <_dtoa_r+0x78c>
 800bf4c:	4639      	mov	r1, r7
 800bf4e:	4632      	mov	r2, r6
 800bf50:	4620      	mov	r0, r4
 800bf52:	f000 fc1f 	bl	800c794 <__pow5mult>
 800bf56:	ee18 2a10 	vmov	r2, s16
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	4607      	mov	r7, r0
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 fb6e 	bl	800c640 <__multiply>
 800bf64:	ee18 1a10 	vmov	r1, s16
 800bf68:	4680      	mov	r8, r0
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 fa9a 	bl	800c4a4 <_Bfree>
 800bf70:	ee08 8a10 	vmov	s16, r8
 800bf74:	9b07      	ldr	r3, [sp, #28]
 800bf76:	1b9a      	subs	r2, r3, r6
 800bf78:	d006      	beq.n	800bf88 <_dtoa_r+0x7a0>
 800bf7a:	ee18 1a10 	vmov	r1, s16
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f000 fc08 	bl	800c794 <__pow5mult>
 800bf84:	ee08 0a10 	vmov	s16, r0
 800bf88:	2101      	movs	r1, #1
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f000 fb42 	bl	800c614 <__i2b>
 800bf90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	4606      	mov	r6, r0
 800bf96:	f340 8088 	ble.w	800c0aa <_dtoa_r+0x8c2>
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	4601      	mov	r1, r0
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f000 fbf8 	bl	800c794 <__pow5mult>
 800bfa4:	9b06      	ldr	r3, [sp, #24]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	f340 8081 	ble.w	800c0b0 <_dtoa_r+0x8c8>
 800bfae:	f04f 0800 	mov.w	r8, #0
 800bfb2:	6933      	ldr	r3, [r6, #16]
 800bfb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfb8:	6918      	ldr	r0, [r3, #16]
 800bfba:	f000 fadb 	bl	800c574 <__hi0bits>
 800bfbe:	f1c0 0020 	rsb	r0, r0, #32
 800bfc2:	9b05      	ldr	r3, [sp, #20]
 800bfc4:	4418      	add	r0, r3
 800bfc6:	f010 001f 	ands.w	r0, r0, #31
 800bfca:	f000 8092 	beq.w	800c0f2 <_dtoa_r+0x90a>
 800bfce:	f1c0 0320 	rsb	r3, r0, #32
 800bfd2:	2b04      	cmp	r3, #4
 800bfd4:	f340 808a 	ble.w	800c0ec <_dtoa_r+0x904>
 800bfd8:	f1c0 001c 	rsb	r0, r0, #28
 800bfdc:	9b04      	ldr	r3, [sp, #16]
 800bfde:	4403      	add	r3, r0
 800bfe0:	9304      	str	r3, [sp, #16]
 800bfe2:	9b05      	ldr	r3, [sp, #20]
 800bfe4:	4403      	add	r3, r0
 800bfe6:	4405      	add	r5, r0
 800bfe8:	9305      	str	r3, [sp, #20]
 800bfea:	9b04      	ldr	r3, [sp, #16]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	dd07      	ble.n	800c000 <_dtoa_r+0x818>
 800bff0:	ee18 1a10 	vmov	r1, s16
 800bff4:	461a      	mov	r2, r3
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 fc26 	bl	800c848 <__lshift>
 800bffc:	ee08 0a10 	vmov	s16, r0
 800c000:	9b05      	ldr	r3, [sp, #20]
 800c002:	2b00      	cmp	r3, #0
 800c004:	dd05      	ble.n	800c012 <_dtoa_r+0x82a>
 800c006:	4631      	mov	r1, r6
 800c008:	461a      	mov	r2, r3
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fc1c 	bl	800c848 <__lshift>
 800c010:	4606      	mov	r6, r0
 800c012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d06e      	beq.n	800c0f6 <_dtoa_r+0x90e>
 800c018:	ee18 0a10 	vmov	r0, s16
 800c01c:	4631      	mov	r1, r6
 800c01e:	f000 fc83 	bl	800c928 <__mcmp>
 800c022:	2800      	cmp	r0, #0
 800c024:	da67      	bge.n	800c0f6 <_dtoa_r+0x90e>
 800c026:	9b00      	ldr	r3, [sp, #0]
 800c028:	3b01      	subs	r3, #1
 800c02a:	ee18 1a10 	vmov	r1, s16
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	220a      	movs	r2, #10
 800c032:	2300      	movs	r3, #0
 800c034:	4620      	mov	r0, r4
 800c036:	f000 fa57 	bl	800c4e8 <__multadd>
 800c03a:	9b08      	ldr	r3, [sp, #32]
 800c03c:	ee08 0a10 	vmov	s16, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 81b1 	beq.w	800c3a8 <_dtoa_r+0xbc0>
 800c046:	2300      	movs	r3, #0
 800c048:	4639      	mov	r1, r7
 800c04a:	220a      	movs	r2, #10
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fa4b 	bl	800c4e8 <__multadd>
 800c052:	9b02      	ldr	r3, [sp, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	4607      	mov	r7, r0
 800c058:	f300 808e 	bgt.w	800c178 <_dtoa_r+0x990>
 800c05c:	9b06      	ldr	r3, [sp, #24]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	dc51      	bgt.n	800c106 <_dtoa_r+0x91e>
 800c062:	e089      	b.n	800c178 <_dtoa_r+0x990>
 800c064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c06a:	e74b      	b.n	800bf04 <_dtoa_r+0x71c>
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	1e5e      	subs	r6, r3, #1
 800c070:	9b07      	ldr	r3, [sp, #28]
 800c072:	42b3      	cmp	r3, r6
 800c074:	bfbf      	itttt	lt
 800c076:	9b07      	ldrlt	r3, [sp, #28]
 800c078:	9607      	strlt	r6, [sp, #28]
 800c07a:	1af2      	sublt	r2, r6, r3
 800c07c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c07e:	bfb6      	itet	lt
 800c080:	189b      	addlt	r3, r3, r2
 800c082:	1b9e      	subge	r6, r3, r6
 800c084:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c086:	9b03      	ldr	r3, [sp, #12]
 800c088:	bfb8      	it	lt
 800c08a:	2600      	movlt	r6, #0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	bfb7      	itett	lt
 800c090:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c094:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c098:	1a9d      	sublt	r5, r3, r2
 800c09a:	2300      	movlt	r3, #0
 800c09c:	e734      	b.n	800bf08 <_dtoa_r+0x720>
 800c09e:	9e07      	ldr	r6, [sp, #28]
 800c0a0:	9d04      	ldr	r5, [sp, #16]
 800c0a2:	9f08      	ldr	r7, [sp, #32]
 800c0a4:	e73b      	b.n	800bf1e <_dtoa_r+0x736>
 800c0a6:	9a07      	ldr	r2, [sp, #28]
 800c0a8:	e767      	b.n	800bf7a <_dtoa_r+0x792>
 800c0aa:	9b06      	ldr	r3, [sp, #24]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	dc18      	bgt.n	800c0e2 <_dtoa_r+0x8fa>
 800c0b0:	f1ba 0f00 	cmp.w	sl, #0
 800c0b4:	d115      	bne.n	800c0e2 <_dtoa_r+0x8fa>
 800c0b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0ba:	b993      	cbnz	r3, 800c0e2 <_dtoa_r+0x8fa>
 800c0bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0c0:	0d1b      	lsrs	r3, r3, #20
 800c0c2:	051b      	lsls	r3, r3, #20
 800c0c4:	b183      	cbz	r3, 800c0e8 <_dtoa_r+0x900>
 800c0c6:	9b04      	ldr	r3, [sp, #16]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	9b05      	ldr	r3, [sp, #20]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	9305      	str	r3, [sp, #20]
 800c0d2:	f04f 0801 	mov.w	r8, #1
 800c0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f47f af6a 	bne.w	800bfb2 <_dtoa_r+0x7ca>
 800c0de:	2001      	movs	r0, #1
 800c0e0:	e76f      	b.n	800bfc2 <_dtoa_r+0x7da>
 800c0e2:	f04f 0800 	mov.w	r8, #0
 800c0e6:	e7f6      	b.n	800c0d6 <_dtoa_r+0x8ee>
 800c0e8:	4698      	mov	r8, r3
 800c0ea:	e7f4      	b.n	800c0d6 <_dtoa_r+0x8ee>
 800c0ec:	f43f af7d 	beq.w	800bfea <_dtoa_r+0x802>
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	301c      	adds	r0, #28
 800c0f4:	e772      	b.n	800bfdc <_dtoa_r+0x7f4>
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	dc37      	bgt.n	800c16c <_dtoa_r+0x984>
 800c0fc:	9b06      	ldr	r3, [sp, #24]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	dd34      	ble.n	800c16c <_dtoa_r+0x984>
 800c102:	9b03      	ldr	r3, [sp, #12]
 800c104:	9302      	str	r3, [sp, #8]
 800c106:	9b02      	ldr	r3, [sp, #8]
 800c108:	b96b      	cbnz	r3, 800c126 <_dtoa_r+0x93e>
 800c10a:	4631      	mov	r1, r6
 800c10c:	2205      	movs	r2, #5
 800c10e:	4620      	mov	r0, r4
 800c110:	f000 f9ea 	bl	800c4e8 <__multadd>
 800c114:	4601      	mov	r1, r0
 800c116:	4606      	mov	r6, r0
 800c118:	ee18 0a10 	vmov	r0, s16
 800c11c:	f000 fc04 	bl	800c928 <__mcmp>
 800c120:	2800      	cmp	r0, #0
 800c122:	f73f adbb 	bgt.w	800bc9c <_dtoa_r+0x4b4>
 800c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c128:	9d01      	ldr	r5, [sp, #4]
 800c12a:	43db      	mvns	r3, r3
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	f04f 0800 	mov.w	r8, #0
 800c132:	4631      	mov	r1, r6
 800c134:	4620      	mov	r0, r4
 800c136:	f000 f9b5 	bl	800c4a4 <_Bfree>
 800c13a:	2f00      	cmp	r7, #0
 800c13c:	f43f aea4 	beq.w	800be88 <_dtoa_r+0x6a0>
 800c140:	f1b8 0f00 	cmp.w	r8, #0
 800c144:	d005      	beq.n	800c152 <_dtoa_r+0x96a>
 800c146:	45b8      	cmp	r8, r7
 800c148:	d003      	beq.n	800c152 <_dtoa_r+0x96a>
 800c14a:	4641      	mov	r1, r8
 800c14c:	4620      	mov	r0, r4
 800c14e:	f000 f9a9 	bl	800c4a4 <_Bfree>
 800c152:	4639      	mov	r1, r7
 800c154:	4620      	mov	r0, r4
 800c156:	f000 f9a5 	bl	800c4a4 <_Bfree>
 800c15a:	e695      	b.n	800be88 <_dtoa_r+0x6a0>
 800c15c:	2600      	movs	r6, #0
 800c15e:	4637      	mov	r7, r6
 800c160:	e7e1      	b.n	800c126 <_dtoa_r+0x93e>
 800c162:	9700      	str	r7, [sp, #0]
 800c164:	4637      	mov	r7, r6
 800c166:	e599      	b.n	800bc9c <_dtoa_r+0x4b4>
 800c168:	40240000 	.word	0x40240000
 800c16c:	9b08      	ldr	r3, [sp, #32]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 80ca 	beq.w	800c308 <_dtoa_r+0xb20>
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	9302      	str	r3, [sp, #8]
 800c178:	2d00      	cmp	r5, #0
 800c17a:	dd05      	ble.n	800c188 <_dtoa_r+0x9a0>
 800c17c:	4639      	mov	r1, r7
 800c17e:	462a      	mov	r2, r5
 800c180:	4620      	mov	r0, r4
 800c182:	f000 fb61 	bl	800c848 <__lshift>
 800c186:	4607      	mov	r7, r0
 800c188:	f1b8 0f00 	cmp.w	r8, #0
 800c18c:	d05b      	beq.n	800c246 <_dtoa_r+0xa5e>
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	4620      	mov	r0, r4
 800c192:	f000 f947 	bl	800c424 <_Balloc>
 800c196:	4605      	mov	r5, r0
 800c198:	b928      	cbnz	r0, 800c1a6 <_dtoa_r+0x9be>
 800c19a:	4b87      	ldr	r3, [pc, #540]	; (800c3b8 <_dtoa_r+0xbd0>)
 800c19c:	4602      	mov	r2, r0
 800c19e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1a2:	f7ff bb3b 	b.w	800b81c <_dtoa_r+0x34>
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	3202      	adds	r2, #2
 800c1aa:	0092      	lsls	r2, r2, #2
 800c1ac:	f107 010c 	add.w	r1, r7, #12
 800c1b0:	300c      	adds	r0, #12
 800c1b2:	f000 f91d 	bl	800c3f0 <memcpy>
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 fb44 	bl	800c848 <__lshift>
 800c1c0:	9b01      	ldr	r3, [sp, #4]
 800c1c2:	f103 0901 	add.w	r9, r3, #1
 800c1c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	9305      	str	r3, [sp, #20]
 800c1ce:	f00a 0301 	and.w	r3, sl, #1
 800c1d2:	46b8      	mov	r8, r7
 800c1d4:	9304      	str	r3, [sp, #16]
 800c1d6:	4607      	mov	r7, r0
 800c1d8:	4631      	mov	r1, r6
 800c1da:	ee18 0a10 	vmov	r0, s16
 800c1de:	f7ff fa77 	bl	800b6d0 <quorem>
 800c1e2:	4641      	mov	r1, r8
 800c1e4:	9002      	str	r0, [sp, #8]
 800c1e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1ea:	ee18 0a10 	vmov	r0, s16
 800c1ee:	f000 fb9b 	bl	800c928 <__mcmp>
 800c1f2:	463a      	mov	r2, r7
 800c1f4:	9003      	str	r0, [sp, #12]
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f000 fbb1 	bl	800c960 <__mdiff>
 800c1fe:	68c2      	ldr	r2, [r0, #12]
 800c200:	f109 3bff 	add.w	fp, r9, #4294967295
 800c204:	4605      	mov	r5, r0
 800c206:	bb02      	cbnz	r2, 800c24a <_dtoa_r+0xa62>
 800c208:	4601      	mov	r1, r0
 800c20a:	ee18 0a10 	vmov	r0, s16
 800c20e:	f000 fb8b 	bl	800c928 <__mcmp>
 800c212:	4602      	mov	r2, r0
 800c214:	4629      	mov	r1, r5
 800c216:	4620      	mov	r0, r4
 800c218:	9207      	str	r2, [sp, #28]
 800c21a:	f000 f943 	bl	800c4a4 <_Bfree>
 800c21e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c222:	ea43 0102 	orr.w	r1, r3, r2
 800c226:	9b04      	ldr	r3, [sp, #16]
 800c228:	430b      	orrs	r3, r1
 800c22a:	464d      	mov	r5, r9
 800c22c:	d10f      	bne.n	800c24e <_dtoa_r+0xa66>
 800c22e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c232:	d02a      	beq.n	800c28a <_dtoa_r+0xaa2>
 800c234:	9b03      	ldr	r3, [sp, #12]
 800c236:	2b00      	cmp	r3, #0
 800c238:	dd02      	ble.n	800c240 <_dtoa_r+0xa58>
 800c23a:	9b02      	ldr	r3, [sp, #8]
 800c23c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c240:	f88b a000 	strb.w	sl, [fp]
 800c244:	e775      	b.n	800c132 <_dtoa_r+0x94a>
 800c246:	4638      	mov	r0, r7
 800c248:	e7ba      	b.n	800c1c0 <_dtoa_r+0x9d8>
 800c24a:	2201      	movs	r2, #1
 800c24c:	e7e2      	b.n	800c214 <_dtoa_r+0xa2c>
 800c24e:	9b03      	ldr	r3, [sp, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	db04      	blt.n	800c25e <_dtoa_r+0xa76>
 800c254:	9906      	ldr	r1, [sp, #24]
 800c256:	430b      	orrs	r3, r1
 800c258:	9904      	ldr	r1, [sp, #16]
 800c25a:	430b      	orrs	r3, r1
 800c25c:	d122      	bne.n	800c2a4 <_dtoa_r+0xabc>
 800c25e:	2a00      	cmp	r2, #0
 800c260:	ddee      	ble.n	800c240 <_dtoa_r+0xa58>
 800c262:	ee18 1a10 	vmov	r1, s16
 800c266:	2201      	movs	r2, #1
 800c268:	4620      	mov	r0, r4
 800c26a:	f000 faed 	bl	800c848 <__lshift>
 800c26e:	4631      	mov	r1, r6
 800c270:	ee08 0a10 	vmov	s16, r0
 800c274:	f000 fb58 	bl	800c928 <__mcmp>
 800c278:	2800      	cmp	r0, #0
 800c27a:	dc03      	bgt.n	800c284 <_dtoa_r+0xa9c>
 800c27c:	d1e0      	bne.n	800c240 <_dtoa_r+0xa58>
 800c27e:	f01a 0f01 	tst.w	sl, #1
 800c282:	d0dd      	beq.n	800c240 <_dtoa_r+0xa58>
 800c284:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c288:	d1d7      	bne.n	800c23a <_dtoa_r+0xa52>
 800c28a:	2339      	movs	r3, #57	; 0x39
 800c28c:	f88b 3000 	strb.w	r3, [fp]
 800c290:	462b      	mov	r3, r5
 800c292:	461d      	mov	r5, r3
 800c294:	3b01      	subs	r3, #1
 800c296:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c29a:	2a39      	cmp	r2, #57	; 0x39
 800c29c:	d071      	beq.n	800c382 <_dtoa_r+0xb9a>
 800c29e:	3201      	adds	r2, #1
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	e746      	b.n	800c132 <_dtoa_r+0x94a>
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	dd07      	ble.n	800c2b8 <_dtoa_r+0xad0>
 800c2a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2ac:	d0ed      	beq.n	800c28a <_dtoa_r+0xaa2>
 800c2ae:	f10a 0301 	add.w	r3, sl, #1
 800c2b2:	f88b 3000 	strb.w	r3, [fp]
 800c2b6:	e73c      	b.n	800c132 <_dtoa_r+0x94a>
 800c2b8:	9b05      	ldr	r3, [sp, #20]
 800c2ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c2be:	4599      	cmp	r9, r3
 800c2c0:	d047      	beq.n	800c352 <_dtoa_r+0xb6a>
 800c2c2:	ee18 1a10 	vmov	r1, s16
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	220a      	movs	r2, #10
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 f90c 	bl	800c4e8 <__multadd>
 800c2d0:	45b8      	cmp	r8, r7
 800c2d2:	ee08 0a10 	vmov	s16, r0
 800c2d6:	f04f 0300 	mov.w	r3, #0
 800c2da:	f04f 020a 	mov.w	r2, #10
 800c2de:	4641      	mov	r1, r8
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	d106      	bne.n	800c2f2 <_dtoa_r+0xb0a>
 800c2e4:	f000 f900 	bl	800c4e8 <__multadd>
 800c2e8:	4680      	mov	r8, r0
 800c2ea:	4607      	mov	r7, r0
 800c2ec:	f109 0901 	add.w	r9, r9, #1
 800c2f0:	e772      	b.n	800c1d8 <_dtoa_r+0x9f0>
 800c2f2:	f000 f8f9 	bl	800c4e8 <__multadd>
 800c2f6:	4639      	mov	r1, r7
 800c2f8:	4680      	mov	r8, r0
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	220a      	movs	r2, #10
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 f8f2 	bl	800c4e8 <__multadd>
 800c304:	4607      	mov	r7, r0
 800c306:	e7f1      	b.n	800c2ec <_dtoa_r+0xb04>
 800c308:	9b03      	ldr	r3, [sp, #12]
 800c30a:	9302      	str	r3, [sp, #8]
 800c30c:	9d01      	ldr	r5, [sp, #4]
 800c30e:	ee18 0a10 	vmov	r0, s16
 800c312:	4631      	mov	r1, r6
 800c314:	f7ff f9dc 	bl	800b6d0 <quorem>
 800c318:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	f805 ab01 	strb.w	sl, [r5], #1
 800c322:	1aea      	subs	r2, r5, r3
 800c324:	9b02      	ldr	r3, [sp, #8]
 800c326:	4293      	cmp	r3, r2
 800c328:	dd09      	ble.n	800c33e <_dtoa_r+0xb56>
 800c32a:	ee18 1a10 	vmov	r1, s16
 800c32e:	2300      	movs	r3, #0
 800c330:	220a      	movs	r2, #10
 800c332:	4620      	mov	r0, r4
 800c334:	f000 f8d8 	bl	800c4e8 <__multadd>
 800c338:	ee08 0a10 	vmov	s16, r0
 800c33c:	e7e7      	b.n	800c30e <_dtoa_r+0xb26>
 800c33e:	9b02      	ldr	r3, [sp, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	bfc8      	it	gt
 800c344:	461d      	movgt	r5, r3
 800c346:	9b01      	ldr	r3, [sp, #4]
 800c348:	bfd8      	it	le
 800c34a:	2501      	movle	r5, #1
 800c34c:	441d      	add	r5, r3
 800c34e:	f04f 0800 	mov.w	r8, #0
 800c352:	ee18 1a10 	vmov	r1, s16
 800c356:	2201      	movs	r2, #1
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fa75 	bl	800c848 <__lshift>
 800c35e:	4631      	mov	r1, r6
 800c360:	ee08 0a10 	vmov	s16, r0
 800c364:	f000 fae0 	bl	800c928 <__mcmp>
 800c368:	2800      	cmp	r0, #0
 800c36a:	dc91      	bgt.n	800c290 <_dtoa_r+0xaa8>
 800c36c:	d102      	bne.n	800c374 <_dtoa_r+0xb8c>
 800c36e:	f01a 0f01 	tst.w	sl, #1
 800c372:	d18d      	bne.n	800c290 <_dtoa_r+0xaa8>
 800c374:	462b      	mov	r3, r5
 800c376:	461d      	mov	r5, r3
 800c378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c37c:	2a30      	cmp	r2, #48	; 0x30
 800c37e:	d0fa      	beq.n	800c376 <_dtoa_r+0xb8e>
 800c380:	e6d7      	b.n	800c132 <_dtoa_r+0x94a>
 800c382:	9a01      	ldr	r2, [sp, #4]
 800c384:	429a      	cmp	r2, r3
 800c386:	d184      	bne.n	800c292 <_dtoa_r+0xaaa>
 800c388:	9b00      	ldr	r3, [sp, #0]
 800c38a:	3301      	adds	r3, #1
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	2331      	movs	r3, #49	; 0x31
 800c390:	7013      	strb	r3, [r2, #0]
 800c392:	e6ce      	b.n	800c132 <_dtoa_r+0x94a>
 800c394:	4b09      	ldr	r3, [pc, #36]	; (800c3bc <_dtoa_r+0xbd4>)
 800c396:	f7ff ba95 	b.w	800b8c4 <_dtoa_r+0xdc>
 800c39a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f47f aa6e 	bne.w	800b87e <_dtoa_r+0x96>
 800c3a2:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <_dtoa_r+0xbd8>)
 800c3a4:	f7ff ba8e 	b.w	800b8c4 <_dtoa_r+0xdc>
 800c3a8:	9b02      	ldr	r3, [sp, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	dcae      	bgt.n	800c30c <_dtoa_r+0xb24>
 800c3ae:	9b06      	ldr	r3, [sp, #24]
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	f73f aea8 	bgt.w	800c106 <_dtoa_r+0x91e>
 800c3b6:	e7a9      	b.n	800c30c <_dtoa_r+0xb24>
 800c3b8:	0800f90a 	.word	0x0800f90a
 800c3bc:	0800fa89 	.word	0x0800fa89
 800c3c0:	0800f88b 	.word	0x0800f88b

0800c3c4 <_localeconv_r>:
 800c3c4:	4800      	ldr	r0, [pc, #0]	; (800c3c8 <_localeconv_r+0x4>)
 800c3c6:	4770      	bx	lr
 800c3c8:	200003f0 	.word	0x200003f0

0800c3cc <_lseek_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4d07      	ldr	r5, [pc, #28]	; (800c3ec <_lseek_r+0x20>)
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	4608      	mov	r0, r1
 800c3d4:	4611      	mov	r1, r2
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	602a      	str	r2, [r5, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	f7f7 fd5e 	bl	8003e9c <_lseek>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d102      	bne.n	800c3ea <_lseek_r+0x1e>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b103      	cbz	r3, 800c3ea <_lseek_r+0x1e>
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	bd38      	pop	{r3, r4, r5, pc}
 800c3ec:	20000b34 	.word	0x20000b34

0800c3f0 <memcpy>:
 800c3f0:	440a      	add	r2, r1
 800c3f2:	4291      	cmp	r1, r2
 800c3f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3f8:	d100      	bne.n	800c3fc <memcpy+0xc>
 800c3fa:	4770      	bx	lr
 800c3fc:	b510      	push	{r4, lr}
 800c3fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c402:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c406:	4291      	cmp	r1, r2
 800c408:	d1f9      	bne.n	800c3fe <memcpy+0xe>
 800c40a:	bd10      	pop	{r4, pc}

0800c40c <__malloc_lock>:
 800c40c:	4801      	ldr	r0, [pc, #4]	; (800c414 <__malloc_lock+0x8>)
 800c40e:	f001 bb03 	b.w	800da18 <__retarget_lock_acquire_recursive>
 800c412:	bf00      	nop
 800c414:	20000b38 	.word	0x20000b38

0800c418 <__malloc_unlock>:
 800c418:	4801      	ldr	r0, [pc, #4]	; (800c420 <__malloc_unlock+0x8>)
 800c41a:	f001 bafe 	b.w	800da1a <__retarget_lock_release_recursive>
 800c41e:	bf00      	nop
 800c420:	20000b38 	.word	0x20000b38

0800c424 <_Balloc>:
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c428:	4604      	mov	r4, r0
 800c42a:	460d      	mov	r5, r1
 800c42c:	b976      	cbnz	r6, 800c44c <_Balloc+0x28>
 800c42e:	2010      	movs	r0, #16
 800c430:	f7fe fa72 	bl	800a918 <malloc>
 800c434:	4602      	mov	r2, r0
 800c436:	6260      	str	r0, [r4, #36]	; 0x24
 800c438:	b920      	cbnz	r0, 800c444 <_Balloc+0x20>
 800c43a:	4b18      	ldr	r3, [pc, #96]	; (800c49c <_Balloc+0x78>)
 800c43c:	4818      	ldr	r0, [pc, #96]	; (800c4a0 <_Balloc+0x7c>)
 800c43e:	2166      	movs	r1, #102	; 0x66
 800c440:	f001 f902 	bl	800d648 <__assert_func>
 800c444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c448:	6006      	str	r6, [r0, #0]
 800c44a:	60c6      	str	r6, [r0, #12]
 800c44c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c44e:	68f3      	ldr	r3, [r6, #12]
 800c450:	b183      	cbz	r3, 800c474 <_Balloc+0x50>
 800c452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c45a:	b9b8      	cbnz	r0, 800c48c <_Balloc+0x68>
 800c45c:	2101      	movs	r1, #1
 800c45e:	fa01 f605 	lsl.w	r6, r1, r5
 800c462:	1d72      	adds	r2, r6, #5
 800c464:	0092      	lsls	r2, r2, #2
 800c466:	4620      	mov	r0, r4
 800c468:	f000 fb60 	bl	800cb2c <_calloc_r>
 800c46c:	b160      	cbz	r0, 800c488 <_Balloc+0x64>
 800c46e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c472:	e00e      	b.n	800c492 <_Balloc+0x6e>
 800c474:	2221      	movs	r2, #33	; 0x21
 800c476:	2104      	movs	r1, #4
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 fb57 	bl	800cb2c <_calloc_r>
 800c47e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c480:	60f0      	str	r0, [r6, #12]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e4      	bne.n	800c452 <_Balloc+0x2e>
 800c488:	2000      	movs	r0, #0
 800c48a:	bd70      	pop	{r4, r5, r6, pc}
 800c48c:	6802      	ldr	r2, [r0, #0]
 800c48e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c492:	2300      	movs	r3, #0
 800c494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c498:	e7f7      	b.n	800c48a <_Balloc+0x66>
 800c49a:	bf00      	nop
 800c49c:	0800f898 	.word	0x0800f898
 800c4a0:	0800f91b 	.word	0x0800f91b

0800c4a4 <_Bfree>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	b976      	cbnz	r6, 800c4cc <_Bfree+0x28>
 800c4ae:	2010      	movs	r0, #16
 800c4b0:	f7fe fa32 	bl	800a918 <malloc>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	6268      	str	r0, [r5, #36]	; 0x24
 800c4b8:	b920      	cbnz	r0, 800c4c4 <_Bfree+0x20>
 800c4ba:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <_Bfree+0x3c>)
 800c4bc:	4809      	ldr	r0, [pc, #36]	; (800c4e4 <_Bfree+0x40>)
 800c4be:	218a      	movs	r1, #138	; 0x8a
 800c4c0:	f001 f8c2 	bl	800d648 <__assert_func>
 800c4c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4c8:	6006      	str	r6, [r0, #0]
 800c4ca:	60c6      	str	r6, [r0, #12]
 800c4cc:	b13c      	cbz	r4, 800c4de <_Bfree+0x3a>
 800c4ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4d0:	6862      	ldr	r2, [r4, #4]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4d8:	6021      	str	r1, [r4, #0]
 800c4da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
 800c4e0:	0800f898 	.word	0x0800f898
 800c4e4:	0800f91b 	.word	0x0800f91b

0800c4e8 <__multadd>:
 800c4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ec:	690d      	ldr	r5, [r1, #16]
 800c4ee:	4607      	mov	r7, r0
 800c4f0:	460c      	mov	r4, r1
 800c4f2:	461e      	mov	r6, r3
 800c4f4:	f101 0c14 	add.w	ip, r1, #20
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	f8dc 3000 	ldr.w	r3, [ip]
 800c4fe:	b299      	uxth	r1, r3
 800c500:	fb02 6101 	mla	r1, r2, r1, r6
 800c504:	0c1e      	lsrs	r6, r3, #16
 800c506:	0c0b      	lsrs	r3, r1, #16
 800c508:	fb02 3306 	mla	r3, r2, r6, r3
 800c50c:	b289      	uxth	r1, r1
 800c50e:	3001      	adds	r0, #1
 800c510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c514:	4285      	cmp	r5, r0
 800c516:	f84c 1b04 	str.w	r1, [ip], #4
 800c51a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c51e:	dcec      	bgt.n	800c4fa <__multadd+0x12>
 800c520:	b30e      	cbz	r6, 800c566 <__multadd+0x7e>
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	42ab      	cmp	r3, r5
 800c526:	dc19      	bgt.n	800c55c <__multadd+0x74>
 800c528:	6861      	ldr	r1, [r4, #4]
 800c52a:	4638      	mov	r0, r7
 800c52c:	3101      	adds	r1, #1
 800c52e:	f7ff ff79 	bl	800c424 <_Balloc>
 800c532:	4680      	mov	r8, r0
 800c534:	b928      	cbnz	r0, 800c542 <__multadd+0x5a>
 800c536:	4602      	mov	r2, r0
 800c538:	4b0c      	ldr	r3, [pc, #48]	; (800c56c <__multadd+0x84>)
 800c53a:	480d      	ldr	r0, [pc, #52]	; (800c570 <__multadd+0x88>)
 800c53c:	21b5      	movs	r1, #181	; 0xb5
 800c53e:	f001 f883 	bl	800d648 <__assert_func>
 800c542:	6922      	ldr	r2, [r4, #16]
 800c544:	3202      	adds	r2, #2
 800c546:	f104 010c 	add.w	r1, r4, #12
 800c54a:	0092      	lsls	r2, r2, #2
 800c54c:	300c      	adds	r0, #12
 800c54e:	f7ff ff4f 	bl	800c3f0 <memcpy>
 800c552:	4621      	mov	r1, r4
 800c554:	4638      	mov	r0, r7
 800c556:	f7ff ffa5 	bl	800c4a4 <_Bfree>
 800c55a:	4644      	mov	r4, r8
 800c55c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c560:	3501      	adds	r5, #1
 800c562:	615e      	str	r6, [r3, #20]
 800c564:	6125      	str	r5, [r4, #16]
 800c566:	4620      	mov	r0, r4
 800c568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c56c:	0800f90a 	.word	0x0800f90a
 800c570:	0800f91b 	.word	0x0800f91b

0800c574 <__hi0bits>:
 800c574:	0c03      	lsrs	r3, r0, #16
 800c576:	041b      	lsls	r3, r3, #16
 800c578:	b9d3      	cbnz	r3, 800c5b0 <__hi0bits+0x3c>
 800c57a:	0400      	lsls	r0, r0, #16
 800c57c:	2310      	movs	r3, #16
 800c57e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c582:	bf04      	itt	eq
 800c584:	0200      	lsleq	r0, r0, #8
 800c586:	3308      	addeq	r3, #8
 800c588:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c58c:	bf04      	itt	eq
 800c58e:	0100      	lsleq	r0, r0, #4
 800c590:	3304      	addeq	r3, #4
 800c592:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c596:	bf04      	itt	eq
 800c598:	0080      	lsleq	r0, r0, #2
 800c59a:	3302      	addeq	r3, #2
 800c59c:	2800      	cmp	r0, #0
 800c59e:	db05      	blt.n	800c5ac <__hi0bits+0x38>
 800c5a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5a4:	f103 0301 	add.w	r3, r3, #1
 800c5a8:	bf08      	it	eq
 800c5aa:	2320      	moveq	r3, #32
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	4770      	bx	lr
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	e7e4      	b.n	800c57e <__hi0bits+0xa>

0800c5b4 <__lo0bits>:
 800c5b4:	6803      	ldr	r3, [r0, #0]
 800c5b6:	f013 0207 	ands.w	r2, r3, #7
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	d00b      	beq.n	800c5d6 <__lo0bits+0x22>
 800c5be:	07da      	lsls	r2, r3, #31
 800c5c0:	d423      	bmi.n	800c60a <__lo0bits+0x56>
 800c5c2:	0798      	lsls	r0, r3, #30
 800c5c4:	bf49      	itett	mi
 800c5c6:	085b      	lsrmi	r3, r3, #1
 800c5c8:	089b      	lsrpl	r3, r3, #2
 800c5ca:	2001      	movmi	r0, #1
 800c5cc:	600b      	strmi	r3, [r1, #0]
 800c5ce:	bf5c      	itt	pl
 800c5d0:	600b      	strpl	r3, [r1, #0]
 800c5d2:	2002      	movpl	r0, #2
 800c5d4:	4770      	bx	lr
 800c5d6:	b298      	uxth	r0, r3
 800c5d8:	b9a8      	cbnz	r0, 800c606 <__lo0bits+0x52>
 800c5da:	0c1b      	lsrs	r3, r3, #16
 800c5dc:	2010      	movs	r0, #16
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	b90a      	cbnz	r2, 800c5e6 <__lo0bits+0x32>
 800c5e2:	3008      	adds	r0, #8
 800c5e4:	0a1b      	lsrs	r3, r3, #8
 800c5e6:	071a      	lsls	r2, r3, #28
 800c5e8:	bf04      	itt	eq
 800c5ea:	091b      	lsreq	r3, r3, #4
 800c5ec:	3004      	addeq	r0, #4
 800c5ee:	079a      	lsls	r2, r3, #30
 800c5f0:	bf04      	itt	eq
 800c5f2:	089b      	lsreq	r3, r3, #2
 800c5f4:	3002      	addeq	r0, #2
 800c5f6:	07da      	lsls	r2, r3, #31
 800c5f8:	d403      	bmi.n	800c602 <__lo0bits+0x4e>
 800c5fa:	085b      	lsrs	r3, r3, #1
 800c5fc:	f100 0001 	add.w	r0, r0, #1
 800c600:	d005      	beq.n	800c60e <__lo0bits+0x5a>
 800c602:	600b      	str	r3, [r1, #0]
 800c604:	4770      	bx	lr
 800c606:	4610      	mov	r0, r2
 800c608:	e7e9      	b.n	800c5de <__lo0bits+0x2a>
 800c60a:	2000      	movs	r0, #0
 800c60c:	4770      	bx	lr
 800c60e:	2020      	movs	r0, #32
 800c610:	4770      	bx	lr
	...

0800c614 <__i2b>:
 800c614:	b510      	push	{r4, lr}
 800c616:	460c      	mov	r4, r1
 800c618:	2101      	movs	r1, #1
 800c61a:	f7ff ff03 	bl	800c424 <_Balloc>
 800c61e:	4602      	mov	r2, r0
 800c620:	b928      	cbnz	r0, 800c62e <__i2b+0x1a>
 800c622:	4b05      	ldr	r3, [pc, #20]	; (800c638 <__i2b+0x24>)
 800c624:	4805      	ldr	r0, [pc, #20]	; (800c63c <__i2b+0x28>)
 800c626:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c62a:	f001 f80d 	bl	800d648 <__assert_func>
 800c62e:	2301      	movs	r3, #1
 800c630:	6144      	str	r4, [r0, #20]
 800c632:	6103      	str	r3, [r0, #16]
 800c634:	bd10      	pop	{r4, pc}
 800c636:	bf00      	nop
 800c638:	0800f90a 	.word	0x0800f90a
 800c63c:	0800f91b 	.word	0x0800f91b

0800c640 <__multiply>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	4691      	mov	r9, r2
 800c646:	690a      	ldr	r2, [r1, #16]
 800c648:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	bfb8      	it	lt
 800c650:	460b      	movlt	r3, r1
 800c652:	460c      	mov	r4, r1
 800c654:	bfbc      	itt	lt
 800c656:	464c      	movlt	r4, r9
 800c658:	4699      	movlt	r9, r3
 800c65a:	6927      	ldr	r7, [r4, #16]
 800c65c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c660:	68a3      	ldr	r3, [r4, #8]
 800c662:	6861      	ldr	r1, [r4, #4]
 800c664:	eb07 060a 	add.w	r6, r7, sl
 800c668:	42b3      	cmp	r3, r6
 800c66a:	b085      	sub	sp, #20
 800c66c:	bfb8      	it	lt
 800c66e:	3101      	addlt	r1, #1
 800c670:	f7ff fed8 	bl	800c424 <_Balloc>
 800c674:	b930      	cbnz	r0, 800c684 <__multiply+0x44>
 800c676:	4602      	mov	r2, r0
 800c678:	4b44      	ldr	r3, [pc, #272]	; (800c78c <__multiply+0x14c>)
 800c67a:	4845      	ldr	r0, [pc, #276]	; (800c790 <__multiply+0x150>)
 800c67c:	f240 115d 	movw	r1, #349	; 0x15d
 800c680:	f000 ffe2 	bl	800d648 <__assert_func>
 800c684:	f100 0514 	add.w	r5, r0, #20
 800c688:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c68c:	462b      	mov	r3, r5
 800c68e:	2200      	movs	r2, #0
 800c690:	4543      	cmp	r3, r8
 800c692:	d321      	bcc.n	800c6d8 <__multiply+0x98>
 800c694:	f104 0314 	add.w	r3, r4, #20
 800c698:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c69c:	f109 0314 	add.w	r3, r9, #20
 800c6a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6a4:	9202      	str	r2, [sp, #8]
 800c6a6:	1b3a      	subs	r2, r7, r4
 800c6a8:	3a15      	subs	r2, #21
 800c6aa:	f022 0203 	bic.w	r2, r2, #3
 800c6ae:	3204      	adds	r2, #4
 800c6b0:	f104 0115 	add.w	r1, r4, #21
 800c6b4:	428f      	cmp	r7, r1
 800c6b6:	bf38      	it	cc
 800c6b8:	2204      	movcc	r2, #4
 800c6ba:	9201      	str	r2, [sp, #4]
 800c6bc:	9a02      	ldr	r2, [sp, #8]
 800c6be:	9303      	str	r3, [sp, #12]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d80c      	bhi.n	800c6de <__multiply+0x9e>
 800c6c4:	2e00      	cmp	r6, #0
 800c6c6:	dd03      	ble.n	800c6d0 <__multiply+0x90>
 800c6c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d05a      	beq.n	800c786 <__multiply+0x146>
 800c6d0:	6106      	str	r6, [r0, #16]
 800c6d2:	b005      	add	sp, #20
 800c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d8:	f843 2b04 	str.w	r2, [r3], #4
 800c6dc:	e7d8      	b.n	800c690 <__multiply+0x50>
 800c6de:	f8b3 a000 	ldrh.w	sl, [r3]
 800c6e2:	f1ba 0f00 	cmp.w	sl, #0
 800c6e6:	d024      	beq.n	800c732 <__multiply+0xf2>
 800c6e8:	f104 0e14 	add.w	lr, r4, #20
 800c6ec:	46a9      	mov	r9, r5
 800c6ee:	f04f 0c00 	mov.w	ip, #0
 800c6f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c6f6:	f8d9 1000 	ldr.w	r1, [r9]
 800c6fa:	fa1f fb82 	uxth.w	fp, r2
 800c6fe:	b289      	uxth	r1, r1
 800c700:	fb0a 110b 	mla	r1, sl, fp, r1
 800c704:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c708:	f8d9 2000 	ldr.w	r2, [r9]
 800c70c:	4461      	add	r1, ip
 800c70e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c712:	fb0a c20b 	mla	r2, sl, fp, ip
 800c716:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c71a:	b289      	uxth	r1, r1
 800c71c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c720:	4577      	cmp	r7, lr
 800c722:	f849 1b04 	str.w	r1, [r9], #4
 800c726:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c72a:	d8e2      	bhi.n	800c6f2 <__multiply+0xb2>
 800c72c:	9a01      	ldr	r2, [sp, #4]
 800c72e:	f845 c002 	str.w	ip, [r5, r2]
 800c732:	9a03      	ldr	r2, [sp, #12]
 800c734:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c738:	3304      	adds	r3, #4
 800c73a:	f1b9 0f00 	cmp.w	r9, #0
 800c73e:	d020      	beq.n	800c782 <__multiply+0x142>
 800c740:	6829      	ldr	r1, [r5, #0]
 800c742:	f104 0c14 	add.w	ip, r4, #20
 800c746:	46ae      	mov	lr, r5
 800c748:	f04f 0a00 	mov.w	sl, #0
 800c74c:	f8bc b000 	ldrh.w	fp, [ip]
 800c750:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c754:	fb09 220b 	mla	r2, r9, fp, r2
 800c758:	4492      	add	sl, r2
 800c75a:	b289      	uxth	r1, r1
 800c75c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c760:	f84e 1b04 	str.w	r1, [lr], #4
 800c764:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c768:	f8be 1000 	ldrh.w	r1, [lr]
 800c76c:	0c12      	lsrs	r2, r2, #16
 800c76e:	fb09 1102 	mla	r1, r9, r2, r1
 800c772:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c776:	4567      	cmp	r7, ip
 800c778:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c77c:	d8e6      	bhi.n	800c74c <__multiply+0x10c>
 800c77e:	9a01      	ldr	r2, [sp, #4]
 800c780:	50a9      	str	r1, [r5, r2]
 800c782:	3504      	adds	r5, #4
 800c784:	e79a      	b.n	800c6bc <__multiply+0x7c>
 800c786:	3e01      	subs	r6, #1
 800c788:	e79c      	b.n	800c6c4 <__multiply+0x84>
 800c78a:	bf00      	nop
 800c78c:	0800f90a 	.word	0x0800f90a
 800c790:	0800f91b 	.word	0x0800f91b

0800c794 <__pow5mult>:
 800c794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c798:	4615      	mov	r5, r2
 800c79a:	f012 0203 	ands.w	r2, r2, #3
 800c79e:	4606      	mov	r6, r0
 800c7a0:	460f      	mov	r7, r1
 800c7a2:	d007      	beq.n	800c7b4 <__pow5mult+0x20>
 800c7a4:	4c25      	ldr	r4, [pc, #148]	; (800c83c <__pow5mult+0xa8>)
 800c7a6:	3a01      	subs	r2, #1
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7ae:	f7ff fe9b 	bl	800c4e8 <__multadd>
 800c7b2:	4607      	mov	r7, r0
 800c7b4:	10ad      	asrs	r5, r5, #2
 800c7b6:	d03d      	beq.n	800c834 <__pow5mult+0xa0>
 800c7b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c7ba:	b97c      	cbnz	r4, 800c7dc <__pow5mult+0x48>
 800c7bc:	2010      	movs	r0, #16
 800c7be:	f7fe f8ab 	bl	800a918 <malloc>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	6270      	str	r0, [r6, #36]	; 0x24
 800c7c6:	b928      	cbnz	r0, 800c7d4 <__pow5mult+0x40>
 800c7c8:	4b1d      	ldr	r3, [pc, #116]	; (800c840 <__pow5mult+0xac>)
 800c7ca:	481e      	ldr	r0, [pc, #120]	; (800c844 <__pow5mult+0xb0>)
 800c7cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c7d0:	f000 ff3a 	bl	800d648 <__assert_func>
 800c7d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7d8:	6004      	str	r4, [r0, #0]
 800c7da:	60c4      	str	r4, [r0, #12]
 800c7dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c7e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7e4:	b94c      	cbnz	r4, 800c7fa <__pow5mult+0x66>
 800c7e6:	f240 2171 	movw	r1, #625	; 0x271
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f7ff ff12 	bl	800c614 <__i2b>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	6003      	str	r3, [r0, #0]
 800c7fa:	f04f 0900 	mov.w	r9, #0
 800c7fe:	07eb      	lsls	r3, r5, #31
 800c800:	d50a      	bpl.n	800c818 <__pow5mult+0x84>
 800c802:	4639      	mov	r1, r7
 800c804:	4622      	mov	r2, r4
 800c806:	4630      	mov	r0, r6
 800c808:	f7ff ff1a 	bl	800c640 <__multiply>
 800c80c:	4639      	mov	r1, r7
 800c80e:	4680      	mov	r8, r0
 800c810:	4630      	mov	r0, r6
 800c812:	f7ff fe47 	bl	800c4a4 <_Bfree>
 800c816:	4647      	mov	r7, r8
 800c818:	106d      	asrs	r5, r5, #1
 800c81a:	d00b      	beq.n	800c834 <__pow5mult+0xa0>
 800c81c:	6820      	ldr	r0, [r4, #0]
 800c81e:	b938      	cbnz	r0, 800c830 <__pow5mult+0x9c>
 800c820:	4622      	mov	r2, r4
 800c822:	4621      	mov	r1, r4
 800c824:	4630      	mov	r0, r6
 800c826:	f7ff ff0b 	bl	800c640 <__multiply>
 800c82a:	6020      	str	r0, [r4, #0]
 800c82c:	f8c0 9000 	str.w	r9, [r0]
 800c830:	4604      	mov	r4, r0
 800c832:	e7e4      	b.n	800c7fe <__pow5mult+0x6a>
 800c834:	4638      	mov	r0, r7
 800c836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c83a:	bf00      	nop
 800c83c:	0800fa68 	.word	0x0800fa68
 800c840:	0800f898 	.word	0x0800f898
 800c844:	0800f91b 	.word	0x0800f91b

0800c848 <__lshift>:
 800c848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c84c:	460c      	mov	r4, r1
 800c84e:	6849      	ldr	r1, [r1, #4]
 800c850:	6923      	ldr	r3, [r4, #16]
 800c852:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	4607      	mov	r7, r0
 800c85a:	4691      	mov	r9, r2
 800c85c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c860:	f108 0601 	add.w	r6, r8, #1
 800c864:	42b3      	cmp	r3, r6
 800c866:	db0b      	blt.n	800c880 <__lshift+0x38>
 800c868:	4638      	mov	r0, r7
 800c86a:	f7ff fddb 	bl	800c424 <_Balloc>
 800c86e:	4605      	mov	r5, r0
 800c870:	b948      	cbnz	r0, 800c886 <__lshift+0x3e>
 800c872:	4602      	mov	r2, r0
 800c874:	4b2a      	ldr	r3, [pc, #168]	; (800c920 <__lshift+0xd8>)
 800c876:	482b      	ldr	r0, [pc, #172]	; (800c924 <__lshift+0xdc>)
 800c878:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c87c:	f000 fee4 	bl	800d648 <__assert_func>
 800c880:	3101      	adds	r1, #1
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	e7ee      	b.n	800c864 <__lshift+0x1c>
 800c886:	2300      	movs	r3, #0
 800c888:	f100 0114 	add.w	r1, r0, #20
 800c88c:	f100 0210 	add.w	r2, r0, #16
 800c890:	4618      	mov	r0, r3
 800c892:	4553      	cmp	r3, sl
 800c894:	db37      	blt.n	800c906 <__lshift+0xbe>
 800c896:	6920      	ldr	r0, [r4, #16]
 800c898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c89c:	f104 0314 	add.w	r3, r4, #20
 800c8a0:	f019 091f 	ands.w	r9, r9, #31
 800c8a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c8ac:	d02f      	beq.n	800c90e <__lshift+0xc6>
 800c8ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c8b2:	468a      	mov	sl, r1
 800c8b4:	f04f 0c00 	mov.w	ip, #0
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	fa02 f209 	lsl.w	r2, r2, r9
 800c8be:	ea42 020c 	orr.w	r2, r2, ip
 800c8c2:	f84a 2b04 	str.w	r2, [sl], #4
 800c8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ca:	4298      	cmp	r0, r3
 800c8cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c8d0:	d8f2      	bhi.n	800c8b8 <__lshift+0x70>
 800c8d2:	1b03      	subs	r3, r0, r4
 800c8d4:	3b15      	subs	r3, #21
 800c8d6:	f023 0303 	bic.w	r3, r3, #3
 800c8da:	3304      	adds	r3, #4
 800c8dc:	f104 0215 	add.w	r2, r4, #21
 800c8e0:	4290      	cmp	r0, r2
 800c8e2:	bf38      	it	cc
 800c8e4:	2304      	movcc	r3, #4
 800c8e6:	f841 c003 	str.w	ip, [r1, r3]
 800c8ea:	f1bc 0f00 	cmp.w	ip, #0
 800c8ee:	d001      	beq.n	800c8f4 <__lshift+0xac>
 800c8f0:	f108 0602 	add.w	r6, r8, #2
 800c8f4:	3e01      	subs	r6, #1
 800c8f6:	4638      	mov	r0, r7
 800c8f8:	612e      	str	r6, [r5, #16]
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	f7ff fdd2 	bl	800c4a4 <_Bfree>
 800c900:	4628      	mov	r0, r5
 800c902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c906:	f842 0f04 	str.w	r0, [r2, #4]!
 800c90a:	3301      	adds	r3, #1
 800c90c:	e7c1      	b.n	800c892 <__lshift+0x4a>
 800c90e:	3904      	subs	r1, #4
 800c910:	f853 2b04 	ldr.w	r2, [r3], #4
 800c914:	f841 2f04 	str.w	r2, [r1, #4]!
 800c918:	4298      	cmp	r0, r3
 800c91a:	d8f9      	bhi.n	800c910 <__lshift+0xc8>
 800c91c:	e7ea      	b.n	800c8f4 <__lshift+0xac>
 800c91e:	bf00      	nop
 800c920:	0800f90a 	.word	0x0800f90a
 800c924:	0800f91b 	.word	0x0800f91b

0800c928 <__mcmp>:
 800c928:	b530      	push	{r4, r5, lr}
 800c92a:	6902      	ldr	r2, [r0, #16]
 800c92c:	690c      	ldr	r4, [r1, #16]
 800c92e:	1b12      	subs	r2, r2, r4
 800c930:	d10e      	bne.n	800c950 <__mcmp+0x28>
 800c932:	f100 0314 	add.w	r3, r0, #20
 800c936:	3114      	adds	r1, #20
 800c938:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c93c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c940:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c944:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c948:	42a5      	cmp	r5, r4
 800c94a:	d003      	beq.n	800c954 <__mcmp+0x2c>
 800c94c:	d305      	bcc.n	800c95a <__mcmp+0x32>
 800c94e:	2201      	movs	r2, #1
 800c950:	4610      	mov	r0, r2
 800c952:	bd30      	pop	{r4, r5, pc}
 800c954:	4283      	cmp	r3, r0
 800c956:	d3f3      	bcc.n	800c940 <__mcmp+0x18>
 800c958:	e7fa      	b.n	800c950 <__mcmp+0x28>
 800c95a:	f04f 32ff 	mov.w	r2, #4294967295
 800c95e:	e7f7      	b.n	800c950 <__mcmp+0x28>

0800c960 <__mdiff>:
 800c960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	460c      	mov	r4, r1
 800c966:	4606      	mov	r6, r0
 800c968:	4611      	mov	r1, r2
 800c96a:	4620      	mov	r0, r4
 800c96c:	4690      	mov	r8, r2
 800c96e:	f7ff ffdb 	bl	800c928 <__mcmp>
 800c972:	1e05      	subs	r5, r0, #0
 800c974:	d110      	bne.n	800c998 <__mdiff+0x38>
 800c976:	4629      	mov	r1, r5
 800c978:	4630      	mov	r0, r6
 800c97a:	f7ff fd53 	bl	800c424 <_Balloc>
 800c97e:	b930      	cbnz	r0, 800c98e <__mdiff+0x2e>
 800c980:	4b3a      	ldr	r3, [pc, #232]	; (800ca6c <__mdiff+0x10c>)
 800c982:	4602      	mov	r2, r0
 800c984:	f240 2132 	movw	r1, #562	; 0x232
 800c988:	4839      	ldr	r0, [pc, #228]	; (800ca70 <__mdiff+0x110>)
 800c98a:	f000 fe5d 	bl	800d648 <__assert_func>
 800c98e:	2301      	movs	r3, #1
 800c990:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c998:	bfa4      	itt	ge
 800c99a:	4643      	movge	r3, r8
 800c99c:	46a0      	movge	r8, r4
 800c99e:	4630      	mov	r0, r6
 800c9a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9a4:	bfa6      	itte	ge
 800c9a6:	461c      	movge	r4, r3
 800c9a8:	2500      	movge	r5, #0
 800c9aa:	2501      	movlt	r5, #1
 800c9ac:	f7ff fd3a 	bl	800c424 <_Balloc>
 800c9b0:	b920      	cbnz	r0, 800c9bc <__mdiff+0x5c>
 800c9b2:	4b2e      	ldr	r3, [pc, #184]	; (800ca6c <__mdiff+0x10c>)
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c9ba:	e7e5      	b.n	800c988 <__mdiff+0x28>
 800c9bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9c0:	6926      	ldr	r6, [r4, #16]
 800c9c2:	60c5      	str	r5, [r0, #12]
 800c9c4:	f104 0914 	add.w	r9, r4, #20
 800c9c8:	f108 0514 	add.w	r5, r8, #20
 800c9cc:	f100 0e14 	add.w	lr, r0, #20
 800c9d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c9d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c9d8:	f108 0210 	add.w	r2, r8, #16
 800c9dc:	46f2      	mov	sl, lr
 800c9de:	2100      	movs	r1, #0
 800c9e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c9e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c9e8:	fa1f f883 	uxth.w	r8, r3
 800c9ec:	fa11 f18b 	uxtah	r1, r1, fp
 800c9f0:	0c1b      	lsrs	r3, r3, #16
 800c9f2:	eba1 0808 	sub.w	r8, r1, r8
 800c9f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c9fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c9fe:	fa1f f888 	uxth.w	r8, r8
 800ca02:	1419      	asrs	r1, r3, #16
 800ca04:	454e      	cmp	r6, r9
 800ca06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca0a:	f84a 3b04 	str.w	r3, [sl], #4
 800ca0e:	d8e7      	bhi.n	800c9e0 <__mdiff+0x80>
 800ca10:	1b33      	subs	r3, r6, r4
 800ca12:	3b15      	subs	r3, #21
 800ca14:	f023 0303 	bic.w	r3, r3, #3
 800ca18:	3304      	adds	r3, #4
 800ca1a:	3415      	adds	r4, #21
 800ca1c:	42a6      	cmp	r6, r4
 800ca1e:	bf38      	it	cc
 800ca20:	2304      	movcc	r3, #4
 800ca22:	441d      	add	r5, r3
 800ca24:	4473      	add	r3, lr
 800ca26:	469e      	mov	lr, r3
 800ca28:	462e      	mov	r6, r5
 800ca2a:	4566      	cmp	r6, ip
 800ca2c:	d30e      	bcc.n	800ca4c <__mdiff+0xec>
 800ca2e:	f10c 0203 	add.w	r2, ip, #3
 800ca32:	1b52      	subs	r2, r2, r5
 800ca34:	f022 0203 	bic.w	r2, r2, #3
 800ca38:	3d03      	subs	r5, #3
 800ca3a:	45ac      	cmp	ip, r5
 800ca3c:	bf38      	it	cc
 800ca3e:	2200      	movcc	r2, #0
 800ca40:	441a      	add	r2, r3
 800ca42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ca46:	b17b      	cbz	r3, 800ca68 <__mdiff+0x108>
 800ca48:	6107      	str	r7, [r0, #16]
 800ca4a:	e7a3      	b.n	800c994 <__mdiff+0x34>
 800ca4c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca50:	fa11 f288 	uxtah	r2, r1, r8
 800ca54:	1414      	asrs	r4, r2, #16
 800ca56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca5a:	b292      	uxth	r2, r2
 800ca5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca60:	f84e 2b04 	str.w	r2, [lr], #4
 800ca64:	1421      	asrs	r1, r4, #16
 800ca66:	e7e0      	b.n	800ca2a <__mdiff+0xca>
 800ca68:	3f01      	subs	r7, #1
 800ca6a:	e7ea      	b.n	800ca42 <__mdiff+0xe2>
 800ca6c:	0800f90a 	.word	0x0800f90a
 800ca70:	0800f91b 	.word	0x0800f91b

0800ca74 <__d2b>:
 800ca74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca78:	4689      	mov	r9, r1
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	ec57 6b10 	vmov	r6, r7, d0
 800ca80:	4690      	mov	r8, r2
 800ca82:	f7ff fccf 	bl	800c424 <_Balloc>
 800ca86:	4604      	mov	r4, r0
 800ca88:	b930      	cbnz	r0, 800ca98 <__d2b+0x24>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b25      	ldr	r3, [pc, #148]	; (800cb24 <__d2b+0xb0>)
 800ca8e:	4826      	ldr	r0, [pc, #152]	; (800cb28 <__d2b+0xb4>)
 800ca90:	f240 310a 	movw	r1, #778	; 0x30a
 800ca94:	f000 fdd8 	bl	800d648 <__assert_func>
 800ca98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ca9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800caa0:	bb35      	cbnz	r5, 800caf0 <__d2b+0x7c>
 800caa2:	2e00      	cmp	r6, #0
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	d028      	beq.n	800cafa <__d2b+0x86>
 800caa8:	4668      	mov	r0, sp
 800caaa:	9600      	str	r6, [sp, #0]
 800caac:	f7ff fd82 	bl	800c5b4 <__lo0bits>
 800cab0:	9900      	ldr	r1, [sp, #0]
 800cab2:	b300      	cbz	r0, 800caf6 <__d2b+0x82>
 800cab4:	9a01      	ldr	r2, [sp, #4]
 800cab6:	f1c0 0320 	rsb	r3, r0, #32
 800caba:	fa02 f303 	lsl.w	r3, r2, r3
 800cabe:	430b      	orrs	r3, r1
 800cac0:	40c2      	lsrs	r2, r0
 800cac2:	6163      	str	r3, [r4, #20]
 800cac4:	9201      	str	r2, [sp, #4]
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	61a3      	str	r3, [r4, #24]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	bf14      	ite	ne
 800cace:	2202      	movne	r2, #2
 800cad0:	2201      	moveq	r2, #1
 800cad2:	6122      	str	r2, [r4, #16]
 800cad4:	b1d5      	cbz	r5, 800cb0c <__d2b+0x98>
 800cad6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cada:	4405      	add	r5, r0
 800cadc:	f8c9 5000 	str.w	r5, [r9]
 800cae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cae4:	f8c8 0000 	str.w	r0, [r8]
 800cae8:	4620      	mov	r0, r4
 800caea:	b003      	add	sp, #12
 800caec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caf4:	e7d5      	b.n	800caa2 <__d2b+0x2e>
 800caf6:	6161      	str	r1, [r4, #20]
 800caf8:	e7e5      	b.n	800cac6 <__d2b+0x52>
 800cafa:	a801      	add	r0, sp, #4
 800cafc:	f7ff fd5a 	bl	800c5b4 <__lo0bits>
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	6163      	str	r3, [r4, #20]
 800cb04:	2201      	movs	r2, #1
 800cb06:	6122      	str	r2, [r4, #16]
 800cb08:	3020      	adds	r0, #32
 800cb0a:	e7e3      	b.n	800cad4 <__d2b+0x60>
 800cb0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb14:	f8c9 0000 	str.w	r0, [r9]
 800cb18:	6918      	ldr	r0, [r3, #16]
 800cb1a:	f7ff fd2b 	bl	800c574 <__hi0bits>
 800cb1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb22:	e7df      	b.n	800cae4 <__d2b+0x70>
 800cb24:	0800f90a 	.word	0x0800f90a
 800cb28:	0800f91b 	.word	0x0800f91b

0800cb2c <_calloc_r>:
 800cb2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb2e:	fba1 2402 	umull	r2, r4, r1, r2
 800cb32:	b94c      	cbnz	r4, 800cb48 <_calloc_r+0x1c>
 800cb34:	4611      	mov	r1, r2
 800cb36:	9201      	str	r2, [sp, #4]
 800cb38:	f7fd ff72 	bl	800aa20 <_malloc_r>
 800cb3c:	9a01      	ldr	r2, [sp, #4]
 800cb3e:	4605      	mov	r5, r0
 800cb40:	b930      	cbnz	r0, 800cb50 <_calloc_r+0x24>
 800cb42:	4628      	mov	r0, r5
 800cb44:	b003      	add	sp, #12
 800cb46:	bd30      	pop	{r4, r5, pc}
 800cb48:	220c      	movs	r2, #12
 800cb4a:	6002      	str	r2, [r0, #0]
 800cb4c:	2500      	movs	r5, #0
 800cb4e:	e7f8      	b.n	800cb42 <_calloc_r+0x16>
 800cb50:	4621      	mov	r1, r4
 800cb52:	f7fd fef1 	bl	800a938 <memset>
 800cb56:	e7f4      	b.n	800cb42 <_calloc_r+0x16>

0800cb58 <__ssputs_r>:
 800cb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb5c:	688e      	ldr	r6, [r1, #8]
 800cb5e:	429e      	cmp	r6, r3
 800cb60:	4682      	mov	sl, r0
 800cb62:	460c      	mov	r4, r1
 800cb64:	4690      	mov	r8, r2
 800cb66:	461f      	mov	r7, r3
 800cb68:	d838      	bhi.n	800cbdc <__ssputs_r+0x84>
 800cb6a:	898a      	ldrh	r2, [r1, #12]
 800cb6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb70:	d032      	beq.n	800cbd8 <__ssputs_r+0x80>
 800cb72:	6825      	ldr	r5, [r4, #0]
 800cb74:	6909      	ldr	r1, [r1, #16]
 800cb76:	eba5 0901 	sub.w	r9, r5, r1
 800cb7a:	6965      	ldr	r5, [r4, #20]
 800cb7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb84:	3301      	adds	r3, #1
 800cb86:	444b      	add	r3, r9
 800cb88:	106d      	asrs	r5, r5, #1
 800cb8a:	429d      	cmp	r5, r3
 800cb8c:	bf38      	it	cc
 800cb8e:	461d      	movcc	r5, r3
 800cb90:	0553      	lsls	r3, r2, #21
 800cb92:	d531      	bpl.n	800cbf8 <__ssputs_r+0xa0>
 800cb94:	4629      	mov	r1, r5
 800cb96:	f7fd ff43 	bl	800aa20 <_malloc_r>
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	b950      	cbnz	r0, 800cbb4 <__ssputs_r+0x5c>
 800cb9e:	230c      	movs	r3, #12
 800cba0:	f8ca 3000 	str.w	r3, [sl]
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbaa:	81a3      	strh	r3, [r4, #12]
 800cbac:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbb4:	6921      	ldr	r1, [r4, #16]
 800cbb6:	464a      	mov	r2, r9
 800cbb8:	f7ff fc1a 	bl	800c3f0 <memcpy>
 800cbbc:	89a3      	ldrh	r3, [r4, #12]
 800cbbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbc6:	81a3      	strh	r3, [r4, #12]
 800cbc8:	6126      	str	r6, [r4, #16]
 800cbca:	6165      	str	r5, [r4, #20]
 800cbcc:	444e      	add	r6, r9
 800cbce:	eba5 0509 	sub.w	r5, r5, r9
 800cbd2:	6026      	str	r6, [r4, #0]
 800cbd4:	60a5      	str	r5, [r4, #8]
 800cbd6:	463e      	mov	r6, r7
 800cbd8:	42be      	cmp	r6, r7
 800cbda:	d900      	bls.n	800cbde <__ssputs_r+0x86>
 800cbdc:	463e      	mov	r6, r7
 800cbde:	6820      	ldr	r0, [r4, #0]
 800cbe0:	4632      	mov	r2, r6
 800cbe2:	4641      	mov	r1, r8
 800cbe4:	f000 ff2c 	bl	800da40 <memmove>
 800cbe8:	68a3      	ldr	r3, [r4, #8]
 800cbea:	1b9b      	subs	r3, r3, r6
 800cbec:	60a3      	str	r3, [r4, #8]
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	4433      	add	r3, r6
 800cbf2:	6023      	str	r3, [r4, #0]
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	e7db      	b.n	800cbb0 <__ssputs_r+0x58>
 800cbf8:	462a      	mov	r2, r5
 800cbfa:	f000 ff3b 	bl	800da74 <_realloc_r>
 800cbfe:	4606      	mov	r6, r0
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d1e1      	bne.n	800cbc8 <__ssputs_r+0x70>
 800cc04:	6921      	ldr	r1, [r4, #16]
 800cc06:	4650      	mov	r0, sl
 800cc08:	f7fd fe9e 	bl	800a948 <_free_r>
 800cc0c:	e7c7      	b.n	800cb9e <__ssputs_r+0x46>
	...

0800cc10 <_svfiprintf_r>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	4698      	mov	r8, r3
 800cc16:	898b      	ldrh	r3, [r1, #12]
 800cc18:	061b      	lsls	r3, r3, #24
 800cc1a:	b09d      	sub	sp, #116	; 0x74
 800cc1c:	4607      	mov	r7, r0
 800cc1e:	460d      	mov	r5, r1
 800cc20:	4614      	mov	r4, r2
 800cc22:	d50e      	bpl.n	800cc42 <_svfiprintf_r+0x32>
 800cc24:	690b      	ldr	r3, [r1, #16]
 800cc26:	b963      	cbnz	r3, 800cc42 <_svfiprintf_r+0x32>
 800cc28:	2140      	movs	r1, #64	; 0x40
 800cc2a:	f7fd fef9 	bl	800aa20 <_malloc_r>
 800cc2e:	6028      	str	r0, [r5, #0]
 800cc30:	6128      	str	r0, [r5, #16]
 800cc32:	b920      	cbnz	r0, 800cc3e <_svfiprintf_r+0x2e>
 800cc34:	230c      	movs	r3, #12
 800cc36:	603b      	str	r3, [r7, #0]
 800cc38:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3c:	e0d1      	b.n	800cde2 <_svfiprintf_r+0x1d2>
 800cc3e:	2340      	movs	r3, #64	; 0x40
 800cc40:	616b      	str	r3, [r5, #20]
 800cc42:	2300      	movs	r3, #0
 800cc44:	9309      	str	r3, [sp, #36]	; 0x24
 800cc46:	2320      	movs	r3, #32
 800cc48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc50:	2330      	movs	r3, #48	; 0x30
 800cc52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cdfc <_svfiprintf_r+0x1ec>
 800cc56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc5a:	f04f 0901 	mov.w	r9, #1
 800cc5e:	4623      	mov	r3, r4
 800cc60:	469a      	mov	sl, r3
 800cc62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc66:	b10a      	cbz	r2, 800cc6c <_svfiprintf_r+0x5c>
 800cc68:	2a25      	cmp	r2, #37	; 0x25
 800cc6a:	d1f9      	bne.n	800cc60 <_svfiprintf_r+0x50>
 800cc6c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc70:	d00b      	beq.n	800cc8a <_svfiprintf_r+0x7a>
 800cc72:	465b      	mov	r3, fp
 800cc74:	4622      	mov	r2, r4
 800cc76:	4629      	mov	r1, r5
 800cc78:	4638      	mov	r0, r7
 800cc7a:	f7ff ff6d 	bl	800cb58 <__ssputs_r>
 800cc7e:	3001      	adds	r0, #1
 800cc80:	f000 80aa 	beq.w	800cdd8 <_svfiprintf_r+0x1c8>
 800cc84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc86:	445a      	add	r2, fp
 800cc88:	9209      	str	r2, [sp, #36]	; 0x24
 800cc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 80a2 	beq.w	800cdd8 <_svfiprintf_r+0x1c8>
 800cc94:	2300      	movs	r3, #0
 800cc96:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc9e:	f10a 0a01 	add.w	sl, sl, #1
 800cca2:	9304      	str	r3, [sp, #16]
 800cca4:	9307      	str	r3, [sp, #28]
 800cca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccaa:	931a      	str	r3, [sp, #104]	; 0x68
 800ccac:	4654      	mov	r4, sl
 800ccae:	2205      	movs	r2, #5
 800ccb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccb4:	4851      	ldr	r0, [pc, #324]	; (800cdfc <_svfiprintf_r+0x1ec>)
 800ccb6:	f7f3 faab 	bl	8000210 <memchr>
 800ccba:	9a04      	ldr	r2, [sp, #16]
 800ccbc:	b9d8      	cbnz	r0, 800ccf6 <_svfiprintf_r+0xe6>
 800ccbe:	06d0      	lsls	r0, r2, #27
 800ccc0:	bf44      	itt	mi
 800ccc2:	2320      	movmi	r3, #32
 800ccc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccc8:	0711      	lsls	r1, r2, #28
 800ccca:	bf44      	itt	mi
 800cccc:	232b      	movmi	r3, #43	; 0x2b
 800ccce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccd2:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd6:	2b2a      	cmp	r3, #42	; 0x2a
 800ccd8:	d015      	beq.n	800cd06 <_svfiprintf_r+0xf6>
 800ccda:	9a07      	ldr	r2, [sp, #28]
 800ccdc:	4654      	mov	r4, sl
 800ccde:	2000      	movs	r0, #0
 800cce0:	f04f 0c0a 	mov.w	ip, #10
 800cce4:	4621      	mov	r1, r4
 800cce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccea:	3b30      	subs	r3, #48	; 0x30
 800ccec:	2b09      	cmp	r3, #9
 800ccee:	d94e      	bls.n	800cd8e <_svfiprintf_r+0x17e>
 800ccf0:	b1b0      	cbz	r0, 800cd20 <_svfiprintf_r+0x110>
 800ccf2:	9207      	str	r2, [sp, #28]
 800ccf4:	e014      	b.n	800cd20 <_svfiprintf_r+0x110>
 800ccf6:	eba0 0308 	sub.w	r3, r0, r8
 800ccfa:	fa09 f303 	lsl.w	r3, r9, r3
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	9304      	str	r3, [sp, #16]
 800cd02:	46a2      	mov	sl, r4
 800cd04:	e7d2      	b.n	800ccac <_svfiprintf_r+0x9c>
 800cd06:	9b03      	ldr	r3, [sp, #12]
 800cd08:	1d19      	adds	r1, r3, #4
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	9103      	str	r1, [sp, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	bfbb      	ittet	lt
 800cd12:	425b      	neglt	r3, r3
 800cd14:	f042 0202 	orrlt.w	r2, r2, #2
 800cd18:	9307      	strge	r3, [sp, #28]
 800cd1a:	9307      	strlt	r3, [sp, #28]
 800cd1c:	bfb8      	it	lt
 800cd1e:	9204      	strlt	r2, [sp, #16]
 800cd20:	7823      	ldrb	r3, [r4, #0]
 800cd22:	2b2e      	cmp	r3, #46	; 0x2e
 800cd24:	d10c      	bne.n	800cd40 <_svfiprintf_r+0x130>
 800cd26:	7863      	ldrb	r3, [r4, #1]
 800cd28:	2b2a      	cmp	r3, #42	; 0x2a
 800cd2a:	d135      	bne.n	800cd98 <_svfiprintf_r+0x188>
 800cd2c:	9b03      	ldr	r3, [sp, #12]
 800cd2e:	1d1a      	adds	r2, r3, #4
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	9203      	str	r2, [sp, #12]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	bfb8      	it	lt
 800cd38:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd3c:	3402      	adds	r4, #2
 800cd3e:	9305      	str	r3, [sp, #20]
 800cd40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce0c <_svfiprintf_r+0x1fc>
 800cd44:	7821      	ldrb	r1, [r4, #0]
 800cd46:	2203      	movs	r2, #3
 800cd48:	4650      	mov	r0, sl
 800cd4a:	f7f3 fa61 	bl	8000210 <memchr>
 800cd4e:	b140      	cbz	r0, 800cd62 <_svfiprintf_r+0x152>
 800cd50:	2340      	movs	r3, #64	; 0x40
 800cd52:	eba0 000a 	sub.w	r0, r0, sl
 800cd56:	fa03 f000 	lsl.w	r0, r3, r0
 800cd5a:	9b04      	ldr	r3, [sp, #16]
 800cd5c:	4303      	orrs	r3, r0
 800cd5e:	3401      	adds	r4, #1
 800cd60:	9304      	str	r3, [sp, #16]
 800cd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd66:	4826      	ldr	r0, [pc, #152]	; (800ce00 <_svfiprintf_r+0x1f0>)
 800cd68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd6c:	2206      	movs	r2, #6
 800cd6e:	f7f3 fa4f 	bl	8000210 <memchr>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d038      	beq.n	800cde8 <_svfiprintf_r+0x1d8>
 800cd76:	4b23      	ldr	r3, [pc, #140]	; (800ce04 <_svfiprintf_r+0x1f4>)
 800cd78:	bb1b      	cbnz	r3, 800cdc2 <_svfiprintf_r+0x1b2>
 800cd7a:	9b03      	ldr	r3, [sp, #12]
 800cd7c:	3307      	adds	r3, #7
 800cd7e:	f023 0307 	bic.w	r3, r3, #7
 800cd82:	3308      	adds	r3, #8
 800cd84:	9303      	str	r3, [sp, #12]
 800cd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd88:	4433      	add	r3, r6
 800cd8a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd8c:	e767      	b.n	800cc5e <_svfiprintf_r+0x4e>
 800cd8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd92:	460c      	mov	r4, r1
 800cd94:	2001      	movs	r0, #1
 800cd96:	e7a5      	b.n	800cce4 <_svfiprintf_r+0xd4>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	3401      	adds	r4, #1
 800cd9c:	9305      	str	r3, [sp, #20]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	f04f 0c0a 	mov.w	ip, #10
 800cda4:	4620      	mov	r0, r4
 800cda6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdaa:	3a30      	subs	r2, #48	; 0x30
 800cdac:	2a09      	cmp	r2, #9
 800cdae:	d903      	bls.n	800cdb8 <_svfiprintf_r+0x1a8>
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0c5      	beq.n	800cd40 <_svfiprintf_r+0x130>
 800cdb4:	9105      	str	r1, [sp, #20]
 800cdb6:	e7c3      	b.n	800cd40 <_svfiprintf_r+0x130>
 800cdb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e7f0      	b.n	800cda4 <_svfiprintf_r+0x194>
 800cdc2:	ab03      	add	r3, sp, #12
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	462a      	mov	r2, r5
 800cdc8:	4b0f      	ldr	r3, [pc, #60]	; (800ce08 <_svfiprintf_r+0x1f8>)
 800cdca:	a904      	add	r1, sp, #16
 800cdcc:	4638      	mov	r0, r7
 800cdce:	f7fd ff3b 	bl	800ac48 <_printf_float>
 800cdd2:	1c42      	adds	r2, r0, #1
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	d1d6      	bne.n	800cd86 <_svfiprintf_r+0x176>
 800cdd8:	89ab      	ldrh	r3, [r5, #12]
 800cdda:	065b      	lsls	r3, r3, #25
 800cddc:	f53f af2c 	bmi.w	800cc38 <_svfiprintf_r+0x28>
 800cde0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cde2:	b01d      	add	sp, #116	; 0x74
 800cde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde8:	ab03      	add	r3, sp, #12
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	462a      	mov	r2, r5
 800cdee:	4b06      	ldr	r3, [pc, #24]	; (800ce08 <_svfiprintf_r+0x1f8>)
 800cdf0:	a904      	add	r1, sp, #16
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	f7fe f9cc 	bl	800b190 <_printf_i>
 800cdf8:	e7eb      	b.n	800cdd2 <_svfiprintf_r+0x1c2>
 800cdfa:	bf00      	nop
 800cdfc:	0800fa74 	.word	0x0800fa74
 800ce00:	0800fa7e 	.word	0x0800fa7e
 800ce04:	0800ac49 	.word	0x0800ac49
 800ce08:	0800cb59 	.word	0x0800cb59
 800ce0c:	0800fa7a 	.word	0x0800fa7a

0800ce10 <_sungetc_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	1c4b      	adds	r3, r1, #1
 800ce14:	4614      	mov	r4, r2
 800ce16:	d103      	bne.n	800ce20 <_sungetc_r+0x10>
 800ce18:	f04f 35ff 	mov.w	r5, #4294967295
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	bd38      	pop	{r3, r4, r5, pc}
 800ce20:	8993      	ldrh	r3, [r2, #12]
 800ce22:	f023 0320 	bic.w	r3, r3, #32
 800ce26:	8193      	strh	r3, [r2, #12]
 800ce28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce2a:	6852      	ldr	r2, [r2, #4]
 800ce2c:	b2cd      	uxtb	r5, r1
 800ce2e:	b18b      	cbz	r3, 800ce54 <_sungetc_r+0x44>
 800ce30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce32:	4293      	cmp	r3, r2
 800ce34:	dd08      	ble.n	800ce48 <_sungetc_r+0x38>
 800ce36:	6823      	ldr	r3, [r4, #0]
 800ce38:	1e5a      	subs	r2, r3, #1
 800ce3a:	6022      	str	r2, [r4, #0]
 800ce3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ce40:	6863      	ldr	r3, [r4, #4]
 800ce42:	3301      	adds	r3, #1
 800ce44:	6063      	str	r3, [r4, #4]
 800ce46:	e7e9      	b.n	800ce1c <_sungetc_r+0xc>
 800ce48:	4621      	mov	r1, r4
 800ce4a:	f000 fbc3 	bl	800d5d4 <__submore>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d0f1      	beq.n	800ce36 <_sungetc_r+0x26>
 800ce52:	e7e1      	b.n	800ce18 <_sungetc_r+0x8>
 800ce54:	6921      	ldr	r1, [r4, #16]
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	b151      	cbz	r1, 800ce70 <_sungetc_r+0x60>
 800ce5a:	4299      	cmp	r1, r3
 800ce5c:	d208      	bcs.n	800ce70 <_sungetc_r+0x60>
 800ce5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ce62:	42a9      	cmp	r1, r5
 800ce64:	d104      	bne.n	800ce70 <_sungetc_r+0x60>
 800ce66:	3b01      	subs	r3, #1
 800ce68:	3201      	adds	r2, #1
 800ce6a:	6023      	str	r3, [r4, #0]
 800ce6c:	6062      	str	r2, [r4, #4]
 800ce6e:	e7d5      	b.n	800ce1c <_sungetc_r+0xc>
 800ce70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ce74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce78:	6363      	str	r3, [r4, #52]	; 0x34
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ce7e:	4623      	mov	r3, r4
 800ce80:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	2301      	movs	r3, #1
 800ce88:	e7dc      	b.n	800ce44 <_sungetc_r+0x34>

0800ce8a <__ssrefill_r>:
 800ce8a:	b510      	push	{r4, lr}
 800ce8c:	460c      	mov	r4, r1
 800ce8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ce90:	b169      	cbz	r1, 800ceae <__ssrefill_r+0x24>
 800ce92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce96:	4299      	cmp	r1, r3
 800ce98:	d001      	beq.n	800ce9e <__ssrefill_r+0x14>
 800ce9a:	f7fd fd55 	bl	800a948 <_free_r>
 800ce9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cea0:	6063      	str	r3, [r4, #4]
 800cea2:	2000      	movs	r0, #0
 800cea4:	6360      	str	r0, [r4, #52]	; 0x34
 800cea6:	b113      	cbz	r3, 800ceae <__ssrefill_r+0x24>
 800cea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ceaa:	6023      	str	r3, [r4, #0]
 800ceac:	bd10      	pop	{r4, pc}
 800ceae:	6923      	ldr	r3, [r4, #16]
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	6063      	str	r3, [r4, #4]
 800ceb6:	89a3      	ldrh	r3, [r4, #12]
 800ceb8:	f043 0320 	orr.w	r3, r3, #32
 800cebc:	81a3      	strh	r3, [r4, #12]
 800cebe:	f04f 30ff 	mov.w	r0, #4294967295
 800cec2:	e7f3      	b.n	800ceac <__ssrefill_r+0x22>

0800cec4 <__ssvfiscanf_r>:
 800cec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cec8:	460c      	mov	r4, r1
 800ceca:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cece:	2100      	movs	r1, #0
 800ced0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ced4:	49a6      	ldr	r1, [pc, #664]	; (800d170 <__ssvfiscanf_r+0x2ac>)
 800ced6:	91a0      	str	r1, [sp, #640]	; 0x280
 800ced8:	f10d 0804 	add.w	r8, sp, #4
 800cedc:	49a5      	ldr	r1, [pc, #660]	; (800d174 <__ssvfiscanf_r+0x2b0>)
 800cede:	4fa6      	ldr	r7, [pc, #664]	; (800d178 <__ssvfiscanf_r+0x2b4>)
 800cee0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d17c <__ssvfiscanf_r+0x2b8>
 800cee4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cee8:	4606      	mov	r6, r0
 800ceea:	91a1      	str	r1, [sp, #644]	; 0x284
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	7813      	ldrb	r3, [r2, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f000 815a 	beq.w	800d1aa <__ssvfiscanf_r+0x2e6>
 800cef6:	5dd9      	ldrb	r1, [r3, r7]
 800cef8:	f011 0108 	ands.w	r1, r1, #8
 800cefc:	f102 0501 	add.w	r5, r2, #1
 800cf00:	d019      	beq.n	800cf36 <__ssvfiscanf_r+0x72>
 800cf02:	6863      	ldr	r3, [r4, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	dd0f      	ble.n	800cf28 <__ssvfiscanf_r+0x64>
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	781a      	ldrb	r2, [r3, #0]
 800cf0c:	5cba      	ldrb	r2, [r7, r2]
 800cf0e:	0712      	lsls	r2, r2, #28
 800cf10:	d401      	bmi.n	800cf16 <__ssvfiscanf_r+0x52>
 800cf12:	462a      	mov	r2, r5
 800cf14:	e7eb      	b.n	800ceee <__ssvfiscanf_r+0x2a>
 800cf16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cf18:	3201      	adds	r2, #1
 800cf1a:	9245      	str	r2, [sp, #276]	; 0x114
 800cf1c:	6862      	ldr	r2, [r4, #4]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	3a01      	subs	r2, #1
 800cf22:	6062      	str	r2, [r4, #4]
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	e7ec      	b.n	800cf02 <__ssvfiscanf_r+0x3e>
 800cf28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	4798      	blx	r3
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d0e9      	beq.n	800cf08 <__ssvfiscanf_r+0x44>
 800cf34:	e7ed      	b.n	800cf12 <__ssvfiscanf_r+0x4e>
 800cf36:	2b25      	cmp	r3, #37	; 0x25
 800cf38:	d012      	beq.n	800cf60 <__ssvfiscanf_r+0x9c>
 800cf3a:	469a      	mov	sl, r3
 800cf3c:	6863      	ldr	r3, [r4, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f340 8091 	ble.w	800d066 <__ssvfiscanf_r+0x1a2>
 800cf44:	6822      	ldr	r2, [r4, #0]
 800cf46:	7813      	ldrb	r3, [r2, #0]
 800cf48:	4553      	cmp	r3, sl
 800cf4a:	f040 812e 	bne.w	800d1aa <__ssvfiscanf_r+0x2e6>
 800cf4e:	6863      	ldr	r3, [r4, #4]
 800cf50:	3b01      	subs	r3, #1
 800cf52:	6063      	str	r3, [r4, #4]
 800cf54:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cf56:	3201      	adds	r2, #1
 800cf58:	3301      	adds	r3, #1
 800cf5a:	6022      	str	r2, [r4, #0]
 800cf5c:	9345      	str	r3, [sp, #276]	; 0x114
 800cf5e:	e7d8      	b.n	800cf12 <__ssvfiscanf_r+0x4e>
 800cf60:	9141      	str	r1, [sp, #260]	; 0x104
 800cf62:	9143      	str	r1, [sp, #268]	; 0x10c
 800cf64:	7853      	ldrb	r3, [r2, #1]
 800cf66:	2b2a      	cmp	r3, #42	; 0x2a
 800cf68:	bf02      	ittt	eq
 800cf6a:	2310      	moveq	r3, #16
 800cf6c:	1c95      	addeq	r5, r2, #2
 800cf6e:	9341      	streq	r3, [sp, #260]	; 0x104
 800cf70:	220a      	movs	r2, #10
 800cf72:	46aa      	mov	sl, r5
 800cf74:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cf78:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cf7c:	2b09      	cmp	r3, #9
 800cf7e:	d91d      	bls.n	800cfbc <__ssvfiscanf_r+0xf8>
 800cf80:	487e      	ldr	r0, [pc, #504]	; (800d17c <__ssvfiscanf_r+0x2b8>)
 800cf82:	2203      	movs	r2, #3
 800cf84:	f7f3 f944 	bl	8000210 <memchr>
 800cf88:	b140      	cbz	r0, 800cf9c <__ssvfiscanf_r+0xd8>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	eba0 0009 	sub.w	r0, r0, r9
 800cf90:	fa03 f000 	lsl.w	r0, r3, r0
 800cf94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cf96:	4318      	orrs	r0, r3
 800cf98:	9041      	str	r0, [sp, #260]	; 0x104
 800cf9a:	4655      	mov	r5, sl
 800cf9c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cfa0:	2b78      	cmp	r3, #120	; 0x78
 800cfa2:	d806      	bhi.n	800cfb2 <__ssvfiscanf_r+0xee>
 800cfa4:	2b57      	cmp	r3, #87	; 0x57
 800cfa6:	d810      	bhi.n	800cfca <__ssvfiscanf_r+0x106>
 800cfa8:	2b25      	cmp	r3, #37	; 0x25
 800cfaa:	d0c6      	beq.n	800cf3a <__ssvfiscanf_r+0x76>
 800cfac:	d856      	bhi.n	800d05c <__ssvfiscanf_r+0x198>
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d064      	beq.n	800d07c <__ssvfiscanf_r+0x1b8>
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	9347      	str	r3, [sp, #284]	; 0x11c
 800cfb6:	230a      	movs	r3, #10
 800cfb8:	9342      	str	r3, [sp, #264]	; 0x108
 800cfba:	e071      	b.n	800d0a0 <__ssvfiscanf_r+0x1dc>
 800cfbc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cfbe:	fb02 1103 	mla	r1, r2, r3, r1
 800cfc2:	3930      	subs	r1, #48	; 0x30
 800cfc4:	9143      	str	r1, [sp, #268]	; 0x10c
 800cfc6:	4655      	mov	r5, sl
 800cfc8:	e7d3      	b.n	800cf72 <__ssvfiscanf_r+0xae>
 800cfca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cfce:	2a20      	cmp	r2, #32
 800cfd0:	d8ef      	bhi.n	800cfb2 <__ssvfiscanf_r+0xee>
 800cfd2:	a101      	add	r1, pc, #4	; (adr r1, 800cfd8 <__ssvfiscanf_r+0x114>)
 800cfd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cfd8:	0800d08b 	.word	0x0800d08b
 800cfdc:	0800cfb3 	.word	0x0800cfb3
 800cfe0:	0800cfb3 	.word	0x0800cfb3
 800cfe4:	0800d0e9 	.word	0x0800d0e9
 800cfe8:	0800cfb3 	.word	0x0800cfb3
 800cfec:	0800cfb3 	.word	0x0800cfb3
 800cff0:	0800cfb3 	.word	0x0800cfb3
 800cff4:	0800cfb3 	.word	0x0800cfb3
 800cff8:	0800cfb3 	.word	0x0800cfb3
 800cffc:	0800cfb3 	.word	0x0800cfb3
 800d000:	0800cfb3 	.word	0x0800cfb3
 800d004:	0800d0ff 	.word	0x0800d0ff
 800d008:	0800d0d5 	.word	0x0800d0d5
 800d00c:	0800d063 	.word	0x0800d063
 800d010:	0800d063 	.word	0x0800d063
 800d014:	0800d063 	.word	0x0800d063
 800d018:	0800cfb3 	.word	0x0800cfb3
 800d01c:	0800d0d9 	.word	0x0800d0d9
 800d020:	0800cfb3 	.word	0x0800cfb3
 800d024:	0800cfb3 	.word	0x0800cfb3
 800d028:	0800cfb3 	.word	0x0800cfb3
 800d02c:	0800cfb3 	.word	0x0800cfb3
 800d030:	0800d10f 	.word	0x0800d10f
 800d034:	0800d0e1 	.word	0x0800d0e1
 800d038:	0800d083 	.word	0x0800d083
 800d03c:	0800cfb3 	.word	0x0800cfb3
 800d040:	0800cfb3 	.word	0x0800cfb3
 800d044:	0800d10b 	.word	0x0800d10b
 800d048:	0800cfb3 	.word	0x0800cfb3
 800d04c:	0800d0d5 	.word	0x0800d0d5
 800d050:	0800cfb3 	.word	0x0800cfb3
 800d054:	0800cfb3 	.word	0x0800cfb3
 800d058:	0800d08b 	.word	0x0800d08b
 800d05c:	3b45      	subs	r3, #69	; 0x45
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d8a7      	bhi.n	800cfb2 <__ssvfiscanf_r+0xee>
 800d062:	2305      	movs	r3, #5
 800d064:	e01b      	b.n	800d09e <__ssvfiscanf_r+0x1da>
 800d066:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d068:	4621      	mov	r1, r4
 800d06a:	4630      	mov	r0, r6
 800d06c:	4798      	blx	r3
 800d06e:	2800      	cmp	r0, #0
 800d070:	f43f af68 	beq.w	800cf44 <__ssvfiscanf_r+0x80>
 800d074:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d076:	2800      	cmp	r0, #0
 800d078:	f040 808d 	bne.w	800d196 <__ssvfiscanf_r+0x2d2>
 800d07c:	f04f 30ff 	mov.w	r0, #4294967295
 800d080:	e08f      	b.n	800d1a2 <__ssvfiscanf_r+0x2de>
 800d082:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d084:	f042 0220 	orr.w	r2, r2, #32
 800d088:	9241      	str	r2, [sp, #260]	; 0x104
 800d08a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d08c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d090:	9241      	str	r2, [sp, #260]	; 0x104
 800d092:	2210      	movs	r2, #16
 800d094:	2b6f      	cmp	r3, #111	; 0x6f
 800d096:	9242      	str	r2, [sp, #264]	; 0x108
 800d098:	bf34      	ite	cc
 800d09a:	2303      	movcc	r3, #3
 800d09c:	2304      	movcs	r3, #4
 800d09e:	9347      	str	r3, [sp, #284]	; 0x11c
 800d0a0:	6863      	ldr	r3, [r4, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	dd42      	ble.n	800d12c <__ssvfiscanf_r+0x268>
 800d0a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d0a8:	0659      	lsls	r1, r3, #25
 800d0aa:	d404      	bmi.n	800d0b6 <__ssvfiscanf_r+0x1f2>
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	781a      	ldrb	r2, [r3, #0]
 800d0b0:	5cba      	ldrb	r2, [r7, r2]
 800d0b2:	0712      	lsls	r2, r2, #28
 800d0b4:	d441      	bmi.n	800d13a <__ssvfiscanf_r+0x276>
 800d0b6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d0b8:	2b02      	cmp	r3, #2
 800d0ba:	dc50      	bgt.n	800d15e <__ssvfiscanf_r+0x29a>
 800d0bc:	466b      	mov	r3, sp
 800d0be:	4622      	mov	r2, r4
 800d0c0:	a941      	add	r1, sp, #260	; 0x104
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f000 f876 	bl	800d1b4 <_scanf_chars>
 800d0c8:	2801      	cmp	r0, #1
 800d0ca:	d06e      	beq.n	800d1aa <__ssvfiscanf_r+0x2e6>
 800d0cc:	2802      	cmp	r0, #2
 800d0ce:	f47f af20 	bne.w	800cf12 <__ssvfiscanf_r+0x4e>
 800d0d2:	e7cf      	b.n	800d074 <__ssvfiscanf_r+0x1b0>
 800d0d4:	220a      	movs	r2, #10
 800d0d6:	e7dd      	b.n	800d094 <__ssvfiscanf_r+0x1d0>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	9342      	str	r3, [sp, #264]	; 0x108
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e7de      	b.n	800d09e <__ssvfiscanf_r+0x1da>
 800d0e0:	2308      	movs	r3, #8
 800d0e2:	9342      	str	r3, [sp, #264]	; 0x108
 800d0e4:	2304      	movs	r3, #4
 800d0e6:	e7da      	b.n	800d09e <__ssvfiscanf_r+0x1da>
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	f000 f9c6 	bl	800d47c <__sccl>
 800d0f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d0f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0f6:	9341      	str	r3, [sp, #260]	; 0x104
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e7cf      	b.n	800d09e <__ssvfiscanf_r+0x1da>
 800d0fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d104:	9341      	str	r3, [sp, #260]	; 0x104
 800d106:	2300      	movs	r3, #0
 800d108:	e7c9      	b.n	800d09e <__ssvfiscanf_r+0x1da>
 800d10a:	2302      	movs	r3, #2
 800d10c:	e7c7      	b.n	800d09e <__ssvfiscanf_r+0x1da>
 800d10e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d110:	06c3      	lsls	r3, r0, #27
 800d112:	f53f aefe 	bmi.w	800cf12 <__ssvfiscanf_r+0x4e>
 800d116:	9b00      	ldr	r3, [sp, #0]
 800d118:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d11a:	1d19      	adds	r1, r3, #4
 800d11c:	9100      	str	r1, [sp, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f010 0f01 	tst.w	r0, #1
 800d124:	bf14      	ite	ne
 800d126:	801a      	strhne	r2, [r3, #0]
 800d128:	601a      	streq	r2, [r3, #0]
 800d12a:	e6f2      	b.n	800cf12 <__ssvfiscanf_r+0x4e>
 800d12c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d12e:	4621      	mov	r1, r4
 800d130:	4630      	mov	r0, r6
 800d132:	4798      	blx	r3
 800d134:	2800      	cmp	r0, #0
 800d136:	d0b6      	beq.n	800d0a6 <__ssvfiscanf_r+0x1e2>
 800d138:	e79c      	b.n	800d074 <__ssvfiscanf_r+0x1b0>
 800d13a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d13c:	3201      	adds	r2, #1
 800d13e:	9245      	str	r2, [sp, #276]	; 0x114
 800d140:	6862      	ldr	r2, [r4, #4]
 800d142:	3a01      	subs	r2, #1
 800d144:	2a00      	cmp	r2, #0
 800d146:	6062      	str	r2, [r4, #4]
 800d148:	dd02      	ble.n	800d150 <__ssvfiscanf_r+0x28c>
 800d14a:	3301      	adds	r3, #1
 800d14c:	6023      	str	r3, [r4, #0]
 800d14e:	e7ad      	b.n	800d0ac <__ssvfiscanf_r+0x1e8>
 800d150:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d152:	4621      	mov	r1, r4
 800d154:	4630      	mov	r0, r6
 800d156:	4798      	blx	r3
 800d158:	2800      	cmp	r0, #0
 800d15a:	d0a7      	beq.n	800d0ac <__ssvfiscanf_r+0x1e8>
 800d15c:	e78a      	b.n	800d074 <__ssvfiscanf_r+0x1b0>
 800d15e:	2b04      	cmp	r3, #4
 800d160:	dc0e      	bgt.n	800d180 <__ssvfiscanf_r+0x2bc>
 800d162:	466b      	mov	r3, sp
 800d164:	4622      	mov	r2, r4
 800d166:	a941      	add	r1, sp, #260	; 0x104
 800d168:	4630      	mov	r0, r6
 800d16a:	f000 f87d 	bl	800d268 <_scanf_i>
 800d16e:	e7ab      	b.n	800d0c8 <__ssvfiscanf_r+0x204>
 800d170:	0800ce11 	.word	0x0800ce11
 800d174:	0800ce8b 	.word	0x0800ce8b
 800d178:	0800f78b 	.word	0x0800f78b
 800d17c:	0800fa7a 	.word	0x0800fa7a
 800d180:	4b0b      	ldr	r3, [pc, #44]	; (800d1b0 <__ssvfiscanf_r+0x2ec>)
 800d182:	2b00      	cmp	r3, #0
 800d184:	f43f aec5 	beq.w	800cf12 <__ssvfiscanf_r+0x4e>
 800d188:	466b      	mov	r3, sp
 800d18a:	4622      	mov	r2, r4
 800d18c:	a941      	add	r1, sp, #260	; 0x104
 800d18e:	4630      	mov	r0, r6
 800d190:	f3af 8000 	nop.w
 800d194:	e798      	b.n	800d0c8 <__ssvfiscanf_r+0x204>
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d19c:	bf18      	it	ne
 800d19e:	f04f 30ff 	movne.w	r0, #4294967295
 800d1a2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1aa:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d1ac:	e7f9      	b.n	800d1a2 <__ssvfiscanf_r+0x2de>
 800d1ae:	bf00      	nop
 800d1b0:	00000000 	.word	0x00000000

0800d1b4 <_scanf_chars>:
 800d1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b8:	4615      	mov	r5, r2
 800d1ba:	688a      	ldr	r2, [r1, #8]
 800d1bc:	4680      	mov	r8, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	b932      	cbnz	r2, 800d1d0 <_scanf_chars+0x1c>
 800d1c2:	698a      	ldr	r2, [r1, #24]
 800d1c4:	2a00      	cmp	r2, #0
 800d1c6:	bf0c      	ite	eq
 800d1c8:	2201      	moveq	r2, #1
 800d1ca:	f04f 32ff 	movne.w	r2, #4294967295
 800d1ce:	608a      	str	r2, [r1, #8]
 800d1d0:	6822      	ldr	r2, [r4, #0]
 800d1d2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d264 <_scanf_chars+0xb0>
 800d1d6:	06d1      	lsls	r1, r2, #27
 800d1d8:	bf5f      	itttt	pl
 800d1da:	681a      	ldrpl	r2, [r3, #0]
 800d1dc:	1d11      	addpl	r1, r2, #4
 800d1de:	6019      	strpl	r1, [r3, #0]
 800d1e0:	6816      	ldrpl	r6, [r2, #0]
 800d1e2:	2700      	movs	r7, #0
 800d1e4:	69a0      	ldr	r0, [r4, #24]
 800d1e6:	b188      	cbz	r0, 800d20c <_scanf_chars+0x58>
 800d1e8:	2801      	cmp	r0, #1
 800d1ea:	d107      	bne.n	800d1fc <_scanf_chars+0x48>
 800d1ec:	682a      	ldr	r2, [r5, #0]
 800d1ee:	7811      	ldrb	r1, [r2, #0]
 800d1f0:	6962      	ldr	r2, [r4, #20]
 800d1f2:	5c52      	ldrb	r2, [r2, r1]
 800d1f4:	b952      	cbnz	r2, 800d20c <_scanf_chars+0x58>
 800d1f6:	2f00      	cmp	r7, #0
 800d1f8:	d031      	beq.n	800d25e <_scanf_chars+0xaa>
 800d1fa:	e022      	b.n	800d242 <_scanf_chars+0x8e>
 800d1fc:	2802      	cmp	r0, #2
 800d1fe:	d120      	bne.n	800d242 <_scanf_chars+0x8e>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d208:	071b      	lsls	r3, r3, #28
 800d20a:	d41a      	bmi.n	800d242 <_scanf_chars+0x8e>
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	06da      	lsls	r2, r3, #27
 800d210:	bf5e      	ittt	pl
 800d212:	682b      	ldrpl	r3, [r5, #0]
 800d214:	781b      	ldrbpl	r3, [r3, #0]
 800d216:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d21a:	682a      	ldr	r2, [r5, #0]
 800d21c:	686b      	ldr	r3, [r5, #4]
 800d21e:	3201      	adds	r2, #1
 800d220:	602a      	str	r2, [r5, #0]
 800d222:	68a2      	ldr	r2, [r4, #8]
 800d224:	3b01      	subs	r3, #1
 800d226:	3a01      	subs	r2, #1
 800d228:	606b      	str	r3, [r5, #4]
 800d22a:	3701      	adds	r7, #1
 800d22c:	60a2      	str	r2, [r4, #8]
 800d22e:	b142      	cbz	r2, 800d242 <_scanf_chars+0x8e>
 800d230:	2b00      	cmp	r3, #0
 800d232:	dcd7      	bgt.n	800d1e4 <_scanf_chars+0x30>
 800d234:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d238:	4629      	mov	r1, r5
 800d23a:	4640      	mov	r0, r8
 800d23c:	4798      	blx	r3
 800d23e:	2800      	cmp	r0, #0
 800d240:	d0d0      	beq.n	800d1e4 <_scanf_chars+0x30>
 800d242:	6823      	ldr	r3, [r4, #0]
 800d244:	f013 0310 	ands.w	r3, r3, #16
 800d248:	d105      	bne.n	800d256 <_scanf_chars+0xa2>
 800d24a:	68e2      	ldr	r2, [r4, #12]
 800d24c:	3201      	adds	r2, #1
 800d24e:	60e2      	str	r2, [r4, #12]
 800d250:	69a2      	ldr	r2, [r4, #24]
 800d252:	b102      	cbz	r2, 800d256 <_scanf_chars+0xa2>
 800d254:	7033      	strb	r3, [r6, #0]
 800d256:	6923      	ldr	r3, [r4, #16]
 800d258:	443b      	add	r3, r7
 800d25a:	6123      	str	r3, [r4, #16]
 800d25c:	2000      	movs	r0, #0
 800d25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d262:	bf00      	nop
 800d264:	0800f78b 	.word	0x0800f78b

0800d268 <_scanf_i>:
 800d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	4698      	mov	r8, r3
 800d26e:	4b76      	ldr	r3, [pc, #472]	; (800d448 <_scanf_i+0x1e0>)
 800d270:	460c      	mov	r4, r1
 800d272:	4682      	mov	sl, r0
 800d274:	4616      	mov	r6, r2
 800d276:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d27a:	b087      	sub	sp, #28
 800d27c:	ab03      	add	r3, sp, #12
 800d27e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d282:	4b72      	ldr	r3, [pc, #456]	; (800d44c <_scanf_i+0x1e4>)
 800d284:	69a1      	ldr	r1, [r4, #24]
 800d286:	4a72      	ldr	r2, [pc, #456]	; (800d450 <_scanf_i+0x1e8>)
 800d288:	2903      	cmp	r1, #3
 800d28a:	bf18      	it	ne
 800d28c:	461a      	movne	r2, r3
 800d28e:	68a3      	ldr	r3, [r4, #8]
 800d290:	9201      	str	r2, [sp, #4]
 800d292:	1e5a      	subs	r2, r3, #1
 800d294:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d298:	bf88      	it	hi
 800d29a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d29e:	4627      	mov	r7, r4
 800d2a0:	bf82      	ittt	hi
 800d2a2:	eb03 0905 	addhi.w	r9, r3, r5
 800d2a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d2aa:	60a3      	strhi	r3, [r4, #8]
 800d2ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d2b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d2b4:	bf98      	it	ls
 800d2b6:	f04f 0900 	movls.w	r9, #0
 800d2ba:	6023      	str	r3, [r4, #0]
 800d2bc:	463d      	mov	r5, r7
 800d2be:	f04f 0b00 	mov.w	fp, #0
 800d2c2:	6831      	ldr	r1, [r6, #0]
 800d2c4:	ab03      	add	r3, sp, #12
 800d2c6:	7809      	ldrb	r1, [r1, #0]
 800d2c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d2cc:	2202      	movs	r2, #2
 800d2ce:	f7f2 ff9f 	bl	8000210 <memchr>
 800d2d2:	b328      	cbz	r0, 800d320 <_scanf_i+0xb8>
 800d2d4:	f1bb 0f01 	cmp.w	fp, #1
 800d2d8:	d159      	bne.n	800d38e <_scanf_i+0x126>
 800d2da:	6862      	ldr	r2, [r4, #4]
 800d2dc:	b92a      	cbnz	r2, 800d2ea <_scanf_i+0x82>
 800d2de:	6822      	ldr	r2, [r4, #0]
 800d2e0:	2308      	movs	r3, #8
 800d2e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2e6:	6063      	str	r3, [r4, #4]
 800d2e8:	6022      	str	r2, [r4, #0]
 800d2ea:	6822      	ldr	r2, [r4, #0]
 800d2ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d2f0:	6022      	str	r2, [r4, #0]
 800d2f2:	68a2      	ldr	r2, [r4, #8]
 800d2f4:	1e51      	subs	r1, r2, #1
 800d2f6:	60a1      	str	r1, [r4, #8]
 800d2f8:	b192      	cbz	r2, 800d320 <_scanf_i+0xb8>
 800d2fa:	6832      	ldr	r2, [r6, #0]
 800d2fc:	1c51      	adds	r1, r2, #1
 800d2fe:	6031      	str	r1, [r6, #0]
 800d300:	7812      	ldrb	r2, [r2, #0]
 800d302:	f805 2b01 	strb.w	r2, [r5], #1
 800d306:	6872      	ldr	r2, [r6, #4]
 800d308:	3a01      	subs	r2, #1
 800d30a:	2a00      	cmp	r2, #0
 800d30c:	6072      	str	r2, [r6, #4]
 800d30e:	dc07      	bgt.n	800d320 <_scanf_i+0xb8>
 800d310:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d314:	4631      	mov	r1, r6
 800d316:	4650      	mov	r0, sl
 800d318:	4790      	blx	r2
 800d31a:	2800      	cmp	r0, #0
 800d31c:	f040 8085 	bne.w	800d42a <_scanf_i+0x1c2>
 800d320:	f10b 0b01 	add.w	fp, fp, #1
 800d324:	f1bb 0f03 	cmp.w	fp, #3
 800d328:	d1cb      	bne.n	800d2c2 <_scanf_i+0x5a>
 800d32a:	6863      	ldr	r3, [r4, #4]
 800d32c:	b90b      	cbnz	r3, 800d332 <_scanf_i+0xca>
 800d32e:	230a      	movs	r3, #10
 800d330:	6063      	str	r3, [r4, #4]
 800d332:	6863      	ldr	r3, [r4, #4]
 800d334:	4947      	ldr	r1, [pc, #284]	; (800d454 <_scanf_i+0x1ec>)
 800d336:	6960      	ldr	r0, [r4, #20]
 800d338:	1ac9      	subs	r1, r1, r3
 800d33a:	f000 f89f 	bl	800d47c <__sccl>
 800d33e:	f04f 0b00 	mov.w	fp, #0
 800d342:	68a3      	ldr	r3, [r4, #8]
 800d344:	6822      	ldr	r2, [r4, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d03d      	beq.n	800d3c6 <_scanf_i+0x15e>
 800d34a:	6831      	ldr	r1, [r6, #0]
 800d34c:	6960      	ldr	r0, [r4, #20]
 800d34e:	f891 c000 	ldrb.w	ip, [r1]
 800d352:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d356:	2800      	cmp	r0, #0
 800d358:	d035      	beq.n	800d3c6 <_scanf_i+0x15e>
 800d35a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d35e:	d124      	bne.n	800d3aa <_scanf_i+0x142>
 800d360:	0510      	lsls	r0, r2, #20
 800d362:	d522      	bpl.n	800d3aa <_scanf_i+0x142>
 800d364:	f10b 0b01 	add.w	fp, fp, #1
 800d368:	f1b9 0f00 	cmp.w	r9, #0
 800d36c:	d003      	beq.n	800d376 <_scanf_i+0x10e>
 800d36e:	3301      	adds	r3, #1
 800d370:	f109 39ff 	add.w	r9, r9, #4294967295
 800d374:	60a3      	str	r3, [r4, #8]
 800d376:	6873      	ldr	r3, [r6, #4]
 800d378:	3b01      	subs	r3, #1
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	6073      	str	r3, [r6, #4]
 800d37e:	dd1b      	ble.n	800d3b8 <_scanf_i+0x150>
 800d380:	6833      	ldr	r3, [r6, #0]
 800d382:	3301      	adds	r3, #1
 800d384:	6033      	str	r3, [r6, #0]
 800d386:	68a3      	ldr	r3, [r4, #8]
 800d388:	3b01      	subs	r3, #1
 800d38a:	60a3      	str	r3, [r4, #8]
 800d38c:	e7d9      	b.n	800d342 <_scanf_i+0xda>
 800d38e:	f1bb 0f02 	cmp.w	fp, #2
 800d392:	d1ae      	bne.n	800d2f2 <_scanf_i+0x8a>
 800d394:	6822      	ldr	r2, [r4, #0]
 800d396:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d39a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d39e:	d1bf      	bne.n	800d320 <_scanf_i+0xb8>
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	6063      	str	r3, [r4, #4]
 800d3a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3a8:	e7a2      	b.n	800d2f0 <_scanf_i+0x88>
 800d3aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d3ae:	6022      	str	r2, [r4, #0]
 800d3b0:	780b      	ldrb	r3, [r1, #0]
 800d3b2:	f805 3b01 	strb.w	r3, [r5], #1
 800d3b6:	e7de      	b.n	800d376 <_scanf_i+0x10e>
 800d3b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d3bc:	4631      	mov	r1, r6
 800d3be:	4650      	mov	r0, sl
 800d3c0:	4798      	blx	r3
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d0df      	beq.n	800d386 <_scanf_i+0x11e>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	05db      	lsls	r3, r3, #23
 800d3ca:	d50d      	bpl.n	800d3e8 <_scanf_i+0x180>
 800d3cc:	42bd      	cmp	r5, r7
 800d3ce:	d909      	bls.n	800d3e4 <_scanf_i+0x17c>
 800d3d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d3d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3d8:	4632      	mov	r2, r6
 800d3da:	4650      	mov	r0, sl
 800d3dc:	4798      	blx	r3
 800d3de:	f105 39ff 	add.w	r9, r5, #4294967295
 800d3e2:	464d      	mov	r5, r9
 800d3e4:	42bd      	cmp	r5, r7
 800d3e6:	d02d      	beq.n	800d444 <_scanf_i+0x1dc>
 800d3e8:	6822      	ldr	r2, [r4, #0]
 800d3ea:	f012 0210 	ands.w	r2, r2, #16
 800d3ee:	d113      	bne.n	800d418 <_scanf_i+0x1b0>
 800d3f0:	702a      	strb	r2, [r5, #0]
 800d3f2:	6863      	ldr	r3, [r4, #4]
 800d3f4:	9e01      	ldr	r6, [sp, #4]
 800d3f6:	4639      	mov	r1, r7
 800d3f8:	4650      	mov	r0, sl
 800d3fa:	47b0      	blx	r6
 800d3fc:	6821      	ldr	r1, [r4, #0]
 800d3fe:	f8d8 3000 	ldr.w	r3, [r8]
 800d402:	f011 0f20 	tst.w	r1, #32
 800d406:	d013      	beq.n	800d430 <_scanf_i+0x1c8>
 800d408:	1d1a      	adds	r2, r3, #4
 800d40a:	f8c8 2000 	str.w	r2, [r8]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6018      	str	r0, [r3, #0]
 800d412:	68e3      	ldr	r3, [r4, #12]
 800d414:	3301      	adds	r3, #1
 800d416:	60e3      	str	r3, [r4, #12]
 800d418:	1bed      	subs	r5, r5, r7
 800d41a:	44ab      	add	fp, r5
 800d41c:	6925      	ldr	r5, [r4, #16]
 800d41e:	445d      	add	r5, fp
 800d420:	6125      	str	r5, [r4, #16]
 800d422:	2000      	movs	r0, #0
 800d424:	b007      	add	sp, #28
 800d426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42a:	f04f 0b00 	mov.w	fp, #0
 800d42e:	e7ca      	b.n	800d3c6 <_scanf_i+0x15e>
 800d430:	1d1a      	adds	r2, r3, #4
 800d432:	f8c8 2000 	str.w	r2, [r8]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f011 0f01 	tst.w	r1, #1
 800d43c:	bf14      	ite	ne
 800d43e:	8018      	strhne	r0, [r3, #0]
 800d440:	6018      	streq	r0, [r3, #0]
 800d442:	e7e6      	b.n	800d412 <_scanf_i+0x1aa>
 800d444:	2001      	movs	r0, #1
 800d446:	e7ed      	b.n	800d424 <_scanf_i+0x1bc>
 800d448:	0800ee74 	.word	0x0800ee74
 800d44c:	0800d5d1 	.word	0x0800d5d1
 800d450:	0800b675 	.word	0x0800b675
 800d454:	0800fa9e 	.word	0x0800fa9e

0800d458 <_read_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	4d07      	ldr	r5, [pc, #28]	; (800d478 <_read_r+0x20>)
 800d45c:	4604      	mov	r4, r0
 800d45e:	4608      	mov	r0, r1
 800d460:	4611      	mov	r1, r2
 800d462:	2200      	movs	r2, #0
 800d464:	602a      	str	r2, [r5, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	f7f6 fcb8 	bl	8003ddc <_read>
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	d102      	bne.n	800d476 <_read_r+0x1e>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	b103      	cbz	r3, 800d476 <_read_r+0x1e>
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	20000b34 	.word	0x20000b34

0800d47c <__sccl>:
 800d47c:	b570      	push	{r4, r5, r6, lr}
 800d47e:	780b      	ldrb	r3, [r1, #0]
 800d480:	4604      	mov	r4, r0
 800d482:	2b5e      	cmp	r3, #94	; 0x5e
 800d484:	bf0b      	itete	eq
 800d486:	784b      	ldrbeq	r3, [r1, #1]
 800d488:	1c48      	addne	r0, r1, #1
 800d48a:	1c88      	addeq	r0, r1, #2
 800d48c:	2200      	movne	r2, #0
 800d48e:	bf08      	it	eq
 800d490:	2201      	moveq	r2, #1
 800d492:	1e61      	subs	r1, r4, #1
 800d494:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d498:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d49c:	42a9      	cmp	r1, r5
 800d49e:	d1fb      	bne.n	800d498 <__sccl+0x1c>
 800d4a0:	b90b      	cbnz	r3, 800d4a6 <__sccl+0x2a>
 800d4a2:	3801      	subs	r0, #1
 800d4a4:	bd70      	pop	{r4, r5, r6, pc}
 800d4a6:	f082 0201 	eor.w	r2, r2, #1
 800d4aa:	54e2      	strb	r2, [r4, r3]
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d4b4:	292d      	cmp	r1, #45	; 0x2d
 800d4b6:	d006      	beq.n	800d4c6 <__sccl+0x4a>
 800d4b8:	295d      	cmp	r1, #93	; 0x5d
 800d4ba:	d0f3      	beq.n	800d4a4 <__sccl+0x28>
 800d4bc:	b909      	cbnz	r1, 800d4c2 <__sccl+0x46>
 800d4be:	4628      	mov	r0, r5
 800d4c0:	e7f0      	b.n	800d4a4 <__sccl+0x28>
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	e7f1      	b.n	800d4aa <__sccl+0x2e>
 800d4c6:	786e      	ldrb	r6, [r5, #1]
 800d4c8:	2e5d      	cmp	r6, #93	; 0x5d
 800d4ca:	d0fa      	beq.n	800d4c2 <__sccl+0x46>
 800d4cc:	42b3      	cmp	r3, r6
 800d4ce:	dcf8      	bgt.n	800d4c2 <__sccl+0x46>
 800d4d0:	3502      	adds	r5, #2
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	3101      	adds	r1, #1
 800d4d6:	428e      	cmp	r6, r1
 800d4d8:	5462      	strb	r2, [r4, r1]
 800d4da:	dcfb      	bgt.n	800d4d4 <__sccl+0x58>
 800d4dc:	1af1      	subs	r1, r6, r3
 800d4de:	3901      	subs	r1, #1
 800d4e0:	1c58      	adds	r0, r3, #1
 800d4e2:	42b3      	cmp	r3, r6
 800d4e4:	bfa8      	it	ge
 800d4e6:	2100      	movge	r1, #0
 800d4e8:	1843      	adds	r3, r0, r1
 800d4ea:	e7e0      	b.n	800d4ae <__sccl+0x32>

0800d4ec <_strtoul_l.constprop.0>:
 800d4ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4f0:	4f36      	ldr	r7, [pc, #216]	; (800d5cc <_strtoul_l.constprop.0+0xe0>)
 800d4f2:	4686      	mov	lr, r0
 800d4f4:	460d      	mov	r5, r1
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4fc:	5de6      	ldrb	r6, [r4, r7]
 800d4fe:	f016 0608 	ands.w	r6, r6, #8
 800d502:	d1f8      	bne.n	800d4f6 <_strtoul_l.constprop.0+0xa>
 800d504:	2c2d      	cmp	r4, #45	; 0x2d
 800d506:	d12f      	bne.n	800d568 <_strtoul_l.constprop.0+0x7c>
 800d508:	782c      	ldrb	r4, [r5, #0]
 800d50a:	2601      	movs	r6, #1
 800d50c:	1c85      	adds	r5, r0, #2
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d057      	beq.n	800d5c2 <_strtoul_l.constprop.0+0xd6>
 800d512:	2b10      	cmp	r3, #16
 800d514:	d109      	bne.n	800d52a <_strtoul_l.constprop.0+0x3e>
 800d516:	2c30      	cmp	r4, #48	; 0x30
 800d518:	d107      	bne.n	800d52a <_strtoul_l.constprop.0+0x3e>
 800d51a:	7828      	ldrb	r0, [r5, #0]
 800d51c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d520:	2858      	cmp	r0, #88	; 0x58
 800d522:	d149      	bne.n	800d5b8 <_strtoul_l.constprop.0+0xcc>
 800d524:	786c      	ldrb	r4, [r5, #1]
 800d526:	2310      	movs	r3, #16
 800d528:	3502      	adds	r5, #2
 800d52a:	f04f 38ff 	mov.w	r8, #4294967295
 800d52e:	2700      	movs	r7, #0
 800d530:	fbb8 f8f3 	udiv	r8, r8, r3
 800d534:	fb03 f908 	mul.w	r9, r3, r8
 800d538:	ea6f 0909 	mvn.w	r9, r9
 800d53c:	4638      	mov	r0, r7
 800d53e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d542:	f1bc 0f09 	cmp.w	ip, #9
 800d546:	d814      	bhi.n	800d572 <_strtoul_l.constprop.0+0x86>
 800d548:	4664      	mov	r4, ip
 800d54a:	42a3      	cmp	r3, r4
 800d54c:	dd22      	ble.n	800d594 <_strtoul_l.constprop.0+0xa8>
 800d54e:	2f00      	cmp	r7, #0
 800d550:	db1d      	blt.n	800d58e <_strtoul_l.constprop.0+0xa2>
 800d552:	4580      	cmp	r8, r0
 800d554:	d31b      	bcc.n	800d58e <_strtoul_l.constprop.0+0xa2>
 800d556:	d101      	bne.n	800d55c <_strtoul_l.constprop.0+0x70>
 800d558:	45a1      	cmp	r9, r4
 800d55a:	db18      	blt.n	800d58e <_strtoul_l.constprop.0+0xa2>
 800d55c:	fb00 4003 	mla	r0, r0, r3, r4
 800d560:	2701      	movs	r7, #1
 800d562:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d566:	e7ea      	b.n	800d53e <_strtoul_l.constprop.0+0x52>
 800d568:	2c2b      	cmp	r4, #43	; 0x2b
 800d56a:	bf04      	itt	eq
 800d56c:	782c      	ldrbeq	r4, [r5, #0]
 800d56e:	1c85      	addeq	r5, r0, #2
 800d570:	e7cd      	b.n	800d50e <_strtoul_l.constprop.0+0x22>
 800d572:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d576:	f1bc 0f19 	cmp.w	ip, #25
 800d57a:	d801      	bhi.n	800d580 <_strtoul_l.constprop.0+0x94>
 800d57c:	3c37      	subs	r4, #55	; 0x37
 800d57e:	e7e4      	b.n	800d54a <_strtoul_l.constprop.0+0x5e>
 800d580:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d584:	f1bc 0f19 	cmp.w	ip, #25
 800d588:	d804      	bhi.n	800d594 <_strtoul_l.constprop.0+0xa8>
 800d58a:	3c57      	subs	r4, #87	; 0x57
 800d58c:	e7dd      	b.n	800d54a <_strtoul_l.constprop.0+0x5e>
 800d58e:	f04f 37ff 	mov.w	r7, #4294967295
 800d592:	e7e6      	b.n	800d562 <_strtoul_l.constprop.0+0x76>
 800d594:	2f00      	cmp	r7, #0
 800d596:	da07      	bge.n	800d5a8 <_strtoul_l.constprop.0+0xbc>
 800d598:	2322      	movs	r3, #34	; 0x22
 800d59a:	f8ce 3000 	str.w	r3, [lr]
 800d59e:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a2:	b932      	cbnz	r2, 800d5b2 <_strtoul_l.constprop.0+0xc6>
 800d5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5a8:	b106      	cbz	r6, 800d5ac <_strtoul_l.constprop.0+0xc0>
 800d5aa:	4240      	negs	r0, r0
 800d5ac:	2a00      	cmp	r2, #0
 800d5ae:	d0f9      	beq.n	800d5a4 <_strtoul_l.constprop.0+0xb8>
 800d5b0:	b107      	cbz	r7, 800d5b4 <_strtoul_l.constprop.0+0xc8>
 800d5b2:	1e69      	subs	r1, r5, #1
 800d5b4:	6011      	str	r1, [r2, #0]
 800d5b6:	e7f5      	b.n	800d5a4 <_strtoul_l.constprop.0+0xb8>
 800d5b8:	2430      	movs	r4, #48	; 0x30
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1b5      	bne.n	800d52a <_strtoul_l.constprop.0+0x3e>
 800d5be:	2308      	movs	r3, #8
 800d5c0:	e7b3      	b.n	800d52a <_strtoul_l.constprop.0+0x3e>
 800d5c2:	2c30      	cmp	r4, #48	; 0x30
 800d5c4:	d0a9      	beq.n	800d51a <_strtoul_l.constprop.0+0x2e>
 800d5c6:	230a      	movs	r3, #10
 800d5c8:	e7af      	b.n	800d52a <_strtoul_l.constprop.0+0x3e>
 800d5ca:	bf00      	nop
 800d5cc:	0800f78b 	.word	0x0800f78b

0800d5d0 <_strtoul_r>:
 800d5d0:	f7ff bf8c 	b.w	800d4ec <_strtoul_l.constprop.0>

0800d5d4 <__submore>:
 800d5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d8:	460c      	mov	r4, r1
 800d5da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5e0:	4299      	cmp	r1, r3
 800d5e2:	d11d      	bne.n	800d620 <__submore+0x4c>
 800d5e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d5e8:	f7fd fa1a 	bl	800aa20 <_malloc_r>
 800d5ec:	b918      	cbnz	r0, 800d5f6 <__submore+0x22>
 800d5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5fa:	63a3      	str	r3, [r4, #56]	; 0x38
 800d5fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d600:	6360      	str	r0, [r4, #52]	; 0x34
 800d602:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d606:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d60a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d60e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d612:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d616:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d61a:	6020      	str	r0, [r4, #0]
 800d61c:	2000      	movs	r0, #0
 800d61e:	e7e8      	b.n	800d5f2 <__submore+0x1e>
 800d620:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d622:	0077      	lsls	r7, r6, #1
 800d624:	463a      	mov	r2, r7
 800d626:	f000 fa25 	bl	800da74 <_realloc_r>
 800d62a:	4605      	mov	r5, r0
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d0de      	beq.n	800d5ee <__submore+0x1a>
 800d630:	eb00 0806 	add.w	r8, r0, r6
 800d634:	4601      	mov	r1, r0
 800d636:	4632      	mov	r2, r6
 800d638:	4640      	mov	r0, r8
 800d63a:	f7fe fed9 	bl	800c3f0 <memcpy>
 800d63e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d642:	f8c4 8000 	str.w	r8, [r4]
 800d646:	e7e9      	b.n	800d61c <__submore+0x48>

0800d648 <__assert_func>:
 800d648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d64a:	4614      	mov	r4, r2
 800d64c:	461a      	mov	r2, r3
 800d64e:	4b09      	ldr	r3, [pc, #36]	; (800d674 <__assert_func+0x2c>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4605      	mov	r5, r0
 800d654:	68d8      	ldr	r0, [r3, #12]
 800d656:	b14c      	cbz	r4, 800d66c <__assert_func+0x24>
 800d658:	4b07      	ldr	r3, [pc, #28]	; (800d678 <__assert_func+0x30>)
 800d65a:	9100      	str	r1, [sp, #0]
 800d65c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d660:	4906      	ldr	r1, [pc, #24]	; (800d67c <__assert_func+0x34>)
 800d662:	462b      	mov	r3, r5
 800d664:	f000 f9a6 	bl	800d9b4 <fiprintf>
 800d668:	f000 fc5a 	bl	800df20 <abort>
 800d66c:	4b04      	ldr	r3, [pc, #16]	; (800d680 <__assert_func+0x38>)
 800d66e:	461c      	mov	r4, r3
 800d670:	e7f3      	b.n	800d65a <__assert_func+0x12>
 800d672:	bf00      	nop
 800d674:	2000029c 	.word	0x2000029c
 800d678:	0800faa0 	.word	0x0800faa0
 800d67c:	0800faad 	.word	0x0800faad
 800d680:	0800fadb 	.word	0x0800fadb

0800d684 <__sflush_r>:
 800d684:	898a      	ldrh	r2, [r1, #12]
 800d686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d68a:	4605      	mov	r5, r0
 800d68c:	0710      	lsls	r0, r2, #28
 800d68e:	460c      	mov	r4, r1
 800d690:	d458      	bmi.n	800d744 <__sflush_r+0xc0>
 800d692:	684b      	ldr	r3, [r1, #4]
 800d694:	2b00      	cmp	r3, #0
 800d696:	dc05      	bgt.n	800d6a4 <__sflush_r+0x20>
 800d698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	dc02      	bgt.n	800d6a4 <__sflush_r+0x20>
 800d69e:	2000      	movs	r0, #0
 800d6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6a6:	2e00      	cmp	r6, #0
 800d6a8:	d0f9      	beq.n	800d69e <__sflush_r+0x1a>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6b0:	682f      	ldr	r7, [r5, #0]
 800d6b2:	602b      	str	r3, [r5, #0]
 800d6b4:	d032      	beq.n	800d71c <__sflush_r+0x98>
 800d6b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6b8:	89a3      	ldrh	r3, [r4, #12]
 800d6ba:	075a      	lsls	r2, r3, #29
 800d6bc:	d505      	bpl.n	800d6ca <__sflush_r+0x46>
 800d6be:	6863      	ldr	r3, [r4, #4]
 800d6c0:	1ac0      	subs	r0, r0, r3
 800d6c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6c4:	b10b      	cbz	r3, 800d6ca <__sflush_r+0x46>
 800d6c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6c8:	1ac0      	subs	r0, r0, r3
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6d0:	6a21      	ldr	r1, [r4, #32]
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	47b0      	blx	r6
 800d6d6:	1c43      	adds	r3, r0, #1
 800d6d8:	89a3      	ldrh	r3, [r4, #12]
 800d6da:	d106      	bne.n	800d6ea <__sflush_r+0x66>
 800d6dc:	6829      	ldr	r1, [r5, #0]
 800d6de:	291d      	cmp	r1, #29
 800d6e0:	d82c      	bhi.n	800d73c <__sflush_r+0xb8>
 800d6e2:	4a2a      	ldr	r2, [pc, #168]	; (800d78c <__sflush_r+0x108>)
 800d6e4:	40ca      	lsrs	r2, r1
 800d6e6:	07d6      	lsls	r6, r2, #31
 800d6e8:	d528      	bpl.n	800d73c <__sflush_r+0xb8>
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	6062      	str	r2, [r4, #4]
 800d6ee:	04d9      	lsls	r1, r3, #19
 800d6f0:	6922      	ldr	r2, [r4, #16]
 800d6f2:	6022      	str	r2, [r4, #0]
 800d6f4:	d504      	bpl.n	800d700 <__sflush_r+0x7c>
 800d6f6:	1c42      	adds	r2, r0, #1
 800d6f8:	d101      	bne.n	800d6fe <__sflush_r+0x7a>
 800d6fa:	682b      	ldr	r3, [r5, #0]
 800d6fc:	b903      	cbnz	r3, 800d700 <__sflush_r+0x7c>
 800d6fe:	6560      	str	r0, [r4, #84]	; 0x54
 800d700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d702:	602f      	str	r7, [r5, #0]
 800d704:	2900      	cmp	r1, #0
 800d706:	d0ca      	beq.n	800d69e <__sflush_r+0x1a>
 800d708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d70c:	4299      	cmp	r1, r3
 800d70e:	d002      	beq.n	800d716 <__sflush_r+0x92>
 800d710:	4628      	mov	r0, r5
 800d712:	f7fd f919 	bl	800a948 <_free_r>
 800d716:	2000      	movs	r0, #0
 800d718:	6360      	str	r0, [r4, #52]	; 0x34
 800d71a:	e7c1      	b.n	800d6a0 <__sflush_r+0x1c>
 800d71c:	6a21      	ldr	r1, [r4, #32]
 800d71e:	2301      	movs	r3, #1
 800d720:	4628      	mov	r0, r5
 800d722:	47b0      	blx	r6
 800d724:	1c41      	adds	r1, r0, #1
 800d726:	d1c7      	bne.n	800d6b8 <__sflush_r+0x34>
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d0c4      	beq.n	800d6b8 <__sflush_r+0x34>
 800d72e:	2b1d      	cmp	r3, #29
 800d730:	d001      	beq.n	800d736 <__sflush_r+0xb2>
 800d732:	2b16      	cmp	r3, #22
 800d734:	d101      	bne.n	800d73a <__sflush_r+0xb6>
 800d736:	602f      	str	r7, [r5, #0]
 800d738:	e7b1      	b.n	800d69e <__sflush_r+0x1a>
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d740:	81a3      	strh	r3, [r4, #12]
 800d742:	e7ad      	b.n	800d6a0 <__sflush_r+0x1c>
 800d744:	690f      	ldr	r7, [r1, #16]
 800d746:	2f00      	cmp	r7, #0
 800d748:	d0a9      	beq.n	800d69e <__sflush_r+0x1a>
 800d74a:	0793      	lsls	r3, r2, #30
 800d74c:	680e      	ldr	r6, [r1, #0]
 800d74e:	bf08      	it	eq
 800d750:	694b      	ldreq	r3, [r1, #20]
 800d752:	600f      	str	r7, [r1, #0]
 800d754:	bf18      	it	ne
 800d756:	2300      	movne	r3, #0
 800d758:	eba6 0807 	sub.w	r8, r6, r7
 800d75c:	608b      	str	r3, [r1, #8]
 800d75e:	f1b8 0f00 	cmp.w	r8, #0
 800d762:	dd9c      	ble.n	800d69e <__sflush_r+0x1a>
 800d764:	6a21      	ldr	r1, [r4, #32]
 800d766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d768:	4643      	mov	r3, r8
 800d76a:	463a      	mov	r2, r7
 800d76c:	4628      	mov	r0, r5
 800d76e:	47b0      	blx	r6
 800d770:	2800      	cmp	r0, #0
 800d772:	dc06      	bgt.n	800d782 <__sflush_r+0xfe>
 800d774:	89a3      	ldrh	r3, [r4, #12]
 800d776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d77a:	81a3      	strh	r3, [r4, #12]
 800d77c:	f04f 30ff 	mov.w	r0, #4294967295
 800d780:	e78e      	b.n	800d6a0 <__sflush_r+0x1c>
 800d782:	4407      	add	r7, r0
 800d784:	eba8 0800 	sub.w	r8, r8, r0
 800d788:	e7e9      	b.n	800d75e <__sflush_r+0xda>
 800d78a:	bf00      	nop
 800d78c:	20400001 	.word	0x20400001

0800d790 <_fflush_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	690b      	ldr	r3, [r1, #16]
 800d794:	4605      	mov	r5, r0
 800d796:	460c      	mov	r4, r1
 800d798:	b913      	cbnz	r3, 800d7a0 <_fflush_r+0x10>
 800d79a:	2500      	movs	r5, #0
 800d79c:	4628      	mov	r0, r5
 800d79e:	bd38      	pop	{r3, r4, r5, pc}
 800d7a0:	b118      	cbz	r0, 800d7aa <_fflush_r+0x1a>
 800d7a2:	6983      	ldr	r3, [r0, #24]
 800d7a4:	b90b      	cbnz	r3, 800d7aa <_fflush_r+0x1a>
 800d7a6:	f000 f887 	bl	800d8b8 <__sinit>
 800d7aa:	4b14      	ldr	r3, [pc, #80]	; (800d7fc <_fflush_r+0x6c>)
 800d7ac:	429c      	cmp	r4, r3
 800d7ae:	d11b      	bne.n	800d7e8 <_fflush_r+0x58>
 800d7b0:	686c      	ldr	r4, [r5, #4]
 800d7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d0ef      	beq.n	800d79a <_fflush_r+0xa>
 800d7ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7bc:	07d0      	lsls	r0, r2, #31
 800d7be:	d404      	bmi.n	800d7ca <_fflush_r+0x3a>
 800d7c0:	0599      	lsls	r1, r3, #22
 800d7c2:	d402      	bmi.n	800d7ca <_fflush_r+0x3a>
 800d7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7c6:	f000 f927 	bl	800da18 <__retarget_lock_acquire_recursive>
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	4621      	mov	r1, r4
 800d7ce:	f7ff ff59 	bl	800d684 <__sflush_r>
 800d7d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7d4:	07da      	lsls	r2, r3, #31
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	d4e0      	bmi.n	800d79c <_fflush_r+0xc>
 800d7da:	89a3      	ldrh	r3, [r4, #12]
 800d7dc:	059b      	lsls	r3, r3, #22
 800d7de:	d4dd      	bmi.n	800d79c <_fflush_r+0xc>
 800d7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7e2:	f000 f91a 	bl	800da1a <__retarget_lock_release_recursive>
 800d7e6:	e7d9      	b.n	800d79c <_fflush_r+0xc>
 800d7e8:	4b05      	ldr	r3, [pc, #20]	; (800d800 <_fflush_r+0x70>)
 800d7ea:	429c      	cmp	r4, r3
 800d7ec:	d101      	bne.n	800d7f2 <_fflush_r+0x62>
 800d7ee:	68ac      	ldr	r4, [r5, #8]
 800d7f0:	e7df      	b.n	800d7b2 <_fflush_r+0x22>
 800d7f2:	4b04      	ldr	r3, [pc, #16]	; (800d804 <_fflush_r+0x74>)
 800d7f4:	429c      	cmp	r4, r3
 800d7f6:	bf08      	it	eq
 800d7f8:	68ec      	ldreq	r4, [r5, #12]
 800d7fa:	e7da      	b.n	800d7b2 <_fflush_r+0x22>
 800d7fc:	0800fafc 	.word	0x0800fafc
 800d800:	0800fb1c 	.word	0x0800fb1c
 800d804:	0800fadc 	.word	0x0800fadc

0800d808 <std>:
 800d808:	2300      	movs	r3, #0
 800d80a:	b510      	push	{r4, lr}
 800d80c:	4604      	mov	r4, r0
 800d80e:	e9c0 3300 	strd	r3, r3, [r0]
 800d812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d816:	6083      	str	r3, [r0, #8]
 800d818:	8181      	strh	r1, [r0, #12]
 800d81a:	6643      	str	r3, [r0, #100]	; 0x64
 800d81c:	81c2      	strh	r2, [r0, #14]
 800d81e:	6183      	str	r3, [r0, #24]
 800d820:	4619      	mov	r1, r3
 800d822:	2208      	movs	r2, #8
 800d824:	305c      	adds	r0, #92	; 0x5c
 800d826:	f7fd f887 	bl	800a938 <memset>
 800d82a:	4b05      	ldr	r3, [pc, #20]	; (800d840 <std+0x38>)
 800d82c:	6263      	str	r3, [r4, #36]	; 0x24
 800d82e:	4b05      	ldr	r3, [pc, #20]	; (800d844 <std+0x3c>)
 800d830:	62a3      	str	r3, [r4, #40]	; 0x28
 800d832:	4b05      	ldr	r3, [pc, #20]	; (800d848 <std+0x40>)
 800d834:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d836:	4b05      	ldr	r3, [pc, #20]	; (800d84c <std+0x44>)
 800d838:	6224      	str	r4, [r4, #32]
 800d83a:	6323      	str	r3, [r4, #48]	; 0x30
 800d83c:	bd10      	pop	{r4, pc}
 800d83e:	bf00      	nop
 800d840:	0800b495 	.word	0x0800b495
 800d844:	0800b4bb 	.word	0x0800b4bb
 800d848:	0800b4f3 	.word	0x0800b4f3
 800d84c:	0800b517 	.word	0x0800b517

0800d850 <_cleanup_r>:
 800d850:	4901      	ldr	r1, [pc, #4]	; (800d858 <_cleanup_r+0x8>)
 800d852:	f000 b8c1 	b.w	800d9d8 <_fwalk_reent>
 800d856:	bf00      	nop
 800d858:	0800d791 	.word	0x0800d791

0800d85c <__sfmoreglue>:
 800d85c:	b570      	push	{r4, r5, r6, lr}
 800d85e:	2268      	movs	r2, #104	; 0x68
 800d860:	1e4d      	subs	r5, r1, #1
 800d862:	4355      	muls	r5, r2
 800d864:	460e      	mov	r6, r1
 800d866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d86a:	f7fd f8d9 	bl	800aa20 <_malloc_r>
 800d86e:	4604      	mov	r4, r0
 800d870:	b140      	cbz	r0, 800d884 <__sfmoreglue+0x28>
 800d872:	2100      	movs	r1, #0
 800d874:	e9c0 1600 	strd	r1, r6, [r0]
 800d878:	300c      	adds	r0, #12
 800d87a:	60a0      	str	r0, [r4, #8]
 800d87c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d880:	f7fd f85a 	bl	800a938 <memset>
 800d884:	4620      	mov	r0, r4
 800d886:	bd70      	pop	{r4, r5, r6, pc}

0800d888 <__sfp_lock_acquire>:
 800d888:	4801      	ldr	r0, [pc, #4]	; (800d890 <__sfp_lock_acquire+0x8>)
 800d88a:	f000 b8c5 	b.w	800da18 <__retarget_lock_acquire_recursive>
 800d88e:	bf00      	nop
 800d890:	20000b39 	.word	0x20000b39

0800d894 <__sfp_lock_release>:
 800d894:	4801      	ldr	r0, [pc, #4]	; (800d89c <__sfp_lock_release+0x8>)
 800d896:	f000 b8c0 	b.w	800da1a <__retarget_lock_release_recursive>
 800d89a:	bf00      	nop
 800d89c:	20000b39 	.word	0x20000b39

0800d8a0 <__sinit_lock_acquire>:
 800d8a0:	4801      	ldr	r0, [pc, #4]	; (800d8a8 <__sinit_lock_acquire+0x8>)
 800d8a2:	f000 b8b9 	b.w	800da18 <__retarget_lock_acquire_recursive>
 800d8a6:	bf00      	nop
 800d8a8:	20000b3a 	.word	0x20000b3a

0800d8ac <__sinit_lock_release>:
 800d8ac:	4801      	ldr	r0, [pc, #4]	; (800d8b4 <__sinit_lock_release+0x8>)
 800d8ae:	f000 b8b4 	b.w	800da1a <__retarget_lock_release_recursive>
 800d8b2:	bf00      	nop
 800d8b4:	20000b3a 	.word	0x20000b3a

0800d8b8 <__sinit>:
 800d8b8:	b510      	push	{r4, lr}
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	f7ff fff0 	bl	800d8a0 <__sinit_lock_acquire>
 800d8c0:	69a3      	ldr	r3, [r4, #24]
 800d8c2:	b11b      	cbz	r3, 800d8cc <__sinit+0x14>
 800d8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8c8:	f7ff bff0 	b.w	800d8ac <__sinit_lock_release>
 800d8cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d8d0:	6523      	str	r3, [r4, #80]	; 0x50
 800d8d2:	4b13      	ldr	r3, [pc, #76]	; (800d920 <__sinit+0x68>)
 800d8d4:	4a13      	ldr	r2, [pc, #76]	; (800d924 <__sinit+0x6c>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d8da:	42a3      	cmp	r3, r4
 800d8dc:	bf04      	itt	eq
 800d8de:	2301      	moveq	r3, #1
 800d8e0:	61a3      	streq	r3, [r4, #24]
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	f000 f820 	bl	800d928 <__sfp>
 800d8e8:	6060      	str	r0, [r4, #4]
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f000 f81c 	bl	800d928 <__sfp>
 800d8f0:	60a0      	str	r0, [r4, #8]
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 f818 	bl	800d928 <__sfp>
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	60e0      	str	r0, [r4, #12]
 800d8fc:	2104      	movs	r1, #4
 800d8fe:	6860      	ldr	r0, [r4, #4]
 800d900:	f7ff ff82 	bl	800d808 <std>
 800d904:	68a0      	ldr	r0, [r4, #8]
 800d906:	2201      	movs	r2, #1
 800d908:	2109      	movs	r1, #9
 800d90a:	f7ff ff7d 	bl	800d808 <std>
 800d90e:	68e0      	ldr	r0, [r4, #12]
 800d910:	2202      	movs	r2, #2
 800d912:	2112      	movs	r1, #18
 800d914:	f7ff ff78 	bl	800d808 <std>
 800d918:	2301      	movs	r3, #1
 800d91a:	61a3      	str	r3, [r4, #24]
 800d91c:	e7d2      	b.n	800d8c4 <__sinit+0xc>
 800d91e:	bf00      	nop
 800d920:	0800f754 	.word	0x0800f754
 800d924:	0800d851 	.word	0x0800d851

0800d928 <__sfp>:
 800d928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92a:	4607      	mov	r7, r0
 800d92c:	f7ff ffac 	bl	800d888 <__sfp_lock_acquire>
 800d930:	4b1e      	ldr	r3, [pc, #120]	; (800d9ac <__sfp+0x84>)
 800d932:	681e      	ldr	r6, [r3, #0]
 800d934:	69b3      	ldr	r3, [r6, #24]
 800d936:	b913      	cbnz	r3, 800d93e <__sfp+0x16>
 800d938:	4630      	mov	r0, r6
 800d93a:	f7ff ffbd 	bl	800d8b8 <__sinit>
 800d93e:	3648      	adds	r6, #72	; 0x48
 800d940:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d944:	3b01      	subs	r3, #1
 800d946:	d503      	bpl.n	800d950 <__sfp+0x28>
 800d948:	6833      	ldr	r3, [r6, #0]
 800d94a:	b30b      	cbz	r3, 800d990 <__sfp+0x68>
 800d94c:	6836      	ldr	r6, [r6, #0]
 800d94e:	e7f7      	b.n	800d940 <__sfp+0x18>
 800d950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d954:	b9d5      	cbnz	r5, 800d98c <__sfp+0x64>
 800d956:	4b16      	ldr	r3, [pc, #88]	; (800d9b0 <__sfp+0x88>)
 800d958:	60e3      	str	r3, [r4, #12]
 800d95a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d95e:	6665      	str	r5, [r4, #100]	; 0x64
 800d960:	f000 f859 	bl	800da16 <__retarget_lock_init_recursive>
 800d964:	f7ff ff96 	bl	800d894 <__sfp_lock_release>
 800d968:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d96c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d970:	6025      	str	r5, [r4, #0]
 800d972:	61a5      	str	r5, [r4, #24]
 800d974:	2208      	movs	r2, #8
 800d976:	4629      	mov	r1, r5
 800d978:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d97c:	f7fc ffdc 	bl	800a938 <memset>
 800d980:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d984:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d988:	4620      	mov	r0, r4
 800d98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d98c:	3468      	adds	r4, #104	; 0x68
 800d98e:	e7d9      	b.n	800d944 <__sfp+0x1c>
 800d990:	2104      	movs	r1, #4
 800d992:	4638      	mov	r0, r7
 800d994:	f7ff ff62 	bl	800d85c <__sfmoreglue>
 800d998:	4604      	mov	r4, r0
 800d99a:	6030      	str	r0, [r6, #0]
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d1d5      	bne.n	800d94c <__sfp+0x24>
 800d9a0:	f7ff ff78 	bl	800d894 <__sfp_lock_release>
 800d9a4:	230c      	movs	r3, #12
 800d9a6:	603b      	str	r3, [r7, #0]
 800d9a8:	e7ee      	b.n	800d988 <__sfp+0x60>
 800d9aa:	bf00      	nop
 800d9ac:	0800f754 	.word	0x0800f754
 800d9b0:	ffff0001 	.word	0xffff0001

0800d9b4 <fiprintf>:
 800d9b4:	b40e      	push	{r1, r2, r3}
 800d9b6:	b503      	push	{r0, r1, lr}
 800d9b8:	4601      	mov	r1, r0
 800d9ba:	ab03      	add	r3, sp, #12
 800d9bc:	4805      	ldr	r0, [pc, #20]	; (800d9d4 <fiprintf+0x20>)
 800d9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9c2:	6800      	ldr	r0, [r0, #0]
 800d9c4:	9301      	str	r3, [sp, #4]
 800d9c6:	f000 f8ad 	bl	800db24 <_vfiprintf_r>
 800d9ca:	b002      	add	sp, #8
 800d9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9d0:	b003      	add	sp, #12
 800d9d2:	4770      	bx	lr
 800d9d4:	2000029c 	.word	0x2000029c

0800d9d8 <_fwalk_reent>:
 800d9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9dc:	4606      	mov	r6, r0
 800d9de:	4688      	mov	r8, r1
 800d9e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d9e4:	2700      	movs	r7, #0
 800d9e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9ea:	f1b9 0901 	subs.w	r9, r9, #1
 800d9ee:	d505      	bpl.n	800d9fc <_fwalk_reent+0x24>
 800d9f0:	6824      	ldr	r4, [r4, #0]
 800d9f2:	2c00      	cmp	r4, #0
 800d9f4:	d1f7      	bne.n	800d9e6 <_fwalk_reent+0xe>
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9fc:	89ab      	ldrh	r3, [r5, #12]
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d907      	bls.n	800da12 <_fwalk_reent+0x3a>
 800da02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da06:	3301      	adds	r3, #1
 800da08:	d003      	beq.n	800da12 <_fwalk_reent+0x3a>
 800da0a:	4629      	mov	r1, r5
 800da0c:	4630      	mov	r0, r6
 800da0e:	47c0      	blx	r8
 800da10:	4307      	orrs	r7, r0
 800da12:	3568      	adds	r5, #104	; 0x68
 800da14:	e7e9      	b.n	800d9ea <_fwalk_reent+0x12>

0800da16 <__retarget_lock_init_recursive>:
 800da16:	4770      	bx	lr

0800da18 <__retarget_lock_acquire_recursive>:
 800da18:	4770      	bx	lr

0800da1a <__retarget_lock_release_recursive>:
 800da1a:	4770      	bx	lr

0800da1c <__ascii_mbtowc>:
 800da1c:	b082      	sub	sp, #8
 800da1e:	b901      	cbnz	r1, 800da22 <__ascii_mbtowc+0x6>
 800da20:	a901      	add	r1, sp, #4
 800da22:	b142      	cbz	r2, 800da36 <__ascii_mbtowc+0x1a>
 800da24:	b14b      	cbz	r3, 800da3a <__ascii_mbtowc+0x1e>
 800da26:	7813      	ldrb	r3, [r2, #0]
 800da28:	600b      	str	r3, [r1, #0]
 800da2a:	7812      	ldrb	r2, [r2, #0]
 800da2c:	1e10      	subs	r0, r2, #0
 800da2e:	bf18      	it	ne
 800da30:	2001      	movne	r0, #1
 800da32:	b002      	add	sp, #8
 800da34:	4770      	bx	lr
 800da36:	4610      	mov	r0, r2
 800da38:	e7fb      	b.n	800da32 <__ascii_mbtowc+0x16>
 800da3a:	f06f 0001 	mvn.w	r0, #1
 800da3e:	e7f8      	b.n	800da32 <__ascii_mbtowc+0x16>

0800da40 <memmove>:
 800da40:	4288      	cmp	r0, r1
 800da42:	b510      	push	{r4, lr}
 800da44:	eb01 0402 	add.w	r4, r1, r2
 800da48:	d902      	bls.n	800da50 <memmove+0x10>
 800da4a:	4284      	cmp	r4, r0
 800da4c:	4623      	mov	r3, r4
 800da4e:	d807      	bhi.n	800da60 <memmove+0x20>
 800da50:	1e43      	subs	r3, r0, #1
 800da52:	42a1      	cmp	r1, r4
 800da54:	d008      	beq.n	800da68 <memmove+0x28>
 800da56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da5e:	e7f8      	b.n	800da52 <memmove+0x12>
 800da60:	4402      	add	r2, r0
 800da62:	4601      	mov	r1, r0
 800da64:	428a      	cmp	r2, r1
 800da66:	d100      	bne.n	800da6a <memmove+0x2a>
 800da68:	bd10      	pop	{r4, pc}
 800da6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da72:	e7f7      	b.n	800da64 <memmove+0x24>

0800da74 <_realloc_r>:
 800da74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da78:	4680      	mov	r8, r0
 800da7a:	4614      	mov	r4, r2
 800da7c:	460e      	mov	r6, r1
 800da7e:	b921      	cbnz	r1, 800da8a <_realloc_r+0x16>
 800da80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da84:	4611      	mov	r1, r2
 800da86:	f7fc bfcb 	b.w	800aa20 <_malloc_r>
 800da8a:	b92a      	cbnz	r2, 800da98 <_realloc_r+0x24>
 800da8c:	f7fc ff5c 	bl	800a948 <_free_r>
 800da90:	4625      	mov	r5, r4
 800da92:	4628      	mov	r0, r5
 800da94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da98:	f000 faae 	bl	800dff8 <_malloc_usable_size_r>
 800da9c:	4284      	cmp	r4, r0
 800da9e:	4607      	mov	r7, r0
 800daa0:	d802      	bhi.n	800daa8 <_realloc_r+0x34>
 800daa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800daa6:	d812      	bhi.n	800dace <_realloc_r+0x5a>
 800daa8:	4621      	mov	r1, r4
 800daaa:	4640      	mov	r0, r8
 800daac:	f7fc ffb8 	bl	800aa20 <_malloc_r>
 800dab0:	4605      	mov	r5, r0
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d0ed      	beq.n	800da92 <_realloc_r+0x1e>
 800dab6:	42bc      	cmp	r4, r7
 800dab8:	4622      	mov	r2, r4
 800daba:	4631      	mov	r1, r6
 800dabc:	bf28      	it	cs
 800dabe:	463a      	movcs	r2, r7
 800dac0:	f7fe fc96 	bl	800c3f0 <memcpy>
 800dac4:	4631      	mov	r1, r6
 800dac6:	4640      	mov	r0, r8
 800dac8:	f7fc ff3e 	bl	800a948 <_free_r>
 800dacc:	e7e1      	b.n	800da92 <_realloc_r+0x1e>
 800dace:	4635      	mov	r5, r6
 800dad0:	e7df      	b.n	800da92 <_realloc_r+0x1e>

0800dad2 <__sfputc_r>:
 800dad2:	6893      	ldr	r3, [r2, #8]
 800dad4:	3b01      	subs	r3, #1
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	b410      	push	{r4}
 800dada:	6093      	str	r3, [r2, #8]
 800dadc:	da08      	bge.n	800daf0 <__sfputc_r+0x1e>
 800dade:	6994      	ldr	r4, [r2, #24]
 800dae0:	42a3      	cmp	r3, r4
 800dae2:	db01      	blt.n	800dae8 <__sfputc_r+0x16>
 800dae4:	290a      	cmp	r1, #10
 800dae6:	d103      	bne.n	800daf0 <__sfputc_r+0x1e>
 800dae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daec:	f000 b94a 	b.w	800dd84 <__swbuf_r>
 800daf0:	6813      	ldr	r3, [r2, #0]
 800daf2:	1c58      	adds	r0, r3, #1
 800daf4:	6010      	str	r0, [r2, #0]
 800daf6:	7019      	strb	r1, [r3, #0]
 800daf8:	4608      	mov	r0, r1
 800dafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <__sfputs_r>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	4606      	mov	r6, r0
 800db04:	460f      	mov	r7, r1
 800db06:	4614      	mov	r4, r2
 800db08:	18d5      	adds	r5, r2, r3
 800db0a:	42ac      	cmp	r4, r5
 800db0c:	d101      	bne.n	800db12 <__sfputs_r+0x12>
 800db0e:	2000      	movs	r0, #0
 800db10:	e007      	b.n	800db22 <__sfputs_r+0x22>
 800db12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db16:	463a      	mov	r2, r7
 800db18:	4630      	mov	r0, r6
 800db1a:	f7ff ffda 	bl	800dad2 <__sfputc_r>
 800db1e:	1c43      	adds	r3, r0, #1
 800db20:	d1f3      	bne.n	800db0a <__sfputs_r+0xa>
 800db22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db24 <_vfiprintf_r>:
 800db24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db28:	460d      	mov	r5, r1
 800db2a:	b09d      	sub	sp, #116	; 0x74
 800db2c:	4614      	mov	r4, r2
 800db2e:	4698      	mov	r8, r3
 800db30:	4606      	mov	r6, r0
 800db32:	b118      	cbz	r0, 800db3c <_vfiprintf_r+0x18>
 800db34:	6983      	ldr	r3, [r0, #24]
 800db36:	b90b      	cbnz	r3, 800db3c <_vfiprintf_r+0x18>
 800db38:	f7ff febe 	bl	800d8b8 <__sinit>
 800db3c:	4b89      	ldr	r3, [pc, #548]	; (800dd64 <_vfiprintf_r+0x240>)
 800db3e:	429d      	cmp	r5, r3
 800db40:	d11b      	bne.n	800db7a <_vfiprintf_r+0x56>
 800db42:	6875      	ldr	r5, [r6, #4]
 800db44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db46:	07d9      	lsls	r1, r3, #31
 800db48:	d405      	bmi.n	800db56 <_vfiprintf_r+0x32>
 800db4a:	89ab      	ldrh	r3, [r5, #12]
 800db4c:	059a      	lsls	r2, r3, #22
 800db4e:	d402      	bmi.n	800db56 <_vfiprintf_r+0x32>
 800db50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db52:	f7ff ff61 	bl	800da18 <__retarget_lock_acquire_recursive>
 800db56:	89ab      	ldrh	r3, [r5, #12]
 800db58:	071b      	lsls	r3, r3, #28
 800db5a:	d501      	bpl.n	800db60 <_vfiprintf_r+0x3c>
 800db5c:	692b      	ldr	r3, [r5, #16]
 800db5e:	b9eb      	cbnz	r3, 800db9c <_vfiprintf_r+0x78>
 800db60:	4629      	mov	r1, r5
 800db62:	4630      	mov	r0, r6
 800db64:	f000 f96e 	bl	800de44 <__swsetup_r>
 800db68:	b1c0      	cbz	r0, 800db9c <_vfiprintf_r+0x78>
 800db6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db6c:	07dc      	lsls	r4, r3, #31
 800db6e:	d50e      	bpl.n	800db8e <_vfiprintf_r+0x6a>
 800db70:	f04f 30ff 	mov.w	r0, #4294967295
 800db74:	b01d      	add	sp, #116	; 0x74
 800db76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db7a:	4b7b      	ldr	r3, [pc, #492]	; (800dd68 <_vfiprintf_r+0x244>)
 800db7c:	429d      	cmp	r5, r3
 800db7e:	d101      	bne.n	800db84 <_vfiprintf_r+0x60>
 800db80:	68b5      	ldr	r5, [r6, #8]
 800db82:	e7df      	b.n	800db44 <_vfiprintf_r+0x20>
 800db84:	4b79      	ldr	r3, [pc, #484]	; (800dd6c <_vfiprintf_r+0x248>)
 800db86:	429d      	cmp	r5, r3
 800db88:	bf08      	it	eq
 800db8a:	68f5      	ldreq	r5, [r6, #12]
 800db8c:	e7da      	b.n	800db44 <_vfiprintf_r+0x20>
 800db8e:	89ab      	ldrh	r3, [r5, #12]
 800db90:	0598      	lsls	r0, r3, #22
 800db92:	d4ed      	bmi.n	800db70 <_vfiprintf_r+0x4c>
 800db94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db96:	f7ff ff40 	bl	800da1a <__retarget_lock_release_recursive>
 800db9a:	e7e9      	b.n	800db70 <_vfiprintf_r+0x4c>
 800db9c:	2300      	movs	r3, #0
 800db9e:	9309      	str	r3, [sp, #36]	; 0x24
 800dba0:	2320      	movs	r3, #32
 800dba2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dba6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbaa:	2330      	movs	r3, #48	; 0x30
 800dbac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dd70 <_vfiprintf_r+0x24c>
 800dbb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbb4:	f04f 0901 	mov.w	r9, #1
 800dbb8:	4623      	mov	r3, r4
 800dbba:	469a      	mov	sl, r3
 800dbbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbc0:	b10a      	cbz	r2, 800dbc6 <_vfiprintf_r+0xa2>
 800dbc2:	2a25      	cmp	r2, #37	; 0x25
 800dbc4:	d1f9      	bne.n	800dbba <_vfiprintf_r+0x96>
 800dbc6:	ebba 0b04 	subs.w	fp, sl, r4
 800dbca:	d00b      	beq.n	800dbe4 <_vfiprintf_r+0xc0>
 800dbcc:	465b      	mov	r3, fp
 800dbce:	4622      	mov	r2, r4
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f7ff ff94 	bl	800db00 <__sfputs_r>
 800dbd8:	3001      	adds	r0, #1
 800dbda:	f000 80aa 	beq.w	800dd32 <_vfiprintf_r+0x20e>
 800dbde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbe0:	445a      	add	r2, fp
 800dbe2:	9209      	str	r2, [sp, #36]	; 0x24
 800dbe4:	f89a 3000 	ldrb.w	r3, [sl]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f000 80a2 	beq.w	800dd32 <_vfiprintf_r+0x20e>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbf8:	f10a 0a01 	add.w	sl, sl, #1
 800dbfc:	9304      	str	r3, [sp, #16]
 800dbfe:	9307      	str	r3, [sp, #28]
 800dc00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc04:	931a      	str	r3, [sp, #104]	; 0x68
 800dc06:	4654      	mov	r4, sl
 800dc08:	2205      	movs	r2, #5
 800dc0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc0e:	4858      	ldr	r0, [pc, #352]	; (800dd70 <_vfiprintf_r+0x24c>)
 800dc10:	f7f2 fafe 	bl	8000210 <memchr>
 800dc14:	9a04      	ldr	r2, [sp, #16]
 800dc16:	b9d8      	cbnz	r0, 800dc50 <_vfiprintf_r+0x12c>
 800dc18:	06d1      	lsls	r1, r2, #27
 800dc1a:	bf44      	itt	mi
 800dc1c:	2320      	movmi	r3, #32
 800dc1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc22:	0713      	lsls	r3, r2, #28
 800dc24:	bf44      	itt	mi
 800dc26:	232b      	movmi	r3, #43	; 0x2b
 800dc28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc2c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc30:	2b2a      	cmp	r3, #42	; 0x2a
 800dc32:	d015      	beq.n	800dc60 <_vfiprintf_r+0x13c>
 800dc34:	9a07      	ldr	r2, [sp, #28]
 800dc36:	4654      	mov	r4, sl
 800dc38:	2000      	movs	r0, #0
 800dc3a:	f04f 0c0a 	mov.w	ip, #10
 800dc3e:	4621      	mov	r1, r4
 800dc40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc44:	3b30      	subs	r3, #48	; 0x30
 800dc46:	2b09      	cmp	r3, #9
 800dc48:	d94e      	bls.n	800dce8 <_vfiprintf_r+0x1c4>
 800dc4a:	b1b0      	cbz	r0, 800dc7a <_vfiprintf_r+0x156>
 800dc4c:	9207      	str	r2, [sp, #28]
 800dc4e:	e014      	b.n	800dc7a <_vfiprintf_r+0x156>
 800dc50:	eba0 0308 	sub.w	r3, r0, r8
 800dc54:	fa09 f303 	lsl.w	r3, r9, r3
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	9304      	str	r3, [sp, #16]
 800dc5c:	46a2      	mov	sl, r4
 800dc5e:	e7d2      	b.n	800dc06 <_vfiprintf_r+0xe2>
 800dc60:	9b03      	ldr	r3, [sp, #12]
 800dc62:	1d19      	adds	r1, r3, #4
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	9103      	str	r1, [sp, #12]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	bfbb      	ittet	lt
 800dc6c:	425b      	neglt	r3, r3
 800dc6e:	f042 0202 	orrlt.w	r2, r2, #2
 800dc72:	9307      	strge	r3, [sp, #28]
 800dc74:	9307      	strlt	r3, [sp, #28]
 800dc76:	bfb8      	it	lt
 800dc78:	9204      	strlt	r2, [sp, #16]
 800dc7a:	7823      	ldrb	r3, [r4, #0]
 800dc7c:	2b2e      	cmp	r3, #46	; 0x2e
 800dc7e:	d10c      	bne.n	800dc9a <_vfiprintf_r+0x176>
 800dc80:	7863      	ldrb	r3, [r4, #1]
 800dc82:	2b2a      	cmp	r3, #42	; 0x2a
 800dc84:	d135      	bne.n	800dcf2 <_vfiprintf_r+0x1ce>
 800dc86:	9b03      	ldr	r3, [sp, #12]
 800dc88:	1d1a      	adds	r2, r3, #4
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	9203      	str	r2, [sp, #12]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	bfb8      	it	lt
 800dc92:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc96:	3402      	adds	r4, #2
 800dc98:	9305      	str	r3, [sp, #20]
 800dc9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dd80 <_vfiprintf_r+0x25c>
 800dc9e:	7821      	ldrb	r1, [r4, #0]
 800dca0:	2203      	movs	r2, #3
 800dca2:	4650      	mov	r0, sl
 800dca4:	f7f2 fab4 	bl	8000210 <memchr>
 800dca8:	b140      	cbz	r0, 800dcbc <_vfiprintf_r+0x198>
 800dcaa:	2340      	movs	r3, #64	; 0x40
 800dcac:	eba0 000a 	sub.w	r0, r0, sl
 800dcb0:	fa03 f000 	lsl.w	r0, r3, r0
 800dcb4:	9b04      	ldr	r3, [sp, #16]
 800dcb6:	4303      	orrs	r3, r0
 800dcb8:	3401      	adds	r4, #1
 800dcba:	9304      	str	r3, [sp, #16]
 800dcbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcc0:	482c      	ldr	r0, [pc, #176]	; (800dd74 <_vfiprintf_r+0x250>)
 800dcc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcc6:	2206      	movs	r2, #6
 800dcc8:	f7f2 faa2 	bl	8000210 <memchr>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d03f      	beq.n	800dd50 <_vfiprintf_r+0x22c>
 800dcd0:	4b29      	ldr	r3, [pc, #164]	; (800dd78 <_vfiprintf_r+0x254>)
 800dcd2:	bb1b      	cbnz	r3, 800dd1c <_vfiprintf_r+0x1f8>
 800dcd4:	9b03      	ldr	r3, [sp, #12]
 800dcd6:	3307      	adds	r3, #7
 800dcd8:	f023 0307 	bic.w	r3, r3, #7
 800dcdc:	3308      	adds	r3, #8
 800dcde:	9303      	str	r3, [sp, #12]
 800dce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce2:	443b      	add	r3, r7
 800dce4:	9309      	str	r3, [sp, #36]	; 0x24
 800dce6:	e767      	b.n	800dbb8 <_vfiprintf_r+0x94>
 800dce8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcec:	460c      	mov	r4, r1
 800dcee:	2001      	movs	r0, #1
 800dcf0:	e7a5      	b.n	800dc3e <_vfiprintf_r+0x11a>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	3401      	adds	r4, #1
 800dcf6:	9305      	str	r3, [sp, #20]
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	f04f 0c0a 	mov.w	ip, #10
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd04:	3a30      	subs	r2, #48	; 0x30
 800dd06:	2a09      	cmp	r2, #9
 800dd08:	d903      	bls.n	800dd12 <_vfiprintf_r+0x1ee>
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d0c5      	beq.n	800dc9a <_vfiprintf_r+0x176>
 800dd0e:	9105      	str	r1, [sp, #20]
 800dd10:	e7c3      	b.n	800dc9a <_vfiprintf_r+0x176>
 800dd12:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd16:	4604      	mov	r4, r0
 800dd18:	2301      	movs	r3, #1
 800dd1a:	e7f0      	b.n	800dcfe <_vfiprintf_r+0x1da>
 800dd1c:	ab03      	add	r3, sp, #12
 800dd1e:	9300      	str	r3, [sp, #0]
 800dd20:	462a      	mov	r2, r5
 800dd22:	4b16      	ldr	r3, [pc, #88]	; (800dd7c <_vfiprintf_r+0x258>)
 800dd24:	a904      	add	r1, sp, #16
 800dd26:	4630      	mov	r0, r6
 800dd28:	f7fc ff8e 	bl	800ac48 <_printf_float>
 800dd2c:	4607      	mov	r7, r0
 800dd2e:	1c78      	adds	r0, r7, #1
 800dd30:	d1d6      	bne.n	800dce0 <_vfiprintf_r+0x1bc>
 800dd32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd34:	07d9      	lsls	r1, r3, #31
 800dd36:	d405      	bmi.n	800dd44 <_vfiprintf_r+0x220>
 800dd38:	89ab      	ldrh	r3, [r5, #12]
 800dd3a:	059a      	lsls	r2, r3, #22
 800dd3c:	d402      	bmi.n	800dd44 <_vfiprintf_r+0x220>
 800dd3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd40:	f7ff fe6b 	bl	800da1a <__retarget_lock_release_recursive>
 800dd44:	89ab      	ldrh	r3, [r5, #12]
 800dd46:	065b      	lsls	r3, r3, #25
 800dd48:	f53f af12 	bmi.w	800db70 <_vfiprintf_r+0x4c>
 800dd4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd4e:	e711      	b.n	800db74 <_vfiprintf_r+0x50>
 800dd50:	ab03      	add	r3, sp, #12
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	462a      	mov	r2, r5
 800dd56:	4b09      	ldr	r3, [pc, #36]	; (800dd7c <_vfiprintf_r+0x258>)
 800dd58:	a904      	add	r1, sp, #16
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	f7fd fa18 	bl	800b190 <_printf_i>
 800dd60:	e7e4      	b.n	800dd2c <_vfiprintf_r+0x208>
 800dd62:	bf00      	nop
 800dd64:	0800fafc 	.word	0x0800fafc
 800dd68:	0800fb1c 	.word	0x0800fb1c
 800dd6c:	0800fadc 	.word	0x0800fadc
 800dd70:	0800fa74 	.word	0x0800fa74
 800dd74:	0800fa7e 	.word	0x0800fa7e
 800dd78:	0800ac49 	.word	0x0800ac49
 800dd7c:	0800db01 	.word	0x0800db01
 800dd80:	0800fa7a 	.word	0x0800fa7a

0800dd84 <__swbuf_r>:
 800dd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd86:	460e      	mov	r6, r1
 800dd88:	4614      	mov	r4, r2
 800dd8a:	4605      	mov	r5, r0
 800dd8c:	b118      	cbz	r0, 800dd96 <__swbuf_r+0x12>
 800dd8e:	6983      	ldr	r3, [r0, #24]
 800dd90:	b90b      	cbnz	r3, 800dd96 <__swbuf_r+0x12>
 800dd92:	f7ff fd91 	bl	800d8b8 <__sinit>
 800dd96:	4b21      	ldr	r3, [pc, #132]	; (800de1c <__swbuf_r+0x98>)
 800dd98:	429c      	cmp	r4, r3
 800dd9a:	d12b      	bne.n	800ddf4 <__swbuf_r+0x70>
 800dd9c:	686c      	ldr	r4, [r5, #4]
 800dd9e:	69a3      	ldr	r3, [r4, #24]
 800dda0:	60a3      	str	r3, [r4, #8]
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	071a      	lsls	r2, r3, #28
 800dda6:	d52f      	bpl.n	800de08 <__swbuf_r+0x84>
 800dda8:	6923      	ldr	r3, [r4, #16]
 800ddaa:	b36b      	cbz	r3, 800de08 <__swbuf_r+0x84>
 800ddac:	6923      	ldr	r3, [r4, #16]
 800ddae:	6820      	ldr	r0, [r4, #0]
 800ddb0:	1ac0      	subs	r0, r0, r3
 800ddb2:	6963      	ldr	r3, [r4, #20]
 800ddb4:	b2f6      	uxtb	r6, r6
 800ddb6:	4283      	cmp	r3, r0
 800ddb8:	4637      	mov	r7, r6
 800ddba:	dc04      	bgt.n	800ddc6 <__swbuf_r+0x42>
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	f7ff fce6 	bl	800d790 <_fflush_r>
 800ddc4:	bb30      	cbnz	r0, 800de14 <__swbuf_r+0x90>
 800ddc6:	68a3      	ldr	r3, [r4, #8]
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	60a3      	str	r3, [r4, #8]
 800ddcc:	6823      	ldr	r3, [r4, #0]
 800ddce:	1c5a      	adds	r2, r3, #1
 800ddd0:	6022      	str	r2, [r4, #0]
 800ddd2:	701e      	strb	r6, [r3, #0]
 800ddd4:	6963      	ldr	r3, [r4, #20]
 800ddd6:	3001      	adds	r0, #1
 800ddd8:	4283      	cmp	r3, r0
 800ddda:	d004      	beq.n	800dde6 <__swbuf_r+0x62>
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	07db      	lsls	r3, r3, #31
 800dde0:	d506      	bpl.n	800ddf0 <__swbuf_r+0x6c>
 800dde2:	2e0a      	cmp	r6, #10
 800dde4:	d104      	bne.n	800ddf0 <__swbuf_r+0x6c>
 800dde6:	4621      	mov	r1, r4
 800dde8:	4628      	mov	r0, r5
 800ddea:	f7ff fcd1 	bl	800d790 <_fflush_r>
 800ddee:	b988      	cbnz	r0, 800de14 <__swbuf_r+0x90>
 800ddf0:	4638      	mov	r0, r7
 800ddf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddf4:	4b0a      	ldr	r3, [pc, #40]	; (800de20 <__swbuf_r+0x9c>)
 800ddf6:	429c      	cmp	r4, r3
 800ddf8:	d101      	bne.n	800ddfe <__swbuf_r+0x7a>
 800ddfa:	68ac      	ldr	r4, [r5, #8]
 800ddfc:	e7cf      	b.n	800dd9e <__swbuf_r+0x1a>
 800ddfe:	4b09      	ldr	r3, [pc, #36]	; (800de24 <__swbuf_r+0xa0>)
 800de00:	429c      	cmp	r4, r3
 800de02:	bf08      	it	eq
 800de04:	68ec      	ldreq	r4, [r5, #12]
 800de06:	e7ca      	b.n	800dd9e <__swbuf_r+0x1a>
 800de08:	4621      	mov	r1, r4
 800de0a:	4628      	mov	r0, r5
 800de0c:	f000 f81a 	bl	800de44 <__swsetup_r>
 800de10:	2800      	cmp	r0, #0
 800de12:	d0cb      	beq.n	800ddac <__swbuf_r+0x28>
 800de14:	f04f 37ff 	mov.w	r7, #4294967295
 800de18:	e7ea      	b.n	800ddf0 <__swbuf_r+0x6c>
 800de1a:	bf00      	nop
 800de1c:	0800fafc 	.word	0x0800fafc
 800de20:	0800fb1c 	.word	0x0800fb1c
 800de24:	0800fadc 	.word	0x0800fadc

0800de28 <__ascii_wctomb>:
 800de28:	b149      	cbz	r1, 800de3e <__ascii_wctomb+0x16>
 800de2a:	2aff      	cmp	r2, #255	; 0xff
 800de2c:	bf85      	ittet	hi
 800de2e:	238a      	movhi	r3, #138	; 0x8a
 800de30:	6003      	strhi	r3, [r0, #0]
 800de32:	700a      	strbls	r2, [r1, #0]
 800de34:	f04f 30ff 	movhi.w	r0, #4294967295
 800de38:	bf98      	it	ls
 800de3a:	2001      	movls	r0, #1
 800de3c:	4770      	bx	lr
 800de3e:	4608      	mov	r0, r1
 800de40:	4770      	bx	lr
	...

0800de44 <__swsetup_r>:
 800de44:	4b32      	ldr	r3, [pc, #200]	; (800df10 <__swsetup_r+0xcc>)
 800de46:	b570      	push	{r4, r5, r6, lr}
 800de48:	681d      	ldr	r5, [r3, #0]
 800de4a:	4606      	mov	r6, r0
 800de4c:	460c      	mov	r4, r1
 800de4e:	b125      	cbz	r5, 800de5a <__swsetup_r+0x16>
 800de50:	69ab      	ldr	r3, [r5, #24]
 800de52:	b913      	cbnz	r3, 800de5a <__swsetup_r+0x16>
 800de54:	4628      	mov	r0, r5
 800de56:	f7ff fd2f 	bl	800d8b8 <__sinit>
 800de5a:	4b2e      	ldr	r3, [pc, #184]	; (800df14 <__swsetup_r+0xd0>)
 800de5c:	429c      	cmp	r4, r3
 800de5e:	d10f      	bne.n	800de80 <__swsetup_r+0x3c>
 800de60:	686c      	ldr	r4, [r5, #4]
 800de62:	89a3      	ldrh	r3, [r4, #12]
 800de64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de68:	0719      	lsls	r1, r3, #28
 800de6a:	d42c      	bmi.n	800dec6 <__swsetup_r+0x82>
 800de6c:	06dd      	lsls	r5, r3, #27
 800de6e:	d411      	bmi.n	800de94 <__swsetup_r+0x50>
 800de70:	2309      	movs	r3, #9
 800de72:	6033      	str	r3, [r6, #0]
 800de74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de78:	81a3      	strh	r3, [r4, #12]
 800de7a:	f04f 30ff 	mov.w	r0, #4294967295
 800de7e:	e03e      	b.n	800defe <__swsetup_r+0xba>
 800de80:	4b25      	ldr	r3, [pc, #148]	; (800df18 <__swsetup_r+0xd4>)
 800de82:	429c      	cmp	r4, r3
 800de84:	d101      	bne.n	800de8a <__swsetup_r+0x46>
 800de86:	68ac      	ldr	r4, [r5, #8]
 800de88:	e7eb      	b.n	800de62 <__swsetup_r+0x1e>
 800de8a:	4b24      	ldr	r3, [pc, #144]	; (800df1c <__swsetup_r+0xd8>)
 800de8c:	429c      	cmp	r4, r3
 800de8e:	bf08      	it	eq
 800de90:	68ec      	ldreq	r4, [r5, #12]
 800de92:	e7e6      	b.n	800de62 <__swsetup_r+0x1e>
 800de94:	0758      	lsls	r0, r3, #29
 800de96:	d512      	bpl.n	800debe <__swsetup_r+0x7a>
 800de98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de9a:	b141      	cbz	r1, 800deae <__swsetup_r+0x6a>
 800de9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dea0:	4299      	cmp	r1, r3
 800dea2:	d002      	beq.n	800deaa <__swsetup_r+0x66>
 800dea4:	4630      	mov	r0, r6
 800dea6:	f7fc fd4f 	bl	800a948 <_free_r>
 800deaa:	2300      	movs	r3, #0
 800deac:	6363      	str	r3, [r4, #52]	; 0x34
 800deae:	89a3      	ldrh	r3, [r4, #12]
 800deb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800deb4:	81a3      	strh	r3, [r4, #12]
 800deb6:	2300      	movs	r3, #0
 800deb8:	6063      	str	r3, [r4, #4]
 800deba:	6923      	ldr	r3, [r4, #16]
 800debc:	6023      	str	r3, [r4, #0]
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	f043 0308 	orr.w	r3, r3, #8
 800dec4:	81a3      	strh	r3, [r4, #12]
 800dec6:	6923      	ldr	r3, [r4, #16]
 800dec8:	b94b      	cbnz	r3, 800dede <__swsetup_r+0x9a>
 800deca:	89a3      	ldrh	r3, [r4, #12]
 800decc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ded0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ded4:	d003      	beq.n	800dede <__swsetup_r+0x9a>
 800ded6:	4621      	mov	r1, r4
 800ded8:	4630      	mov	r0, r6
 800deda:	f000 f84d 	bl	800df78 <__smakebuf_r>
 800dede:	89a0      	ldrh	r0, [r4, #12]
 800dee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dee4:	f010 0301 	ands.w	r3, r0, #1
 800dee8:	d00a      	beq.n	800df00 <__swsetup_r+0xbc>
 800deea:	2300      	movs	r3, #0
 800deec:	60a3      	str	r3, [r4, #8]
 800deee:	6963      	ldr	r3, [r4, #20]
 800def0:	425b      	negs	r3, r3
 800def2:	61a3      	str	r3, [r4, #24]
 800def4:	6923      	ldr	r3, [r4, #16]
 800def6:	b943      	cbnz	r3, 800df0a <__swsetup_r+0xc6>
 800def8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800defc:	d1ba      	bne.n	800de74 <__swsetup_r+0x30>
 800defe:	bd70      	pop	{r4, r5, r6, pc}
 800df00:	0781      	lsls	r1, r0, #30
 800df02:	bf58      	it	pl
 800df04:	6963      	ldrpl	r3, [r4, #20]
 800df06:	60a3      	str	r3, [r4, #8]
 800df08:	e7f4      	b.n	800def4 <__swsetup_r+0xb0>
 800df0a:	2000      	movs	r0, #0
 800df0c:	e7f7      	b.n	800defe <__swsetup_r+0xba>
 800df0e:	bf00      	nop
 800df10:	2000029c 	.word	0x2000029c
 800df14:	0800fafc 	.word	0x0800fafc
 800df18:	0800fb1c 	.word	0x0800fb1c
 800df1c:	0800fadc 	.word	0x0800fadc

0800df20 <abort>:
 800df20:	b508      	push	{r3, lr}
 800df22:	2006      	movs	r0, #6
 800df24:	f000 f898 	bl	800e058 <raise>
 800df28:	2001      	movs	r0, #1
 800df2a:	f7f5 ff4d 	bl	8003dc8 <_exit>

0800df2e <__swhatbuf_r>:
 800df2e:	b570      	push	{r4, r5, r6, lr}
 800df30:	460e      	mov	r6, r1
 800df32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df36:	2900      	cmp	r1, #0
 800df38:	b096      	sub	sp, #88	; 0x58
 800df3a:	4614      	mov	r4, r2
 800df3c:	461d      	mov	r5, r3
 800df3e:	da08      	bge.n	800df52 <__swhatbuf_r+0x24>
 800df40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800df44:	2200      	movs	r2, #0
 800df46:	602a      	str	r2, [r5, #0]
 800df48:	061a      	lsls	r2, r3, #24
 800df4a:	d410      	bmi.n	800df6e <__swhatbuf_r+0x40>
 800df4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df50:	e00e      	b.n	800df70 <__swhatbuf_r+0x42>
 800df52:	466a      	mov	r2, sp
 800df54:	f000 f89c 	bl	800e090 <_fstat_r>
 800df58:	2800      	cmp	r0, #0
 800df5a:	dbf1      	blt.n	800df40 <__swhatbuf_r+0x12>
 800df5c:	9a01      	ldr	r2, [sp, #4]
 800df5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df66:	425a      	negs	r2, r3
 800df68:	415a      	adcs	r2, r3
 800df6a:	602a      	str	r2, [r5, #0]
 800df6c:	e7ee      	b.n	800df4c <__swhatbuf_r+0x1e>
 800df6e:	2340      	movs	r3, #64	; 0x40
 800df70:	2000      	movs	r0, #0
 800df72:	6023      	str	r3, [r4, #0]
 800df74:	b016      	add	sp, #88	; 0x58
 800df76:	bd70      	pop	{r4, r5, r6, pc}

0800df78 <__smakebuf_r>:
 800df78:	898b      	ldrh	r3, [r1, #12]
 800df7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df7c:	079d      	lsls	r5, r3, #30
 800df7e:	4606      	mov	r6, r0
 800df80:	460c      	mov	r4, r1
 800df82:	d507      	bpl.n	800df94 <__smakebuf_r+0x1c>
 800df84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df88:	6023      	str	r3, [r4, #0]
 800df8a:	6123      	str	r3, [r4, #16]
 800df8c:	2301      	movs	r3, #1
 800df8e:	6163      	str	r3, [r4, #20]
 800df90:	b002      	add	sp, #8
 800df92:	bd70      	pop	{r4, r5, r6, pc}
 800df94:	ab01      	add	r3, sp, #4
 800df96:	466a      	mov	r2, sp
 800df98:	f7ff ffc9 	bl	800df2e <__swhatbuf_r>
 800df9c:	9900      	ldr	r1, [sp, #0]
 800df9e:	4605      	mov	r5, r0
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f7fc fd3d 	bl	800aa20 <_malloc_r>
 800dfa6:	b948      	cbnz	r0, 800dfbc <__smakebuf_r+0x44>
 800dfa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfac:	059a      	lsls	r2, r3, #22
 800dfae:	d4ef      	bmi.n	800df90 <__smakebuf_r+0x18>
 800dfb0:	f023 0303 	bic.w	r3, r3, #3
 800dfb4:	f043 0302 	orr.w	r3, r3, #2
 800dfb8:	81a3      	strh	r3, [r4, #12]
 800dfba:	e7e3      	b.n	800df84 <__smakebuf_r+0xc>
 800dfbc:	4b0d      	ldr	r3, [pc, #52]	; (800dff4 <__smakebuf_r+0x7c>)
 800dfbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	6020      	str	r0, [r4, #0]
 800dfc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfc8:	81a3      	strh	r3, [r4, #12]
 800dfca:	9b00      	ldr	r3, [sp, #0]
 800dfcc:	6163      	str	r3, [r4, #20]
 800dfce:	9b01      	ldr	r3, [sp, #4]
 800dfd0:	6120      	str	r0, [r4, #16]
 800dfd2:	b15b      	cbz	r3, 800dfec <__smakebuf_r+0x74>
 800dfd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfd8:	4630      	mov	r0, r6
 800dfda:	f000 f86b 	bl	800e0b4 <_isatty_r>
 800dfde:	b128      	cbz	r0, 800dfec <__smakebuf_r+0x74>
 800dfe0:	89a3      	ldrh	r3, [r4, #12]
 800dfe2:	f023 0303 	bic.w	r3, r3, #3
 800dfe6:	f043 0301 	orr.w	r3, r3, #1
 800dfea:	81a3      	strh	r3, [r4, #12]
 800dfec:	89a0      	ldrh	r0, [r4, #12]
 800dfee:	4305      	orrs	r5, r0
 800dff0:	81a5      	strh	r5, [r4, #12]
 800dff2:	e7cd      	b.n	800df90 <__smakebuf_r+0x18>
 800dff4:	0800d851 	.word	0x0800d851

0800dff8 <_malloc_usable_size_r>:
 800dff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dffc:	1f18      	subs	r0, r3, #4
 800dffe:	2b00      	cmp	r3, #0
 800e000:	bfbc      	itt	lt
 800e002:	580b      	ldrlt	r3, [r1, r0]
 800e004:	18c0      	addlt	r0, r0, r3
 800e006:	4770      	bx	lr

0800e008 <_raise_r>:
 800e008:	291f      	cmp	r1, #31
 800e00a:	b538      	push	{r3, r4, r5, lr}
 800e00c:	4604      	mov	r4, r0
 800e00e:	460d      	mov	r5, r1
 800e010:	d904      	bls.n	800e01c <_raise_r+0x14>
 800e012:	2316      	movs	r3, #22
 800e014:	6003      	str	r3, [r0, #0]
 800e016:	f04f 30ff 	mov.w	r0, #4294967295
 800e01a:	bd38      	pop	{r3, r4, r5, pc}
 800e01c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e01e:	b112      	cbz	r2, 800e026 <_raise_r+0x1e>
 800e020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e024:	b94b      	cbnz	r3, 800e03a <_raise_r+0x32>
 800e026:	4620      	mov	r0, r4
 800e028:	f000 f830 	bl	800e08c <_getpid_r>
 800e02c:	462a      	mov	r2, r5
 800e02e:	4601      	mov	r1, r0
 800e030:	4620      	mov	r0, r4
 800e032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e036:	f000 b817 	b.w	800e068 <_kill_r>
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d00a      	beq.n	800e054 <_raise_r+0x4c>
 800e03e:	1c59      	adds	r1, r3, #1
 800e040:	d103      	bne.n	800e04a <_raise_r+0x42>
 800e042:	2316      	movs	r3, #22
 800e044:	6003      	str	r3, [r0, #0]
 800e046:	2001      	movs	r0, #1
 800e048:	e7e7      	b.n	800e01a <_raise_r+0x12>
 800e04a:	2400      	movs	r4, #0
 800e04c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e050:	4628      	mov	r0, r5
 800e052:	4798      	blx	r3
 800e054:	2000      	movs	r0, #0
 800e056:	e7e0      	b.n	800e01a <_raise_r+0x12>

0800e058 <raise>:
 800e058:	4b02      	ldr	r3, [pc, #8]	; (800e064 <raise+0xc>)
 800e05a:	4601      	mov	r1, r0
 800e05c:	6818      	ldr	r0, [r3, #0]
 800e05e:	f7ff bfd3 	b.w	800e008 <_raise_r>
 800e062:	bf00      	nop
 800e064:	2000029c 	.word	0x2000029c

0800e068 <_kill_r>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4d07      	ldr	r5, [pc, #28]	; (800e088 <_kill_r+0x20>)
 800e06c:	2300      	movs	r3, #0
 800e06e:	4604      	mov	r4, r0
 800e070:	4608      	mov	r0, r1
 800e072:	4611      	mov	r1, r2
 800e074:	602b      	str	r3, [r5, #0]
 800e076:	f7f5 fe97 	bl	8003da8 <_kill>
 800e07a:	1c43      	adds	r3, r0, #1
 800e07c:	d102      	bne.n	800e084 <_kill_r+0x1c>
 800e07e:	682b      	ldr	r3, [r5, #0]
 800e080:	b103      	cbz	r3, 800e084 <_kill_r+0x1c>
 800e082:	6023      	str	r3, [r4, #0]
 800e084:	bd38      	pop	{r3, r4, r5, pc}
 800e086:	bf00      	nop
 800e088:	20000b34 	.word	0x20000b34

0800e08c <_getpid_r>:
 800e08c:	f7f5 be84 	b.w	8003d98 <_getpid>

0800e090 <_fstat_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4d07      	ldr	r5, [pc, #28]	; (800e0b0 <_fstat_r+0x20>)
 800e094:	2300      	movs	r3, #0
 800e096:	4604      	mov	r4, r0
 800e098:	4608      	mov	r0, r1
 800e09a:	4611      	mov	r1, r2
 800e09c:	602b      	str	r3, [r5, #0]
 800e09e:	f7f5 fee2 	bl	8003e66 <_fstat>
 800e0a2:	1c43      	adds	r3, r0, #1
 800e0a4:	d102      	bne.n	800e0ac <_fstat_r+0x1c>
 800e0a6:	682b      	ldr	r3, [r5, #0]
 800e0a8:	b103      	cbz	r3, 800e0ac <_fstat_r+0x1c>
 800e0aa:	6023      	str	r3, [r4, #0]
 800e0ac:	bd38      	pop	{r3, r4, r5, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20000b34 	.word	0x20000b34

0800e0b4 <_isatty_r>:
 800e0b4:	b538      	push	{r3, r4, r5, lr}
 800e0b6:	4d06      	ldr	r5, [pc, #24]	; (800e0d0 <_isatty_r+0x1c>)
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	4608      	mov	r0, r1
 800e0be:	602b      	str	r3, [r5, #0]
 800e0c0:	f7f5 fee1 	bl	8003e86 <_isatty>
 800e0c4:	1c43      	adds	r3, r0, #1
 800e0c6:	d102      	bne.n	800e0ce <_isatty_r+0x1a>
 800e0c8:	682b      	ldr	r3, [r5, #0]
 800e0ca:	b103      	cbz	r3, 800e0ce <_isatty_r+0x1a>
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	bd38      	pop	{r3, r4, r5, pc}
 800e0d0:	20000b34 	.word	0x20000b34
 800e0d4:	00000000 	.word	0x00000000

0800e0d8 <atan>:
 800e0d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0dc:	ec55 4b10 	vmov	r4, r5, d0
 800e0e0:	4bc3      	ldr	r3, [pc, #780]	; (800e3f0 <atan+0x318>)
 800e0e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e0e6:	429e      	cmp	r6, r3
 800e0e8:	46ab      	mov	fp, r5
 800e0ea:	dd18      	ble.n	800e11e <atan+0x46>
 800e0ec:	4bc1      	ldr	r3, [pc, #772]	; (800e3f4 <atan+0x31c>)
 800e0ee:	429e      	cmp	r6, r3
 800e0f0:	dc01      	bgt.n	800e0f6 <atan+0x1e>
 800e0f2:	d109      	bne.n	800e108 <atan+0x30>
 800e0f4:	b144      	cbz	r4, 800e108 <atan+0x30>
 800e0f6:	4622      	mov	r2, r4
 800e0f8:	462b      	mov	r3, r5
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	f7f2 f8dd 	bl	80002bc <__adddf3>
 800e102:	4604      	mov	r4, r0
 800e104:	460d      	mov	r5, r1
 800e106:	e006      	b.n	800e116 <atan+0x3e>
 800e108:	f1bb 0f00 	cmp.w	fp, #0
 800e10c:	f300 8131 	bgt.w	800e372 <atan+0x29a>
 800e110:	a59b      	add	r5, pc, #620	; (adr r5, 800e380 <atan+0x2a8>)
 800e112:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e116:	ec45 4b10 	vmov	d0, r4, r5
 800e11a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e11e:	4bb6      	ldr	r3, [pc, #728]	; (800e3f8 <atan+0x320>)
 800e120:	429e      	cmp	r6, r3
 800e122:	dc14      	bgt.n	800e14e <atan+0x76>
 800e124:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e128:	429e      	cmp	r6, r3
 800e12a:	dc0d      	bgt.n	800e148 <atan+0x70>
 800e12c:	a396      	add	r3, pc, #600	; (adr r3, 800e388 <atan+0x2b0>)
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	ee10 0a10 	vmov	r0, s0
 800e136:	4629      	mov	r1, r5
 800e138:	f7f2 f8c0 	bl	80002bc <__adddf3>
 800e13c:	4baf      	ldr	r3, [pc, #700]	; (800e3fc <atan+0x324>)
 800e13e:	2200      	movs	r2, #0
 800e140:	f7f2 fd02 	bl	8000b48 <__aeabi_dcmpgt>
 800e144:	2800      	cmp	r0, #0
 800e146:	d1e6      	bne.n	800e116 <atan+0x3e>
 800e148:	f04f 3aff 	mov.w	sl, #4294967295
 800e14c:	e02b      	b.n	800e1a6 <atan+0xce>
 800e14e:	f000 f963 	bl	800e418 <fabs>
 800e152:	4bab      	ldr	r3, [pc, #684]	; (800e400 <atan+0x328>)
 800e154:	429e      	cmp	r6, r3
 800e156:	ec55 4b10 	vmov	r4, r5, d0
 800e15a:	f300 80bf 	bgt.w	800e2dc <atan+0x204>
 800e15e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e162:	429e      	cmp	r6, r3
 800e164:	f300 80a0 	bgt.w	800e2a8 <atan+0x1d0>
 800e168:	ee10 2a10 	vmov	r2, s0
 800e16c:	ee10 0a10 	vmov	r0, s0
 800e170:	462b      	mov	r3, r5
 800e172:	4629      	mov	r1, r5
 800e174:	f7f2 f8a2 	bl	80002bc <__adddf3>
 800e178:	4ba0      	ldr	r3, [pc, #640]	; (800e3fc <atan+0x324>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	f7f2 f89c 	bl	80002b8 <__aeabi_dsub>
 800e180:	2200      	movs	r2, #0
 800e182:	4606      	mov	r6, r0
 800e184:	460f      	mov	r7, r1
 800e186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e18a:	4620      	mov	r0, r4
 800e18c:	4629      	mov	r1, r5
 800e18e:	f7f2 f895 	bl	80002bc <__adddf3>
 800e192:	4602      	mov	r2, r0
 800e194:	460b      	mov	r3, r1
 800e196:	4630      	mov	r0, r6
 800e198:	4639      	mov	r1, r7
 800e19a:	f7f2 fb6f 	bl	800087c <__aeabi_ddiv>
 800e19e:	f04f 0a00 	mov.w	sl, #0
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	460d      	mov	r5, r1
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	462b      	mov	r3, r5
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	4629      	mov	r1, r5
 800e1ae:	f7f2 fa3b 	bl	8000628 <__aeabi_dmul>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	4680      	mov	r8, r0
 800e1b8:	4689      	mov	r9, r1
 800e1ba:	f7f2 fa35 	bl	8000628 <__aeabi_dmul>
 800e1be:	a374      	add	r3, pc, #464	; (adr r3, 800e390 <atan+0x2b8>)
 800e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	460f      	mov	r7, r1
 800e1c8:	f7f2 fa2e 	bl	8000628 <__aeabi_dmul>
 800e1cc:	a372      	add	r3, pc, #456	; (adr r3, 800e398 <atan+0x2c0>)
 800e1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d2:	f7f2 f873 	bl	80002bc <__adddf3>
 800e1d6:	4632      	mov	r2, r6
 800e1d8:	463b      	mov	r3, r7
 800e1da:	f7f2 fa25 	bl	8000628 <__aeabi_dmul>
 800e1de:	a370      	add	r3, pc, #448	; (adr r3, 800e3a0 <atan+0x2c8>)
 800e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e4:	f7f2 f86a 	bl	80002bc <__adddf3>
 800e1e8:	4632      	mov	r2, r6
 800e1ea:	463b      	mov	r3, r7
 800e1ec:	f7f2 fa1c 	bl	8000628 <__aeabi_dmul>
 800e1f0:	a36d      	add	r3, pc, #436	; (adr r3, 800e3a8 <atan+0x2d0>)
 800e1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f6:	f7f2 f861 	bl	80002bc <__adddf3>
 800e1fa:	4632      	mov	r2, r6
 800e1fc:	463b      	mov	r3, r7
 800e1fe:	f7f2 fa13 	bl	8000628 <__aeabi_dmul>
 800e202:	a36b      	add	r3, pc, #428	; (adr r3, 800e3b0 <atan+0x2d8>)
 800e204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e208:	f7f2 f858 	bl	80002bc <__adddf3>
 800e20c:	4632      	mov	r2, r6
 800e20e:	463b      	mov	r3, r7
 800e210:	f7f2 fa0a 	bl	8000628 <__aeabi_dmul>
 800e214:	a368      	add	r3, pc, #416	; (adr r3, 800e3b8 <atan+0x2e0>)
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	f7f2 f84f 	bl	80002bc <__adddf3>
 800e21e:	4642      	mov	r2, r8
 800e220:	464b      	mov	r3, r9
 800e222:	f7f2 fa01 	bl	8000628 <__aeabi_dmul>
 800e226:	a366      	add	r3, pc, #408	; (adr r3, 800e3c0 <atan+0x2e8>)
 800e228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22c:	4680      	mov	r8, r0
 800e22e:	4689      	mov	r9, r1
 800e230:	4630      	mov	r0, r6
 800e232:	4639      	mov	r1, r7
 800e234:	f7f2 f9f8 	bl	8000628 <__aeabi_dmul>
 800e238:	a363      	add	r3, pc, #396	; (adr r3, 800e3c8 <atan+0x2f0>)
 800e23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23e:	f7f2 f83b 	bl	80002b8 <__aeabi_dsub>
 800e242:	4632      	mov	r2, r6
 800e244:	463b      	mov	r3, r7
 800e246:	f7f2 f9ef 	bl	8000628 <__aeabi_dmul>
 800e24a:	a361      	add	r3, pc, #388	; (adr r3, 800e3d0 <atan+0x2f8>)
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	f7f2 f832 	bl	80002b8 <__aeabi_dsub>
 800e254:	4632      	mov	r2, r6
 800e256:	463b      	mov	r3, r7
 800e258:	f7f2 f9e6 	bl	8000628 <__aeabi_dmul>
 800e25c:	a35e      	add	r3, pc, #376	; (adr r3, 800e3d8 <atan+0x300>)
 800e25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e262:	f7f2 f829 	bl	80002b8 <__aeabi_dsub>
 800e266:	4632      	mov	r2, r6
 800e268:	463b      	mov	r3, r7
 800e26a:	f7f2 f9dd 	bl	8000628 <__aeabi_dmul>
 800e26e:	a35c      	add	r3, pc, #368	; (adr r3, 800e3e0 <atan+0x308>)
 800e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e274:	f7f2 f820 	bl	80002b8 <__aeabi_dsub>
 800e278:	4632      	mov	r2, r6
 800e27a:	463b      	mov	r3, r7
 800e27c:	f7f2 f9d4 	bl	8000628 <__aeabi_dmul>
 800e280:	4602      	mov	r2, r0
 800e282:	460b      	mov	r3, r1
 800e284:	4640      	mov	r0, r8
 800e286:	4649      	mov	r1, r9
 800e288:	f7f2 f818 	bl	80002bc <__adddf3>
 800e28c:	4622      	mov	r2, r4
 800e28e:	462b      	mov	r3, r5
 800e290:	f7f2 f9ca 	bl	8000628 <__aeabi_dmul>
 800e294:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e298:	4602      	mov	r2, r0
 800e29a:	460b      	mov	r3, r1
 800e29c:	d14b      	bne.n	800e336 <atan+0x25e>
 800e29e:	4620      	mov	r0, r4
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	f7f2 f809 	bl	80002b8 <__aeabi_dsub>
 800e2a6:	e72c      	b.n	800e102 <atan+0x2a>
 800e2a8:	ee10 0a10 	vmov	r0, s0
 800e2ac:	4b53      	ldr	r3, [pc, #332]	; (800e3fc <atan+0x324>)
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	4629      	mov	r1, r5
 800e2b2:	f7f2 f801 	bl	80002b8 <__aeabi_dsub>
 800e2b6:	4b51      	ldr	r3, [pc, #324]	; (800e3fc <atan+0x324>)
 800e2b8:	4606      	mov	r6, r0
 800e2ba:	460f      	mov	r7, r1
 800e2bc:	2200      	movs	r2, #0
 800e2be:	4620      	mov	r0, r4
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	f7f1 fffb 	bl	80002bc <__adddf3>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	4639      	mov	r1, r7
 800e2ce:	f7f2 fad5 	bl	800087c <__aeabi_ddiv>
 800e2d2:	f04f 0a01 	mov.w	sl, #1
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	460d      	mov	r5, r1
 800e2da:	e764      	b.n	800e1a6 <atan+0xce>
 800e2dc:	4b49      	ldr	r3, [pc, #292]	; (800e404 <atan+0x32c>)
 800e2de:	429e      	cmp	r6, r3
 800e2e0:	da1d      	bge.n	800e31e <atan+0x246>
 800e2e2:	ee10 0a10 	vmov	r0, s0
 800e2e6:	4b48      	ldr	r3, [pc, #288]	; (800e408 <atan+0x330>)
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	4629      	mov	r1, r5
 800e2ec:	f7f1 ffe4 	bl	80002b8 <__aeabi_dsub>
 800e2f0:	4b45      	ldr	r3, [pc, #276]	; (800e408 <atan+0x330>)
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	460f      	mov	r7, r1
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	f7f2 f994 	bl	8000628 <__aeabi_dmul>
 800e300:	4b3e      	ldr	r3, [pc, #248]	; (800e3fc <atan+0x324>)
 800e302:	2200      	movs	r2, #0
 800e304:	f7f1 ffda 	bl	80002bc <__adddf3>
 800e308:	4602      	mov	r2, r0
 800e30a:	460b      	mov	r3, r1
 800e30c:	4630      	mov	r0, r6
 800e30e:	4639      	mov	r1, r7
 800e310:	f7f2 fab4 	bl	800087c <__aeabi_ddiv>
 800e314:	f04f 0a02 	mov.w	sl, #2
 800e318:	4604      	mov	r4, r0
 800e31a:	460d      	mov	r5, r1
 800e31c:	e743      	b.n	800e1a6 <atan+0xce>
 800e31e:	462b      	mov	r3, r5
 800e320:	ee10 2a10 	vmov	r2, s0
 800e324:	4939      	ldr	r1, [pc, #228]	; (800e40c <atan+0x334>)
 800e326:	2000      	movs	r0, #0
 800e328:	f7f2 faa8 	bl	800087c <__aeabi_ddiv>
 800e32c:	f04f 0a03 	mov.w	sl, #3
 800e330:	4604      	mov	r4, r0
 800e332:	460d      	mov	r5, r1
 800e334:	e737      	b.n	800e1a6 <atan+0xce>
 800e336:	4b36      	ldr	r3, [pc, #216]	; (800e410 <atan+0x338>)
 800e338:	4e36      	ldr	r6, [pc, #216]	; (800e414 <atan+0x33c>)
 800e33a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e33e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e342:	e9da 2300 	ldrd	r2, r3, [sl]
 800e346:	f7f1 ffb7 	bl	80002b8 <__aeabi_dsub>
 800e34a:	4622      	mov	r2, r4
 800e34c:	462b      	mov	r3, r5
 800e34e:	f7f1 ffb3 	bl	80002b8 <__aeabi_dsub>
 800e352:	4602      	mov	r2, r0
 800e354:	460b      	mov	r3, r1
 800e356:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e35a:	f7f1 ffad 	bl	80002b8 <__aeabi_dsub>
 800e35e:	f1bb 0f00 	cmp.w	fp, #0
 800e362:	4604      	mov	r4, r0
 800e364:	460d      	mov	r5, r1
 800e366:	f6bf aed6 	bge.w	800e116 <atan+0x3e>
 800e36a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e36e:	461d      	mov	r5, r3
 800e370:	e6d1      	b.n	800e116 <atan+0x3e>
 800e372:	a51d      	add	r5, pc, #116	; (adr r5, 800e3e8 <atan+0x310>)
 800e374:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e378:	e6cd      	b.n	800e116 <atan+0x3e>
 800e37a:	bf00      	nop
 800e37c:	f3af 8000 	nop.w
 800e380:	54442d18 	.word	0x54442d18
 800e384:	bff921fb 	.word	0xbff921fb
 800e388:	8800759c 	.word	0x8800759c
 800e38c:	7e37e43c 	.word	0x7e37e43c
 800e390:	e322da11 	.word	0xe322da11
 800e394:	3f90ad3a 	.word	0x3f90ad3a
 800e398:	24760deb 	.word	0x24760deb
 800e39c:	3fa97b4b 	.word	0x3fa97b4b
 800e3a0:	a0d03d51 	.word	0xa0d03d51
 800e3a4:	3fb10d66 	.word	0x3fb10d66
 800e3a8:	c54c206e 	.word	0xc54c206e
 800e3ac:	3fb745cd 	.word	0x3fb745cd
 800e3b0:	920083ff 	.word	0x920083ff
 800e3b4:	3fc24924 	.word	0x3fc24924
 800e3b8:	5555550d 	.word	0x5555550d
 800e3bc:	3fd55555 	.word	0x3fd55555
 800e3c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800e3c4:	bfa2b444 	.word	0xbfa2b444
 800e3c8:	52defd9a 	.word	0x52defd9a
 800e3cc:	3fadde2d 	.word	0x3fadde2d
 800e3d0:	af749a6d 	.word	0xaf749a6d
 800e3d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800e3d8:	fe231671 	.word	0xfe231671
 800e3dc:	3fbc71c6 	.word	0x3fbc71c6
 800e3e0:	9998ebc4 	.word	0x9998ebc4
 800e3e4:	3fc99999 	.word	0x3fc99999
 800e3e8:	54442d18 	.word	0x54442d18
 800e3ec:	3ff921fb 	.word	0x3ff921fb
 800e3f0:	440fffff 	.word	0x440fffff
 800e3f4:	7ff00000 	.word	0x7ff00000
 800e3f8:	3fdbffff 	.word	0x3fdbffff
 800e3fc:	3ff00000 	.word	0x3ff00000
 800e400:	3ff2ffff 	.word	0x3ff2ffff
 800e404:	40038000 	.word	0x40038000
 800e408:	3ff80000 	.word	0x3ff80000
 800e40c:	bff00000 	.word	0xbff00000
 800e410:	0800fb68 	.word	0x0800fb68
 800e414:	0800fb48 	.word	0x0800fb48

0800e418 <fabs>:
 800e418:	ec51 0b10 	vmov	r0, r1, d0
 800e41c:	ee10 2a10 	vmov	r2, s0
 800e420:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e424:	ec43 2b10 	vmov	d0, r2, r3
 800e428:	4770      	bx	lr

0800e42a <atan2>:
 800e42a:	f000 b82d 	b.w	800e488 <__ieee754_atan2>

0800e42e <sqrt>:
 800e42e:	b538      	push	{r3, r4, r5, lr}
 800e430:	ed2d 8b02 	vpush	{d8}
 800e434:	ec55 4b10 	vmov	r4, r5, d0
 800e438:	f000 f8f0 	bl	800e61c <__ieee754_sqrt>
 800e43c:	4622      	mov	r2, r4
 800e43e:	462b      	mov	r3, r5
 800e440:	4620      	mov	r0, r4
 800e442:	4629      	mov	r1, r5
 800e444:	eeb0 8a40 	vmov.f32	s16, s0
 800e448:	eef0 8a60 	vmov.f32	s17, s1
 800e44c:	f7f2 fb86 	bl	8000b5c <__aeabi_dcmpun>
 800e450:	b990      	cbnz	r0, 800e478 <sqrt+0x4a>
 800e452:	2200      	movs	r2, #0
 800e454:	2300      	movs	r3, #0
 800e456:	4620      	mov	r0, r4
 800e458:	4629      	mov	r1, r5
 800e45a:	f7f2 fb57 	bl	8000b0c <__aeabi_dcmplt>
 800e45e:	b158      	cbz	r0, 800e478 <sqrt+0x4a>
 800e460:	f7fc fa30 	bl	800a8c4 <__errno>
 800e464:	2321      	movs	r3, #33	; 0x21
 800e466:	6003      	str	r3, [r0, #0]
 800e468:	2200      	movs	r2, #0
 800e46a:	2300      	movs	r3, #0
 800e46c:	4610      	mov	r0, r2
 800e46e:	4619      	mov	r1, r3
 800e470:	f7f2 fa04 	bl	800087c <__aeabi_ddiv>
 800e474:	ec41 0b18 	vmov	d8, r0, r1
 800e478:	eeb0 0a48 	vmov.f32	s0, s16
 800e47c:	eef0 0a68 	vmov.f32	s1, s17
 800e480:	ecbd 8b02 	vpop	{d8}
 800e484:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e488 <__ieee754_atan2>:
 800e488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e48c:	ec57 6b11 	vmov	r6, r7, d1
 800e490:	4273      	negs	r3, r6
 800e492:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e618 <__ieee754_atan2+0x190>
 800e496:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e49a:	4333      	orrs	r3, r6
 800e49c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e4a0:	4573      	cmp	r3, lr
 800e4a2:	ec51 0b10 	vmov	r0, r1, d0
 800e4a6:	ee11 8a10 	vmov	r8, s2
 800e4aa:	d80a      	bhi.n	800e4c2 <__ieee754_atan2+0x3a>
 800e4ac:	4244      	negs	r4, r0
 800e4ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4b2:	4304      	orrs	r4, r0
 800e4b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e4b8:	4574      	cmp	r4, lr
 800e4ba:	ee10 9a10 	vmov	r9, s0
 800e4be:	468c      	mov	ip, r1
 800e4c0:	d907      	bls.n	800e4d2 <__ieee754_atan2+0x4a>
 800e4c2:	4632      	mov	r2, r6
 800e4c4:	463b      	mov	r3, r7
 800e4c6:	f7f1 fef9 	bl	80002bc <__adddf3>
 800e4ca:	ec41 0b10 	vmov	d0, r0, r1
 800e4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e4d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e4da:	4334      	orrs	r4, r6
 800e4dc:	d103      	bne.n	800e4e6 <__ieee754_atan2+0x5e>
 800e4de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4e2:	f7ff bdf9 	b.w	800e0d8 <atan>
 800e4e6:	17bc      	asrs	r4, r7, #30
 800e4e8:	f004 0402 	and.w	r4, r4, #2
 800e4ec:	ea53 0909 	orrs.w	r9, r3, r9
 800e4f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e4f4:	d107      	bne.n	800e506 <__ieee754_atan2+0x7e>
 800e4f6:	2c02      	cmp	r4, #2
 800e4f8:	d060      	beq.n	800e5bc <__ieee754_atan2+0x134>
 800e4fa:	2c03      	cmp	r4, #3
 800e4fc:	d1e5      	bne.n	800e4ca <__ieee754_atan2+0x42>
 800e4fe:	a142      	add	r1, pc, #264	; (adr r1, 800e608 <__ieee754_atan2+0x180>)
 800e500:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e504:	e7e1      	b.n	800e4ca <__ieee754_atan2+0x42>
 800e506:	ea52 0808 	orrs.w	r8, r2, r8
 800e50a:	d106      	bne.n	800e51a <__ieee754_atan2+0x92>
 800e50c:	f1bc 0f00 	cmp.w	ip, #0
 800e510:	da5f      	bge.n	800e5d2 <__ieee754_atan2+0x14a>
 800e512:	a13f      	add	r1, pc, #252	; (adr r1, 800e610 <__ieee754_atan2+0x188>)
 800e514:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e518:	e7d7      	b.n	800e4ca <__ieee754_atan2+0x42>
 800e51a:	4572      	cmp	r2, lr
 800e51c:	d10f      	bne.n	800e53e <__ieee754_atan2+0xb6>
 800e51e:	4293      	cmp	r3, r2
 800e520:	f104 34ff 	add.w	r4, r4, #4294967295
 800e524:	d107      	bne.n	800e536 <__ieee754_atan2+0xae>
 800e526:	2c02      	cmp	r4, #2
 800e528:	d84c      	bhi.n	800e5c4 <__ieee754_atan2+0x13c>
 800e52a:	4b35      	ldr	r3, [pc, #212]	; (800e600 <__ieee754_atan2+0x178>)
 800e52c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e530:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e534:	e7c9      	b.n	800e4ca <__ieee754_atan2+0x42>
 800e536:	2c02      	cmp	r4, #2
 800e538:	d848      	bhi.n	800e5cc <__ieee754_atan2+0x144>
 800e53a:	4b32      	ldr	r3, [pc, #200]	; (800e604 <__ieee754_atan2+0x17c>)
 800e53c:	e7f6      	b.n	800e52c <__ieee754_atan2+0xa4>
 800e53e:	4573      	cmp	r3, lr
 800e540:	d0e4      	beq.n	800e50c <__ieee754_atan2+0x84>
 800e542:	1a9b      	subs	r3, r3, r2
 800e544:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e548:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e54c:	da1e      	bge.n	800e58c <__ieee754_atan2+0x104>
 800e54e:	2f00      	cmp	r7, #0
 800e550:	da01      	bge.n	800e556 <__ieee754_atan2+0xce>
 800e552:	323c      	adds	r2, #60	; 0x3c
 800e554:	db1e      	blt.n	800e594 <__ieee754_atan2+0x10c>
 800e556:	4632      	mov	r2, r6
 800e558:	463b      	mov	r3, r7
 800e55a:	f7f2 f98f 	bl	800087c <__aeabi_ddiv>
 800e55e:	ec41 0b10 	vmov	d0, r0, r1
 800e562:	f7ff ff59 	bl	800e418 <fabs>
 800e566:	f7ff fdb7 	bl	800e0d8 <atan>
 800e56a:	ec51 0b10 	vmov	r0, r1, d0
 800e56e:	2c01      	cmp	r4, #1
 800e570:	d013      	beq.n	800e59a <__ieee754_atan2+0x112>
 800e572:	2c02      	cmp	r4, #2
 800e574:	d015      	beq.n	800e5a2 <__ieee754_atan2+0x11a>
 800e576:	2c00      	cmp	r4, #0
 800e578:	d0a7      	beq.n	800e4ca <__ieee754_atan2+0x42>
 800e57a:	a319      	add	r3, pc, #100	; (adr r3, 800e5e0 <__ieee754_atan2+0x158>)
 800e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e580:	f7f1 fe9a 	bl	80002b8 <__aeabi_dsub>
 800e584:	a318      	add	r3, pc, #96	; (adr r3, 800e5e8 <__ieee754_atan2+0x160>)
 800e586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58a:	e014      	b.n	800e5b6 <__ieee754_atan2+0x12e>
 800e58c:	a118      	add	r1, pc, #96	; (adr r1, 800e5f0 <__ieee754_atan2+0x168>)
 800e58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e592:	e7ec      	b.n	800e56e <__ieee754_atan2+0xe6>
 800e594:	2000      	movs	r0, #0
 800e596:	2100      	movs	r1, #0
 800e598:	e7e9      	b.n	800e56e <__ieee754_atan2+0xe6>
 800e59a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e59e:	4619      	mov	r1, r3
 800e5a0:	e793      	b.n	800e4ca <__ieee754_atan2+0x42>
 800e5a2:	a30f      	add	r3, pc, #60	; (adr r3, 800e5e0 <__ieee754_atan2+0x158>)
 800e5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a8:	f7f1 fe86 	bl	80002b8 <__aeabi_dsub>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	a10d      	add	r1, pc, #52	; (adr r1, 800e5e8 <__ieee754_atan2+0x160>)
 800e5b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5b6:	f7f1 fe7f 	bl	80002b8 <__aeabi_dsub>
 800e5ba:	e786      	b.n	800e4ca <__ieee754_atan2+0x42>
 800e5bc:	a10a      	add	r1, pc, #40	; (adr r1, 800e5e8 <__ieee754_atan2+0x160>)
 800e5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5c2:	e782      	b.n	800e4ca <__ieee754_atan2+0x42>
 800e5c4:	a10c      	add	r1, pc, #48	; (adr r1, 800e5f8 <__ieee754_atan2+0x170>)
 800e5c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ca:	e77e      	b.n	800e4ca <__ieee754_atan2+0x42>
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	e77b      	b.n	800e4ca <__ieee754_atan2+0x42>
 800e5d2:	a107      	add	r1, pc, #28	; (adr r1, 800e5f0 <__ieee754_atan2+0x168>)
 800e5d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5d8:	e777      	b.n	800e4ca <__ieee754_atan2+0x42>
 800e5da:	bf00      	nop
 800e5dc:	f3af 8000 	nop.w
 800e5e0:	33145c07 	.word	0x33145c07
 800e5e4:	3ca1a626 	.word	0x3ca1a626
 800e5e8:	54442d18 	.word	0x54442d18
 800e5ec:	400921fb 	.word	0x400921fb
 800e5f0:	54442d18 	.word	0x54442d18
 800e5f4:	3ff921fb 	.word	0x3ff921fb
 800e5f8:	54442d18 	.word	0x54442d18
 800e5fc:	3fe921fb 	.word	0x3fe921fb
 800e600:	0800fb88 	.word	0x0800fb88
 800e604:	0800fba0 	.word	0x0800fba0
 800e608:	54442d18 	.word	0x54442d18
 800e60c:	c00921fb 	.word	0xc00921fb
 800e610:	54442d18 	.word	0x54442d18
 800e614:	bff921fb 	.word	0xbff921fb
 800e618:	7ff00000 	.word	0x7ff00000

0800e61c <__ieee754_sqrt>:
 800e61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e620:	ec55 4b10 	vmov	r4, r5, d0
 800e624:	4e55      	ldr	r6, [pc, #340]	; (800e77c <__ieee754_sqrt+0x160>)
 800e626:	43ae      	bics	r6, r5
 800e628:	ee10 0a10 	vmov	r0, s0
 800e62c:	ee10 3a10 	vmov	r3, s0
 800e630:	462a      	mov	r2, r5
 800e632:	4629      	mov	r1, r5
 800e634:	d110      	bne.n	800e658 <__ieee754_sqrt+0x3c>
 800e636:	ee10 2a10 	vmov	r2, s0
 800e63a:	462b      	mov	r3, r5
 800e63c:	f7f1 fff4 	bl	8000628 <__aeabi_dmul>
 800e640:	4602      	mov	r2, r0
 800e642:	460b      	mov	r3, r1
 800e644:	4620      	mov	r0, r4
 800e646:	4629      	mov	r1, r5
 800e648:	f7f1 fe38 	bl	80002bc <__adddf3>
 800e64c:	4604      	mov	r4, r0
 800e64e:	460d      	mov	r5, r1
 800e650:	ec45 4b10 	vmov	d0, r4, r5
 800e654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e658:	2d00      	cmp	r5, #0
 800e65a:	dc10      	bgt.n	800e67e <__ieee754_sqrt+0x62>
 800e65c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e660:	4330      	orrs	r0, r6
 800e662:	d0f5      	beq.n	800e650 <__ieee754_sqrt+0x34>
 800e664:	b15d      	cbz	r5, 800e67e <__ieee754_sqrt+0x62>
 800e666:	ee10 2a10 	vmov	r2, s0
 800e66a:	462b      	mov	r3, r5
 800e66c:	ee10 0a10 	vmov	r0, s0
 800e670:	f7f1 fe22 	bl	80002b8 <__aeabi_dsub>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	f7f2 f900 	bl	800087c <__aeabi_ddiv>
 800e67c:	e7e6      	b.n	800e64c <__ieee754_sqrt+0x30>
 800e67e:	1512      	asrs	r2, r2, #20
 800e680:	d074      	beq.n	800e76c <__ieee754_sqrt+0x150>
 800e682:	07d4      	lsls	r4, r2, #31
 800e684:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e688:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e68c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e690:	bf5e      	ittt	pl
 800e692:	0fda      	lsrpl	r2, r3, #31
 800e694:	005b      	lslpl	r3, r3, #1
 800e696:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e69a:	2400      	movs	r4, #0
 800e69c:	0fda      	lsrs	r2, r3, #31
 800e69e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e6a2:	107f      	asrs	r7, r7, #1
 800e6a4:	005b      	lsls	r3, r3, #1
 800e6a6:	2516      	movs	r5, #22
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e6ae:	1886      	adds	r6, r0, r2
 800e6b0:	428e      	cmp	r6, r1
 800e6b2:	bfde      	ittt	le
 800e6b4:	1b89      	suble	r1, r1, r6
 800e6b6:	18b0      	addle	r0, r6, r2
 800e6b8:	18a4      	addle	r4, r4, r2
 800e6ba:	0049      	lsls	r1, r1, #1
 800e6bc:	3d01      	subs	r5, #1
 800e6be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e6c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e6c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e6ca:	d1f0      	bne.n	800e6ae <__ieee754_sqrt+0x92>
 800e6cc:	462a      	mov	r2, r5
 800e6ce:	f04f 0e20 	mov.w	lr, #32
 800e6d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e6d6:	4281      	cmp	r1, r0
 800e6d8:	eb06 0c05 	add.w	ip, r6, r5
 800e6dc:	dc02      	bgt.n	800e6e4 <__ieee754_sqrt+0xc8>
 800e6de:	d113      	bne.n	800e708 <__ieee754_sqrt+0xec>
 800e6e0:	459c      	cmp	ip, r3
 800e6e2:	d811      	bhi.n	800e708 <__ieee754_sqrt+0xec>
 800e6e4:	f1bc 0f00 	cmp.w	ip, #0
 800e6e8:	eb0c 0506 	add.w	r5, ip, r6
 800e6ec:	da43      	bge.n	800e776 <__ieee754_sqrt+0x15a>
 800e6ee:	2d00      	cmp	r5, #0
 800e6f0:	db41      	blt.n	800e776 <__ieee754_sqrt+0x15a>
 800e6f2:	f100 0801 	add.w	r8, r0, #1
 800e6f6:	1a09      	subs	r1, r1, r0
 800e6f8:	459c      	cmp	ip, r3
 800e6fa:	bf88      	it	hi
 800e6fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e700:	eba3 030c 	sub.w	r3, r3, ip
 800e704:	4432      	add	r2, r6
 800e706:	4640      	mov	r0, r8
 800e708:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e70c:	f1be 0e01 	subs.w	lr, lr, #1
 800e710:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e714:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e718:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e71c:	d1db      	bne.n	800e6d6 <__ieee754_sqrt+0xba>
 800e71e:	430b      	orrs	r3, r1
 800e720:	d006      	beq.n	800e730 <__ieee754_sqrt+0x114>
 800e722:	1c50      	adds	r0, r2, #1
 800e724:	bf13      	iteet	ne
 800e726:	3201      	addne	r2, #1
 800e728:	3401      	addeq	r4, #1
 800e72a:	4672      	moveq	r2, lr
 800e72c:	f022 0201 	bicne.w	r2, r2, #1
 800e730:	1063      	asrs	r3, r4, #1
 800e732:	0852      	lsrs	r2, r2, #1
 800e734:	07e1      	lsls	r1, r4, #31
 800e736:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e73a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e73e:	bf48      	it	mi
 800e740:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e744:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e748:	4614      	mov	r4, r2
 800e74a:	e781      	b.n	800e650 <__ieee754_sqrt+0x34>
 800e74c:	0ad9      	lsrs	r1, r3, #11
 800e74e:	3815      	subs	r0, #21
 800e750:	055b      	lsls	r3, r3, #21
 800e752:	2900      	cmp	r1, #0
 800e754:	d0fa      	beq.n	800e74c <__ieee754_sqrt+0x130>
 800e756:	02cd      	lsls	r5, r1, #11
 800e758:	d50a      	bpl.n	800e770 <__ieee754_sqrt+0x154>
 800e75a:	f1c2 0420 	rsb	r4, r2, #32
 800e75e:	fa23 f404 	lsr.w	r4, r3, r4
 800e762:	1e55      	subs	r5, r2, #1
 800e764:	4093      	lsls	r3, r2
 800e766:	4321      	orrs	r1, r4
 800e768:	1b42      	subs	r2, r0, r5
 800e76a:	e78a      	b.n	800e682 <__ieee754_sqrt+0x66>
 800e76c:	4610      	mov	r0, r2
 800e76e:	e7f0      	b.n	800e752 <__ieee754_sqrt+0x136>
 800e770:	0049      	lsls	r1, r1, #1
 800e772:	3201      	adds	r2, #1
 800e774:	e7ef      	b.n	800e756 <__ieee754_sqrt+0x13a>
 800e776:	4680      	mov	r8, r0
 800e778:	e7bd      	b.n	800e6f6 <__ieee754_sqrt+0xda>
 800e77a:	bf00      	nop
 800e77c:	7ff00000 	.word	0x7ff00000

0800e780 <_init>:
 800e780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e782:	bf00      	nop
 800e784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e786:	bc08      	pop	{r3}
 800e788:	469e      	mov	lr, r3
 800e78a:	4770      	bx	lr

0800e78c <_fini>:
 800e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78e:	bf00      	nop
 800e790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e792:	bc08      	pop	{r3}
 800e794:	469e      	mov	lr, r3
 800e796:	4770      	bx	lr
